# $Id: configure.in,v 1.10 2005/07/18 23:23:57 lile Exp $

dnl Process this file with autoconf to produce a configure script.
AC_INIT(README)
AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(dsh, 1.21)

dnl Checks for programs.
AC_PROG_AWK
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_LN_S

dnl Checks for libraries.
AC_SEARCH_LIBS(inet_aton, resolv)
AC_SEARCH_LIBS(gethostbyname, nsl)
AC_SEARCH_LIBS(basename, gen)

dnl ******************************
dnl readline checking
dnl ******************************
msg_readline=no
AC_ARG_WITH(readline,      [  --with-readline         use readline [default=yes]])
if test "x$with_readline" != "xno"; then
LIBS="$LIBS -lreadline"

	dnl Let's check all the possible places for readline
	for termlib in ncurses curses termcap terminfo termlib ; do
		AC_CHECK_LIB(${termlib}, tputs, [LIBS="-l${termlib} $LIBS"; break])
		LIBS="$ac_save_LIBS"
	done

	AC_MSG_CHECKING(for readline)
	AC_TRY_LINK(,[(void)readline(0);], RL_LIBS="-lreadline",
		AC_TRY_LINK(,[(void)readline(0);], 
		RL_LIBS="-lreadline -l${termlib}"))

	if test "x$RL_LIBS" = "x"; then
		AC_MSG_RESULT(not found)
	else
		AC_MSG_RESULT(found)
	fi
fi

if test "x$RL_LIBS" != "x"; then
	AC_MSG_CHECKING(for basic readline functions)

	ac_save_LIBS="$LIBS"

	LIBS="$LIBS $RL_LIBS"
	AC_TRY_LINK([
#include <stdio.h>
#include <readline/readline.h>], [
char *line; 
line = readline("prompt");], 
	[AC_TRY_LINK([
#include <stdio.h>
#include <readline/history.h>], [
add_history("test");],
	[msg_readline=partial])])

	LIBS="$ac_save_LIBS"

	if test "xmsg_readline" = "xno"; then
		AC_MSG_RESULT(no)
	else
		AC_MSG_RESULT(yes)
	fi
fi
if test "x$msg_readline" != "xno"; then
	AC_MSG_CHECKING(for extra readline functions)

	ac_save_LIBS="$LIBS"

	LIBS="$LIBS $RL_LIBS"
	AC_TRY_LINK([
#include <stdio.h>
#include <readline/readline.h>], [
rl_callback_read_char();], 
	[AC_TRY_LINK([
#include <stdio.h>
#include <readline/readline.h>], [
static void execline(char *line)
{}
rl_callback_handler_install("prompt", execline);],
	[AC_TRY_LINK([
#include <stdio.h>
#include <readline/readline.h>], [
rl_callback_handler_remove();],
	[AC_TRY_LINK([
#include <stdio.h>
#include <readline/readline.h>], [
rl_forced_update_display();],
	[msg_readline=full])])])])

	LIBS="$ac_save_LIBS"

	if test "x$msg_readline" != "xfull"; then
		AC_MSG_RESULT(no)
	else
		AC_MSG_RESULT(yes)
	fi
fi

if test "x$msg_readline" = "xpartial"; then
	AC_DEFINE(HAVE_READLINE, 1, [Define if we have readline support])
fi
if test "x$msg_readline" = "xfull"; then
	AC_DEFINE(HAVE_READLINE, 1, [Define if we have readline support])
	AC_DEFINE(HAVE_READLINE_EXTRA, 1, [Define if we have extra readline support])
fi
AC_SUBST(RL_CFLAGS)
AC_SUBST(RL_LIBS)

dnl
dnl begin --with-rsh
dnl

# What remote shell transport should dsh default to using?
AC_ARG_WITH(
  [rsh],
  [  --with-rsh		  Specify the remote shell program (default rsh)], ,
  [with_rsh="rsh ssh"])

if test no = "$with_rsh"; then
  AC_MSG_WARN([Failed to find usable remote shell. Using 'rsh'.])
  with_rsh=rsh
elif test yes = "$with_rsh"; then
  # Make --with-rsh mean the same thing as --with-rsh=rsh
  with_rsh=rsh
fi

if echo $with_rsh |grep ^/ >/dev/null; then
  # If $with_rsh is an absolute path, issue a warning if the executable
  # doesn't exist or isn't usable, but then trust the user and use it
  # regardless
  with_default_rsh=$with_rsh
  AC_MSG_CHECKING([for a remote shell])
  if ! test -f $with_rsh \
      || ! test -x $with_rsh; then
    # warn the user that they may encounter problems
    AC_MSG_WARN([$with_rsh is not a path to an executable file])
  fi
else
  # Search for a remote shell
  dnl AC_CHECK_PROGS([with_default_rsh], [$with_rsh], "rsh")
  AC_PATH_PROGS([with_default_rsh], [$with_rsh], , [$PATH])
fi

AC_DEFINE_UNQUOTED(
  [RSH_DFLT], ["$with_default_rsh"],
  [The default remote shell to use.])
RSH_DFLT=$with_default_rsh
AC_SUBST(RSH_DFLT)
dnl
dnl end --with-rsh
dnl

dnl
dnl begin --with-ssh
dnl

# What remote secure shell transport should dsh default to using?
AC_ARG_WITH(
  [ssh],
  [  --with-ssh		  Specify the remote secure shell program (default ssh)], ,
  [with_ssh="ssh"])

if test no = "$with_ssh"; then
  AC_MSG_WARN([Failed to find usable remote shell. Using 'ssh'.])
  with_ssh=ssh
elif test yes = "$with_ssh"; then
  # Make --with-ssh mean the same thing as --with-ssh=ssh
  with_ssh=ssh
fi

if echo $with_ssh |grep ^/ >/dev/null; then
  # If $with_ssh is an absolute path, issue a warning if the executable
  # doesn't exist or isn't usable, but then trust the user and use it
  # regardless
  with_default_ssh=$with_ssh
  AC_MSG_CHECKING([for a remote shell])
  if ! test -f $with_ssh \
      || ! test -x $with_ssh; then
    # warn the user that they may encounter problems
    AC_MSG_WARN([$with_ssh is not a path to an executable file])
  fi
else
  # Search for a remote shell
  dnl AC_CHECK_PROGS([with_default_ssh], [$with_ssh], "ssh")
  AC_PATH_PROGS([with_default_ssh], [$with_ssh], , [$PATH])
fi

AC_DEFINE_UNQUOTED(
  [SSH_DFLT], ["$with_default_ssh"],
  [The default secure shell to use.])
SSH_DFLT=$with_default_ssh
AC_SUBST(SSH_DFLT)
dnl
dnl end --with-ssh
dnl

# What is the default for DSHPATH?
AC_ARG_WITH(dshpath,
	[  --with-dshpath=PATH	  The default value for DSHPATH],
	[with_dshpath=$withval],
	[with_dshpath=''])
if test "$with_dshpath" != "yes" && test -z "$with_dshpath"; then
	with_dshpath=''
else
	AC_MSG_RESULT([Setting default DSHPATH to $with_dshpath])
	AC_DEFINE_UNQUOTED(DSHPATH_DFLT,"$with_dshpath", Define to specify the default DSHPATH.)
fi

dnl Checks for header files.
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(fcntl.h sys/time.h unistd.h netdb.h readline/readline.h readline/history.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_PID_T
AC_HEADER_TIME

dnl Checks for library functions.
AC_FUNC_MMAP
AC_TYPE_SIGNAL
AC_FUNC_VPRINTF
AC_CHECK_FUNCS(unsetenv putenv select strdup strerror readline add_history)

AC_EXEEXT
AC_OUTPUT(Makefile dsh/Makefile dshbak/Makefile dsh.spec)
