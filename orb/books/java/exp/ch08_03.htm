<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 8] 8.3 Serialization</TITLE><META NAME="author" CONTENT="Pat Niemeyer and Josh Peck"><META NAME="date" CONTENT="Tue Jul 22 18:57:20 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="Java"><META NAME="title" CONTENT="Exploring Java"><META HTTP-EQUIV="Content-Script-Type" CONTENT="text/javascript"></HEAD><BODY BGCOLOR="#FFFFFF"><DIV CLASS=htmlnav><H1><a href='index.htm'><IMG SRC="gifs/smbanner.gif"     ALT="Exploring Java" border=0></a></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch08_02.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><B><FONT FACE="ARIEL,HELVETICA,HELV,SANSERIF" SIZE="-1">Chapter 8<br>Input/Output Facilities</FONT></B></TD><td width=172 align=right valign=top><A HREF="ch08_04.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr></table>&nbsp;<hr align=left width=515></DIV><DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="EXJ-CH-8-SECT-3">8.3 Serialization</A></h2><P CLASS=para>Using streams and files, you can write an application that saves andloads its data to a disk drive.  Java 1.1 provides an even more powerfulmechanism called <I CLASS=emphasis>object serialization</I>that does a lot of the work for you.In its simplest form, object serialization is an automatic way tosave and load an object.  However, object serializationhas depths that we cannot plumbwithin the scope of this book, including complete control over theserialization process and interesting conundrums like classversioning.<P CLASS=para>Basically, any class that implements the <tt CLASS=literal>Serializable</tt>interface can be saved and restored from a stream.  Special stream subclasses,<tt CLASS=literal>ObjectInputStream</tt> and<tt CLASS=literal>ObjectOutputStream</tt>, are used to serializeprimitive types and objects.  Subclasses of <tt CLASS=literal>Serializable</tt>classes are also serializable.  The default serialization mechanism saves thevalue of an object's non<tt CLASS=literal>static</tt>and non<tt CLASS=literal>volatile</tt> member variables.<P CLASS=para>One of the tricky things about serialization is that when an object isserialized, any object references it contains should also be serialized.  We'llsee this in an upcoming example.  The implication is that any object weserialize must only contain references to <tt CLASS=literal>Serializable</tt>objects.  There are ways around this problem, like marking nonserializablemembers as <tt CLASS=literal>volatile</tt> or overriding thedefault serialization mechanisms.<P CLASS=para>In the following example, we create a <tt CLASS=literal>Hashtable</tt>and write it to a disk file called <tt CLASS=literal>h.ser</tt>.<DIV CLASS=programlisting><P><PRE>import java.io.*;import java.util.*;public class Save {  public static void main(String[] args) {    Hashtable h = new Hashtable();    h.put("string", "Gabriel Garcia Marquez");    h.put("int", new Integer(26));    h.put("double", new Double(Math.PI));        try {      FileOutputStream fileOut = new FileOutputStream("h.ser");      ObjectOutputStream out = new ObjectOutputStream(fileOut);      out.writeObject(h);    }    catch (Exception e) {      System.out.println(e);    }  }}</PRE></DIV><P CLASS=para>First we construct a <tt CLASS=literal>Hashtable</tt> with a fewelements in it.  Then, in the threelines of code inside the <tt CLASS=literal>try</tt> block,we write the <tt CLASS=literal>Hashtable</tt> to a file called<tt CLASS=literal>h.ser</tt>, using the<tt CLASS=literal>writeObject()</tt>method of <tt CLASS=literal>ObjectOutputStream</tt>.  The<tt CLASS=literal>ObjectOutputStream</tt> class is a lot like the<tt CLASS=literal>DataOutputStream</tt> class, except that it includesthe powerful <tt CLASS=literal>writeObject()</tt> method.The <tt CLASS=literal>Hashtable</tt> object is serializable becauseit implements the<tt CLASS=literal>Serializable</tt> interface.<P CLASS=para>The <tt CLASS=literal>Hashtable</tt> we created has internal referencesto the items it contains.  Thus, these components areautomatically serialized along with the <tt CLASS=literal>Hashtable</tt>.We'll see this in the next example when we deserialize the<tt CLASS=literal>Hashtable</tt>.<DIV CLASS=programlisting><P><PRE>import java.io.*;import java.util.*;public class Load {  public static void main(String[] args) {    try {      FileInputStream fileIn = new FileInputStream("h.ser");      ObjectInputStream in = new ObjectInputStream(fileIn);      Hashtable h = (Hashtable)in.readObject();      System.out.println(h.toString());    }    catch (Exception e) {      System.out.println(e);    }  }}</PRE></DIV><P CLASS=para>In this example, we read the <tt CLASS=literal>Hashtable</tt> fromthe <tt CLASS=literal>h.ser</tt> file, using the<tt CLASS=literal>readObject()</tt> method of<tt CLASS=literal>ObjectInputStream</tt>.  The<tt CLASS=literal>ObjectInputStream</tt> class is a lotlike <tt CLASS=literal>DataInputStream</tt>,except it includes the <tt CLASS=literal>readObject()</tt>method.  The return type of <tt CLASS=literal>readObject()</tt>is <tt CLASS=literal>Object</tt>, so we need to castit to a <tt CLASS=literal>Hashtable</tt>.  Finally, weprint out the contents of the <tt CLASS=literal>Hashtable</tt>using its <tt CLASS=literal>toString()</tt> method.</DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch08_02.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td><td width=172 align=right valign=top><A HREF="ch08_04.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>Files</td><td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td><td width=172 align=right valign=top>Data compression</td></tr></table><hr align=left width=515><IMG SRC="gifs/smnavbar.gif" USEMAP="#map" BORDER=0> <MAP NAME="map"> <AREA SHAPE=RECT COORDS="0,0,108,15" HREF="../javanut/index.htm"alt="Java in a Nutshell"> <AREA SHAPE=RECT COORDS="109,0,200,15" HREF="../langref/index.htm" alt="Java Language Reference"> <AREA SHAPE=RECT COORDS="203,0,290,15" HREF="../awt/index.htm" alt="Java AWT"> <AREA SHAPE=RECT COORDS="291,0,419,15" HREF="../fclass/index.htm" alt="Java Fundamental Classes"> <AREA SHAPE=RECT COORDS="421,0,514,15" HREF="../exp/index.htm" alt="Exploring Java"> </MAP></DIV></BODY></HTML>