<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 8] 8.4 Data compression</TITLE><META NAME="author" CONTENT="Pat Niemeyer and Josh Peck"><META NAME="date" CONTENT="Tue Jul 22 18:57:21 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="Java"><META NAME="title" CONTENT="Exploring Java"><META HTTP-EQUIV="Content-Script-Type" CONTENT="text/javascript"></HEAD><BODY BGCOLOR="#FFFFFF"><DIV CLASS=htmlnav><H1><a href='index.htm'><IMG SRC="gifs/smbanner.gif"     ALT="Exploring Java" border=0></a></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch08_03.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><B><FONT FACE="ARIEL,HELVETICA,HELV,SANSERIF" SIZE="-1">Chapter 8<br>Input/Output Facilities</FONT></B></TD><td width=172 align=right valign=top><A HREF="ch09_01.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr></table>&nbsp;<hr align=left width=515></DIV><DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="EXJ-CH-8-SECT-4">8.4 Data compression</A></h2><P CLASS=para>Java 1.1 includes a new package, <tt CLASS=literal>java.util.zip</tt>, that contains classes you can use for data compression.  In this sectionwe'll talk about how to use the classes.  We'll also present two usefulexample programs that build on what you have just learned about streamsand files.<P CLASS=para>Theclasses in the <tt CLASS=literal>java.util.zip</tt>package support two widespread compression formats: GZIP andZIP.  Both of these are based on the ZLIB compression algorithm, which isdiscussed in RFC 1950, RFC 1951, and RFC 1952.  These documents are availableat <tt CLASS=literal>ftp://ds.internic.net/rfc/</tt>.  I don't recommendreading these documents unless you want to implement your own compression algorithm orotherwise extend the functionality of the <tt CLASS=literal>java.util.zip</tt>package.<DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="EXJ-CH-8-SECT-4.1">Compressing data</A></h3><P CLASS=para>The <tt CLASS=literal>java.util.zip</tt> class provides two<tt CLASS=literal>FilterOutputStream</tt> subclasses to write compresseddata to a stream.  To write compressed data in the GZIP format, simply wrapa <tt CLASS=literal>GZIPOutputStream</tt>around an underlying stream and write to it.  The followingis a complete example that shows how to compress a file using the GZIP format.<DIV CLASS=programlisting><P><PRE>import java.io.*;import java.util.zip.*;public class GZip {  public static int sChunk = 8192;  public static void main(String[] args) {    if (args.length != 1) {      System.out.println("Usage: GZip source");      return;    }    // Create output stream.    String zipname = args[0] + ".gz";    GZIPOutputStream zipout;    try {      FileOutputStream out = new FileOutputStream(zipname);      zipout = new GZIPOutputStream(out);    }    catch (IOException e) {      System.out.println("Couldn't create " + zipname + ".");      return;    }    byte[] buffer = new byte[sChunk];    // Compress the file.    try {      FileInputStream in = new FileInputStream(args[0]);      int length;      while ((length = in.read(buffer, 0, sChunk)) != -1)        zipout.write(buffer, 0, length);      in.close();    }    catch (IOException e) {      System.out.println("Couldn't compress " + args[0] + ".");    }    try { zipout.close(); }    catch (IOException e) {}  }}</PRE></DIV><P CLASS=para>First we check to make sure we have a command-line argument representing a file name.  Thenwe construct a <tt CLASS=literal>GZIPOutputStream</tt> wrapped arounda <tt CLASS=literal>FileOutputStream</tt> representing the given file name with the<tt CLASS=literal>.gz</tt> suffix appended.  With this in place, we open thesource file.  We read chunks of data from it and write them into the<tt CLASS=literal>GZIPOutputStream</tt>.  Finally, we clean up by closing ouropen streams.<P CLASS=para>Writing data to a ZIP file is a little more involved, but still quite manageable.  Whilea GZIP file contains only one compressed file, a ZIP file is actually an archive of files,some (or all) of which may be compressed.  Each item in the ZIP file is representedby a <tt CLASS=literal>ZipEntry</tt> object.  When writing to a<tt CLASS=literal>ZipOutputStream</tt>, you'll need to call<tt CLASS=literal>putNextEntry()</tt> before writing the data for each item.The following example shows how to create a <tt CLASS=literal>ZipOutputStream</tt>.You'll notice it's just like creating a <tt CLASS=literal>GZIPOutputStream</tt>.<DIV CLASS=programlisting><P><PRE>ZipOutputStream zipout;try {  FileOutputStream out = new FileOutputStream("archive.zip");  zipout = new ZipOutputStream(out);}catch (IOException e) {}</PRE></DIV><P CLASS=para>Let's say we have two files we want to write into this archive.  Beforewe begin writing we need to call <tt CLASS=literal>putNextEntry()</tt>.We'll create a simple entry with just a name.  There are otherfields in <tt CLASS=literal>ZipEntry</tt> thatyou can set, but most of the time you won't need to bother withthem.<DIV CLASS=programlisting><P><PRE>try {  ZipEntry entry = new ZipEntry("First");  zipout.putNextEntry(entry);}catch (IOException e) {}</PRE></DIV><P CLASS=para>At this point you can write the contents of the first file into thearchive.  When you're ready to write the second file into the archive,you simply call <tt CLASS=literal>putNextEntry()</tt> again:<DIV CLASS=programlisting><P><PRE>try {  ZipEntry entry = new ZipEntry("Second");  zipout.putNextEntry(entry);}catch (IOException e) {}</PRE></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="EXJ-CH-8-SECT-4.2">Decompressing data</A></h3><P CLASS=para>To decompress data, you can use one of the two<tt CLASS=literal>FilterInputStream</tt> subclasses provided in<tt CLASS=literal>java.util.zip</tt>.To decompress data in the GZIP format, simply wrapa <tt CLASS=literal>GZIPInputStream</tt>around an underlying stream and read from it.  The followingis a complete example that shows how to decompress a GZIP file.<DIV CLASS=programlisting><P><PRE>import java.io.*;import java.util.zip.*;public class GUnzip {  public static int sChunk = 8192;  public static void main(String[] args) {    if (args.length != 1) {      System.out.println("Usage: GUnzip source");      return;    }    // Create input stream.    String zipname, source;    if (args[0].endsWith(".gz")) {      zipname = args[0];      source = args[0].substring(0, args[0].length() - 3);    }    else {      zipname = args[0] + ".gz";      source = args[0];    }    GZIPInputStream zipin;    try {      FileInputStream in = new FileInputStream(zipname);      zipin = new GZIPInputStream(in);    }    catch (IOException e) {      System.out.println("Couldn't open " + zipname + ".");      return;    }    byte[] buffer = new byte[sChunk];    // Decompress the file.    try {      FileOutputStream out = new FileOutputStream(source);      int length;      while ((length = zipin.read(buffer, 0, sChunk)) != -1)        out.write(buffer, 0, length);      out.close();    }    catch (IOException e) {      System.out.println("Couldn't decompress " + args[0] + ".");    }    try { zipin.close(); }    catch (IOException e) {}  }}</PRE></DIV><P CLASS=para>First we check to make sure we have a command-line argument representing a file name.  Ifthe argument ends with <tt CLASS=literal>.gz</tt>, we figure out what the file name for theuncompressed file should be.  Otherwise we just use the given argument and assume thecompressed file has the <tt CLASS=literal>.gz</tt> suffix.Thenwe construct a <tt CLASS=literal>GZIPInputStream</tt> wrapped arounda <tt CLASS=literal>FileInputStream</tt> representing the compressed file.With this in place, we open thetarget file.  We read chunks of data from the <tt CLASS=literal>GZIPInputStream</tt>and write them into thetarget file.  Finally, we clean up by closing ouropen streams.<P CLASS=para>Again, the ZIP archive presents a little more complexity than theGZIP file.  When readingfrom a <tt CLASS=literal>ZipInputStream</tt>, you should call<tt CLASS=literal>getNextEntry()</tt> before reading each item.  When<tt CLASS=literal>getNextEntry()</tt> returns <tt CLASS=literal>null</tt>,there are no more items to read.The following example shows how to create a <tt CLASS=literal>ZipInputStream</tt>.You'll notice it's just like creating a <tt CLASS=literal>GZIPInputStream</tt>.<DIV CLASS=programlisting><P><PRE>ZipInputStream zipin;try {  FileInputStream in = new FileInputStream("archive.zip");  zipin = new ZipInputStream(in);}catch (IOException e) {}</PRE></DIV><P CLASS=para>Suppose we want to read two files from this archive.  Beforewe begin reading we need to call <tt CLASS=literal>getNextEntry()</tt>.At the least, the entry will give us a name of the item weare reading from the archive.<DIV CLASS=programlisting><P><PRE>try {  ZipEntry first = zipin.getNextEntry();}catch (IOException e) {}</PRE></DIV><P CLASS=para>At this point you can read the contents of the first item in thearchive.  When you come to the end of the item, the<tt CLASS=literal>read()</tt> method willreturn -1.  Now you can call<tt CLASS=literal>getNextEntry()</tt> again to readthe second item from the archive.<DIV CLASS=programlisting><P><PRE>try {  ZipEntry second = zipin.getNextEntry();}catch (IOException e) {}</PRE></DIV><P CLASS=para>If you call <tt CLASS=literal>getNextEntry()</tt> andit returns <tt CLASS=literal>null</tt>, then thereare no more items and you have reached the end of the archive.</DIV></DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch08_03.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><img src='gifs/txthome.gif' border=0 alt='Home'></a></td><td width=172 align=right valign=top><A HREF="ch09_01.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>Serialization</td><td width=171 align=center valign=top><a href="index/idx_0.htm"><img src='gifs/index.gif' alt='Book Index' border=0></a></td><td width=172 align=right valign=top>Network Programming</td></tr></table><hr align=left width=515><IMG SRC="gifs/smnavbar.gif" USEMAP="#map" BORDER=0> <MAP NAME="map"> <AREA SHAPE=RECT COORDS="0,0,108,15" HREF="../javanut/index.htm"alt="Java in a Nutshell"> <AREA SHAPE=RECT COORDS="109,0,200,15" HREF="../langref/index.htm" alt="Java Language Reference"> <AREA SHAPE=RECT COORDS="203,0,290,15" HREF="../awt/index.htm" alt="Java AWT"> <AREA SHAPE=RECT COORDS="291,0,419,15" HREF="../fclass/index.htm" alt="Java Fundamental Classes"> <AREA SHAPE=RECT COORDS="421,0,514,15" HREF="../exp/index.htm" alt="Exploring Java"> </MAP></DIV></BODY></HTML>