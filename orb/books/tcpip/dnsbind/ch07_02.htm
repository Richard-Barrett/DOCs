<HTML><HEAD><TITLE>[Chapter 7] 7.2 Updating db Files</TITLE><METANAME="DC.title"CONTENT="DNS &amp; BIND"><METANAME="DC.creator"CONTENT="Cricket Liu &amp; Paul Albitz"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1999-01-06T18:30:24Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-512-2"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch07_01.htm"TITLE="7. Maintaining BIND"><LINKREL="prev"HREF="ch07_01.htm"TITLE="7.1 BIND Name Server Signals"><LINKREL="next"HREF="ch07_03.htm"TITLE="7.3 Organizing Your Files"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="DNS &amp; BIND"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,65"HREF="index.htm"ALT="DNS &amp; BIND"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/dsrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch07_01.htm"TITLE="7.1 BIND Name Server Signals"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 7.1 BIND Name Server Signals"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 7<BR>Maintaining <SPANCLASS="acronym">BIND</SPAN></FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch07_03.htm"TITLE="7.3 Organizing Your Files"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 7.3 Organizing Your Files"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="AUTOID-6482">7.2 Updating db Files</A></H2><PCLASS="para"><ACLASS="indexterm"NAME="DNS3-IDX-7-UPDATING-DB-FILES"></A><ACLASS="indexterm"NAME="DNS3-IDX-7-DB-FILES-UPDATING"></A>Something<ACLASS="indexterm"NAME="DNS3-IDX-7-NAME-SERVERS-MAINTAINING-UPDATING-DB-FILES"></A><ACLASS="indexterm"NAME="DNS3-IDX-7-ADMINISTRATION-NAME-SERVER-MAINTENANCE-UPDATING-DB-FILES"></A><ACLASS="indexterm"NAME="DNS3-IDX-7-BIND-BERKELEY-INTERNET-NAME-DOMAIN-NAME-SERVER-MAINTAINENCE-UPDATING-DB-FILES"></A>is always changing on your network&nbsp;- the newworkstations arrive, you finally retire or sell the relic, or you movea host to a different network. Each change means the db files must bemodified. Should you make the changes manually? Should you wimp outand use a tool to help you?</P><PCLASS="para">First, we'll discuss how to make the changes manually. Thenwe'll talk about a tool to help out: <KBDCLASS="command">h2n</KBD>. Actually,we recommend that you use a tool to create the db files&nbsp;- we werekidding about that wimp stuff, okay? Or, at least use a tool toincrement the serial number for you. The syntax of the<SPANCLASS="acronym">DNS</SPAN> files lends itself to making mistakes. Itdoesn't help that the address and pointer records are in differentfiles, which must agree with each other. However, even when you use atool, it is critical to know what goes on when the files are updated,so we'll start with the manual method.</P><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="AUTOID-6506">7.2.1 Adding and Deleting Hosts</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-6509"></A><ACLASS="indexterm"NAME="AUTOID-6512"></A><ACLASS="indexterm"NAME="AUTOID-6515"></A>After creating your db files initially, it should be fairly apparentwhat needs to be changed when you add a new host. We'll go through thesteps here in case you weren't the one to set up those files, or ifyou'd just like a checklist to follow. Make these changes to your<EMCLASS="emphasis">primary</EM> master name server's<SPANCLASS="acronym">DNS</SPAN> database files. If you make the change to your<EMCLASS="emphasis">slave</EM> name server's backup files, the slave's datawill change, but the next zone transfer will overwrite it.</P><OLCLASS="orderedlist"><LICLASS="listitem"><PCLASS="para">Update the serial number in <ICLASS="filename">db.DOMAIN</I>.  Theserial number is likely to be at the top of the file, so it's easy todo first and reduces the chance that you'll forget.</P></LI><LICLASS="listitem"><PCLASS="para">Add any A (address), <SPANCLASS="acronym">CNAME</SPAN> (alias), and<SPANCLASS="acronym">MX</SPAN> (mail exchanger) records for the host to the<ICLASS="filename">db.DOMAIN</I> file.  We added the following resourcerecords to the <ICLASS="filename">db.movie</I> file when a new host(<ICLASS="systemitem.sitename">cujo</I>) was added to ournetwork:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">cujo  IN  A  192.253.253.5  ; cujo's internet address      IN MX  10 cujo        ; if possible, mail directly to cujo      IN MX  20 terminator  ; otherwise, deliver to our mail hub</PRE></BLOCKQUOTE></LI><LICLASS="listitem"><PCLASS="para">Update the serial number and add <SPANCLASS="acronym">PTR</SPAN> recordsto <EMCLASS="emphasis">each</EM> <ICLASS="filename">db.ADDR</I> file forwhich the host has an address. <ICLASS="systemitem.sitename">cujo</I> only has one address, on network<ICLASS="systemitem.sitename">192.253.253</I>; therefore, weadded the following <SPANCLASS="acronym">PTR</SPAN> record to the<ICLASS="filename">db.192.253.253</I> file:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">5  IN PTR cujo.movie.edu.</PRE></BLOCKQUOTE></LI><LICLASS="listitem"><PCLASS="para">Restart the primary master name server by sending it a<SPANCLASS="acronym">HUP</SPAN> signal; this forces it to load the newinformation:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen"># <CODECLASS="userinput"><B>kill -HUP `cat /etc/named.pid`</B></CODE></PRE></BLOCKQUOTE></LI></OL><PCLASS="para">After it has been restarted, the primary master name server willload the new data. Slave name servers will load this new data sometimewithin the time interval defined in the <SPANCLASS="acronym">SOA</SPAN> recordfor refreshing their data.</P><PCLASS="para">Sometimes your users won't want to wait for the slaves to pickup the new data&nbsp;- they'll want it available right away. (Are youwincing or nodding knowingly as you read this?) Can you force a slaveto load the new information right away? With version 8 masters andslaves, the slaves will pick up the new data quickly because theprimary master notifies the slave of changes within 15 minutes of thechange.  If your name server is 4.9 or later, you can send it a<SPANCLASS="acronym">HUP</SPAN> signal just as you did for your primary mastername server.  If your name server is 4.8.3 or earlier, remove all ofthe slave's backup files (or just the ones you want to force), killthe slave server, and start up a new one. Since the backup files aregone, the slave must immediately pull new copies of the zones.</P><PCLASS="para">To delete a host, remove the resource records from the<ICLASS="filename">db.DOMAIN</I> and from each<ICLASS="filename">db.ADDR</I> file pertaining to that host.  Incrementthe serial number in each file you changed and restart your primarymaster name server.</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="AUTOID-6555">7.2.2 <SPANCLASS="acronym">SOA</SPAN> Serial Numbers</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="DNS3-IDX-7-SERIAL-NUMBERS"></A><ACLASS="indexterm"NAME="DNS3-IDX-7-SLAVE-SECONDARY-NAME-SERVERS-SERIAL-NUMBER"></A><ACLASS="indexterm"NAME="DNS3-IDX-7-SOA-RECORDS"></A><ACLASS="indexterm"NAME="AUTOID-6566"></A><ACLASS="indexterm"NAME="AUTOID-6570"></A>Each of the <SPANCLASS="acronym">DNS</SPAN> database files has a serialnumber. Every time the data in the db file is changed, the serialnumber must be incremented. If the serial number is not incremented,slave name servers for the zone will not pick up the updated data. Thechange is simple. If the original db file had the following<SPANCLASS="acronym">SOA</SPAN> record:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">movie.edu. IN SOA terminator.movie.edu. al.robocop.movie.edu. (                                100     ; Serial                                10800   ; Refresh                                3600    ; Retry                                604800  ; Expire                                86400 ) ; Minimum TTL</PRE></BLOCKQUOTE><PCLASS="para">the updated db file would have the following<SPANCLASS="acronym">SOA</SPAN> record:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">movie.edu. IN SOA terminator.movie.edu. al.robocop.movie.edu. (                                101     ; Serial                                10800   ; Refresh                                3600    ; Retry                                604800  ; Expire                                86400 ) ; Minimum TTL</PRE></BLOCKQUOTE><PCLASS="para">This simple change is the key to distributing the data to all ofyour secondaries. Failing to increment the serial number is the mostcommon mistake made when updating a name server. The first few timesyou make a change to a <SPANCLASS="acronym">DNS</SPAN> database file, you'llremember to update the serial number because this process is new andyou are paying close attention. After the db file modifications becomesecond nature, you'll make some <SPANCLASS="quote">"quickie"</SPAN> little change,forget to update the serial number...and none of the slaves will pickup the new data. That's why you should use a tool that updates theserial number for you! Your tool could be <KBDCLASS="command">h2n</KBD> orsomething written locally, but use a tool.</P><PCLASS="para"><SPANCLASS="acronym">BIND</SPAN> does allow you to use a decimal serialnumber, like 1.1, but we recommend that you stay with integervalues. Here's how <SPANCLASS="acronym">BIND</SPAN> version 4 handles<ACLASS="indexterm"NAME="AUTOID-6587"></A>decimal serial numbers: if there is a decimal point in the serialnumber, <SPANCLASS="acronym">BIND</SPAN> multiplies the digits to the left ofthe decimal by 1000. The digits to the right of the decimal point arethen concatenated to the digits on the left. Therefore, a number like1.1 is converted to 10001 internally. 1.10 is converted to100010. This creates certain anomalies; for example, 1.1 is<SPANCLASS="quote">"greater"</SPAN> than 2, and 1.10 is <SPANCLASS="quote">"greater"</SPAN> than2.1. Because this is so counterintuitive, it's best to stick withinteger serial numbers.</P><PCLASS="para">There are several good ways to manage<ACLASS="indexterm"NAME="AUTOID-6593"></A>integer serial numbers. The obvious way is just to use a counter:increment the serial number by one each time the file ismodified. Another method is to derive the serial number from thedate. For example, you could use the eight-digit number formed by<CODECLASS="replaceable"><I>YYYYMMDD</I></CODE>. Suppose today is January 15,1997. In this form, your serial number would be 19970115. This schemeonly allows one update per day, though, and that may not beenough. Add another two digits to this number to indicate how manytimes the file has been updated that day. The first number for January15, 1997, would then be 1997011500. The next modification that daywould change the serial number to 1997011501.  This scheme allows 100updates per day.  <KBDCLASS="command">h2n</KBD> will generate the serialnumber from the date if you use the <ICLASS="option">-y</I> option.Whatever scheme you choose, the serial number must fit in a 32-bitinteger.</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="AUTOID-6598">7.2.3 Starting Over with a New Serial Number</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-6601"></A>What do you do if the serial number on one of your zones accidentallybecomes very large and you want to change it back to a more reasonablevalue? There is a way that works with all versions of<SPANCLASS="acronym">BIND</SPAN>, and a couple of ways that work with version4.9 and later.</P><PCLASS="para">The way that always works with all versions is to purge yourslaves of any knowledge of the old serial number. Then you can startnumbering from one (or any convenient point). Here's how. First,change the serial number on your primary master server and restart it;now the primary master server has the new integer serial number.  Logonto one of your slave name server hosts and kill the server processwith the command <KBDCLASS="command">kill `cat /etc/named.pid`</KBD>.  Removeits backup copies of the<ACLASS="indexterm"NAME="AUTOID-6606"></A>db files (e.g., <KBDCLASS="command">rm db.movie db.192.249.249db.192.253.253</KBD>). Start up your slave name server. Since thebackup copies were removed, the slave must load a new version of the<SPANCLASS="acronym">DNS</SPAN> database files&nbsp;- picking up the new serialnumbers. This process must be repeated for each slave server. If thereare any servers not under your control backing up your zones, you'llhave to contact their administrators to get them to do thesame.</P><PCLASS="para">If all of your secondaries are version 4.9 and later, you havetwo choices, and both involve two steps. One method involvessynchronizing the serial number at zero, and the other involvesincrementing the serial number by the largest amount possible.</P><PCLASS="para">If you set the zone serial number to<ACLASS="indexterm"NAME="AUTOID-6613"></A><ACLASS="indexterm"NAME="AUTOID-6615"></A>zero, each 4.9 slave will transfer the zone the next time itchecks. Serial number zero is special in that way. In fact, the zonewill be transferred <EMCLASS="emphasis">every</EM> time the slave checks,so don't forget to increment the serial number once all the slaveshave synchronized on serial number zero. But there is a limit to howfar you can increment the serial number.  Read on.</P><PCLASS="para">The other method of fixing the serial number (with 4.9 and laterslaves) will be easier to understand if we first cover some backgroundmaterial. The <SPANCLASS="acronym">DNS</SPAN> serial number is a 32-bitunsigned integer. Its value ranges from 0 to 4,294,967,295. The<SPANCLASS="acronym">DNS</SPAN> serial number uses<ACLASS="indexterm"NAME="AUTOID-6622"></A><ICLASS="firstterm">sequence space arithmetic</I>, which means that forany serial number, half of the numbers in the number space(2,147,483,647 numbers) are less than the serial number, and half ofthe numbers are larger.</P><PCLASS="para">Let's go over an example of sequence space numbers. Suppose theserial number is 5. Serial numbers 6 through (5 + 2,147,483,647) arelarger than serial number 5. Serial numbers (5 + 2,147,483,649)through 4 are smaller serial numbers. Notice that the serial numberwrapped around to 4 after reaching 4,294,967,295. Notice also that wedidn't include the number (5 + 2,147,483,648) because this is exactlyhalfway around the number space, and it could be larger or smallerthan 5, depending on the implementation. To be safe, don't useit.</P><PCLASS="para">Now back to the original problem. If your zone serial number is25,000 and you want to start numbering at 1 again, you can speedthrough the serial number space in two steps. First, add the largestincrement possible to your serial number (25,000 + 2,147,483,647 =2,147,508,647). If the number you come up with is larger than4,294,967,295 (the largest 32-bit value), you'll have wrap around tothe beginning of the number space by subtracting 4,294,967,296 fromit. After changing the serial number, you must wait for all of yoursecondaries to pick up a new copy of the zone. Second, change the zoneserial number to its target value (1), which is now<EMCLASS="emphasis">larger</EM> than the current serial number(2,147,508,647). After the secondaries pick up a new copy of the zone,you're done!<ACLASS="indexterm"NAME="AUTOID-6628"></A><ACLASS="indexterm"NAME="AUTOID-6629"></A><ACLASS="indexterm"NAME="AUTOID-6630"></A><ACLASS="indexterm"NAME="AUTOID-6631"></A></P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="AUTOID-6635">7.2.4 Additional db File Entries</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-6638"></A>After you've been running a name server for a while, you may want toadd data to your name server to help you manage your zone. Have youever been stumped when someone asked you <EMCLASS="emphasis">where</EM> one of your hosts is?Maybe you don't even remember what kind of host it is. Administratorshave to manage larger and larger populations of hosts these days,making it easy to lose track of this information. The name server canhelp you out. And if one of your hosts is acting up and someonenotices remotely, the name server can help them get in touch withyou.</P><PCLASS="para">So far in the book, we've covered <SPANCLASS="acronym">SOA</SPAN>,<SPANCLASS="acronym">NS</SPAN>, A, <SPANCLASS="acronym">CNAME</SPAN>,<SPANCLASS="acronym">PTR</SPAN>, and <SPANCLASS="acronym">MX</SPAN> records. Theserecords are critical to everyday operation&nbsp;- name servers needthem to operate, and applications look up data of thesetypes. <SPANCLASS="acronym">DNS</SPAN> defines more data types. The next mostuseful resource record types are <SPANCLASS="acronym">TXT</SPAN> and<SPANCLASS="acronym">RP</SPAN>; these can be used to tell you the machine'slocation and responsible person. For a complete list of the resourcerecords, see <ACLASS="xref"HREF="appa_01.htm"TITLE="DNS Message Format and Resource Records">Appendix A, <CITECLASS="appendix">DNS Message Format and ResourceRecords</CITE></A>.</P><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="AUTOID-6652">7.2.4.1 General text information</A></H4><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-6655"></A><SPANCLASS="acronym">TXT</SPAN> stands for TeXT. Theserecords are simply a list of strings, each less than 256 characters inlength. Versions of <SPANCLASS="acronym">BIND</SPAN> prior to 4.8.3 do notsupport <SPANCLASS="acronym">TXT</SPAN> records. In version 4,<SPANCLASS="acronym">BIND</SPAN> limits the db file <SPANCLASS="acronym">TXT</SPAN>record to a single string of almost 2K of data.</P><PCLASS="para"><SPANCLASS="acronym">TXT</SPAN> records can be used for anything youwant; one use is to list a host's location:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">cujo  IN  TXT  &quot;Location: machine room dog house&quot;</PRE></BLOCKQUOTE><PCLASS="para"><SPANCLASS="acronym">BIND</SPAN> version 8 has the same 2K limit, but youcan specify the <SPANCLASS="acronym">TXT</SPAN> record as multiplestrings:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">cujo  IN  TXT  &quot;Location:&quot; &quot;machine room dog house&quot;</PRE></BLOCKQUOTE></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="AUTOID-6670">7.2.4.2 Responsible Person</A></H4><PCLASS="para">Domain administrators will undoubtedly develop a love/haterelationship with the<ACLASS="indexterm"NAME="AUTOID-6673"></A>Responsible Person, or<ACLASS="indexterm"NAME="AUTOID-6677"></A><SPANCLASS="acronym">RP</SPAN>, record. The <SPANCLASS="acronym">RP</SPAN> record can beattached to any domain name, internal or leaf, and indicates who isresponsible for that host or zone. This will enable you to locate themiscreant responsible for the host peppering you with<SPANCLASS="acronym">DNS</SPAN> queries, for example.  But it will also leadpeople to you when one of your hosts acts up.</P><PCLASS="para">The record takes two arguments as its record-specific data: anelectronic mail address, in domain name format, and a domain name,which points to additional data about the contact. The electronic mailaddress is in the same format the <SPANCLASS="acronym">SOA</SPAN> record uses:it substitutes a <SPANCLASS="quote">"."</SPAN> for the <SPANCLASS="quote">"@"</SPAN>. The nextargument is a domain name, which must have a <SPANCLASS="acronym">TXT</SPAN>record associated with it. The <SPANCLASS="acronym">TXT</SPAN> record thencontains free-format information about the contact, like full name andphone number. If you omit either field, you must specify the rootdomain (<SPANCLASS="quote">"."</SPAN>) as a placeholder instead.</P><PCLASS="para">Here are some example <SPANCLASS="acronym">RP</SPAN> (and associated)records:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">robocop      IN  RP   root.movie.edu.  hotline.movie.edu.             IN  RP   richard.movie.edu.  rb.movie.edu.hotline      IN  TXT  &quot;Movie U. Network Hotline, (415) 555-4111&quot;rb           IN  TXT  &quot;Richard Boisclair, (415) 555-9612&quot;</PRE></BLOCKQUOTE><PCLASS="para">Note that <SPANCLASS="acronym">TXT</SPAN> records for <ICLASS="systemitem.sitename">root.movie.edu</I> and <ICLASS="systemitem.sitename">richard.movie.edu</I> aren't necessary, sincethey're only the domain-name encoding of electronic mail addresses,not real domain names.</P><PCLASS="para">This resource record didn't exist when <SPANCLASS="acronym">BIND</SPAN>4.8.3 was implemented, but <SPANCLASS="acronym">BIND</SPAN> 4.9 supportsit. Check the documentation for your version of the name server to seeif it supports <SPANCLASS="acronym">RP</SPAN> before trying to use it.</P></DIV></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="AUTOID-6701">7.2.5 Generating the <SPANCLASS="acronym">BIND</SPAN> Database from the HostTables</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="DNS3-IDX-7-H2N-UTILITY"></A><ACLASS="indexterm"NAME="AUTOID-6707"></A><ACLASS="indexterm"NAME="AUTOID-6711"></A>As you saw in <ACLASS="xref"HREF="ch04_01.htm"TITLE="Setting Up BIND">Chapter 4, <CITECLASS="chapter">Setting Up <SPANCLASS="acronym">BIND</SPAN></CITE></A>, we defined awell-structured process for converting host table information to nameserver information. We've written a tool in Perl to automate thisprocess, called <KBDCLASS="command">h2n</KBD>. Using a tool to generate yourdata has one big advantage: there will be no syntax errors orinconsistencies in your database files&nbsp;- assuming we wrote<KBDCLASS="command">h2n</KBD> correctly!  One common inconsistency is havingan A (address) record for a host, but no corresponding<SPANCLASS="acronym">PTR</SPAN> (pointer) record, or the other way around.Because these data are in separate files, it is easy to err.</P><PCLASS="para">What does <KBDCLASS="command">h2n</KBD> do? Given the<ICLASS="filename">/etc/hosts</I> file and some command-line options,<KBDCLASS="command">h2n</KBD> creates the db files for your domain. As asystem administrator, you keep the host table current. Each time youmodify the host table, you run <KBDCLASS="command">h2n</KBD>again. <KBDCLASS="command">h2n</KBD> rebuilds each db file from scratch,assigning each new file the next higher serial number. It can be runmanually, or from a <KBDCLASS="command">cron</KBD> script each night. If youuse <KBDCLASS="command">h2n</KBD>, you'll never need to worry aboutforgetting to update the serial number.</P><PCLASS="para">First, <KBDCLASS="command">h2n</KBD> needs to know the name of yourdomain and your network numbers. These map conveniently into the dbfilenames: <ICLASS="systemitem.sitename">movie.edu</I> datagoes in <ICLASS="filename">db.movie</I>, and network 192.249.249 datagoes into <ICLASS="filename">db.192.249.249</I>.  The domain name andnetwork number are specified with the <ICLASS="option">-d</I> and<ICLASS="option">-n</I> flags, as follows:</P><DLCLASS="variablelist"><DTCLASS="term">-d domain</DT><DDCLASS="listitem"><PCLASS="para">The domain name of your zone.</P></DD><DTCLASS="term">-n network</DT><DDCLASS="listitem"><PCLASS="para">The network number of your network. If you are generating filesfor several networks, use several <ICLASS="option">-n</I> options on the command line. Omittrailing zeros from the network numbers.</P></DD></DL><PCLASS="para">The <KBDCLASS="command">h2n</KBD> command requires the<ICLASS="option">-d</I> flag and at least one <ICLASS="option">-n</I> flag;they have no default values. For example, to create the<SPANCLASS="acronym">BIND</SPAN> database for the zone <ICLASS="systemitem.sitename">movie.edu</I>, which consists of twonetworks, give the command:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>h2n -d movie.edu -n 192.249.249 -n 192.253.253</B></CODE></PRE></BLOCKQUOTE><PCLASS="para">For greater control over the data, you can use otheroptions:</P><DLCLASS="variablelist"><DTCLASS="term">-s server</DT><DDCLASS="listitem"><PCLASS="para">The servers for the <SPANCLASS="acronym">NS</SPAN> records. As with <ICLASS="option">-n</I>,use several <ICLASS="option">-s</I> options if you have multiple primary master or slaveservers. A version 8 server will <SPANCLASS="acronym">NOTIFY</SPAN> this listof servers when a zone changes.  The default is the host on which yourun <KBDCLASS="command">h2n</KBD>.</P></DD><DTCLASS="term">-h host</DT><DDCLASS="listitem"><PCLASS="para">The host for the <SPANCLASS="acronym">SOA</SPAN> record. <CODECLASS="replaceable"><I>host</I></CODE> must be theprimary master server to ensure proper operation of the version 8<SPANCLASS="acronym">NOTIFY</SPAN> feature.  The default is the host on whichyou run <KBDCLASS="command">h2n</KBD>.</P></DD><DTCLASS="term">-u user</DT><DDCLASS="listitem"><PCLASS="para">The mail address of the person in charge of the domain'sdata. This defaults to <ACLASS="email"HREF="mailto:root"TITLE="root">root</A> on the host on which you run<KBDCLASS="command">h2n</KBD>.</P></DD><DTCLASS="term">-o other</DT><DDCLASS="listitem"><PCLASS="para">Other <SPANCLASS="acronym">SOA</SPAN> values, not including the serialnumber, as a colon-separated list. These default to10800:3600:604800:86400.</P></DD><DTCLASS="term">-f file</DT><DDCLASS="listitem"><PCLASS="para">Read the <KBDCLASS="command">h2n</KBD> options from the named <CODECLASS="replaceable"><I>file</I></CODE>,rather than from the command line. If you have lots of options, keepthem in a file.</P></DD><DTCLASS="term">-v 4|8</DT><DDCLASS="listitem"><PCLASS="para">Generate configuration files for version 4 or version 8.Version 4 is the default.</P></DD><DTCLASS="term">-y</DT><DDCLASS="listitem"><PCLASS="para">Generate the serial number from the date.</P></DD></DL><PCLASS="para">Here is an example that uses all the options mentioned sofar:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>h2n -f opts</B></CODE></PRE></BLOCKQUOTE><PCLASS="para">Contents of file <ICLASS="filename">opts</I>:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">-d movie.edu-n 192.249.249-n 192.253.253-s terminator.movie.edu-s wormhole-u al-h terminator-o 10800:3600:604800:86400-v 8-y</PRE></BLOCKQUOTE><PCLASS="para">If an option requires a host name, you can provide either a fulldomain name (e.g., <ICLASS="systemitem.sitename">terminator.movie.edu</I>), or just the host'sname (e.g., <ICLASS="systemitem.sitename">terminator</I>).  Ifyou give the host name only, <KBDCLASS="command">h2n</KBD> will form acomplete domain name by adding the domain name given with the<ICLASS="option">-d</I> option.  (If a trailing dot is necessary on thename, <KBDCLASS="command">h2n</KBD> will add it also.)</P><PCLASS="para">There are more options to <KBDCLASS="command">h2n</KBD> than we'veshown here. For the complete list of options, you'll have to look atthe manpage.</P><PCLASS="para">Of course, a few kinds of resource records aren't easy togenerate from <ICLASS="filename">/etc/hosts</I>&nbsp;- the necessary datasimply aren't there. You may need to add these records manually.  Butsince <KBDCLASS="command">h2n</KBD> always rewrites db files, won't yourchanges be overwritten?</P><PCLASS="para"><KBDCLASS="command">h2n</KBD> provides a <SPANCLASS="quote">"back door"</SPAN> forinserting this kind of data. Put these special records in a file named<ACLASS="indexterm"NAME="AUTOID-6816"></A><ICLASS="filename">spcl.DOMAIN</I>, where<ICLASS="filename">DOMAIN</I> is the domain name of yourzone. When <KBDCLASS="command">h2n</KBD> finds this file, it will<SPANCLASS="quote">"include"</SPAN> it within the database files by adding theline:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$INCLUDE spcl.DOMAIN</PRE></BLOCKQUOTE><PCLASS="para">to the end of the <ICLASS="filename">db.DOMAIN</I> file. (The<ICLASS="structfield">$INCLUDE</I> directive is described later inthis chapter.) For example, the administrator of <ICLASS="systemitem.sitename">movie.edu</I> may add extra<SPANCLASS="acronym">MX</SPAN> records into the file<ICLASS="filename">spcl.movie</I> so that users can mail to <ICLASS="systemitem.sitename">movie.edu</I> directly instead of sendingmail to hosts within <ICLASS="systemitem.sitename">movie.edu</I>. Upon finding this file,<KBDCLASS="command">h2n</KBD> would put the line:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$INCLUDE spcl.movie</PRE></BLOCKQUOTE><PCLASS="para">at the end of the database file <ICLASS="filename">db.movie</I>.<ACLASS="indexterm"NAME="AUTOID-6836"></A></P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="AUTOID-6837">7.2.6 Keeping db.cache Current</A></H3><PCLASS="para">As explained in <ACLASS="xref"HREF="ch04_01.htm"TITLE="Setting Up BIND">Chapter 4</A>, the<ACLASS="indexterm"NAME="AUTOID-6841"></A><ACLASS="indexterm"NAME="AUTOID-6844"></A><ACLASS="indexterm"NAME="AUTOID-6848"></A><ACLASS="indexterm"NAME="AUTOID-6850"></A><ICLASS="filename">db.cache</I> file tells your server where the serversfor the <SPANCLASS="quote">"root"</SPAN> zone are. It must be updatedperiodically. The root name servers do not change very often, but theydo change. A good practice is to check your<ICLASS="filename">db.cache</I> file every month or two. In <ACLASS="xref"HREF="ch04_01.htm"TITLE="Setting Up BIND">Chapter 4</A>, we told you to get the servers by<KBDCLASS="command">ftp</KBD>ing to <ICLASS="systemitem.sitename">ftp.rs.internic.net</I>. And that's probablyyour best method to keep current.</P><PCLASS="para">If you have on your system a copy of<ACLASS="indexterm"NAME="AUTOID-6860"></A><KBDCLASS="command">dig</KBD>, a utility that works a lot like<KBDCLASS="command">nslookup</KBD> and is included in the<SPANCLASS="acronym">BIND</SPAN> distribution, you can retrieve the currentlist of roots just by running:<ACLASS="indexterm"NAME="AUTOID-6865"></A><ACLASS="indexterm"NAME="AUTOID-6866"></A></P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>dig @a.root-servers.net  .  ns &gt; db.cache</B></CODE></PRE></BLOCKQUOTE><ACLASS="indexterm"NAME="AUTOID-6869"></A><ACLASS="indexterm"NAME="AUTOID-6870"></A><ACLASS="indexterm"NAME="AUTOID-6871"></A></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch07_01.htm"TITLE="7.1 BIND Name Server Signals"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 7.1 BIND Name Server Signals"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="DNS &amp; BIND"><IMGSRC="../gifs/txthome.gif"ALT="DNS &amp; BIND"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch07_03.htm"TITLE="7.3 Organizing Your Files"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 7.3 Organizing Your Files"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">7.1 BIND Name Server Signals</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">7.3 Organizing Your Files</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><PCLASS="nav"><FONTSIZE="-1">[ <AHREF="../index.htm"TITLE="The Networking CD Bookshelf">Library Home</A> | <AHREF="index.htm"TITLE="DNS &amp; BIND">DNS &amp; BIND</A> | <AHREF="../tcpip/index.htm"TITLE="TCP/IP Network Administration">TCP/IP</A> | <AHREF="../sendmail/index.htm"TITLE="sendmail">sendmail</A> | <AHREF="../smdref/index.htm"TITLE="sendmail Desktop Reference">sendmail Reference</A> | <AHREF="../firewall/index.htm"TITLE="Building Internet Firewalls">Firewalls</A> | <AHREF="../puis/index.htm"TITLE="Practical UNIX &amp; Internet Security">Practical Security</A> ]</FONT></P></DIV></BODY></HTML>