<HTML><HEAD><TITLE>[Chapter 10] 10.11 Securing Your Name Server</TITLE><METANAME="DC.title"CONTENT="DNS &amp; BIND"><METANAME="DC.creator"CONTENT="Cricket Liu &amp; Paul Albitz"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1999-01-06T18:36:44Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-512-2"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch10_01.htm"TITLE="10. Advanced Features and Security"><LINKREL="prev"HREF="ch10_10.htm"TITLE="10.10 Avoiding a Bogus Name Server"><LINKREL="next"HREF="ch10_12.htm"TITLE="10.12 Load Sharing Between Mirrored Servers"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="DNS &amp; BIND"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,65"HREF="index.htm"ALT="DNS &amp; BIND"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/dsrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch10_10.htm"TITLE="10.10 Avoiding a Bogus Name Server"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 10.10 Avoiding a Bogus Name Server"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 10<BR>Advanced Features and Security</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch10_12.htm"TITLE="10.12 Load Sharing Between Mirrored Servers"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 10.12 Load Sharing Between Mirrored Servers"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="AUTOID-11338">10.11 Securing Your Name Server</A></H2><PCLASS="para"><ACLASS="indexterm"NAME="CH10.SECURITY1"></A><ACLASS="indexterm"NAME="AUTOID-11343"></A><SPANCLASS="acronym">BIND</SPAN> 4.9 introduced several important securityfeatures that help you protect your nameserver. <SPANCLASS="acronym">BIND</SPAN> 8 continued the tradition byintroducing several more.  These features are particularly importantif your name server is running on the Internet, but they may also beuseful on purely internal name servers.</P><PCLASS="para">We'll start by discussing measures you should take on all nameservers for which security is important.  Then we'll describe a modelin which your name servers are split into two communities, one forserving only resolvers and one for answering other name servers'queries.</P><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="AUTOID-11350">10.11.1 <SPANCLASS="acronym">BIND</SPAN> Version</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11354"></A><ACLASS="indexterm"NAME="AUTOID-11357"></A>One of the most important ways you can enhance the security ofyour name server is to run the latest version of<SPANCLASS="acronym">BIND</SPAN>.  All versions of <SPANCLASS="acronym">BIND</SPAN>before 4.9.7 are susceptible to at least a few knownattacks.[4] <SPANCLASS="acronym">BIND</SPAN> 8.1.2 is an even better bet,because of the many new security mechanisms it introduced.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[4] In fact, part of the reason there <EMCLASS="emphasis">is</EM> a <SPANCLASS="acronym">BIND</SPAN>4.9.7, and the <SPANCLASS="acronym">BIND</SPAN> 4 release stream didn't stopwith 4.9.6, was 4.9.6's vulnerability to a particular attack.</P></BLOCKQUOTE><PCLASS="para">But don't stop there: New attacks are being thought up all thetime, so you'll have to do your best to keep abreast of<SPANCLASS="acronym">BIND</SPAN>'s vulnerabilities and the latest<SPANCLASS="quote">"safe"</SPAN> version of <SPANCLASS="acronym">BIND</SPAN>.  One good wayto do that is to read the newsgroup <ACLASS="systemitem.newsgroup"HREF="news:comp.protocols.dns.bind">comp.protocols.dns.bind</A>regularly.</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="AUTOID-11372">10.11.2 Restricting Queries</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="CH10.RESTRICT0"></A><ACLASS="indexterm"NAME="CH10.RESTRICT1"></A><ACLASS="indexterm"NAME="CH10.RESTRICT2"></A>Up until <SPANCLASS="acronym">BIND</SPAN> 4.9, domain administrators had no wayto control who could look up data on their name servers. That makes acertain amount of sense; the original idea behind<SPANCLASS="acronym">DNS</SPAN> was to make information easily available allover the Internet.</P><PCLASS="para">The neighborhood is not such a friendly place anymore,though. In particular, people who run Internet firewalls may have alegitimate need to hide certain parts of their name space from most ofthe world but to make it available to a limited audience.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11387"></A><ACLASS="indexterm"NAME="AUTOID-11389"></A>The <SPANCLASS="acronym">BIND</SPAN> 8 <EMCLASS="emphasis">allow-query</EM>substatement allows you to place an <SPANCLASS="acronym">IP</SPAN>address-based access list on queries.  The access list can apply to aparticular zone, or to any queries received by the server.  Inparticular, the access list specifies which <SPANCLASS="acronym">IP</SPAN>addresses are allowed to send queries to the server.</P><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="AUTOID-11396">10.11.2.1 Restricting all queries</A></H4><PCLASS="para">The global form of the <EMCLASS="emphasis">allow-query</EM>substatement looks like this:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">options {                allow-query { address_match_list; };};</PRE></BLOCKQUOTE><PCLASS="para">So to restrict our name server to answering queries from the twomain Movie U. networks, we'd use:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">options {                allow-query { 192.249.249/24; 192.253.253/24; };};</PRE></BLOCKQUOTE></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="AUTOID-11403">10.11.2.2 Restricting queries in a particular zone</A></H4><PCLASS="para"><SPANCLASS="acronym">BIND</SPAN> 8 also allows you to apply an accesslist to a particular zone.  In this case, just use<EMCLASS="emphasis">allow-query</EM> as a substatement of the<ICLASS="structfield">zone</I> statement for the zone you want toprotect:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">zone &quot;hp.com&quot; {                type slave;                file &quot;db.hp&quot;;                masters { 15.255.152.2; };                allow-query { &quot;HP-NET&quot;; };};</PRE></BLOCKQUOTE><PCLASS="para">Any kind of authoritative name server, master or slave, canapply an access list to the zone.  Zone-specific access lists takeprecedence over global access lists for that zone.  The zone-specificaccess list may even be more permissive than the global access list.If there's no zone-specific access list defined, any global accesslist will apply.</P><PCLASS="para">In <SPANCLASS="acronym">BIND</SPAN> 4.9, this functionality is providedby the <ICLASS="structfield">secure_zone</I> record. Not only does itlimit queries for individual resource records, it limits zonetransfers, too.  (In <SPANCLASS="acronym">BIND</SPAN> 8, restricting zonetransfers is done separately.) However, 4.9 servers have no mechanismfor restricting who can send your server queries for data in zonesyour server <EMCLASS="emphasis">isn't</EM> authoritative for; the securezones mechanism only works with authoritative zones.</P><PCLASS="para">To use secure zones, you include one or more special<SPANCLASS="acronym">TXT</SPAN> (text) records in your zone data on the primarymaster name server. The records are conveniently transferred to thezone's slave servers automatically.  Of course, only<SPANCLASS="acronym">BIND</SPAN> 4.9 slaves will understand them.</P><PCLASS="para">The<ACLASS="indexterm"NAME="AUTOID-11420"></A><SPANCLASS="acronym">TXT</SPAN> records are special because they're attached tothe pseudo-domain name <ICLASS="structfield">secure_zone</I>, and theresource record-specific data has a special format, either:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen"><CODECLASS="replaceable"><I>address</I></CODE>:mask</PRE></BLOCKQUOTE><PCLASS="para">or:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen"><CODECLASS="replaceable"><I>address</I></CODE>:H</PRE></BLOCKQUOTE><PCLASS="para">In the first form, <CODECLASS="replaceable"><I>address</I></CODE> is thedotted-octet form of the <SPANCLASS="acronym">IP</SPAN> network to which youwant to <EMCLASS="emphasis">allow</EM> access to the data in thiszone. The mask is the netmask for that address.  If you want to allowall of net 15 access to your zone data, use 15.0.0.0:255.0.0.0.  Ifyou only want to allow the range of <SPANCLASS="acronym">IP</SPAN> addressesfrom 15.254.0.0 to 15.255.255.255 access to your zone data, use15.254.0.0:255.254.0.0.</P><PCLASS="para">The second form specifies the address of a particular host you'dlike to allow access to your zone data. The H is equivalent to themask 255.255.255.255; in other words, each bit in the 32-bit addressis checked. Therefore, 15.255.152.4:H gives the host with the<SPANCLASS="acronym">IP</SPAN> address 15.255.152.4 the ability to look up datain the zone.</P><PCLASS="para">If we wanted to restrict queries for information in <ICLASS="systemitem.sitename">movie.edu</I> to hosts on Movie U.'snetworks, we could add the following lines to<ICLASS="filename">db.movie</I> on the <ICLASS="systemitem.sitename">movie.edu</I> primary:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">secure_zone    IN    TXT    &quot;192.249.249.0:255.255.255.0&quot;secure_zone    IN    TXT    &quot;192.253.253.0:255.255.255.0&quot;secure_zone    IN    TXT    &quot;192.253.254.0:255.255.255.0&quot;secure_zone    IN    TXT    &quot;127.0.0.1:H&quot;</PRE></BLOCKQUOTE><PCLASS="para">Notice that we included the address 127.0.0.1 in our accesslist. That's so a resolver can query its local name server.  If youforget the <CODECLASS="literal">:H</CODE>, you'll see the following syslogmessage:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Aug 17 20:58:22 terminator named[2509]: build_secure_netlist       (movie.edu): addr (127.0.0.1) is not in mask (0xff000000)</PRE></BLOCKQUOTE><PCLASS="para">Also, note that the secure zones records here apply only to thezone they're in&nbsp;- that is, <ICLASS="systemitem.sitename">movie.edu</I>.  If you wanted to preventunauthorized queries for data in other zones on this server, you'dhave to add secure zones records to that zone on its primary mastername server, too.</P></DIV><ACLASS="indexterm"NAME="AUTOID-11447"></A><ACLASS="indexterm"NAME="AUTOID-11448"></A><ACLASS="indexterm"NAME="AUTOID-11449"></A></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PREVENT-UNAUTH">10.11.3 Preventing Unauthorized Zone Transfers</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="CH10.UNAUTH1"></A><ACLASS="indexterm"NAME="CH10.UNAUTH2"></A><ACLASS="indexterm"NAME="CH10.UNAUTH3"></A><ACLASS="indexterm"NAME="CH10.UNAUTH4"></A>Even more important than controlling who can query your name server isensuring that only your real slave name servers can transfer zonesfrom your name server. Users on remote hosts that can query your nameserver's zone data can only look up data (e.g., addresses) for hostswhose domain names they already know, one at a time. Users who canstart zone transfers from your server can list all of the hosts inyour zones. It's the difference between letting random folks call yourcompany's switchboard and ask for John Q. Cubicle's phone number andsending them a copy of your corporate phone directory.</P><PCLASS="para"><SPANCLASS="acronym">BIND</SPAN> 8's <EMCLASS="emphasis">allow-transfer</EM>substatement and 4.9's<ACLASS="indexterm"NAME="AUTOID-11467"></A><ACLASS="indexterm"NAME="AUTOID-11469"></A><ACLASS="indexterm"NAME="AUTOID-11472"></A><ICLASS="structfield">xfrnets</I> directive let administrators applyan access list to zone transfers.  <EMCLASS="emphasis">allow-transfer</EM>can restrict transfers of a particular zone as a<ICLASS="structfield">zone</I> substatement or can restrict all zonetransfers as an <EMCLASS="emphasis">options</EM> substatement.  It takesan address match list as an argument.</P><PCLASS="para">Say the slave servers for your <ICLASS="systemitem.sitename">acmebw.com</I> zone have the<SPANCLASS="acronym">IP</SPAN> addresses 192.168.0.1 and 192.168.1.1.  The<ICLASS="structfield">zone</I> statement:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">zone &quot;acmebw.com&quot; {                type master;                file &quot;db.acmebw&quot;;                allow-transfer { 192.168.0.1; 192.168.1.1; };};</PRE></BLOCKQUOTE><PCLASS="para">will allow only those slaves to transfer <ICLASS="systemitem.sitename">acmebw.com</I> from the primary master nameserver.  Note that since <SPANCLASS="acronym">BIND</SPAN> 8's default is toallow any <SPANCLASS="acronym">IP</SPAN> address to transfer zones, and becausehackers can just as easily transfer the zone from your slaves, youshould probably also have a <ICLASS="structfield">zone</I> statementlike this on your slaves:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">zone &quot;acmebw.com&quot; {                type slave;                masters { 192.168.0.4; };                allow-transfer { none; };};</PRE></BLOCKQUOTE><PCLASS="para"><SPANCLASS="acronym">BIND</SPAN> 8 will also let you establish a globalaccess list on zone transfers.  This applies to any zones that don'thave their own, explicit access lists defined as<ICLASS="structfield">zone</I> substatements.  For example, you mightwant to limit all zone transfers to your internal<SPANCLASS="acronym">IP</SPAN> addresses:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">options {                allow-transfer { 192.168/16; };};</PRE></BLOCKQUOTE><PCLASS="para">The <SPANCLASS="acronym">BIND</SPAN> 4.9<ICLASS="structfield">xfrnets</I> directive takes as its argumentsthe networks or <SPANCLASS="acronym">IP</SPAN> addresses you'd like to allow totransfer zones from your name server. Networks are specified by thedotted-octet form of the network number; for example:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">xfrnets 15.0.0.0 128.32.0.0</PRE></BLOCKQUOTE><PCLASS="para">allows only hosts on the Class A network 15 or the Class Bnetwork 128.32 to transfer zones from this name server.  Unlike securezones, this restriction applies to any zones the server isauthoritative for.</P><PCLASS="para">If you want to specify just a part of the network, down to asingle <SPANCLASS="acronym">IP</SPAN> address, you can add a<ACLASS="indexterm"NAME="AUTOID-11502"></A>network mask. The syntax for including a network mask is<EMCLASS="emphasis">network&amp;netmask</EM>.  Note that there are nospaces either between the network and the ampersand or between theampersand and the netmask: they're not allowed.</P><PCLASS="para">To pare down the addresses allowed to transfer zones in theprevious example to just the <SPANCLASS="acronym">IP</SPAN> address15.255.152.4 and the subnet 128.32.1.0, you could use the<ICLASS="structfield">xfrnets</I> directive:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">xfrnets 15.255.152.4&amp;255.255.255.255 128.32.1.0&amp;255.255.255.0</PRE></BLOCKQUOTE><PCLASS="para">For a primary master name server accessible from the Internet,you probably want to limit zone transfers to just your slave nameservers. You probably don't need to use<ICLASS="structfield">xfrnets</I> on name servers inside yourfirewall, unless you're worried about your own employees listing yourzone data.</P><ACLASS="indexterm"NAME="AUTOID-11511"></A><ACLASS="indexterm"NAME="AUTOID-11512"></A><ACLASS="indexterm"NAME="AUTOID-11513"></A><ACLASS="indexterm"NAME="AUTOID-11514"></A></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="AUTOID-11515">10.11.4 Running <SPANCLASS="acronym">BIND</SPAN> as a Non-Root User</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="CH10.NONROOT"></A><ACLASS="indexterm"NAME="AUTOID-11522"></A>Running a network server such as <SPANCLASS="acronym">BIND</SPAN> as theroot user can be dangerous&nbsp;- and <SPANCLASS="acronym">BIND</SPAN> normallyruns as root. If a hacker finds a vulnerability in the server throughwhich he can read or write files, he'll have root access to thefilesystem. If he can exploit a flaw that allows him to executecommands, he'll execute them as root.</P><PCLASS="para"><SPANCLASS="acronym">BIND</SPAN> 8.1.2 includes experimental code thatallows you to change the user and group the name server runs as. Thisallows you to run the name server with what's known as <SPANCLASS="quote">"leastprivilege:"</SPAN> the minimal set of rights it needs to do itsjob. That way, if someone is able to break into your host through thename server, at least they won't have root privileges.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11530"></A><SPANCLASS="acronym">BIND</SPAN> 8.1.2 also includes an option thatallows you to <KBDCLASS="command">chroot</KBD> the name server: to change itsview of the filesystem so that its root directory is actually aparticular directory on your host's filesystem. This effectively trapsyour name server in this directory, along with any attackers whosuccessfully compromise your name server's security.</P><PCLASS="para">The command-line options that implement these featuresare:</P><DLCLASS="variablelist"><DTCLASS="term">-u</DT><DDCLASS="listitem"><PCLASS="para">Specifies the username or user <SPANCLASS="acronym">ID</SPAN> the nameserver changes to after starting, e.g., <CODECLASS="literal">named -u bin</CODE>.</P></DD><DTCLASS="term">-g</DT><DDCLASS="listitem"><PCLASS="para">Specifies the group or group <SPANCLASS="acronym">ID</SPAN> the nameserver changes to after starting, e.g., <CODECLASS="literal">named -g other</CODE>. If <ICLASS="option">-u</I> isspecified without <ICLASS="option">-g</I>, the name server will use the user's primarygroup.</P></DD><DTCLASS="term">-t</DT><DDCLASS="listitem"><PCLASS="para">Specifies the directory for the name server to <KBDCLASS="command">chroot</KBD> to.</P></DD></DL><PCLASS="para">If you opt to use the <ICLASS="option">-u</I> and <ICLASS="option">-g</I> options, you'll have to decidewhat user and group to use. Your best bet is to create a new user andgroup for the name server to run as, such as <ICLASS="systemitem.username">named</I>. Since the name server reads<ICLASS="filename">named.conf</I> before giving up root privileges, youdon't have to change that file's permissions. However, you may have tochange the permissions and ownership of your zone data files so thatthe user the name server runs as can read them. If you use dynamicupdate, you'll have to make the zone data files fordynamically-updated zones writable by the name server.</P><PCLASS="para">The name server may have trouble writing the<ICLASS="filename">named.pid</I> file, too, since it occasionallyrewrites it after startup (and after giving up root privileges). Onmost versions of <SPANCLASS="acronym">UNIX</SPAN>,<ICLASS="filename">/var/run</I> (the directory in which the name serversaves <ICLASS="filename">named.pid</I>) isn't writable by non-root<ACLASS="indexterm"NAME="AUTOID-11565"></A><ACLASS="indexterm"NAME="AUTOID-11567"></A>users. The easiest way to deal with this is to use the <ICLASS="function">pid-file</I>substatement to move <ICLASS="filename">named.pid</I> to anotherdirectory:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">options {                pid-file &quot;/var/named/named.pid&quot;;};</PRE></BLOCKQUOTE><PCLASS="para">Then make sure that file is writable by the user<KBDCLASS="command">named</KBD> runs as.</P><PCLASS="para">If your name server is configured to log to files (as opposed tosyslog), make sure those files exist and are writable by the nameserver before starting the server.</P><PCLASS="para">The <ICLASS="option">-t</I> option takes a little more special configuration. Inparticular, you need to make sure that all the files<KBDCLASS="command">named</KBD> uses are present in the directory you'rerestricting the server to. That includes the following:</P><DLCLASS="variablelist"><DTCLASS="term">named-xfer </DT><DDCLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11584"></A>Most <KBDCLASS="command">named</KBD>s expect to find the<ICLASS="filename">named-xfer</I> executable in<ICLASS="filename">/etc/named-xfer</I>. If you <KBDCLASS="command">chroot</KBD> the server to<ICLASS="filename">/var/named</I>, that becomes<ICLASS="filename">/var/named/etc/named-xfer</I>.</P></DD><DTCLASS="term">Shared libraries</DT><DDCLASS="listitem"><PCLASS="para">If you build the name server with shared libraries, you'll needto put copies of those shared libraries in whatever directory youroperating system expects them in. For example, if your<SPANCLASS="acronym">OS</SPAN> looks for shared libraries in<ICLASS="filename">/lib</I>, you'll need copies in<ICLASS="filename">/var/named/lib</I>. The alternative is to build yourname server as a statically-linked executable.</P></DD><DTCLASS="term">/dev/null</DT><DDCLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11603"></A><ACLASS="indexterm"NAME="AUTOID-11605"></A>The name server needs a <ICLASS="filename">/dev/null</I> in the<KBDCLASS="command">chroot</KBD>ed directory. You can find out how to make one by reading<ICLASS="filename">/dev/MKDEV</I>, or the manual page for<KBDCLASS="command">mknod</KBD>.</P></DD></DL><PCLASS="para">Finally, the name server may not be able to syslog in a <KBDCLASS="command">chroot</KBD>edenvironment. If that's the case, use the <ICLASS="function">logging</I> statement describedin <ACLASS="xref"HREF="ch07_01.htm"TITLE="Maintaining BIND">Chapter 7, <CITECLASS="chapter">Maintaining <SPANCLASS="acronym">BIND</SPAN></CITE></A>, to log to files in the <KBDCLASS="command">chroot</KBD>eddirectory.</P><PCLASS="para">With any of these options, you'll have to remember to eitheredit <KBDCLASS="command">ndc</KBD> to specify the options upon restart or start, or to start andrestart <KBDCLASS="command">named</KBD> manually.</P><ACLASS="indexterm"NAME="AUTOID-11619"></A></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="AUTOID-11620">10.11.5 <SPANCLASS="quote">"Delegated"</SPAN> Name Server Configuration</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11624"></A><ACLASS="indexterm"NAME="AUTOID-11626"></A><ACLASS="indexterm"NAME="AUTOID-11629"></A>Some of your name servers answer nonrecursive queries from othername servers on the Internet, because your name servers appear in<SPANCLASS="acronym">NS</SPAN> records delegating your zones to them.  We'llcall these name servers <SPANCLASS="quote">"delegated"</SPAN> name servers.</P><PCLASS="para">There are special measures you can take to secure your delegatedname servers.  But first, you should make sure that these serversdon't receive any recursive queries (that is, you don't have anyresolvers configured to use these servers, and no name servers usethem as forwarders).  Some of the precautions we'll take&nbsp;- likemaking the server respond nonrecursively even to recursivequeries&nbsp;- preclude your resolvers from using these servers.  Ifyou do have resolvers using your delegated name servers, considerestablishing another class of name servers to serve just yourresolvers, as described in the next section.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11636"></A><ACLASS="indexterm"NAME="AUTOID-11638"></A><ACLASS="indexterm"NAME="AUTOID-11640"></A><ACLASS="indexterm"NAME="AUTOID-11643"></A>Once you know your name server only answers queries from othername servers, you can turn off recursion.  This eliminates a majorvector of attack: the most common spoofing attacks involve inducingthe target name server to query name servers under the hacker'scontrol by sending the target a recursive query for a domain name in azone served by the hacker's servers.  To turn off recursion, you'duse:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">options {                recursion no;};</PRE></BLOCKQUOTE><PCLASS="para">on a <SPANCLASS="acronym">BIND</SPAN> 8 server, and:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">options no-recursion</PRE></BLOCKQUOTE><PCLASS="para">on a <SPANCLASS="acronym">BIND</SPAN> 4.9 server.</P><PCLASS="para">You should also restrict zone transfers of your zones to knownslave servers, as described in <ACLASS="xref"HREF="ch10_11.htm#PREVENT-UNAUTH"TITLE="Preventing Unauthorized Zone Transfers">Section 10.11.3, "Preventing Unauthorized Zone Transfers</A>,&quot;earlier in this chapter.  Finally, you might also want to turn offglue fetching.  The name server will automatically try to resolve thenames of any name servers in the <SPANCLASS="acronym">RDATA</SPAN> of<SPANCLASS="acronym">NS</SPAN> records; to prevent this from happening, andkeep your name server from sending any queries of its own, use:<ACLASS="indexterm"NAME="AUTOID-11656"></A><ACLASS="indexterm"NAME="AUTOID-11658"></A><ACLASS="indexterm"NAME="AUTOID-11660"></A><ACLASS="indexterm"NAME="AUTOID-11663"></A></P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">options {                fetch-glue no;};</PRE></BLOCKQUOTE><PCLASS="para">on a <SPANCLASS="acronym">BIND</SPAN> 8 server, and:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">options no-fetch-glue</PRE></BLOCKQUOTE><PCLASS="para">on <SPANCLASS="acronym">BIND</SPAN> 4.9.</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="AUTOID-11672">10.11.6 Resolving Name Server Configuration</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11675"></A><ACLASS="indexterm"NAME="AUTOID-11678"></A><ACLASS="indexterm"NAME="AUTOID-11681"></A>We'll call a name server that serves one or more resolvers, oris configured as another name server's forwarder, a<SPANCLASS="quote">"resolving"</SPAN> name server.  Unlike a delegated name server,a <SPANCLASS="quote">"resolving"</SPAN> name server can't refuse recursive queries.Consequently, we have to configure it a little differently to secureit.  Since we know our name server should only receive queries fromour own resolvers, we can configure it to deny queries from any butour resolvers' <SPANCLASS="acronym">IP</SPAN> addresses.</P><PCLASS="para">Only <SPANCLASS="acronym">BIND</SPAN> 8 will allow us to restrict which<SPANCLASS="acronym">IP</SPAN> addresses can send our name server arbitraryqueries.  (<SPANCLASS="acronym">BIND</SPAN> 4.9 servers will let us restrictwhich <SPANCLASS="acronym">IP</SPAN> addresses can send the server queries inauthoritative zones, via the <ICLASS="function">secure_zone</I> <SPANCLASS="acronym">TXT</SPAN>record, but we're actually more worried about recursive queries inothers' zones.)  This <ICLASS="function">allow-query</I> substatement will restrict queriesto just our internal network:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">options {                allow-query { 192.168/16; };};</PRE></BLOCKQUOTE><PCLASS="para">With this configuration, the only resolvers that can send yourserver recursive queries, and induce your name servers to query othername servers, are your internal resolvers, which are presumablyrelatively benevolent.</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="AUTOID-11698">10.11.7 Two Name Servers in One</A></H3><PCLASS="para">What if you only have one name server to advertise your zone andserve your resolvers, and you can't afford the additional expense ofbuying another computer to run another name server on?  There arestill a couple of options open to you.  One is a single-serversolution that takes advantage of <SPANCLASS="acronym">BIND</SPAN> 8'sflexibility.  This configuration allows anyone to query the nameserver for information in your delegated zones, but only your internalresolvers can query the name server for other information.  While thisdoesn't prevent remote resolvers from sending your name serverrecursive queries, those queries have to be in your authoritativezones, so they won't induce your name server to send additionalqueries.</P><PCLASS="para">Here's a <ICLASS="filename">named.conf</I> file to do that:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">options {                allow-query { 192.168/16; };};zone &quot;acmebw.com&quot; {                type master;                file &quot;db.acmebw&quot;;                allow-query { any };                allow-transfer { 192.168.0.1; 192.168.1.1; };};zone &quot;168.192.in-addr.arpa&quot; {                type master;                file &quot;db.192.168&quot;;                allow-query { any; };                allow-transfer { 192.168.0.1; 192.168.1.1; };};</PRE></BLOCKQUOTE><PCLASS="para">Here, the more permissive zone-specific access lists apply toqueries in the server's authoritative zones, but the more restrictiveglobal access list applies to all other queries.</P><PCLASS="para">Another option is to run two <KBDCLASS="command">named</KBD> processeson a single host.  One is configured as the delegated server, anotheras the resolving name server.  Since we have no way of telling remoteservers or configuring resolvers to query one of our name servers on aport other than 53, the default <SPANCLASS="acronym">DNS</SPAN> port, we haveto run these servers on different <SPANCLASS="acronym">IP</SPAN>addresses.</P><PCLASS="para">Of course, if your host already has more than one networkinterface, that's no problem.  Even if it only has one, the operatingsystem may support <SPANCLASS="acronym">IP</SPAN> address aliases.  These allowyou to attach more than one <SPANCLASS="acronym">IP</SPAN> address to a singlenetwork interface.  One <KBDCLASS="command">named</KBD> process can listen oneach.  Finally, if the operating system doesn't support<SPANCLASS="acronym">IP</SPAN> aliases, you can still bind one<KBDCLASS="command">named</KBD> against the network interface's<SPANCLASS="acronym">IP</SPAN> address, and one against the loopback address.Only the local host will be able to send queries to the<KBDCLASS="command">named</KBD> listening on the loopback address, but that'sfine if the local host's resolver is the only one you need toserve.</P><PCLASS="para">First, here's the <ICLASS="filename">named.conf</I> file for thedelegated name server, listening on the network interface's<SPANCLASS="acronym">IP</SPAN> address:<ACLASS="indexterm"NAME="AUTOID-11721"></A><ACLASS="indexterm"NAME="AUTOID-11723"></A></P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">options {                directory &quot;/usr/local/named&quot;;                recursion no;                listen-on { 192.168.0.4; };                pid-file &quot;delegated.pid&quot;;};zone &quot;acmebw.com&quot; {                type master;                file &quot;db.acmebw&quot;;                allow-query { any };                allow-transfer { 192.168.0.1; 192.168.1.1; };};zone &quot;168.192.in-addr.arpa&quot; {                type master;                file &quot;db.192.168&quot;;                allow-query { any; };                allow-transfer { 192.168.0.1; 192.168.1.1; };};zone &quot;.&quot; {                type hint;                file &quot;db.cache&quot;;};</PRE></BLOCKQUOTE><PCLASS="para">Next, here's the <ICLASS="filename">named.conf</I> file for theresolving name server, listening on the loopback address:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">options {                directory &quot;/usr/local/named1&quot;;                listen-on { 127.0.0.1; };                pid-file &quot;resolving.pid&quot;;};zone &quot;.&quot; {                type hint;                file &quot;db.cache&quot;;};</PRE></BLOCKQUOTE><PCLASS="para">The <ICLASS="function">listen-on</I> substatement tells the server reading the conffile to listen only on network interfaces whose <SPANCLASS="acronym">IP</SPAN>addresses match the address match list.  We've specified the<SPANCLASS="acronym">IP</SPAN> address explicitly, so that there's no chance ofmistakes.  You can also use <ICLASS="function">listen-on</I> to have <KBDCLASS="command">named</KBD>listen on a port other than 53; for that, use the syntax:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">options {                listen-on port &lt;n&gt; { address_match_list };};</PRE></BLOCKQUOTE><PCLASS="para">Note that we turn recursion off on the delegated name server,but must leave it on on the resolving name server.  We also give eachname server its own <SPANCLASS="acronym">PID</SPAN> file and its own directory,so that they don't try to use the same default filename for their<SPANCLASS="acronym">PID</SPAN> files, debug files, and statisticsfiles.</P><PCLASS="para">To use the resolving name server, listening on the loopbackaddress, the local host's <ICLASS="filename">resolv.conf</I> file mustinclude:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">nameserver 127.0.0.1</PRE></BLOCKQUOTE><PCLASS="para">as the first <ICLASS="function">nameserver</I> directive.</P></DIV><ACLASS="indexterm"NAME="AUTOID-11745"></A></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch10_10.htm"TITLE="10.10 Avoiding a Bogus Name Server"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 10.10 Avoiding a Bogus Name Server"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="DNS &amp; BIND"><IMGSRC="../gifs/txthome.gif"ALT="DNS &amp; BIND"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch10_12.htm"TITLE="10.12 Load Sharing Between Mirrored Servers"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 10.12 Load Sharing Between Mirrored Servers"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">10.10 Avoiding a Bogus Name Server</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">10.12 Load Sharing Between Mirrored Servers</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><PCLASS="nav"><FONTSIZE="-1">[ <AHREF="../index.htm"TITLE="The Networking CD Bookshelf">Library Home</A> | <AHREF="index.htm"TITLE="DNS &amp; BIND">DNS &amp; BIND</A> | <AHREF="../tcpip/index.htm"TITLE="TCP/IP Network Administration">TCP/IP</A> | <AHREF="../sendmail/index.htm"TITLE="sendmail">sendmail</A> | <AHREF="../smdref/index.htm"TITLE="sendmail Desktop Reference">sendmail Reference</A> | <AHREF="../firewall/index.htm"TITLE="Building Internet Firewalls">Firewalls</A> | <AHREF="../puis/index.htm"TITLE="Practical UNIX &amp; Internet Security">Practical Security</A> ]</FONT></P></DIV></BODY></HTML>