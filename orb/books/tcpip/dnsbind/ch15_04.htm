<HTML><HEAD><TITLE>[Chapter 15] 15.4 DNS and Internet Firewalls</TITLE><METANAME="DC.title"CONTENT="DNS &amp; BIND"><METANAME="DC.creator"CONTENT="Cricket Liu &amp; Paul Albitz"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1999-01-06T18:43:19Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-512-2"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch15_01.htm"TITLE="15. Miscellaneous"><LINKREL="prev"HREF="ch15_03.htm"TITLE="15.3 A Limitation of MX Records"><LINKREL="next"HREF="ch15_05.htm"TITLE="15.5 Dialup Connections"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="DNS &amp; BIND"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,65"HREF="index.htm"ALT="DNS &amp; BIND"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/dsrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch15_03.htm"TITLE="15.3 A Limitation of MX Records"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 15.3 A Limitation of MX Records"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 15<BR>Miscellaneous</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch15_05.htm"TITLE="15.5 Dialup Connections"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 15.5 Dialup Connections"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="AUTOID-16556">15.4 <SPANCLASS="acronym">DNS</SPAN> and Internet Firewalls</A></H2><PCLASS="para"><ACLASS="indexterm"NAME="CH15.FIREWALL1"></A><ACLASS="indexterm"NAME="CH15.FIREWALL2"></A><ACLASS="indexterm"NAME="CH15.FIREWALL3"></A><ACLASS="indexterm"NAME="CH15.FIREWALL4"></A><ACLASS="indexterm"NAME="CH15.FIREWALL5"></A><ACLASS="indexterm"NAME="CH15.FIREWALL6"></A>The Domain Name System wasn't designed to work with Internet firewalls.It's a testimony to the flexibility of <SPANCLASS="acronym">DNS</SPAN> and of the <SPANCLASS="acronym">BIND</SPAN> implementationthat you can configure <SPANCLASS="acronym">DNS</SPAN> to work with, or even through, an Internet firewall.</P><PCLASS="para">That said, configuring <SPANCLASS="acronym">BIND</SPAN> to work in a firewalled environment,although not difficult, takes a good, complete understanding of<SPANCLASS="acronym">DNS</SPAN> and a few of <SPANCLASS="acronym">BIND</SPAN>'s more obscure features. Describing it alsorequires a large portion of this chapter, so here's a roadmap.</P><PCLASS="para">We start by describing the two major families of Internetfirewall software&nbsp;- packet filters and application gateways.  Thecapabilities of each family have a bearing on how you'll need toconfigure <SPANCLASS="acronym">BIND</SPAN> to work through the firewall.  The next section detailsthe two most common <SPANCLASS="acronym">DNS</SPAN> architectures used with firewalls, forwarders andinternal roots, and describes the advantages and disadvantages ofeach.  Then we introduce a new feature, conditional forwarding,which combines the best of internal roots and forwarders.  Finally,we discuss shadow namespaces and the configuration of the bastionhost, the host at the core of your firewall system.</P><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="AUTOID-16587">15.4.1 Types of Firewall Software</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-16590"></A>Before you start configuring <SPANCLASS="acronym">BIND</SPAN>to work with your firewall, it's important you understand what yourfirewall is capable of.  Your firewall's capabilities may influenceyour choice of <SPANCLASS="acronym">DNS</SPAN> architecture and will determine how you implementit.  If you don't know the answers to the questions in this section, trackdown someone in your organization who does know and ask.  Betteryet, work with your firewall's administrator when designing yourarchitecture to ensure it will coexist with the firewall.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-16595"></A>Note that this is far from a complete explanation of Internetfirewalls.  These few paragraphs only describe the two most commontypes of Internet firewalls, and only in enough detail to show how thedifferences in their capabilities impact name servers.  For acomprehensive treatment of Internet firewalls, see Brent Chapman andElizabeth Zwicky's <CITECLASS="citetitle">Building Internet Firewalls</CITE>(O'Reilly &amp; Associates).</P><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="AUTOID-16599">15.4.1.1 Packet filters</A></H4><PCLASS="para">The first type of firewallwe'll cover is the packet filtering firewall.<ACLASS="indexterm"NAME="AUTOID-16602"></A><ACLASS="indexterm"NAME="AUTOID-16604"></A>Packet filtering firewallsoperate largely at the transport and network levels of the <SPANCLASS="acronym">TCP</SPAN>/<SPANCLASS="acronym">IP</SPAN>stack (layers three and four of the <SPANCLASS="acronym">OSI</SPAN> reference model, if youdig that).  They decide whether to route a packet based upon packet-levelcriteria like the transport protocol (i.e., whether it's <SPANCLASS="acronym">TCP</SPAN> or<SPANCLASS="acronym">UDP</SPAN>), the source and destination <SPANCLASS="acronym">IP</SPAN> address, and the destinationport (see <ACLASS="xref"HREF="ch15_04.htm#DNS3-CHP-15-FIG-1"TITLE="Packet filters operate at the network and transport layers of the stack">Figure 15.1</A>).</P><H4CLASS="figure"><ACLASS="title"NAME="DNS3-CHP-15-FIG-1">Figure 15.1: Packet filters operate at the network and transport layers of the stack</A></H4><IMGCLASS="graphic"SRC="figs/dns3_1501.gif"ALT="Figure 15.1"><PCLASS="para">What's most important to us about packetfiltering firewalls is that you can typically configure them toallow <SPANCLASS="acronym">DNS</SPAN> traffic selectively between hosts on the Internet andyour internal hosts. That is, you can let an arbitrary set of internalhosts communicate with Internet name servers.  Some packet filteringfirewalls can even permit your name servers to query name serverson the Internet, but not vice versa. All router-based Internet firewallsare packet filtering firewalls.  Checkpoint's FireWall-1, Cisco's<SPANCLASS="acronym">PIX</SPAN>, and Sun's SunScreen are popular commercial packet filteringfirewalls.</P><DIVCLASS="sidebar"><H4CLASS="sidebar"><ACLASS="title"NAME="GOTCHA-FIREWALLS">A Gotcha with <SPANCLASS="acronym">BIND</SPAN> 8 and Packet FilteringFirewalls</A></H4><PCLASS="para"><SPANCLASS="acronym">BIND</SPAN> 4 name serversalways send queries from port 53, the well-known port for <SPANCLASS="acronym">DNS</SPAN> servers,to port 53.  Resolvers, on the other hand, usually send queriesfrom high-numbered ports (above 1023) to port 53.  Though name serversclearly have to send their queries to the <SPANCLASS="acronym">DNS</SPAN> port on a remote host,there's no reason they have to send the queries <EMCLASS="emphasis">from</EM> the <SPANCLASS="acronym">DNS</SPAN> port. And, wouldn't you know it, <SPANCLASS="acronym">BIND</SPAN> 8 name servers don't send queries fromport 53 by default.  Instead, they send queries from high-numberedports, same as resolvers do.</P><PCLASS="para">This can cause problems withpacket filtering firewalls that have been configured to allow server-to-servertraffic but not resolver-to-server traffic, because they typicallyexpect server-to-server traffic to originate from port 53 and terminateat port 53.</P><PCLASS="para">There are two solutions to this problem:</P><OLCLASS="orderedlist"><LICLASS="listitem"><PCLASS="para">Reconfigure the firewall to allow nameserver queries from ports other than 53 (assuming this doesn'tcompromise the security of the firewall by allowing packets fromInternet hosts to high-numbered ports on internal nameservers).</P></LI><LICLASS="listitem"><PCLASS="para">Configure BIND to revert to its old behavior with the<ICLASS="function">query-source</I>substatement.</P></LI></OL><PCLASS="para"><ICLASS="function">query-source</I> takes as arguments an address specification and anoptional port number.  For example:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">     options { query-source address * port 53;};</PRE></BLOCKQUOTE><PCLASS="para">tells <SPANCLASS="acronym">BIND</SPAN> to use port 53 as the source port for queries sentfrom all interfaces.  You can use a non-wildcard address specificationto limit the addresses that <SPANCLASS="acronym">BIND</SPAN> will send queries from.  For example,on <ICLASS="systemitem.sitename">wormhole</I>:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">     options { query-source 192.249.294.1 port *;};</PRE></BLOCKQUOTE><PCLASS="para">would tell <SPANCLASS="acronym">BIND</SPAN> to send all queries from the 192.249.249.1address (i.e., not from 192.253.253.1), and to use dynamic,high-numbered ports.</P></DIV></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="AUTOID-16648">15.4.1.2 Application gateways</A></H4><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-16651"></A><ACLASS="indexterm"NAME="AUTOID-16653"></A>Application gateways operate at the application protocol level, several layershigher in the <SPANCLASS="acronym">OSI</SPAN> reference model than most packet filters (<ACLASS="xref"HREF="ch15_04.htm#DNS3-CHP-15-FIG-2"TITLE=" Application gateways operate at the application layer of the stack">Figure 15.2</A>).  In a sense, they &quot;understand&quot; theapplication protocol in the same way a server for that particularapplication would. An <SPANCLASS="acronym">FTP</SPAN> application gateway, for example, can makethe decision to allow or deny a particular <SPANCLASS="acronym">FTP</SPAN> operation, like a <KBDCLASS="command">RETR</KBD>(a <KBDCLASS="command">get</KBD>) or a <KBDCLASS="command">STOR</KBD> (a <KBDCLASS="command">put</KBD>).</P><H4CLASS="figure"><ACLASS="title"NAME="DNS3-CHP-15-FIG-2">Figure 15.2:  Application gateways operate at the application layer of the stack</A></H4><IMGCLASS="graphic"SRC="figs/dns3_1502.gif"ALT="Figure 15.2"><PCLASS="para">The bad news, and what's important for ourpurposes, is that most application gateway firewalls handle only<ACLASS="indexterm"NAME="AUTOID-16667"></A><SPANCLASS="acronym">TCP</SPAN>-based application protocols. <SPANCLASS="acronym">DNS</SPAN>,of course, is largely <SPANCLASS="acronym">UDP</SPAN>-based, and we know of no application gatewaysfor <SPANCLASS="acronym">DNS</SPAN>.  This implies that if you run an application gateway firewall,your internal hosts will likely not be able to communicate directlywith name servers on the Internet.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-16675"></A>The popular FirewallToolkit from Trusted Information Systems (<SPANCLASS="acronym">TIS</SPAN>) is a suite of applicationgateways for common Internet protocols like Telnet, <SPANCLASS="acronym">FTP</SPAN>, and <SPANCLASS="acronym">HTTP</SPAN>. <SPANCLASS="acronym">TIS</SPAN>'sGauntlet product is also based on application gateways, as is Raptor'sEagle Firewall.</P><PCLASS="para">Note that these two categories of firewallare really just generalizations.  The state of the art in firewallschanges very quickly, and by the time you read this, you may havea firewall that includes an application gateway for <SPANCLASS="acronym">DNS</SPAN>.  Whichfamily your firewall falls into is only important because it <EMCLASS="emphasis">suggests</EM>what that firewall is capable of; what's more important is whetheryour particular firewall will let you permit <SPANCLASS="acronym">DNS</SPAN> traffic betweenarbitrary internal hosts and the Internet.</P></DIV></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="AUTOID-16685">15.4.2 A Bad Example</A></H3><PCLASS="para">The simplest configurationis to allow <SPANCLASS="acronym">DNS</SPAN> traffic to pass freely through your firewall (assumingyou can configure your firewall to do that).  That way, any internalname server can query any name server on the Internet, and any Internetname server can query any of your internal name servers.  You don'tneed any special configuration.</P><PCLASS="para">Unfortunately, this is a really bad idea, for a number of reasons:</P><DLCLASS="variablelist"><DTCLASS="term">Version control</DT><DDCLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-16695"></A><ACLASS="indexterm"NAME="AUTOID-16697"></A>The developers of <SPANCLASS="acronym">BIND</SPAN> are constantly finding andfixing security-related bugs in the <SPANCLASS="acronym">BIND</SPAN> code.  Consequently, it'simportant to run the latest released version of <SPANCLASS="acronym">BIND</SPAN>, especiallyon name servers that are directly exposed to the Internet.  If oneor just a few of your name servers communicate directly with nameservers on the Internet, upgrading to a new version is easy.  Ifany of the name servers on your network can, it's another story.</P></DD><DTCLASS="term">Possible vector for attack</DT><DDCLASS="listitem"><PCLASS="para">Even if you're not running a name server on a particularhost, a hacker might be able to take advantage of the fact thatyou allow <SPANCLASS="acronym">DNS</SPAN> traffic through your firewall to attack that host. For example, a co-conspirator working on the inside could set upa Telnet daemon listening on the host's <SPANCLASS="acronym">DNS</SPAN> port, allowing the hackerto <KBDCLASS="command">telnet</KBD> right in.</P></DD></DL><PCLASS="para">For the rest of this chapter, we'll try to set a good example.</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="AUTOID-16711">15.4.3 Internet Forwarders</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="CH15.FORWARDER"></A>Given the dangersof allowing bidirectional <SPANCLASS="acronym">DNS</SPAN> traffic through the firewall unrestricted,most organizations elect to limit the internal hosts that can &quot;talk<SPANCLASS="acronym">DNS</SPAN>&quot; to the Internet.  In an application gateway firewall, or anyfirewall without the ability to pass <SPANCLASS="acronym">DNS</SPAN> traffic, the only hostthat can communicate with Internet name servers is the bastion host (see <ACLASS="xref"HREF="ch15_04.htm#DNS3-CHP-15-FIG-3"TITLE="Diagram of a small network, showing the bastion host">Figure 15.3</A>).</P><H4CLASS="figure"><ACLASS="title"NAME="DNS3-CHP-15-FIG-3">Figure 15.3: Diagram of a small network, showing the bastion host</A></H4><IMGCLASS="graphic"SRC="figs/dns3_1503.gif"ALT="Figure 15.3"><PCLASS="para">In a packet-filtering firewall, the firewall'sadministrator can configure the firewall to let any set of internalname servers communicate with Internet name servers.  Often, thisis a small set of hosts that run name servers under the direct controlof the domain administrator (see <ACLASS="xref"HREF="ch15_04.htm#DNS3-CHP-15-FIG-4"TITLE="Diagram of a small network, showing select internal name servers">Figure 15.4</A>).</P><H4CLASS="figure"><ACLASS="title"NAME="DNS3-CHP-15-FIG-4">Figure 15.4: Diagram of a small network, showing select internal name servers</A></H4><IMGCLASS="graphic"SRC="figs/dns3_1504.gif"ALT="Figure 15.4"><PCLASS="para">Servers that can query name servers on theInternet directly don't require any special configuration.  Theirhints files contain the Internet's root name servers, which enablesthem to resolve Internet domain names.  Internal name servers that<EMCLASS="emphasis">can't</EM> query name servers on the Internet, however, need to knowto forward queries they can't resolve to one of the name serversthat can.  This is done with the <ICLASS="function">forwarders</I> directive or substatement,introduced in <ACLASS="xref"HREF="ch10_01.htm"TITLE="Advanced Features and Security">Chapter 10, <CITECLASS="chapter">Advanced Features and Security</CITE></A>.</P><PCLASS="para"><ACLASS="xref"HREF="ch15_04.htm#DNS3-CHP-15-FIG-5"TITLE="Using forwarders">Figure 15.5</A> illustrates a commonforwarding setup, with internal name servers forwarding queries to aname server running on a bastion host.</P><H4CLASS="figure"><ACLASS="title"NAME="DNS3-CHP-15-FIG-5">Figure 15.5: Using forwarders</A></H4><IMGCLASS="graphic"SRC="figs/dns3_1505.gif"ALT="Figure 15.5"><PCLASS="para">At Movie U., we put in a firewall to protect ourselves from theBig Bad Internet several years ago.  Ours is a packet-filteringfirewall, and we negotiated with our firewall administrator to allow<SPANCLASS="acronym">DNS</SPAN> traffic between Internet name servers and twoof our name servers, <ICLASS="systemitem.sitename">terminator.movie.edu</I> and <ICLASS="systemitem.sitename">wormhole.movie.edu</I>.  Here's how weconfigured the other internal name servers at the university.  For our<SPANCLASS="acronym">BIND</SPAN> 8 name servers:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">options {                forwarders { 192.249.249.1; 192.249.249.3; };                forward only;};</PRE></BLOCKQUOTE><PCLASS="para">and for our <SPANCLASS="acronym">BIND</SPAN> 4 name servers:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">forwarders 192.249.249.3 192.249.249.1options forward-only</PRE></BLOCKQUOTE><PCLASS="para"> (We vary the order in which the forwarders appearto help spread the load between them.)</P><PCLASS="para">When an internalname server receives a query for a name it can't resolve locally,like an Internet domain name, it forwards that query to one of ourforwarders, which can resolve the name using name servers on theInternet.  Simple!</P><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="AUTOID-16748">15.4.3.1 The trouble with forwarding</A></H4><PCLASS="para">Unfortunately,it's a little too simple.  Forwarding starts to get in the way onceyou implement subdomains or build an extensive network.  To explainwhat we mean, take a look at part of the configuration file on <ICLASS="systemitem.sitename">zardoz.movie.edu</I>:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">options {                directory &quot;/usr/local/named&quot;;                forwarders { 192.249.249.1; 192.253.253.3; };};zone &quot;movie.edu&quot; {                type slave;                file &quot;db.movie&quot;;                masters { 192.249.249.3; };};</PRE></BLOCKQUOTE><PCLASS="para"><ICLASS="systemitem.sitename">zardoz.movie.edu</I> is a slave for <ICLASS="systemitem.sitename">movie.edu</I> and usesour two forwarders.  What happens when <ICLASS="systemitem.sitename">zardoz</I> receives a query fora name in <ICLASS="systemitem.sitename">fx.movie.edu</I>? <ICLASS="systemitem.sitename">zardoz</I>, as an authoritative <ICLASS="systemitem.sitename">movie.edu</I> nameserver, has the <SPANCLASS="acronym">NS</SPAN> records that delegate <ICLASS="systemitem.sitename">fx.movie.edu</I> to its authoritativename servers.  But it's also been configured to forward queriesit can't resolve locally to <ICLASS="systemitem.sitename">terminator</I> and <ICLASS="systemitem.sitename">wormhole</I>.  Which willit do?</P><PCLASS="para">It turns out that <ICLASS="systemitem.sitename">zardoz</I> will ignore the delegationinformation and forward the query to <ICLASS="systemitem.sitename">terminator</I>.  That'll work,since <ICLASS="systemitem.sitename">terminator</I> will receive the recursive query and ask an <ICLASS="systemitem.sitename">fx.movie.edu</I>name server on <ICLASS="systemitem.sitename">zardoz</I>'s behalf.  But it's not particularly efficient,since <ICLASS="systemitem.sitename">zardoz</I> could easily have sent the query directly.</P><PCLASS="para">Nowimagine the scale of the network is much larger: a corporate networkthat spans many continents, with tens of thousands of hosts and hundredsor thousands of name servers.  All of the internal name serversthat don't have direct Internet connectivity&nbsp;- the vast majority ofthem&nbsp;- use a small set of forwarders.  What are the problems withthis picture?</P><DLCLASS="variablelist"><DTCLASS="term">Single point of failure</DT><DDCLASS="listitem"><PCLASS="para">If the forwarders fail, your name servers lose theability to resolve both Internet domain names and internal domainnames that they don't have cached or in authoritative data.</P></DD><DTCLASS="term">Concentration of load</DT><DDCLASS="listitem"><PCLASS="para">The forwarders will have an enormous query loadplaced on them.  This is both because of the large number of internalname servers that use them and because the queries are recursiveand require a good deal of work to answer.</P></DD><DTCLASS="term">Inefficient resolution</DT><DDCLASS="listitem"><PCLASS="para">Imagine two internal name servers, authoritativefor <ICLASS="systemitem.sitename">west.acmebw.com</I> and <ICLASS="systemitem.sitename">east.acmebw.com</I>, respectively, both on thesame network segment in Boulder, Colorado.  Both are configuredto use the company's forwarder in Bethesda, Maryland.  For the <ICLASS="systemitem.sitename">west.acmebw.com</I>name server to resolve a name in <ICLASS="systemitem.sitename">east.acmebw.com</I>, it sends a queryto the forwarder in Bethesda.  The forwarder in Bethesda then sendsa query back to Boulder to the <ICLASS="systemitem.sitename">east.acmebw.com</I> name server, theoriginal querier's neighbor.  The <ICLASS="systemitem.sitename">east.acmebw.com</I> name server repliesby sending a response back to Bethesda, which the forwarder sendsback to Boulder.</P><PCLASS="para">In a traditional configuration with root name servers,the <ICLASS="systemitem.sitename">west.acmebw.com</I> name server would quickly have learned thatan <ICLASS="systemitem.sitename">east.acmebw.com</I> name server was next door, and would favor it(because of its low round-trip time).  Using forwarders &quot;short-circuits&quot;the normally efficient resolution process.</P></DD></DL><PCLASS="para">The upshot is that forwarding is fine for small networks andsimple namespaces, but probably inadequate for large networks andcomplex namespaces.  We found this out the hard way at Movie U.as our network grew, and were forced to implement internal roots.</P></DIV><ACLASS="indexterm"NAME="AUTOID-16795"></A></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="AUTOID-16796">15.4.4 Internal Roots</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="CH15.INTERNAL1"></A><ACLASS="indexterm"NAME="CH15.INTERNAL2"></A><ACLASS="indexterm"NAME="CH15.INTERNAL3"></A>If you want to avoid thescalability problems of forwarding, you can set up your own rootname servers.  These internal roots will serve only the name servers inyour organization.  They'll only know about the portions of thenamespace relevant to your organization.</P><PCLASS="para">What good arethey?  By using an architecture based on root name servers, yougain the scalability of the Internet's namespace (which should be goodenough for most companies), plus redundancy, distributed load, andefficient resolution. You can have as many internal roots as theInternet has roots&nbsp;- thirteen or so&nbsp;- whereas having that many forwardersmay be an undue security exposure and a configuration burden.  Mostof all, the internal roots don't get used frivolously. Name serversonly need to consult an internal root when they time out the <SPANCLASS="acronym">NS</SPAN>records for your top-level zones. Using forwarders, name serversmay have to query a forwarder once <EMCLASS="emphasis">per resolution</EM>.</P><PCLASS="para">The moral of our story is that if you have, or intend to have,a large name space and lots of internal name servers, internal rootname servers will scale better than any other solution.</P><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="AUTOID-16810">15.4.4.1 Where to put internal root name servers</A></H4><PCLASS="para">Sincename servers &quot;lock on&quot; to the closest root name server by favoringthe one with the lowest roundtrip time, it pays to pepper your networkwith internal root name servers.  If your organization's network spansthe U.S., Europe, and the Pacific Rim, consider locating at leastone internal root name server on each continent.  If you have threemajor sites in Europe, give each of them an internal root.</P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="AUTOID-16813">15.4.4.2 Forward mapping delegation</A></H4><PCLASS="para">Here's howan internal root name server is configured.<ACLASS="indexterm"NAME="AUTOID-16816"></A>An internal root delegates directlyto any domains you administer. For example, on the <EMCLASS="emphasis">movie.edu</EM> network,the root zone's data file would contain:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">movie.edu.  86400  <SPANCLASS="acronym">IN</SPAN>  <SPANCLASS="acronym">NS</SPAN>  terminator.movie.edu.            86400  <SPANCLASS="acronym">IN</SPAN>  <SPANCLASS="acronym">NS</SPAN>  wormhole.movie.edu.            86400  <SPANCLASS="acronym">IN</SPAN>  <SPANCLASS="acronym">NS</SPAN>  zardoz.movie.edu.terminator.movie.edu.  86400  <SPANCLASS="acronym">IN</SPAN>  A  192.249.249.3wormhole.movie.edu.    86400  <SPANCLASS="acronym">IN</SPAN>  A  192.249.249.1                       86400  <SPANCLASS="acronym">IN</SPAN>  A  192.253.253.1zardoz.movie.edu.      86400  <SPANCLASS="acronym">IN</SPAN>  A  192.249.249.9                       86400  <SPANCLASS="acronym">IN</SPAN>  A  192.253.253.9</PRE></BLOCKQUOTE><PCLASS="para">On the Internet, this information would appear inthe <EMCLASS="emphasis">edu</EM> name servers' databases. On the <EMCLASS="emphasis">movie.edu</EM> network,of course, there aren't any <EMCLASS="emphasis">edu</EM> name servers,so you delegate directly to <EMCLASS="emphasis">movie.edu</EM> fromthe root.</P><PCLASS="para">Notice that this doesn't contain delegationto <EMCLASS="emphasis">fx.movie.edu</EM> or any other subdomain of <EMCLASS="emphasis">movie.edu</EM>.The <EMCLASS="emphasis">movie.edu</EM> name servers know which nameservers are authoritative for all <EMCLASS="emphasis">movie.edu</EM> subdomains,and all queries for information in those subdomains will pass throughthe <EMCLASS="emphasis">movie.edu</EM> name servers, so there's no needto delegate them here.</P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="AUTOID-16843">15.4.4.3 in-addr.arpa delegation</A></H4><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-16846"></A><ACLASS="indexterm"NAME="AUTOID-16849"></A><ACLASS="indexterm"NAME="AUTOID-16852"></A><ACLASS="indexterm"NAME="AUTOID-16855"></A>We also need to delegate from the internalroots to the <EMCLASS="emphasis">in-addr.arpa</EM> domains that correspondto the networks <EMCLASS="emphasis">movie.edu</EM> uses:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">249.249.192.in-addr.arpa.  86400  <SPANCLASS="acronym">IN</SPAN>  <SPANCLASS="acronym">NS</SPAN>  terminator.movie.edu.                           86400  <SPANCLASS="acronym">IN</SPAN>  <SPANCLASS="acronym">NS</SPAN>  wormhole.movie.edu.                           86400  <SPANCLASS="acronym">IN</SPAN>  <SPANCLASS="acronym">NS</SPAN>  zardoz.movie.edu.253.253.192.in-addr.arpa.  86400  <SPANCLASS="acronym">IN</SPAN>  <SPANCLASS="acronym">NS</SPAN>  terminator.movie.edu.                           86400  <SPANCLASS="acronym">IN</SPAN>  <SPANCLASS="acronym">NS</SPAN>  wormhole.movie.edu.                           86400  <SPANCLASS="acronym">IN</SPAN>  <SPANCLASS="acronym">NS</SPAN>  zardoz.movie.edu.254.253.192.in-addr.arpa.  86400  <SPANCLASS="acronym">IN</SPAN>  <SPANCLASS="acronym">NS</SPAN>  bladerunner.fx.movie.edu.                           86400  <SPANCLASS="acronym">IN</SPAN>  <SPANCLASS="acronym">NS</SPAN>  outland.fx.movie.edu.                           86400  <SPANCLASS="acronym">IN</SPAN>  <SPANCLASS="acronym">NS</SPAN>  alien.fx.movie.edu.20.254.192.in-addr.arpa.   86400  <SPANCLASS="acronym">IN</SPAN>  <SPANCLASS="acronym">NS</SPAN>  bladerunner.fx.movie.edu.                           86400  <SPANCLASS="acronym">IN</SPAN>  <SPANCLASS="acronym">NS</SPAN>  outland.fx.movie.edu.                           86400  <SPANCLASS="acronym">IN</SPAN>  <SPANCLASS="acronym">NS</SPAN>  alien.fx.movie.edu.</PRE></BLOCKQUOTE><PCLASS="para">Notice that we <EMCLASS="emphasis">did</EM> include delegationfor the <EMCLASS="emphasis">254.253.192.in-addr.arpa</EM> and <EMCLASS="emphasis">20.254.192.in-addr.arpa</EM> zones,even though they correspond to the <EMCLASS="emphasis">fx.movie.edu</EM> zone.We didn't need to delegate to <EMCLASS="emphasis">fx.movie.edu</EM>, becausewe'd already delegated to its parent. The <EMCLASS="emphasis">movie.edu</EM> nameservers delegate to <EMCLASS="emphasis">fx.movie.edu</EM>, so by transitivitythe roots delegate to <EMCLASS="emphasis">fx.movie.edu</EM>. Since neitherof the other <EMCLASS="emphasis">in-addr.arpa</EM> zones is a parentof <EMCLASS="emphasis">254.253.192.in-addr.arpa</EM> or <EMCLASS="emphasis">20.254.192.in-addr.arpa</EM>,we needed to delegate both zones from the root. As we've coveredearlier, we don't need to add address records for the three SpecialEffects name servers, <EMCLASS="emphasis">bladerunner, outland</EM>, and <EMCLASS="emphasis">alien</EM>, becausea remote name server can already find their addresses by followingdelegation from <EMCLASS="emphasis">movie.edu</EM>.</P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="AUTOID-16900">15.4.4.4 The db.root file</A></H4><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-16903"></A><ACLASS="indexterm"NAME="AUTOID-16905"></A>All that's left is to add an <SPANCLASS="acronym">SOA</SPAN> record for theroot zone and <SPANCLASS="acronym">NS</SPAN> records for this internal root name server andany others:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">.  <SPANCLASS="acronym">IN</SPAN>  <SPANCLASS="acronym">SOA</SPAN>  rainman.movie.edu.  hostmaster.movie.edu.  (            1       ; serial            86400   ; refresh            3600    ; retry            608400  ; expire            86400 ) ; minimum   <SPANCLASS="acronym">IN</SPAN>  <SPANCLASS="acronym">NS</SPAN>  rainman.movie.edu.   <SPANCLASS="acronym">IN</SPAN>  <SPANCLASS="acronym">NS</SPAN>  awakenings.movie.edu.rainman.movie.edu.    86400  <SPANCLASS="acronym">IN</SPAN>  A  192.249.249.254awakenings.movie.edu. 86400  <SPANCLASS="acronym">IN</SPAN>  A  192.253.253.254</PRE></BLOCKQUOTE><PCLASS="para"><EMCLASS="emphasis">rainman.movie.edu</EM> and <EMCLASS="emphasis">awakenings.movie.edu</EM> arethe hosts running internal root name servers. We shouldn't run an internalroot on a bastion host, because if a name server on the Internetaccidentally queries it for data it's not authoritative for, theinternal root will respond with its list of roots&nbsp;- all internal!</P><PCLASS="para">So the whole <EMCLASS="emphasis">db.root</EM> file (by convention,we call the root zone's data file <EMCLASS="emphasis">db.root</EM>)looks like this:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">.  <SPANCLASS="acronym">IN</SPAN>  <SPANCLASS="acronym">SOA</SPAN>  rainman.movie.edu.  hostmaster.movie.edu.  (            1       ; serial            86400   ; refresh            3600    ; retry            608400  ; expire            86400 ) ; minimum   <SPANCLASS="acronym">IN</SPAN>  <SPANCLASS="acronym">NS</SPAN>  rainman.movie.edu.   <SPANCLASS="acronym">IN</SPAN>  <SPANCLASS="acronym">NS</SPAN>  awakenings.movie.edu.rainman.movie.edu.    604800  <SPANCLASS="acronym">IN</SPAN>  A  192.249.249.254awakenings.movie.edu. 604800  <SPANCLASS="acronym">IN</SPAN>  A  192.253.253.254movie.edu.  86400  <SPANCLASS="acronym">IN</SPAN>  <SPANCLASS="acronym">NS</SPAN>  terminator.movie.edu.            86400  <SPANCLASS="acronym">IN</SPAN>  <SPANCLASS="acronym">NS</SPAN>  wormhole.movie.edu.            86400  <SPANCLASS="acronym">IN</SPAN>  <SPANCLASS="acronym">NS</SPAN>  zardoz.movie.edu.terminator.movie.edu.  86400  <SPANCLASS="acronym">IN</SPAN>  A  192.249.249.3wormhole.movie.edu.    86400  <SPANCLASS="acronym">IN</SPAN>  A  192.249.249.1                       86400  <SPANCLASS="acronym">IN</SPAN>  A  192.253.253.1zardoz.movie.edu.      86400  <SPANCLASS="acronym">IN</SPAN>  A  192.249.249.9                       86400  <SPANCLASS="acronym">IN</SPAN>  A  192.253.253.9249.249.192.in-addr.arpa.  86400  <SPANCLASS="acronym">IN</SPAN>  <SPANCLASS="acronym">NS</SPAN>  terminator.movie.edu.                           86400  <SPANCLASS="acronym">IN</SPAN>  <SPANCLASS="acronym">NS</SPAN>  wormhole.movie.edu.                           86400  <SPANCLASS="acronym">IN</SPAN>  <SPANCLASS="acronym">NS</SPAN>  zardoz.movie.edu.253.253.192.in-addr.arpa.  86400  <SPANCLASS="acronym">IN</SPAN>  <SPANCLASS="acronym">NS</SPAN>  terminator.movie.edu.                           86400  <SPANCLASS="acronym">IN</SPAN>  <SPANCLASS="acronym">NS</SPAN>  wormhole.movie.edu.                           86400  <SPANCLASS="acronym">IN</SPAN>  <SPANCLASS="acronym">NS</SPAN>  zardoz.movie.edu.254.253.192.in-addr.arpa.  86400  <SPANCLASS="acronym">IN</SPAN>  <SPANCLASS="acronym">NS</SPAN>  bladerunner.fx.movie.edu.                           86400  <SPANCLASS="acronym">IN</SPAN>  <SPANCLASS="acronym">NS</SPAN>  outland.fx.movie.edu.                           86400  <SPANCLASS="acronym">IN</SPAN>  <SPANCLASS="acronym">NS</SPAN>  alien.fx.movie.edu.20.254.192.in-addr.arpa.   86400  <SPANCLASS="acronym">IN</SPAN>  <SPANCLASS="acronym">NS</SPAN>  bladerunner.fx.movie.edu.                           86400  <SPANCLASS="acronym">IN</SPAN>  <SPANCLASS="acronym">NS</SPAN>  outland.fx.movie.edu.                           86400  <SPANCLASS="acronym">IN</SPAN>  <SPANCLASS="acronym">NS</SPAN>  alien.fx.movie.edu.</PRE></BLOCKQUOTE><PCLASS="para">The <EMCLASS="emphasis">named.conf</EM> file on bothof the internal root name servers, <EMCLASS="emphasis">rainman</EM> and <EMCLASS="emphasis">awakenings</EM>,contains the lines:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">zone &quot;.&quot; {                type master;                file &quot;db.root&quot;;};</PRE></BLOCKQUOTE><PCLASS="para">Or, for a <SPANCLASS="acronym">BIND</SPAN> 4 server's <ICLASS="filename">named.boot</I> file:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">primary    .    db.root</PRE></BLOCKQUOTE><PCLASS="para">This replaces a <EMCLASS="emphasis">zone</EM> statementof type <EMCLASS="emphasis">hint</EM> or a<ACLASS="indexterm"NAME="AUTOID-16981"></A><EMCLASS="emphasis">cache</EM> directive&nbsp;- a rootname server doesn't need a cache file to tell it where the otherroots are; it can find that in <EMCLASS="emphasis">db.root</EM>. Didwe really mean that <EMCLASS="emphasis">each</EM> root name server isa primary for the root domain? Actually, that depends on the versionof <SPANCLASS="acronym">BIND</SPAN> you're running. <SPANCLASS="acronym">BIND</SPAN> versions after 4.9 will let you declarea server a slave for the root domain, but <SPANCLASS="acronym">BIND</SPAN> 4.8.3 and earlierinsist that all root name servers load <EMCLASS="emphasis">db.root</EM> asprimaries.</P><PCLASS="para">If you don't have a lot of idle hosts sittingaround that you can turn into internal roots, don't despair!  Anyinternal name server (i.e., one that's not running on a bastionhost or outside your firewall) can serve double duty as an internalroot <EMCLASS="emphasis">and</EM> as an authoritative name server for whatever other zonesyou need it to load. Remember, a single name server can be authoritativefor many, many zones, including the root.<ACLASS="indexterm"NAME="AUTOID-16992"></A><ACLASS="indexterm"NAME="AUTOID-16994"></A></P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="AUTOID-16997">15.4.4.5 Configuring other internal name servers</A></H4><PCLASS="para">Onceyou've set up internal root name servers, configure all your nameservers on hosts anywhere on your internal network to use them.Any name server running on a host without direct Internet connectivity shouldlist the internal roots in its hints file:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">; Internal db.cache file, for movie.edu hosts without direct; Internet connectivity;; Don't use this cache file on a host with Internet connectivity!;.  99999999  <SPANCLASS="acronym">IN</SPAN>  <SPANCLASS="acronym">NS</SPAN>  rainman.movie.edu.   99999999  <SPANCLASS="acronym">IN</SPAN>  <SPANCLASS="acronym">NS</SPAN>  awakenings.movie.edu.rainman.movie.edu.     99999999  <SPANCLASS="acronym">IN</SPAN>  A  192.249.249.254awakenings.movie.edu.  99999999  <SPANCLASS="acronym">IN</SPAN>  A  192.253.253.254</PRE></BLOCKQUOTE><PCLASS="para">Name servers running on hosts using this cache filewill be able to resolve names in <EMCLASS="emphasis">movie.edu</EM> andin Movie U.'s <EMCLASS="emphasis">in-addr.arpa</EM> domains, but notoutside of those domains.</P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="AUTOID-17010">15.4.4.6 How internal name servers use internal roots</A></H4><PCLASS="para">To tie together how this whole scheme works, let's go throughan example of name resolution on an internal caching-only name serverusing these internal root name servers. First, the internal nameserver receives a query for a domain name in <EMCLASS="emphasis">movie.edu</EM>,say the address of <EMCLASS="emphasis">gump.fx.movie.edu</EM>. If theinternal name server doesn't have any &quot;better&quot; information cached,it starts by querying an internal root name server. If it has communicatedwith the internal roots before, it has a round-trip time associatedwith each, which tells it which of the internal roots is respondingto it most quickly. It sends a <EMCLASS="emphasis">nonrecursive</EM> queryto that internal root for <EMCLASS="emphasis">gump.fx.movie.edu</EM>'saddress. The internal root answers with a referral to the <EMCLASS="emphasis">movie.edu</EM> nameservers on <EMCLASS="emphasis">terminator.movie.edu</EM>, <EMCLASS="emphasis">wormhole.movie.edu</EM>, and <EMCLASS="emphasis">zardoz.movie.edu</EM>.The caching-only name server follows up by sending another nonrecursivequery to one of the <EMCLASS="emphasis">movie.edu</EM> name serversfor <EMCLASS="emphasis">gump</EM>'s address. The <EMCLASS="emphasis">movie.edu</EM> nameserver responds with a referral to the <EMCLASS="emphasis">fx.movie.edu</EM> nameservers. The caching-only name server sends the same nonrecursivequery for <EMCLASS="emphasis">gump</EM>'s address to one of the <EMCLASS="emphasis">fx.movie.edu</EM> nameservers, and finally receives a response.</P><PCLASS="para">Contrast thiswith the way a forwarding setup would have worked.  Let's imaginethat instead of using internal root name servers, our caching-onlyname server were configured to forward queries to first <EMCLASS="emphasis">terminator</EM> andthen <EMCLASS="emphasis">wormhole</EM>.  In that case, the caching-onlyname server would have checked its cache for the address of <EMCLASS="emphasis">gump.fx.movie.edu</EM> and,not finding it, would have forwarded the query to <EMCLASS="emphasis">terminator</EM>.  <EMCLASS="emphasis">terminator</EM> wouldhave queried an <EMCLASS="emphasis">fx.movie.edu</EM> name server onthe caching-only name server's behalf and returned the answer.Should the caching-only name server need to look up another namein <EMCLASS="emphasis">fx.movie.edu</EM>, it would still ask the forwarder,even though the forwarder's response to the query for <EMCLASS="emphasis">gump.fx.movie.edu</EM>'s addressmay have contained the names and addresses of the <EMCLASS="emphasis">fx.movie.edu</EM> nameservers.</P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="AUTOID-17037">15.4.4.7 Mail from internal hosts to the Internet</A></H4><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-17040"></A>But wait! That's not all internal rootswill do for you. We talked about getting mail to the Internet withoutchanging <EMCLASS="emphasis">sendmail</EM>'s configuration all overthe network.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-17045"></A><ACLASS="indexterm"NAME="AUTOID-17048"></A>Wildcard records are the key to getting mail to work&nbsp;- specifically, wildcard<SPANCLASS="acronym">MX</SPAN> records. Let's say we'd like mail to the Internet to be forwardedthrough <EMCLASS="emphasis">postmanrings2x.movie.edu</EM>, the MovieU. bastion host, which has direct Internet connectivity. Then addingthese records to <EMCLASS="emphasis">db.root</EM>:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">*        <SPANCLASS="acronym">IN</SPAN>    <SPANCLASS="acronym">MX</SPAN>    5 postmanrings2x.movie.edu.*.edu.   <SPANCLASS="acronym">IN</SPAN>    <SPANCLASS="acronym">MX</SPAN>    10 postmanrings2x.movie.edu.</PRE></BLOCKQUOTE><PCLASS="para">will get the job done. We need the *<EMCLASS="emphasis">.edu</EM> <SPANCLASS="acronym">MX</SPAN>record in addition to the * record becauseof the <SPANCLASS="acronym">DNS</SPAN> wildcard production rules we described in the wildcardssection in <ACLASS="xref"HREF="ch10_01.htm"TITLE="Advanced Features and Security">Chapter 10</A>. Since there are explicit data for <EMCLASS="emphasis">movie.edu</EM> inthe zone, the first wildcard won't match <EMCLASS="emphasis">movie.edu</EM> orany other subdomains of <EMCLASS="emphasis">edu</EM>. We need another,explicit wildcard record for <EMCLASS="emphasis">edu</EM> to match these domains.</P><PCLASS="para">Now mailers on our internal <EMCLASS="emphasis">movie.edu</EM> hostswill send mail addressed to Internet domains to <EMCLASS="emphasis">postmanrings2x</EM> forforwarding. For example, mail addressed to <EMCLASS="emphasis">nic.ddn.mil</EM> willmatch the first wildcard <SPANCLASS="acronym">MX</SPAN> record:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>nslookup -type=mx nic.ddn.mil.</B></CODE> <ICLASS="lineannotation">&nbsp;- Matches the <SPANCLASS="acronym">MX</SPAN> record for *</I>Server:  rainman.movie.eduAddress:  192.249.249.19nic.ddn.mil     preference = 5, mail exchanger = postmanrings2x.movie.edupostmanrings2x.movie.edu    internet address = 192.249.249.20</PRE></BLOCKQUOTE><PCLASS="para">while mail addressed to <EMCLASS="emphasis">vangogh.cs.berkeley.edu</EM> willmatch the second <SPANCLASS="acronym">MX</SPAN> record:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>nslookup -type=mx vangogh.cs.berkeley.edu.</B></CODE> <ICLASS="lineannotation">&nbsp;- Matches the <SPANCLASS="acronym">MX</SPAN> record for *.edu</I>Server:  rainman.movie.eduAddress:  192.249.249.19vangogh.cs.berkeley.edu     preference = 10, mail exchanger = postmanrings2x.movie.edupostmanrings2x.movie.edu    internet address = 192.249.249.20</PRE></BLOCKQUOTE><PCLASS="para">Once the mail reaches <EMCLASS="emphasis">postmanrings2x</EM>,our bastion host, <EMCLASS="emphasis">postmanrings2x</EM>'s mailer willlook up the <SPANCLASS="acronym">MX</SPAN> records for these addresses itself. Since <EMCLASS="emphasis">postmanrings2x</EM> willresolve the name using the Internet's name space instead of theinternal name space, it will find the real <SPANCLASS="acronym">MX</SPAN> records for the destinationdomain and deliver the mail. No changes to <EMCLASS="emphasis">sendmail</EM>'s configuration arenecessary.</P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="AUTOID-17090">15.4.4.8 <ACLASS="indexterm"NAME="AUTOID-17092"></A>Mail to specific Internet domains</A></H4><PCLASS="para">Another nice perk of this internal root scheme is that it givesyou the ability to forward mail addressed to certain Internet domainsthrough particular bastion hosts, if you have more than one. We canchoose, for example, to send all mail addressed to<EMCLASS="emphasis">uk</EM> domain recipients to our bastion host inLondon first, and then out onto the Internet. This can be very usefulif our internal network's connectivity or reliability is better thanthe U.K.'s section of the Internet.</P><PCLASS="para">Movie U. has a private network connectionto our sister university in London near Pinewood Studios. As itturns out, sending mail across our private link, and then throughthe Pinewood host to correspondents in the U.K., is more reliablethan sending it directly across the Internet. So we add the followingwildcard records to <EMCLASS="emphasis">db.root</EM>:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">; holygrail is at the other end of the U.K. Internet link*.uk.    IN    MX    10 holygrail.movie.ac.uk.holygrail.movie.ac.uk.    IN   A    192.168.76.4</PRE></BLOCKQUOTE><PCLASS="para">Now, mail addressed to users in subdomains of <EMCLASS="emphasis">uk</EM> willbe forwarded to the host <EMCLASS="emphasis">holygrail.movie.ac.uk</EM> atour sister university, which presumably has facilities to forwardthat mail to other domains in the U.K.</P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="AUTOID-17103">15.4.4.9 The trouble with internal roots</A></H4><PCLASS="para">Unfortunately,just as forwarding has its problems, internal roots have their limitations.Chief among these is the fact that your internal hosts can't seethe Internet namespace.  On some networks, this isn't an issue,because most internal hosts don't have any direct Internet connectivity.On others, however, the Internet firewall or other software mayrequire that all internal hosts have the ability to resolve namesin the Internet's namespace.  For these networks, an internal root architecturewon't work.</P></DIV><ACLASS="indexterm"NAME="AUTOID-17106"></A><ACLASS="indexterm"NAME="AUTOID-17107"></A><ACLASS="indexterm"NAME="AUTOID-17108"></A></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="AUTOID-17109">15.4.5 Views</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="CH15.VIEWS"></A>The solution to this problem may be views, which the ISC hopesto introduce to BIND sometime soon in the version 8 releasestream.[2]Views would allow you to specify when during resolution a name servertries its forwarders and under what conditions.[3]</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[2] Views haven't been implemented yet, but we were granted a peekat how they may work and are documenting them in the hope thatthey'll beat this book to production.</P><PCLASS="para">[3] <ACLASS="indexterm"NAME="AUTOID-17118"></A>Todd Aven's <ICLASS="function">noforward</I> patch for<SPANCLASS="acronym">BIND</SPAN> 4.9 was a precursor to this functionality.It's still available from <ICLASS="systemitem.ftp">ftp://ftp.isc.org/isc/bind/src/4.9.3/contrib/noforward.tar.gz</I>.</P></BLOCKQUOTE><PCLASS="para">By default, a <SPANCLASS="acronym">BIND</SPAN> name server configured touse forwarders consults them <EMCLASS="emphasis">before</EM> attemptingnormal resolution, or instead of normal iterative resolution. Also,when a <SPANCLASS="acronym">BIND</SPAN> name server is configured to useforwarders, it will consult those forwarders for queries about<EMCLASS="emphasis">any</EM> domain name. A view lets you specify whosequeries are forwarded and what those queries have to be about (whichdomain names) in order to be forwarded.</P><PCLASS="para">The syntax of the <ICLASS="function">view</I> statement might looksomething like this:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">view <CODECLASS="replaceable"><I>viewname</I></CODE> {                [ interface <CODECLASS="replaceable"><I>ip_list</I></CODE>; ]                [ domain <CODECLASS="replaceable"><I>domain_list</I></CODE>; ]                [ client <CODECLASS="replaceable"><I>ip_list</I></CODE>; ]                forward on <CODECLASS="replaceable"><I>reasons</I></CODE> [ to <CODECLASS="replaceable"><I>ip_list</I></CODE> ]; };</PRE></BLOCKQUOTE><PCLASS="para">Here's how the statement works: <ICLASS="function">domain</I>specifies the domains to which the viewapplies. <ICLASS="function">domain</I> takes a list of domain names asan argument. The <ICLASS="function">client</I> substatement determineswhich addresses this view applies to. <ICLASS="function">client</I>takes an address match list as an argument (as described in <ACLASS="xref"HREF="ch10_01.htm"TITLE="Advanced Features and Security">Chapter 10</A>). <ICLASS="function">interface</I> specifies theinterfaces on the local host to which the view applies.  If the serverreceives a query on one of the interfaces specified, from a clientwhose address matches an address in the <ICLASS="function">client</I>substatement, <EMCLASS="emphasis">and</EM> about a domain name specified in<ICLASS="function">domain</I>, the view applies.  The default for<ICLASS="function">interface</I> is the built-in address match list<ICLASS="filename">localhost</I>, the default for<ICLASS="function">client</I> is <ICLASS="parameter">any</I>, and thedefault for <ICLASS="function">domain</I> is &quot;.&quot;, the root, meaning thatby default, the view applies to queries from any <SPANCLASS="acronym">IP</SPAN>address looking up any name.</P><PCLASS="para"><ICLASS="function">forward</I> would replace and extend the<ICLASS="function">forwarders</I> substatement of the<ICLASS="function">options</I> statement.  It lists the<SPANCLASS="acronym">IP</SPAN> addresses of the forwarders to use for queriesthat match the specifications of this view. The forwarders are listedin the order in which you want them queried. What's new is the<ICLASS="function">reasons</I> clause. <ICLASS="function">reasons</I>might include <ICLASS="parameter">no-domain</I> and<ICLASS="parameter">no-answer</I>. These are the conditions under whichthe forwarders are used:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para"><ICLASS="parameter">no-domain</I> corresponds to an <SPANCLASS="acronym">NXDOMAIN</SPAN>(no such domain) response.</P></LI><LICLASS="listitem"><PCLASS="para"><ICLASS="parameter">no-answer</I> corresponds to a <SPANCLASS="acronym">NOERROR</SPAN>/no records response(that is, the domain name exists but the record type doesn't).</P></LI></UL><PCLASS="para">If we were to implement views in our internal root environmentat Movie U., here's how our internal name server's<ICLASS="function">view</I> statements might look:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">view {    client { 192.249.249/24; 192.253.253/24; 192.253.254/24 };    domain { &quot;!movie.edu&quot;; &quot;!249.249.192.in-addr.arpa&quot;;        &quot;!253.253.192.in-addr.arpa&quot;; &quot;!254.253.192.in-addr.arpa&quot;; };    forward on no-domain to { 192.249.249.3; 192.249.249.1; };};</PRE></BLOCKQUOTE><PCLASS="para">This tells our internal name servers (all except <ICLASS="systemitem.sitename">terminator</I> and <ICLASS="systemitem.sitename">wormhole</I>, which can resolve Internetdomain names directly) to forward queries <EMCLASS="emphasis">from</EM>our internal <SPANCLASS="acronym">IP</SPAN> addresses and<EMCLASS="emphasis">about</EM> domain names that are not (note thenegation operator) in <ICLASS="systemitem.sitename">movie.edu</I> or our <ICLASS="systemitem.sitename">in-addr.arpa</I> subdomains to <ICLASS="systemitem.sitename">terminator</I> and <ICLASS="systemitem.sitename">wormhole</I>, in that order.</P><PCLASS="para">Please note that we've described just one possibleimplementation of views. The actual implementation the ISC decidesupon may differ, both in features and in syntax.</P><ACLASS="indexterm"NAME="AUTOID-17185"></A></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="AUTOID-17186">15.4.6 A Shadow Namespace</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-17189"></A><ACLASS="indexterm"NAME="AUTOID-17191"></A>Many organizationswould like to advertise different zone data to the Internet thanthey do internally.  In most cases, much of the internal zone data isirrelevant to the Internet because of the organization's Internetfirewall.  The firewall may not allow direct access to most internalhosts, and may also translate internal, unregistered <SPANCLASS="acronym">IP</SPAN> addressesinto a range of <SPANCLASS="acronym">IP</SPAN> addresses registered to the organization.  Therefore,the organization may need to trim out irrelevant information from theexternal view of the zone, or change internal addresses to theirexternal equivalents.</P><PCLASS="para">Unfortunately, <SPANCLASS="acronym">BIND</SPAN> doesn't supportautomatic filtering and translation of zone data.  Consequently,many organizations manually create what have become known as &quot;splitnamespaces.&quot;  In a split namespace, the real namespace is availableonly internally, while a pared-down, translated version of it, called&quot;the shadow namespace,&quot; is visible to the Internet.</P><PCLASS="para">Theshadow namespace contains the name-to-address and address-to-namemappings of only those hosts that are accessible from the Internet, throughthe firewall.  The addresses advertised may be the translated equivalentsof real internal addresses.  The shadow namespace may also containone or more <SPANCLASS="acronym">MX</SPAN> records to direct email from the Internet throughthe firewall to a mail server.</P><PCLASS="para">Since Movie U. has anInternet firewall that greatly limits access from the Internet tothe internal network, we elected to create a shadow namespace.For <EMCLASS="emphasis">movie.edu</EM>, the only information we needto give out is about the zone (an <SPANCLASS="acronym">SOA</SPAN> and a few <SPANCLASS="acronym">NS</SPAN> records), thebastion host (<EMCLASS="emphasis">postmanrings2x</EM>), and the newexternal name server, <EMCLASS="emphasis">ns.movie.edu</EM>, which alsofunctions as an external web server, <EMCLASS="emphasis">www.movie.edu</EM>.The address of the external interface on the bastion host is 200.1.4.2,while the address of the name/web server is 200.1.4.3. The shadow <EMCLASS="emphasis">movie.edu</EM> zonedata file looks like this:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">@    <SPANCLASS="acronym">IN</SPAN>    <SPANCLASS="acronym">SOA</SPAN>    ns.movie.edu.    hostmaster.movie.edu. (                           1       ; Serial                           86400   ; Refresh                           3600    ; Retry                           608400  ; Expire                           86400 ) ; Default <SPANCLASS="acronym">TTL</SPAN>    <SPANCLASS="acronym">IN</SPAN>    <SPANCLASS="acronym">NS</SPAN>    ns.movie.edu.    <SPANCLASS="acronym">IN</SPAN>    <SPANCLASS="acronym">NS</SPAN>    ns.isp.net.        ; our <SPANCLASS="acronym">ISP</SPAN>'s name server    <SPANCLASS="acronym">IN</SPAN>    A     200.1.4.3    <SPANCLASS="acronym">IN</SPAN>    <SPANCLASS="acronym">MX</SPAN>    10 postmanrings2x.movie.edu.    <SPANCLASS="acronym">IN</SPAN>    <SPANCLASS="acronym">MX</SPAN>    100 mail.isp.net.www             <SPANCLASS="acronym">IN</SPAN>    <SPANCLASS="acronym">CNAME</SPAN> movie.edu.postmanrings2x  <SPANCLASS="acronym">IN</SPAN>    A     200.1.4.2                <SPANCLASS="acronym">IN</SPAN>    <SPANCLASS="acronym">MX</SPAN>    10 postmanrings2x.movie.edu.                <SPANCLASS="acronym">IN</SPAN>    <SPANCLASS="acronym">MX</SPAN>    100 mail.isp.net.;postmanrings2x handles mail addressed to nsns              <SPANCLASS="acronym">IN</SPAN>    A     200.1.4.3                <SPANCLASS="acronym">IN</SPAN>    <SPANCLASS="acronym">MX</SPAN>    10 postmanrings2x.movie.edu.                <SPANCLASS="acronym">IN</SPAN>    <SPANCLASS="acronym">MX</SPAN>    100 mail.isp.net.*               <SPANCLASS="acronym">IN</SPAN>    <SPANCLASS="acronym">MX</SPAN>    10 postmanrings2x.movie.edu.                <SPANCLASS="acronym">IN</SPAN>    <SPANCLASS="acronym">MX</SPAN>    100 mail.isp.net.</PRE></BLOCKQUOTE><PCLASS="para">Note that there's no mention of any of the subdomainsof <EMCLASS="emphasis">movie.edu</EM>, including any delegation to theservers for those subdomains. The information simply isn't necessary,since there's nothing in any of the subdomains that you can getto from the Internet, and inbound mail addressed to hosts in thesubdomains is caught by the wildcard.</P><PCLASS="para">The <EMCLASS="emphasis">db.200.1.4</EM> file,which we need to reverse map the two Movie U. <SPANCLASS="acronym">IP</SPAN> addresses thathosts on the Internet might see, looks like this:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">@    <SPANCLASS="acronym">IN</SPAN>    <SPANCLASS="acronym">SOA</SPAN>    ns.movie.edu.    hostmaster.movie.edu. (                           1       ; Serial                           86400   ; Refresh                           3600    ; Retry                           608400  ; Expire                           86400 ) ; Default <SPANCLASS="acronym">TTL</SPAN>    <SPANCLASS="acronym">IN</SPAN>    <SPANCLASS="acronym">NS</SPAN>    ns.movie.edu.    <SPANCLASS="acronym">IN</SPAN>    <SPANCLASS="acronym">NS</SPAN>    ns.isp.net.2    <SPANCLASS="acronym">IN</SPAN>    <SPANCLASS="acronym">PTR</SPAN>    postmanrings2x.movie.edu.3    <SPANCLASS="acronym">IN</SPAN>    <SPANCLASS="acronym">PTR</SPAN>    ns.movie.edu.</PRE></BLOCKQUOTE><PCLASS="para">One precaution that we need to take is to make surethat the resolver on our bastion host isn't configured to use theserver on <EMCLASS="emphasis">ns.movie.edu</EM>. Since that server can'tsee the real <EMCLASS="emphasis">movie.edu</EM>, using it would render <EMCLASS="emphasis">postmanrings2x</EM> unableto map internal names to addresses or addresses to names.<ACLASS="indexterm"NAME="AUTOID-17259"></A><ACLASS="indexterm"NAME="AUTOID-17261"></A></P><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="AUTOID-17264">15.4.6.1 The bastion host</A></H4><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-17267"></A><ACLASS="indexterm"NAME="AUTOID-17269"></A>The bastion host isa special case in a split namespace.  The bastion host has a footin each environment: one network interface connects it to the Internet, andanother connects it to the internal network.  Now that we have splitour name space in two, how can our bastion host see both theInternet name space and our real internal name space? If we configureit with the Internet root name servers in its hints file, it willfollow delegation from the Internet's <EMCLASS="emphasis">edu</EM> nameservers to an external <EMCLASS="emphasis">movie.edu</EM> name serverwith shadow zone data.  It would be blind to our internal name space,which it needs to see to log connections, deliver inbound mail,and more. On the other hand, if we configure it with our internalroots, then it won't see the Internet's name space, which it clearlyneeds to do in order to function as a bastion host. What to do?</P><PCLASS="para">If we have internal name servers that support conditionalforwarding, we can simply configure the bastion host's resolverto query those servers, since they can already see both the internaland Internet namespaces.  If we use forwarding internally, dependingon the type of firewall we're running, we may also need to run a nameserver on the bastion host itself.  If the firewall won't pass <SPANCLASS="acronym">DNS</SPAN>traffic, we'll need to run at least a caching-only name server,configured with the Internet roots, on the bastion host, so thatour internal name servers will have somewhere to forward their unresolvedqueries.</P><PCLASS="para">Without conditional forwarding, the simplestsolution is to run a name server on the bastion host (if you aren'talready doing so). The name server must be configured as a slavefor <EMCLASS="emphasis">movie.edu</EM> and any <EMCLASS="emphasis">in-addr.arpa</EM> subdomainsin which it needs to resolve addresses. This way, if it receivesa query for a name in <EMCLASS="emphasis">movie.edu</EM>, it'll useits local authoritative data to resolve the name. If the name isin a subdomain of <EMCLASS="emphasis">movie.edu</EM>, it'll follow <SPANCLASS="acronym">NS</SPAN>records in the zone data to query an internal name server for thename. Therefore, it doesn't need to be configured as a slave forany <EMCLASS="emphasis">movie.edu</EM> subdomains, such as <EMCLASS="emphasis">fx.movie.edu</EM>,just the &quot;top&quot; domain (see <ACLASS="xref"HREF="ch15_04.htm#DNS3-CHP-15-FIG-6"TITLE="A split DNS solution">Figure 15.6</A>).</P><H4CLASS="figure"><ACLASS="title"NAME="DNS3-CHP-15-FIG-6">Figure 15.6: A split DNS solution</A></H4><IMGCLASS="graphic"SRC="figs/dns3_1506.gif"ALT="Figure 15.6"><PCLASS="para">The <EMCLASS="emphasis">named.conf</EM> fileon our bastion host looks like this:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">options {                directory &quot;/var/named&quot;;};zone &quot;movie.edu&quot; {                type slave;                file &quot;db.movie&quot;;                masters { 192.249.249.3; };};zone &quot;249.249.192.in-addr.arpa&quot; {                type slave;                file &quot;db.192.249.249&quot;;                masters { 192.249.249.3; };};zone &quot;253.253.192.in-addr.arpa&quot; {                type slave;                file &quot;db.192.253.253.in-addr.arpa&quot;;                masters { 192.249.249.3; };};zone &quot;254.253.192.in-addr.arpa&quot; {                type slave;                file &quot;db.192.253.254&quot;;                masters { 192.253.254.2; };};zone &quot;20.254.192.in-addr.arpa&quot; {                type slave;                file &quot;db.192.254.20&quot;;                masters { 192.253.254.2; };};zone &quot;.&quot; {                type hint;                file &quot;db.cache&quot;;};&#13;</PRE></BLOCKQUOTE><PCLASS="para">An equivalent <ICLASS="filename">named.boot</I> file would look like this:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">directory    /var/namedsecondary    movie.edu    192.249.249.3    db.moviesecondary    249.249.192.in-addr.arpa    192.249.249.3    db.192.249.249secondary    253.253.192.in-addr.arpa    192.249.249.3    db.192.253.253secondary    254.253.192.in-addr.arpa    192.253.254.2    db.192.253.254secondary    20.254.192.in-addr.arpa     192.253.254.2    db.192.254.20cache    .    db.cache    ; lists Internet roots</PRE></BLOCKQUOTE></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="AUTOID-17294">15.4.6.2 Protecting zone data on the bastion host</A></H4><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-17297"></A>Unfortunately,loading these zones on the bastion host also exposes them to thepossibility of disclosure on the Internet, which we were tryingto avoid by splitting the name space. But as long as we're running<SPANCLASS="acronym">BIND</SPAN> 4.9 or better, we can protect the zone data using the<ACLASS="indexterm"NAME="AUTOID-17301"></A><EMCLASS="emphasis">secure_zone</EM> <SPANCLASS="acronym">TXT</SPAN>record or the <EMCLASS="emphasis">allow-query</EM> substatement. With<EMCLASS="emphasis">allow-query</EM>, we can place a global access liston our zone data.  Here's the new <EMCLASS="emphasis">options</EM> statementfrom our <EMCLASS="emphasis">named.conf</EM> file:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">options {                directory &quot;/var/named&quot;;                allow-query { 127/8; 192.249.249/24; 192.253.253/24;                                192.253.254/24; 192.254.20/24; };};</PRE></BLOCKQUOTE><PCLASS="para">With <SPANCLASS="acronym">BIND</SPAN> 4.9's <EMCLASS="emphasis">secure_zone</EM>,we can turn off all external access to our zone data by includingthese <SPANCLASS="acronym">TXT</SPAN> records in each db file:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">secure_zone     <SPANCLASS="acronym">IN</SPAN>    <SPANCLASS="acronym">TXT</SPAN>    &quot;192.249.249.0:255.255.255.0&quot;                <SPANCLASS="acronym">IN</SPAN>    <SPANCLASS="acronym">TXT</SPAN>    &quot;192.253.253.0:255.255.255.0&quot;                <SPANCLASS="acronym">IN</SPAN>    <SPANCLASS="acronym">TXT</SPAN>    &quot;192.253.254.0:255.255.255.0&quot;                <SPANCLASS="acronym">IN</SPAN>    <SPANCLASS="acronym">TXT</SPAN>    &quot;192.254.20.0:255.255.255.0&quot;                <SPANCLASS="acronym">IN</SPAN>    <SPANCLASS="acronym">TXT</SPAN>    &quot;127.0.0.1:H&quot;</PRE></BLOCKQUOTE><PCLASS="para">Don't forget to include the loopback address in thelist, or the bastion host's own resolver may not get answers fromthe name server! </P></DIV></DIV><ACLASS="indexterm"NAME="AUTOID-17326"></A><ACLASS="indexterm"NAME="AUTOID-17327"></A><ACLASS="indexterm"NAME="AUTOID-17328"></A><ACLASS="indexterm"NAME="AUTOID-17329"></A><ACLASS="indexterm"NAME="AUTOID-17330"></A><ACLASS="indexterm"NAME="AUTOID-17331"></A></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch15_03.htm"TITLE="15.3 A Limitation of MX Records"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 15.3 A Limitation of MX Records"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="DNS &amp; BIND"><IMGSRC="../gifs/txthome.gif"ALT="DNS &amp; BIND"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch15_05.htm"TITLE="15.5 Dialup Connections"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 15.5 Dialup Connections"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">15.3 A Limitation of MX Records</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">15.5 Dialup Connections</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><PCLASS="nav"><FONTSIZE="-1">[ <AHREF="../index.htm"TITLE="The Networking CD Bookshelf">Library Home</A> | <AHREF="index.htm"TITLE="DNS &amp; BIND">DNS &amp; BIND</A> | <AHREF="../tcpip/index.htm"TITLE="TCP/IP Network Administration">TCP/IP</A> | <AHREF="../sendmail/index.htm"TITLE="sendmail">sendmail</A> | <AHREF="../smdref/index.htm"TITLE="sendmail Desktop Reference">sendmail Reference</A> | <AHREF="../firewall/index.htm"TITLE="Building Internet Firewalls">Firewalls</A> | <AHREF="../puis/index.htm"TITLE="Practical UNIX &amp; Internet Security">Practical Security</A> ]</FONT></P></DIV></BODY></HTML>