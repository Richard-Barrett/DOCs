<HTML><HEAD><TITLE>[Appendix C] C.6 Transport Layer</TITLE><METANAME="DC.title"CONTENT="Building Internet Firewalls"><METANAME="DC.creator"CONTENT="D. Brent Chapman &amp; Elizabeth D. Zwicky"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1999-02-04T00:30:52Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-124-0"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="appc_01.htm"TITLE="C. TCP/IP Fundamentals"><LINKREL="prev"HREF="appc_05.htm"TITLE="C.5 Internet Layer"><LINKREL="next"HREF="appc_07.htm"TITLE="C.7 Application Layer"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="Building Internet Firewalls"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,65"HREF="index.htm"ALT="Building Internet Firewalls"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/fsrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="appc_05.htm"TITLE="C.5 Internet Layer"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: C.5 Internet Layer"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Appendix C<BR><SPANCLASS="acronym">TCP/IP</SPAN> Fundamentals</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="appc_07.htm"TITLE="C.7 Application Layer"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: C.7 Application Layer"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="FIRE-C-S1-6">C.6 Transport Layer</A></H2><PCLASS="para">The protocol layer just above the Internet Layer is the Host-to-HostTransport Layer. This name is usually shortened to TransportLayer. The two most important protocols in the Transport Layer areTransmission Control Protocol (<SPANCLASS="acronym">TCP</SPAN>) and UserDatagram Protocol (<SPANCLASS="acronym">UDP</SPAN>). <SPANCLASS="acronym">TCP</SPAN>provides reliable data delivery service with end-to-end errordetection and correction. <SPANCLASS="acronym">UDP</SPAN> provideslow-overhead, connectionless datagram delivery service. Both protocolsdeliver data between the Application Layer and the Internet Layer.Applications programmers can choose whichever service is moreappropriate for their specific applications.</P><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="FIRE-C-S2-6">C.6.1 User Datagram Protocol</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-23821"></A>The User Datagram Protocol gives application programs direct access toa datagram delivery service, like the delivery service that IPprovides. This allows applications to exchange messages over thenetwork with a minimum of protocol overhead.</P><PCLASS="para"><SPANCLASS="acronym">UDP</SPAN> is an unreliable, connectionless datagramprotocol. (As noted before, &quot;unreliable&quot; merely means that there areno techniques in the protocol for verifying that the data reached theother end of the network correctly.) Within your computer,<SPANCLASS="acronym">UDP</SPAN> will deliver datacorrectly. <SPANCLASS="acronym">UDP</SPAN> uses 16-bit <EMCLASS="emphasis">SourcePort</EM> and <EMCLASS="emphasis">Destination Port </EM>numbers inword 1 of the message header, to deliver data to the correctapplications process. <ACLASS="xref"HREF="appc_06.htm#FIRE-C-FIG-7"TITLE="UDP message format">Figure 13.11</A> shows the<SPANCLASS="acronym">UDP</SPAN> message format.</P><H4CLASS="figure"><ACLASS="title"NAME="FIRE-C-FIG-7">Figure 13.11: <SPANCLASS="acronym">UDP</SPAN> message format</A></H4><IMGCLASS="graphic"SRC="figs/firec07.gif"ALT="Figure 13.11"><PCLASS="para">Why do applications programmers choose <SPANCLASS="acronym">UDP</SPAN> as adata transport service? There are a number of good reasons. If theamount of data being transmitted is small, the overhead of creatingconnections and ensuring reliable delivery may be greater than thework of retransmitting the entire data set. In this case,<SPANCLASS="acronym">UDP</SPAN> is the most efficient choice for a TransportLayer protocol. Applications that fit a &quot;query-response&quot; model arealso excellent candidates for using <SPANCLASS="acronym">UDP</SPAN>. Theresponse can be used as a positive acknowledgment to the query. If aresponse isn't received within a certain time period, the applicationjust sends another query. Still other applications provide their owntechniques for reliable data delivery, and don't require that servicefrom the transport layer protocol. Imposing another layer ofacknowledgment on any of these types of applications is inefficient.</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="FIRE-C-S2-7">C.6.2 Transmission Control Protocol</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="CTCP"></A>Applications that require the transport protocol to provide reliabledata delivery use <SPANCLASS="acronym">TCP</SPAN> because it verifies that datais delivered across the network accurately and in the propersequence. <SPANCLASS="acronym">TCP</SPAN> is a <EMCLASS="emphasis">reliable</EM>,<EMCLASS="emphasis">connection-oriented</EM>,<EMCLASS="emphasis">byte-stream</EM> protocol. Let's look at each of theterms&nbsp;- reliable, connection-oriented, and byte-stream&nbsp;- in more detail.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-23850"></A><SPANCLASS="acronym">TCP</SPAN> provides reliability with a mechanism called<EMCLASS="emphasis">Positive Acknowledgment with Re-transmission(<SPANCLASS="acronym">PAR</SPAN>)</EM>. Simply stated, a system using<SPANCLASS="acronym">PAR</SPAN> sends the data again, unless it hears from theremote system that the data arrived okay. The unit of data exchangedbetween cooperating <SPANCLASS="acronym">TCP</SPAN> modules is called a segment(see <ACLASS="xref"HREF="appc_06.htm#FIRE-C-FIG-8"TITLE="TCP segment format">Figure 13.12</A>). Each segment contains a checksumthat the recipient uses to verify that the data is undamaged. If thedata segment is received undamaged, the receiver sends a<EMCLASS="emphasis">positive acknowledgment </EM>back to the sender. Ifthe data segment is damaged, the receiver discards it. After anappropriate time-out period, the sending <SPANCLASS="acronym">TCP</SPAN> moduleretransmits any segment for which no positive acknowledgment has beenreceived.</P><H4CLASS="figure"><ACLASS="title"NAME="FIRE-C-FIG-8">Figure 13.12: <SPANCLASS="acronym">TCP</SPAN> segment format</A></H4><IMGCLASS="graphic"SRC="figs/firec08.gif"ALT="Figure 13.12"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-23865"></A><SPANCLASS="acronym">TCP</SPAN> is connection-oriented. It establishes alogical end-to-end connection between the two communicatinghosts. Control information, called a<EMCLASS="emphasis"> handshake</EM>,is exchanged between the two endpoints to establish a dialogue beforedata is transmitted. <SPANCLASS="acronym">TCP</SPAN> indicates the controlfunction of a segment by setting the appropriate bit in the Flagsfield in word 4 of the <EMCLASS="emphasis">segment header</EM>.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-23872"></A>The type of handshake used by <SPANCLASS="acronym">TCP</SPAN> is called a<EMCLASS="emphasis">three-way handshake</EM> because three segments areexchanged. <ACLASS="xref"HREF="appc_06.htm#FIRE-C-FIG-9"TITLE="Three-way handshake">Figure 13.13</A> shows the simplest form ofthe three-way handshake. Host A begins the connection by sending host<ACLASS="indexterm"NAME="AUTOID-23877"></A><ACLASS="indexterm"NAME="AUTOID-23879"></A>B a segment with the &quot;Synchronize sequence numbers&quot;(<SPANCLASS="acronym">SYN</SPAN>) bit set. This segment tells host B what sequencenumber host A will use as a starting number for itssegments. (Sequence numbers are used to keep data in the properorder.) Host B responds to A with a segment that has the&quot;Acknowledgment&quot; (<SPANCLASS="acronym">ACK</SPAN>) and <SPANCLASS="acronym">SYN</SPAN>bits set. B's segment acknowledges the receipt of A's segment, andinforms A which Sequence Number host B will start with. Finally, hostA sends a segment that acknowledges receipt of B's segment, andtransfers the first actual data.</P><PCLASS="para">In this figure, note that the first packet in each direction has the<SPANCLASS="acronym">SYN</SPAN> bit set, and all subsequent packets have the<SPANCLASS="acronym">ACK</SPAN> bit set.</P><H4CLASS="figure"><ACLASS="title"NAME="FIRE-C-FIG-9">Figure 13.13: Three-way handshake</A></H4><IMGCLASS="graphic"SRC="figs/firec09.gif"ALT="Figure 13.13"><PCLASS="para">After this exchange, host A's <SPANCLASS="acronym">TCP</SPAN> has positiveevidence that the remote <SPANCLASS="acronym">TCP</SPAN> is alive and ready toreceive data. As soon as the connection is established, data can betransferred. When the cooperating modules have concluded the datatransfers, they will exchange a three-way handshake with segmentscontaining the &quot;No more data from sender&quot; bit (called the<EMCLASS="emphasis">FIN bit</EM>) to close the connection. It is theend-to-end exchange of data that provides the logical connectionbetween the two systems.</P><PCLASS="para">TCP views the data it sends as a continuous stream of bytes, not asindependent packets. Therefore, <SPANCLASS="acronym">TCP</SPAN> takes care tomaintain the sequence in which bytes are sent and received. The&quot;Sequence Number&quot; and &quot;Acknowledgment Number&quot; fields in the<SPANCLASS="acronym">TCP</SPAN> segment header keep track of the bytes.</P><PCLASS="para">The <SPANCLASS="acronym">TCP</SPAN> standard does not require that each systemstart numbering bytes with any specific number; each system choosesthe number it will use as a starting point. To keep track of the datastream correctly, each end of the connection must know the other end'sinitial number. The two ends of the connection synchronizebyte-numbering systems by exchanging <SPANCLASS="acronym">SYN</SPAN> segmentsduring the handshake. The &quot;Sequence Number&quot; field in the<SPANCLASS="acronym">SYN</SPAN> segment contains the Initial Sequence Number(<SPANCLASS="acronym">ISN</SPAN>), which is the starting point for thebyte-numbering system. The <SPANCLASS="acronym">ISN</SPAN> is chosen atrandom.</P><PCLASS="para">Each byte of data is numbered sequentially from the<SPANCLASS="acronym">ISN</SPAN>, so the first real byte of data sent has asequence number of <SPANCLASS="acronym">ISN</SPAN>+1. The Sequence Number inthe header of a data segment identifies the sequential position in thedata stream of the first data byte in the segment. For example, if thefirst byte in the data stream was sequence number 1(<SPANCLASS="acronym">ISN</SPAN>=0) and 4,000 bytes of data have already beentransferred, then the first byte of data in the current segment isbyte 4001, and the Sequence Number would be 4001.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-23908"></A><ACLASS="indexterm"NAME="AUTOID-23910"></A>The Acknowledgment Segment (ACK) performs twofunctions: <EMCLASS="emphasis">positive acknowledgment</EM> and <EMCLASS="emphasis">flowcontrol</EM>. The acknowledgment tells the sender how much datahas been received, and how much more the receiver can accept. TheAcknowledgment Number is the sequence number of the last byte receivedat the remote end. The standard does not require an individualacknowledgment for every packet. The acknowledgment number is apositive acknowledgment of all bytes up through that number. Forexample, if the first byte sent was numbered 1 and 2,000 bytes havebeen successfully received, the Acknowledgment Number would be 2000.</P><PCLASS="para">The Window field contains the number of bytes the remote end is ableto accept. If the receiver is capable of accepting 6,000 more bytes,the Window would be 6000. The window indicates to the sender that itcan continue sending segments as long as the total number of bytesthat it sends is smaller than the window of bytes that the receivercan accept. The receiver controls the flow of bytes from the senderby changing the size of the window. A zero window tells the sender tocease transmission until it receives a non-zero window value.</P><PCLASS="para"><ACLASS="xref"HREF="appc_06.htm#FIRE-C-FIG-10"TITLE="TCP data stream">Figure 13.14</A> shows a <SPANCLASS="acronym">TCP</SPAN> datastream that starts with an Initial Sequence Number of 0. Thereceiving system has received and acknowledged 2,000 bytes, so thecurrent Acknowledgment Number is 2000. The receiver also has enoughbuffer space for another 6,000 bytes, so it has advertised a Window of6000. The sender is currently sending a segment of 1,000 bytesstarting with Sequence Number 4001. The sender has received noacknowledgment for the bytes from 2001 on, but continues sending dataas long as it is within the window. If the sender fills the window andreceives no acknowledgment of the data previously sent, it will, afteran appropriate time-out, send the data again starting from the firstunacknowledged byte. In <ACLASS="xref"HREF="appc_06.htm#FIRE-C-FIG-10"TITLE="TCP data stream">Figure 13.14</A>,retransmission would start from byte 2001 if no furtheracknowledgments are received. This procedure ensures that data isreliably received at the far end of the network.</P><PCLASS="para"><SPANCLASS="acronym">TCP</SPAN> is also responsible for delivering datareceived from <SPANCLASS="acronym">IP</SPAN> to the correct application. Theapplication that the data is bound for is identified by a 16-bitnumber called the <EMCLASS="emphasis">port number.</EM> The<EMCLASS="emphasis">Source Port</EM> and <EMCLASS="emphasis">Destination Port </EM> are contained in the first word of the segmentheader. Correctly passing data to and from the Application Layer is animportant part of what the Transport Layer services do.</P><H4CLASS="figure"><ACLASS="title"NAME="FIRE-C-FIG-10">Figure 13.14: <SPANCLASS="acronym">TCP</SPAN> data stream</A></H4><IMGCLASS="graphic"SRC="figs/firec10.gif"ALT="Figure 13.14"><ACLASS="indexterm"NAME="AUTOID-23929"></A></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="appc_05.htm"TITLE="C.5 Internet Layer"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: C.5 Internet Layer"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="Building Internet Firewalls"><IMGSRC="../gifs/txthome.gif"ALT="Building Internet Firewalls"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="appc_07.htm"TITLE="C.7 Application Layer"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: C.7 Application Layer"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">C.5 Internet Layer</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_a.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">C.7 Application Layer</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><PCLASS="nav"><FONTSIZE="-1">[ <AHREF="../index.htm"TITLE="The Networking CD Bookshelf">Library Home</A> | <AHREF="../dnsbind/index.htm"TITLE="DNS &amp; BIND">DNS &amp; BIND</A> | <AHREF="../tcpip/index.htm"TITLE="TCP/IP Network Administration">TCP/IP</A> | <AHREF="../sendmail/index.htm"TITLE="sendmail">sendmail</A> | <AHREF="../smdref/index.htm"TITLE="sendmail Desktop Reference">sendmail Reference</A> | <AHREF="index.htm"TITLE="Building Internet Firewalls">Firewalls</A> | <AHREF="../puis/index.htm"TITLE="Practical UNIX &amp; Internet Security">Practical Security</A> ]</FONT></P></DIV></BODY></HTML>