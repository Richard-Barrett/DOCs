<HTML><HEAD><TITLE>[Appendix C] C.12 Protocols, Ports, and Sockets</TITLE><METANAME="DC.title"CONTENT="Building Internet Firewalls"><METANAME="DC.creator"CONTENT="D. Brent Chapman &amp; Elizabeth D. Zwicky"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1999-02-04T00:31:01Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-124-0"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="appc_01.htm"TITLE="C. TCP/IP Fundamentals"><LINKREL="prev"HREF="appc_11.htm"TITLE="C.11 The Routing Table"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="Building Internet Firewalls"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,65"HREF="index.htm"ALT="Building Internet Firewalls"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/fsrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="appc_11.htm"TITLE="C.11 The Routing Table"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: C.11 The Routing Table"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Appendix C<BR><SPANCLASS="acronym">TCP/IP</SPAN> Fundamentals</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">&nbsp;</TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="FIRE-C-S1-12">C.12 Protocols, Ports, and Sockets</A></H2><PCLASS="para">Once data is routed through the network and delivered to a specifichost, it must be delivered to the correct user or process. As the datamoves up or down the layers of <SPANCLASS="acronym">TCP/IP</SPAN>, a mechanismis needed to deliver data to the correct protocols in each layer. Thesystem must be able to combine data from many applications into a fewtransport protocols, and from the transport protocols into<SPANCLASS="acronym">IP</SPAN>. Combining many sources of data into a singledata stream is called <EMCLASS="emphasis">multiplexing</EM>. Data arrivingfrom the network must be <EMCLASS="emphasis">demultiplexed</EM>&nbsp;- dividedfor delivery to multiple processes. To accomplish this,<SPANCLASS="acronym">IP</SPAN> uses <EMCLASS="emphasis">protocol numbers</EM> toidentify transport protocols, and the transport protocols use<EMCLASS="emphasis">port numbers</EM> to identify applications.</P><PCLASS="para">Some protocol and port numbers are reserved to identify<EMCLASS="emphasis">well-known services.</EM> Well-known services arestandard network protocols, such as <SPANCLASS="acronym">FTP</SPAN> and Telnetthat are commonly used throughout the network. The protocol numbersand port numbers allocated to well-known services are documented inthe <EMCLASS="emphasis">Assigned Numbers</EM><SPANCLASS="acronym">RFC</SPAN>. <SPANCLASS="acronym">UNIX</SPAN> systems defineprotocol and port numbers in two simple text files,<EMCLASS="emphasis">/etc/protocols </EM>and<EMCLASS="emphasis">/etc/services</EM>.</P><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="FIRE-C-S2-10">C.12.1 Protocol Numbers</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-24490"></A><ACLASS="indexterm"NAME="AUTOID-24493"></A>The protocol number is a single byte in the third word of the datagramheader. The value identifies the protocol in the layer above<SPANCLASS="acronym">IP</SPAN> to which the data should be passed.</P><PCLASS="para">On a <SPANCLASS="acronym">UNIX</SPAN> system, the protocol numbers are definedin the <EMCLASS="emphasis">/etc/protocols </EM>file. This file is a simpletable containing the protocol name and the protocol number associatedwith that name. The format of the table is a single entry per line,consisting of the official protocol name, separated by white spacefrom the protocol number. The protocol number is separated by whitespace from the &quot;alias&quot; for the protocol name. Comments in the tablebegin with #. An<EMCLASS="emphasis">/etc/protocol</EM> file is shownbelow.</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% cat /etc/protocols## @(#)protocols 1.8 88/02/07 SMI## Internet (IP) protocols #ip     0      IP     # internet protocol, pseudo protocol numbericmp   1      ICMP   # internet control message protocoligmp   2      IGMP   # internet group multicast protocolggp    3      GGP    # gateway-gateway protocoltcp    6      TCP    # transmission control protocolpup    12     PUP    # PARC universal packet protocoludp    17     UDP    # user datagram protocol</PRE></BLOCKQUOTE><PCLASS="para">The listing shown above is the contents of the<EMCLASS="emphasis">/etc/protocols</EM> file from an actual workstation.This list of numbers is by no means complete. If you refer to theProtocol Numbers section of the<EMCLASS="emphasis"> Assigned Numbers</EM><SPANCLASS="acronym">RFC</SPAN> (which itself gets a new <SPANCLASS="acronym">RFC</SPAN>number every time it is updated; that's why we don't give you the<SPANCLASS="acronym">RFC</SPAN> number for it here), you'll see many moreprotocol numbers. However, a system only needs to include the numbersof the protocols it actually uses. Even the list shown above ismore than this specific workstation needed, but the additional entriesdo no harm.</P><PCLASS="para">What exactly does this table mean? When a datagram arrives and itsdestination address matches the local <SPANCLASS="acronym">IP</SPAN> address,the <SPANCLASS="acronym">IP</SPAN> layer knows the datagram has to bedelivered to one of the transport protocols above it. To decide whichprotocol should receive the datagram, <SPANCLASS="acronym">IP</SPAN> looks atthe datagram's protocol number. Using this table you can see that, ifthe datagram's protocol number is 6, <SPANCLASS="acronym">IP</SPAN> deliversthe datagram to <SPANCLASS="acronym">TCP</SPAN>. If the protocol number is 17,<SPANCLASS="acronym">IP</SPAN> delivers the datagram to <SPANCLASS="acronym">UDP</SPAN>.<SPANCLASS="acronym">TCP</SPAN> and <SPANCLASS="acronym">UDP</SPAN> are the twotransport layer services we are concerned with, but all of theprotocols listed in the table use <SPANCLASS="acronym">IP</SPAN> datagramdelivery service directly. Some, such as <SPANCLASS="acronym">ICMP</SPAN> and<SPANCLASS="acronym">GGP</SPAN>, have already been mentioned. You don't need tobe concerned with these minor protocols, but <SPANCLASS="acronym">IGMP</SPAN>is an extension to <SPANCLASS="acronym">IP</SPAN> for multicasting explained in<SPANCLASS="acronym">RFC</SPAN> 988, and <SPANCLASS="acronym">PUP</SPAN> is a packetprotocol similar to <SPANCLASS="acronym">UDP</SPAN>.</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="FIRE-C-S2-11">C.12.2 Port Numbers</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-24528"></A><ACLASS="indexterm"NAME="AUTOID-24530"></A>After <SPANCLASS="acronym">IP</SPAN> passes incoming data to the transportprotocol (<SPANCLASS="acronym">TCP</SPAN> or <SPANCLASS="acronym">UDP</SPAN>), thetransport protocol passes the data to the correct application process.Application processes (also called network services are identified byport numbers, which are 16-bit values. The <EMCLASS="emphasis">source portnumber</EM>, which identifies the process that sent the data,and the <EMCLASS="emphasis">destination port number</EM>, which identifiesthe process that is to receive the data, are contained in the firstheader word of each <SPANCLASS="acronym">TCP</SPAN> segment and<SPANCLASS="acronym">UDP</SPAN> packet.</P><PCLASS="para">On <SPANCLASS="acronym">UNIX</SPAN> systems, port numbers are defined in the<EMCLASS="emphasis">/etc/services </EM>file. There are many more networkapplications than there are transport layer protocols, as the size ofthe table shows. Port numbers below 256 are reserved for well-knownservices (like <SPANCLASS="acronym">FTP</SPAN> and Telnet) and are defined inthe <EMCLASS="emphasis">Assigned Numbers </EM> <SPANCLASS="acronym">RFC</SPAN>.Ports numbered from 256 to 1024 are used for<SPANCLASS="acronym">UNIX</SPAN>-specific services, which are services like<EMCLASS="emphasis">rlogin</EM>, that were originally developed for<SPANCLASS="acronym">UNIX</SPAN> systems. However, most of them are no longer<SPANCLASS="acronym">UNIX</SPAN>-specific.</P><PCLASS="para">Port numbers are not unique between transport layer protocols; thenumbers are only unique within a specific transport protocol. In otherwords, <SPANCLASS="acronym">TCP</SPAN> and <SPANCLASS="acronym">UDP</SPAN> can, and do,both assign the same port numbers. It is the combination of protocoland port numbers that uniquely identifies the specific process thedata should be delivered to.</P><PCLASS="para">A partial <EMCLASS="emphasis">/etc/services</EM> file is shown below. Theformat of this file is very similar to the<EMCLASS="emphasis">/etc/protocols</EM> file. Each single-line entrystarts with the official name of the service, separated by white spacefrom the port number/protocol pairing associated with thatservice. The port numbers are paired with transport protocol names,because different transport protocols may use the same port number. Anoptional list of aliases for the official service name may be providedafter the port number/protocol pair.</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">peanut% cat /etc/services## @(#)services 1.12 88/02/07 SMI## Network services, Internet style#echo            7/udpecho            7/tcpftp-data        20/tcpftp             21/tcptelnet          23/tcpsmtp            25/tcp          mailtime            37/tcp          timservertime            37/udp          timserverdomain          53/udpdomain          53/tcp## Host specific functions#finger          79/tcpnntp            119/tcp         usenet    # Network News Transferntp             123/tcp                   # Network Time Protocol## UNIX specific services#exec            512/tcplogin           513/tcpshell           514/tcp         cmd       # no passwords usedbiff            512/udp         comsatwho             513/udp         whodsyslog          514/udptalk            517/udproute           520/udp         router routed</PRE></BLOCKQUOTE><PCLASS="para">This table, combined with the<EMCLASS="emphasis">/etc/protocols</EM>table, provides all of the information necessary to deliver data tothe correct application. A datagram arrives at its destination basedon the destination address in the fifth word of the datagramheader. <SPANCLASS="acronym">IP</SPAN> uses the protocol number in the thirdword of the datagram header, to deliver the data from the datagram, tothe proper transport layer protocol. The first word of the datadelivered to the transport protocol contains the destination portnumber that tells the transport protocol to pass the data up to aspecific application. <ACLASS="xref"HREF="appc_12.htm#FIRE-C-FIG-17"TITLE="Protocol and port numbers">Figure 13.21</A> shows thisdelivery process.</P><H4CLASS="figure"><ACLASS="title"NAME="FIRE-C-FIG-17">Figure 13.21: Protocol and port numbers</A></H4><IMGCLASS="graphic"SRC="figs/firec17.gif"ALT="Figure 13.21"></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="FIRE-C-S2-12">C.12.3 Sockets</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="CSOCK"></A><ACLASS="indexterm"NAME="CPORTSWK"></A><ACLASS="indexterm"NAME="CWKP"></A><EMCLASS="emphasis">Well-known ports</EM> are standardized port numbersthat enable remote computers to know which port to connect to for aparticular network service. This simplifies the connection processbecause both the sender and receiver know in advance that data boundfor a specific process will use a specific port. For example, allsystems that offer Telnet, offer it on port 23.</P><PCLASS="para">There is a second type of port number called a <EMCLASS="emphasis">dynamicallyallocated port</EM>. As the name implies, dynamically allocatedports are not preassigned. They are assigned to processes whenneeded. The system ensures that it does not assign the same portnumber to two processes, and that the numbers assigned are above therange of standard port numbers.</P><PCLASS="para">Dynamically assigned ports provide the flexibility needed to supportmultiple users. If a Telnet user is assigned port number 23 for boththe source and destination ports, what port numbers are assigned tothe second concurrent Telnet user? To uniquely identify everyconnection, the source port is assigned a dynamically allocated portnumber, and the well-known port number is used for the destinationport.</P><PCLASS="para">In the Telnet example, the first user is given a random source portnumber and a destination port number of 23 (Telnet). The second useris given a different random source port number and the samedestination port. It is the pair of port numbers, source anddestination, that uniquely identifies each network connection. Thedestination host knows the source port, because it is provided in boththe <SPANCLASS="acronym">TCP</SPAN> segment header and the<SPANCLASS="acronym">UDP</SPAN> packet header. Both hosts know the destinationport because it is a well-known port.</P><PCLASS="para"><ACLASS="xref"HREF="appc_12.htm#FIRE-C-FIG-18"TITLE="Passing port numbers">Figure 13.22</A> shows the exchange of port numbersduring the <SPANCLASS="acronym">TCP</SPAN> handshake. The source host randomlygenerates a source port, in this example 3044. It sends out a segmentwith a source port of 3044 and a destination port of 23. Thedestination host receives the segment, and responds back using 23 asits source port and 3044 as its destination port.</P><H4CLASS="figure"><ACLASS="title"NAME="FIRE-C-FIG-18">Figure 13.22: Passing port numbers</A></H4><IMGCLASS="graphic"SRC="figs/firec18.gif"ALT="Figure 13.22"><PCLASS="para">The combination of an <SPANCLASS="acronym">IP</SPAN> address and a port numberis called a <EMCLASS="emphasis">socket.</EM> A socket uniquely identifiesa single network process within the entire Internet. Sometimes theterms &quot;socket&quot; and &quot;port number&quot; are used interchangeably. In fact,well-known services are frequently referred to as &quot;well-knownsockets.&quot; In the context of this discussion, a &quot;socket&quot; is thecombination of an <SPANCLASS="acronym">IP</SPAN> address and a port number. Apair of sockets, one socket for the receiving host and one for thesending host, define the connection for connection-oriented protocolssuch as <SPANCLASS="acronym">TCP</SPAN>.</P><PCLASS="para">Let's build on the example of dynamically assigned ports andwell-known ports. Assume a user on host 128.66.12.2 uses Telnet toconnect to host 192.178.16.2. Host 128.66.12.2 is the source host. Theuser is dynamically assigned a unique port number&nbsp;- 3382. Theconnection is made to the Telnet service on the remote host which is,according to the standard, assigned well-known port 23. The socket forthe source side of the connection is 128.66.12.2.3382(<SPANCLASS="acronym">IP</SPAN> address 128.66.12.2 plus port number 3382). Forthe destination side of the connection, the socket is 192.178.16.2.23(address 192.178.16.2 plus port 23). The port of the destinationsocket is known by both systems because it is a well-known port. Theport of the source socket is known, because the source host informedthe destination host of the source socket when the connection requestwas made. The socket pair is therefore known by both the source anddestination computers. The combination of the two sockets uniquelyidentifies this connection; no other connection in the Internet hasthis socket pair.</P><PCLASS="para"><ACLASS="xref"HREF="appc_12.htm#FIRE-C-FIG-19"TITLE="Clients on multiple hosts connecting to the same port on a server">Figure 13.23</A> shows how clients on multiple machines can all connect to the same port on asingle server. The server can tell the difference between theconnections because they each involve different remote IP addresses.Even if the connections are all coming from a single remote machine,as shown in <ACLASS="xref"HREF="appc_12.htm#FIRE-C-FIG-20"TITLE="Multiple clients on a single host connecting to the same port on a server">Figure 13.24</A>, the server can still tellthem apart because each connection uses a different port number on theremote machine. </P><H4CLASS="figure"><ACLASS="title"NAME="FIRE-C-FIG-19">Figure 13.23: Clients on multiple hosts connecting to the same port on aserver</A></H4><IMGCLASS="graphic"SRC="figs/firec19.gif"ALT="Figure 13.23"><H4CLASS="figure"><ACLASS="title"NAME="FIRE-C-FIG-20">Figure 13.24: Multiple clients on a single host connecting to the same porton a server</A></H4><IMGCLASS="graphic"SRC="figs/firec20.gif"ALT="Figure 13.24"></DIV><ACLASS="indexterm"NAME="AUTOID-24601"></A><ACLASS="indexterm"NAME="AUTOID-24602"></A><ACLASS="indexterm"NAME="AUTOID-24603"></A><ACLASS="indexterm"NAME="AUTOID-24604"></A></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="appc_11.htm"TITLE="C.11 The Routing Table"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: C.11 The Routing Table"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="Building Internet Firewalls"><IMGSRC="../gifs/txthome.gif"ALT="Building Internet Firewalls"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">&nbsp;</TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">C.11 The Routing Table</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_a.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">&nbsp;</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><PCLASS="nav"><FONTSIZE="-1">[ <AHREF="../index.htm"TITLE="The Networking CD Bookshelf">Library Home</A> | <AHREF="../dnsbind/index.htm"TITLE="DNS &amp; BIND">DNS &amp; BIND</A> | <AHREF="../tcpip/index.htm"TITLE="TCP/IP Network Administration">TCP/IP</A> | <AHREF="../sendmail/index.htm"TITLE="sendmail">sendmail</A> | <AHREF="../smdref/index.htm"TITLE="sendmail Desktop Reference">sendmail Reference</A> | <AHREF="index.htm"TITLE="Building Internet Firewalls">Firewalls</A> | <AHREF="../puis/index.htm"TITLE="Practical UNIX &amp; Internet Security">Practical Security</A> ]</FONT></P></DIV></BODY></HTML>