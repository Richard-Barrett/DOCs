<HTML><HEAD><TITLE>[Chapter 5] 5.8 Building a Bastion Host</TITLE><METANAME="DC.title"CONTENT="Building Internet Firewalls"><METANAME="DC.creator"CONTENT="D. Brent Chapman &amp; Elizabeth D. Zwicky"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1999-02-04T00:14:32Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-124-0"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch05_01.htm"TITLE="5. Bastion Hosts"><LINKREL="prev"HREF="ch05_07.htm"TITLE="5.7 Don't Allow User Accounts on the Bastion Host"><LINKREL="next"HREF="ch05_09.htm"TITLE="5.9 Operating the Bastion Host "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="Building Internet Firewalls"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,65"HREF="index.htm"ALT="Building Internet Firewalls"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/fsrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch05_07.htm"TITLE="5.7 Don't Allow User Accounts on the Bastion Host"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 5.7 Don't Allow User Accounts on the Bastion Host"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 5<BR>Bastion Hosts</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch05_09.htm"TITLE="5.9 Operating the Bastion Host "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 5.9 Operating the Bastion Host "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="AUTOID-2865">5.8 Building a Bastion Host</A></H2><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-2868"></A><ACLASS="indexterm"NAME="AUTOID-2870"></A>Now that you've figured out what you want your bastion host to do,you need to actually build the bastion host. In order to do that,follow these steps:</P><OLCLASS="orderedlist"><LICLASS="listitem"><PCLASS="para">Secure the machine.</P></LI><LICLASS="listitem"><PCLASS="para">Disable all nonrequired services.</P></LI><LICLASS="listitem"><PCLASS="para">Install or modify the services you want to provide.</P></LI><LICLASS="listitem"><PCLASS="para">Reconfigure the machine from a configuration suitable for developmentinto its final running state.</P></LI><LICLASS="listitem"><PCLASS="para">Run a security audit to establish a baseline.</P></LI><LICLASS="listitem"><PCLASS="para">Connect the machine to the network it will be used on.</P></LI></OL><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-2887"></A><ACLASS="indexterm"NAME="AUTOID-2890"></A><ACLASS="indexterm"NAME="AUTOID-2893"></A>You should be very careful to make sure the machine is not accessiblefrom the Internet until the last step. If your site isn't yet connectedto the Internet, you can simply avoid turning on the Internet connectionuntil the bastion host is fully configured. If you are adding a firewallto a site that's already connected to the Internet, you need toconfigure the bastion host as a standalone machine, unconnected to yournetwork. </P><PCLASS="para">If the bastion host is vulnerable to the Internet while it is beingbuilt, it may become an attack mechanism instead of a defensemechanism. An intruder who gets in before you've run the baseline auditwill be difficult to detect and will be well-positioned to read all ofyour traffic to and from the Internet. Cases have been reported wheremachines have been broken into within minutes offirst being connected to the Internet; while rare, it can happen.</P><PCLASS="para">The following sections describe each of the main steps involved inbuilding a bastion host. They also touch briefly on ongoing maintenanceand protection of the bastion host; note, though, that maintenanceissues are discussed primarily in <ACLASS="xref"HREF="ch12_01.htm"TITLE="Maintaining Firewalls">Chapter 12, <CITECLASS="chapter">Maintaining Firewalls</CITE></A>.</P><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="AUTOID-2899">5.8.1 Securing the Machine</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="CH05MACHSEC"></A><ACLASS="indexterm"NAME="CH05SECMACH"></A>To start with, build a machine with a standard operating system,secured as much as possible. Start with a clean operating system andfollow the procedures we describe in this section.</P><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="AUTOID-2908">5.8.1.1 Start with a minimal clean operating systeminstallation</A></H4><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-2911"></A><ACLASS="indexterm"NAME="AUTOID-2914"></A>Start with a clean operating system installation, straight from vendordistribution media. If you do this, you will know exactly what you'reworking with. You won't need to retrofit something that may alreadyhave problems. Using such a system will also make later workeasier. Most vendor security patches you later obtain, as well as thevendor configuration instructions and other documentation, assumeyou're starting from an unmodified installation.</P><PCLASS="para">While you're installing the operating system, install as little as youcan get away with. It's much easier to avoid installing items than itis to delete them completely later on. For that matter, once youroperating system is minimally functional, it's not hard to addcomponents if you discover you need them. Don't install any optionalsubsystems unless you know you will need them.</P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="AUTOID-2918">5.8.1.2 Fix all known system bugs</A></H4><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-2921"></A><ACLASS="indexterm"NAME="AUTOID-2924"></A><ACLASS="indexterm"NAME="AUTOID-2927"></A><ACLASS="indexterm"NAME="AUTOID-2931"></A><ACLASS="indexterm"NAME="AUTOID-2934"></A>Get a list of known security patches and advisories for your operatingsystem; work through them to determine which are relevant for your ownparticular system, and correct all of the problems described in thepatches and advisories. You get this information from your vendorsales or technical support contacts, or from the user groups,newsgroups, or electronic mailing lists devoted to your particularplatform.</P><PCLASS="para">A helpful list of contacts is available via anonymous<SPANCLASS="acronym">FTP</SPAN> at the Firewalls mailing list archive:</P><BLOCKQUOTECLASS="literallayout"><PCLASS="literallayout"><ACLASS="systemitem.url"HREF="ftp://ftp.greatcircle.com/pub/firewalls/vendor_security_contacts">ftp://ftp.greatcircle.com/pub/firewalls/vendor_security_contacts</A></P></BLOCKQUOTE><PCLASS="para">In addition, be sure to get from the Computer Emergency Response TeamCoordination Center (<SPANCLASS="acronym">CERT-CC</SPAN>) any advisoriesrelevant to your platform, and work through them. (For information onhow to contact <SPANCLASS="acronym">CERT-CC</SPAN> and retrieve itsinformation, see the list of resources in <ACLASS="xref"HREF="appa_01.htm"TITLE="Resources">Appendix A, <CITECLASS="appendix">Resources</CITE></A>.)</P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="AUTOID-2945">5.8.1.3 Use a checklist</A></H4><PCLASS="para">To be sure you don't overlook anything in securing your bastionhost, use a security checklist. There are several excellentchecklists around. Be sure to use one that corresponds to your ownplatform and operating system version.</P><PCLASS="para">Appendix A of <EMCLASS="emphasis">Practical <SPANCLASS="acronym">UNIX</SPAN>Security</EM>, referenced earlier, contains an extensivechecklist that covers most <SPANCLASS="acronym">UNIX</SPAN> platforms. Morespecific checklists for particular operating system releases are oftenavailable through the formal or informal support channels for thoseplatforms; check with your vendor support contacts, or the usergroups, newsgroups, or mailing lists that are devoted to the platform.</P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="AUTOID-2952">5.8.1.4 Safeguard the system logs</A></H4><PCLASS="para"><ACLASS="indexterm"NAME="CH05LOGS"></A><ACLASS="indexterm"NAME="AUTOID-2957"></A>As a security-critical host, the bastion host requires considerablelogging. The next step in building the bastion host is to make surethat you have a way of safeguarding the system logs for the bastionhost.  The system logs on the bastion host are important for tworeasons:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">They're one of the best methods of determining if your bastionhost is performing as it should be. If everything the bastion hostdoes is logged (and it should be), you should be able to examine thelogs to determine exactly what it's doing and decide if that's whatit's supposed to be doing. <ACLASS="xref"HREF="ch12_01.htm"TITLE="Maintaining Firewalls">Chapter 12</A> describes theuse of system logs in maintaining your firewall.</P></LI><LICLASS="listitem"><PCLASS="para">When (not if!) someday someone does successfully break in tothe bastion host, the system logs are one of the primary mechanismsthat determine exactly what happened. By examining the logs andfiguring out what went wrong, you should be able to keep such abreak-in from happening again.</P></LI></UL><PCLASS="para">Where should you put the system logs? On the one hand, you want thesystem logs to be somewhere convenient; you want them to be where theycan be easily examined to determine what the bastion host is doing. Onthe other hand, you want the system logs to be somewhere safe; thiswill keep them from any possible tampering in case you need to usethem to reconstruct an incident.</P><PCLASS="para">The solution to these seemingly contradictory requirements is to keeptwo copies of the system logs&nbsp;- one for convenience, the other forcatastrophes.</P>System logs for convenience<PCLASS="para">The first copy of the system logs is the one you'll use on a regularbasis to monitor the ongoing activity of the machine. These are the logsagainst which you run your daily and weekly automated analysis reports.You can keep these logs either on the bastion host itself or on someinternal host. </P><PCLASS="para">The advantage of keeping them on the bastion host is simplicity: youdon't have to set up logging to go to some other system, nor do you haveto configure the packet filters to allow this. The advantage to keepingthem on an internal host is ease of access: you don't have to go tothe bastion host, which doesn't have any tools anyway, to examine thelogs. Avoid logging in to the bastion host, in any case.</P>System logs for catastrophes<PCLASS="para"><ACLASS="indexterm"NAME="CH05CATASTROPHE"></A>The second copy of the system logs is the one you'll use after acatastrophe. You can't use your convenience logs at a time like this. Either the convenience logs won't be available, or you won't be sure oftheir integrity any longer. </P><PCLASS="para">One of the simplest ways to create catastrophe logs is to attach aline printer to one of the bastion host's serial ports, and simply loga copy of everything to that port. There are some problems with thisapproach, though. First, you have to keep the printer full of paper,unjammed, and with a fresh ribbon. Second, once the logs are printed,there's not much you can do with them except look at them. Becausethey aren't in electronic form, you have no way to search or analyzethem in an automated fashion.</P><PCLASS="para">A more effective way to create catastrophe logs is to connect adedicated personal computer to a serial port on the bastion host, as a<EMCLASS="emphasis">dropsafe</EM> logging device. Configure the PC in sucha way that it boots up into a terminal program in &quot;record&quot;mode, and that every so often (every 100,000 bytes, for example), thelog files are rotated and pruned so the system never runs out of diskspace.  In this way, anything the bastion host spits out to thatserial port will be recorded on the personal computer's disk. Unlesssomeone has physical access to the <SPANCLASS="acronym">PC</SPAN> (the<SPANCLASS="acronym">PC</SPAN> should <EMCLASS="emphasis">not</EM> be connected toa network), the logs will remain safely out of reach. The advantage ofthis approach over the first method isthat the data remains in electronic form. If you have to do searchesand analyses on the data (after an incident, for example), you canretrieve it from the dropsafe machine.</P><PCLASS="para">If you have a write-once device available to you, use that device;doing so is probably technically easier, especially if your write-oncedevice can emulate a filesystem. Be sure you can trust the write-oncefeature. Some magneto-optical drives are capable of bothmultiple-write and write-once operations, and keep track of the modethey're in via software. If the system is compromised, it may bepossible to rewrite supposedly write-once media.</P><PCLASS="para">Some operating systems (notably <SPANCLASS="acronym">BSD</SPAN> 4.4-Lite andsystems derived from it, such as current releases of<SPANCLASS="acronym">BSDI</SPAN>, Free<SPANCLASS="acronym">BSD</SPAN>, andNet<SPANCLASS="acronym">BSD</SPAN>) support append-only files. These are not anadvisable alternative to write-once media or a dropsafe machine. Evenif you can trust the implementation of append-only files, the diskthat they're on is itself writable, and there may be ways to accessit outside of the filesystem, particularly for an intruder who wantsto destroy the logs.</P><PCLASS="para"><ACLASS="xref"HREF="ch05_08.htm#FIRE-05-FIG-2"TITLE="Use a PC attached by a serial line to create catastrophe logs">Figure 5.2</A> shows how you can connect a personalcomputer to your system to do logging.</P><H4CLASS="figure"><ACLASS="title"NAME="FIRE-05-FIG-2">Figure 5.2: Use a <SPANCLASS="acronym">PC</SPAN> attached by a serial line to createcatastrophe logs</A></H4><IMGCLASS="graphic"SRC="figs/fire0502.gif"ALT="Figure 5.2"><ACLASS="indexterm"NAME="AUTOID-2996"></A>Setting up system logs<PCLASS="para"><ACLASS="indexterm"NAME="CH05SYSLOG"></A>On a <SPANCLASS="acronym">UNIX</SPAN> system, logging is handled through<EMCLASS="emphasis">syslog</EM>. The <EMCLASS="emphasis">syslog</EM> daemonrecords log messages from various local and remote clients (programswith messages they want logged). Each message is tagged with facilityand priority codes: the facility code tells<EMCLASS="emphasis">syslog</EM> what general subsystem this message isfrom (for example, the mail system, the kernel, the printing system,the Usenet news system, etc.), and the priority code tells<EMCLASS="emphasis">syslog</EM> how important the message is (ranging fromdebugging information and routine informational messages throughseveral levels up to emergency information). The<EMCLASS="emphasis">/etc/syslog.conf</EM> file controls what<EMCLASS="emphasis">syslog</EM> does with messages, based on theirfacility and priority. A given message might be ignored, logged to oneor more files, forwarded to the <EMCLASS="emphasis">syslog</EM> daemon onanother system, flashed onto the screens of certain or all users whoare currently logged in, or any combination.</P><PCLASS="para">When you configure <EMCLASS="emphasis">syslog</EM> to record messages tofiles, you could configure it to send all messages to a single file,or to split messages up to multiple files by facility and prioritycodes.  If you split messages by facility and priority codes, each logfile will be more coherent, but you'll have to monitor multiple files;you may have an easier time finding messages from a particularservice. If you direct everything to a single file, on the other hand,you'll only have a single file to check for all messages, but thatfile will be much larger.</P><PCLASS="para">Many non-<SPANCLASS="acronym">UNIX</SPAN> systems, particularly network devicessuch as routers, can be configured to log messages via<EMCLASS="emphasis">syslog</EM>. If your systems have that capability,configuring them to so they all log to your bastion host provides aconvenient way to collect all their messages in a single place.</P><PCLASS="para">Be aware that remote logging via <EMCLASS="emphasis">syslog</EM> (e.g.,from a router to your bastion host, or from your bastion host to someinternal host) is not 100% reliable. For one thing,<EMCLASS="emphasis">syslog</EM> is a <SPANCLASS="acronym">UDP</SPAN>-based service,and the sender of a <SPANCLASS="acronym">UDP</SPAN> packet has no way ofknowing whether or not the receiver got the packet unless the receivertells the sender (<EMCLASS="emphasis">syslog</EM> daemons don't confirmreceipt to their senders). For another thing, even if<EMCLASS="emphasis">syslog</EM> were <SPANCLASS="acronym">TCP</SPAN>-based, youstill couldn't absolutely depend on it not to lose messages; what ifthe receiving system was down or otherwise unavailable? This is onereason that it's important to have a locally attached dropsafe machineto reliably capture all <EMCLASS="emphasis">syslog</EM> messages.</P><PCLASS="para">Despite its weaknesses, though, <EMCLASS="emphasis">syslog</EM> is auseful service; you should make extensive use of it.<ACLASS="indexterm"NAME="AUTOID-3026"></A><ACLASS="indexterm"NAME="AUTOID-3027"></A><ACLASS="indexterm"NAME="AUTOID-3028"></A><ACLASS="indexterm"NAME="AUTOID-3029"></A></P></DIV></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="AUTOID-3030">5.8.2 Disabling Nonrequired Services</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="CH05SERVINTDIS"></A><ACLASS="indexterm"NAME="CH05DISABLING"></A>Once you've completed the basic process of securing your bastion host,go on to the next step: disabling any services that aren't absolutelynecessary for the bastion host to provide. </P><PCLASS="para">Any service provided by the bastion host might have bugs orconfiguration problems that could lead to security problems.Obviously, you'll have to provide some services that users need, aslong as your site's security policy allows them. But, if the serviceisn't absolutely necessary, don't borrow trouble by providing it. Ifa service isn't provided by the bastion host, you won't have to worryabout possible bugs or configuration problems.</P><PCLASS="para">If you can live without a service, it should be turned off. It's worthsuffering some inconvenience. This means that you're going to need tothink very carefully about services. You'll be disabling not justservices you never heard of and never used, but also services you'vepurposefully enabled on other machines. Look at every service and ask yourself &quot;How could I avoid enabling this? What doI lose if I turn it off?&quot;</P><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="AUTOID-3040">5.8.2.1 How are services managed?</A></H4><PCLASS="para">On <SPANCLASS="acronym">UNIX</SPAN> machines, most services are managed in oneof two ways:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">By controlling when they start and who can use them</P></LI><LICLASS="listitem"><PCLASS="para">By service-specific configuration files</P></LI></UL><PCLASS="para">There are two ways services get started on <SPANCLASS="acronym">UNIX</SPAN> systems:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">At boot time from a machine's <EMCLASS="emphasis">/etc/rc</EM> files</P></LI><LICLASS="listitem"><PCLASS="para">On demand by the <EMCLASS="emphasis">inetd</EM> daemon (which isitself started at boot time) </P></LI></UL><PCLASS="para">A few services&nbsp;- for example, Sendmail&nbsp;- can be configured to rununder either or both mechanisms. </P>Services started by /etc/rc files<PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-3062"></A><ACLASS="indexterm"NAME="AUTOID-3064"></A><ACLASS="indexterm"NAME="AUTOID-3067"></A><ACLASS="indexterm"NAME="AUTOID-3069"></A>Services in the first category are designed to run indefinitely. Theyare started once (when the machine boots), and they are never supposedto exit. (Of course, sometimes they do exit, either because they'rekilled by a system administrator, or because they trip over a bug orsome other error.) Servers are written in this way if they need tohandle small transactions quickly, or if they need to &quot;remember&quot;information. Writing them in this way avoids the delays associatedwith starting a new copy of the server to handle each request made toit.</P><PCLASS="para">Servers of this kind are started from a <SPANCLASS="acronym">UNIX</SPAN>system's <EMCLASS="emphasis">/etc/rc</EM> files, which are shell scriptsexecuted when the machine boots. Examples of servers typically startedfrom <EMCLASS="emphasis">/etc/rc</EM> files are those that handle<SPANCLASS="acronym">NFS</SPAN>, <SPANCLASS="acronym">SMTP</SPAN>, and<SPANCLASS="acronym">DNS</SPAN>. In <SPANCLASS="acronym">BSD</SPAN>-based versions of<SPANCLASS="acronym">UNIX</SPAN>, there are customarily a few files in<EMCLASS="emphasis">/etc</EM> with names that start with &quot;rc.&quot;(for example <EMCLASS="emphasis">/etc/rc.boot</EM>). In System V-basedversions of <SPANCLASS="acronym">UNIX</SPAN>, there are customarily directoriesin <EMCLASS="emphasis">/etc</EM> instead of files (for instance,<EMCLASS="emphasis">/etc/rc.0.d</EM>); the directories contain the variousstartup commands, each in its own little file.</P><PCLASS="para">In either case, you need to be careful to look at all of the startupscripts and all of the scripts they call, recursively. Usually morethan one script is run in the process of bringing a system all the wayup. On modern <SPANCLASS="acronym">UNIX</SPAN> systems, those scripts oftencall others, sometimes through multiple levels of indirection. Forexample, you may find that a startup script calls another script tostart up networking, and that one calls yet another script to start upfile service. You may also find that startup scripts use mysticaloptions to familiar commands (e.g., they often run<EMCLASS="emphasis">ifconfig</EM> with little-used options that cause<EMCLASS="emphasis">ifconfig</EM> to pick up configuration informationfrom obscure places). Be sure you understand these options and thatyou replace any that tell the machine to pick up information aboutitself from the network (or from services it normally provides butthat you are going to turn off).</P><PCLASS="para">Some versions of <SPANCLASS="acronym">UNIX</SPAN> also have an additionalprocess started from these files that is designed to restart otherservers if they fail. If such a program exists on a system, it willtry to start the other servers if they are removed from the startupfiles but not from its configuration file. Either turn off thisprogram or be sure to remove from the program's configuration file anyservers removed from the startup files. You'll notice the program whenyou work through the startup files.</P>Services started by inetd<PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-3094"></A>Some servers are designed to be started &quot;on demand,&quot; and to exit afterthey provide the requested service. Such servers are typically usedfor services that are requested infrequently; for services that aren'tsensitive to delays in starting a new server from scratch; and forservices that require a new server process to deal with each request(for example, Telnet or <SPANCLASS="acronym">FTP</SPAN> sessions, where aseparate server is used for each active session).</P><PCLASS="para">Servers of this kind are usually run from the<EMCLASS="emphasis">inetd</EM> server. (The <EMCLASS="emphasis">inetd</EM>server itself, because it runs indefinitely, is started from the<EMCLASS="emphasis">/etc/rc</EM> files, as described in the previoussection.) The <EMCLASS="emphasis">inetd</EM> server listens for requestsfor services specified in the <EMCLASS="emphasis">/etc/inetd.conf</EM>configuration file. When it hears such a request, it starts the rightserver to process the request.</P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="AUTOID-3103">5.8.2.2 How to disable services</A></H4><PCLASS="para">If you disable a critical service, you must first make certain you have a way to boot the machine. This could be a second hard diskwith a full root partition on it or a <SPANCLASS="acronym">CD-ROM</SPAN> drivewith the operating system install disk. You need to be ruthless; ifyou delete the wrong thing and can't reboot, at best you're going tobe over-cautious about deleting things, and at worst you're going toend up with an unusable computer.</P><PCLASS="para">Second, you must save a clean copy of every file before you modify it.Even when you're just commenting things out, every so often yourfingers slip, and you delete something you didn't mean to, or youchange a critical character.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-3109"></A>Once you've taken these precautions, walk through the startup filesfor your system, line by line, making sure you know exactly what eachline does&nbsp;- including the command line options&nbsp;- and commenting out ordeleting the lines that start services you don't need. In a perfectworld, you would comment out every line, and then uncomment or rewritethe ones you need. Unfortunately, if you do this and the machinecrashes in the middle, it will not reboot. It's rather a lot oftrouble for a small increase in security over merely commenting outwith a very free hand.</P><PCLASS="para">You will frequently see services that are started after a check for someconfiguration file. If you don't want the service to run, comment outthe entire code block. Don't leave the code active simply because theconfiguration file doesn't <EMCLASS="emphasis">currently</EM> exist and theservice won't <EMCLASS="emphasis">currently</EM> be started. Someone orsomething might create the configuration file some time in the future.Commenting out the entire thing is more secure and less risky.</P><PCLASS="para">Commenting out lines is preferable to removing them, because it leavesevidence of your intent. When you comment something out, add a commentabout why you have commented it out. If you delete something, replace itwith a comment about why you have deleted it. Make sure that the nextperson to look at the files knows that you got rid of things on purposeand doesn't helpfully &quot;fix&quot; it for you. If you comment out acall to another script, add a comment in that script indicating thatit's not supposed to be started, and why. Renaming it or commenting outits contents are also good ways to help ensure that it won'taccidentally reappear. </P><PCLASS="para">For every service that you leave enabled, apply the same line-by-lineprocedure to the service's configuration files. Obviously, you want topay particular attention to <EMCLASS="emphasis">inetd</EM>'s configurationfile. On most systems, this file is called<EMCLASS="emphasis">/etc/inetd.conf</EM>. (On other systems, this filemight be called <EMCLASS="emphasis">/etc/servers</EM> or something else;check your manual pages for <EMCLASS="emphasis">inetd</EM>). If you have adaemon-watcher and have decided to leave it on, its configuration filesare also particularly important. </P><PCLASS="para">In general, you'll need to reboot your machine after you have changedthe configuration files. The changes won't take effect until youdo so.</P><PCLASS="para">After you have rebooted and tested the machine, and you are comfortablethat the machine works without the disabled services, you may want toremove the executables for those services. If the executables are lyingaround, they may be started by somebody&nbsp;- if not you, some other systemadministrator, or an intruder. A few services may even be executable bynonroot users if they use nonstandard ports. </P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-3123"></A><ACLASS="indexterm"NAME="AUTOID-3125"></A><ACLASS="indexterm"NAME="AUTOID-3127"></A>If you feel uncertain about removing executables, consider encryptingthem instead. Do not use the standard <SPANCLASS="acronym">UNIX</SPAN><EMCLASS="emphasis">crypt</EM> program; the encryption algorithm it usesis little more than a toy and can be trivially broken. Instead, use amore secure encryption program like <EMCLASS="emphasis">snuffle</EM> orsomething that uses the <SPANCLASS="acronym">DES</SPAN> or<SPANCLASS="acronym">IDEA</SPAN> algorithm. Choose a secure key; if you forgetthe key, you're no worse off than if you'd deleted the files, but ifan intruder gets the key, you're considerably worse off.</P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="AUTOID-3135">5.8.2.3 Which services should you leave enabled?</A></H4><PCLASS="para">Certain services are essential to the operation of the machine, andyou'll probably need to leave these enabled, no matter what else themachine is configured to do. On a <SPANCLASS="acronym">UNIX</SPAN> system, these processes include:</P><DLCLASS="variablelist"><DTCLASS="term"><EMCLASS="emphasis">init</EM>, <EMCLASS="emphasis">swap</EM>, and<EMCLASS="emphasis">page</EM></DT><DDCLASS="listitem"><PCLASS="para">The three kernel pseudo-processes used to manage all otherprocesses</P></DD><DTCLASS="term"><EMCLASS="emphasis">cron</EM></DT><DDCLASS="listitem"><PCLASS="para">Runs other jobs at fixed times, for housekeeping and so on</P></DD><DTCLASS="term"><EMCLASS="emphasis">syslogd</EM></DT><DDCLASS="listitem"><PCLASS="para">Collects and records log messages from the kernel and other daemons</P></DD><DTCLASS="term"><EMCLASS="emphasis">inetd</EM></DT><DDCLASS="listitem"><PCLASS="para">Starts network servers (such as <EMCLASS="emphasis">telnetd</EM> and<EMCLASS="emphasis">ftpd</EM>) when such services are requested by othermachines</P></DD></DL><PCLASS="para">In addition, you'll obviously need server processes for the servicesthat you've decided to provide on your bastion host, e.g., real orproxy Telnet, <SPANCLASS="acronym">FTP</SPAN>, <SPANCLASS="acronym">SMTP</SPAN>, and<SPANCLASS="acronym">DNS</SPAN> servers.</P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="AUTOID-3168">5.8.2.4 Which services should you disable?</A></H4><PCLASS="para">You will want to disable all services except the ones you have decidedto provide, and the supporting services necessary for those to run, asdescribed above. You may not always know which services are therequired support services, particularly because<SPANCLASS="acronym">UNIX</SPAN> names tend to be cryptic and uninformative.</P><PCLASS="para">How do you know which services to disable?</P><PCLASS="para">There are three simple rules to apply:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">If you don't need it, turn it off. </P></LI><LICLASS="listitem"><PCLASS="para">If you don't know what it does, turn it off (you probably didn'tneed it anyway). </P></LI><LICLASS="listitem"><PCLASS="para">If turning it off causes problems, you now know what it does,and you can either turn it back on again (if it's really necessary) orfigure out how to do without it.</P></LI></UL><SPANCLASS="acronym">NFS</SPAN> and related services<PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-3185"></A><ACLASS="indexterm"NAME="AUTOID-3188"></A>Start with <SPANCLASS="acronym">NFS</SPAN> and related network services. Youaren't going to need these. No internal machine should trust yourbastion host enough to let the bastion host mount the internalmachine's disks via <SPANCLASS="acronym">NFS</SPAN>. Besides that, thereprobably won't be anything on the bastion host that you'll want toexport via <SPANCLASS="acronym">NFS</SPAN>. <SPANCLASS="acronym">NFS</SPAN> is veryconvenient, but it's incredibly insecure.</P><PCLASS="para"><SPANCLASS="acronym">NFS</SPAN> services are provided by a whole set ofservers; the specific set of servers, and the names of the individualservers, varies slightly from one version of <SPANCLASS="acronym">UNIX</SPAN>to the next. Look for these names or names like them:<ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para"><EMCLASS="emphasis">nfsd</EM></P></LI><LICLASS="listitem"><PCLASS="para"><EMCLASS="emphasis">biod</EM></P></LI><LICLASS="listitem"><PCLASS="para"><EMCLASS="emphasis">mountd</EM></P></LI><LICLASS="listitem"><PCLASS="para"><EMCLASS="emphasis">statd</EM></P></LI><LICLASS="listitem"><PCLASS="para"><EMCLASS="emphasis">lockd</EM></P></LI><LICLASS="listitem"><PCLASS="para"><EMCLASS="emphasis">automount</EM></P></LI><LICLASS="listitem"><PCLASS="para"><EMCLASS="emphasis">keyserv</EM></P></LI><LICLASS="listitem"><PCLASS="para"><EMCLASS="emphasis">rquotad </EM></P></LI><LICLASS="listitem"><PCLASS="para"><EMCLASS="emphasis">amd</EM></P></LI></UL><ACLASS="indexterm"NAME="AUTOID-3226"></A></P><PCLASS="para">Most of these services are started at boot time from the<EMCLASS="emphasis">/etc/rc</EM> files, although some are started ondemand by <EMCLASS="emphasis">inetd</EM>. <EMCLASS="emphasis">mountd</EM> issomewhat peculiar in that it is often started at boot time <EMCLASS="emphasis">and</EM> is listed in the <EMCLASS="emphasis">inetd</EM>configuration file, apparently so that it will be restarted if forsome reason the copy that was started at boot time crashes.</P>Other <SPANCLASS="acronym">RPC</SPAN> services<PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-3238"></A><ACLASS="indexterm"NAME="AUTOID-3241"></A><ACLASS="indexterm"NAME="AUTOID-3244"></A><ACLASS="indexterm"NAME="AUTOID-3247"></A>You should also disable other services based on the Remote ProcedureCall (<SPANCLASS="acronym">RPC</SPAN>) system. The most critical of these is<SPANCLASS="acronym">NIS/YP</SPAN>, a service which is provided by thefollowing servers:<ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para"><EMCLASS="emphasis">ypserv</EM></P></LI><LICLASS="listitem"><PCLASS="para"><EMCLASS="emphasis">ypbind</EM></P></LI><LICLASS="listitem"><PCLASS="para"><EMCLASS="emphasis">ypupdated</EM></P></LI></UL></P><PCLASS="para">These servers are generally started at boot time from the<EMCLASS="emphasis">/etc/rc</EM> files. </P><PCLASS="para">Also disable these <SPANCLASS="acronym">RPC</SPAN>-based services:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para"><EMCLASS="emphasis">rexd</EM> (the remote execution service, started by<EMCLASS="emphasis">inetd</EM>)</P></LI><LICLASS="listitem"><PCLASS="para"><EMCLASS="emphasis">walld</EM> (the &quot;write all&quot;, or<EMCLASS="emphasis">wall</EM> daemon, started by<EMCLASS="emphasis">inetd</EM>)</P></LI></UL><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-3276"></A><ACLASS="indexterm"NAME="AUTOID-3278"></A>All <SPANCLASS="acronym">RPC</SPAN>-based services depend on a single serviceusually called <EMCLASS="emphasis">portmap </EM>(on some machinesit is known as <EMCLASS="emphasis">rpcbind</EM>). If you've disabled allof the <SPANCLASS="acronym">RPC</SPAN>-based services, you can (and should)also disable the <EMCLASS="emphasis">portmap</EM> service. How can youtell if you've disabled all the <SPANCLASS="acronym">RPC</SPAN>-based services?Before disabling <EMCLASS="emphasis">portmap</EM>, but after disablingwhat you think are the rest of the <SPANCLASS="acronym">RPC</SPAN>-basedservices, reboot the machine and then issue a <EMCLASS="emphasis">rpcinfo-p</EM> command. If the output of that command shows onlyentries for <EMCLASS="emphasis">portmap</EM> itself, this means that noother <SPANCLASS="acronym">RPC</SPAN> services are running. On the other hand,if the output shows that other <SPANCLASS="acronym">RPC</SPAN> services arestill running, you will need to investigate further to determine whatand why. If you decide to provide any <SPANCLASS="acronym">RPC</SPAN>-basedservices, you must also provide the <EMCLASS="emphasis">portmap</EM>service. In that case, consider using Wietse Venema's replacement<EMCLASS="emphasis">portmap</EM>, which is more secure than the versionsshipped with most <SPANCLASS="acronym">UNIX</SPAN> systems (see <ACLASS="xref"HREF="appb_01.htm"TITLE="Tools">Appendix B</A> for information on where to find it).</P>Booting services<PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-3300"></A><ACLASS="indexterm"NAME="AUTOID-3302"></A>Your bastion host should probably not provide booting services; nothingshould trust the host enough to be willing to boot from it. This meansthat, in most cases, you should disable these services:<ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para"><EMCLASS="emphasis">tftpd</EM></P></LI><LICLASS="listitem"><PCLASS="para"><EMCLASS="emphasis">bootd</EM></P></LI><LICLASS="listitem"><PCLASS="para"><EMCLASS="emphasis">bootpd</EM></P></LI></UL></P>BSD &#8216;r&#8217; command services<PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-3318"></A><ACLASS="indexterm"NAME="AUTOID-3321"></A><ACLASS="indexterm"NAME="AUTOID-3323"></A>These should all be disabled. The servers for these services aretypically named <EMCLASS="emphasis">rshd</EM>,<EMCLASS="emphasis">rlogind,</EM> and <EMCLASS="emphasis">rexecd</EM>, and aretypically started by <EMCLASS="emphasis">inetd</EM>. The remaining&quot;r&quot; services are based on these and will not run withoutthem.</P>routed<PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-3333"></A><ACLASS="indexterm"NAME="AUTOID-3335"></A>Another server that your bastion host probably doesn't need is <EMCLASS="emphasis">routed</EM>. This server is started at boot timefrom the <EMCLASS="emphasis">/etc/rc</EM> files, listens to routinginformation broadcasts, and updates the kernel routing table based onwhat it hears. </P><PCLASS="para">You probably don't need <EMCLASS="emphasis">routed</EM> on your bastionhost, because your bastion host is probably located on the perimeterof your network, where routing should be fairly simple. A more secureapproach is to create static routes pointing to your internalnetworks and a default route pointing to your Internet gatewayrouter. You do this at boot time by adding appropriate &quot;route add&quot;commands to the <EMCLASS="emphasis">/etc/rc</EM> files.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-3344"></A>If you must do dynamic routing on your bastion host, obtain and use<EMCLASS="emphasis">gated</EM> (see <ACLASS="xref"HREF="appb_01.htm"TITLE="Tools">Appendix B</A> forinformation on how to get it) rather than <EMCLASS="emphasis">routed</EM>.<EMCLASS="emphasis">gated</EM> understands the same routing protocols as<EMCLASS="emphasis">routed</EM> (plus several more), but<EMCLASS="emphasis">gated</EM> can be specifically told who to acceptrouting information from, while <EMCLASS="emphasis">routed</EM> willaccept information from anyone. Be sure that you set up theconfiguration files for <EMCLASS="emphasis">gated </EM> to limit whichhosts it listens to.</P>fingerd<PCLASS="para"><ACLASS="indexterm"NAME="CH05FINGERD"></A>The <EMCLASS="emphasis">finger</EM> server supplies informationabout existing accounts and accounts on <SPANCLASS="acronym">UNIX</SPAN>systems. This server is started on demand by<EMCLASS="emphasis">inetd</EM>. The information provided by<EMCLASS="emphasis">fingerd </EM>can be valuable to crackers; it tellsthem information about potential targets, such as:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">Which accounts exist. This tells them which accounts they shouldtry to guess passwords for.</P></LI><LICLASS="listitem"><PCLASS="para">Personal information about the people with accounts. This tellsthem what passwords to start guessing with.</P></LI><LICLASS="listitem"><PCLASS="para">Which accounts are in use. This tells them which accounts shouldbe avoided, at least until they're not in use.</P></LI><LICLASS="listitem"><PCLASS="para">Which accounts haven't been used lately. This tells them whichaccounts are good targets for attack, because the owners probably won'tnotice that the accounts are being used.</P></LI></UL><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-3373"></A>On the other hand, Internet users often use <EMCLASS="emphasis">finger</EM>(the program that talks to your <EMCLASS="emphasis">fingerd</EM> daemon)quite legitimately. <EMCLASS="emphasis">finger </EM>is helpful in locatingemail addresses and telephone numbers. Instead of simply disabling<EMCLASS="emphasis">fingerd</EM>, you might want to replace it with aprogram that obtains information from a more basic source of contactinformation for your site; the information might include:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">Your main phone number</P></LI><LICLASS="listitem"><PCLASS="para">Who to contact if they have questions about your site's productsor services</P></LI><LICLASS="listitem"><PCLASS="para">Sample email addresses if standardized aliases such as<EMCLASS="emphasis">Firstname_Lastname</EM> are maintained for users at yoursite</P></LI><LICLASS="listitem"><PCLASS="para">Who to contact in case of network or security problems involvingyour site</P></LI></UL><PCLASS="para">You can provide this kind of generic information to anybody who uses<EMCLASS="emphasis">finger</EM> to check on your site, regardless of whatspecific information they've requested. The easiest way to accomplishthis is to put the information in a file (for example,<EMCLASS="emphasis">/etc/finger_info</EM>) and then replace the part ofthe <EMCLASS="emphasis">/etc/inetd.conf</EM> entry for<EMCLASS="emphasis">fingerd</EM> that specifies the program to run withsomething like <EMCLASS="emphasis">/bin/cat /etc/finger_info</EM>. Doingthis causes the contents of the <EMCLASS="emphasis">/etc/finger_info</EM>file to be returned to anyone contacting your<EMCLASS="emphasis">fingerd</EM> server.</P><PCLASS="para">For example, here is the old <EMCLASS="emphasis">/etc/inetd.conf</EM> linefrom Great Circle Associate's system:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">finger stream tcp nowait nobody /usr/libexec/fingerd fingerd</PRE></BLOCKQUOTE><PCLASS="para">and here is the new <EMCLASS="emphasis">/etc/inetd.conf</EM> line:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">finger stream tcp nowait nobody /bin/cat cat /etc/finger_info</PRE></BLOCKQUOTE><PCLASS="para">and here are the contents of the <EMCLASS="emphasis">/etc/finger_info</EM>file:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Great Circle AssociatesPhone: +1 415 962 0841Email: Info@GreatCircle.COMFor more information, or to report system problems, please send email or call.</PRE></BLOCKQUOTE><ACLASS="indexterm"NAME="AUTOID-3406"></A>ftpd<PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-3410"></A><ACLASS="indexterm"NAME="AUTOID-3412"></A><ACLASS="indexterm"NAME="AUTOID-3414"></A>If you're going to provide anonymous <SPANCLASS="acronym">FTP</SPAN> service onyour bastion host, you need to reconfigure the <SPANCLASS="acronym">FTP</SPAN>server appropriately. You should replace the <EMCLASS="emphasis">ftpd</EM>program with one more suited to providing anonymous<SPANCLASS="acronym">FTP</SPAN> service than the standard<EMCLASS="emphasis">ftpd</EM> programs shipped by most<SPANCLASS="acronym">UNIX</SPAN> vendors. (See <ACLASS="xref"HREF="ch08_01.htm"TITLE="Configuring Internet Services">Chapter 8</A> forinformation about providing anonymous <SPANCLASS="acronym">FTP</SPAN> service.)</P><PCLASS="para">If you're <EMCLASS="emphasis">not</EM> going to provide anonymous<SPANCLASS="acronym">FTP</SPAN>, you can probably disable your<SPANCLASS="acronym">FTP</SPAN> server entirely; it's started on demand by<EMCLASS="emphasis">inetd</EM>.</P><PCLASS="para">Even if you've disabled the <SPANCLASS="acronym">FTP</SPAN> server on yourbastion host, you can still use the <SPANCLASS="acronym">FTP</SPAN> clientprogram (typically called simply <EMCLASS="emphasis">ftp</EM>) on thebastion host to transfer files to and from other systems. You'll justhave to do the work from the bastion host, instead of from the othersystems.</P>Other services<PCLASS="para">There are lots of other services you probably don't need and shoulddisable. Although the specific list depends on your own site's securitypolicy and needs, and on the platform you're using, it should probablyinclude the following:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para"><EMCLASS="emphasis">uucpd</EM> (<SPANCLASS="acronym">UUCP</SPAN> over<SPANCLASS="acronym">TCP/IP</SPAN>)</P></LI><LICLASS="listitem"><PCLASS="para"><EMCLASS="emphasis">rwhod</EM> (sort of like <EMCLASS="emphasis">fingerd</EM>,in that it tells you who's currently logged in on the system)</P></LI><LICLASS="listitem"><PCLASS="para"><EMCLASS="emphasis">lpd</EM> (the printer daemon)</P></LI></UL></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="AUTOID-3449">5.8.2.5 Turning off routing</A></H4><PCLASS="para"><ACLASS="indexterm"NAME="CH05ROUTDIS"></A><ACLASS="indexterm"NAME="AUTOID-3455"></A>If you have a dual-homed host that is not supposed to be a router, youwill need to specifically disable routing. In order to act as an<SPANCLASS="acronym">IP</SPAN> router, a dual-homed host needs to acceptpackets that are addressed to othermachines' <SPANCLASS="acronym">IP</SPAN> addresses, and send them onappropriately. This is known as <EMCLASS="emphasis">IP forwarding</EM>,and it's usually implemented at a low level in the operating systemkernel. An <SPANCLASS="acronym">IP</SPAN>-capable host with multiple interfacesnormally does this automatically, without any special configuration.</P><PCLASS="para">Other machines have to know that the dual-homed host is a router inorder to use it as such. Sometimes this is done simply by configuringthose machines to always route packets for certain networks to thedual-homed host (this is called <EMCLASS="emphasis">staticrouting</EM>). More often, however, the dual-homed host isconfigured to broadcast its routing capabilities via a routingprotocol such as Routing Information Protocol(<SPANCLASS="acronym">RIP</SPAN>). Other machines hear these routing broadcastsand adjust their own routing tables accordingly (this is called<EMCLASS="emphasis">dynamic routing</EM>). This broadcast of routinginformation by the dual-homed host is usually done by an additionalprogram (for example, <EMCLASS="emphasis">routed</EM> or<EMCLASS="emphasis">gated</EM> on a <SPANCLASS="acronym">UNIX</SPAN> system), whichoften has to be turned on explicitly.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-3470"></A><ACLASS="indexterm"NAME="AUTOID-3473"></A><ACLASS="indexterm"NAME="AUTOID-3476"></A>To use a dual-homed host as a firewall, you need to convert it to anonrouting dual-homed host; you take a machine that has two networkinterfaces, and you configure it so it <EMCLASS="emphasis">can't</EM> actas a router between those two interfaces. This is a two-step process:</P><OLCLASS="orderedlist"><LICLASS="listitem"><PCLASS="para">Turn off any program that might be advertising it as a router; this isusually relatively straightforward.</P></LI><LICLASS="listitem"><PCLASS="para">Disable <SPANCLASS="acronym">IP</SPAN> forwarding; this is considerably moredifficult, and may require modifying the operating system kernel.</P></LI></OL><PCLASS="para">Fortunately, these days a number of <SPANCLASS="acronym">UNIX</SPAN> vendorsprovide supported parameters for turning off <SPANCLASS="acronym">IP</SPAN>forwarding. Even for vendors that don't, it's about as easy as kernelpatches get on most machines: turning off <SPANCLASS="acronym">IP</SPAN>forwarding necessitates only a change in the value of a single kernelvariable. You need to consult your vendor to find out how to turn off<SPANCLASS="acronym">IP</SPAN> forwarding on your machines.</P><PCLASS="para">Unfortunately, it's not always that easy to turn off all routing,particularly on <SPANCLASS="acronym">BSD</SPAN>-based systems, such asSun<SPANCLASS="acronym">OS</SPAN> and Ultrix. On such systems, you can patchthe kernel to turn off <SPANCLASS="acronym">IP</SPAN> forwarding, but the<SPANCLASS="acronym">IP</SPAN> source-routing option usually remains a securityhole.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-3496"></A><ACLASS="indexterm"NAME="AUTOID-3498"></A><ACLASS="indexterm"NAME="AUTOID-3501"></A>What is <EMCLASS="emphasis">source routing</EM>? Normal<SPANCLASS="acronym">IP</SPAN> packets have only source and destinationaddresses in their headers, with no information about the route thepacket should take from the source to the destination. It's the job ofthe routers in between the source and the destination to determine themost efficient route. However, source-routed <SPANCLASS="acronym">IP</SPAN>packets contain additional information in the <SPANCLASS="acronym">IP</SPAN>header that specifies the route the packet should take. Thisadditional routing information is specified by the source host; thusthe term source-routed.</P><PCLASS="para">When a router receives a source-routed packet, it follows the routespecified in the packet, instead of determining the most efficientroute from source to destination. The source-routing specificationoverrides the ordinary routing. Because of the way the routing code isimplemented in most <SPANCLASS="acronym">UNIX</SPAN> kernels, turning off<SPANCLASS="acronym">IP</SPAN> forwarding does <EMCLASS="emphasis">not</EM> disableforwarding of source-routed packets. It's implemented completelyseparately. Unlike <SPANCLASS="acronym">IP</SPAN> forwarding, source routing isnot generally an easily patchable option. It is possible to disable it(you can disable anything with persistence and/or source code), butit's much more difficult.</P><PCLASS="para">Source-routed packets can easily be generated by modern applicationslike the Telnet client that's freely available on the Internet as partof the <SPANCLASS="acronym">BSD</SPAN> 4.4 release. Unless you blocksource-routed packets somewhere else, such as in a router between thedual-homed host and the Internet, source-routed packets can blow rightpast your dual-homed host and into your internal network.</P><PCLASS="para">Worse still, source routing goes both ways. Once source-routed packetsmake their way to an internal system, the system is supposed to replywith source-routed packets that use the inverse of the original route. The reply from your internal system back to the attacker will also blowright through your dual-homed host, allowing two-way connection througha firewall that was supposed to block all communications across it.</P><PCLASS="para">If you are not going to screen your dual-homed host, you will need topatch your operating system so that it rejects source-routed packets.Consult your vendor, and/or appropriate security mailing lists(discussed in <ACLASS="xref"HREF="appa_01.htm"TITLE="Resources">Appendix A</A>) for information on how todo this on your platform. This is not the sort of thing mostvendors' customer support structures deal with rapidly and painlessly;expect to have to dig to find what you need to know.<ACLASS="indexterm"NAME="AUTOID-3518"></A><ACLASS="indexterm"NAME="AUTOID-3519"></A><ACLASS="indexterm"NAME="AUTOID-3520"></A></P></DIV></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="AUTOID-3521">5.8.3 Installing and Modifying Services</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="CH05SERVINTINST"></A><ACLASS="indexterm"NAME="CH05INSTINTSERV"></A><ACLASS="indexterm"NAME="CH05MODINTSERV"></A>Some of the services you want to provide may not be provided with youroperating system (for example, <SPANCLASS="acronym">WWW</SPAN> generally isnot). Others may be provided but are inappropriate for use in a secureenvironment or are missing features you probably want (for example,stock <EMCLASS="emphasis">fingerd</EM> and<EMCLASS="emphasis">ftpd</EM>). Even those few remaining services that areprovided, secure, and up-to-date in your vendor's operating systemrelease should be protected with the <SPANCLASS="acronym">TCP</SPAN> Wrapperpackage or the <EMCLASS="emphasis">netacl</EM> program from the<SPANCLASS="acronym">TIS FWTK</SPAN> to improve security andprovide logging.  (Although <SPANCLASS="acronym">TCP</SPAN> Wrapper and<EMCLASS="emphasis">netacl</EM> will increase security, they're notperfect; they rely on the source <SPANCLASS="acronym">IP</SPAN> address toidentify hosts, and <SPANCLASS="acronym">IP</SPAN> addresses can be forged.)</P><PCLASS="para">For detailed information about individual services, including advice onselecting <SPANCLASS="acronym">WWW</SPAN>, <SPANCLASS="acronym">NNTP</SPAN>, and<SPANCLASS="acronym">FTP</SPAN> servers, see <ACLASS="xref"HREF="ch08_01.htm"TITLE="Configuring Internet Services">Chapter 8</A>.</P><PCLASS="para">Whatever services you do leave enabled should also be protected to theextent possible by the <SPANCLASS="acronym">TCP</SPAN> Wrapper package or the<EMCLASS="emphasis">netacl</EM> program, as we describe in the followingsections. For example, you might want to set up your bastion host sothat it only accepts Telnet connections from one specific machine, suchas the workstation you normally use.</P><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="AUTOID-3550">5.8.3.1 Using the TCP Wrapper package to protect services</A></H4><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-3553"></A><ACLASS="indexterm"NAME="AUTOID-3555"></A><ACLASS="indexterm"NAME="AUTOID-3558"></A>The <SPANCLASS="acronym">TCP</SPAN> Wrapper package, written by Wietse Venema,monitors incoming network traffic and controls network activity. It isa simple but very effective piece of publicly available software setup to run whenever certain ports (corresponding to certain services)are connected. <SPANCLASS="acronym">TCP</SPAN> Wrapper provides simple accesscontrol list protection, as well as improved logging, for servicesthat are started by <EMCLASS="emphasis">inetd</EM>.</P><PCLASS="para">Using the <SPANCLASS="acronym">TCP</SPAN> Wrapper package is easy. Here's what you do:</P><OLCLASS="orderedlist"><LICLASS="listitem"><PCLASS="para">Install the package and set up a pair of simple access control filesthat define which hosts and networks are allowed to access whichservices.</P></LI><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-3571"></A>Reconfigure your <EMCLASS="emphasis">inetd</EM> to run the main<SPANCLASS="acronym">TCP</SPAN> Wrapper program (called<EMCLASS="emphasis">tcpd</EM>) instead of the &quot;real&quot; server.</P></LI><LICLASS="listitem"><PCLASS="para">When a request for a service comes in, <EMCLASS="emphasis">inetd</EM>starts <EMCLASS="emphasis">tcpd</EM>, which evaluates the request againstthe <SPANCLASS="acronym">TCP</SPAN> Wrapper configuration files. This programdecides whether or not to log the request, and whether or not to carryout the request.</P></LI><LICLASS="listitem"><PCLASS="para">If <EMCLASS="emphasis">tcpd</EM> decides that the request is acceptable,it starts the &quot;real&quot; server to process the request. </P></LI></OL><PCLASS="para">For example, if you want to allow Telnet connections from a specifichost (172.16.1.2) to your machine, but deny Telnet connections fromall other hosts, you would change the line for<EMCLASS="emphasis">telnetd</EM> in your<EMCLASS="emphasis">/etc/inetd.conf</EM> file to say something like:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">telnet stream tcp nowait root /usr/local/libexec/tcpd telnetd</PRE></BLOCKQUOTE><PCLASS="para">You would also need to create an <EMCLASS="emphasis">/etc/hosts.allow</EM>file that tells the <SPANCLASS="acronym">TCP</SPAN> Wrapper package (the<EMCLASS="emphasis">tcpd</EM> program) which host to allow connectionsfrom:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">telnetd : 172.16.1.2</PRE></BLOCKQUOTE><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-3594"></A>And finally, you'd need to create an<EMCLASS="emphasis">/etc/hosts.deny</EM> file to tell the<SPANCLASS="acronym">TCP</SPAN> Wrapper package to deny all connections fromall hosts by default, and to send email to root abouteach probe:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">ALL : ALL : (/usr/local/etc/safe_finger -l @%h | \    /usr/ucb/Mail -s &quot;PROBE %d from %c&quot; root)&amp;</PRE></BLOCKQUOTE><PCLASS="para">Note that the <EMCLASS="emphasis">/etc/hosts.deny</EM> file only appliesto services protected by the <SPANCLASS="acronym">TCP</SPAN> Wrapper package(that is, services for which you've configured<EMCLASS="emphasis">inetd</EM> to run <EMCLASS="emphasis">tcpd</EM> instead ofthe real server). If you don't tell <EMCLASS="emphasis">inetd</EM> to runthe <SPANCLASS="acronym">TCP</SPAN> Wrapper package (the<EMCLASS="emphasis">tcpd</EM> program) for a given service, then the<SPANCLASS="acronym">TCP</SPAN> Wrapper package won't do anything regardingthat service.</P><PCLASS="para">Despite its name, the <SPANCLASS="acronym">TCP</SPAN> Wrapper package supports<SPANCLASS="acronym">UDP</SPAN>-based services in addition to<SPANCLASS="acronym">TCP</SPAN>-based services. Beware, however, that the<SPANCLASS="acronym">TCP</SPAN> Wrapper package can only control when to<EMCLASS="emphasis">start</EM> <SPANCLASS="acronym">UDP</SPAN>-based servers; itcannot control access to those servers once they're started, and many<SPANCLASS="acronym">UDP</SPAN>-based servers will hang around and continue toprocess requests for some period of time beyond the initial start-uprequest. Many eventually time out and exit, but once they've beenstarted through a legitimate request, they're vulnerable toillegitimate requests.</P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="AUTOID-3616">5.8.3.2 Using netacl to protect services</A></H4><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-3619"></A><ACLASS="indexterm"NAME="AUTOID-3622"></A>The <EMCLASS="emphasis">netacl</EM> component of the <SPANCLASS="acronym">TIS FWTK</SPAN> (described in some detail in <ACLASS="xref"HREF="ch07_01.htm"TITLE="Proxy Systems">Chapter 7, <CITECLASS="chapter">Proxy Systems</CITE></A>) provides much the same capability as the<SPANCLASS="acronym">TCP</SPAN> Wrapper package. To implement the same exampleas above (except for the ability to trace probes from unauthorizedsystems) using <EMCLASS="emphasis">netacl</EM>, you would change the linefor <EMCLASS="emphasis">telnetd</EM> in your<EMCLASS="emphasis">/etc/inetd.conf</EM> file to:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">telnet stream tcp nowait root /usr/local/lib/netacl telnetd</PRE></BLOCKQUOTE><PCLASS="para">Then, you would add the following lines to your<SPANCLASS="acronym">FWTK</SPAN> <EMCLASS="emphasis">netperm</EM> configurationfile (wherever that is on your system):</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">netacl-telnetd: permit-hosts 172.16.1.2 -exec /usr/libexec/telnetd</PRE></BLOCKQUOTE><ACLASS="indexterm"NAME="AUTOID-3636"></A><ACLASS="indexterm"NAME="AUTOID-3637"></A><ACLASS="indexterm"NAME="AUTOID-3638"></A></DIV></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="AUTOID-3639">5.8.4 Reconfiguring for Production</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="CH05CONFMACH"></A><ACLASS="indexterm"NAME="CH05MACHCONF"></A><ACLASS="indexterm"NAME="CH05INSTSOFT"></A><ACLASS="indexterm"NAME="CH05SOFTINST"></A>Now it's time to move the machine from the configuration that was usefulto you when you were building it to the best configuration for runningit. You'll need to do several things:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">Reconfigure and rebuild the kernel.</P></LI><LICLASS="listitem"><PCLASS="para">Remove all unnecessary programs.</P></LI><LICLASS="listitem"><PCLASS="para">Mount as many filesystems as possible to read-only.</P></LI></UL><PCLASS="para">Once you've deleted all the services that aren't used on a day-to-daybasis, you'll find that it is very difficult to work on the bastionhost, e.g., when you need to install new software packages or upgradeexisting ones. Here are some suggestions for what to do when you findit necessary to do extensive work on the bastion host:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">Write all the tools to a tape before deleting them, and then restorethem from tape when needed. Don't forget to delete them each timeafter you're done.</P></LI><LICLASS="listitem"><PCLASS="para">Set up a small, external, alternate boot disk with all the tools onit. Then, plug the disk in and boot from it when you need thetools. Don't leave the disk connected during routine operations,however; you don't want an attacker to be able to mount the disk anduse the tools against you.</P></LI></UL><PCLASS="para">You don't want an intruder to attack the machine while you'reworking on it. To keep that from happening, follow these steps:</P><OLCLASS="orderedlist"><LICLASS="listitem"><PCLASS="para">Either disconnect the bastion host from the network or disconnect yournetwork from the Internet before you begin. </P></LI><LICLASS="listitem"><PCLASS="para">Give the bastion host back the tools you'll need to use (as we'vedescribed above). </P></LI><LICLASS="listitem"><PCLASS="para">After you've finished your work on the machine, return it to itsnormal (stripped down) operating condition.</P></LI><LICLASS="listitem"><PCLASS="para">Reconnect the bastion host to the network or your network to theInternet.</P></LI></OL><PCLASS="para">You may find it easier to simply remove the bastion host's disk andattach it to an internal host as a nonsystem disk; you can then use theinternal host's tools without fear of having them remain available whenthe bastion host is returned to service. This procedure also guaranteesthat the bastion host is not vulnerable to compromise from the outsidewhile you are doing the work, since it is entirely nonfunctional whileits disk is removed and not susceptible to accidental reconnection.</P><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="AUTOID-3678">5.8.4.1 Reconfigure and rebuild the kernel</A></H4><PCLASS="para"><ACLASS="indexterm"NAME="CH05INSTKERN"></A><ACLASS="indexterm"NAME="CH05KERNREC"></A><ACLASS="indexterm"NAME="CH05CONFIGKERN"></A>The first step in this phase of building your bastion host is torebuild the operating system kernel to remove kernel capabilities you don't need. This may sound intimidating, but it's generally arelatively straightforward operation; it needs to be, because you'llbe using the same capabilities you'd use to install a new type ofdevice on your system. Every <SPANCLASS="acronym">UNIX</SPAN> system, asshipped, contains some form of configuration support (they rangeconsiderably in how kernel reconfiguration is supported and in whatyou can do). Besides reducing the size of your kernel (and therebymaking more memory available for other purposes), rebuilding thekernel denies to attackers the chance to exploit these capabilities.</P><PCLASS="para">Some capabilities are particularly dangerous. In particular, you shouldprobably remove the following capabilities or device drivers:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para"><SPANCLASS="acronym">NFS</SPAN> and related capabilities</P></LI><LICLASS="listitem"><PCLASS="para">Anything that enables network sniffing, e.g., Network Interface Tap(<SPANCLASS="acronym">NIT</SPAN>) or Berkeley Packet Filter(<SPANCLASS="acronym">BPF</SPAN>)</P></LI></UL><PCLASS="para">Although <SPANCLASS="acronym">NIT</SPAN> and <SPANCLASS="acronym">BPF</SPAN> areprovided for testing and debugging purposes, they are frequently usedby attackers. <SPANCLASS="acronym">NIT</SPAN> and <SPANCLASS="acronym">BPF</SPAN> aredangerous because they let the machine grab all packets off theEthernet it's attached to, instead of only the packets addressed toit. Disabling these capabilities may prevent you from using themachine as a packet filtering system, so you may not be able to deletethem in all architectures.</P><PCLASS="para">If your bastion host is a dual-homed host, this is the time to disable<SPANCLASS="acronym">IP</SPAN> forwarding.</P><PCLASS="para">You have to be more careful when you disable kernel capabilities thanwhen you disable services started by <EMCLASS="emphasis">inetd</EM> or atboot time from the <EMCLASS="emphasis">/etc/rc</EM> files (as describedearlier). There are a lot of interdependencies between kernelcapabilities. For this reason, it's sometimes hard to determineexactly what a given capability is used for. The consequences ofdisabling a capability that is actually needed can be severe, e.g.,the new kernel might not boot.</P><PCLASS="para">Make sure you follow your vendor's instructions for building andinstalling new kernels. Always keep a backup copy of your old kernel.If you have a backup, you can boot from it if you find out thatsomething is wrong with the new kernel. Be sure you know how to boot abackup kernel and look up the procedure before you try to boot ontothe new kernel. Be sure the backup kernel is in the root partition;you can't boot from a kernel that isn't on the root partition.</P><PCLASS="para">When you can reboot the machine, go through the kernel configurationfiles the same way you went through the startup files, checking everysingle line to make certain that it's something you want. Again, watchfor places where one configuration file contains another, and checkyour documentation to be sure that you've looked at all theconfiguration files that are consulted. Often there is one file forincluding device drivers and one or more for parameters;<SPANCLASS="acronym">IP</SPAN> forwarding will be in the latter.</P><PCLASS="para">Once you've got a working kernel, you'll probably want to delete orencrypt your old &quot;full function&quot; kernel. Replace it with abackup copy of the working minimal kernel. Doing so will keep acracker who somehow manages to break into your machine from simplyusing that old kernel to reboot, and thereby restore all of theservices you so carefully disabled. For similar reasons, you'llprobably also want to delete the files and programs needed to build anew kernel.</P><PCLASS="para">If your kernel uses loadable modules, it may be difficult to determinewhen they're used. You will want to delete or encrypt all the onesthat you don't want used, but because they're not always explicitlyloaded, you may not know which those are. Keeping an alternate bootmedium handy, try moving them out of the directory for loadablemodules. Run the machine through its paces before you finally removeor encrypt them.</P><PCLASS="para">Beware! Your vendor may have provided copies of &quot;generic&quot;kernels (which typically have every possible capability enabled) inunexpected locations for use during the installation of the machineand its (nonexistent) client machines. SunOS 4.x, for example, hassuch kernels in the <EMCLASS="emphasis">/usr/stand</EM> directory. Pokearound in all the directories where installation files are kept andall the directories for clients. The documentation generally tellsyou where client kernels are, but rarely tells you about the internalsof the install process. Check the documentation for disaster recoveryadvice, which may helpfully tell you where to locate spare kernelimages.<ACLASS="indexterm"NAME="AUTOID-3716"></A><ACLASS="indexterm"NAME="AUTOID-3717"></A><ACLASS="indexterm"NAME="AUTOID-3718"></A></P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="AUTOID-3719">5.8.4.2 Remove nonessential programs</A></H4><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-3722"></A>The next step is to remove all of the programs that aren't essentialfor day-to-day operation. If a program isn't there, an attacker can'texploit any bugs that it might contain. This is especially true for<EMCLASS="emphasis">setuid/setgid</EM> programs, which are a very temptingtarget for an attacker. You should remove programs you normally thinkof as being essential. Remember that the bastion host is purelyproviding Internet services; it does not need to be a comfortableenvironment to work in.</P><PCLASS="para">Window systems and compilers are examples of major programs you canget rid of. Attackers find these programs very useful: window systemsare fertile ground for security problems, and compilers can be used tobuild the attacker's own tools.</P><PCLASS="para">Before deleting programs like compilers, make sure you've finishedusing them yourself; make sure you've built, installed, and testedeverything you're going to need on this machine, such as the tools forauditing the system (discussed later in this chapter).</P><PCLASS="para">Instead of simply deleting key tools you'd expect an attacker to use,such as the compiler, you might want to replace them with programsthat raise an alarm (for example, sending email or tripping yourpager) when someone tries to run them. You might even want to have theprograms halt the system after raising the alarm, if you believe it'sbetter for the machine to be down than under attack.  This is a primeway to humiliate yourself, however; you yourself are probably the oneperson most likely to forget where you are to try to run a forbiddencommand. It's also a good way to set yourself up for denial of serviceattacks.</P><PCLASS="para">You'll want to do two scans looking for things to delete:<OLCLASS="orderedlist"><LICLASS="listitem"><PCLASS="para">Walk through all the standard directories for binaries on your system(everything that's in root's path or in the default user path). Ifyou're unsure whether a program is needed, turn off execute permissionon it for a while (a few days) before you remove or encrypt it and seewhat happens. You may also want to run the machine for a while beforeyou do the scan and check the access times on files to see if they'vebeen used.</P></LI><LICLASS="listitem"><PCLASS="para">Use <EMCLASS="emphasis">find</EM> to look for every file on the systemthat has the <EMCLASS="emphasis">setuid</EM> or<EMCLASS="emphasis">setgid</EM> bit turned on. The arguments to<EMCLASS="emphasis">find</EM> differ radically from system to system, butyou will probably want something like this:<BLOCKQUOTECLASS="screen"><PRECLASS="screen">find / -type f \( -perm -04000 -o -perm -02000 \) -ls</PRE></BLOCKQUOTE>&#13;</P></LI><LICLASS="listitem"><PCLASS="para">Some versions of <EMCLASS="emphasis">find</EM> provide special primitivesfor identifying <EMCLASS="emphasis">setuid</EM> and<EMCLASS="emphasis">setgid</EM> files.</P></LI></OL></P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="AUTOID-3744">5.8.4.3 Mount filesystems as read-only</A></H4><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-3747"></A><ACLASS="indexterm"NAME="AUTOID-3749"></A><ACLASS="indexterm"NAME="AUTOID-3752"></A><ACLASS="indexterm"NAME="AUTOID-3754"></A>Once you've got the bastion host configured, you don't want anybody(particularly an attacker) to be able to change the configuration. Toguard against this happening, mount the filesystems on the bastionhost as read-only if possible (particularly the filesystems thatcontain program binaries) to protect against tampering.</P><PCLASS="para">It's much better if you can use hardware write-protect; an attackermay be able to remount disks with write permission without gettingphysical access to the machine, but it's not going to do any good ifthe hardware write-protect on the disk is on. Most<SPANCLASS="acronym">IPI</SPAN> and <SPANCLASS="acronym">SMD</SPAN> disks have switchesfor this on their front panels. Many <SPANCLASS="acronym">SCSI</SPAN> diskshave a &quot;write-disable&quot; jumper you can set. If you findpowering the disk down and removing it from the case unacceptable as away to get write access, you could wire this jumper to an externalswitch on the drive enclosure.</P><PCLASS="para">You can't write-protect everything, of course.  You have to provide acertain amount of writable filesystem space for things like scratchspace, system logs, and the mail spool. You might be able to use a<SPANCLASS="acronym">RAM</SPAN> disk for this; however, you'll have to be surethat your operating system supports this, that you have enough<SPANCLASS="acronym">RAM</SPAN>, and that you think you can afford to lose thecontents of the <SPANCLASS="acronym">RAM</SPAN> disk (for example, electronicmail in transit between internal hosts and the Internet) whenever yourmachine reboots.</P><PCLASS="para">With most versions of <SPANCLASS="acronym">UNIX</SPAN>, you'll also have toeither provide writable disk space for memory swapping or turn offswapping. Many versions of <SPANCLASS="acronym">UNIX</SPAN> do not allow you toturn off swapping; however, they will usually allow you to use aseparate disk for swap space, and that disk can safely be leftwritable. Using a <SPANCLASS="acronym">RAM</SPAN> disk will increase yourmemory usage to the point where you will probably need swap space.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-3770"></A>Systems based on <SPANCLASS="acronym">BSD</SPAN> 4.4-Lite (for instance,current releases of Net<SPANCLASS="acronym">BSD</SPAN>, FreeBSD, and the<SPANCLASS="acronym">BSDI</SPAN> product) have a new immutable attribute thatcan be set on a per-file basis. If a file is marked&quot;immutable,&quot; the file cannot be changed, not even by root,unless the system is running in single-user mode. If your operatingsystem provides this capability, use it to protect your programs andconfiguration files from tampering by an attacker. (We recommend thatapproach only if you cannot use hardware write protection, or anadditional layer of security to use with hardware writeprotection. Because it's implemented in software, it is more likely tobe compromisable.)<ACLASS="indexterm"NAME="AUTOID-3775"></A><ACLASS="indexterm"NAME="AUTOID-3776"></A><ACLASS="indexterm"NAME="AUTOID-3777"></A><ACLASS="indexterm"NAME="AUTOID-3778"></A></P></DIV></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="AUTOID-3779">5.8.5 Running a Security Audit</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="CH05SECAUDIT"></A><ACLASS="indexterm"NAME="CH05AUDITSEC"></A>Once you've got the bastion host reconfigured, the next step is to run asecurity audit. There are two reasons for doing this. First, it givesyou a way to ensure you haven't overlooked anything during systemsetup. Second, it establishes a &quot;baseline,&quot; or a basis forcomparison, against which you can compare future audits. In this way,you'll be able to detect any tampering with the machine.</P><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="AUTOID-3787">5.8.5.1 Auditing packages</A></H4><PCLASS="para"><ACLASS="indexterm"NAME="CH05PACKAUDIT"></A><ACLASS="indexterm"NAME="CH05AUDITPACK"></A>Most auditing packages have two basic purposes:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">Checking for well-known security holes. These are holes that have beenuncovered by system administrators, exploited by attackers in systembreak-ins, or documented in computer security books and papers.</P></LI><LICLASS="listitem"><PCLASS="para">Establishing a database of checksums of all files on a system; doingthis allows a system administrator to recognize future changes tofiles&nbsp;- particularly unauthorized changes.</P></LI></UL><PCLASS="para">There are several very good automated auditing packages freelyavailable on the Internet. The three most commonly used are these:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-3804"></A><EMCLASS="emphasis">COPS</EM>&nbsp;- The Computer Oracle and PasswordSystem, developed by Dan Farmer and Gene Spafford</P></LI><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-3810"></A><EMCLASS="emphasis">Tiger</EM>&nbsp;- Developed as part of the <SPANCLASS="acronym">TAMU</SPAN>package by Texas A&amp;M University</P></LI><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-3816"></A><ACLASS="indexterm"NAME="AUTOID-3818"></A><EMCLASS="emphasis">Tripwire</EM>&nbsp;- Developed by Gene H. Kim andGene Spafford </P></LI></UL><PCLASS="para"><SPANCLASS="acronym">COPS</SPAN> and Tiger both check for well-known securityholes. There is significant overlap in what <SPANCLASS="acronym">COPS</SPAN>and Tiger check; however, they're both free, so it's a good idea toobtain and run both of them to get the best possiblecoverage. Tripwire is a filesystem integrity checker. It is strictlya tool for dealing with checksum databases; it is much better at thisthan either <SPANCLASS="acronym">COPS</SPAN> or Tiger (which both have basicchecksum database capabilities), but has no ability to check forwell-known security holes. These packages are independent of eachother; there's nothing to prevent you from using all three of them incombination on your bastion host, and that would probably be a goodidea. <ACLASS="xref"HREF="appb_01.htm"TITLE="Tools">Appendix B</A> gives you information on how to getall three packages.</P><PCLASS="para">Because the well-known security holes tend to be somewhat operatingsystem-specific, the effectiveness of the packages that check for thesesecurity holes is very dependent on which operating system you have, andwhich version of the operating system it is. If it's an operatingsystem and version the package knows about, that's great. If itisn't, then the package has to grope around blindly, trying to guesswhat holes might exist. (Fortunately, attackers will usually have thesame problem, if not to the same extent.)</P><PCLASS="para">Commercial packages that perform similar functions are starting tobecome available, but none yet have the complete capabilities andwidespread acceptance of <SPANCLASS="acronym">COPS</SPAN>, Tiger, and Tripwire.</P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="AUTOID-3830">5.8.5.2 Use the auditing packages</A></H4><PCLASS="para">How do you use the various auditing packages to audit your system? Thedetails of what you do depend upon which package you're using. (See thedocumentation provided with the packages for detailed instructions.) This section provides some general tips.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-3834"></A><ACLASS="indexterm"NAME="AUTOID-3837"></A>You will need to do some configuration. Don't just install theprogram, run it, and expect you'll get reasonable results. Expect togo through several iterations of running the auditing package, gettingwarnings, and reconfiguring your machine or the auditing package toget rid of warnings. When you get warnings, you have to decide whetherthe auditing package is wrong, or you are. There will be some caseswhere the right thing to do is to turn off checks, but it shouldn't beyour automatic response.</P><PCLASS="para">Once you've used the tools described in the previous section to createyour initial baseline, store a copy of the tools and these initialaudit results somewhere safe. Under no circumstances should you storethe only copy of the baseline or the tools on the bastionhost. Prepare for the worst: if someone were to break into the bastionhost and tamper with the only copy of the baseline audit, this wouldcompromise your ability to use the audit later on to detect illicitchanges on the system. If intruders can change the auditing software,it doesn't matter whether they can change the baseline; they couldsimply set up the auditing software to reproduce the baseline. Keepinga copy of the baseline audit on a floppy disk or magnetic tape that'slocked up someplace safe is a good way to protect against such acompromise. Preferably, you don't want an intruder to even read theaudit results; why tell them what you expect the system to look likeand what files you aren't watching?</P><PCLASS="para">Periodically, e.g., daily or weekly, depending on your ownsite's needs and capabilities, audit the machine once again andcompare the new audit to the baseline. Make sure you can account forany differences you find. Ideally, you should automate this periodicre-audit so it happens regularly and reliably. Unfortunately, this iseasier said than done. Arranging for automatic audits that can't bedefeated by &quot;replay&quot; attacks can be a neat trick.  In areplay attack, an attacker who has compromised your auditing systemsimply sends you a recording of a prior good audit whenever yoursystem invokes the automatic auditing capability. The most practicaldefense against this is to run your automated auditing system oftenenough that it's unlikely an attacker could break in, discover theauditing system, and subvert it (covering his tracks) before the nextaudit runs. This suggests that you should run an audit at least daily.<ACLASS="indexterm"NAME="AUTOID-3843"></A><ACLASS="indexterm"NAME="AUTOID-3844"></A></P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="AUTOID-3845">5.8.5.3 About checksums for auditing</A></H4><PCLASS="para"><ACLASS="indexterm"NAME="CH05AUDSECCHECK"></A><ACLASS="indexterm"NAME="CH05CHECK"></A>Checksums are very helpful in auditing. An intruder who changes aprogram or configuration file will almost certainly correct themodification dates afterwards, so you can't use these dates as areliable index. Comparing every file to a baseline copy avoids thatproblem, but takes a lot of time and requires that you store a copy ofevery single file, effectively doubling your storage requirements.Checksums are probably your best bet.</P><PCLASS="para">A checksum is a number calculated from the contents of the file thatwill change if the file is changed. Checksum calculation istime-consuming, but not as time-consuming as reading everything twiceto do a bit-by-bit compare. In addition, storing the checksums takesup much less space than storing the entire file. Checksums are notfull representations of the file, however, and every checksumalgorithm has cases where it will give the same checksum for twodifferent files. The better the checksum algorithm, the less likely itis that files with the same checksum resemble each other in any otherway.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-3855"></A>For example, the common <SPANCLASS="acronym">UNIX</SPAN><EMCLASS="emphasis">spell</EM> command uses a hashing algorithm thatshares this property with checksums.  <EMCLASS="emphasis">spell </EM>willrelatively reliably detect misspelled English words, but will oftenhappily accept complete garbage, because random character strings mayhappen to have the same hashes as good words. This represents aproblem only if you are likely to type &quot;qzx&quot; when you meant to type&quot;the&quot;. Similarly, a good checksum algorithm may come up with the samenumber for <EMCLASS="emphasis">/bin/login</EM> and a document containingthe text of &quot;Jabberwocky,&quot; but it won't come up with thesame number for <EMCLASS="emphasis">/bin/login</EM> and any otherexecutable capable of logging people in (especially a modified copy of<EMCLASS="emphasis">/bin/login</EM>).</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-3864"></A><ACLASS="indexterm"NAME="AUTOID-3867"></A><ACLASS="indexterm"NAME="AUTOID-3869"></A>However, the standard <SPANCLASS="acronym">UNIX</SPAN> checksum programs(<EMCLASS="emphasis">/bin/sum</EM>, for example) don't have this property.Those checksum programs use simple cyclic redundancy counter(<SPANCLASS="acronym">CRC</SPAN>) algorithms designed to catch bit errorsduring data transfers.  They can't keep up with the latest toolscrackers use to subvert traditional checksum programs. Crackers nowhave programs that manipulate the unused bytes in a file (particularlyan executable binary file) to make the checksum for that file come outto whatever they want it to be. They can make a modified copy of<EMCLASS="emphasis">/bin/login</EM> that produces the same checksum, and<EMCLASS="emphasis">sum</EM> will not be able to detect any difference</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-3877"></A>For real security, you need to use a &quot;cryptographic&quot;checksum algorithm like MD5 or Snefru; these algorithms produce largerand less predictable checksums that are much more difficult to spoof.The <SPANCLASS="acronym">COPS</SPAN>, Tiger, and Tripwire auditing packagesdescribed above all include and use such algorithms in place of thenormal <SPANCLASS="acronym">UNIX</SPAN> checksum programs.<ACLASS="indexterm"NAME="AUTOID-3881"></A><ACLASS="indexterm"NAME="AUTOID-3882"></A><ACLASS="indexterm"NAME="AUTOID-3883"></A><ACLASS="indexterm"NAME="AUTOID-3884"></A></P></DIV></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="AUTOID-3885">5.8.6 Connecting the Machine</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-3888"></A>Now that you have the machine fully secured, you can finally connect itto its destination network and run it. You want to do this when you'regoing to be around to see what happens; don't make it the last thing youdo before that long overdue vacation.</P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch05_07.htm"TITLE="5.7 Don't Allow User Accounts on the Bastion Host"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 5.7 Don't Allow User Accounts on the Bastion Host"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="Building Internet Firewalls"><IMGSRC="../gifs/txthome.gif"ALT="Building Internet Firewalls"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch05_09.htm"TITLE="5.9 Operating the Bastion Host "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 5.9 Operating the Bastion Host "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">5.7 Don't Allow User Accounts on the Bastion Host</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_a.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">5.9 Operating the Bastion Host </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><PCLASS="nav"><FONTSIZE="-1">[ <AHREF="../index.htm"TITLE="The Networking CD Bookshelf">Library Home</A> | <AHREF="../dnsbind/index.htm"TITLE="DNS &amp; BIND">DNS &amp; BIND</A> | <AHREF="../tcpip/index.htm"TITLE="TCP/IP Network Administration">TCP/IP</A> | <AHREF="../sendmail/index.htm"TITLE="sendmail">sendmail</A> | <AHREF="../smdref/index.htm"TITLE="sendmail Desktop Reference">sendmail Reference</A> | <AHREF="index.htm"TITLE="Building Internet Firewalls">Firewalls</A> | <AHREF="../puis/index.htm"TITLE="Practical UNIX &amp; Internet Security">Practical Security</A> ]</FONT></P></DIV></BODY></HTML>