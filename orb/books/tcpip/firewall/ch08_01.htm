<HTML><HEAD><TITLE>[Chapter 8] Configuring Internet Services</TITLE><METANAME="DC.title"CONTENT="Building Internet Firewalls"><METANAME="DC.creator"CONTENT="D. Brent Chapman &amp; Elizabeth D. Zwicky"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1999-02-04T00:19:15Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-124-0"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="part02.htm"TITLE="II. Building Firewalls"><LINKREL="prev"HREF="ch07_08.htm"TITLE="7.8 What If You Can't Proxy?"><LINKREL="next"HREF="ch08_02.htm"TITLE="8.2 File Transfer"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="Building Internet Firewalls"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,65"HREF="index.htm"ALT="Building Internet Firewalls"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/fsrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch07_08.htm"TITLE="7.8 What If You Can't Proxy?"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 7.8 What If You Can't Proxy?"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 8</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch08_02.htm"TITLE="8.2 File Transfer"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 8.2 File Transfer"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="CHAPTER"><H1CLASS="chapter"><ACLASS="title"NAME="FIRE-08-CHP">8. Configuring Internet Services</A></H1><DIVCLASS="htmltoc"><P><B>Contents:</B><BR><ACLASS="SECT1"HREF="#FIRE-08-S1-1"TITLE="8.1 Electronic Mail">Electronic Mail</A><BR><ACLASS="SECT1"HREF="ch08_02.htm"TITLE="8.2 File Transfer">File Transfer</A><BR><ACLASS="SECT1"HREF="ch08_03.htm"TITLE="8.3 Terminal Access (Telnet)">Terminal Access (Telnet)</A><BR><ACLASS="SECT1"HREF="ch08_04.htm"TITLE="8.4 Remote Command Execution">Remote Command Execution</A><BR><ACLASS="SECT1"HREF="ch08_05.htm"TITLE="8.5 Network News Transfer Protocol (NNTP)">Network News Transfer Protocol(<SPANCLASS="acronym">NNTP</SPAN>)</A><BR><ACLASS="SECT1"HREF="ch08_06.htm"TITLE="8.6 World Wide Web (WWW) and HTTP">World Wide Web (<SPANCLASS="acronym">WWW</SPAN>) and <SPANCLASS="acronym">HTTP</SPAN></A><BR><ACLASS="SECT1"HREF="ch08_07.htm"TITLE="8.7 Other Information Services">Other Information Services</A><BR><ACLASS="SECT1"HREF="ch08_08.htm"TITLE="8.8 Information Lookup Services">Information Lookup Services</A><BR><ACLASS="SECT1"HREF="ch08_09.htm"TITLE="8.9 Real-Time Conferencing Services">Real-Time Conferencing Services</A><BR><ACLASS="SECT1"HREF="ch08_10.htm"TITLE="8.10 Domain Name System (DNS)">Domain Name System(<SPANCLASS="acronym">DNS</SPAN>)</A><BR><ACLASS="SECT1"HREF="ch08_11.htm"TITLE="8.11 syslog">syslog</A><BR><ACLASS="SECT1"HREF="ch08_12.htm"TITLE="8.12 Network Management Services">Network Management Services</A><BR><ACLASS="SECT1"HREF="ch08_13.htm"TITLE="8.13 Network Time Protocol (NTP)">Network Time Protocol (<SPANCLASS="acronym">NTP</SPAN>)</A><BR><ACLASS="SECT1"HREF="ch08_14.htm"TITLE="8.14 Network File System (NFS)">Network File System(<SPANCLASS="acronym">NFS</SPAN>)</A><BR><ACLASS="SECT1"HREF="ch08_15.htm"TITLE="8.15 Network Information Service/Yellow Pages (NIS/YP)">Network Information Service/YellowPages (<SPANCLASS="acronym">NIS/YP</SPAN>)</A><BR><ACLASS="SECT1"HREF="ch08_16.htm"TITLE="8.16 X11 Window System">X11 Window System</A><BR><ACLASS="SECT1"HREF="ch08_17.htm"TITLE="8.17 Printing Protocols (lpr and lp)">Printing Protocols (lpr and lp)</A><BR><ACLASS="SECT1"HREF="ch08_18.htm"TITLE="8.18 Analyzing Other Protocols">Analyzing Other Protocols</A></P><P></P></DIV><PCLASS="para"><ACLASS="indexterm"NAME="CH08CONFINTSERV"></A><ACLASS="indexterm"NAME="CH08SERVINTCONF"></A>This chapter describes the major Internet services: how they work, whattheir packet filtering and proxying characteristics are, what theirsecurity implications are with respect to firewalls, and how to makethem work with a firewall. The purpose of this chapter is to give youthe information that will help you decide which services to offer atyour site and to help you configure these services so they are as safeand as functional as possible in your firewall environment.</P><PCLASS="para">This chapter is intended primarily as a reference; it's not necessarilyintended to be read in depth from start to finish, though you mightlearn a lot of interesting stuff by skimming the whole thing.</P><PCLASS="para">This chapter assumes that you are familiar with what the various Internet services areused for, and concentrates on explaining how to provide those servicesthrough a firewall. For introductory information about what particular services areused for, see <ACLASS="xref"HREF="ch02_01.htm"TITLE="Internet Services">Chapter 2, <CITECLASS="chapter">Internet Services</CITE></A>.</P><PCLASS="para">Where we discuss the packet filtering characteristics of particularservices, we use the same abstract tabular form we used to show filteringrules in <ACLASS="xref"HREF="ch06_01.htm"TITLE="Packet Filtering">Chapter 6, <CITECLASS="chapter">Packet Filtering</CITE></A>. You'll need to translatevarious abstractions like &quot;internal,&quot;&quot;external,&quot; and so on to appropriate values for yourown configuration. See <ACLASS="xref"HREF="ch06_01.htm"TITLE="Packet Filtering">Chapter 6</A> for an explanation of how you can translate abstractrules to rules for particular products andpackages, as well as more information on packet filtering in general.</P><PCLASS="para">Where we discuss the proxy characteristics of particular services, werely on concepts and terminology discussed in <ACLASS="xref"HREF="ch07_01.htm"TITLE="Proxy Systems">Chapter 7, <CITECLASS="chapter">Proxy Systems</CITE></A>.</P><PCLASS="para">Throughout this chapter, for each service, we'll show how its packetsflow through a firewall. The following figuresshow the basic packet flow: when a serviceruns directly (<ACLASS="xref"HREF="ch08_01.htm#FIRE-08-FIG-1"TITLE="A generic direct service">Figure 8.1</A>) and when a proxyservice is used (<ACLASS="xref"HREF="ch08_01.htm#FIRE-08-FIG-2"TITLE=" A generic proxy service">Figure 8.2</A>). The other figures inthis chapter show variations of these figures for individual services.If there are no specific figures for a particular service, you canassume that these generic figures are appropriate for that service.</P><H4CLASS="figure"><ACLASS="title"NAME="FIRE-08-FIG-1">Figure 8.1: A generic direct service</A></H4><IMGCLASS="graphic"SRC="figs/fire0801.gif"ALT="Figure 8.1"><H4CLASS="figure"><ACLASS="title"NAME="FIRE-08-FIG-2">Figure 8.2:  A generic proxy service</A></H4><IMGCLASS="graphic"SRC="figs/fire0802.gif"ALT="Figure 8.2"><PCLASS="para">You can find information on particular resources and tools (includingwhere to get them) in <ACLASS="xref"HREF="appa_01.htm"TITLE="Resources">Appendix A, <CITECLASS="appendix">Resources</CITE></A> and <ACLASS="xref"HREF="appb_01.htm"TITLE="Tools">Appendix B, <CITECLASS="appendix">Tools</CITE></A>.</P><BLOCKQUOTECLASS="note"><PCLASS="para"><STRONG>NOTE:</STRONG> <ACLASS="indexterm"NAME="AUTOID-7736"></A>We frequently characterize client port numbers as &quot;a random portnumber above 1023.&quot; Some protocols specify this as arequirement, and on others it is merely a convention (spread to otherplatforms from <SPANCLASS="acronym">UNIX</SPAN>, where ports below 1024 cannotbe opened by regular users). Although it is theoretically allowablefor clients to use ports below 1024 on non-<SPANCLASS="acronym">UNIX</SPAN>platforms, it is extraordinarily rare: rare enough that manyfirewalls, including ones on major public sites that handle clients ofall types, rely on this distinction and report never having rejected aconnection because of it.</P></BLOCKQUOTE><DIVCLASS="sect1"><H2CLASS="sect1"><ACLASS="title"NAME="FIRE-08-S1-1">8.1 Electronic Mail</A></H2><PCLASS="para"><ACLASS="indexterm"NAME="CH08EMAILCONF"></A><ACLASS="indexterm"NAME="CH08CONFEMAIL"></A>From a user's point of view, electronic mail is perhaps the mostfundamental Internet service. Unfortunately, it's also one of the mostvulnerable. Mail servers make extremely tempting targets, because theyaccept arbitrary data from arbitrary external hosts.</P><PCLASS="para">A mail system has three parts, which may be implemented bydifferent programs or may be implemented by the same program, in anycombination. <ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">A server accepts mail from external hosts or sends it to externalhosts </P></LI><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-7756"></A>A delivery agent puts the mail in the correct mailbox on the localhost</P></LI><LICLASS="listitem"><PCLASS="para">A user agent lets the recipient read the mail and composeoutgoing mail</P></LI></UL></P><PCLASS="para">Each of these parts is vulnerable for a different reason:<ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">The server directly accepts commands (related to delivering mail)from external hosts; for this reason, if the server isn't secure, it mayend up immediately giving an attacker all the access it has itself. </P></LI><LICLASS="listitem"><PCLASS="para">The delivery agent needs special permissions because it needs tobe able to write into every user's mailbox. Although the delivery agentdoesn't need to talk to the external world, if it can be subvertedsomehow, the intruder obtains very broad access. </P></LI><LICLASS="listitem"><PCLASS="para">The user agent runs as one user, and it doesn't talk to theexternal world, which limits its power and accessibility; however, itcan often run arbitrary other programs in response to the data received.</P></LI></UL></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-7769"></A>Because it talks to the external world, the server is vulnerable toattacks in the commands it gets from the outside world; these are called<EMCLASS="emphasis">command channel attacks</EM>. The delivery agent and theuser agent don't receive the commands directly, but they may bevulnerable to dangers in the content of the mail message; these are<ACLASS="indexterm"NAME="AUTOID-7772"></A><ACLASS="indexterm"NAME="AUTOID-7774"></A><ACLASS="indexterm"NAME="AUTOID-7777"></A><ACLASS="indexterm"NAME="AUTOID-7780"></A>called<EMCLASS="emphasis"> data-driven attacks</EM>. In addition, anyprogram may be vulnerable to misuse by somebody who can control how itis executed (what arguments are used, what user is running it, what itsdata files are), through <EMCLASS="emphasis">command-line bugs</EM>.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-7785"></A><ACLASS="indexterm"NAME="AUTOID-7788"></A>The Morris worm used a command channel attack againstSendmail; it issued a specialSendmail debugging command that allowed it totell Sendmail to execute anything the intruderliked.</P><PCLASS="para">Data-driven attacks can exploit the delivery agent, the user agent, orthe user. (The server generally pays no attention to the data.) Forexample, on <SPANCLASS="acronym">UNIX</SPAN> machines, most versions ofSendmail use <EMCLASS="emphasis">/bin/mail</EM> as alocal delivery agent. <EMCLASS="emphasis">/bin/mail</EM> is also a useragent and therefore has extensions to allow it to execute arbitrarycommands. (If you have only one terminal, you're typing a mailmessage, and you want to see the output of some other command, it'svery useful to be able to get your user agent to run the command foryou.) Unfortunately, these extensions are not always disabledwhen <EMCLASS="emphasis">/bin/mail</EM> is running as a delivery agent,and the data in the mail message is sometimes capable of triggeringthem, allowing an outsider to run arbitrary commands on your systemmerely by sending appropriately formatted mail to you.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-7796"></A>User agents may also be subverted even when they're acting asdesigned, as user agents. Today's multimedia mail readers areparticularly subject to attacks of this kind, because they need toexecute other programs to &quot;display&quot; a message for you (forexample, a graphics program to display a picture or an audio programto play an audio attachment), but older mail readers were vulnerableas well. One Christmas, most of <SPANCLASS="acronym">IBM</SPAN>'s corporatenetwork was put out of commission by a data-driven attack. Usersreceived a message, usually from someone they knew and trusted, thatsaid simply &quot;run me&quot;. Because it appeared to be comingfrom a friend, most people did run it; when they did, it displayed aChristmas tree, and then resent itself to all of the entries in thereader's address book (personal alias file). It propagated very fast,and the network melted down under the force of trying to send millionsof copies.</P><PCLASS="para">Finally, even if the server, the delivery agent, and the user agentare bug-free, some data-driven attacks work by subverting the user,and getting the user to perform some action the attackerwants. Sometimes that action involves running the program the attackersent in the mail. Sometimes it's something more direct; for example, it'scommon for attackers to send mail to users that appears to come fromtheir system's managers and that directs them to change their passwordto something specific. If the users do so, the attacker can now accesstheir account.</P><PCLASS="para">How well does a firewall protect against these different types ofattacks?<DLCLASS="variablelist"><DTCLASS="term"><EMCLASS="emphasis">Command channel attacks</EM></DT><DDCLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-7808"></A><ACLASS="indexterm"NAME="AUTOID-7811"></A>A firewall can protect against commandchannel attacks by restricting the number of machines to whichattackers can open command channels and by providing a secured serveron those machines.</P></DD><DTCLASS="term"><EMCLASS="emphasis">Data-driven attacks</EM></DT><DDCLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-7818"></A><ACLASS="indexterm"NAME="AUTOID-7820"></A>There isn't much a firewall can do aboutdata-driven attacks; the data has to be allowed through, or you won'tactually be able to receive mail. In some cases it's possible to filterout &quot;dangerous&quot; characters in the mail addresses if you cansomehow recognize them. Your best bet, though, is to run up-to-datedelivery and user agents and to educate your users. Doing so willprotect against most data-driven attacks. In any case, becausedata-driven attacks tend to be complicated and difficult to getinformation back from, they are relatively rare. </P></DD><DTCLASS="term"><EMCLASS="emphasis">Command-line bugs</EM></DT><DDCLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-7828"></A>Command-line bugs are outside the scope of afirewall, because they can be exploited only by someone who is alreadyable to execute commands on your system. One purpose of a firewall isto keep attackers from getting that ability.</P></DD></DL></P><PCLASS="para">The following sections describe the two protocols commonly used forelectronic mail: <SPANCLASS="acronym">SMTP</SPAN> and <SPANCLASS="acronym">POP</SPAN>, as well as the <SPANCLASS="acronym">MIME</SPAN> extension.</P><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="FIRE-08-S2-1">8.1.1 Simple Mail Transfer Protocol(<SPANCLASS="acronym">SMTP</SPAN>)</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="CH08SMTP"></A>On the Internet, electronic mail exchange between mail servers ishandled with <SPANCLASS="acronym">SMTP</SPAN>. A host's <SPANCLASS="acronym">SMTP</SPAN>server accepts mail and examines the destination address to decidewhether to deliver the mail locally or to forward it on to some othermachine. If it decides to deliver the mail locally, it recodes themail headers and delivery address into the proper form for the localdelivery program, and it then hands the mail to that program. If itdecides to forward the mail to another machine, it modifies theheaders, and contacts that machine (usually via<SPANCLASS="acronym">SMTP</SPAN>, but sometimes via <SPANCLASS="acronym">UUCP</SPAN> oranother protocol), and forwards the mail.</P><PCLASS="para"><SPANCLASS="acronym">SMTP</SPAN> is a store-and-forward system, and suchsystems are well-suited to firewall applications, particularly thoseusing proxy services. In <ACLASS="xref"HREF="ch07_01.htm"TITLE="Proxy Systems">Chapter 7</A>, <ACLASS="xref"HREF="ch07_05.htm#FIRE-07-FIG-2"TITLE="Store-and-forward services (like SMTP) naturally support proxying">Figure 7.2</A> shows how mail sent from an individual user'sworkstation is directed initially to a gateway system before leavingthe user's own network. Mail entering a network goes to a gatewaysystem on that network before being distributed to individual users onother hosts.</P><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="FIRE-08-S3-1">8.1.1.1 <SPANCLASS="acronym">SMTP</SPAN> for<SPANCLASS="acronym">UNIX</SPAN>: Sendmail</A></H4><PCLASS="para"><ACLASS="indexterm"NAME="CH08SM"></A><ACLASS="indexterm"NAME="CH08SECSM"></A><ACLASS="indexterm"NAME="AUTOID-7859"></A>The mailer most commonly used on <SPANCLASS="acronym">UNIX</SPAN> systems isSendmail. Sendmail is very powerful, but it also has a long andtroubling history of major and minor security problems. Other mailersare available, including smail 3, <SPANCLASS="acronym">MMDF</SPAN>, andZ-Mail, but none of them appears to be particularly more secure thana modern version of Sendmail.</P><PCLASS="para">Sendmail's security problems have been widely discussed, while theproblems of these other mailers have not. However, the lack of publicdiscussion about other mailers should not lead you to assume thesemailers are any more secure than Sendmail. While some of them areintended to be more secure than Sendmail, there is nothing toguarantee they are. Most of these alternative mailers are apparentlyintended to address Sendmail's incredibly baroque configuration filesand its occasional failure to comply with standards, or to providefeatures Sendmail doesn't have. Additional security is often anafterthought, not a design feature. These mailers are simply not aswidely used as Sendmail, and therefore, they have fewer people&nbsp;- withboth good intentions and bad&nbsp;- who are examining them for securityproblems. This fact, more than any inherent superiority, is probablythe reason for the apparently greater security of these alternativemailers; it's not that the problems aren't there, it's just that notas many people know what they are.</P><PCLASS="para">Sendmail is the devil that everybody knows; this is both an advantageand a disadvantage. On the one hand, problems are going to be found inSendmail because that's where lots of people are looking for them(because lots of people use Sendmail). On the other hand, whatproblems are found are likely to be fixed very quickly (again, becauselots of people use Sendmail). Sendmail is very actively supported onsecurity issues.</P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="FIRE-08-S3-2">8.1.1.2 Why does Sendmail have securityproblems?</A></H4><PCLASS="para">One of the reasons Sendmail has security problems is that it's avery complex program. It performs several different functions, and itrequires the collection of permissions necessary to perform<EMCLASS="emphasis">all</EM> of those functions. Sendmail needs rootprivileges for a number of reasons; for example, these privilegesallow Sendmail to:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">Listen on port 25 (a privileged port) for incoming<SPANCLASS="acronym">SMTP</SPAN> connections.</P></LI><LICLASS="listitem"><PCLASS="para">Operate as a particular user to read <EMCLASS="emphasis">.forward</EM>files and <EMCLASS="emphasis">:include:</EM> alias files owned by that user,and to run programs specified by those files.</P></LI><LICLASS="listitem"><PCLASS="para">Execute certain kernel system calls that (in some versions of<SPANCLASS="acronym">UNIX</SPAN>) are restricted to programs running as root,for example, to determine the amount of free disk space available to acceptincoming messages.</P></LI><LICLASS="listitem"><PCLASS="para">Protect files in the mail queue (i.e., messages in transit) fromsnooping by unprivileged users</P></LI></UL><PCLASS="para">These root permissions can be a liability, though, when Sendmail actsas an <SPANCLASS="acronym">SMTP</SPAN> server; an attacker who manages toexploit a bug over an <SPANCLASS="acronym">SMTP</SPAN> connection is nowtalking to a process that is running as root. The process can doessentially anything on the target machine at the attacker'sbidding. Sendmail tries to be careful to give up its privilegeswhenever it doesn't really need them, but there have still been quitea number of privilege-related bugs over the years.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-7888"></A>On a bastion host, it should be possible to make Sendmail run<EMCLASS="emphasis">setuid</EM> to something other than root. You can usean alternative <SPANCLASS="acronym">SMTP</SPAN> server (the<EMCLASS="emphasis">smap</EM> package, discussed below) for incoming<SPANCLASS="acronym">SMTP</SPAN> connections, so that Sendmail doesn't need tolisten on port 25. You shouldn't have any users on the bastion host,so you shouldn't need the ability to operate as particular users toread protected <EMCLASS="emphasis">.forward</EM> and<EMCLASS="emphasis">:include:</EM> files. There probably aren't anyprivileged system calls on your system that are critical to Sendmail'soperation (though you may need to recompile Sendmail from source toprevent it from attempting to use those calls). All you're left withis the need to keep ownership of files in the mail queue consistent,and to keep nonprivileged users (which the bastion host shouldn'thave anyway) from snooping on messages in transit. Creating a<EMCLASS="emphasis">uid</EM> just for Sendmail, and making that<EMCLASS="emphasis">uid</EM> the owner of the queue directory should solvethat problem.</P><PCLASS="para">Each of these tasks could probably be done in more secure ways, butthis would require a major redesign and reimplementation ofSendmail, and nobody has yet stepped up to acceptthis challenge: among other reasons, out of fear that doing so wouldprobably introduce new problems. Instead, we keep getting patch afterpatch for problem after problem, so that &quot;the currentSendmail patch&quot; has become something of arunning joke in the network security community.</P><PCLASS="para">Sendmail has exhibited all of the types ofgeneral mailer vulnerabilities we discussed above. Patching haseliminated or reduced most of them; for example, it used to be easy toexploit command-line bugs in Sendmail as anunprivileged user, but modern versions strictly limit the optionsavailable to unprivileged users. Given the program's past history,however, there are sure to be more problems yet to bediscovered. Also, patches for old problems have sometimes introducednew problems.<ACLASS="indexterm"NAME="AUTOID-7901"></A><ACLASS="indexterm"NAME="AUTOID-7902"></A></P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="FIRE-08-S3-3">8.1.1.3 Improving <SPANCLASS="acronym">SMTP</SPAN>security with smap and smapd</A></H4><PCLASS="para">An important step a firewall can take to improve security is toprevent attackers from speaking <SPANCLASS="acronym">SMTP</SPAN> directly toSendmail and, instead, to use a substituteserver. Fortunately, this is feasible. <SPANCLASS="acronym">SMTP</SPAN> standsfor &quot;Simple Mail Transport Protocol,&quot; and it really issimple. There are only about a half-dozen or so commands in theprotocol that an <SPANCLASS="acronym">SMTP</SPAN> server needs toimplement in order to accept incoming mail.</P><PCLASS="para"><ACLASS="indexterm"NAME="CH08SMAP"></A><ACLASS="indexterm"NAME="CH08TISFWTKSMAP"></A>You should consider adopting the <EMCLASS="emphasis">smap</EM> packagethat is part of the <SPANCLASS="acronym">TIS</SPAN> <SPANCLASS="acronym">FWTK</SPAN> asa &quot;wrapper&quot; for your <SPANCLASS="acronym">SMTP</SPAN> server (whether it isSendmail or something else). The package includes a pair of programscalled <EMCLASS="emphasis">smap</EM> and <EMCLASS="emphasis">smapd</EM>.</P><PCLASS="para"><EMCLASS="emphasis">smap</EM> is a very short, simple program intended solely to handle incoming <SPANCLASS="acronym">SMTP</SPAN>connections; unlike Sendmail, which containsabout 30,000 lines of code, <EMCLASS="emphasis">smap</EM> contains onlyabout 700 lines. The relative simplicity of <EMCLASS="emphasis">smap</EM> means that, unlike Sendmail, it can beeasily be examined and considered in its entirety for securityproblems. Furthermore, it's designed with least privilege andcompartmentalization in mind. The <EMCLASS="emphasis">smap</EM> programruns without root privileges. It is started by<EMCLASS="emphasis">inetd</EM>, which takes care of binding it to port 25before starting it, so that <EMCLASS="emphasis">smap</EM> doesn't need torun as root to do that. It runs <EMCLASS="emphasis">chroot</EM>'d to aparticular queue directory, and thus can't access anything outsidethat directory. All it does is accept incoming messages from theInternet via <SPANCLASS="acronym">SMTP</SPAN>. It speaks the very minimumnecessary set of <SPANCLASS="acronym">SMTP</SPAN> commands, and it stores eachmessage it receives in a separate file in the queue directory.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-7934"></A>The second program, <EMCLASS="emphasis">smapd</EM>, comes along regularly(typically once a minute) to process the files queued in thisdirectory, normally by handing them to Sendmailfor delivery.</P><PCLASS="para">The result of using this substitute <SPANCLASS="acronym">SMTP</SPAN> server isthat an attacker never has a direct <SPANCLASS="acronym">SMTP</SPAN> connectionto Sendmail or any other complex <SPANCLASS="acronym">SMTP</SPAN> server. Sucha system does not protect against data-driven security holes, but suchholes would be extremely hard for any firewall system to guardagainst. Fortunately, data-driven holes in Sendmail seem to be veryrare anyway; there has only been one instance to date.[1]</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[1] This is covered in <SPANCLASS="acronym">CERT</SPAN> Advisory 93:16. Forinformation on obtaining <SPANCLASS="acronym">CERT</SPAN> Advisories, see <ACLASS="xref"HREF="appa_01.htm"TITLE="Resources">Appendix A</A>.</P></BLOCKQUOTE><PCLASS="para">You do give up certain capabilities by using the<EMCLASS="emphasis">smap</EM> package, because <EMCLASS="emphasis">smap</EM>quite intentionally handles only the minimum possible set of<SPANCLASS="acronym">SMTP</SPAN> commands. In particular, you give up theability to do Extended <SPANCLASS="acronym">SMTP</SPAN>(<SPANCLASS="acronym">ESMTP</SPAN>). <SPANCLASS="acronym">ESMTP</SPAN> supports a numberof enhancements to basic <SPANCLASS="acronym">SMTP</SPAN>, such as betterhandling of <SPANCLASS="acronym">MIME</SPAN> messages (discussed below) andmessages containing eight-bit data. The basic <SPANCLASS="acronym">SMTP</SPAN>service supports only seven-bit data, and requires that eight-bit databe converted using something like <EMCLASS="emphasis">uuencode</EM> beforebeing transmitted, which leaves the recipient with the problem ofunconverting the data. This isn't a big problem right now, because only afew clients and servers currently support <SPANCLASS="acronym">ESMTP</SPAN> andthose that do have compatibility modes that let them talk regular<SPANCLASS="acronym">SMTP</SPAN>. <SPANCLASS="acronym">ESMTP</SPAN> is becoming more andmore common, however, and this will become more of a problem as timegoes by. Of course, it's always possible that the<EMCLASS="emphasis">smap</EM> package will be updated to support<SPANCLASS="acronym">ESMTP</SPAN> at some point, if it becomes a criticalissue. Like many other situations involving security, by using<EMCLASS="emphasis">smap</EM> you're trading off functionality forsecurity.<ACLASS="indexterm"NAME="AUTOID-7963"></A><ACLASS="indexterm"NAME="AUTOID-7964"></A></P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="FIRE-08-S3-4">8.1.1.4 Packet filtering characteristics of<SPANCLASS="acronym">SMTP</SPAN></A></H4><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-7969"></A><SPANCLASS="acronym">SMTP</SPAN> is a <SPANCLASS="acronym">TCP</SPAN>-basedservice. <SPANCLASS="acronym">SMTP</SPAN> receivers use port25. <SPANCLASS="acronym">SMTP</SPAN> senders use a randomly selected port above1023.</P><TABLECLASS="informaltable"><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Direc-</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Source</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Dest.</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Pro-</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Source</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Dest.</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">ACK</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1"></TH></TR><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">tion</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Addr.</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Addr.</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">tocol</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Port</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Port</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Set</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Notes</TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">In</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Ext</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Int</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para"><SPANCLASS="acronym">TCP</SPAN></P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">&gt;1023</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">25</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">[2]</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Incoming mail, sender to recipient</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Out</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Int</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Ext</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para"><SPANCLASS="acronym">TCP</SPAN></P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">25</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">&gt;1023</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Yes</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Incoming mail, recipient to sender</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Out</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Int</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Ext</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para"><SPANCLASS="acronym">TCP</SPAN></P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">&gt;1023</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">25</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">[2]</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Outgoing mail, sender to recipient</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">In</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Ext</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Int</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para"><SPANCLASS="acronym">TCP</SPAN></P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">25</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">&gt;1023</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Yes</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Outgoing mail, recipient to sender</P></TD></TR></TBODY></TABLE><BLOCKQUOTECLASS="footnote"><PCLASS="para">[2] <SPANCLASS="acronym">ACK</SPAN> is not set on the first packet of this type (establishing connection) but will be set on the rest.</P></BLOCKQUOTE><PCLASS="para">Normally, you want to configure your packet filters to allowincoming and outgoing <SPANCLASS="acronym">SMTP</SPAN> only between externalhosts and the bastion host, and between the bastion host and yourinternal mail servers.</P><PCLASS="para">Do not allow external hosts to contact random internal hosts via<SPANCLASS="acronym">SMTP</SPAN>. As we've discussed above, only speciallyconfigured hosts can safely accept <SPANCLASS="acronym">SMTP</SPAN>connections.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-8089"></A>If you cannot filter on the <SPANCLASS="acronym">ACK</SPAN> bit, you cannotsafely allow outgoing <SPANCLASS="acronym">SMTP</SPAN> connections directlyfrom random internal hosts, as we demonstrate in the final example in<ACLASS="xref"HREF="ch06_01.htm"TITLE="Packet Filtering">Chapter 6</A>. If you can filter on the<SPANCLASS="acronym">ACK</SPAN> bit, you allow internal hosts to send mail toexternal hosts, but there isn't much advantage in doing so. Althoughit shouldn't increase your vulnerability, it increases the likelihoodthat you're going to send misformatted mail, because the mail(mis)configurations of all your machines would be visible to theexternal world, and the chances that all your internal machines do allthe right things with mail headers (particularly in adding fullyqualified domain names to addresses and &quot;Message-ID:&quot;lines) are low. Sending outgoing mail via the bastion host allows thebastion host the opportunity to clean up the headers before the mailis loosed upon the world.</P><PCLASS="para"><ACLASS="xref"HREF="ch08_01.htm#FIRE-08-FIG-3"TITLE="Outbound SMTP">Figure 8.3</A> (outbound<SPANCLASS="acronym">SMTP</SPAN>) and <ACLASS="xref"HREF="ch08_01.htm#FIRE-08-FIG-4"TITLE="Inbound SMTP">Figure 8.4</A> (inbound<SPANCLASS="acronym">SMTP</SPAN>) show how packet filtering works with<SPANCLASS="acronym">SMTP</SPAN>.</P><H4CLASS="figure"><ACLASS="title"NAME="FIRE-08-FIG-3">Figure 8.3: Outbound <SPANCLASS="acronym">SMTP</SPAN></A></H4><IMGCLASS="graphic"SRC="figs/fire0803.gif"ALT="Figure 8.3"><H4CLASS="figure"><ACLASS="title"NAME="FIRE-08-FIG-4">Figure 8.4: Inbound <SPANCLASS="acronym">SMTP</SPAN></A></H4><IMGCLASS="graphic"SRC="figs/fire0804.gif"ALT="Figure 8.4"></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="FIRE-08-S3-5">8.1.1.5 Proxying characteristics of <SPANCLASS="acronym">SMTP</SPAN></A></H4><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-8114"></A>Because <SPANCLASS="acronym">SMTP</SPAN> is a store-and-forward protocol, it'sinherently suited to proxying. Because any <SPANCLASS="acronym">SMTP</SPAN>server can be a proxy, it's rare to set up separate proxying forit. Instead, most sites direct <SPANCLASS="acronym">SMTP</SPAN> connections toa bastion host running a secure <SPANCLASS="acronym">SMTP</SPAN> server thatis the proxy.</P><PCLASS="para">Dedicated firewall products that provide proxying may proxy<SPANCLASS="acronym">SMTP</SPAN> (they can't reasonably be expected torun a full <SPANCLASS="acronym">SMTP</SPAN> server). This is straightforward toconfigure, because <SPANCLASS="acronym">SMTP</SPAN> uses a single connection. Inthis configuration, it's not unreasonable to continue to direct theproxied <SPANCLASS="acronym">SMTP</SPAN> connections to a single secured<SPANCLASS="acronym">SMTP</SPAN> server on a bastion host that acts as asecond proxy. Proxying protects you from unwanted connections, but notfrom misuses of connections; you don't want to let external hoststalk to a standard unsecured <SPANCLASS="acronym">SMTP</SPAN> server, eventhrough a proxy.</P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="FIRE-08-S3-6">8.1.1.6 Configuring <SPANCLASS="acronym">SMTP</SPAN> towork with a firewall</A></H4><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-8133"></A><ACLASS="indexterm"NAME="AUTOID-8136"></A><ACLASS="indexterm"NAME="AUTOID-8140"></A>Because you want to  send all your mail through your bastion host, youneed to configure your mail system in a special way. Here are theimportant steps to follow:</P><OLCLASS="orderedlist"><LICLASS="listitem"><PCLASS="para">Use <SPANCLASS="acronym">DNS</SPAN> Mail Exchange (<SPANCLASS="acronym">MX</SPAN>)records to specify that all your incoming mail should be directed toyour bastion host(s).[3] </P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[3] For a detailed discussion of <SPANCLASS="acronym">MX</SPAN> records, how theywork, and how to use them, see the books<EMCLASS="emphasis"><SPANCLASS="acronym">TCP/IP</SPAN> Network Administration</EM>by Craig Hunt (O'Reilly &amp; Associates, 1992) and<EMCLASS="emphasis"><SPANCLASS="acronym">DNS</SPAN> and<SPANCLASS="acronym">BIND</SPAN></EM> by Paul Albitz and Cricket Liu(O'Reilly &amp; Associates, 1992).</P></BLOCKQUOTE></LI><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-8159"></A><ACLASS="indexterm"NAME="AUTOID-8162"></A>Configure the mailer on the bastion host to check thedestination address on mail it receives. If the mail is being sent toan external host, the bastion host should process the mail as usual;if the mail is to an internal host, the bastion host should simplypass the mail to an internal mail server for processing, rather thanattempt to deliver the mail itself. By passing the incoming mail to asingle internal server for processing, the bastion host is relieved ofhaving to keep track of internal aliases and internal mailconfiguration; this means you don't have to update the mailerconfiguration on the bastion host nearly as often. If the bastion hostpasses the incoming mail to a single internal server or small list ofinternal servers, the filtering system can restrict<SPANCLASS="acronym">SMTP</SPAN> connections from the bastion host to just thathost or hosts, reducing the number of internal systems that can be attackedvia <SPANCLASS="acronym">SMTP</SPAN> from the bastion host if the bastion hostitself is compromised. </P></LI><LICLASS="listitem"><PCLASS="para">Configure your internal systems to send all outgoing mail to thebastion host.</P></LI></OL><PCLASS="para">You may also want to configure your mail system so that mail is sentout with a central address, instead of with the name of an individualhost, as its return address. For example, you might want mail fromyour users to appear as <EMCLASS="emphasis">person@bigcompany.com</EM> not as<EMCLASS="emphasis">person@littlemachine.bigcompany.com</EM>. Because all of theincoming mail (replies to the above addresses in outgoing mail) willbe going to the bastion host in any case, this doesn't remove anynecessary information. It helps to guarantee that mail will go to thebastion host correctly, even if there are problems with the<SPANCLASS="acronym">MX</SPAN> records for individual machines, and it givesmore consistent information to the recipients of the mail.</P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="FIRE-08-S3-7">8.1.1.7 Summary recommendations for<SPANCLASS="acronym">SMTP</SPAN></A></H4><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">Use the normal store-and-forward features of <SPANCLASS="acronym">SMTP</SPAN>to send all incoming and outgoing mail through the bastion host.</P></LI><LICLASS="listitem"><PCLASS="para">Use packet filtering to restrict <SPANCLASS="acronym">SMTP</SPAN> connectionsfrom external hosts to just the bastion host.</P></LI><LICLASS="listitem"><PCLASS="para">Use packet filtering to restrict <SPANCLASS="acronym">SMTP</SPAN> connectionsfrom the bastion host to a specific internal server or set of servers.</P></LI><LICLASS="listitem"><PCLASS="para">Allow any internal system to send outgoing mail to the bastion host.</P></LI><LICLASS="listitem"><PCLASS="para">Use <EMCLASS="emphasis">smap</EM> instead of Sendmailas the <SPANCLASS="acronym">SMTP</SPAN> server on your bastion host andprobably on your internal mail server as well.</P></LI><LICLASS="listitem"><PCLASS="para">Keep up to date with patches on delivery agentsand user agents. </P></LI><LICLASS="listitem"><PCLASS="para">Educate your users concerning mail-based scams, such as instructionsto run particular programs or to change their passwords to somespecified string.</P></LI></UL><ACLASS="indexterm"NAME="AUTOID-8197"></A></DIV></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="FIRE-08-S2-2">8.1.2 Post Office Protocol(<SPANCLASS="acronym">POP</SPAN>)</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="CH08POP"></A><SPANCLASS="acronym">SMTP</SPAN> is used to exchange mail betweenservers. Normally, users access their mail as a file (directly, orusing <SPANCLASS="acronym">NFS</SPAN> or something similar) on the machinewhere it is delivered; however, there are sometimes reasons to use aseparate protocol to distribute mail from a server to an individualuser. </P><PCLASS="para"><SPANCLASS="acronym">POP</SPAN> is a client-server protocol for handling userelectronic mailboxes. With <SPANCLASS="acronym">POP</SPAN>, a user's mailbox(the actual file where that user's incoming email is held for hislater access) is kept on a server, rather than on the user's personalmachine. The server is probably available to accept incoming mail moreconsistently than the user's personal machine is (particularly if theuser's &quot;personal machine&quot; is a portable that he carrieswith him and that is only sometimes connected to the network). Whenthe user wants his email, he accesses his mailbox using a clientprogram (such as Eudora or Z-Mail) on his own machine using the<SPANCLASS="acronym">POP</SPAN> protocol.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-8211"></A>There are two major security issues involved in using<SPANCLASS="acronym">POP</SPAN> across the Internet. First, be aware thatstandard <SPANCLASS="acronym">POP</SPAN> clients and servers send the user's<SPANCLASS="acronym">POP</SPAN> password over the Internet in the clear, sothat anyone snooping on the connection can capture and reuse itlater. In most cases, the <SPANCLASS="acronym">POP</SPAN> password is the sameas the user's login password, so that someone who snoops on it can getall of the user's privileges&nbsp;- not just the user's electronicmail. There are more secure variants of <SPANCLASS="acronym">POP</SPAN> that<ACLASS="indexterm"NAME="AUTOID-8219"></A><ACLASS="indexterm"NAME="AUTOID-8222"></A><ACLASS="indexterm"NAME="AUTOID-8224"></A>support Kerberos (often called <SPANCLASS="acronym">KPOP</SPAN>) andnonreusable passwords for authentication (often called<SPANCLASS="acronym">APOP</SPAN>), but these secure variants are not widelyavailable or widely supported. You may have trouble finding acombination of clients and servers that support these variants andthat works for your site.</P><PCLASS="para">Second, regardless of the authentication issues, be sure to alsoconsider the sensitivity of the email your users will beaccessing over the Internet via <SPANCLASS="acronym">POP</SPAN>. Whatever emailyour users access will be visible to anyone snooping on their<SPANCLASS="acronym">POP</SPAN> sessions; you need to think about how sensitiveemail might be in your own environment. Many sites decide that,regardless of the authentication issues, their users' internal emailis often too sensitive to risk being snooped on by someone monitoringtheir <SPANCLASS="acronym">POP</SPAN> sessions. These sites decide to providealternative access methods, such as dial-ups, that aren't assusceptible to snooping. If you provide your users with the ability toreach your network on the inside of the firewall (for example, withmodems and <SPANCLASS="acronym">PPP</SPAN> or <SPANCLASS="acronym">SLIP</SPAN>), you cangive them <SPANCLASS="acronym">POP</SPAN> access while they're travelingwithout allowing it across the Internet.</P><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="FIRE-08-S3-8">8.1.2.1 Packet filtering characteristics of<SPANCLASS="acronym">POP</SPAN></A></H4><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-8239"></A><SPANCLASS="acronym">POP</SPAN> is a <SPANCLASS="acronym">TCP</SPAN>-basedservice. <SPANCLASS="acronym">POP</SPAN> servers for the current version of the<SPANCLASS="acronym">POP</SPAN> protocol (which is known as<SPANCLASS="acronym">POP3</SPAN> and is by far the most common version in use)use port 110. Servers for the older <SPANCLASS="acronym">POP2</SPAN> protocoluse port 109. (<SPANCLASS="acronym">POP1</SPAN> was never in widespread use.)<SPANCLASS="acronym">POP</SPAN> clients use ports above 1023.</P><TABLECLASS="informaltable"><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Direc-</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Source</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Dest.</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Pro-</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Source</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Dest.</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">ACK</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1"></TH></TR><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">tion</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Addr.</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Addr.</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">tocol</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Port</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Port</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Set</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Notes</TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">In</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Ext</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Int</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para"><SPANCLASS="acronym">TCP</SPAN></P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">&gt;1023</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">110</P><PCLASS="para">109[4]</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">[5]</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Incoming <SPANCLASS="acronym">POP</SPAN> connection, client to server</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Out</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Int</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Ext</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para"><SPANCLASS="acronym">TCP</SPAN></P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">110</P><PCLASS="para">109[4]</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">&gt;1023</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Yes</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Incoming <SPANCLASS="acronym">POP</SPAN> connection, server to client</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Out</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Int</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Ext</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para"><SPANCLASS="acronym">TCP</SPAN></P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">&gt;1023</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">110</P><PCLASS="para">109[4]</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">[5]</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Outgoing <SPANCLASS="acronym">POP</SPAN> connection, client to server</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">In</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Ext</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Int</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para"><SPANCLASS="acronym">TCP</SPAN></P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">110</P><PCLASS="para">109[4]</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">&gt;1023</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Yes</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Outgoing <SPANCLASS="acronym">POP</SPAN> connection, server to client</P></TD></TR></TBODY></TABLE><BLOCKQUOTECLASS="footnote"><PCLASS="para">[4] Modern <SPANCLASS="acronym">POP</SPAN> (<SPANCLASS="acronym">POP3</SPAN>) servers useport 110; older <SPANCLASS="acronym">POP2</SPAN> servers use port 109.</P><PCLASS="para">[5] <SPANCLASS="acronym">ACK</SPAN> is not set on the first packet of this type (establishing connection) but will be set on the rest.</P></BLOCKQUOTE><PCLASS="para">An outgoing <SPANCLASS="acronym">POP</SPAN> connection would allow your usersto download their mail from other sites. This is no more dangerousthan allowing outgoing Telnet, and you will probably want to allowsuch a <SPANCLASS="acronym">POP</SPAN> connection if there is any demand. Onthe other hand, <SPANCLASS="acronym">POP</SPAN> over the Internet is rareenough that there is unlikely to be anyone interested in outgoing<SPANCLASS="acronym">POP</SPAN> at your site, and there is no point in its use.</P><PCLASS="para">Incoming <SPANCLASS="acronym">POP</SPAN> connections are those that allowpeople at other sites to read mail delivered for them at your site. Asdiscussed in the previous section, you probably don't want to allowincoming <SPANCLASS="acronym">POP</SPAN>. If you do, you should certainly limit<SPANCLASS="acronym">POP</SPAN> connections to a <SPANCLASS="acronym">POP</SPAN> serverrunning on a single host. That will limit the number of vulnerableaccounts and the amount of information that's being passed across theInternet. Although there are no known vulnerabilities in<SPANCLASS="acronym">POP</SPAN> servers, if any are found, you should patchthem on just one host, without worrying about all your internalhosts. Because <SPANCLASS="acronym">POP</SPAN> requires user accounts, youdon't want to run it on your normal bastion host. Although you canprevent users from logging in on <SPANCLASS="acronym">POP</SPAN> accounts, theyrepresent a maintenance hassle.</P><PCLASS="para"><ACLASS="xref"HREF="ch08_01.htm#FIRE-08-FIG-5"TITLE="POP via packet filtering">Figure 8.5</A> shows how <SPANCLASS="acronym">POP</SPAN> workswith a firewall.</P><H4CLASS="figure"><ACLASS="title"NAME="FIRE-08-FIG-5">Figure 8.5: <SPANCLASS="acronym">POP</SPAN> via packet filtering</A></H4><IMGCLASS="graphic"SRC="figs/fire0805.gif"ALT="Figure 8.5"></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="FIRE-08-S3-9">8.1.2.2 Proxying characteristics of<SPANCLASS="acronym">POP</SPAN></A></H4><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-8397"></A><SPANCLASS="acronym">POP</SPAN> is straightforward to proxy, because it uses asingle connection. Precompiled proxy-enabled <SPANCLASS="acronym">POP</SPAN>clients (those that work with <SPANCLASS="acronym">SOCKS</SPAN>, for example)are not widely available. This is mostly because, although<SPANCLASS="acronym">POP</SPAN> is used extensively within<SPANCLASS="acronym">LAN</SPAN>s, <SPANCLASS="acronym">POP</SPAN> across the Internet israre. <SPANCLASS="acronym">UNIX</SPAN> <SPANCLASS="acronym">POP</SPAN> clients areavailable in source form and trivial to adapt for modified-clientproxying systems. It is generally more difficult to locate the sourcefor personal-computer implementations but no more difficult to modifythem.</P><PCLASS="para">There is no simple way to do modified-procedure proxying forconnections between internal clients and external servers, or externalclients and internal servers, unless all your clients areconnecting to the same server. If that's the case, then you could runa generic <SPANCLASS="acronym">TCP</SPAN> proxy program (such as the<EMCLASS="emphasis">plug-gw</EM> program from the <SPANCLASS="acronym">TIS FWTK</SPAN>) on the <SPANCLASS="acronym">POP3</SPAN> port on your bastionhost, configured to relay all connections to the single<SPANCLASS="acronym">POP</SPAN> server; you would then configure your clientsto access the &quot;<SPANCLASS="acronym">POP</SPAN> server&quot; (really theproxy program) on the bastion host.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-8417"></A>If you do need to provide access to multiple <SPANCLASS="acronym">POP</SPAN>servers and can ensure that all client connections from a given<SPANCLASS="acronym">IP</SPAN> address or domain should be directed to aparticular server, you could set up a more complex configuration withthe <EMCLASS="emphasis">plug-gw</EM> program to direct connections to theappropriate server based on where the connection request is comingfrom. If multiple users on the same client machine or machines need toaccess different <SPANCLASS="acronym">POP</SPAN> servers across the firewall,however, there's no simple way to do it with the code that's currentlyavailable. It is possible to write a custom <SPANCLASS="acronym">POP</SPAN>proxy server to run on the bastion host that authenticated the user,decided which server that user needed to talk to, opened a connectionand authenticated the user to that server, and then sat back andplayed the traditional proxy server &quot;pass-through&quot; role;it would be difficult to make this work with nonreusable passwords,though.</P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="FIRE-08-S3-10">8.1.2.3 Summary recommendations for<SPANCLASS="acronym">POP</SPAN></A></H4><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">Do not allow your users to transfer your site's mail over the Internetvia <SPANCLASS="acronym">POP</SPAN>, unless you can do so without revealingreusable passwords, and unless either you aren't concerned about thesensitivity of the mail itself or you have an encrypted channel totransfer it over.</P></LI><LICLASS="listitem"><PCLASS="para">If you have users who wish to transfer mail from other sites via<SPANCLASS="acronym">POP</SPAN>, allow it via packet filtering, perhapsrestricted to connections from specific sites or to specific hosts onyour end.</P></LI><LICLASS="listitem"><PCLASS="para">Proxying would be an effective solution for some<SPANCLASS="acronym">POP</SPAN> problems, but you might need to do at leastminor code modifications.</P></LI></UL><ACLASS="indexterm"NAME="AUTOID-8438"></A></DIV></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="FIRE-08-S2-3">8.1.3 Multipurpose Internet Mail Extensions(<SPANCLASS="acronym">MIME</SPAN>)</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="CH08MIME"></A><ACLASS="indexterm"NAME="AUTOID-8445"></A><SPANCLASS="acronym">MIME</SPAN> is a set of extensions to the basic Internetelectronic mail message format supporting things like:<ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">Non-<SPANCLASS="acronym">ASCII</SPAN> character sets</P></LI><LICLASS="listitem"><PCLASS="para">Nontext data such as pictures and audio segments</P></LI><LICLASS="listitem"><PCLASS="para">So-called&quot;rich text&quot; messages (messages containing formatted text,with different fonts and so on, rather than simple single-fontunformatted text)</P></LI><LICLASS="listitem"><PCLASS="para">Multipart messages (messages containingmultiple pieces, each piece in its own format).</P></LI></UL></P><PCLASS="para"><SPANCLASS="acronym">MIME</SPAN> support is mostly a client issue; to mailservers and transport systems, <SPANCLASS="acronym">MIME</SPAN> messages aregenerally just another message. The question is whetheror not a given client can generate outgoing <SPANCLASS="acronym">MIME</SPAN>messages, and whether or not it can recognize and cope with incoming<SPANCLASS="acronym">MIME</SPAN> messages.</P><PCLASS="para">The <SPANCLASS="acronym">MIME</SPAN> standards define certain basic data types,such as plain text, formatted text, standard audio, and soon. <SPANCLASS="acronym">MIME</SPAN> is designed to be extensible, so thatnew data types can be added as necessary.<SPANCLASS="acronym">MIME</SPAN>-capable mail clients generally understandcertain data types (often only multipart messages and plain text),and rely on other programs to handle other data types (for example,graphics programs to display images, and sound programs to play audioclips). The clients generally have a list of external programs to runfor particular types of data; this list can be extended ormodified by the user.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-8469"></A><ACLASS="indexterm"NAME="AUTOID-8472"></A>Ironically, the biggest use of <SPANCLASS="acronym">MIME</SPAN> hasn't been inmail systems, but in World Wide Web browsers. Most mail systems havelittle or no <SPANCLASS="acronym">MIME</SPAN> support, but<SPANCLASS="acronym">MIME</SPAN> is a key service upon which the World Wide Webis built. Every <SPANCLASS="acronym">WWW</SPAN> server uses<SPANCLASS="acronym">MIME</SPAN> to describe the format of every<SPANCLASS="acronym">WWW</SPAN> page it hands to a client; every<SPANCLASS="acronym">WWW</SPAN> client uses <SPANCLASS="acronym">MIME</SPAN> todetermine how to display or otherwise process the data it receives.</P><PCLASS="para">Because <SPANCLASS="acronym">MIME</SPAN> is used more extensively for<SPANCLASS="acronym">WWW</SPAN> support than for electronic mail, we discuss itbelow in the section on <SPANCLASS="acronym">WWW</SPAN>, even though it istheoretically email-related. If you do have email clients that support<SPANCLASS="acronym">MIME</SPAN>, they will be subject to the samevulnerabilities discussed in &quot;What can amalicious server do to your clients?&quot; in the section on theWorld Wide Web later in this chapter.</P><PCLASS="para">One difference between <SPANCLASS="acronym">MIME</SPAN> support in emailclients and <SPANCLASS="acronym">WWW</SPAN> clients is how data isobtained. With a <SPANCLASS="acronym">WWW</SPAN> client, the user chooses whatdata to access; with email, the user accesses whatever anybody sendsthem. In theory, email clients are more vulnerable, because you can'tcontrol what other people send you by email. In practice,however, the difference isn't that important, because it's fairly easyto lure a <SPANCLASS="acronym">WWW</SPAN> user into accessing whatever you wantthem to access. Either way, you need to carefully control what datatypes your clients understand and how they process that data. See thefull discussion of this issue in the <SPANCLASS="acronym">WWW</SPAN> section.<ACLASS="indexterm"NAME="AUTOID-8494"></A><ACLASS="indexterm"NAME="AUTOID-8495"></A><ACLASS="indexterm"NAME="AUTOID-8496"></A></P></DIV></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch07_08.htm"TITLE="7.8 What If You Can't Proxy?"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 7.8 What If You Can't Proxy?"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="Building Internet Firewalls"><IMGSRC="../gifs/txthome.gif"ALT="Building Internet Firewalls"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch08_02.htm"TITLE="8.2 File Transfer"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 8.2 File Transfer"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">7.8 What If You Can't Proxy?</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_a.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">8.2 File Transfer</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><PCLASS="nav"><FONTSIZE="-1">[ <AHREF="../index.htm"TITLE="The Networking CD Bookshelf">Library Home</A> | <AHREF="../dnsbind/index.htm"TITLE="DNS &amp; BIND">DNS &amp; BIND</A> | <AHREF="../tcpip/index.htm"TITLE="TCP/IP Network Administration">TCP/IP</A> | <AHREF="../sendmail/index.htm"TITLE="sendmail">sendmail</A> | <AHREF="../smdref/index.htm"TITLE="sendmail Desktop Reference">sendmail Reference</A> | <AHREF="index.htm"TITLE="Building Internet Firewalls">Firewalls</A> | <AHREF="../puis/index.htm"TITLE="Practical UNIX &amp; Internet Security">Practical Security</A> ]</FONT></P></DIV></BODY></HTML>