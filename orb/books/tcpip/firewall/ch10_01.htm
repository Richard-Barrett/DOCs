<HTML><HEAD><TITLE>[Chapter 10] Authentication and Inbound Services</TITLE><METANAME="DC.title"CONTENT="Building Internet Firewalls"><METANAME="DC.creator"CONTENT="D. Brent Chapman &amp; Elizabeth D. Zwicky"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1999-02-04T00:28:31Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-124-0"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="part02.htm"TITLE="II. Building Firewalls"><LINKREL="prev"HREF="ch09_02.htm"TITLE="9.2 Screened Host Architecture"><LINKREL="next"HREF="ch10_02.htm"TITLE="10.2 What Is Authentication?"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="Building Internet Firewalls"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,65"HREF="index.htm"ALT="Building Internet Firewalls"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/fsrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch09_02.htm"TITLE="9.2 Screened Host Architecture"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 9.2 Screened Host Architecture"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 10</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch10_02.htm"TITLE="10.2 What Is Authentication?"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 10.2 What Is Authentication?"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="CHAPTER"><H1CLASS="chapter"><ACLASS="title"NAME="FIRE-10-CHP">10. Authentication and InboundServices</A></H1><DIVCLASS="htmltoc"><P><B>Contents:</B><BR><ACLASS="SECT1"HREF="#FIRE-10-S1-1"TITLE="10.1 Risks of Using Inbound Services">Risks of Using Inbound Services</A><BR><ACLASS="SECT1"HREF="ch10_02.htm"TITLE="10.2 What Is Authentication?">What Is Authentication?</A><BR><ACLASS="SECT1"HREF="ch10_03.htm"TITLE="10.3 Authentication Mechanisms">Authentication Mechanisms</A><BR><ACLASS="SECT1"HREF="ch10_04.htm"TITLE="10.4 Complete Authentication Systems">Complete AuthenticationSystems</A><BR><ACLASS="SECT1"HREF="ch10_05.htm"TITLE="10.5 Network-Level Encryption">Network-Level Encryption</A><BR><ACLASS="SECT1"HREF="ch10_06.htm"TITLE="10.6 Terminal Servers and Modem Pools">Terminal Servers and Modem Pools</A></P><P></P></DIV><PCLASS="para"><ACLASS="indexterm"NAME="CH10INSERV"></A><ACLASS="indexterm"NAME="AUTOID-20172"></A><ACLASS="indexterm"NAME="CH10AUTH"></A>This book concentrates primarily on how to safely let your users go<EMCLASS="emphasis">out to</EM> the Internet, but there's also anotherside to Internet security: how do you safely allow users to come<EMCLASS="emphasis">in</EM> <EMCLASS="emphasis">from</EM> the Internet?&#13;</P><PCLASS="para">For anonymous services, such as accessing an anonymous<SPANCLASS="acronym">FTP</SPAN> server, <SPANCLASS="acronym">HTTP</SPAN> server, orGopher server that you provide, the solution is clear: you protect theservers as best you can to allow outsiders to access the informationyou want to provide and to prevent them from accessing anythingelse. In these anonymous services, all the information you release isintended to be readable by anybody. (See the discussion of theseservices in <ACLASS="xref"HREF="ch08_01.htm"TITLE="Configuring Internet Services">Chapter 8, <CITECLASS="chapter">Configuring Internet Services</CITE></A>.)</P><PCLASS="para">For nonanonymous services, however, the situation is much more complex.For nonanonymous services (or &quot;authenticated&quot; services, asthey're commonly called), the user who is attempting to access theservice first needs to prove his identity to your server so that yourserver can decide whether the user is authorized to do what he isrequesting. Examples of authenticated services you might want toprovide include:<ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para"> Allowing your users to log in (via Telnet) from theInternet, e.g., while they're away at conferences or visitingother sites.</P></LI><LICLASS="listitem"><PCLASS="para">Allowing researchers and collaborators from affiliated sites to log into your systems.</P></LI><LICLASS="listitem"><PCLASS="para">Allowing selected customers or clients to log in to your systems.</P></LI></UL></P><PCLASS="para">Authentication is basically verified, proven identification. How do users prove to a system that they're really who they say they are?Don't confuse authentication (figuring out who somebody is) andauthorization (figuring out what they're allowed todo). Authentication is a prerequisite for authorization (unlesseverybody is authorized to do something, such as anonymous<SPANCLASS="acronym">FTP</SPAN>), but they are separate and distinct concepts.</P><PCLASS="para">This chapter focuses on inbound services and how authentication canreduce the risks associated with using these services. It also toucheson a few additional encryption and authentication issues that apply toboth inbound and outbound services, such as network-level encryptionand where to place modem pools.</P><DIVCLASS="sidebar"><H4CLASS="sidebar"><ACLASS="title"NAME="AUTOID-20195">Cryptography</A></H4><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-20198"></A><ACLASS="indexterm"NAME="AUTOID-20200"></A>What are the basic differences between private and public keycryptography?</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-20204"></A><EMCLASS="emphasis">Private key algorithms </EM> include the DataEncryption Standard (<SPANCLASS="acronym">DES</SPAN>) (used by Kerberos),<SPANCLASS="acronym">IDEA</SPAN>, and the Skipjack algorithm that underlies theClipper Chip. With private key, a single key is shared by two partiesand must be kept secret by both of them (this is the privatekey). The sender of a communication encrypts the message with thissecret key; the recipient must decrypt it with the samekey. To communicate with someone securely, you must tellthat person the cryptographic key you are using; you mustalso keep anyone else from discovering or overhearing the key. Thisprocess, called key distribution, is difficult and cumbersome to dosecurely.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-20211"></A><EMCLASS="emphasis">Public key algorithms</EM> include<SPANCLASS="acronym">RSA</SPAN>, and Diffie-Hellman. With public key systems, amathematical process generates two mathematically related keys foreach individual. A message encrypted with one key (the public key) canbe decrypted only with the other key (secret or private key). Publickeys can be known to anyone, but secret keys must be kept so. Totransmit a secret message, the sender encrypts his message with thepublic key of the intended recipient. The recipient decrypts thatmessage with his own secret key; the only key that will decrypt themessage is the secret key associated with the public key used toencrypt it. Public key cryptography also gives you the ability to&quot;sign&quot; messages. If the sender signs a message with hissecret key, the recipient can validate the signature by applying thesender's public key to the message; if the public key successfullydecrypts the message, it must have been signed with the correspondingsecret key.</P><PCLASS="para">Public key algorithms are slow, often thousands of times slower thanequivalently secure private key algorithms. For this reason, publicand private key algorithms are often used in conjunction with eachother. For example, the Pretty Good Privacy (<SPANCLASS="acronym">PGP</SPAN>)encryption package works this way. To send an encrypted message to arecipient, the sending <SPANCLASS="acronym">PGP</SPAN> program generates arandom &quot;session key.&quot; This session key is used with aprivate key algorithm to encrypt the message to be sent (this isfast). The session key itself is encrypted with a public key algorithm(this is slow, but the session key is small, especially compared tothe whole message), using the recipient's public key, and is sentalong with the encrypted message. The recipient first uses the publickey algorithm and his secret key to decrypt the session key (this isslow, but the session key is small), and then uses the session key andprivate key algorithm to decrypt the whole message (this is fast). Fora detailed discussion of <SPANCLASS="acronym">PGP</SPAN>, see SimsonGarfinkel's book, <EMCLASS="emphasis"><SPANCLASS="acronym">PGP</SPAN>: Pretty GoodPrivacy</EM> (referenced in <ACLASS="xref"HREF="appa_01.htm"TITLE="Resources">Appendix A, <CITECLASS="appendix">Resources</CITE></A>).</P></DIV><BLOCKQUOTECLASS="note"><PCLASS="para"><STRONG>NOTE:</STRONG> Although this chapter mentions aspects of cryptography&nbsp;- cryptographyis the basis for many of the authentication mechanisms described inthis book&nbsp;- we do not attempt to discuss cryptography itself here inany depth. There are many excellent books on this broad and complextopic, and we can't hope to do justice to the topic in a few pageshere, where our focus is practical, rather than theoretical. You willbe better served by referring to a book such as Bruce Schneier's<EMCLASS="emphasis">Applied Cryptography</EM> for a definitivetreatment. (See <ACLASS="xref"HREF="appa_01.htm"TITLE="Resources">Appendix A</A> for information.)</P></BLOCKQUOTE><DIVCLASS="sect1"><H2CLASS="sect1"><ACLASS="title"NAME="FIRE-10-S1-1">10.1 Risks of Using Inbound Services</A></H2><PCLASS="para">Inbound services pose a number of security risks. In this section, wefocus on Telnet as an example, but the same problems, principles, andsolutions apply to other authenticated services (such as nonanonymous<SPANCLASS="acronym">FTP</SPAN>) as well.</P><PCLASS="para">There are three principal risks associated with allowing inboundservices:<DLCLASS="variablelist"><DTCLASS="term"><EMCLASS="emphasis">Hijacking</EM></DT><DDCLASS="listitem"><PCLASS="para">Having someone steal a connection after the user hasauthenticated himself or herself to your system.</P></DD><DTCLASS="term"><EMCLASS="emphasis">Packet sniffing</EM></DT><DDCLASS="listitem"><PCLASS="para">Having someone read confidential data as itpasses across the network, without interfering with the connectionitself.</P></DD><DTCLASS="term"><EMCLASS="emphasis">False authentication</EM></DT><DDCLASS="listitem"><PCLASS="para">Having someone who is not a valid userconvince your system he or she <EMCLASS="emphasis">is</EM> a valid user.</P></DD></DL></P><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="FIRE-10-S2-1">10.1.1 Hijacking</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="CH10HI"></A><ACLASS="indexterm"NAME="CH10INCHI"></A><ACLASS="indexterm"NAME="CH10MACHHI"></A><ACLASS="indexterm"NAME="CH10REMHI"></A><EMCLASS="emphasis">Hijacking</EM> attacks allow an attacker to take overan open terminal or login session from a user who has beenauthenticated by the system. Hijacking attacks generally take place ona remote computer, although it is sometimes possible to hijack aconnection from a computer on the route between the remote computerand your local computer.</P><PCLASS="para">How can you protect yourself from hijacking attacks on the remotecomputer? The only way is to allow connections only from remotecomputers whose security you trust; ideally, these computers should beat least as secure as your own. You can apply this kind ofrestriction by using either packet filters or modified servers. Packetfilters are easier to apply to a collection of systems, but modifiedservers on individual systems allow you more flexibility. For example,a modified <SPANCLASS="acronym">FTP</SPAN> server might allow anonymous<SPANCLASS="acronym">FTP</SPAN> from any host, but authenticated<SPANCLASS="acronym">FTP</SPAN> only from specified hosts. You can't get thiskind of control from packet filtering. Connection control at the hostlevel is available from wrappers in the <SPANCLASS="acronym">TIS FWTK</SPAN> (the <EMCLASS="emphasis">netacl </EM>program) or Wietse Venema's<SPANCLASS="acronym">TCP</SPAN> Wrapper; these may be easier to configure thanpacket filters, but provide the same level of discrimination&nbsp;- by hostonly.</P><PCLASS="para">Hijacking by intermediate sites can be avoided using end-to-endencryption. (See the discussion of network-level encryption later inthis chapter.) If you use end-to-end encryption, intermediate siteswon't be able to encrypt the data stream properly (because they don'tknow the appropriate key), and therefore won't be able to hijacksessions traversing them.</P><PCLASS="para">Hijacking is a fairly technical attack. The overall risk to anorganization from hijacking attacks is probably pretty small. Mostsites choose to accept this small risk and allow some accounts toaccess systems from anywhere on the Internet. You may decide thathijacking is an acceptable risk for your own organization,particularly if you are able to minimize the number of accounts thathave full access and the time they spend logged in remotely. However,you probably do not want to allow hundreds of people to log in fromanywhere on the Internet. Similarly, you do not want to allow usersto log in consistently from particular remote sites without takingspecial precautions.<ACLASS="indexterm"NAME="AUTOID-20272"></A><ACLASS="indexterm"NAME="AUTOID-20273"></A><ACLASS="indexterm"NAME="AUTOID-20274"></A><ACLASS="indexterm"NAME="AUTOID-20275"></A></P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="FIRE-10-S2-2">10.1.2 Packet Sniffing</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-20279"></A><ACLASS="indexterm"NAME="AUTOID-20282"></A>Attackers may not need to hijack a connection in order to get theinformation you want to keep secret. By simply watching packetspass&nbsp;- anywhere between the remote site and your site&nbsp;- they can see anyinformation that is being transferred. <EMCLASS="emphasis">Packetsniffing </EM>programs automate this watching of packets.</P><PCLASS="para">Sniffers may go after passwords or data. There are different risksassociated with each type of attack. Protecting your passwords againstsniffing is easy: use one of the several mechanisms described later inthis chapter to use nonreusable passwords. With nonreusablepasswords, it doesn't matter if the password is captured by a sniffer;it's of no use to them, because it cannot be reused.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-20287"></A>Protecting your data against sniffers is more difficult. You couldencrypt the data at your site if you always knew in advance which datato encrypt, and if you could rely on the remote site to have theappropriate decryption programs. It isn't safe for a user to ask fordata to be encrypted while the user is logged in across the network;the sniffer will see the commands issued by the user (perhaps even thekey used for encryption), and may be able to use that information todecrypt the data. If the user doesn't provide a key directly, thesystem has to somehow use a stored key, which might be compromised inother ways (such as a break-in to the system doing the encryption).</P><PCLASS="para">Unfortunately, encryption in advance is not practical. It mayserve if you need to transfer files occasionally, but it isn'tgoing to provide any kind of meaningful connection. In order to preservedata confidentiality for real interactive access, you'll need end-to-endencryption. Most end-to-end encryption systems require advancecoordination between the two ends in order to set the system up. If youhave ongoing sensitive interactions with particular sites, however, itmay be worth the effort.</P><PCLASS="para">As we've described for hijacking, if only a small number of people froma site are doing occasional work from random hosts over the Internet,most organizations are willing to accept the relatively small riskassociated with the sniffing of data. However, you need to make surethat nobody at your site purposefully accesses confidential informationacross the Internet without taking precautions. Moreover, you certainlydo not want to set up situations in which confidential informationconsistently crosses the Internet unencrypted. For example, you wouldnot want a human resources person to work from home on your unencryptedpersonnel files across the Internet.</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="FIRE-10-S2-3">10.1.3 False Authentication</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-20295"></A><ACLASS="indexterm"NAME="AUTOID-20298"></A>The third main risk to inbound services is <EMCLASS="emphasis">falseauthentication</EM>: the subversion of the authentication thatyou require of your users, so that an attacker can successfullymasquerade as one of your users.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-20302"></A>In most cases, if you have a secret you want to pass across the network,you can encrypt the secret and pass it that way. There is onecase in which the encryption solution does not work, and that isthe case in which information does not have to be understood to be used.For instance, encrypting passwords will not work,because an attacker who is using packet sniffing can simply interceptand resend the encrypted password without having to decrypt it. (This iscalled a <EMCLASS="emphasis">playback attack</EM>, because the attackerrecords an interaction and plays it back later.) Therefore,dealing with authentication across the Internet requires something morecomplex than encrypting passwords. What you need is anauthentication method where the data that passes across the network isnonreusable, so an attacker can't capture it and play it back.</P><PCLASS="para">The next section describes authentication and how it works. As weexplain there, there are many types of authentication methods, some moresecure than others. </P></DIV></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch09_02.htm"TITLE="9.2 Screened Host Architecture"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 9.2 Screened Host Architecture"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="Building Internet Firewalls"><IMGSRC="../gifs/txthome.gif"ALT="Building Internet Firewalls"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch10_02.htm"TITLE="10.2 What Is Authentication?"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 10.2 What Is Authentication?"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">9.2 Screened Host Architecture</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_a.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">10.2 What Is Authentication?</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><PCLASS="nav"><FONTSIZE="-1">[ <AHREF="../index.htm"TITLE="The Networking CD Bookshelf">Library Home</A> | <AHREF="../dnsbind/index.htm"TITLE="DNS &amp; BIND">DNS &amp; BIND</A> | <AHREF="../tcpip/index.htm"TITLE="TCP/IP Network Administration">TCP/IP</A> | <AHREF="../sendmail/index.htm"TITLE="sendmail">sendmail</A> | <AHREF="../smdref/index.htm"TITLE="sendmail Desktop Reference">sendmail Reference</A> | <AHREF="index.htm"TITLE="Building Internet Firewalls">Firewalls</A> | <AHREF="../puis/index.htm"TITLE="Practical UNIX &amp; Internet Security">Practical Security</A> ]</FONT></P></DIV></BODY></HTML>