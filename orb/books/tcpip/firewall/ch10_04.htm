<HTML><HEAD><TITLE>[Chapter 10] 10.4 Complete Authentication Systems</TITLE><METANAME="DC.title"CONTENT="Building Internet Firewalls"><METANAME="DC.creator"CONTENT="D. Brent Chapman &amp; Elizabeth D. Zwicky"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1999-02-04T00:28:45Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-124-0"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch10_01.htm"TITLE="10. Authentication and Inbound Services"><LINKREL="prev"HREF="ch10_03.htm"TITLE="10.3 Authentication Mechanisms"><LINKREL="next"HREF="ch10_05.htm"TITLE="10.5 Network-Level Encryption"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="Building Internet Firewalls"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,65"HREF="index.htm"ALT="Building Internet Firewalls"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/fsrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch10_03.htm"TITLE="10.3 Authentication Mechanisms"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 10.3 Authentication Mechanisms"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 10<BR>Authentication and InboundServices</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch10_05.htm"TITLE="10.5 Network-Level Encryption"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 10.5 Network-Level Encryption"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="FIRE-10-S1-4">10.4 Complete AuthenticationSystems</A></H2><PCLASS="para"><ACLASS="indexterm"NAME="CH10AUTHCOMP"></A>There are two common freely available systems that allow you to avoidsending reusable passwords over the Internet. These are Kerberos andthe authentication server portion of the <SPANCLASS="acronym">TIS FWTK</SPAN>.The number of commercial authentication solutions is growing as well.</P><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="FIRE-10-S2-10">10.4.1 Kerberos</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="CH10K"></A>Kerberos was developed at <SPANCLASS="acronym">MIT</SPAN> by Project Athena(the same folks who developed the X Window System). It is designed toprovide authentication and encryption services through modifiedversions of standard clients and servers, e.g., Telnet clientsand servers.</P><PCLASS="para">Kerberos provides strong authentication in a distributed environment,and it is widely available. Some vendors provide Kerberos support withtheir operating systems; <SPANCLASS="acronym">MIT</SPAN> has freely availableimplementations for many versions of <SPANCLASS="acronym">UNIX</SPAN>; and thecode is freely available if you wish it to port it to an operatingsystem that does not yet have an implementation.</P><PCLASS="para">Kerberos isn't an ideal solution, though. There are three majorproblems with it: <ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para"> Kerberos requires custom client and serversoftware. As with proxy systems, this limits your choice of client andserver software. If the software you want to use doesn't supportKerberos, and if you can't modify it to support Kerberos (because thesource code isn't available, or because you simply don't have the timeor expertise required), you're out of luck, and you won't be able touse it. Unlike proxy systems, Kerberos does not let you use customuser procedures to make Kerberos work with arbitrary client/serversoftware. </P></LI><LICLASS="listitem"><PCLASS="para">Kerberos tends to be difficult to set up and manage. Unless youroperating-system vendor supports Kerberos (or you can find athird-party vendor who supports it for your platform), you'll have toobtain the Kerberos software and integrate it into your environmentyourself. This is a nontrivial task, typically much more difficultthan the integration work required for most other solutions outlinedin this book. Once Kerberos is set up, management of it providesanother ongoing challenge. Kerberos requires a dedicated, carefullysecured server, which is accessible to all clients.</P></LI><LICLASS="listitem"><PCLASS="para">Kerberos doesn't scale up well beyond a single administrativedomain (a single set of machines managed in common, which share usernames and passwords). Each Kerberos realm (the Kerberos term for asingle administrative domain) is independent. To do inter-realmauthentication, the Kerberos servers in the two realms essentially haveto trust each other, and have to share a key known only to each other. A separate key is required for each pair of realms that are going to dointer-realm authentication; as the number of realms involved increases,the number of keys required increases geometrically, to the point whereit quickly becomes unmanageable.</P></LI></UL></P><PCLASS="para">Kerberos shows great promise for the future, particularly if moresites adopt the Distributed Computing Environment(<SPANCLASS="acronym">DCE</SPAN>), which uses Kerberos as the basis of itssecurity. It could very well become the de facto standard mechanismfor authentication on the Internet sometime in the next decade orso. In order for that to happen, though, it will need wider supportfrom developers and vendors, and easier setup andmaintenance. Meanwhile, it will probably only be used withinindividual sites.</P><PCLASS="para">Right now, most sites don't have Kerberos clients available, so even ifyou install Kerberos versions of your servers, your users will not beable to log in from arbitrary other sites, because it requires modifiedsoftware on both ends.<ACLASS="indexterm"NAME="AUTOID-20584"></A></P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="FIRE-10-S2-11">10.4.2 <SPANCLASS="acronym">TIS FWTK</SPAN> Authentication Server</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="CH10TISFWTKAUTH"></A><ACLASS="indexterm"NAME="CH10AUTHSERV"></A>The authentication server in the <SPANCLASS="acronym">TIS FWTK</SPAN> isanother commonly used solution for authenticating users coming in fromthe Internet. The server implements a variety of authenticationmechanisms, such as standard reusable passwords (not recommended),S/Key, Security Dynamics Secur<SPANCLASS="acronym">ID</SPAN> cards, and DigitalPathways <SPANCLASS="acronym">SNK</SPAN>-004 cards. In addition, the server ismodular and extensible, and is designed so that new authenticationmechanisms can easily be integrated.</P><PCLASS="para">Traditionally, programs wishing to authenticate a user (such as the<EMCLASS="emphasis">login</EM> program, or the <EMCLASS="emphasis">ftpd</EM>daemon) have had to know <EMCLASS="emphasis">how</EM> to authenticate auser; they have had to understand and implement whateverauthentication method or methods were to be used. In a<SPANCLASS="acronym">UNIX</SPAN> system, this means that these programs have todo all of the following to authenticate a user:<OLCLASS="orderedlist"><LICLASS="listitem"><PCLASS="para">Prompt the user for a login name.</P></LI><LICLASS="listitem"><PCLASS="para">Look up that login name and obtain its encrypted password.</P></LI><LICLASS="listitem"><PCLASS="para">Prompt the user for a password.</P></LI><LICLASS="listitem"><PCLASS="para">Use the user-provided password and the first two characters fromthe encrypted password to encrypt a known string (eight bytes of nulls).</P></LI><LICLASS="listitem"><PCLASS="para">Check to see if the result of this encryption matches theencrypted password for the user.</P></LI></OL></P><PCLASS="para">If you want to add a second authentication mechanism (for example, theS/Key mechanism, which we discussed earlier), you have to modify allof these programs to understand this second mechanism as well as, orinstead of, the standard <SPANCLASS="acronym">UNIX</SPAN> passwordmechanism. And if you later want to add a third authenticationmechanism (for example, support for the SecurID cards), you have tomodify the programs yet again; and so it would go for each additionalauthentication mechanism. Each time you modify these programs, you'remaking them bigger and more complex, and increasing the chances thatyou've introduced some kind of bug that's going to result in asecurity problem. (This is a serious risk because these are verysecurity-critical programs&nbsp;- they control access to your system.)</P><PCLASS="para">The <SPANCLASS="acronym">TIS FWTK</SPAN> authentication server takes adifferent approach. With it, you modify all the authenticatingprograms (e.g., <EMCLASS="emphasis">login</EM>, <EMCLASS="emphasis">ftpd</EM>)once, to make them talk to the authentication server instead of doingthe authentication themselves. All of the details of theauthentication mechanism&nbsp;- e.g., what to prompt the user with, how tovalidate the user's response, etc.&nbsp;- are then handled by theauthentication server. When you want to add or modify authenticationmethods, you do so by changing the authentication server (which ismodular and designed to accommodate such changes), not by changing theindividual authenticating programs.</P><PCLASS="para">A single authentication server can handle any number of clientmachines and programs, and any number of different authenticationmethods; different users within the same server can use differentauthentication methods. For example, some might use S/Key while somemight use the Digital Pathways <SPANCLASS="acronym">SNK</SPAN>-004 cards.</P><PCLASS="para">When a client program (such as <EMCLASS="emphasis">login</EM>, or<EMCLASS="emphasis">ftpd</EM>) wishes to authenticate someone using the<SPANCLASS="acronym">TIS FWTK</SPAN> authenticationserver, it has to go through the following steps:<OLCLASS="orderedlist"><LICLASS="listitem"><PCLASS="para">Prompt the user for a login name.</P></LI><LICLASS="listitem"><PCLASS="para">Contact the authentication server and tell it who is trying to login.</P></LI><LICLASS="listitem"><PCLASS="para">Receive a response from the authentication server that tells itwhat to prompt the user with.</P></LI><LICLASS="listitem"><PCLASS="para">Display the prompt specified by the authentication server.</P></LI><LICLASS="listitem"><PCLASS="para">Collect the user's response and send it to the authenticationserver.</P></LI><LICLASS="listitem"><PCLASS="para">Receive either an <SPANCLASS="acronym">OK</SPAN> or an error message from theauthentication server.</P></LI><LICLASS="listitem"><PCLASS="para">Allow the user access (if <SPANCLASS="acronym">OK</SPAN>) or display the errormessage.</P></LI></OL></P><PCLASS="para">This whole process is carried out with a single <SPANCLASS="acronym">TCP</SPAN>connection between the client and the authentication server, so thatthe server knows it's talking to the same client and the client knowsit's talking to the same server throughout the authentication process.</P><PCLASS="para">The authentication server consults its databases to determine how toauthenticate that user and determines the appropriate prompt for theauthentication mechanism for that user. For example:<ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">If traditional passwords are being used as the authenticationmethod, the prompt will be a simple &quot;Password:&quot; prompt.</P></LI><LICLASS="listitem"><PCLASS="para">If the authentication method is S/Key,<EMCLASS="emphasis"> </EM>theprompt will be the number of the key the user is to respond with. </P></LI><LICLASS="listitem"><PCLASS="para">If the authentication method is the Digital Pathways<SPANCLASS="acronym">SKN</SPAN>-004 card, the prompt will be a randomlygenerated challenge number.</P></LI></UL></P><PCLASS="para"><ACLASS="xref"HREF="ch10_04.htm#FIRE-10-FIG-3"TITLE="How the TIS FWTK authentication server works">Figure 10.3</A> shows how the <SPANCLASS="acronym">TIS FWTK</SPAN> authentication server works.</P><H4CLASS="figure"><ACLASS="title"NAME="FIRE-10-FIG-3">Figure 10.3: How the <SPANCLASS="acronym">TIS FWTK</SPAN> authentication serverworks</A></H4><IMGCLASS="graphic"SRC="figs/fire1003.gif"ALT="Figure 10.3"><PCLASS="para">The <SPANCLASS="acronym">TIS FWTK</SPAN> includes a numberof programs (such as <EMCLASS="emphasis">ftpd</EM>) that, in addition toother modifications and enhancements for security, have already beenmodified to use the authentication server. Converting an existingprogram to use the authentication server, rather than traditional<SPANCLASS="acronym">UNIX</SPAN> passwords, is pretty straightforward. Ittypically involves only 20 or so lines of C code, examples of whichare given in the toolkit.</P><PCLASS="para">The toolkit also includes some programs to support binary-only systemswhere you don't have the source to modify. For example, for systems inwhich you don't have the source code to the <EMCLASS="emphasis">login</EM>program available for modification, the toolkit includes a program you can use as the user's shell (which is specified for each user in the<EMCLASS="emphasis">/etc/passwd</EM> file) instead of one of the normalshells (e.g., <EMCLASS="emphasis">/bin/csh</EM> or<EMCLASS="emphasis">/bin/sh</EM>) This replacement shell authenticates theuser with the authentication server, and, if the user passes, starts hisreal shell.</P><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="FIRE-10-S3-1">10.4.2.1 Problems with the authentication server</A></H4><PCLASS="para">The major problem in running an authentication server is getting securecommunication between the client and the server. An attacker who canconvincingly pretend to be the authentication server can authenticate asanybody.</P><PCLASS="para">Some configurations may have additional problems; for example, usingshell replacement can produce problems, because not all programs dealwell with situations in which a user's shell environment variable andthe entry for that user in the <EMCLASS="emphasis">/etc/passwd</EM> filedo not match.<ACLASS="indexterm"NAME="AUTOID-20676"></A><ACLASS="indexterm"NAME="AUTOID-20677"></A></P></DIV></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="FIRE-10-S2-12">10.4.3 Commercial Solutions</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-20681"></A><ACLASS="indexterm"NAME="AUTOID-20684"></A>Many commercial systems offering to do authentication are now on themarket. In particular, &quot;single sign-on&quot; systems are a hottopic right now. These are systems that supposedly let a user log inonce (presumably once each day), and then automatically log the user into whatever other systems that user needs to access, without the userhaving to log in to each system individually. </P><PCLASS="para">There are a variety of issues you need to think about when you areconsidering a commercial solution; the primary considerations areavailability, security, and cost.</P><DLCLASS="variablelist"><DTCLASS="term"><EMCLASS="emphasis">Availability</EM></DT><DDCLASS="listitem"><PCLASS="para">This is a simple consideration. Is the system available for all theplatforms and programs you need to use it for? Many systems addressonly certain types of machines (e.g., <SPANCLASS="acronym">PC</SPAN>s or<SPANCLASS="acronym">UNIX</SPAN> systems), and many handle only certain typesof access (e.g., login but not <SPANCLASS="acronym">FTP</SPAN> access).</P></DD><DTCLASS="term"><EMCLASS="emphasis">Security</EM></DT><DDCLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-20701"></A>This consideration is tougher to get a handle on. There are severalthings you need to think about. First, how hard is the system goingto be to compromise? Second, if it <EMCLASS="emphasis">is</EM>compromised, what implications does that have for the rest of yoursecurity?</P><PCLASS="para">Many of these commercial systems use proprietary algorithms that arenot available for client or academic scrutiny. Unfortunately,there are a lot more ways to do these algorithms wrong than to do themright. Without an independent analysis of the system, you have torely on the vendor's word that they got it right.</P><PCLASS="para">Other systems build their single sign-on capability on top of thestandard <SPANCLASS="acronym">UNIX</SPAN> <EMCLASS="emphasis">.rhosts</EM>mechanisms used by the so-called Berkeley &quot;r&quot; commands(<EMCLASS="emphasis">rsh, rlogin rcp, rdist, </EM>etc.). These commandsare notoriously easy for an attacker to exploit because they create aweb of trust among machines. (The weaknesses and vulnerabilities ofthese commands are discussed in <ACLASS="xref"HREF="ch08_01.htm"TITLE="Configuring Internet Services">Chapter 8</A>.)</P></DD><DTCLASS="term"><EMCLASS="emphasis">Cost</EM></DT><DDCLASS="listitem"><PCLASS="para">This consideration is almost always an issue. What will it cost todeploy this system in your environment to meet your needs? Some costsare one-time capital expenses; e.g., some systems require adedicated piece of hardware, essentially a single-purpose<SPANCLASS="acronym">PC</SPAN>, to generate the challenges and check theresponses. Others are per-user expenses; for example, some systemsrequire smart cards for all your users. Still others are licensing orsupport expenses. The systems are often priced depending on the numberof users you'll support; systems to support more users obviously costmore.</P></DD></DL><PCLASS="para">The only commercial authentication system that is used extensively onthe Internet is the Secur<SPANCLASS="acronym">ID</SPAN> system from SecurityDynamics discussed earlier. A variety of commercial products,particularly terminal servers, support the system.[3]</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[3] Apparently because of aggressive marketing and partnering by SecurityDynamics, and not because of any inherent advantage of the product.</P></BLOCKQUOTE><ACLASS="indexterm"NAME="AUTOID-20721"></A></DIV><ACLASS="indexterm"NAME="AUTOID-20722"></A></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch10_03.htm"TITLE="10.3 Authentication Mechanisms"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 10.3 Authentication Mechanisms"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="Building Internet Firewalls"><IMGSRC="../gifs/txthome.gif"ALT="Building Internet Firewalls"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch10_05.htm"TITLE="10.5 Network-Level Encryption"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 10.5 Network-Level Encryption"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">10.3 Authentication Mechanisms</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_a.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">10.5 Network-Level Encryption</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><PCLASS="nav"><FONTSIZE="-1">[ <AHREF="../index.htm"TITLE="The Networking CD Bookshelf">Library Home</A> | <AHREF="../dnsbind/index.htm"TITLE="DNS &amp; BIND">DNS &amp; BIND</A> | <AHREF="../tcpip/index.htm"TITLE="TCP/IP Network Administration">TCP/IP</A> | <AHREF="../sendmail/index.htm"TITLE="sendmail">sendmail</A> | <AHREF="../smdref/index.htm"TITLE="sendmail Desktop Reference">sendmail Reference</A> | <AHREF="index.htm"TITLE="Building Internet Firewalls">Firewalls</A> | <AHREF="../puis/index.htm"TITLE="Practical UNIX &amp; Internet Security">Practical Security</A> ]</FONT></P></DIV></BODY></HTML>