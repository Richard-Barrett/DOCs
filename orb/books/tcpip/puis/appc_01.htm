<HTML><HEAD><TITLE>[Appendix C] UNIX Processes</TITLE><METANAME="DC.title"CONTENT="Practical UNIX &amp; Internet Security"><METANAME="DC.creator"CONTENT="Simson Garfinkel &amp; Gene Spafford"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1999-02-04T00:22:03Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-148-8"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="part07.htm"TITLE="VII. Appendixes"><LINKREL="prev"HREF="appb_03.htm"TITLE="B.3 SUID and SGID Files"><LINKREL="next"HREF="appc_02.htm"TITLE="C.2 Creating Processes"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="Practical UNIX &amp; Internet Security"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,65"HREF="index.htm"ALT="Practical UNIX &amp; Internet Security"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="appb_03.htm"TITLE="B.3 SUID and SGID Files"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: B.3 SUID and SGID Files"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Appendix C</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="appc_02.htm"TITLE="C.2 Creating Processes"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: C.2 Creating Processes"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="APPENDIX"><H1CLASS="appendix"><ACLASS="title"NAME="PUIS-APP-C">C. UNIX Processes</A></H1><DIVCLASS="htmltoc"><P><B>Contents:</B><BR><ACLASS="SECT1"HREF="#PUIS-APP-C-SECT-1"TITLE="C.1 About Processes">About Processes</A><BR><ACLASS="SECT1"HREF="appc_02.htm"TITLE="C.2 Creating Processes">Creating Processes</A><BR><ACLASS="SECT1"HREF="appc_03.htm"TITLE="C.3 Signals">Signals</A><BR><ACLASS="SECT1"HREF="appc_04.htm"TITLE="C.4 The kill Command">The kill Command</A><BR><ACLASS="SECT1"HREF="appc_05.htm"TITLE="C.5 Starting Up UNIX and Logging In">Starting Up UNIX and Logging In</A></P><P></P></DIV><PCLASS="para">This appendix provides technical background on how the <SPANCLASS="acronym">UNIX</SPAN>operating system manages processes. The information presentedin this chapter is important to understand if you are concernedwith the details of system administration or are simply interestedin <SPANCLASS="acronym">UNIX</SPAN> internals, but we felt that it was tootechnical to present early in this book.</P><DIVCLASS="sect1"><H2CLASS="sect1"><ACLASS="title"NAME="PUIS-APP-C-SECT-1">C.1 About Processes</A></H2><PCLASS="para"><SPANCLASS="acronym">UNIX</SPAN><ACLASS="indexterm"NAME="AUTOID-38874"></A>is a multitasking operating system. Every task that the computeris performing at any moment&nbsp;- every user running a word processorprogram, for example&nbsp;- has a <EMCLASS="emphasis">process</EM>.The process is the operating system's fundamental toolfor controlling the computer.</P><PCLASS="para">Nearly everything that <SPANCLASS="acronym">UNIX</SPAN> does is donewith a process. One process displays the word <EMCLASS="emphasis">login:</EM> on the user'sterminal and reads the characters that the user types to log intothe system. Another process controls the line printer. On a workstation,a special process called the &quot;window server&quot; displaystext in windows on the screen. Another process called the &quot;windowmanager&quot; lets the user move those windows around.</P><PCLASS="para">At any given moment, the average <SPANCLASS="acronym">UNIX</SPAN> operatingsystem might be running anywhere from ten to several hundred differentprocesses; large mainframes might be running several thousand. <SPANCLASS="acronym">UNIX</SPAN>runs at least one process for every user who is logged in, anotherprocess for every program that every user is running, and anotherprocess for every hard-wired terminal that is waiting for a newuser to log in. <SPANCLASS="acronym">UNIX</SPAN> also uses a variety of specialprocesses for system functions.</P><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-APP-C-SECT-1.1">C.1.1 Processes and Programs</A></H3><PCLASS="para">A process is an abstraction of control that has certain specialproperties associated with it. These include a private stack, valuesof registers, a program counter, an address space containing programcode and data, and so on. The underlying hardware and operatingsystem software manage the contents of registers in such a way thateach process views the computer's resources as its &quot;own&quot;while it is running. With a single processor, only one process ata time is actually running, with the operating system swapping processesfrom time to time to give the illusion that they are all runningconcurrently. Multi-processor computers can naturally run severalprocesses with true synchronicity.</P><PCLASS="para">Every <SPANCLASS="acronym">UNIX</SPAN> process has a program that itis running, even if that program is part of the <SPANCLASS="acronym">UNIX</SPAN>operating system (a special program). Programs are usually referredto by the names of the files in which they are kept. For example,the program that lists files is called <ICLASS="filename">/bin/ls</I>and the program that runs the line printer may be called <ICLASS="filename">/usr/lib/lpd.</I></P><PCLASS="para">A process can run a program that is not stored in a file ineither of two ways:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">The program's file can bedeleted after its process starts up. In this case, the process'sprogram is really stored in a file, but the file no longer has aname and cannot be accessed by any other processes. The file isdeleted automatically when the process exits or runs another program.</P></LI><LICLASS="listitem"><PCLASS="para">The process may have been specially created in thecomputer's memory. This is the method that the <SPANCLASS="acronym">UNIX</SPAN>kernel uses to begin the first process when the operating systemstarts up. This usually happens only at start-up, but some programminglanguages such as <SPANCLASS="acronym">LISP</SPAN> can load additional objectmodules as they are running.</P></LI></UL><PCLASS="para">Normally, processes run a single program and then exit. However,a program can cause another program to be run. In this case, thesame process starts running another program.</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-APP-C-SECT-1.2">C.1.2 The ps Command</A></H3><PCLASS="para">The <ACLASS="indexterm"NAME="AUTOID-38904"></A><KBDCLASS="command">ps</KBD> commandgives you a snapshot of all of the processes running at any givenmoment. <KBDCLASS="command">ps</KBD> tells you who is running programs on your system, aswell as which programs the operating system is spending its timeexecuting.</P><PCLASS="para">Most system administrators routinely use the <KBDCLASS="command">ps</KBD> command tosee why their computers are running so slowly; system administratorsshould also regularly use the command to look for suspicious processes.(Suspicious processes are any processes that you don'texpect to be running. Methods of identifying suspicious processesare described in detail in earlier chapters.)</P><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="PUIS-APP-C-SECT-1.2.1">C.1.2.1 Listing processes with systems derived from SystemV</A></H4><PCLASS="para">The <ACLASS="indexterm"NAME="AUTOID-38913"></A>SystemV <KBDCLASS="command">ps</KBD> command will normally only print the processes that are associatedwith the terminal on which the program is being run. To list allof the processes that are running on your computer, you must runthe program with the <ICLASS="filename">-ef</I> options. The options are:</P><TABLECLASS="informaltable"><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Option</P></TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Effect</P></TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">e</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">List all processes</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">f</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Produce a full listing</P></TD></TR></TBODY></TABLE><PCLASS="para">For example:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">sun.vineyard.net% /bin/ps -ef     UID   PID  PPID  C    STIME TTY      TIME COMD    root     0     0 64   Nov 16 ?        0:01 sched    root     1     0 80   Nov 16 ?        9:56 /etc/init -    root     2     0 80   Nov 16 ?        0:10 pageout    root     3     0 80   Nov 16 ?       78:20 fsflush    root   227     1 24   Nov 16 ?        0:00 /usr/lib/saf/sac -t 300    root   269     1 18   Nov 16 console  0:00 /usr/lib/saf/ttymon -g -    root    97     1 80   Nov 16 ?        1:02 /usr/sbin/rpcbind    root   208     1 80   Nov 16 ?        0:01 /usr/dt/bin/dtlogin    root    99     1 21   Nov 16 ?        0:00 /usr/sbin/keyserv    root   117     1 12   Nov 16 ?        0:00 /usr/lib/nfs/statd    root   105     1 12   Nov 16 ?        0:00 /usr/sbin/kerbd    root   119     1 27   Nov 16 ?        0:00 /usr/lib/nfs/lockd    root   138     1 12   Nov 16 ?        0:00 /usr/lib/autofs/automoun    root   162     1 62   Nov 16 ?        0:01 /usr/lib/lpsched    root   142     1 41   Nov 16 ?        0:00 /usr/sbin/syslogd    root   152     1 80   Nov 16 ?        0:07 /usr/sbin/cron    root   169   162  8   Nov 16 ?        0:00 lpNet    root   172     1 80   Nov 16 ?        0:02 /usr/lib/sendmail -q1h    root   199     1 80   Nov 16 ?        0:02 /usr/sbin/vold    root   180     1 80   Nov 16 ?        0:04 /usr/lib/utmpd    root   234   227 31   Nov 16 ?        0:00 /usr/lib/saf/listen tcp simsong 14670 14563 13 12:22:12 pts/11   0:00 rlogin next    root   235   227 45   Nov 16 ?        0:00 /usr/lib/saf/ttymon simsong 14673 14535 34 12:23:06 pts/5    0:00 rlogin next simsong 14509     1 80 11:32:43 ?        0:05 /usr/dt/bin/dsdm simsong 14528 14520 80 11:32:51 ?        0:18 dtwm simsong 14535 14533 66 11:33:04 pts/5    0:01 /usr/local/bin/tcsh simsong 14529 14520 80 11:32:56 ?        0:03 dtfile -session dta003TF    root 14467     1 11 11:32:23 ?        0:00 /usr/openwin/bin/fbconso simsong 14635 14533 80 11:48:18 pts/12   0:01 /usr/local/bin/tcsh simsong 14728 14727 65 15:29:20 pts/9    0:01 rlogin next    root   332   114 80   Nov 16 ?        0:02 /usr/dt/bin/rpc.ttdbserv    root 14086   208 80   Dec 01 ?        8:26 /usr/openwin/bin/Xsun :0 simsong 13121 13098 80   Nov 29 pts/6    0:01 /usr/local/bin/tcsh simsong 15074 14635 20 10:48:34 pts/12   0:00 /bin/ps -ef</PRE></BLOCKQUOTE><PCLASS="para"><ACLASS="xref"HREF="appc_01.htm#PUIS-APP-C-TAB-1"TITLE="Feild in ps Output (System V)">Table 27.2</A> describes the meaning of each field in this output.</P><PCLASS="para"><EMCLASS="emphasis">Field in ps Output (System V)</EM></P><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="PUIS-APP-C-TAB-1">Table C.1: Feild in ps Output (System V)</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Field</P></TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Meaning</P></TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">UID</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">The username of the person running thecommand</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">PID</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">The process's identificationnumber (see next section)</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">PPID</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">The process ID of the process'sparent process</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">C</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">The processor utilization; an indicationof how much CPU time the process is using at the moment</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">STIME</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">The time that the process started executing</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">TTY</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">The controlling terminal for the process</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">TIME</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">The total amount of CPU time that theprocess has used</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">COMD</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">The command that was used to start theprocess</P></TD></TR></TBODY></TABLE></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="PUIS-APP-C-SECT-1.2.2">C.1.2.2 Listing processes with Berkeley-derived versions ofUNIX</A></H4><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-38998"></A>With Berkeley<SPANCLASS="acronym">UNIX</SPAN>, you can use the command:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <BCLASS="emphasis.bold">ps -auxww</B>  </PRE></BLOCKQUOTE><PCLASS="para">to display detailed information about every process runningon your computer. The options specified in this command are:</P><TABLECLASS="informaltable"><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Option</P></TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Effect</P></TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">a</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">List all processes</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">u</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Display the information in a user-orientedstyle</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">x</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Include information on processes thatdo not have controlling <KBDCLASS="command">ttys</KBD></P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">ww</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Include the complete command lines, evenif they run past 132 columns</P></TD></TR></TBODY></TABLE><PCLASS="para">For example:[1]</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[1] Many Berkeley-derived versionsalso show a start time (START) between STAT and TIME.</P></BLOCKQUOTE><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <BCLASS="emphasis.bold">ps -auxww</B>USER       PID %CPU %MEM   SZ  RSS TT STAT   TIME COMMANDsimsong   1996 62.6  0.6 1136 1000 q8 R      0:02 ps auxwwroot       111  0.0  0.0   32   16 ?  I      1:10 /etc/biod 4daemon     115  0.0  0.1  164  148 ?  S      2:06 /etc/syslogroot       103  0.0  0.1  140  116 ?  I      0:44 /etc/portmaproot       116  0.0  0.5  860  832 ?  I     12:24 /etc/mountd -i -sroot       191  0.0  0.2  384  352 ?  I      0:30 /usr/etc/bin/lpdroot        73  0.0  0.3  528  484 ?  S &lt;    7:31 /usr/etc/ntpd -nroot         4  0.0  0.0    0    0 ?  I      0:00 tpathdroot         3  0.0  0.0    0    0 ?  R      0:00  idleprocroot         2  0.0  0.0 4096    0 ?  D      0:00  pagedaemonroot       239  0.0  0.1  180  156 co I      0:00  std.9600 console root         0  0.0  0.0    0    0 ?  D      0:08  swapperroot       178  0.0  0.3  700  616 ?  I      6:31 /etc/snmpdroot       174  0.0  0.1  184  148 ?  S      5:06 /etc/inetdroot       168  0.0  0.0   56   44 ?  I      0:16 /etc/cronroot       132  0.0  0.2  452  352 co I      0:11 /usr/etc/lockdjdavis     383  0.0  0.1  176   96 p0 I      0:03 rlogin hymieishii     1985  0.0  0.1  284  152 q1 S      0:00 /usr/ucb/mail blroot     26795  0.0  0.1  128   92 ?  S      0:00 timedroot     25728  0.0  0.0  136   56 t3 I      0:00 telnetdjdavis     359  0.0  0.1  540  212 p0 I      0:00 -tcsh (tcsh)root       205  0.0  0.1  216  168 ?  I      0:04 /usr/local/cap/atiskkarahal 16296  0.0  0.4 1144  640 ?  I      0:00 emacs root       358  0.0  0.0  120   44 p0 I      0:03 rlogindroot     26568  0.0  0.0    0    0 ?  Z      0:00 &lt;exiting&gt;root     10862  0.0  0.1  376  112 ?  I      0:00 rshd</PRE></BLOCKQUOTE><PCLASS="para">The fields in this output are described in <ACLASS="xref"HREF="appc_01.htm#PUIS-APP-C-TAB-2"TITLE="Fields in ps Output (Berkeley-derived)">Table 27.3</A>.Individual <SPANCLASS="acronym">STAT</SPAN> characters are described in TablesC-3, C-4, and C-5.</P><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="PUIS-APP-C-TAB-2">Table C.2: Fields in ps Output (Berkeley-derived)</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Field</P></TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Meaning</P></TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">USER</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">The username of the process. If the processhas a UID (described in the next section) that does not appear in<ICLASS="filename">/etc/passwd</I>, the UID is printed instead.[2]</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">PID</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">The process's identificationnumber</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">%CPU, %MEM</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">The percentage of the system'sCPU and memory that the process is using</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">SZ</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">The amount of virtual memory that theprocess is using</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">RSS</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">The resident set size of the process&nbsp;- theamount of physical memory that the process is occupying</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">TT</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">The terminal that is controlling theprocess</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">STAT</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">A field denoting the status of the process;up to three letters (four under SunOS) are shown</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">TIME</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">CPU time used by the process</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">COMMAND</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">The name of the command (and arguments)</P></TD></TR></TBODY></TABLE><BLOCKQUOTECLASS="footnote"><PCLASS="para">[2] If this happens, follow up to be sure you don't havean intruder.</P></BLOCKQUOTE><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="PUIS-APP-C-TAB-3">Table C.3: . Runnability of Process (First Letter of STAT Field)</A></CAPTION><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Letter</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Meaning</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">R</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Actually running or runnable</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">S</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Sleeping (sleeping &gt; 20 seconds)</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">I</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Idle (sleeping &lt; 20 seconds)</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">T</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Stopped</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">H</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Halted</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">P</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">In page wait</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">D</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">In disk wait</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Z</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Zombie</P></TD></TR></TBODY></TABLE><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="PUIS-APP-C-TAB-4">Table C.4: . Whether Process Swapped (Second Letter of STATField)</A></CAPTION><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Letter</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Meaning</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">&lt;Blank&gt;</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">In core</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">W</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Swapped out</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">&gt;</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">A process that has exceeded a soft limiton memory requirements</P></TD></TR></TBODY></TABLE><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="PUIS-APP-C-TAB-5">Table C.5: . Whether Process Is running with Altered CPU Schedule(Third Letter of STAT Field)</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Letter</P></TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Meaning</P></TH></TR><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1"><PCLASS="para">N</P></TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1"><PCLASS="para">The process is running at a low priority</P></TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">#</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para"><ICLASS="filename">nice</I> (a number greater than 0).</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">&lt;</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">The process is running at a high priority.</P></TD></TR></TBODY></TABLE><PCLASS="para"></P><BLOCKQUOTECLASS="note"><PCLASS="para"><STRONG>NOTE:</STRONG> Because command arguments are stored in the process'sown memory space, a process can change what appears on its commandline. If you suspect that a process may not be what it claims tobe, type:</P></BLOCKQUOTE><BLOCKQUOTECLASS="screen"><PRECLASS="screen">	<KBDCLASS="command">%</KBD> <BCLASS="emphasis.bold">ps -c</B></PRE></BLOCKQUOTE><PCLASS="para">This causes <KBDCLASS="command">ps</KBD> to print the name of the command stored inthe kernel. This approach is substantially faster than the standard<ICLASS="filename">ps</I>, and is more suitable for use with scriptsthat run periodically. Unfortunately, the <KBDCLASS="command">ps</KBD> -c display does notinclude the arguments of each command that is running.<ACLASS="indexterm"NAME="AUTOID-39218"></A></P></DIV></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-APP-C-SECT-1.3">C.1.3 Process Properties</A></H3><PCLASS="para">The kernel maintains a set of properties for every <SPANCLASS="acronym">UNIX</SPAN>process. Most of these properties are denoted by numbers. Some ofthese numbers refer to processes, while others determine what privilegesthe processes have.</P><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="PUIS-APP-C-SECT-1.3.1">C.1.3.1 <ACLASS="indexterm"NAME="AUTOID-39226"></A>Process identificationnumbers (PID)</A></H4><PCLASS="para">Every process is assigned a unique number called the processidentifier, or <SPANCLASS="acronym">PID</SPAN>. The first process to run,called <KBDCLASS="command">init</KBD>, is given the number 1. Process numbers can range from1 to 65535.[3]When the kernel runs out of process numbers, it recycles them. Thekernel guarantees that no two <EMCLASS="emphasis">active</EM> processeswill ever have the same number.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[3] Some versions of UNIX may allow processnumbers in a range different from 1 to 65535.</P></BLOCKQUOTE></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="PUIS-APP-C-SECT-1.3.2">C.1.3.2 Process real and effective UID</A></H4><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-39237"></A><ACLASS="indexterm"NAME="AUTOID-39240"></A><ACLASS="indexterm"NAME="AUTOID-39242"></A><ACLASS="indexterm"NAME="AUTOID-39244"></A>Every<SPANCLASS="acronym">UNIX</SPAN> process has two user identifiers: a real<SPANCLASS="acronym">UID</SPAN> and an effective <SPANCLASS="acronym">UID</SPAN>.</P><PCLASS="para">The <EMCLASS="emphasis">real UID</EM> (<SPANCLASS="acronym">RUID</SPAN>) is the actual useridentifier (<SPANCLASS="acronym">UID</SPAN>) of the person who is runningthe program. It is usually the same as the <SPANCLASS="acronym">UID</SPAN>of the actual person who is logged into the computer, sitting infront of the terminal (or workstation).</P><PCLASS="para">The <EMCLASS="emphasis">effective UID</EM> (<SPANCLASS="acronym">EUID</SPAN>) identifies theactual privileges of the process that is running.</P><PCLASS="para">Normally, the real <SPANCLASS="acronym">UID</SPAN> and the effective<SPANCLASS="acronym">UID</SPAN> are the same. That is, normally you haveonly the privileges associated with your own <SPANCLASS="acronym">UID</SPAN>.Sometimes, however, the real and effective <SPANCLASS="acronym">UID</SPAN>can be different. This occurs when a user runs a special kind ofprogram, called a <SPANCLASS="acronym">SUID</SPAN> program, which is usedto accomplish a specific function (such as changing the user'spassword). <SPANCLASS="acronym">SUID</SPAN> programs are described in <ACLASS="xref"HREF="ch04_01.htm"TITLE="Users, Groups, and the Superuser">Chapter 4, <CITECLASS="chapter">Users, Groups, and the Superuser</CITE></A>.</P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="PUIS-APP-C-SECT-1.3.3">C.1.3.3 Process priority and niceness</A></H4><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-39269"></A><ACLASS="indexterm"NAME="AUTOID-39272"></A><ACLASS="indexterm"NAME="AUTOID-39274"></A>Although<SPANCLASS="acronym">UNIX</SPAN> is a multitasking operating system, mostcomputers that run <SPANCLASS="acronym">UNIX</SPAN> can run only a singleprocess at a time.[4]Every fraction of a second, the <SPANCLASS="acronym">UNIX</SPAN> operatingsystem rapidly switches between many different processes, so thateach one gets a little bit of work done within a given amount oftime. A tiny but important part of the <SPANCLASS="acronym">UNIX</SPAN> kernelcalled the <ACLASS="indexterm"NAME="AUTOID-39282"></A><ACLASS="indexterm"NAME="AUTOID-39285"></A><EMCLASS="emphasis">process scheduler</EM> decides which process is allowed to run at any given momentand how much <SPANCLASS="acronym">CPU</SPAN> time that process should get.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[4] Multiprocessor computers can runas many processes at a time as they have processors.</P></BLOCKQUOTE><PCLASS="para">To calculate which process it should run next, the schedulercomputes the <EMCLASS="emphasis">priority</EM> of every process. The process with the lowestpriority number (or the highest priority) runs. A process'spriority is determined with a complex formula that includes whatthe process is doing and how much <SPANCLASS="acronym">CPU</SPAN> time theprocess has already consumed. A special number, called the <EMCLASS="emphasis">nicenumber</EM> or simply the <EMCLASS="emphasis">nice</EM>, biases this calculation: the lower aprocess's <EMCLASS="emphasis">nice</EM> number, the higher its priority, and themore likely that it will be run.</P><PCLASS="para">On most versions of <SPANCLASS="acronym">UNIX</SPAN>, <ACLASS="indexterm"NAME="AUTOID-39298"></A><EMCLASS="emphasis">nice</EM> numbers are limited from -20 to+20. Most processes have a <EMCLASS="emphasis">nice</EM> of 0. A process with a<EMCLASS="emphasis">nice</EM> number of +19 will probably not run until the systemis almost completely idle; likewise, a process with a nice numberof -19 will probably preempt every other user process onthe system.</P><PCLASS="para">Sometimes you will want to make a process run slower. In somecases, processes take more than their &quot;fair share&quot;of the <SPANCLASS="acronym">CPU</SPAN>, but you don't want to killthem outright. An example is a program that a researcher has leftrunning overnight to perform mathematical calculations that isn'tfinished the next morning. In this case, rather than killing theprocess and forcing the researcher to restart it later from thebeginning, you could simply cut the amount of <SPANCLASS="acronym">CPU</SPAN>time that the process is getting and let it finish slowly duringthe day. The program <ICLASS="filename">/etc/renice</I> lets you changea process's niceness.</P><PCLASS="para">For example, suppose that Mike left a program running beforehe went home. Now it's late at night, and Mike'sprogram is taking up most of the computer's <SPANCLASS="acronym">CPU</SPAN>time:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <BCLASS="emphasis.bold">ps aux | head -5 </B>USER     PID %CPU  %MEM  VSIZE  RSIZE   TT STAT TIME   COMMAND  mike     211 70.0   6.7  2.26M  1.08M   01  R   4:01   cruncher mike     129  8.2  15.1  7.06M  2.41M   01  S   0:48   csh  donna    212  7.0   7.3  2.56M  1.16M   p1  S   1:38   csh michelle 290  4.0  11.9  14.4M  1.91M   03  R   19:00  rogue % </PRE></BLOCKQUOTE><PCLASS="para">You could slow down Mike's program by renicing itto a higher <EMCLASS="emphasis">nice</EM> number.</P><PCLASS="para">For security reasons, normal users are only allowed to increasethe <EMCLASS="emphasis">nice</EM> numbers of their own processes. Only the superuser canlower the <EMCLASS="emphasis">nice</EM> number of a process or raise the <EMCLASS="emphasis">nice</EM> number of somebodyelse's process. (Fortunately, in this example, we knowthe superuser password!)</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <BCLASS="emphasis.bold">/bin/su </B>password: <ICLASS="systemitem.password">another39</I># <BCLASS="emphasis.bold">/etc/renice +4 211 </B>211: old priority 0, new priority 4  # <BCLASS="emphasis.bold">ps u211 </B>USER PID %CPU  %MEM  VSIZE   RSIZE   TT  STAT  TIME  COMMAND  mike  211  1.5  6.7  2.26M   1.08M   01  R  N  4:02  cruncher</PRE></BLOCKQUOTE><PCLASS="para">The <EMCLASS="emphasis">N</EM> in the STAT field indicates that the <KBDCLASS="command">cruncher</KBD> processis now running at a lower priority (it is &quot;niced&quot;).Notice that the process's <SPANCLASS="acronym">CPU</SPAN> consumptionhas already decreased. Any new processes that are spawned by theprocess with <SPANCLASS="acronym">PID</SPAN> 211 will inherit this new nicevalue, too.</P><PCLASS="para">You can also use <ACLASS="indexterm"NAME="AUTOID-39328"></A><ACLASS="indexterm"NAME="AUTOID-39330"></A><ICLASS="filename">/etc/renice</I>to lower the nice number of a process to make it finish faster.[5] Although setting a process to alower priority won't speed up the <SPANCLASS="acronym">CPU</SPAN>or make your computer's hard disk transfer data faster,the negative nice number will cause <SPANCLASS="acronym">UNIX</SPAN> to runa particular process more than it runs others on the system. Ofcourse, if you ran <EMCLASS="emphasis">every</EM> process with the same negative priority,there wouldn't be any apparent benefit.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[5] Only <ICLASS="filename">root</I> can renice a process to make it faster. Normal processescan't even change themselves back to what they were (ifthey've been niced down). Normal users can't evenraise the priority of their processes to the value at which theywere started.</P></BLOCKQUOTE><PCLASS="para">Some versions of the <KBDCLASS="command">renice</KBD> command allow you to change thenice of all processes belonging to a user or all processes in aprocess group (described in the next section). For instance, tospeed up all of Mike's processes, you might type:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen"># <BCLASS="emphasis.bold">renice -2 -u mike</B></PRE></BLOCKQUOTE><PCLASS="para">Remember, processes with a lower nice number run faster.</P><PCLASS="para">Note that because of the <SPANCLASS="acronym">UNIX</SPAN> schedulingsystem, renicing several processes to lower numbers is likely toincrease paging activity if there is limited physical memory, andtherefore adversely impact overall system performance.</P><PCLASS="para">What do process priority and niceness have to do with security?If an intruder has broken into your system and you have contactedthe authorities and are tracing the phone call, slowing the intruderdown with a priority of +10 or +15 will limitthe damage that the intruder can do without hanging up the phone(and losing your chance to catch the intruder). Of course, any timethat an intruder is on a system, exercise extreme caution.</P><PCLASS="para">Also, running your own shell with a higher priority may giveyou an advantage if the system is heavily loaded. The easiest wayto do so is by typing:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen"># <BCLASS="emphasis.bold">renice -5 $$</B></PRE></BLOCKQUOTE><PCLASS="para">The shell will replace the $$ with the <SPANCLASS="acronym">PID</SPAN>of the shell's process.</P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="PUIS-APP-C-SECT-1.3.4">C.1.3.4 Process groups and sessions</A></H4><PCLASS="para">With Berkeley-derived versions of <SPANCLASS="acronym">UNIX</SPAN>,including <SPANCLASS="acronym">SVR4</SPAN>, each process is assigned a <ACLASS="indexterm"NAME="AUTOID-39359"></A>process ID (<SPANCLASS="acronym">PID</SPAN>), a<ACLASS="indexterm"NAME="AUTOID-39362"></A><ACLASS="indexterm"NAME="AUTOID-39365"></A>process groupID, and a session ID. Process groups and sessions are used to implementjob control.</P><PCLASS="para">For each process, the <SPANCLASS="acronym">PID</SPAN> is a unique number,the process group ID is the <SPANCLASS="acronym">PID</SPAN> of the processgroup leader process, and the session ID is the <SPANCLASS="acronym">PID</SPAN>of the session leader process. When a process is created, it inheritsthe process group ID and the session ID of its parent process. Anyprocess may create a new process group by calling <ACLASS="indexterm"NAME="AUTOID-39372"></A><KBDCLASS="command">setpgrp()</KBD>and may create a new session by calling the <SPANCLASS="acronym">UNIX</SPAN>system call <ACLASS="indexterm"NAME="AUTOID-39376"></A><KBDCLASS="command">setsid()</KBD>.All processes that have the same process group ID are said to bein the same process group.</P><PCLASS="para">Each <SPANCLASS="acronym">UNIX</SPAN> process group belongs to a sessiongroup. This is used to help manage signals and orphaned processes.Once a user has logged in, the user may start multiple sets of processes,or jobs, using the shell's job-control mechanism. A jobmay have a single process, such as a single invocation of the <KBDCLASS="command">ls</KBD>command. Alternatively, a job may have several processes, such asa complex shell pipeline. For each of these jobs, there is a processgroup. <SPANCLASS="acronym">UNIX</SPAN> also keeps track of the particularprocess group which is controlling the terminal. This can be setor changed with <ACLASS="indexterm"NAME="AUTOID-39383"></A><ICLASS="filename">ioctl()</I>system calls. Only the controlling process group can read or writeto the terminal.</P><PCLASS="para">A process could become an orphan if its parent process exitsbut it continues to run. Historically, these processes would beinherited by the <KBDCLASS="command">init</KBD> process but would remain in their originalprocess group. If a signal were sent by the controlling terminal(process group), then it would go to the orphaned process, eventhough it no longer had any real connection to the terminal or therest of the process group.</P><PCLASS="para">To counter this, <ACLASS="indexterm"NAME="AUTOID-39389"></A><SPANCLASS="acronym">POSIX</SPAN>defines an orphaned process group. This is a process group wherethe parent of every member is either not a member of the processgroup's session, or is itself a member of the same processgroup. Orphaned process groups are not sent terminal signals whenthey are generated. Because of the way in which new sessions arecreated, the initial process in the first process group is alwaysan orphan (its ancestor is not in the session). Command interpretersare usually spawned as session leaders so they ignore <SPANCLASS="acronym">TSTP</SPAN>signals from the terminal.</P></DIV></DIV></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="appb_03.htm"TITLE="B.3 SUID and SGID Files"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: B.3 SUID and SGID Files"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="Practical UNIX &amp; Internet Security"><IMGSRC="../gifs/txthome.gif"ALT="Practical UNIX &amp; Internet Security"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="appc_02.htm"TITLE="C.2 Creating Processes"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: C.2 Creating Processes"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">B.3 SUID and SGID Files</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">C.2 Creating Processes</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><PCLASS="nav"><FONTSIZE="-1">[ <AHREF="../index.htm"TITLE="The Networking CD Bookshelf">Library Home</A> | <AHREF="../dnsbind/index.htm"TITLE="DNS &amp; BIND">DNS &amp; BIND</A> | <AHREF="../tcpip/index.htm"TITLE="TCP/IP Network Administration">TCP/IP</A> | <AHREF="../sendmail/index.htm"TITLE="sendmail">sendmail</A> | <AHREF="../smdref/index.htm"TITLE="sendmail Desktop Reference">sendmail Reference</A> | <AHREF="../firewall/index.htm"TITLE="Building Internet Firewalls">Firewalls</A> | <AHREF="index.htm"TITLE="Practical UNIX &amp; Internet Security">Practical Security</A> ]</FONT></P></DIV></BODY></HTML>