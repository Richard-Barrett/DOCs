<HTML><HEAD><TITLE>[Chapter 1] 1.4 Security and UNIX</TITLE><METANAME="DC.title"CONTENT="Practical UNIX &amp; Internet Security"><METANAME="DC.creator"CONTENT="Simson Garfinkel &amp; Gene Spafford"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1999-02-03T23:58:40Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-148-8"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch01_01.htm"TITLE="1. Introduction"><LINKREL="prev"HREF="ch01_03.htm"TITLE="1.3 History of UNIX"><LINKREL="next"HREF="ch01_05.htm"TITLE="1.5 Role of This Book"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="Practical UNIX &amp; Internet Security"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,65"HREF="index.htm"ALT="Practical UNIX &amp; Internet Security"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch01_03.htm"TITLE="1.3 History of UNIX"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 1.3 History of UNIX"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 1<BR>Introduction</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch01_05.htm"TITLE="1.5 Role of This Book"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 1.5 Role of This Book"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="PUIS-CHP-1-SECT-4">1.4 Security and UNIX</A></H2><PCLASS="para">Dennis Ritchie wrote about the security of <SPANCLASS="acronym">UNIX</SPAN>:&quot;It was not designed from the start to be secure. It wasdesigned with the necessary characteristics to make security serviceable.&quot;</P><PCLASS="para"><SPANCLASS="acronym">UNIX</SPAN><ACLASS="indexterm"NAME="AUTOID-985"></A><ACLASS="indexterm"NAME="AUTOID-988"></A>is a multi-user, <ACLASS="indexterm"NAME="AUTOID-991"></A><ACLASS="indexterm"NAME="AUTOID-993"></A>multi-tasking operatingsystem. <ICLASS="firstterm">Multi-user</I> means that the operatingsystem allows many different people to use the same computer atthe same time. <ICLASS="firstterm">Multi-tasking</I> means that eachuser can run many different programs simultaneously.</P><PCLASS="para">One of the natural functions of such operating systems isto prevent different people (or programs) using the same computerfrom interfering with each other. Without such protection, a waywardprogram (perhaps written by a student in an introductory computerscience course) could affect other programs or other users, couldaccidentally delete files, or could even <ICLASS="firstterm">crash</I>(halt) the entire computer system. To keep such disasters from happening,some form of computer security has always had a place in the <SPANCLASS="acronym">UNIX</SPAN>design philosophy.</P><PCLASS="para">But <SPANCLASS="acronym">UNIX</SPAN> security provides more than merememory protection. <SPANCLASS="acronym">UNIX</SPAN> has a sophisticated securitysystem that controls the ways users access files, modify systemdatabases, and use system resources. Unfortunately, those mechanismsdon't help much when the systems are misconfigured, areused carelessly, or contain buggy software. Nearly all of the securityholes that have been found in <SPANCLASS="acronym">UNIX</SPAN> over the yearshave resulted from these kinds of problems rather than from shortcomingsin the intrinsic design of the system. Thus, nearly all <SPANCLASS="acronym">UNIX</SPAN>vendors believe that they can (and perhaps do) provide a reasonablysecure <SPANCLASS="acronym">UNIX</SPAN> operating system. However, thereare influences that work against better security.</P><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-1-SECT-4.1">1.4.1 Expectations</A></H3><PCLASS="para">The biggest problem with improving <SPANCLASS="acronym">UNIX</SPAN>security is arguably one of expectation. Many users have grown toexpect <SPANCLASS="acronym">UNIX</SPAN> to be configured in a particularway. Their experience with <SPANCLASS="acronym">UNIX</SPAN> in academic andresearch settings has always been that they have access to mostof the directories on the system and that they have access to mostcommands. Users are accustomed to making their files world-readableby default. Users are also often accustomed to being able to buildand install their own software, often requiring system privilegesto do so. The trend in &quot;free&quot; versions of <SPANCLASS="acronym">UNIX</SPAN>for personal computer systems has amplified these expectations.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-1014"></A><ACLASS="indexterm"NAME="AUTOID-1016"></A>Unfortunately,all of these expectations are contrary to good security practicein the business place. To have stronger security, system administratorsmust often curtail access to files and commands that are not strictlyneeded for users to do their jobs. Thus, someone who needs emailand a text processor for his work should not also expect to be ableto run the network diagnostic programs and the C compiler. Likewise,to heighten security, users should not be able to install softwarethat has not been examined and approved by a trained and authorizedindividual.</P><PCLASS="para">The tradition of open access is strong, and is one of thereasons that <SPANCLASS="acronym">UNIX</SPAN> has been attractive to so manypeople. Some users argue that to restrict these kinds of accesswould make the systems something other than <SPANCLASS="acronym">UNIX</SPAN>.Although these arguments may be valid, in instances where strongsecurity is required, restrictive measures may be needed.</P><PCLASS="para">At the same time, administrators can strengthen security byapplying some general security principles, in moderation. For instance,rather than removing all compilers and libraries from each machine,the tools can be protected so that only users in a certain usergroup can access them. Users with a need for such access, and whocan be trusted to take due care, can be added to this group. Similarmethods can be used with other classes of tools, too, such as networkmonitoring software or Usenet news programs.</P><PCLASS="para">Furthermore, changing the fundamental view of data on thesystem can be beneficial: from readable by default to unreadableby default. For instance, user files and directories should be protectedagainst read access instead of being world-readable by default.Setting file access control values appropriately and using shadowpassword files are just two examples of how this simple change insystem configuration can improve the overall security of <SPANCLASS="acronym">UNIX</SPAN>.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-1026"></A>The mostcritical aspect of enhancing <SPANCLASS="acronym">UNIX</SPAN> security isthat the users themselves participate in the alteration of theirexpectations. The best way to meet this goal is not by decree, butthrough education and motivation. Many users started using <SPANCLASS="acronym">UNIX</SPAN>in an environment less threatening than they face today. By educatingusers of the dangers and how their cooperation can help to thwartthose dangers, the security of the system is increased. By properlymotivating the users to participate in good security practice, youmake them part of the security mechanism. Better education and motivationwork well only when applied together, however; education withoutmotivation may not be applied, and motivation without educationleaves gaping holes in what is done.</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-1-SECT-4.2">1.4.2 Software Quality</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-1034"></A><ACLASS="indexterm"NAME="AUTOID-1037"></A><ACLASS="indexterm"NAME="AUTOID-1039"></A>Much of the <SPANCLASS="acronym">UNIX</SPAN> operating systemand utilities that people take for granted was written as studentprojects, or as quick &quot;hacks&quot; by software developersinside research labs. These programs were not formally designedand tested: they were put together and <ACLASS="indexterm"NAME="AUTOID-1043"></A>debuggedon the fly. The result is a large collection of tools that usuallywork, but sometimes fail in unexpected and spectacular ways. Utilitieswere not the only things written by students. Much of <SPANCLASS="acronym">BSD</SPAN><SPANCLASS="acronym">UNIX</SPAN>, including the networking code, was writtenby students as research projects of one sort or another&nbsp;- andthese efforts sometimes ignored existing standards and conventions.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-1048"></A><ACLASS="indexterm"NAME="AUTOID-1051"></A>Thisanalysis is not intended to cast aspersions on the abilities ofstudents, and instead points out that today's <SPANCLASS="acronym">UNIX</SPAN>was not created as a carefully designed and tested system. Indeed,a considerable amount of the development of <SPANCLASS="acronym">UNIX</SPAN>and its utilities occurred at a time when good software engineeringtools and techniques were not yet developed or readily available.[7]The fact that occasional bugs are discovered that result in compromisesof the security of the system is no wonder; the fact that so fewbugs are evident is perhaps the real wonder!</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[7] Some would argue that they are still not available. Few academicenvironments currently have access to modern software engineeringtools because of their cost, and few vendors are willing to providecopies at prices that academic institutions can afford.</P></BLOCKQUOTE><PCLASS="para">Unfortunately, two things are not occurring as a result ofthe discovery of faults in the existing code. The first is thatsoftware designers are not learning from past mistakes. For instance,buffer overruns (mostly resulting from fixed-length buffers andfunctions that do not check their arguments) have been recognizedas a major <SPANCLASS="acronym">UNIX</SPAN> problem area for some time, yetsoftware continues to be discovered containing such bugs, and newsoftware is written without consideration of these past problems.For instance, a fixed-length buffer overrun in the <KBDCLASS="command">gets </KBD>() library call was one of the majorpropagation modes of the Morris Internet worm of 1988, yet, as wewere working on the second edition of this book in late 1995, newsof yet another buffer-overrun security flaw surfaced&nbsp;- thistime in the <SPANCLASS="acronym">BSD</SPAN>-derived syslog()library call. It is inexcusable that vendors continue to ship softwarewith these kinds of problems in place.</P><PCLASS="para">A more serious problem than any particular flaw is the factthat few, if any, vendors are performing an organized program oftesting on the software they provide. Although many vendors testtheir software for compliance with industry &quot;standards,&quot;few apparently test their software to see what it does when presentedwith unexpected data or conditions. With as much as 40%of the utilities on some machines being buggy,[8]one might think that vendors would be eager to test their versionsof the software and to correct lurking bugs. However, as more thanone vendor&quot;s software engineer has told us, &quot;Thecustomers want their <SPANCLASS="acronym">UNIX</SPAN>&nbsp;- includingthe flaws&nbsp;- exactly like every other implementation. Furthermore,it's not good business: customers will pay extra for performance,but not for better testing.&quot;</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[8] See the reference to the paper by Barton Miller, et al., given in<ACLASS="xref"HREF="appd_01.htm"TITLE="Paper Sources">Appendix D</A>.</P></BLOCKQUOTE><PCLASS="para">As long as the customers demand strict conformance of behaviorto existing versions of the programs, and as long as software qualityis not made a fundamental purchase criterion by those same customers,vendors will most likely do very little to systematically test andfix their software. Formal standards, such as the <ACLASS="indexterm"NAME="AUTOID-1068"></A><ACLASS="indexterm"NAME="AUTOID-1070"></A><SPANCLASS="acronym">ANSI</SPAN> C standardand <SPANCLASS="acronym">POSIX</SPAN> standard help perpetuate and formalizethese weaknesses, too. For instance, the <SPANCLASS="acronym">ANSI</SPAN>C standard[9]perpetuatesthe gets() library call, forcing <SPANCLASS="acronym">UNIX</SPAN>vendors to support the call, or to issue systems at a competitivedisadvantage because they are not in compliance with the standard.[10]</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[9] <SPANCLASS="acronym">ANSI X3J11</SPAN></P><PCLASS="para">[10] See <ACLASS="xref"HREF="appd_01.htm"TITLE="Paper Sources">Appendix D</A> for references describingthis scenario.</P></BLOCKQUOTE></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-1-SECT-4.3">1.4.3 Add-On Functionality Breeds Problems</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-1085"></A><ACLASS="indexterm"NAME="AUTOID-1087"></A><ACLASS="indexterm"NAME="AUTOID-1089"></A>One final influence on <SPANCLASS="acronym">UNIX</SPAN>security involves the way new functionality has been added overthe years. <SPANCLASS="acronym">UNIX</SPAN> is often cited for its flexibilityand reuse characteristics; therefore, new functions are constantlybuilt on top of <SPANCLASS="acronym">UNIX</SPAN> platforms and eventuallyintegrated into released versions. Unfortunately, the addition ofnew features is often done without understanding the assumptionsthat were made with the underlying mechanisms and without concernfor the added complexity presented to the system operators and maintainers.Applying the same features and code in a heterogeneous computingenvironment can also lead to problems.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-1096"></A><ACLASS="indexterm"NAME="AUTOID-1098"></A>Asa special case, consider how large-scale computer networks suchas the Internet have dramatically changed the security ground rulesfrom those under which <SPANCLASS="acronym">UNIX</SPAN> was developed. <SPANCLASS="acronym">UNIX</SPAN>was originally developed in an environment where computers did notconnect to each other outside of the confines of a small room orresearch lab. Networks today interconnect tens of thousands of machines,and millions of users, on every continent in the world. For thisreason, each of us confronts issues of computer security directly:a doctor in a major hospital might never imagine that a postal clerkon the other side of the world could pick the lock on her desk drawerto rummage around her files, yet this sort of thing happens on aregular basis to &quot;virtual desk drawers&quot; on theInternet.</P><PCLASS="para">Most colleges and many high schools now grant network accessto all of their students as a matter of course. The number of primaryschools with network access is also increasing, with initiativesin many U.S. states to put a networked computer in every classroom.Granting telephone network access to a larger number of people increasesthe chances of telephone abuse and fraud, the same as granting widespreadcomputer network access increases the chances that the access willbe used for illegitimate purposes. Unfortunately, the alternativeof withholding access is equally unappealing. Imagine operatingwithout a telephone because of the risk of receiving prank calls!</P><PCLASS="para">The foundations and traditions of <SPANCLASS="acronym">UNIX</SPAN>network security, however, were profoundly shaped by the earlier,more restricted view of networks, and not by our more recent experiences.For instance, the concept of user IDs and group IDs controllingaccess to files was developed at a time when the typical <SPANCLASS="acronym">UNIX</SPAN>machine was in a physically secure environment. On top of this wasadded remote manipulation commands such as rlogin and rcp that weredesigned to reuse the <ACLASS="indexterm"NAME="AUTOID-1106"></A><ACLASS="indexterm"NAME="AUTOID-1109"></A><ACLASS="indexterm"NAME="AUTOID-1111"></A><ACLASS="indexterm"NAME="AUTOID-1113"></A><ACLASS="indexterm"NAME="AUTOID-1115"></A><ACLASS="indexterm"NAME="AUTOID-1118"></A><ACLASS="indexterm"NAME="AUTOID-1121"></A><ACLASS="indexterm"NAME="AUTOID-1125"></A>user-ID/group-ID paradigm withthe concept of &quot;trusted ports&quot; for network connections.Within a local network in a closed lab, using only relatively slowcomputers, this design (usually) worked well. But now, with theproliferation of workstations and non-<SPANCLASS="acronym">UNIX</SPAN> machineson international networks, this design, with its implicit assumptionsabout restricted access to the network, leads to major weaknessesin security.[11]</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[11] Peter Salus notes in his fine historyCasting the Net: From Arpanet to Internet and Beyond... (Addison-Wesley,1995), that Bob Metcalf warned of these dangers in 1973, in <SPANCLASS="acronym">RFC</SPAN>602. That warning, and others like it, went largely unheeded.</P></BLOCKQUOTE><PCLASS="para">Not all of these unsecure foundations were laid by <SPANCLASS="acronym">UNIX</SPAN>developers. The <ACLASS="indexterm"NAME="AUTOID-1135"></A>IP protocol suiteon which the Internet is based, was developed outside of <SPANCLASS="acronym">UNIX</SPAN>initially, and it was developed without a sufficient concern forauthentication and confidentiality. This lack of concern has enabledrecent cases of <ACLASS="indexterm"NAME="AUTOID-1138"></A><ACLASS="indexterm"NAME="AUTOID-1141"></A>passwordsniffing and<ACLASS="indexterm"NAME="AUTOID-1143"></A> IP sequence spoofingto occur, and make news, as &quot;sophisticated&quot; attacks.[12] (These attacksare discussed in <ACLASS="xref"HREF="ch16_01.htm"TITLE="TCP/IP Networks">Chapter 16, <CITECLASS="chapter">TCP/IP Networks</CITE></A>.)</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[12] <ACLASS="indexterm"NAME="AUTOID-1147"></A>To be fair, the designers of<SPANCLASS="acronym">TCP/IP</SPAN> were aware of many of the problems. However,they were more concerned about making everything work so they didnot address many of the problems in their design. The problems arereally more the fault of people trying to build critical applicationson an experimental set of protocols before the protocols were properlyrefined&nbsp;- a familiar problem.</P></BLOCKQUOTE><PCLASS="para">Another facet of the problem has to do with the &quot;improvements&quot;made by each vendor. Rather than attempting to provide a unified,simple interface to system administration across platforms, eachvendor has created a new set of commands and functions. In manycases, improvements to the command set have been available to theadministrator. However, there are also now hundreds (perhaps thousands)of new commands, options, shells, permissions, and settings thatthe administrator of a heterogeneous computing environment mustunderstand and remember. Additionally, many of the commands andoptions are similar to each other, but have different meanings dependingon the environment in which they are used. The result can oftenbe disaster when the poor administrator suffers momentary confusionabout the system or has a small lapse in memory. This complexityfurther complicates the development of tools that are intended toprovide cross-platform support and control. For a &quot;standard&quot;operating system, <SPANCLASS="acronym">UNIX</SPAN> is one of the most nonstandardsystems to administer.</P><PCLASS="para">That such difficulties arise is both a tribute to <SPANCLASS="acronym">UNIX,</SPAN>and a condemnation. The robust nature of <SPANCLASS="acronym">UNIX</SPAN>enables it to accept and support new applications by building onthe old. However, existing mechanisms are sometimes completely inappropriatefor the tasks assigned to them. Rather than being a condemnationof <SPANCLASS="acronym">UNIX</SPAN>, such shortcomings are actually an indictmentof the developers for failing to give more consideration to thehuman and functional ramifications of building on the existing foundation.</P><PCLASS="para">Here, then, is a conundrum: to rewrite large portions of <SPANCLASS="acronym">UNIX</SPAN>and the protocols underlying its environment, or to fundamentallychange its structure, would be to attack the very reasons <SPANCLASS="acronym">UNIX</SPAN>has become so widely used. Furthermore, such restructuring wouldbe contrary to the spirit of standardization that has been a majorfactor in the recent wide acceptance of <SPANCLASS="acronym">UNIX</SPAN>.At the same time, without reevaluation and some restructuring, thereis serious doubt about the level of trust that can be placed inthe system. Ironically, the same spirit of development and changeis what has led <SPANCLASS="acronym">UNIX</SPAN> to its current niche.<ACLASS="indexterm"NAME="AUTOID-1162"></A><ACLASS="indexterm"NAME="AUTOID-1165"></A><ACLASS="indexterm"NAME="AUTOID-1168"></A><ACLASS="indexterm"NAME="AUTOID-1171"></A><ACLASS="indexterm"NAME="AUTOID-1173"></A></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch01_03.htm"TITLE="1.3 History of UNIX"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 1.3 History of UNIX"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="Practical UNIX &amp; Internet Security"><IMGSRC="../gifs/txthome.gif"ALT="Practical UNIX &amp; Internet Security"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch01_05.htm"TITLE="1.5 Role of This Book"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 1.5 Role of This Book"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">1.3 History of UNIX</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">1.5 Role of This Book</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><PCLASS="nav"><FONTSIZE="-1">[ <AHREF="../index.htm"TITLE="The Networking CD Bookshelf">Library Home</A> | <AHREF="../dnsbind/index.htm"TITLE="DNS &amp; BIND">DNS &amp; BIND</A> | <AHREF="../tcpip/index.htm"TITLE="TCP/IP Network Administration">TCP/IP</A> | <AHREF="../sendmail/index.htm"TITLE="sendmail">sendmail</A> | <AHREF="../smdref/index.htm"TITLE="sendmail Desktop Reference">sendmail Reference</A> | <AHREF="../firewall/index.htm"TITLE="Building Internet Firewalls">Firewalls</A> | <AHREF="index.htm"TITLE="Practical UNIX &amp; Internet Security">Practical Security</A> ]</FONT></P></DIV></BODY></HTML>