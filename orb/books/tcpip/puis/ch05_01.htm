<HTML><HEAD><TITLE>[Chapter 5] The UNIX Filesystem</TITLE><METANAME="DC.title"CONTENT="Practical UNIX &amp; Internet Security"><METANAME="DC.creator"CONTENT="Simson Garfinkel &amp; Gene Spafford"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1999-02-04T00:01:25Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-148-8"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="part02.htm"TITLE="II. User Responsibilities"><LINKREL="prev"HREF="ch04_04.htm"TITLE="4.4 Summary"><LINKREL="next"HREF="ch05_02.htm"TITLE="5.2 Using File Permissions"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="Practical UNIX &amp; Internet Security"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,65"HREF="index.htm"ALT="Practical UNIX &amp; Internet Security"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch04_04.htm"TITLE="4.4 Summary"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 4.4 Summary"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 5</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch05_02.htm"TITLE="5.2 Using File Permissions"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 5.2 Using File Permissions"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="CHAPTER"><H1CLASS="chapter"><ACLASS="title"NAME="PUIS-CHP-5">5. The UNIX Filesystem</A></H1><DIVCLASS="htmltoc"><P><B>Contents:</B><BR><ACLASS="SECT1"HREF="#PUIS-CHP-5-SECT-1"TITLE="5.1 Files">Files</A><BR><ACLASS="SECT1"HREF="ch05_02.htm"TITLE="5.2 Using File Permissions">Using File Permissions</A><BR><ACLASS="SECT1"HREF="ch05_03.htm"TITLE="5.3 The umask">The umask</A><BR><ACLASS="SECT1"HREF="ch05_04.htm"TITLE="5.4 Using Directory Permissions">Using Directory Permissions</A><BR><ACLASS="SECT1"HREF="ch05_05.htm"TITLE="5.5 SUID">SUID</A><BR><ACLASS="SECT1"HREF="ch05_06.htm"TITLE="5.6 Device Files">Device Files</A><BR><ACLASS="SECT1"HREF="ch05_07.htm"TITLE="5.7 chown: Changing a File's Owner">chown: Changing a File's Owner</A><BR><ACLASS="SECT1"HREF="ch05_08.htm"TITLE="5.8 chgrp: Changing a File's Group">chgrp: Changing a File's Group</A><BR><ACLASS="SECT1"HREF="ch05_09.htm"TITLE="5.9 Oddities and Dubious Ideas">Oddities and Dubious Ideas</A><BR><ACLASS="SECT1"HREF="ch05_10.htm"TITLE="5.10 Summary">Summary</A></P><P></P></DIV><PCLASS="para">The <SPANCLASS="acronym">UNIX</SPAN> filesystem <ACLASS="indexterm"NAME="AUTOID-3679"></A><ACLASS="indexterm"NAME="AUTOID-3682"></A><ACLASS="indexterm"NAME="AUTOID-3685"></A>controls the way thatinformation in files and directories is stored on disk and otherforms of secondary storage. It controls which users can access whatitems and how. The filesystem is therefore one of the most basictools for enforcing <SPANCLASS="acronym">UNIX</SPAN> security on your system.</P><PCLASS="para">Information stored in the <SPANCLASS="acronym">UNIX</SPAN> filesystemis arranged as a tree structure of directories and files. The treeis constructed from directories and subdirectories within a singledirectory, which is called the <ICLASS="firstterm">root</I>.[1]Each directory,in turn, can contain other directories or entries such as files,pointers (symbolic links) to other parts of the filesystem, logicalnames that represent devices (such as <ICLASS="filename">/dev/tty</I>),and many other types.[2]</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[1] Thisis where the &quot;root&quot; user (superuser) name originates:the owner of the root of the filesystem.</P><PCLASS="para">[2] For example, the UNIX &quot;process&quot;filesystem in System V contains entries that represent processesthat are currently executing.</P></BLOCKQUOTE><PCLASS="para">This chapter explains, from the user's point of view,how the filesystem represents and protects information.</P><DIVCLASS="sect1"><H2CLASS="sect1"><ACLASS="title"NAME="PUIS-CHP-5-SECT-1">5.1 Files</A></H2><PCLASS="para">From <ACLASS="indexterm"NAME="AUTOID-3701"></A>the simplest perspective,everything visible to the user in a <SPANCLASS="acronym">UNIX</SPAN> systemcan be represented as a &quot;file&quot; in the filesystem&nbsp;-  including processes and network connections. Almost allof these items are represented as &quot;files&quot; eachhaving at least one name, an owner, access rights, and other attributes.This information is actually stored in the filesystem in an <ICLASS="firstterm">inode</I>(index node), the basic filesystem entry. An <ACLASS="indexterm"NAME="AUTOID-3705"></A>inodestores everything about a filesystem entry except its name; thenames are stored in directories and are associated with pointersto inodes.</P><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-5-SECT-1.1">5.1.1 Directories</A></H3><PCLASS="para">One <ACLASS="indexterm"NAME="AUTOID-3710"></A>special kind of entryin the filesystem is the <ICLASS="firstterm">directory</I>. A directoryis nothing more than a simple list of names and inode numbers. Aname can consist of any string of any characters with the exceptionof a &quot;/&quot; character and the &quot;null&quot;character (usually a zero byte).[3] There is a limit to the lengthof these strings, but it is usually quite long: 1024 or longer onmany modern versions of <SPANCLASS="acronym">UNIX</SPAN>; older <SPANCLASS="acronym">AT&T</SPAN>versions limit names to 14 characters or less.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[3] Some versions ofUNIX may further restrict the characters that can be used in filenamesand directory names.</P></BLOCKQUOTE><PCLASS="para">These strings are the names of files, directories, and theother objects stored in the filesystem. Each name can contain controlcharacters, line feeds, and other characters. This can have someinteresting implications for security, and we'll discussthose later in this and other chapters.</P><PCLASS="para">Associated with each name is a numeric pointer that is actuallyan index on disk for an inode. An inode contains information aboutan individual entry in the filesystem; these contents are describedin the next section.</P><PCLASS="para">Nothing else is contained in the directory other than namesand inode numbers. No protection information is stored there, norowner names, nor data. The directory is a very simple relationaldatabase that maps names to inode numbers. No restriction on howmany names can point to the same inode exists, either. A directorymay have 2, 5, or 50 names that each have the same inode number.In like manner, several directories may have names that associateto the same inode. These are known as <ICLASS="firstterm">links</I>[4] to the file. Thereis no way of telling which link was the first created, nor is thereany reason to know: all the names are equal in what they access.This is often a confusing idea for beginning users as they try tounderstand the &quot;real name&quot; for a file.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[4] These are <EMCLASS="emphasis">hard links</EM> or <EMCLASS="emphasis">directlinks</EM>. Some systems support a different form of pointer,known as a <EMCLASS="emphasis">symbolic link</EM>, that behaves in adifferent way.</P></BLOCKQUOTE><PCLASS="para">This also means that you don't actually delete afile with commands such as <ICLASS="filename">rm.</I> Instead, you<ICLASS="firstterm">unlink</I> the name&nbsp;- you sever the connectionbetween the filename in a directory and the inode number. If anotherlink still exists, the file will continue to exist on disk. Afterthe last link is removed, and the file is closed, the kernel willreclaim the storage because there is no longer a method for a userto access it.</P><PCLASS="para">Every <ACLASS="indexterm"NAME="AUTOID-3730"></A><ACLASS="indexterm"NAME="AUTOID-3732"></A><ACLASS="indexterm"NAME="AUTOID-3734"></A><ACLASS="indexterm"NAME="AUTOID-3736"></A><ACLASS="indexterm"NAME="AUTOID-3738"></A><ACLASS="indexterm"NAME="AUTOID-3741"></A><ACLASS="indexterm"NAME="AUTOID-3743"></A><ACLASS="indexterm"NAME="AUTOID-3746"></A><ACLASS="indexterm"NAME="AUTOID-3749"></A><ACLASS="indexterm"NAME="AUTOID-3753"></A>normal directory hastwo names always present. One entry is for &quot;<ICLASS="filename">.</I>&quot;(dot), and this is associated with the inode for the directory itself;it is self-referential. The second entry is for &quot;<ICLASS="filename">..</I>&quot;(dot-dot), which points to the &quot;parent&quot; of thisdirectory&nbsp;- the directory next closest to the root in thetree-structured filesystem. The exception is the root directoryitself, named &quot;/&quot;. In the rootdirectory, &quot;..&quot; is also a link to &quot;/&quot;.</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-5-SECT-1.2">5.1.2 Inodes</A></H3><PCLASS="para">For <ACLASS="indexterm"NAME="AUTOID-3762"></A>each object in the filesystem,<SPANCLASS="acronym">UNIX</SPAN> stores administrative information in a structureknown as an inode. Inodes reside on disk and do not have names.Instead, they have indices (numbers) indicating their positionsin the array of inodes.</P><PCLASS="para">Each inode generally contains:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">The location of the item'scontents on the disk, if any</P></LI><LICLASS="listitem"><PCLASS="para">The item's type (e.g., file, directory,symbolic link)</P></LI><LICLASS="listitem"><PCLASS="para">The item's size, in bytes, if applicable</P></LI><LICLASS="listitem"><PCLASS="para">The <ACLASS="indexterm"NAME="AUTOID-3775"></A><ACLASS="indexterm"NAME="AUTOID-3777"></A><ACLASS="indexterm"NAME="AUTOID-3780"></A>time the file's inode was last modified(the <ICLASS="firstterm"><ACLASS="indexterm"NAME="AUTOID-3784"></A>ctime</I>)</P></LI><LICLASS="listitem"><PCLASS="para">The time the file's contents were lastmodified (the <ICLASS="filename"><ACLASS="indexterm"NAME="AUTOID-3789"></A>mtime</I>)</P></LI><LICLASS="listitem"><PCLASS="para">The time the file was last accessed (the <ICLASS="firstterm"><ACLASS="indexterm"NAME="AUTOID-3794"></A>atime</I>) for <ICLASS="filename">read( )</I>, <ICLASS="filename">exec ( ), </I>etc</P></LI><LICLASS="listitem"><PCLASS="para">A reference count: the number of names the filehas</P></LI><LICLASS="listitem"><PCLASS="para">The file's owner (a <SPANCLASS="acronym">UID</SPAN>)</P></LI><LICLASS="listitem"><PCLASS="para">The file's group (a <SPANCLASS="acronym">GID</SPAN>)</P></LI><LICLASS="listitem"><PCLASS="para">The file's <ICLASS="firstterm">mode bits</I>(also called <ICLASS="firstterm">file permissions</I> or <ICLASS="firstterm">permissionbits</I>)</P></LI></UL><PCLASS="para">The last three pieces of information, stored for each item,and coupled with <SPANCLASS="acronym">UID/GID</SPAN> information about executingprocesses, are the fundamental data that <SPANCLASS="acronym">UNIX</SPAN>uses for practically all operating system security.</P><PCLASS="para">Other information can also be stored in the inode, dependingon the particular version of <SPANCLASS="acronym">UNIX</SPAN> involved. Somesystems may also have other nodes such as vnodes, cnodes, and soon. These are simply extensions to the inode concept to supportforeign files, <SPANCLASS="acronym">RAID</SPAN>[5] disks, or other specialkinds of filesystems. We'll confine our discussion to inodes,as that abstraction contains most of the information we need.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[5] RAID meansRedundant Array of Inexpensive Disks. It is a technique for combiningmany low-cost hard disks into a single unit that offers improvedperformance and reliability.</P></BLOCKQUOTE><PCLASS="para"><ACLASS="xref"HREF="ch05_01.htm#PUIS-CHP-5-FIG-1"TITLE="Files and inodes">Figure 5.1</A> shows how information is storedin an inode.</P><H4CLASS="figure"><ACLASS="title"NAME="PUIS-CHP-5-FIG-1">Figure 5.1: Files and inodes</A></H4><IMGCLASS="graphic"SRC="figs/puis_0501.gif"ALT="Figure 5.1"></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-5-SECT-1.3">5.1.3 Current Directory and Paths</A></H3><PCLASS="para">Every <ACLASS="indexterm"NAME="AUTOID-3827"></A><ACLASS="indexterm"NAME="AUTOID-3829"></A>item in thefilesystem with a name can be specified with a <ICLASS="firstterm">pathname</I>.The word pathname is appropriate because a pathname represents thepath to the entry from the root of the filesystem. By followingthis path, the system can find the inode of the referenced entry.</P><PCLASS="para">Pathnames can be <ACLASS="indexterm"NAME="AUTOID-3833"></A><ACLASS="indexterm"NAME="AUTOID-3835"></A>absoluteor relative. Absolute pathnames always start at the root, and thusalways begin with a &quot;/&quot;, representingthe root directory. Thus, a pathname such as <ICLASS="filename">/homes/mortimer/bin/crashme</I>represents a pathname to an item starting at the rootdirectory.</P><PCLASS="para">A relative pathname always starts interpretation from thecurrent directory of the process referencing the item. This conceptimplies that every process has associated with it a <ICLASS="filename"><ACLASS="indexterm"NAME="AUTOID-3840"></A>current directory</I>. Each processinherits its current directory from a parent process after a <ICLASS="firstterm">fork</I>(see <ACLASS="xref"HREF="appc_01.htm"TITLE="UNIX Processes">Appendix C, <CITECLASS="appendix">UNIX Processes</CITE></A>). The currentdirectory is initialized at login from the sixth field of the userrecord in the <ICLASS="filename">/etc/passwd</I> file: the <ICLASS="firstterm">homedirectory</I>. The current directory is then updated everytime the process performs a change-directory operation (chdir orcd). Relative pathnames also imply that the current directoryis at the front of the given pathname. Thus, after executing thecommand <ICLASS="filename">cd /usr,</I> the relative pathname <ICLASS="filename">lib/makekey</I>would actually be referencing the pathname <ICLASS="filename">/usr/lib/makekey</I>.Note that any pathname that doesn't start with a &quot;/&quot;must be relative.</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-5-SECT-1.4">5.1.4 Using the ls Command</A></H3><PCLASS="para">You<ACLASS="indexterm"NAME="AUTOID-3852"></A> can usethe <KBDCLASS="command">ls</KBD> command to list all of the files in a directory. For instance,to list all the files in your current directory, type:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <BCLASS="emphasis.bold">ls -a   </B>instructions  letter       notes invoice       more-stuff   stats % </PRE></BLOCKQUOTE><PCLASS="para">You <ACLASS="indexterm"NAME="AUTOID-3858"></A><ACLASS="indexterm"NAME="AUTOID-3861"></A>canget a more detailed listing by using the ls -lF command:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <BCLASS="emphasis.bold">ls -lF</B>total 161 -rw-r--r-- 1 sian    user          505 Feb  9 13:19 instructions -rw-r--r-- 1 sian    user         3159 Feb  9 13:14 invoice -rw-r--r-- 1 sian    user         6318 Feb  9 13:14 letter -rw------- 1 sian    user        15897 Feb  9 13:20 more-stuff -rw-r----- 1 sian    biochem      4320 Feb  9 13:20 notes -rwxr-xr-x 1 sian    user       122880 Feb  9 13:26 stats* % </PRE></BLOCKQUOTE><PCLASS="para">The first line of output generated by the <KBDCLASS="command">ls</KBD> command (&quot;total161&quot; in the example above) indicates the number of kilobytes takenup by the files in the directory.[6]Each of the other lines of output contains the fields, from leftto right, as described in <ACLASS="xref"HREF="ch05_01.htm#PUIS-CHP-5-TAB-1"TITLE="ls Output">Table 5.1</A>.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[6] Some older versions of UNIXreported this in 512-byte blocks rather than in kilobytes.</P></BLOCKQUOTE><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="PUIS-CHP-5-TAB-1">Table 5.1: ls Output</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Field Contents</P></TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Meaning</P></TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">-</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">The file's type; for regularfiles, this field is always a dash</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">rw-r--r--</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">The file's permissions</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">1</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">The number of &quot;hard&quot;links to the file; the number of &quot;names&quot; for thefile</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">sian</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">The name of the file's owner</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">user</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">The name of the file's group</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">505</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">The file's size, in bytes</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Feb  9 13:19</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">The file's modification time</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">instructions</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">The file's name</P></TD></TR></TBODY></TABLE><PCLASS="para">The <KBDCLASS="command">ls -F</KBD> option makes it easier for you to understandthe listing by printing a special character after the filename toindicate what it is, as shown in <ACLASS="xref"HREF="ch05_01.htm#PUIS-CHP-5-TAB-2"TITLE="ls -F Tag Meanings">Table 5.2</A>.</P><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="PUIS-CHP-5-TAB-2">Table 5.2: ls -F Tag Meanings</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Symbol</P></TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Meaning</P></TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">(blank)</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Regular file or named pipe (FIFO[7])</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">*</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Executable program or command file</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">/</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Directory</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">=</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Socket</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">@</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Symbolic link</P></TD></TR></TBODY></TABLE><BLOCKQUOTECLASS="footnote"><PCLASS="para">[7] A FIFO is a First-In, First-Out buffer, which is a specialkind of named pipe.</P></BLOCKQUOTE><PCLASS="para">Thus, in the directory shown earlier, the file <ICLASS="filename">stats</I>is an executable program file; the rest of the files are regulartext files.</P><PCLASS="para">The -g option to the <KBDCLASS="command">ls</KBD> command alters the output,depending on the version of <SPANCLASS="acronym">UNIX </SPAN>being used.</P><PCLASS="para">If <ACLASS="indexterm"NAME="AUTOID-3971"></A>you are usingthe Berkeley-derived version of ls,[8]you must use the<KBDCLASS="command">ls -g</KBD> option to displaythe file's group in addition to the file's owner:</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[8] On Solaris systems,this program is named <ICLASS="filename">/usr/ucb/ls</I>.</P></BLOCKQUOTE><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <BCLASS="emphasis.bold">ls -lFg </B>total 161 -rw-r--r-- 1 sian     user       505 Feb  9 13:19 instructions -rw-r--r-- 1 sian     user      3159 Feb  9 13:14 invoice -rw-r--r-- 1 sian     user      6318 Feb  9 13:14 letter -rw------- 1 sian     user     15897 Feb  9 13:20 more-stuff -rw-r----- 1 sian     biochem   4320 Feb  9 13:20 notes -rwxr-xr-x 1 sian     user    122880 Feb  9 13:26 stats* % </PRE></BLOCKQUOTE><PCLASS="para">If you are using an <SPANCLASS="acronym">AT&T</SPAN>-derived versionof ls,[9]using the <ICLASS="filename">-g </I>option causes the <ICLASS="filename">ls</I> command to only display the file's group:</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[9] On Solaris systems, this program is named <ICLASS="filename">/bin/ls</I>.</P></BLOCKQUOTE><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <BCLASS="emphasis.bold">ls -lFg</B>total 161 -rw-r--r-- 1 user        505 Feb  9 13:19 instructions -rw-r--r-- 1 user       3159 Feb  9 13:14 invoice -rw-r--r-- 1 user       6318 Feb  9 13:14 letter -rw------- 1 user      15897 Feb  9 13:20 more-stuff -rw-r----- 1 biochem    4320 Feb  9 13:20 notes -rwxr-xr-x 1 user     122880 Feb  9 13:26 stats* %</PRE></BLOCKQUOTE></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-5-SECT-1.5">5.1.5 File Times</A></H3><PCLASS="para">The <ACLASS="indexterm"NAME="AUTOID-3992"></A><ACLASS="indexterm"NAME="AUTOID-3995"></A><ACLASS="indexterm"NAME="AUTOID-3997"></A><ACLASS="indexterm"NAME="AUTOID-4000"></A>times shown with the <KBDCLASS="command">ls -l</KBD> command are the modification times of thefiles (<ACLASS="indexterm"NAME="AUTOID-4004"></A>mtime). You can obtain the timeof last access (the <ACLASS="indexterm"NAME="AUTOID-4006"></A>atime) by providingthe -u option (for example, by typing <KBDCLASS="command">ls -lu</KBD>).Both of these time values can be changed with a call to a systemlibrary routine.[10]Therefore, as the system administrator, you should be in the habitof checking the inode change time (<ACLASS="indexterm"NAME="AUTOID-4012"></A>ctime)by providing the <ACLASS="indexterm"NAME="AUTOID-4015"></A><KBDCLASS="command">-c</KBD>option; for example, <KBDCLASS="command">ls -lc</KBD>. You can't reset thectime of a file under normal circumstances. It is updated by theoperating system whenever any change is made to the inode for thefile.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[10] <ICLASS="filename">utimes ( )</I></P></BLOCKQUOTE><PCLASS="para">Because the inode changes when the file is modified, ctimereflects the time of last writing, protection change, or changeof owner. An attacker may change the mtime or atime of a file, butthe ctime will usually be correct.</P><PCLASS="para">Note <ACLASS="indexterm"NAME="AUTOID-4022"></A><ACLASS="indexterm"NAME="AUTOID-4025"></A><ACLASS="indexterm"NAME="AUTOID-4027"></A>that we said &quot;usually.&quot;A clever attacker who gains superuser status can change the systemclock and then touch the inode to force a misleading ctime on afile. Furthermore, an attacker can change the ctime by writing tothe raw disk device and bypassing the operating system checks altogether.And if you are using Linux with the ext2 filesystem, an attackercan modify the inode contents directly using the debugfs command.</P><PCLASS="para">For this reason, if the superuser account on your system hasbeen compromised, you should not assume that any of the three timesstored with any file or directory are correct.</P><BLOCKQUOTECLASS="note"><PCLASS="para"><STRONG>NOTE:</STRONG> Some programs will change the ctime on a file withoutactually changing the file itself. This can be misleading when youare looking for suspicious activity. The <ICLASS="filename">file </I>commandis one such offender. The discrepancy occurs because <ICLASS="filename">file</I>opens the file for reading to determine its type, thus changingthe <ICLASS="firstterm">atime</I> on the file. By default, most versions of <ICLASS="filename">file</I>then reset the atime to its original value, but in so doing changethe ctime. Some security scanning programs use the <ICLASS="filename">file</I> program within them (or employ similar functionality),and this may result in wide-scale changes in ctime unless they arerun on a read-only version of the filesystem.<ACLASS="indexterm"NAME="AUTOID-4038"></A></P></BLOCKQUOTE></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-5-SECT-1.6">5.1.6 Understanding File Permissions</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-4043"></A>The file permissionson each line of the ls listing tell you what the file is and whatkind of file access (that is, ability to read, write, or execute)is granted to various users on your system.</P><PCLASS="para">Here are two examples of file permissions:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">-rw------- drwxr-xr-x</PRE></BLOCKQUOTE><PCLASS="para">The first character of the file's mode field indicatesthe type of file described in <ACLASS="xref"HREF="ch05_01.htm#PUIS-CHP-5-TAB-3"TITLE="File Types">Table 5.3</A>.<ACLASS="indexterm"NAME="AUTOID-4049"></A></P><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="PUIS-CHP-5-TAB-3">Table 5.3: File Types</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Contents</P></TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Meaning</P></TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">-</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Plain file</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">d</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Directory</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">c</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Character device (tty or printer)</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">b</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Block device (usually disk or CD-ROM)</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">l</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Symbolic link (<SPANCLASS="acronym">BSD</SPAN>or V.4)</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">s</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Socket (<SPANCLASS="acronym">BSD</SPAN> or V.4)</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">= or p</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para"><SPANCLASS="acronym">FIFO</SPAN> (System V, Linux)</P></TD></TR></TBODY></TABLE><PCLASS="para">The next nine characters taken in groups of three indicate<EMCLASS="emphasis">who</EM> on your computer can do <EMCLASS="emphasis">what</EM>with the file. There are three kinds of permissions:</P><DLCLASS="variablelist"><DTCLASS="term">r</DT><DDCLASS="listitem"><PCLASS="para">Permission to read</P></DD><DTCLASS="term">w</DT><DDCLASS="listitem"><PCLASS="para">Permission to write</P></DD><DTCLASS="term">x</DT><DDCLASS="listitem"><PCLASS="para">Permission to execute</P></DD></DL><PCLASS="para">Similarly, there are three classes of permissions:</P><DLCLASS="variablelist"><DTCLASS="term">owner</DT><DDCLASS="listitem"><PCLASS="para">The file's owner</P></DD><DTCLASS="term">group</DT><DDCLASS="listitem"><PCLASS="para">Users who are in the file's group</P></DD><DTCLASS="term">other</DT><DDCLASS="listitem"><PCLASS="para">Everybody else on the system (except the superuser)</P></DD></DL><PCLASS="para">In the <KBDCLASS="command">ls -l</KBD> command, privilegesare illustrated graphically (see <ACLASS="xref"HREF="ch05_01.htm#PUIS-CHP-5-FIG-2"TITLE="Basic permissions">Figure 5.2</A>).</P><H4CLASS="figure"><ACLASS="title"NAME="PUIS-CHP-5-FIG-2">Figure 5.2: Basic permissions</A></H4><IMGCLASS="graphic"SRC="figs/puis_0502.gif"ALT="Figure 5.2"></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-5-SECT-1.7">5.1.7 File Permissions in Detail</A></H3><PCLASS="para">The terms <EMCLASS="emphasis">read</EM>, <EMCLASS="emphasis">write</EM>,and <EMCLASS="emphasis">execute</EM> have very specific meanings forfiles, as shown in <ACLASS="xref"HREF="ch05_01.htm#PUIS-CHP-5-TAB-4"TITLE="File Permissions">Table 5.4</A>.</P><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="PUIS-CHP-5-TAB-4">Table 5.4: File Permissions</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Character</P></TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Permission</P></TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Meaning</P></TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">r</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para"><SPANCLASS="acronym">READ</SPAN></P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-4168"></A><ACLASS="indexterm"NAME="AUTOID-4170"></A><ACLASS="indexterm"NAME="AUTOID-4172"></A><ACLASS="indexterm"NAME="AUTOID-4174"></A><ACLASS="indexterm"NAME="AUTOID-4176"></A><ACLASS="indexterm"NAME="AUTOID-4178"></A><ACLASS="indexterm"NAME="AUTOID-4180"></A><ACLASS="indexterm"NAME="AUTOID-4182"></A><ACLASS="indexterm"NAME="AUTOID-4184"></A>Read accessmeans exactly that: you can open a file with the <KBDCLASS="command">open()</KBD>system call and you can read its contents with read.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">w</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para"><SPANCLASS="acronym">WRITE</SPAN></P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Write access means that you can overwritethe file with a new one or modify its contents. It also means thatyou can use <KBDCLASS="command">write()</KBD> to make the file longeror <KBDCLASS="command">truncate()</KBD> or <KBDCLASS="command">ftruncate()</KBD>to make the file shorter.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">x</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para"><SPANCLASS="acronym">EXECUTE</SPAN></P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Execute access makes sense only for programs.If a file has its execute bits set, you can run it by typing itspathname (or by running it with one of the family of <KBDCLASS="command">exec()</KBD>system calls). How the program gets executed depends on the firsttwo bytes of the file.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">The first two bytes of an executablefile are assumed to be a <ICLASS="firstterm"><ACLASS="indexterm"NAME="AUTOID-4213"></A>magicnumber</I> indicating the nature of the file. Some numbersmean that the file is a certain kind of machine code file. The specialtwo-byte sequence &quot;#!&quot; means that itis an executable script of some kind. Anything with an unknown valueis assumed to be a shell script and is executed accordingly.</P></TD></TR></TBODY></TABLE><PCLASS="para">File permissions apply to devices, named sockets, and <SPANCLASS="acronym">FIFOS</SPAN>exactly as they do for regular files. If you have write access,you can write information to the file or other object; if you haveread access, you can read from it; and if you don't haveeither access, you're out of luck.</P><PCLASS="para">File permissions do <EMCLASS="emphasis">not</EM> apply to <ACLASS="indexterm"NAME="AUTOID-4219"></A><ACLASS="indexterm"NAME="AUTOID-4221"></A>symboliclinks. Whether or not you can read the file pointed to by a symboliclink depends on the file's permissions, not the link's.In fact, symbolic links are almost always created with a file permissionof &quot;rwxrwxrwx&quot; (or mode 0777, as explained laterin this chapter) and are ignored by the operating system.[11]</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[11] Apparently, some vendors have found a use for the mode bitsinside a symbolic link's inode. HP-UX 10.0 uses the stickybit of symbolic links to indicate &quot;transition links&quot;&nbsp;- portabilitylinks to ease the transition from previous releases to the new SVR4filesystem layout.</P></BLOCKQUOTE><PCLASS="para">Note the following facts about file permissions:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">You can have execute access withouthaving read access. In such a case, you can run a program withoutreading it. This ability is useful in case you wish to hide thefunction of a program. Another use is to allow people to executea program without letting them make a copy of the program (see thenote later in this section).</P></LI><LICLASS="listitem"><PCLASS="para">If you have read access but not execute access,you can then make a copy of the file and run it for yourself. Thecopy, however, will be different in two important ways: it willhave a different absolute pathname; and it will be owned by you,rather than by the original program's owner.</P></LI><LICLASS="listitem"><PCLASS="para">On some versions of <SPANCLASS="acronym">UNIX</SPAN> (includingLinux), an executable command script must have both its read andexecute bits set to allow people to run it.</P></LI></UL><PCLASS="para">Most people think that file permissions are pretty basic stuff.Nevertheless, many <SPANCLASS="acronym">UNIX</SPAN> systems have had securitybreaches because their file permissions are not properly set.</P><BLOCKQUOTECLASS="note"><PCLASS="para"><STRONG>NOTE:</STRONG> <ACLASS="indexterm"NAME="AUTOID-4239"></A>Sun'sNetwork Filesystem (<SPANCLASS="acronym">NFS</SPAN>) servers allow a clientto read any file that has either the read or the execute permissionset. They do so because there is no difference, from the <SPANCLASS="acronym">NFS</SPAN>server's point of view, between a request to read the contentsof a file by a user who is using the <KBDCLASS="command">read()</KBD>system call and a request to execute the file by a user who is usingthe <KBDCLASS="command">exec()</KBD> system call. In both cases, the contentsof the file need to be transferred from the <SPANCLASS="acronym">NFS</SPAN>server to the <SPANCLASS="acronym">NFS</SPAN> client. (For a detailed description,see <ACLASS="xref"HREF="ch20_01.htm"TITLE="NFS">Chapter 20, <CITECLASS="chapter">NFS</CITE></A>.)</P></BLOCKQUOTE></DIV></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch04_04.htm"TITLE="4.4 Summary"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 4.4 Summary"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="Practical UNIX &amp; Internet Security"><IMGSRC="../gifs/txthome.gif"ALT="Practical UNIX &amp; Internet Security"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch05_02.htm"TITLE="5.2 Using File Permissions"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 5.2 Using File Permissions"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">4.4 Summary</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">5.2 Using File Permissions</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><PCLASS="nav"><FONTSIZE="-1">[ <AHREF="../index.htm"TITLE="The Networking CD Bookshelf">Library Home</A> | <AHREF="../dnsbind/index.htm"TITLE="DNS &amp; BIND">DNS &amp; BIND</A> | <AHREF="../tcpip/index.htm"TITLE="TCP/IP Network Administration">TCP/IP</A> | <AHREF="../sendmail/index.htm"TITLE="sendmail">sendmail</A> | <AHREF="../smdref/index.htm"TITLE="sendmail Desktop Reference">sendmail Reference</A> | <AHREF="../firewall/index.htm"TITLE="Building Internet Firewalls">Firewalls</A> | <AHREF="index.htm"TITLE="Practical UNIX &amp; Internet Security">Practical Security</A> ]</FONT></P></DIV></BODY></HTML>