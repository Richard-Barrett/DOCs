<HTML><HEAD><TITLE>[Chapter 6] 6.6 Encryption Programs Available for UNIX</TITLE><METANAME="DC.title"CONTENT="Practical UNIX &amp; Internet Security"><METANAME="DC.creator"CONTENT="Simson Garfinkel &amp; Gene Spafford"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1999-02-04T00:02:59Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-148-8"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch06_01.htm"TITLE="6. Cryptography"><LINKREL="prev"HREF="ch06_05.htm"TITLE="6.5 Message Digests and Digital Signatures"><LINKREL="next"HREF="ch06_07.htm"TITLE="6.7 Encryption and U.S. Law"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="Practical UNIX &amp; Internet Security"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,65"HREF="index.htm"ALT="Practical UNIX &amp; Internet Security"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch06_05.htm"TITLE="6.5 Message Digests and Digital Signatures"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 6.5 Message Digests and Digital Signatures"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 6<BR>Cryptography</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch06_07.htm"TITLE="6.7 Encryption and U.S. Law"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 6.7 Encryption and U.S. Law"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="PUIS-CHP-6-SECT-6">6.6 Encryption Programs Available for UNIX</A></H2><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-8089"></A><ACLASS="indexterm"NAME="AUTOID-8092"></A>This section describes three encryption programsthat are available today on many <SPANCLASS="acronym">UNIX</SPAN> systems:</P><DLCLASS="variablelist"><DTCLASS="term">crypt </DT><DDCLASS="listitem"><PCLASS="para">The original <SPANCLASS="acronym">UNIX</SPAN> encryptionapplication.</P></DD><DTCLASS="term">des</DT><DDCLASS="listitem"><PCLASS="para">An implementation of the Data Encryption Standard.</P></DD><DTCLASS="term">pgp</DT><DDCLASS="listitem"><PCLASS="para">Phil Zimmermann's Pretty Good Privacy.</P></DD></DL><PCLASS="para">Each of these programs offers increasing amounts of security,but the more secure programs have more legal restrictions on theiruse in the United States.[24]Many other countries have passed legislation severely restrictingor outlawing the use of strong cryptography by private citizens.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[24] We don't meanto slight our readers in countries other than the U.S., but we arenot familiar with all of the various national laws and regulationsaround the world. You should check your local laws to discover ifthere are restrictions on your use of these programs.</P></BLOCKQUOTE><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-6-SECT-6.1">6.6.1 UNIX crypt: The Original UNIX Encryption Command</A></H3><PCLASS="para"><SPANCLASS="acronym">UNIX</SPAN> <KBDCLASS="command"><ACLASS="indexterm"NAME="AUTOID-8118"></A><ACLASS="indexterm"NAME="AUTOID-8120"></A>crypt</KBD>is an encryption program that is included as a standard part ofthe <SPANCLASS="acronym">UNIX</SPAN> operating system. It is a very simpleencryption program that is easily broken, as evidenced by AT&amp;T'suncharacteristic disclaimer on the man page:</P><BLOCKQUOTECLASS="blockquote"><PCLASS="para">BUGS: There is no warranty of merchantabilitynor any warranty of fitness for a particular purpose nor any otherwarranty, either express or implied, as to the accuracy of the enclosedmaterials or as to their suitability for any particular purpose.Accordingly, Bell Telephone Laboratories assumes no responsibilityfor their use by the recipient. Further, Bell Laboratories assumesno obligation to furnish any assistance of any kind whatsoever,or to furnish any additional information or documentation.</P></BLOCKQUOTE><PCLASS="para">&nbsp;- crypt reference page</P><PCLASS="para">Note that the <KBDCLASS="command">crypt</KBD> program is different from the more secure<KBDCLASS="command">crypt()</KBD> library call, which is described in<ACLASS="xref"HREF="ch08_01.htm"TITLE="Defending  Your Accounts">Chapter 8, <CITECLASS="chapter">Defending  Your Accounts</CITE></A>.</P><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="PUIS-CHP-6-SECT-6.1.1">6.6.1.1 The crypt program</A></H4><PCLASS="para">The <KBDCLASS="command">crypt</KBD> program uses a simplified simulation of the <ACLASS="indexterm"NAME="AUTOID-8136"></A><ACLASS="indexterm"NAME="AUTOID-8138"></A><ACLASS="indexterm"NAME="AUTOID-8141"></A>Enigma encryption machinedescribed in &quot;The Enigma Encryption System&quot; earlierin this chapter. Unlike Enigma, which had to encrypt only letters,<KBDCLASS="command">crypt</KBD> must be able to encrypt any block of 8-bitdata. As a result, the rotors used with crypt must have 256 &quot;connectors&quot;on each side. A second difference between Enigma and <KBDCLASS="command">crypt</KBD>is that, while Enigma used three or four rotors and a reflector,<KBDCLASS="command">crypt</KBD> uses only a single rotor and reflector.The encryption key provided by the user determines the placementof the virtual wires in the rotor and reflector.</P><PCLASS="para">Partially because <KBDCLASS="command">crypt</KBD> has but a single rotor, files encryptedwith <KBDCLASS="command">crypt</KBD> are exceedingly easy for a cryptographerto break. For several years, noncryptographers have been able tobreak messages encrypted with <KBDCLASS="command">crypt</KBD> as well, thanks to a programdeveloped in 1986 by Robert <ACLASS="indexterm"NAME="AUTOID-8152"></A>Baldwin,then at the <SPANCLASS="acronym">MIT</SPAN> Laboratory for Computer Science.Baldwin's program, <ACLASS="indexterm"NAME="AUTOID-8155"></A><ACLASS="indexterm"NAME="AUTOID-8157"></A>Crypt Breaker'sWorkbench (<SPANCLASS="acronym">CBW</SPAN>), decrypts text files encryptedwith <KBDCLASS="command">crypt</KBD> within a matter of minutes, with minimal help from theuser.</P><PCLASS="para"><SPANCLASS="acronym">CBW</SPAN> breaks <KBDCLASS="command">crypt</KBD> by searching for arrangementsof &quot;wires&quot; within the &quot;rotor&quot;that cause a file encrypted with crypt to decrypt into plain <SPANCLASS="acronym">ASCII</SPAN>text. The task is considerably simpler than it may sound at first,because normal <SPANCLASS="acronym">ASCII</SPAN> text uses only 127 of thepossible 256 different code combinations (the <SPANCLASS="acronym">ASCII</SPAN>codes 0 and 128 through 255 do not appear in normal <SPANCLASS="acronym">UNIX</SPAN>text). Thus, most arrangements of the &quot;wires&quot;produce invalid characters when the file is decrypted; <SPANCLASS="acronym">CBW</SPAN>automatically discards these arrangements.</P><PCLASS="para"><SPANCLASS="acronym">CBW</SPAN> has been widely distributed; as a result,files encrypted with crypt should not be considered secure. (Theyweren't secure before <SPANCLASS="acronym">CBW</SPAN> was distributed;fewer people simply had the technical skill necessary to break them.)</P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="PUIS-CHP-6-SECT-6.1.2">6.6.1.2 Ways of improving the security of crypt</A></H4><PCLASS="para">We recommend that you do not use <KBDCLASS="command">crypt</KBD>to encrypt files more than 1K long. Nevertheless, you may have noother encryption system readily available to you. If this is thecase, you are better off using <KBDCLASS="command">crypt</KBD> than nothingat all. You can also take a few simple precautions that will decreasethe chances that your encrypted files will be decrypted:[25]</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[25] In particular, these precautions will defeat CBW'sautomatic crypt-breaking activities.</P></BLOCKQUOTE><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">Encrypt the file multiple times, usingdifferent keys at each stage. This essentially changes the transformation.</P></LI><LICLASS="listitem"><PCLASS="para">Compress your files before encrypting them. Compressinga file alters the information&nbsp;- the plain <SPANCLASS="acronym">ASCII</SPAN>text&nbsp;- that programs such as <SPANCLASS="acronym">CBW</SPAN> use todetermine when they have correctly assembled part of the encryptionkey. If your message does not decrypt into plain text, <SPANCLASS="acronym">CBW</SPAN>will not determine when it has correctly decrypted your message.However, if your attackers know you have done this, they can modifytheir version of <SPANCLASS="acronym">CBW</SPAN> accordingly.</P></LI><LICLASS="listitem"><PCLASS="para">If you use <ACLASS="indexterm"NAME="AUTOID-8190"></A><ACLASS="indexterm"NAME="AUTOID-8192"></A><KBDCLASS="command">compress</KBD>or <KBDCLASS="command">pack</KBD> to compress your file, remove the 3-byte header. Files compressedwith <KBDCLASS="command">compress</KBD> contain a 3-byte signature, or header, consistingof the hexadecimal values 1f, 9d and 90 (in that order). If yourattacker believes that your file was compressed before it was encrypted,knowing how the first three bytes decrypt can help him to decryptthe rest of the file. You can strip these three bytes with the <ACLASS="indexterm"NAME="AUTOID-8197"></A><KBDCLASS="command">dd</KBD> command:[26]</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[26] Using <KBDCLASS="command">dd</KBD>this way is very slow and inefficient. If you are going to be encryptinga lot of compressed files, you may wish to write a small programto remove the headers more efficiently.</P></BLOCKQUOTE><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% compress -c &lt;plaintext | dd bs=3 skip=1 | crypt &gt;encrypted</PRE></BLOCKQUOTE></LI></UL><PCLASS="para">Of course, you must remember to replace the 3-byte headerbefore you attempt to uncompress the file:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% (compress -cf /dev/null;crypt &lt;encrypted) | uncompress -c &gt;plaintext</PRE></BLOCKQUOTE><PCLASS="para">If you do not have <KBDCLASS="command">compress</KBD>, use <ACLASS="indexterm"NAME="AUTOID-8208"></A>tarto bundle your file to be encrypted with other files containingrandom data; then encrypt the tar file. The presence of random datawill make it more difficult for decryption programs such as <SPANCLASS="acronym">CBW</SPAN>to isolate your plaintext.</P><PCLASS="para">As encrypted files contain binary information, you must processthem with <ACLASS="indexterm"NAME="AUTOID-8212"></A><KBDCLASS="command">uuencode</KBD> if youwish to email them.</P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="PUIS-CHP-6-SECT-6.1.3">6.6.1.3 Example</A></H4><PCLASS="para">To <KBDCLASS="command">compress</KBD>, <KBDCLASS="command">encrypt</KBD>, <KBDCLASS="command">unencode</KBD>, and send a file with electronicmail:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <BCLASS="emphasis.bold">ls -l myfile</B> -rw-r--r-- 1 fred 166328 Nov 16 15:25 myfile % <BCLASS="emphasis.bold">compress myfile</B> % <BCLASS="emphasis.bold">ls -l myfile.Z</B> -rw-r--r-- 1 fred 78535 Nov 16 15:25 myfile.Z % <BCLASS="emphasis.bold">dd if=myfile.Z of=myfile.Z.strip bs=3 skip=1</B> 26177+1 records in 26177+1 records out % <BCLASS="emphasis.bold">crypt akey &lt; myfile.Z.strip | uuencode afile | mail spook@nsa.gov</B></PRE></BLOCKQUOTE><PCLASS="para">To decrypt a file that you have received and saved in the<ICLASS="filename">file</I> text file:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <BCLASS="emphasis.bold">head -3 file</B> begin 0600 afile M?Z/#V3V,IGO!](D!175:;S9_IU\A7K;:'LBB,8363R,T+/WZSOC4PQ,U/6Q MX,T8&amp;XZDQ1+[4Y[*N4W@A3@9YM*4XV+U\)X9NT.7@Z+W&quot;WY^9-?(JRU,-4% % <BCLASS="emphasis.bold">uudecode file</B> % <BCLASS="emphasis.bold">ls -l afile</B> -rw-r--r-- 1 fred 78532 Nov 16 15:32 afile % <BCLASS="emphasis.bold">(compress -cf /dev/null;crypt &lt; afile) | uncompress -c &gt; myfile</B></PRE></BLOCKQUOTE><PCLASS="para"><KBDCLASS="command">myfile</KBD> now contains the original file. <ACLASS="indexterm"NAME="AUTOID-8236"></A><ACLASS="indexterm"NAME="AUTOID-8238"></A></P></DIV></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-6-SECT-6.2">6.6.2 des: The Data Encryption Standard</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-8245"></A><ACLASS="indexterm"NAME="AUTOID-8247"></A>There are several software implementationsof the Data Encryption Standard that are commonly available for<SPANCLASS="acronym">UNIX</SPAN> computers. Several of the most popular implementationsare based on the <KBDCLASS="command">des</KBD> code written by <ACLASS="indexterm"NAME="AUTOID-8252"></A>Phil Karn, a <SPANCLASS="acronym">UNIX</SPAN> guru (and hamradio operator whose call sign is KA9Q). In the past, some <SPANCLASS="acronym">UNIX</SPAN>vendors have included des commands as part of their operating system,although many of these implementations have been removed so thatthe companies can maintain a single version of their operating systemfor both export and domestic use.[27] Nevertheless,<KBDCLASS="command">des</KBD> software is widely available both insideand outside the United States.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[27] For example, SunMicrosystems ships the easily broken crypt encryption program withSolaris, and sells a &quot;US Encryption Kit&quot; whichcontains the des program at a nominal cost.</P></BLOCKQUOTE><PCLASS="para">The des command is a filter that reads from standard inputand writes to standard output. It usually accepts the followingcommand-line options:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% des -e|-d [-h] [-k key] [-b] </PRE></BLOCKQUOTE><PCLASS="para">When using the <SPANCLASS="acronym">DES</SPAN>, encryption and decryptionare not identical operations, but are inverses of each other. Theoption -e specifies that you are encrypting a file. For example:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% des -e &lt;message &gt; message.desEnter key: <ICLASS="systemitem.password">mykey</I>Enter key again: <ICLASS="systemitem.password">mykey</I>% cat message.des&quot;UI}mE8NZlOi\Iy| </PRE></BLOCKQUOTE><PCLASS="para">(The <KBDCLASS="command">Enter key:</KBD> prompt is from the program;the key is not echoed.)</P><PCLASS="para">Use the <KBDCLASS="command">-d</KBD> option to decrypt your file:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% des -d &lt; message.desEnter key: mykeyEnter key again: mykeyThis is the secret message.&#13;</PRE></BLOCKQUOTE><PCLASS="para">You can use the <KBDCLASS="command">-k</KBD> option to specify the key on the commandline. On most versions of <SPANCLASS="acronym">UNIX</SPAN>, any user of thesystem can use the <ACLASS="indexterm"NAME="AUTOID-8274"></A><KBDCLASS="command">ps</KBD> command tosee what commands other users are running. Karn's versionof <KBDCLASS="command">des</KBD> tries to mitigate the danger of the <KBDCLASS="command">ps</KBD> command by makinga copy of its command line arguments and erasing the original. Nevertheless,this is a potential vulnerability, and should be used with caution.</P><BLOCKQUOTECLASS="note"><PCLASS="para"><STRONG>NOTE:</STRONG> You should never specify a key in a shell script: anybodywho has access to read the script will be able to decode your files.</P></BLOCKQUOTE><PCLASS="para">A <KBDCLASS="command">-b</KBD> option to the command selects <ACLASS="indexterm"NAME="AUTOID-8283"></A><ACLASS="indexterm"NAME="AUTOID-8286"></A>Electronic CodeBook (<SPANCLASS="acronym">ECB</SPAN>) mode. The default is <ACLASS="indexterm"NAME="AUTOID-8289"></A><ACLASS="indexterm"NAME="AUTOID-8292"></A>Cipher BlockChaining (<SPANCLASS="acronym">CBC</SPAN>). As described in &quot;DESmodes&quot; earlier in this chapter, <SPANCLASS="acronym">ECB</SPAN>mode encodes a block at a time, with identical input blocks encodingto identical output blocks. This encoding will reveal if there isa pattern to the input. However, it will also be able to decryptmost of the file even if parts of it are corrupted or deleted. <SPANCLASS="acronym">CBC</SPAN>mode hides repeated patterns, and results in a file that cannotbe decrypted after any point of change or deletion.</P><PCLASS="para">If you use the <KBDCLASS="command">-h</KBD> option, <KBDCLASS="command">des</KBD> will allowyou to specify a key in hexadecimal. Such keys should be randomlygenerated. If you do not specify a key in hexadecimal, then yourkey will most likely be restricted to characters that you can typeon your keyboard. Many people further restrict their keys to wordsor phrases that they can remember (see the sidebar entitled &quot;Numberof Passwords&quot; in <ACLASS="xref"HREF="ch03_01.htm"TITLE="Users and Passwords">Chapter 3, <CITECLASS="chapter">Users and Passwords</CITE></A>). Unfortunately, thismethod makes it dramatically easier for an attacker to decrypt a<SPANCLASS="acronym">DES</SPAN>-encrypted file by doing a key search. Tosee why, consider the following table:</P><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="PUIS-CHP-6-TAB-3">Table 6.3: Key Search Comparisons</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Key Choice Algorithm</P></TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Keyspace</P></TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Number of Possible Keys</P></TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Random <SPANCLASS="acronym">DES</SPAN> key</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">128<SUPCLASS="superscript">8</SUP> = 2<SUPCLASS="superscript">56</SUP></P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">7.2 x 10<SUPCLASS="superscript">16</SUP></P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Typeable characters[28]</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">127<SUPCLASS="superscript">8</SUP></P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">6.8 x 10<SUPCLASS="superscript">16</SUP></P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Printable characters</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">96<SUPCLASS="superscript">8</SUP></P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">7.2 x 10<SUPCLASS="superscript">15</SUP></P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Two words</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">1,000,000<SUPCLASS="superscript">2</SUP></P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">10<SUPCLASS="superscript">12</SUP></P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">One word</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">1,000,000</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">10<SUPCLASS="superscript">6</SUP></P></TD></TR></TBODY></TABLE><BLOCKQUOTECLASS="footnote"><PCLASS="para">[28] Youcan't enter null as a character in your key.</P></BLOCKQUOTE><PCLASS="para">Some versions of <KBDCLASS="command">des</KBD> will encrypt a file if it is specifiedon the command line. Input and output filenames are optional. Ifonly one filename is given, it is assumed to be the input file.</P><PCLASS="para">Some versions of <SPANCLASS="acronym">UNIX</SPAN> designed for exportinclude a des command that doesn't do anything. Insteadof encrypting your file, it simply prints an error message explainingthat the software version of des is not available. <ACLASS="indexterm"NAME="AUTOID-8369"></A><ACLASS="indexterm"NAME="AUTOID-8371"></A></P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-6-SECT-6.3">6.6.3 PGP: Pretty Good Privacy</A></H3><PCLASS="para">In 1991, <ACLASS="indexterm"NAME="AUTOID-8377"></A><ACLASS="indexterm"NAME="AUTOID-8379"></A><ACLASS="indexterm"NAME="AUTOID-8381"></A><ACLASS="indexterm"NAME="AUTOID-8384"></A>Phil Zimmermann wrote a program called <SPANCLASS="acronym">PGP</SPAN>which performs both private key and public key cryptography. Thatprogram was subsequently released on the Internet and improved bynumerous programmers, mostly outside of the United States.[29] In 1994, Zimmermann turnedthe distribution of <SPANCLASS="acronym">PGP</SPAN> over to the MassachusettsInstitute of Technology, which makes the software available foranonymous <SPANCLASS="acronym">FTP</SPAN> from the computer <ICLASS="systemitem">net-dist.mit.edu</I>.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[29] Get the whole story! Although this section presents a goodintroduction to PGP, the program is far too complicated to describehere. For a full description of PGP, we recommend the book PGP:Pretty Good Privacy by Simson Garfinkel (O'Reilly &amp;Associates, 1995).</P></BLOCKQUOTE><PCLASS="para">The version of <SPANCLASS="acronym">PGP</SPAN> that is distributedfrom <SPANCLASS="acronym">MIT</SPAN> uses the <SPANCLASS="acronym">RSA</SPAN> DataSecurity software package <SPANCLASS="acronym">RSAREF</SPAN>. This softwareis only available for noncommercial use. If you wish to use <SPANCLASS="acronym">PGP</SPAN>for commercial purposes, you should purchase it from ViaCrypt International(whose address is listed in <ACLASS="xref"HREF="appd_01.htm"TITLE="Paper Sources">Appendix D</A>).</P><PCLASS="para"><SPANCLASS="acronym">PGP</SPAN> Version 2 uses <SPANCLASS="acronym">IDEA</SPAN>as its private key encryption algorithm and <SPANCLASS="acronym">RSA</SPAN>for its public key encryption. (Later versions of <SPANCLASS="acronym">PGP</SPAN>may allow a multiplicity of encryption algorithms to be used, suchas Triple <SPANCLASS="acronym">DES</SPAN>.) <SPANCLASS="acronym">PGP</SPAN> can alsoseal and verify digital signatures, and includes sophisticated key-managementsoftware. It also has provisions for storing public and privatekeys in special files called <ICLASS="firstterm">key rings</I> (illustratedin <ACLASS="xref"HREF="ch06_06.htm#PUIS-CHP-6-FIG-5"TITLE="PGP key rings">Figure 6.5</A>). Finally, <SPANCLASS="acronym">PGP</SPAN>has provisions for certifying keys, again using digital signatures.</P><H4CLASS="figure"><ACLASS="title"NAME="PUIS-CHP-6-FIG-5">Figure 6.5: PGP key rings</A></H4><IMGCLASS="graphic"SRC="figs/puis_0605.gif"ALT="Figure 6.5"><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="PUIS-CHP-6-SECT-6.3.1">6.6.3.1 Encrypting files with IDEA</A></H4><PCLASS="para">You can use <SPANCLASS="acronym">PGP</SPAN> to encrypt a file withthe <ACLASS="indexterm"NAME="AUTOID-8418"></A><ACLASS="indexterm"NAME="AUTOID-8420"></A><SPANCLASS="acronym">IDEA</SPAN>encryption cipher with the following command line:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% pgp -c messagePretty Good Privacy(tm) 2.6.1 - Public-key encryption for the masses.(c) 1990-1994 Philip Zimmermann, Phil's Pretty Good Software. 29 Aug 94Distributed by the Massachusetts Institute of Technology.  Uses RSAREF.Export of this software may be restricted by the U.S. government.Current time: 1995/02/12 03:32 GMTYou need a pass phrase to encrypt the file.Enter pass phrase:<ICLASS="systemitem.password">some days green tomatoes</I>Enter same pass phrase again: <ICLASS="systemitem.password">some days green tomatoes</I>Just a moment....Ciphertext file: message.pgp%</PRE></BLOCKQUOTE><PCLASS="para">Rather than using your pass phrase as the cryptographic key,<SPANCLASS="acronym">PGP</SPAN> instead calculates the MD5 hash functionand uses the hash. This means that you can use a pass phrase ofany length. Because <SPANCLASS="acronym">IDEA</SPAN> uses a 128-bit key,key-search attacks are not feasible.</P><PCLASS="para"><SPANCLASS="acronym">PGP</SPAN> automatically compresses everythingthat it encrypts, which is fortunate, because after a file is encrypted,it cannot be compressed further: the output will appear random,and file compression requires some repeated patterns to compress.</P><PCLASS="para">If you want to decrypt your file, run <SPANCLASS="acronym">PGP</SPAN>with the encrypted file as its sole argument:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% pgp message.pgpPretty Good Privacy(tm) 2.6.1 - Public-key encryption for the masses.(c) 1990-1994 Philip Zimmermann, Phil's Pretty Good Software. 29 Aug 94Distributed by the Massachusetts Institute of Technology.  Uses RSAREF.Export of this software may be restricted by the U.S. government.Current time: 1995/02/12 03:47 GMTFile is conventionally encrypted.You need a pass phrase to decrypt this file.Enter pass phrase: <ICLASS="systemitem.password">some days green tomatoes</I>Just a moment....Pass phrase appears good. .Plaintext filename: message%</PRE></BLOCKQUOTE><PCLASS="para">If you do not type the correct <ACLASS="indexterm"NAME="AUTOID-8436"></A><ACLASS="indexterm"NAME="AUTOID-8438"></A>passphrase, <SPANCLASS="acronym">PGP</SPAN> will not decrypt your file:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% pgp message.pgpPretty Good Privacy(tm) 2.6.1 - Public-key encryption for the masses.(c) 1990-1994 Philip Zimmermann, Phil's Pretty Good Software. 29 Aug 94Distributed by the Massachusetts Institute of Technology.  Uses RSAREF.Export of this software may be restricted by the U.S. government.Current time: 1995/02/12 03:48 GMTFile is conventionally encrypted.You need a pass phrase to decrypt this file.Enter pass phrase: <ICLASS="systemitem.password">I am the walrus</I>Just a moment...Error:  Bad pass phrase.You need a pass phrase to decrypt this file.Enter pass phrase: <ICLASS="systemitem.password">Love will find a way</I>Just a moment...Error:  Bad pass phrase.For a usage summary, type:  pgp -hFor more detailed help, consult the PGP User's Guide.%</PRE></BLOCKQUOTE></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="PUIS-CHP-6-SECT-6.3.2">6.6.3.2 Creating your PGP public key</A></H4><PCLASS="para">The <ACLASS="indexterm"NAME="AUTOID-8448"></A><ACLASS="indexterm"NAME="AUTOID-8451"></A>real power of <SPANCLASS="acronym">PGP</SPAN> is notthe encryption of files, but the encryption of electronic mail messages.<SPANCLASS="acronym">PGP</SPAN> uses public key cryptography, which allowsanybody to create a message and encrypt it using your public key.After the message is encrypted, no one can decrypt it unless someonehas your secret key. (Ideally, nobody other than you should havea copy of your key.) <SPANCLASS="acronym">PGP</SPAN> also allows you to electronically&quot;sign&quot; a document with a digital signature, whichother people can verify.</P><PCLASS="para">To make use of these features, you will first need to createa public key for yourself and distribute it among your correspondents.Do this with <SPANCLASS="acronym">PGP</SPAN>'s <ACLASS="indexterm"NAME="AUTOID-8460"></A><KBDCLASS="command">-kg</KBD>option:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% pgp -kgPretty Good Privacy(tm) 2.6.1 - Public-key encryption for the masses.(c) 1990-1994 Philip Zimmermann, Phil's Pretty Good Software. 29 Aug 94Distributed by the Massachusetts Institute of Technology.  Uses RSAREF.Export of this software may be restricted by the U.S. government.Current time: 1995/02/12 04:01 GMTPick your RSA key size:    1)   512 bits- Low commercial grade, fast but less secure    2)   768 bits- High commercial grade, medium speed, good security    3)  1024 bits- &quot;Military&quot; grade, slow, highest securityChoose 1, 2, or 3, or enter desired number of bits: 3Generating an RSA key with a 1024-bit modulus.You need a user ID for your public key.  The desired form for thisuser ID is your name, followed by your E-mail address enclosed in&lt;angle brackets&gt;, if you have an E-mail address.For example:  John Q. Smith &lt;12345.6789@compuserve.com&gt;Enter a user ID for your public key:<BCLASS="emphasis.bold">Michelle Love &lt;love@michelle.org&gt;</B>You need a pass phrase to protect your RSA secret key.Your pass phrase can be any sentence or phrase and may have manywords, spaces, punctuation, or any other printable characters.Enter pass phrase:<ICLASS="systemitem.password">every thought burns into substance</I>Enter same pass phrase again:<ICLASS="systemitem.password">every thought burns into substance</I>Note that key generation is a lengthy process.We need to generate 720 random bits.  This is done by measuring thetime intervals between your keystrokes.  Please enter some random texton your keyboard until you hear the beep:<ICLASS="systemitem.password">Here you type a lot of random data that nobody else really sees. It doesn't really matter what you type, just don't hold down the key.</I> 0 * -Enough, thank you...........................++++ ..........++++Key generation completed.%</PRE></BLOCKQUOTE><PCLASS="para">The passphrase is used to encrypt the secret key that is storedon your computer. In this manner, if somebody breaks into your accountor steals your computer, they won't be able to read yourencrypted messages.</P><PCLASS="para">After you've generated your key, you should do twothings with it immediately:</P><OLCLASS="orderedlist"><LICLASS="listitem"><PCLASS="para">Sign it yourself. You should alwayssign your own key right away. Do this as:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% pgp -ks love@michelle.org</PRE></BLOCKQUOTE><PCLASS="para">There are some obscure ways that your key might be abusedif it is circulated without a signature in place, so be sure thatyou sign it yourself.</P></LI><LICLASS="listitem"><PCLASS="para">Generate a <ACLASS="indexterm"NAME="AUTOID-8478"></A>revocationcertificate and store it offline somewhere. <EMCLASS="emphasis">Don't sendit to anyone!</EM> The idea behind generating the revocationright now is that you still remember the passphrase and have thesecret key available. If something should happen to your storedkey, or you forget the passphrase, the public/private keypair becomes useless. Having the revocation certificate ready inadvance allows you to send it out if that should ever happen. Yougenerate the certificate by:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% pgp -kx Michelle revoke.pgpPretty Good Privacy(tm) 2.6.1 - Public-key encryption for the masses.(c) 1990-1994 Philip Zimmermann, Phil's Pretty Good Software. 29 Aug 94Uses the RSAREF(tm) Toolkit, which is copyright RSA Data Security, Inc.Distributed by the Massachusetts Institute of Technology.Export of this software may be restricted by the U.S. government.Current time: 1995/02/12 04:06 GMTExtracting from key ring: `/Users/simsong/Library/pgp/pubring.pgp', userid &quot;Michelle&quot;.Key for user ID: Michelle Love &lt;love@michelle.org&gt;1024-bit key, Key ID 0A965505, created 1995/02/12Key extracted to file `revoke.pgp'.% pgp -kd Michelle revoke.pgpPretty Good Privacy(tm) 2.6.1 - Public-key encryption for the masses.(c) 1990-1994 Philip Zimmermann, Phil's Pretty Good Software. 29 Aug 94Uses the RSAREF(tm) Toolkit, which is copyright RSA Data Security, Inc.Distributed by the Massachusetts Institute of Technology.Export of this software may be restricted by the U.S. government.Current time: 1995/02/12 04:07 GMTKey for user ID: Michelle Love &lt;love@michelle.org&gt;1024-bit key, Key ID 0A965505, created 1995/02/12Do you want to permanently revoke your public keyby issuing a secret key compromise certificatefor &quot;Michelle&quot; (y/N)? yYou need a pass phrase to unlock your RSA secret key. Key for user ID &quot;Michelle&quot;Enter pass phrase: every thought burns into substancePass phrase is good.  Just a moment....Key compromise certificate created.Warning: `revoke.pgp' is not a public keyring</PRE></BLOCKQUOTE></LI></OL><PCLASS="para">Now, save the <ICLASS="filename">revoke.pgp</I> file in a safeplace, off line. For example, you might put it on a clearly labeledfloppy disk, then place the disk inside a clearly labeled envelope.Write your signature across the envelope's flap. Then storethe envelope in your safe-deposit box.</P><PCLASS="para">To extract a printable, <SPANCLASS="acronym">ASCII</SPAN> version ofyour key, use <SPANCLASS="acronym">PGP</SPAN>'s <ACLASS="indexterm"NAME="AUTOID-8487"></A><KBDCLASS="command">-kxaf</KBD>(Key extract <SPANCLASS="acronym">ASCII</SPAN> filter) command:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% pgp -kxaf MichellePretty Good Privacy(tm) 2.6.1 - Public-key encryption for the masses.(c) 1990-1994 Philip Zimmermann, Phil's Pretty Good Software. 29 Aug 94Distributed by the Massachusetts Institute of Technology.  Uses RSAREF.Export of this software may be restricted by the U.S. government.Current time: 1995/02/12 04:11 GMTExtracting from key ring: '/Users/simsong/Library/pgp/pubring.pgp', userid &quot;Mic.Key for user ID: Michelle Love &lt;love@michelle.org&gt;1024-bit key, Key ID 0A965505, created 1995/02/12Key extracted to file 'pgptemp.$00'.-----BEGIN PGP PUBLIC KEY BLOCK-----Version: 2.6.1mQCNAy89iJMAAAEEALrXJQpVmkTCtjp5FrkCvceFZydiEq2xGgoBvDUOn92XtJiHPVvope9VA4Lw2wDAbZDD5oucpGg8I1E4luvHVsvF0mpk2JzzWE1hVxWv4rpYIM+xqSbCryUU5iSneFGPBI5D3nue4wC3XbvQmvYYp5LR6r2eyHU3ktazHzgKllUFAAURtCFNaWNoZWxsZSBMb3ZlIDxsb3ZlQG1pY2hlbGxlLm9yZz4==UPJB-----END PGP PUBLIC KEY BLOCK-----%</PRE></BLOCKQUOTE><PCLASS="para">You can redirect the output of this command to a file, orsimply use your window system's cut-and-paste feature tocopy the key into an email message.</P><PCLASS="para">If you get somebody else's <SPANCLASS="acronym">PGP</SPAN>key, you can add it to your keyring with the <SPANCLASS="acronym">PGP</SPAN><ACLASS="indexterm"NAME="AUTOID-8497"></A><KBDCLASS="command">-ka</KBD> (key add) option. Simply savethe key in a file, then type:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% pgp -ka michelle.pgpPretty Good Privacy(tm) 2.6.1 - Public-key encryption for the masses.(c) 1990-1994 Philip Zimmermann, Phil's Pretty Good Software. 29 Aug 94Distributed by the Massachusetts Institute of Technology.  Uses RSAREF.Export of this software may be restricted by the U.S. government.Current time: 1995/02/12 04:15 GMTLooking for new keys...pub  1024/0A965505 1995/02/12  Michelle Love &lt;love@michelle.org&gt;Checking signatures...Keyfile contains:   1 new key(s)One or more of the new keys are not fully certified.Do you want to certify any of these keys yourself (y/N)? yKey for user ID: Michelle Love &lt;love@michelle.org&gt;1024-bit key, Key ID 0A965505, created 1995/02/12Key fingerprint =  0E 8A 9C C4 CE 44 96 60  83 79 CB F1 F3 02 0C 7EThis key/userID association is not certified.Do you want to certify this key yourself (y/N)? n%</PRE></BLOCKQUOTE></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="PUIS-CHP-6-SECT-6.3.3">6.6.3.3 Encrypting a message</A></H4><PCLASS="para">After you have somebody's public key, you can encrypta message using the <SPANCLASS="acronym">PGP</SPAN>'s <ACLASS="indexterm"NAME="AUTOID-8506"></A><ACLASS="indexterm"NAME="AUTOID-8509"></A><KBDCLASS="command">-eat</KBD> command. This will encrypt the message, saveit in <SPANCLASS="acronym">ASCII</SPAN> (so you can send it with electronicmail), and properly preserve end-of-line characteristics (assumingthat this is a text message). You can sign the message with yourown <ICLASS="firstterm">digital signature</I> by specifying <KBDCLASS="command">-seat</KBD> instead of <KBDCLASS="command">-eat</KBD>. If youwant to use <SPANCLASS="acronym">PGP</SPAN> as a filter, add the letter &quot;<ICLASS="filename">f</I>&quot;to your command. This process is shown graphically in <ACLASS="xref"HREF="ch06_06.htm#PUIS-CHP-6-FIG-6"TITLE="Encrypting email with PGP">Figure 6.6</A>.</P><H4CLASS="figure"><ACLASS="title"NAME="PUIS-CHP-6-FIG-6">Figure 6.6: Encrypting email with PGP</A></H4><IMGCLASS="graphic"SRC="figs/puis_0606.gif"ALT="Figure 6.6"><PCLASS="para">For example, you can take the file message, sign it with yourdigital signature, encrypt it with Michelle's public key,and send it to her, by using the command:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% cat message | pgp -seatf message Michelle | mail -s message :wlove@michelle.org</PRE></BLOCKQUOTE></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="PUIS-CHP-6-SECT-6.3.4">6.6.3.4 Adding a digital signature to an announcement</A></H4><PCLASS="para">With <SPANCLASS="acronym">PGP</SPAN>, you can add a <ACLASS="indexterm"NAME="AUTOID-8529"></A>digital signatureto a message so that people who receive the message can verify thatit is from you (provided that they have your public key).</P><PCLASS="para">For example, if you wanted to send out a <SPANCLASS="acronym">PGP</SPAN>-signedmessage designed to warm the hearts but dull the minds of your students,you might do it like this:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen"> <ACLASS="indexterm"NAME="AUTOID-8535"></A> % <BCLASS="emphasis.bold">pgp -sat classes</B>Pretty Good Privacy(tm) 2.6.1 - Public-key encryption for the masses.(c) 1990-1994 Philip Zimmermann, Phil's Pretty Good Software. 29 Aug 94Distributed by the Massachusetts Institute of Technology.  Uses RSAREF.Export of this software may be restricted by the U.S. government.Current time: 1995/02/12 04:30 GMTA secret key is required to make a signature.You need a pass phrase to unlock your RSA secret key.Key for user ID &quot;simson&quot;Enter pass phrase: <ICLASS="systemitem.password">all dogs go to heaven</I>Pass phrase is good.Key for user ID: Simson L. Garfinkel &lt;simsong@acm.org&gt;1024-bit key, Key ID 903C9265, created 1994/07/15Also known as: simsong@pleasant.cambridge.ma.usAlso known as: simsong@next.cambridge.ma.usAlso known as: simsong@mit.eduJust a moment....Clear signature file: classes.asc%</PRE></BLOCKQUOTE><PCLASS="para">The signed message itself looks like this:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <BCLASS="emphasis.bold">cat classes.asc</B>-----BEGIN PGP SIGNED MESSAGE-----Classes are cancelled for the following two months. Everybody enrolledin the course will get an A.- -Your Professor-----BEGIN PGP SIGNATURE-----Version: 2.6.1iQCVAwUBLz2Ow3D7CbCQPJJlAQH7CAP/V5COuOPGTDhSeGl6XkxKiVAPD9JDfeNd5mFr8K/N7W9tyj7THiS/eI92e5/cRI/5z6KzxbSNIx8gGe4h9/bjO5a6rUfa3C+Kj0zCIwETQzSE3tVWXxQv7it4HBZY+xJL8C1CinEckZZc09PvGwyYbPe4tSF8GHHl0zyTTtueqLg==3ihy-----END PGP SIGNATURE-----%</PRE></BLOCKQUOTE></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="PUIS-CHP-6-SECT-6.3.5">6.6.3.5 Decrypting messages and verifying signatures</A></H4><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-8546"></A><ACLASS="indexterm"NAME="AUTOID-8549"></A>To decrypt a message or verifya signature on a message, simply save the message into a file. Thenrun <SPANCLASS="acronym">PGP</SPAN>, specifying the filename as your soleargument. If you are decrypting a message, you will need to typeyour pass phrase. For example, to decrypt a message that has beensent you, use the following command:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <BCLASS="emphasis.bold">cat message.asc</B>-----BEGIN PGP MESSAGE-----Version: 2.6.1hIwDcPsJsJA8kmUBBACN/HinvYo1GRL+p6pT14OV3L50q/v1aqGsHHSOa37t89O123/jm6lzTuh83Qy5KbMpLkMbRg/5FqTD56GX9MoyP4IuLzKxtuA87n9j/pYv4ES3I0aCUMOvU8SqNTM1qC+ZV7j6NeseCUiRrMFVVlr5uZ2TH8kkDiQBd0x1/h7LNaYAAACFsT5sa/rd1uh/1A7yDSqZZNGzlCn0aC55o8lgSoPKOgvT0JGZFFOS5h+v3wxw/U752OaQaSIIj0rVK8UT0thSxyM8xoMIRmBJgmwoloKI+/THy5/Toy8FIqS5taHuo0wkuhDwcjNg4PJ3dZkoLwnGWwwM3y5vKqrMFHQfNnO6xJ9qBqnKLg===EEko-----END PGP MESSAGE-----%</PRE></BLOCKQUOTE><PCLASS="para">Process the file with <SPANCLASS="acronym">PGP</SPAN>:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <BCLASS="emphasis.bold">pgp message.asc</B>Pretty Good Privacy(tm) 2.6.1 - Public-key encryption for the masses.(c) 1990-1994 Philip Zimmermann, Phil's Pretty Good Software. 29 Aug 94Distributed by the Massachusetts Institute of Technology.  Uses RSAREF.Export of this software may be restricted by the U.S. government.Current time: 1995/02/12 04:54 GMTFile is encrypted.  Secret key is required to read it.Key for user ID: simson1024-bit key, Key ID 903C9265, created 1994/07/15Also known as: simsong@pleasant.cambridge.ma.usAlso known as: simsong@next.cambridge.ma.usAlso known as: simsong@mit.eduAlso known as: Simson L. Garfinkel &lt;simsong@acm.org&gt;You need a pass phrase to unlock your RSA secret key.Enter pass phrase: subcommander marcosPass phrase is good.  Just a moment......Plaintext filename: message% cat messageHi Simson!Things are all set. We are planning the military takeover for next Tuesday. Bring your lasers.-Carlos%</PRE></BLOCKQUOTE><PCLASS="para">You can also specify the &quot;<KBDCLASS="command">f</KBD>&quot;option, which causes <SPANCLASS="acronym">PGP</SPAN> to simply send the decryptedfile to stdout.</P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="PUIS-CHP-6-SECT-6.3.6">6.6.3.6 PGP detached signatures</A></H4><PCLASS="para"><SPANCLASS="acronym">PGP</SPAN> has the ability to store digital signaturesin a separate file from the original document. Such a signatureis called a <ICLASS="firstterm"><ACLASS="indexterm"NAME="AUTOID-8567"></A><ACLASS="indexterm"NAME="AUTOID-8569"></A>detached signature</I>. Detached signaturesare recommended for binary files, such as programs, because thesignature will not change the data.</P><PCLASS="para">For the <SPANCLASS="acronym">UNIX</SPAN> <ACLASS="indexterm"NAME="AUTOID-8574"></A>system administrator, one of the trulyvaluable things that you can do with <SPANCLASS="acronym">PGP</SPAN> is tocreate detached signatures of your critical system files. Thesesignatures will be signed by you, the system administrator. You(or other users on your system) can then use these signatures todetect unauthorized modification in the critical system files: ifthe files that you sign are ever modified, the signature will nolonger validate.</P><PCLASS="para">For example, to create a detached signature for the <KBDCLASS="command">/bin/login</KBD>program, you could use <SPANCLASS="acronym">PGP</SPAN>'s <ACLASS="indexterm"NAME="AUTOID-8581"></A><KBDCLASS="command">-sb</KBD>flags:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen"># pgp -sb /bin/login -u simsongPretty Good Privacy(tm) 2.6.1 - Public-key encryption for the masses.(c) 1990-1994 Philip Zimmermann, Phil's Pretty Good Software. 29 Aug 94Distributed by the Massachusetts Institute of Technology.  Uses RSAREF.Export of this software may be restricted by the U.S. government.Current time: 1995/09/12 15:28 GMTA secret key is required to make a signature. You need a pass phrase to unlock your RSA secret key. Key for user ID &quot;simsong@pleasant.cambridge.ma.us&quot;Enter pass phrase: nobody knows my namePass phrase is good.  Key for user ID: Simson L. Garfinkel &lt;simsong@acm.org&gt;1024-bit key, Key ID 903C9265, created 1994/07/15Also known as: simsong@pleasant.cambridge.ma.usAlso known as: simsong@next.cambridge.ma.usAlso known as: simsong@mit.eduJust a moment....Signature file: /bin/login.sig#</PRE></BLOCKQUOTE><PCLASS="para">In this example, the superuser ran <SPANCLASS="acronym">PGP</SPAN>so that the signature for /bin/login could berecorded in <KBDCLASS="command">/bin/login.sig</KBD> (the default location).You could specify a different location to save the signature byusing <ACLASS="indexterm"NAME="AUTOID-8589"></A><SPANCLASS="acronym">PGP</SPAN>'s-<ICLASS="filename">o</I> <ICLASS="filename">filename</I> option.</P><PCLASS="para">To verify the signature, simply run <SPANCLASS="acronym">PGP</SPAN>,supplying the signature and the original file as command line arguments:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% pgp /bin/login.sig /bin/loginPretty Good Privacy(tm) 2.6.1 - Public-key encryption for the masses.(c) 1990-1994 Philip Zimmermann, Phil's Pretty Good Software. 29 Aug 94Distributed by the Massachusetts Institute of Technology.  Uses RSAREF.Export of this software may be restricted by the U.S. government.Current time: 1995/09/12 15:32 GMTFile has signature.  Public key is required to check signature. File '/bin/login.sig' has signature, but with no text.Text is assumed to be in file '/bin/login'..Good signature from user &quot;Simson L. Garfinkel &lt;simsong@acm.org&gt;&quot;.Signature made 1995/09/12 15:28 GMTSignature and text are separate.  No output file produced. % </PRE></BLOCKQUOTE><PCLASS="para">Using digital signatures to validate the integrity of yoursystem's executables is a better technique than using simplecryptographic checksum schemes, such as <ACLASS="indexterm"NAME="AUTOID-8599"></A>MD5. Digital signatures are betterbecause with a simple MD5 scheme, you risk an attacker'smodifying <EMCLASS="emphasis">both </EM>the binary file and the filecontaining the MD5 checksums. With digital signatures, you don'thave to worry about an attacker's recreating the signature,because the attacker does not have access to the secret key. (However,you still need to worry about someone altering the source code ofyour checksum program to make a copy of your secret key when youtype it.)</P><BLOCKQUOTECLASS="note"><PCLASS="para"><STRONG>NOTE:</STRONG> <EMCLASS="emphasis">Protect your key! </EM>No matter howsecure your encryption system is, you should take the same precautionswith your encryption key that you take with your password: thereis no sense in going to the time and expense of encrypting all ofyour data with strong ciphers such as <SPANCLASS="acronym">DES</SPAN> or<SPANCLASS="acronym">RSA</SPAN> if you keep your encryption keys in a filein your home directory, or write them on a piece of paper attachedto your terminal.</P><PCLASS="para">Finally, <EMCLASS="emphasis">never use any of your passwords as an encryptionkey!</EM> If an attacker learns your password, your encryptionkey will be the only protection for your data. Likewise, if theencryption program is weak or compromised, you do not want yourattacker to learn your password by decrypting your files. The onlyway to prevent this scenario is by using different words for yourpassword and encryption keys.</P></BLOCKQUOTE><DIVCLASS="sidebar"><H4CLASS="sidebar"><ACLASS="title"NAME="AUTOID-8610">Our PGP Keys</A></H4><PCLASS="para">One way to verify someone's key is by getting itfrom him or her in person. If you get the key directly from theperson involved, you can have some confidence that the key is reallyhis. Alternatively, you can get the key from a public keyserver,<SPANCLASS="acronym">WWW</SPAN> page, or other location. Then, you verifythe <ICLASS="firstterm"><ACLASS="indexterm"NAME="AUTOID-8615"></A>key fingerprint</I>.This is normally generated as <KBDCLASS="command">pgp -<ACLASS="indexterm"NAME="AUTOID-8619"></A>kvckeyid</KBD>. You can do this over the telephone, or in person.You can also do it by finding the key fingerprint in a trusted location... such as printed in a book.</P><PCLASS="para">Here are the key ids and fingerprints for our keys. The keysthemselves may be obtained from the public key servers. If you don'tknow how to access the key servers, read the <SPANCLASS="acronym">PGP</SPAN>documentation, or Simson's <SPANCLASS="acronym">PGP</SPAN> book,also from O'Reilly.</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">pub  1024/FC0C02D5 1994/05/16 Eugene H. Spafford &lt;spaf@cs.purdue.edu&gt;Key fingerprint =  9F 30 B7 C5 8B 52 35 8A  42 4B 73 EE 55 EE C5 41pub 1024/903C9265 1994/07/15 Simson L. Garfinkel &lt;simsong@acm.org&gt;Key fingerprint =  68 06 7B 9A 8C E6 58 3D  6E D8 0E 90 01 C5 DE 01 <ACLASS="indexterm"NAME="AUTOID-8626"></A><ACLASS="indexterm"NAME="AUTOID-8629"></A><ACLASS="indexterm"NAME="AUTOID-8632"></A> </PRE></BLOCKQUOTE></DIV></DIV></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch06_05.htm"TITLE="6.5 Message Digests and Digital Signatures"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 6.5 Message Digests and Digital Signatures"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="Practical UNIX &amp; Internet Security"><IMGSRC="../gifs/txthome.gif"ALT="Practical UNIX &amp; Internet Security"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch06_07.htm"TITLE="6.7 Encryption and U.S. Law"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 6.7 Encryption and U.S. Law"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">6.5 Message Digests and Digital Signatures</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">6.7 Encryption and U.S. Law</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><PCLASS="nav"><FONTSIZE="-1">[ <AHREF="../index.htm"TITLE="The Networking CD Bookshelf">Library Home</A> | <AHREF="../dnsbind/index.htm"TITLE="DNS &amp; BIND">DNS &amp; BIND</A> | <AHREF="../tcpip/index.htm"TITLE="TCP/IP Network Administration">TCP/IP</A> | <AHREF="../sendmail/index.htm"TITLE="sendmail">sendmail</A> | <AHREF="../smdref/index.htm"TITLE="sendmail Desktop Reference">sendmail Reference</A> | <AHREF="../firewall/index.htm"TITLE="Building Internet Firewalls">Firewalls</A> | <AHREF="index.htm"TITLE="Practical UNIX &amp; Internet Security">Practical Security</A> ]</FONT></P></DIV></BODY></HTML>