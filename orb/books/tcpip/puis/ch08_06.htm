<HTML><HEAD><TITLE>[Chapter 8] 8.6 The UNIX Encrypted Password System</TITLE><METANAME="DC.title"CONTENT="Practical UNIX &amp; Internet Security"><METANAME="DC.creator"CONTENT="Simson Garfinkel &amp; Gene Spafford"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1999-02-04T00:05:57Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-148-8"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch08_01.htm"TITLE="8. Defending  Your Accounts"><LINKREL="prev"HREF="ch08_05.htm"TITLE="8.5 Protecting the root Account"><LINKREL="next"HREF="ch08_07.htm"TITLE="8.7 One-Time Passwords"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="Practical UNIX &amp; Internet Security"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,65"HREF="index.htm"ALT="Practical UNIX &amp; Internet Security"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch08_05.htm"TITLE="8.5 Protecting the root Account"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 8.5 Protecting the root Account"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 8<BR>Defending  Your Accounts</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch08_07.htm"TITLE="8.7 One-Time Passwords"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 8.7 One-Time Passwords"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="PUIS-CHP-8-SECT-6">8.6 The UNIX Encrypted Password System</A></H2><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11044"></A><ACLASS="indexterm"NAME="AUTOID-11047"></A>When <SPANCLASS="acronym">UNIX</SPAN>requests your password, it needs some way of determining that thepassword you type is the correct one. Many early computer systems(and quite a few still around today!) kept the passwords for allof their accounts plainly visible in a so-called &quot;passwordfile&quot; that really contained the passwords. Under normalcircumstances, the system protected the passwords so that they couldbe accessed only by privileged users and operating system utilities.But through accident, programming error, or deliberate act, thecontents of the password file almost invariably become availableto unprivileged users. This scenario is illustrated in the followingremembrance:</P><BLOCKQUOTECLASS="blockquote"><PCLASS="para">Perhaps the most memorable such occasion occurredin the early 1960s when a system administrator on the <SPANCLASS="acronym">CTSS</SPAN>system at MIT was editing the password file and another system administratorwas editing the daily message that is printed on everyone'sterminal on login. Due to a software design error, the temporaryeditor files of the two users were interchanged and thus, for atime, the password file was printed on every terminal when it waslogged in.  	&nbsp;- Robert Morris and Ken Thompson,  		PasswordSecurity: A Case History<ACLASS="indexterm"NAME="AUTOID-11054"></A><ACLASS="indexterm"NAME="AUTOID-11056"></A></P></BLOCKQUOTE><PCLASS="para">The real danger posed by such systems, wrote Morris and Thompson,is not that software problems will cause a recurrence of this event,but that people can make copies of the password file and purlointhem without the knowledge of the system administrator. For example,if the password file is saved on backup tapes, then those backupsmust be kept in a physically secure place. If a backup tape is stolen,then<EMCLASS="emphasis"> everybody's</EM> password must be changed.</P><PCLASS="para"><SPANCLASS="acronym">UNIX</SPAN> avoids this problem by not keepingactual passwords anywhere on the system. Instead, <SPANCLASS="acronym">UNIX</SPAN>stores a value that is generated by using the password to encrypta block of zero bits with a one-way function called <EMCLASS="emphasis"><ACLASS="indexterm"NAME="AUTOID-11064"></A>crypt( )</EM>;the result of the calculation is (usually) stored in the file <ICLASS="filename"><ACLASS="indexterm"NAME="AUTOID-11067"></A><ACLASS="indexterm"NAME="AUTOID-11069"></A>/etc/passwd</I>.When you try to log in, the program <EMCLASS="emphasis">/<ACLASS="indexterm"NAME="AUTOID-11073"></A>bin/login</EM><KBDCLASS="command"> </KBD>doesnot actually decrypt your password. Instead, <EMCLASS="emphasis">/bin/login</EM>takes the password that you typed, uses it to transform anotherblock of zeros, and compares the newly transformed block with theblock stored in the <ICLASS="filename">/etc/passwd</I> file. If thetwo encrypted results match, the system lets you in.</P><PCLASS="para">The security of this approach rests upon the strength of theencryption algorithm and the difficulty of guessing the user'spassword. To date, the <EMCLASS="emphasis">crypt </EM>() algorithmhas proven highly resistant to attacks. Unfortunately, users havea habit of picking easy-to-guess passwords (see <ACLASS="xref"HREF="ch03_06.htm#PUIS-CHP-3-SECT-6.1"TITLE="Bad Passwords: Open Doors">Section 3.6.1, "Bad Passwords: Open Doors"</A>), which creates the needfor shadow password files.</P><BLOCKQUOTECLASS="note"><PCLASS="para"><STRONG>NOTE:</STRONG> Don't confuse the <EMCLASS="emphasis">crypt ( )</EM>algorithm with the <EMCLASS="emphasis"><ACLASS="indexterm"NAME="AUTOID-11085"></A>crypt</EM>encryption program. The <EMCLASS="emphasis">crypt</EM> program usesa different encryption system from <EMCLASS="emphasis">crypt ( )</EM>and is very easy to break. See <ACLASS="xref"HREF="ch06_01.htm"TITLE="Cryptography">Chapter 6, <CITECLASS="chapter">Cryptography</CITE></A>,for more details.</P></BLOCKQUOTE><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-8-SECT-6.1">8.6.1 The crypt()Algorithm</A></H3><PCLASS="para">The algorithm that <EMCLASS="emphasis">crypt (  )</EM> uses isbased on the <ACLASS="indexterm"NAME="AUTOID-11094"></A>DataEncryption Standard (<SPANCLASS="acronym">DES</SPAN>) of the National Instituteof Standards and Technology (<SPANCLASS="acronym">NIST</SPAN>). In normaloperation, <SPANCLASS="acronym">DES</SPAN> uses a 56-bit key (eight 7-bit<SPANCLASS="acronym">ASCII</SPAN> characters, for instance) to encrypt blocksof original text, or <ICLASS="firstterm"><ACLASS="indexterm"NAME="AUTOID-11101"></A>cleartext</I>, that are 64 bits in length. The resulting 64-bitblocks of encrypted text, or <ICLASS="firstterm"><ACLASS="indexterm"NAME="AUTOID-11104"></A>ciphertext</I>,cannot easily be decrypted to the original clear text without knowingthe original 56-bit key.</P><PCLASS="para">The <SPANCLASS="acronym">UNIX</SPAN> <EMCLASS="emphasis">crypt (  )</EM>function takes the user's password as the encryption keyand uses it to encrypt a 64-bit block of zeros. The resulting 64-bitblock of cipher text is then encrypted again with the user'spassword; the process is repeated a total of 25 times. The final64 bits are unpacked into a string of 11 printable characters thatare stored in the <ICLASS="filename">/etc/passwd</I> file.[8]</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[8] Each of the 11 characters holds six bits of theresult, represented as one of 64 characters in the set &quot;.&quot;,&quot;/&quot;, 0-9, A-Z, a-z,in that order. Thus, the value 0 is represented as &quot;.&quot;,and 32 is the letter &quot;U&quot;.</P></BLOCKQUOTE><PCLASS="para">Although the source code to <ICLASS="systemitem">crypt( )</I> is readily available, no technique has been discovered(and publicized) to translate the encrypted password back into theoriginal password. Such reverse translation may not even be possible.As a result, the only known way to defeat <SPANCLASS="acronym">UNIX</SPAN>password security is via a brute-force attack (see the note below),or by a <ICLASS="firstterm"><ACLASS="indexterm"NAME="AUTOID-11117"></A>dictionaryattack</I>. A dictionary attack is conducted by choosinglikely passwords, as from a dictionary, encrypting them, and comparingthe results with the value stored in <EMCLASS="emphasis">/etc/passwd</EM>.This approach to breaking a cryptographic cipher is also calleda <ICLASS="firstterm"><ACLASS="indexterm"NAME="AUTOID-11121"></A><ACLASS="indexterm"NAME="AUTOID-11124"></A><ACLASS="indexterm"NAME="AUTOID-11127"></A><ACLASS="indexterm"NAME="AUTOID-11130"></A>key search</I>or <ICLASS="firstterm">password cracking.</I></P><PCLASS="para">Robert Morris and Ken Thompson designed <EMCLASS="emphasis">crypt ()</EM> to make a key search computationally expensive, andtherefore too difficult to be successful. At the time, softwareimplementations of <SPANCLASS="acronym">DES</SPAN> were usually slow; iteratingthe encryption process 25 times made the process of encrypting asingle password 25 times slower still. On the original <ACLASS="indexterm"NAME="AUTOID-11137"></A><SPANCLASS="acronym">PDP</SPAN>-11 processors, uponwhich <SPANCLASS="acronym">UNIX</SPAN> was designed, nearly a full secondof computer time was required to encrypt a single password. To eliminatethe possibility of using <SPANCLASS="acronym">DES</SPAN> hardware encryptionchips, which were a thousand times faster than software runningon a <SPANCLASS="acronym">PDP</SPAN>-11, Morris and Thompson modified the<SPANCLASS="acronym">DES</SPAN> tables used by their software implementation,rendering the two incompatible. The same modification also servedto prevent a bad guy from simply pre-encrypting an entire dictionaryand storing it.</P><PCLASS="para">What was the modification? Morris and Thompson added a bitof <ICLASS="firstterm">salt</I>, as we'll describe below.</P><BLOCKQUOTECLASS="note"><PCLASS="para"><STRONG>NOTE:</STRONG> There is no published or known method to easily decrypt<SPANCLASS="acronym">DES</SPAN>-encrypted text without knowing the key.[9] However,there have been many advances in hardware design since the <SPANCLASS="acronym">DES</SPAN>was developed. Although there is no known software algorithm to&quot;break&quot; the encryption, you can build a highlyparallel, special-purpose <SPANCLASS="acronym">DES</SPAN> decryption enginethat can try all possible keys in a matter of hours.</P><PCLASS="para">The cost of such a machine is estimated at several millionsof dollars. It would work by using a brute-force attack of tryingall possible keys until intelligible text is produced. Several milliondollars is well within the budget of most governments, and a significantnumber of large corporations. A similar machine for finding <SPANCLASS="acronym">UNIX</SPAN>passwords is feasible. Thus, passwords should not be consideredas completely &quot;unbreakable.&quot; <ACLASS="indexterm"NAME="AUTOID-11155"></A></P></BLOCKQUOTE></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-8-SECT-6.2">8.6.2 What Is Salt?</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11160"></A>As table salt addszest to popcorn, the salt that Morris and Thompson sprinkled intothe <SPANCLASS="acronym">DES</SPAN> algorithm added a little more spice andvariety. The <SPANCLASS="acronym">DES</SPAN> salt is a 12-bit number, between0 and 4095, which slightly changes the result of the <SPANCLASS="acronym">DES</SPAN>function. Each of the 4096 different salts makes a password encrypta different way.</P><PCLASS="para">When you change your password, the <ICLASS="filename">/bin/passwd</I><ACLASS="indexterm"NAME="AUTOID-11167"></A><ACLASS="indexterm"NAME="AUTOID-11169"></A><ACLASS="indexterm"NAME="AUTOID-11173"></A>program selects a salt based on the time of day.The salt is converted into a two-character string and is storedin the <ICLASS="filename">/etc/passwd</I> file along with the encrypted&quot;password.&quot;[10] In this manner, whenyou type your password at login time, the same salt is used again.<SPANCLASS="acronym">UNIX</SPAN> stores the salt as the first two charactersof the encrypted password.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[10] By now,you know that what is stored in the <ICLASS="filename">/etc/passwd</I>file is not really the encrypted password. However, everyone callsit that, and we will do the same from here on. Otherwise, we'llneed to keep typing &quot;the superencrypted block of zerosthat is used to verify the user's password&quot; everywherein the book, filling many extra pages and contributing to the prematuredemise of yet more trees.</P></BLOCKQUOTE><PCLASS="para"><ACLASS="xref"HREF="ch08_06.htm#PUIS-CHP-8-TAB-2"TITLE="Passwords and Salts">Table 8.2</A> shows how a few different words encrypt with differentsalts.</P><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="PUIS-CHP-8-TAB-2">Table 8.2: Passwords andSalts</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Password</P></TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Salt</P></TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Encrypted Password</P></TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">nutmeg</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Mi</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">MiqkFWCm1fNJI</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">ellen1</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">ri</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">ri79KNd7V6.Sk</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Sharon</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">./</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">./2aN7ysff3qM</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">norahs</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">am</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">amfIADT2iqjAf</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">norahs</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">7a</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">7azfT5tIdyh0I</P></TD></TR></TBODY></TABLE><PCLASS="para">Notice that the last password, <ICLASS="systemitem">norahs</I>,was encrypted two different ways with two different salts.</P><PCLASS="para">Having a salt means that the same password can encrypt in4096 different ways. This makes it much harder for an attacker tobuild a reverse dictionary for translated encrypted passwords backinto their unencrypted form: to build a reverse dictionary of 100,000words, an attacker would need to have 409,600,000 entries. As aside effect, the salt makes it possible for a user to have the samepassword on a number of different computers and to keep this facta secret (usually), even from somebody who has access to the <EMCLASS="emphasis">/etc/passwd</EM>files on all of those computers; two systems would not likely assignthe same salt to the user, thus ensuring that the encrypted passwordfield is different.[11]</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[11] This case occurs only when theuser actually types in his or her password on the second computer.Unfortunately, in practice system administrators commonly cut andpaste <EMCLASS="emphasis">/etc/passwd</EM> entries from one computerto another when they build accounts for users on new computers.As a result, others can easily tell when a user has the same passwordon more than one system.</P></BLOCKQUOTE></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-8-SECT-6.3">8.6.3 What the Salt Doesn't Do</A></H3><PCLASS="para">Unfortunately, salt is not a cure-all. Although it makes theattacker's job of building a database of all encryptedpasswords more difficult, it doesn't increase the amountof time required to search for a single user's password.</P><PCLASS="para">Another problem with the salt is that it is limited, by design,to one of 4096 different possibilities. In the 20 years since passwordshave been salted, computers have become faster, hard disks havebecome bigger, and you can now put 4, 10, or even 20 gigabytes ofinformation onto a single tape drive. As a result, password fileshave become once again a point of vulnerability, and <SPANCLASS="acronym">UNIX</SPAN>vendors are increasingly turning to shadow password files and othertechniques to fight password-guessing attacks. Yet another problemis that the salt is selected based on the time of day, which makessome salts more likely than others.<ACLASS="indexterm"NAME="AUTOID-11245"></A></P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-8-SECT-6.4">8.6.4 Crypt16() and Other Algorithms</A></H3><PCLASS="para">Some <SPANCLASS="acronym">UNIX</SPAN> operating systems, such as HP-UX,Ultrix, and <SPANCLASS="acronym">BSD</SPAN> 4.4 can be configured to usea different <EMCLASS="emphasis">crypt ( )</EM> system library that uses16 or more significant characters in each password. The algorithmmay also use a significantly larger salt. This algorithm is oftenreferred to as <EMCLASS="emphasis"><ACLASS="indexterm"NAME="AUTOID-11254"></A><ACLASS="indexterm"NAME="AUTOID-11256"></A>bigcrypt</EM>() or <EMCLASS="emphasis">crypt16 </EM>().You should check your user documentation to see if this algorithmis an option available on your system. If so, you should considerusing it. The advantage is that these systems will have more securepasswords. The disadvantage is that the encrypted passwords on thesesystems will not be compatible with the encrypted passwords on othersystems.<ACLASS="indexterm"NAME="AUTOID-11259"></A><ACLASS="indexterm"NAME="AUTOID-11262"></A></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch08_05.htm"TITLE="8.5 Protecting the root Account"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 8.5 Protecting the root Account"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="Practical UNIX &amp; Internet Security"><IMGSRC="../gifs/txthome.gif"ALT="Practical UNIX &amp; Internet Security"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch08_07.htm"TITLE="8.7 One-Time Passwords"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 8.7 One-Time Passwords"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">8.5 Protecting the root Account</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">8.7 One-Time Passwords</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><PCLASS="nav"><FONTSIZE="-1">[ <AHREF="../index.htm"TITLE="The Networking CD Bookshelf">Library Home</A> | <AHREF="../dnsbind/index.htm"TITLE="DNS &amp; BIND">DNS &amp; BIND</A> | <AHREF="../tcpip/index.htm"TITLE="TCP/IP Network Administration">TCP/IP</A> | <AHREF="../sendmail/index.htm"TITLE="sendmail">sendmail</A> | <AHREF="../smdref/index.htm"TITLE="sendmail Desktop Reference">sendmail Reference</A> | <AHREF="../firewall/index.htm"TITLE="Building Internet Firewalls">Firewalls</A> | <AHREF="index.htm"TITLE="Practical UNIX &amp; Internet Security">Practical Security</A> ]</FONT></P></DIV></BODY></HTML>