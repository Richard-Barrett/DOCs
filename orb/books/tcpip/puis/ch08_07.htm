<HTML><HEAD><TITLE>[Chapter 8] 8.7 One-Time Passwords</TITLE><METANAME="DC.title"CONTENT="Practical UNIX &amp; Internet Security"><METANAME="DC.creator"CONTENT="Simson Garfinkel &amp; Gene Spafford"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1999-02-04T00:06:07Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-148-8"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch08_01.htm"TITLE="8. Defending  Your Accounts"><LINKREL="prev"HREF="ch08_06.htm"TITLE="8.6 The UNIX Encrypted Password System"><LINKREL="next"HREF="ch08_08.htm"TITLE="8.8 Administrative Techniques for Conventional Passwords"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="Practical UNIX &amp; Internet Security"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,65"HREF="index.htm"ALT="Practical UNIX &amp; Internet Security"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch08_06.htm"TITLE="8.6 The UNIX Encrypted Password System"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 8.6 The UNIX Encrypted Password System"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 8<BR>Defending  Your Accounts</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch08_08.htm"TITLE="8.8 Administrative Techniques for Conventional Passwords"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 8.8 Administrative Techniques for Conventional Passwords"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="PUIS-CHP-8-SECT-7">8.7 One-Time Passwords</A></H2><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11268"></A><ACLASS="indexterm"NAME="AUTOID-11270"></A>Ifyou manage computers that people will access over the Internet orother computer networks, then you should seriously consider implementingsome form of one-time password system. Otherwise, an attacker caneavesdrop on your legitimate users, capture their passwords, anduse those passwords again at a later time.</P><PCLASS="para">Is such network espionage likely? Absolutely. In recent years,people have broken into computers on key networks throughout theInternet and have installed programs called <ICLASS="firstterm"><ACLASS="indexterm"NAME="AUTOID-11275"></A><ACLASS="indexterm"NAME="AUTOID-11278"></A>passwordsniffers </I>(illustrated in <ACLASS="xref"HREF="ch08_07.htm#PUIS-CHP-8-FIG-2"TITLE="Password sniffing">Figure 8.2</A>)<ICLASS="firstterm">. </I>Theseprograms monitor all information sent over a local area networkand silently record the first 20, 50 or 128 characters sent overeach network connection.[12]In at least one case, a password sniffercaptured tens of thousands of passwords within the space of a fewweeks before the sniffer was noticed; the only reason the sniffer'spresence was brought to the attention of the authorities was becausethe attacker was storing the captured passwords on the compromisedcomputer's hard disk. Eventually, the hard disk filledup, and the computer crashed!</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[12] Some sniffers have been discovered&quot;in the wild&quot; that record 1024 characters, oreven the entire Telnet session. Sniffers have also recorded FTPand NFS transactions.</P></BLOCKQUOTE><H4CLASS="figure"><ACLASS="title"NAME="PUIS-CHP-8-FIG-2">Figure 8.2: Password sniffing</A></H4><IMGCLASS="graphic"SRC="figs/puis_0802.gif"ALT="Figure 8.2"><PCLASS="para">One-time passwords,[13] as their nameimplies, are passwords which can be used only once, as we explainedin <ACLASS="xref"HREF="ch03_01.htm"TITLE="Users and Passwords">Chapter 3, <CITECLASS="chapter">Users and Passwords</CITE></A>. They are one of the only ways of protecting againstpassword sniffers.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[13] Encryption offers anothersolution against password sniffing, although it is harder to implementin practice because of the need for compatible software on bothsides of the network connection.</P></BLOCKQUOTE><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11292"></A><ACLASS="indexterm"NAME="AUTOID-11294"></A>Anotherapplication which demands one-time passwords is mobile network computing,where the connection between computers is established over a radiochannel. When radio is used, passwords are literally broadcast throughthe air, available for capture by anybody with a radio receiver.One way to ensure that a computer account will not be compromisedis to make sure that a password, after transmittal, can never beused again.</P><PCLASS="para">There are many different one-time password systems available.Some of them require that the user carry a hardware device, suchas a smart card or a special calculator. Others are based on cryptography,and require that the user run special software. Still others arebased on paper. <ACLASS="xref"HREF="ch08_07.htm#PUIS-CHP-8-FIG-3"TITLE="Security Dynamics SECURID cards and fob">Figure 8.3</A>, <ACLASS="xref"HREF="ch08_07.htm#PUIS-CHP-8-FIG-4"TITLE="Digital Pathways SecureNet key card">Figure 8.4</A>, and <ACLASS="xref"HREF="ch08_07.htm#PUIS-CHP-8-FIG-5"TITLE="S/Key password printout">Figure 8.5</A> show three commonly usedsystems; we'll describe them briefly in the following sections.</P><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-8-SECT-7.1">8.7.1 Integrating One-time Passwords with UNIX</A></H3><PCLASS="para">In general, you do not need to modify existing software touse these one-time password systems. The simplest way to use themis to replace the user's login <ACLASS="indexterm"NAME="AUTOID-11304"></A><ACLASS="indexterm"NAME="AUTOID-11307"></A>shell (as represented in the <ICLASS="filename">/etc/passwd</I>file; see &quot;Changing the Account's Login Shell&quot;)with a specialized program to prompt for the one-time password.If the user enters the correct password, the program then runs theuser's real command interpreter. If an incorrect passwordis entered, the program can exit, effectively logging the user out.This puts two passwords on the account&nbsp;- the traditionalaccount password, followed by the one-time password.</P><PCLASS="para">For example, here is an <EMCLASS="emphasis">/etc/passwd</EM> entryfor an account to which a Security Dynamics SecurID card key willbe required to log in (see the next section):</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">tla:TcHypr3FOlhAg:237:20:Ted L. Abel:/u/tla:/usr/local/etc/sdshell</PRE></BLOCKQUOTE><PCLASS="para">If you wish to use this technique, you must be sure that userscannot use the <EMCLASS="emphasis"><ACLASS="indexterm"NAME="AUTOID-11316"></A>chsh</EM>program to change their shell back to a program such as <EMCLASS="emphasis">/bin/sh</EM><KBDCLASS="command"></KBD>which does not require one-time passwords.</P><PCLASS="para">A few versions of <SPANCLASS="acronym">UNIX</SPAN> allow the systemadministrator to specify a program (or series of programs) to beused instead of, or in addition to, the standard password authentication.In these systems, the program(s) are run, one after another, andtheir return codes are examined. If any exit with an error code,the login is refused. <ACLASS="indexterm"NAME="AUTOID-11322"></A><ACLASS="indexterm"NAME="AUTOID-11324"></A><SPANCLASS="acronym">AIX</SPAN>is one such system, and future versions of Solaris are slated toinclude such functionality.</P><BLOCKQUOTECLASS="note"><PCLASS="para"><STRONG>NOTE:</STRONG> There are many ways to gain access to a <SPANCLASS="acronym">UNIX</SPAN>system that do not involve running a shell, such as <SPANCLASS="acronym">FTP</SPAN>and <SPANCLASS="acronym">NFS</SPAN>. If you use a special shell to implementone-time-passwords, these methods of access will not use the alternativeauthentication system unless they are specifically modified. Youmay wish to disable them if you are unable to replace them withversions that use the alternate authentication mechanism.</P></BLOCKQUOTE></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-8-SECT-7.2">8.7.2 Token Cards</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11335"></A><ACLASS="indexterm"NAME="AUTOID-11337"></A>One method is to use some form of token-based passwordgenerator. In this scheme, the user has a small card or calculatorwith a built-in set of pre-programmed authentication functions anda serial number. To log in to the host, the user must use the card,in conjunction with a password, to determine the one-time password.Each time the user needs to use a password, the card is consultedto generate one. Each use of the card requires a password knownto the user so that the card cannot be used by anyone stealing it.</P><PCLASS="para">The approach is for the card to have some calculation basedon the time and a secret function or serial number. The user readsa number from a display on the card, combines it with a passwordvalue, and uses this as the password. The displayed value on thecard changes periodically, in a non-obvious manner, and the hostwill not accept two uses of the same number within this interval.</P><PCLASS="para">The <ACLASS="indexterm"NAME="AUTOID-11342"></A>SecurID shown in <ACLASS="xref"HREF="ch08_07.htm#PUIS-CHP-8-FIG-3"TITLE="Security Dynamics SECURID cards and fob">Figure 8.3</A> is one of the best-known examples of a time-based token. Oneversion of the SecurID card is based on a patented technology todisplay a number that changes every 30-90 seconds. The number thatis displayed is a function of the current time and date, and theID of that particular card, and is synchronized with the server.Another version has a keypad which is used to enter a personal identificationnumber (<SPANCLASS="acronym">PIN</SPAN>) code. (Without the keypad, a passwordmust be sent, and this password is vulnerable to eavesdropping.)The fob version shown in the figure provides stronger packaging;it's especially good for people who don't carrywallets or handbags, and carry the device in a pocket. The cardsare the size of a credit card and have a small <SPANCLASS="acronym">LCD</SPAN>window to display the output.</P><H4CLASS="figure"><ACLASS="title"NAME="PUIS-CHP-8-FIG-3">Figure 8.3: Security Dynamics SECURIDcards and fob</A></H4><IMGCLASS="graphic"SRC="figs/puis_0803.gif"ALT="Figure 8.3"><PCLASS="para">A second approach taken with tokens is to present the userwith a challenge at login. The <ACLASS="indexterm"NAME="AUTOID-11351"></A>SecureNetkey shown in <ACLASS="xref"HREF="ch08_07.htm#PUIS-CHP-8-FIG-4"TITLE="Digital Pathways SecureNet key card">Figure 8.4</A> is a token that implements a simple, butsecure, challenge-response system. Unlike the Security Dynamicsproducts, the SecureNet key does not have an internal clock. Tolog in, the user contacts the remote machine, which displays a numberas a challenge. The user types the challenge number into the card,along with its <SPANCLASS="acronym">PIN</SPAN>. The key calculates a responseand displays it. The user then types the response into the remotecomputer as her one-time password. The SecureNet key can be programmedto self-destruct if an incorrect password is entered more than apredefined number of times.</P><H4CLASS="figure"><ACLASS="title"NAME="PUIS-CHP-8-FIG-4">Figure 8.4: Digital Pathways SecureNetkey card</A></H4><IMGCLASS="graphic"SRC="figs/puis_0804.gif"ALT="Figure 8.4"><PCLASS="para">There are many other vendors of one-time tokens, but the ideasbehind their products are all basically the same. Some of thesesystems also can provide interesting add-on features, such as a<ICLASS="firstterm"><ACLASS="indexterm"NAME="AUTOID-11360"></A>duress code</I>.If the user is being coerced to enter the correct password withthe card value, he can enter a different password that will allowlimited access, but will also trigger a remote alarm to notify managementthat something is wrong.</P><PCLASS="para">There are two common drawbacks of these systems: the cardstend to be a bit fragile, and they have batteries that eventuallydischarge. The cost-per-unit may be a significant barrier for anorganization that doesn't have an appropriate budget forsecurity (but they are cheaper than many major break-ins!). Andthe cards can be annoying, especially when you take 90 minutes toget to work, only to discover that you left your token card at home.</P><PCLASS="para">However, the token approach does work reliably and effectively.The vendors of these systems typically provide packages that easilyintegrate them into programs such as /bin/login,as well as libraries that allow you to integrate these tokens intoyour own systems as well. Several major corporations and labs haveused these systems for years. Tokens eliminate the risks of passwordsniffing. They cannot be shared like passwords. Indeed, the tokensdo work as advertised&nbsp;- something that may make them wellworth the cost involved.<ACLASS="indexterm"NAME="AUTOID-11364"></A><ACLASS="indexterm"NAME="AUTOID-11366"></A></P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-8-SECT-7.3">8.7.3 Code Books</A></H3><PCLASS="para">A second popular method for supplying one-time passwords isto generate a <ACLASS="indexterm"NAME="AUTOID-11372"></A>codebook of some sort.This is a list of passwords that are used, one at a time, and thennever reused. The passwords are generated in some way based on ashared secret. This method is a form of <ACLASS="indexterm"NAME="AUTOID-11374"></A>one-time pad (see <ACLASS="xref"HREF="ch06_04.htm#PUIS-CHP-6-SECT-4.7"TITLE="An Unbreakable Encryption Algorithm">Section 6.4.7, "An Unbreakable Encryption Algorithm"</A>).</P><PCLASS="para">When a user wishes to log in to the system in question, theuser either looks up the next password in the code book, or generatesthe next password in the virtual codebook. This password is thenused as the password to give to the system. The user may also needto specify a fixed password along with the codebook entry.</P><PCLASS="para">Codebooks can be static, in which case they may be printedout on a small sheet of paper to be carried by the user. Each timea password is used, the user crosses the entry off the list. Afterthe list is completely used, the system administrator or user generatesanother list. Alternatively, the codebook entries can be generatedby any PC the user may have (this makes it like a token-based system).However, this means that if the user is careless and leaves criticalinformation on the PC (as in a programmed function key), anyoneelse with access to the PC may be able to log in as the user.</P><PCLASS="para">One of the best known forms of codebook schemes is that presentedby <ACLASS="indexterm"NAME="AUTOID-11380"></A>S/Key. S/Keyis a one-time password system developed at Bellcore based on a 1981article by Leslie Lamport. With the system, each user is given amathematical algorithm, which is used to generate a sequence ofpasswords. The user can either run this algorithm on a portablecomputer when needed, or can print out a listing of &quot;goodpasswords&quot; as a paper codebook. <ACLASS="xref"HREF="ch08_07.htm#PUIS-CHP-8-FIG-5"TITLE="S/Key password printout">Figure 8.5</A> shows such alist.</P><PCLASS="para">Unfortunately, the developers of S/Key did not maintainthe system or integrate it into freely redistributable versionsof <ICLASS="filename">/bin/login</I>, <ICLASS="filename">/usr/ucb/ftpd</I>,and other programs that require user authentication. As a result,others undertook those tasks, and there are now a variety of S/Keyimplementations available on the Internet. Each of these has differentfeatures and functionality. We note the location of several <ACLASS="indexterm"NAME="AUTOID-11386"></A><ACLASS="indexterm"NAME="AUTOID-11388"></A>of these systems in <ACLASS="xref"HREF="appe_01.htm"TITLE="Electronic Resources">Appendix E, <CITECLASS="appendix">Electronic Resources</CITE></A>.</P><H4CLASS="figure"><ACLASS="title"NAME="PUIS-CHP-8-FIG-5">Figure 8.5: S/Key password printout</A></H4><IMGCLASS="graphic"SRC="figs/puis_0805.gif"ALT="Figure 8.5"><DIVCLASS="sidebar"><H4CLASS="sidebar"><ACLASS="title"NAME="AUTOID-11395">Kerberos and DCE: Alternativesto One-Time Passwords?</A></H4><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11398"></A><ACLASS="indexterm"NAME="AUTOID-11400"></A>Kerberosand <SPANCLASS="acronym">DCE</SPAN> are two systems which allow workstationsto authenticate themselves to services running on servers withoutever sending a password in clear text over the network. At firstglance, then, Kerberos and <SPANCLASS="acronym">DCE</SPAN> appear immuneto password sniffers. If used properly, they are so.</P><PCLASS="para">Unfortunately, Kerberos and <SPANCLASS="acronym">DCE</SPAN> have theirdrawbacks. The first is that both systems require modification toboth the client and the server: you cannot connect to a Kerberosservice from any workstation on the Internet. Instead, you can onlyuse workstations that are specially configured to run the exactversion of Kerberos or <SPANCLASS="acronym">DCE</SPAN> which your serverhappens to use.</P><PCLASS="para">A bigger problem, though, happens when users try to log intocomputers running Kerberos over the network. Take the example ofan <SPANCLASS="acronym">MIT</SPAN> professor, who wishes to access her <SPANCLASS="acronym">MIT</SPAN>computer account from a colleague's computer at Stanford.In this case, the professor will sit down at the Stanford computer,telnet to the <SPANCLASS="acronym">MIT</SPAN> computer, and type her password.As a result, her password will travel over the Internet in the clearon its way to the secure Kerberos workstation. In the process, itmay be picked up by a password sniffer. The same could happen ifshe were using one of the many <SPANCLASS="acronym">DCE</SPAN> implementationscurrently available.</P><PCLASS="para">Of course, Kerberos isn't supposed to work in thismanner. At Stanford, the <SPANCLASS="acronym">MIT</SPAN> professor is supposedto be able sit down at a Kerberos-equipped workstation and use itto transmit an encrypted password over the Internet using the standardKerberos encryption scheme. The problem, though, is that the workstationmust be able to locate the Kerberos server at <SPANCLASS="acronym">MIT</SPAN>to use it, which often requires prior setup. And the Kerberos- (or<SPANCLASS="acronym">DCE</SPAN>-) equipped workstation, with compatible versionsof the software, needs to be at Stanford in the first place. Thus,while Kerberos and <SPANCLASS="acronym">DCE</SPAN> may seem as if they arealternatives to one-time passwords, they unfortunately are not inmany real-world cases.</P><PCLASS="para">The Kerberos system's biggest problem, though, isthat it still allows users to pick bad passwords and to write themdown.</P></DIV></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch08_06.htm"TITLE="8.6 The UNIX Encrypted Password System"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 8.6 The UNIX Encrypted Password System"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="Practical UNIX &amp; Internet Security"><IMGSRC="../gifs/txthome.gif"ALT="Practical UNIX &amp; Internet Security"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch08_08.htm"TITLE="8.8 Administrative Techniques for Conventional Passwords"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 8.8 Administrative Techniques for Conventional Passwords"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">8.6 The UNIX Encrypted Password System</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">8.8 Administrative Techniques for Conventional Passwords</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><PCLASS="nav"><FONTSIZE="-1">[ <AHREF="../index.htm"TITLE="The Networking CD Bookshelf">Library Home</A> | <AHREF="../dnsbind/index.htm"TITLE="DNS &amp; BIND">DNS &amp; BIND</A> | <AHREF="../tcpip/index.htm"TITLE="TCP/IP Network Administration">TCP/IP</A> | <AHREF="../sendmail/index.htm"TITLE="sendmail">sendmail</A> | <AHREF="../smdref/index.htm"TITLE="sendmail Desktop Reference">sendmail Reference</A> | <AHREF="../firewall/index.htm"TITLE="Building Internet Firewalls">Firewalls</A> | <AHREF="index.htm"TITLE="Practical UNIX &amp; Internet Security">Practical Security</A> ]</FONT></P></DIV></BODY></HTML>