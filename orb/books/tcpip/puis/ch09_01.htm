<HTML><HEAD><TITLE>[Chapter 9] Integrity Management</TITLE><METANAME="DC.title"CONTENT="Practical UNIX &amp; Internet Security"><METANAME="DC.creator"CONTENT="Simson Garfinkel &amp; Gene Spafford"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1999-02-04T00:07:04Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-148-8"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="part03.htm"TITLE="III. System Security"><LINKREL="prev"HREF="ch08_08.htm"TITLE="8.8 Administrative Techniques for Conventional Passwords"><LINKREL="next"HREF="ch09_02.htm"TITLE="9.2 Detecting Change"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="Practical UNIX &amp; Internet Security"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,65"HREF="index.htm"ALT="Practical UNIX &amp; Internet Security"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch08_08.htm"TITLE="8.8 Administrative Techniques for Conventional Passwords"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 8.8 Administrative Techniques for Conventional Passwords"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 9</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch09_02.htm"TITLE="9.2 Detecting Change"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 9.2 Detecting Change"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="CHAPTER"><H1CLASS="chapter"><ACLASS="title"NAME="PUIS-CHP-9">9. Integrity Management</A></H1><DIVCLASS="htmltoc"><P><B>Contents:</B><BR><ACLASS="SECT1"HREF="#PUIS-CHP-9-SECT-1"TITLE="9.1 Prevention">Prevention</A><BR><ACLASS="SECT1"HREF="ch09_02.htm"TITLE="9.2 Detecting Change">Detecting Change</A><BR><ACLASS="SECT1"HREF="ch09_03.htm"TITLE="9.3 A Final Note">A Final Note</A></P><P></P></DIV><PCLASS="para">As <ACLASS="indexterm"NAME="AUTOID-11874"></A><ACLASS="indexterm"NAME="AUTOID-11876"></A><ACLASS="indexterm"NAME="AUTOID-11879"></A><ACLASS="indexterm"NAME="AUTOID-11883"></A>we noted in<ACLASS="xref"HREF="ch02_01.htm"TITLE="Policies and Guidelines">Chapter 2, <CITECLASS="chapter">Policies and Guidelines</CITE></A>, there are several different aspects to computersecurity. <ICLASS="firstterm">Integrity</I> is, in most environments,the most important aspect of computer security. Paradoxically, integrityis also the aspect of security that has also been given low priorityby practitioners over the years. This is so, in large part, becauseintegrity is not the central concern of military security&nbsp;- thedriving force behind most computer security research and commercialdevelopment over the past few decades. In the military model ofsecurity, we want to prevent unauthorized personnel from readingany sensitive data. We also want to prevent anyone from readingdata that may not be sensitive, but that can be combined with otherdata to compromise information. This is called <EMCLASS="emphasis">confidentiality</EM>and is of paramount importance in the military view of computersecurity.</P><PCLASS="para">Confidentiality is a weird priority. It leads us to securitypolicies in which it is acceptable, at some level, to blow up thecomputer center, burn the backup tapes, and kill all the users&nbsp;- providedthat the data files are not read by the attacker!</P><PCLASS="para">In most commercial and research environments, integrity ismore important than confidentiality. If integrity were not the priority,the following scenarios might actually seem reasonable:</P><BLOCKQUOTECLASS="blockquote"><PCLASS="para">&quot;Well, whoever came in over the netwiped out all of <EMCLASS="emphasis">/usr</EM> and <EMCLASS="emphasis">/etc</EM>,but they weren't able to read any of the files in <EMCLASS="emphasis">/tmp</EM>.I guess our security worked!&quot;</P><PCLASS="para">-or-</P><PCLASS="para">&quot;Somebody compromised the root account and added15 new users to <EMCLASS="emphasis">/etc/passwd</EM>, but our securitysystem kept them from doing an <ICLASS="filename">ls</I> of the <EMCLASS="emphasis">/usr/spool/mail</EM>directory. We dodged a bullet on this one!&quot;  	-or-</P><PCLASS="para">&quot;As near as we can tell, one of the people we firedlast week planted a virus in the system that has added itself toevery system binary, and the virus is causing the system to crashevery 15 minutes. We don't have a security problem, though,because we have shut off the network connection to the outside,so nobody will know about it.&quot;</P></BLOCKQUOTE><PCLASS="para">These examples are obviously silly in most settings. We docare about integrity: protecting our data from unauthorized modificationor deletion. In many commercial environments, both confidentialityand integrity are important, but integrity is more important. Mostbanks, for example, desire to keep the account balances of theirdepositors both secret and correct. But, given a choice betweenhaving balances revealed and having them altered, the first is preferableto the second. Integrity is more important than confidentiality.</P><PCLASS="para">In a typical <SPANCLASS="acronym">UNIX</SPAN> system, protecting theintegrity of system and user data can be a major challenge. Thereare many ways to alter and remove data, and often as little as asingle bit change (like a protection bit or owner <SPANCLASS="acronym">UID</SPAN>)can result in the opportunity to make more widespread changes.</P><PCLASS="para">But ensuring integrity is difficult. Consider some of theways that an unauthorized user could change or delete the file <ICLASS="filename">/usr/spaf/notes</I>owned by user <ICLASS="filename">spaf</I>:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">Permissions on <ICLASS="filename">notes</I>allow modification by other users.</P></LI><LICLASS="listitem"><PCLASS="para">Someone is able to compromise the login passwordof user <ICLASS="filename">spaf.</I></P></LI><LICLASS="listitem"><PCLASS="para">Someone is able to compromise user <ICLASS="filename">root</I>.</P></LI><LICLASS="listitem"><PCLASS="para"><ICLASS="filename">setuid </I>programs to <ICLASS="filename">root</I>or to <ICLASS="filename">spaf</I> allow the file to be altered.</P></LI><LICLASS="listitem"><PCLASS="para">Permissions on one of the directories <ICLASS="filename">/,/usr,</I> or <ICLASS="filename">/usr/spaf</I> allow the fileto be deleted.</P></LI><LICLASS="listitem"><PCLASS="para">Permissions can also allow the file <EMCLASS="emphasis">/usr/spaf/notes</EM>to be moved and a new file created in its place. The new file wouldhave ownership and permissions based on who created it. In a sense,the original file would not have been deleted, but only renamed.</P></LI><LICLASS="listitem"><PCLASS="para">Permissions for the group &quot;owner&quot;of the file or one of the containing directories allow another userto modify it.</P></LI><LICLASS="listitem"><PCLASS="para"><ICLASS="filename">/etc/passwd</I> can be alteredby an unauthorized user, allowing someone to become <ICLASS="filename">root</I>or user <ICLASS="filename">spaf.</I></P></LI><LICLASS="listitem"><PCLASS="para">The block device representing the disk containingthe file can be written to by an unprivileged user.</P></LI><LICLASS="listitem"><PCLASS="para">The raw device representing the disk containingthe file can be written to by an unprivileged user.</P></LI><LICLASS="listitem"><PCLASS="para">The directory is exported using some network filesystemthat can be compromised and written to by an external host.</P></LI><LICLASS="listitem"><PCLASS="para">Buggy software allows the file to be altered byan unauthorized user.</P></LI><LICLASS="listitem"><PCLASS="para">Permissions on a system binary allow an unauthorizedindividual to plant a Trojan Horse or virus that modifies the file.</P></LI></UL><PCLASS="para">And that is a partial list!</P><PCLASS="para">The goal of good integrity management is to prevent alterationsto (or deletions of) data, to detect modifications or deletionsif they occur, and to recover from alterations or deletions if theyhappen. In the next few sections, we'll present methodsof attaining these goals.</P><DIVCLASS="sect1"><H2CLASS="sect1"><ACLASS="title"NAME="PUIS-CHP-9-SECT-1">9.1 Prevention</A></H2><PCLASS="para">Whenever possible, we would like to prevent unauthorized alterationor deletion of data on our systems. We can do so via software controlsand some hardware means. We have discussed many of the softwaremethods available on <SPANCLASS="acronym">UNIX</SPAN> systems in other chapters.These have included setting appropriate permissions on files anddirectories, restricting access to the <ICLASS="filename">root</I>account, and controlling access to remote services.</P><PCLASS="para">Unfortunately, no matter how vigilant we may be, bugs occurin software (more often than they should!), and <ACLASS="indexterm"NAME="AUTOID-11956"></A><ACLASS="indexterm"NAME="AUTOID-11959"></A>configurationerrors are made.[1] In such cases, we desirethat data be protected by something at a lower level &nbsp;- something in which we might have more confidence.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[1] In a presentation by Professor MattBishop of UC Davis, he concluded that as many as 95% ofreported UNIX security incidents that he studied might be the resultsof misconfiguration!</P></BLOCKQUOTE><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-9-SECT-1.1">9.1.1 Immutable and Append-Only Files</A></H3><PCLASS="para">Two new mechanisms were built into the <SPANCLASS="acronym">BSD</SPAN>4.4 version of <SPANCLASS="acronym">UNIX</SPAN>: the <ICLASS="firstterm"><ACLASS="indexterm"NAME="AUTOID-11970"></A><ACLASS="indexterm"NAME="AUTOID-11972"></A><ACLASS="indexterm"NAME="AUTOID-11975"></A><ACLASS="indexterm"NAME="AUTOID-11978"></A><ACLASS="indexterm"NAME="AUTOID-11981"></A><ACLASS="indexterm"NAME="AUTOID-11984"></A>immutable</I>and<ICLASS="firstterm"> append-only files</I>. Thesewonderful mechanisms are present only (at the time of this writing,to the best of our knowledge) in the Free<SPANCLASS="acronym">BSD</SPAN>,Net<SPANCLASS="acronym">BSD</SPAN>, and <SPANCLASS="acronym">BSDI</SPAN> versionsof <SPANCLASS="acronym">UNIX</SPAN>. The fact that more commercial vendorshave not seen fit to integrate this idea in their products is apity.</P><PCLASS="para">As their names imply, immutable files are files that cannotbe modified once the computer is running. They are ideally suitedto system configuration files, such as <ICLASS="filename">/etc/rc</I>and <ICLASS="filename">/etc/inetd.conf</I>. Append-only files arefiles to which data can be appended, but in which existing datacannot be changed. They are ideally suited to log files.</P><PCLASS="para">To implement these new file types, <SPANCLASS="acronym">BSD</SPAN>4.4 introduced a new concept called the <ICLASS="firstterm">kernel securitylevel</I>. Briefly, the kernel security level defines fourlevels of security. Any process running as superuser can raise thesecurity level, but only the init process (process number 1) canlower it. There are four security levels (see <ACLASS="xref"HREF="ch09_01.htm#PUIS-CHP-9-TAB-1"TITLE="BSD 4.4 Security Levels">Table 9.1</A>).:</P><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="PUIS-CHP-9-TAB-1">Table 9.1: BSD 4.4 SecurityLevels</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Security Level</P></TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Mode</P></TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Meaning</P></TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">-1</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Permanently insecure</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Normal <SPANCLASS="acronym">UNIX</SPAN> behavior</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">0</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Insecure mode</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Immutable and append-only flags can bechanged.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">1</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Secure mode</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">The immutable and append-only flags cannotbe changed. <SPANCLASS="acronym">UNIX</SPAN> devices that correspond to mountedfilesystems, as well as the <ICLASS="filename">/dev/mem</I> and <ICLASS="filename">/dev/kmem</I>devices, are read-only.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">2</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Highly secure mode</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">A superset of the secure mode. All diskdevices are read-only, whether or not they correspond to mountedfilesystems. This prevents an attacker from unmounting a filesystemto modify the raw bits on the device, but it prevents you from creatingnew filesystems with the <ICLASS="filename">newfs</I> command whilethe system is operational.</P></TD></TR></TBODY></TABLE><PCLASS="para">The 4.4 <SPANCLASS="acronym">BSD</SPAN> filesystem does not allowany changes to files that are immutable or append-only. Thus, evenif an attacker obtains superuser access, he cannot modify thesefiles. Furthermore, the system prevents &quot;on-the-fly&quot;patching of the operating system by making writes to the <ICLASS="filename">/dev/mem</I>or <ICLASS="filename">/dev/kmem</I> devices. Properly configured,these new innovations can dramatically improve a system'sresistance to a determined attacker.</P><PCLASS="para">Of course, immutable files can be overcome by an attackerwho has physical access to the computer: the attacker could simplyreboot the computer in single-user mode, before the system switchesinto secure mode. However, if someone has physical access, thatperson could just as easily remove the disk and modify it on anothercomputer system. In most environments, physical access can be restrictedsomewhat. If an attacker at a remote site shuts down the system,thus enabling writing of the partition, that attacker also shutsdown any connection he would use to modify that partition.</P><PCLASS="para">Although these new filesystem structures are a great idea,it is still possible to modify data within immutable files if careis not taken. For instance, an attacker might compromise <ICLASS="filename">root</I>and alter some of the programs used by the system during start-up.Thus, many files need to be protected with immutability if the systemis to be used effectively.</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-9-SECT-1.2">9.1.2 Read-only Filesystems</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-12057"></A><ACLASS="indexterm"NAME="AUTOID-12059"></A><ACLASS="indexterm"NAME="AUTOID-12062"></A><ACLASS="indexterm"NAME="AUTOID-12065"></A><ACLASS="indexterm"NAME="AUTOID-12068"></A>Asomewhat stronger preventive mechanism is to use <EMCLASS="emphasis">hardware</EM>read-only protection of the data. To do so requires setting a physical<ACLASS="indexterm"NAME="AUTOID-12072"></A>write-protectswitch on a disk drive or mounting the data using a <SPANCLASS="acronym">CD-ROM</SPAN>.<ACLASS="indexterm"NAME="AUTOID-12075"></A>The material is thenmounted using the software read-only option with the <EMCLASS="emphasis">mount</EM>command. The best crackers in the business can't come acrossthe network and write to a read-only <SPANCLASS="acronym">CD-ROM</SPAN>!</P><BLOCKQUOTECLASS="note"><PCLASS="para"><STRONG>NOTE:</STRONG> The read-only option to the <EMCLASS="emphasis">mount</EM>command does <EMCLASS="emphasis">not</EM> protect data! Disks mountedwith the read-only option can still be written to using the rawdevice interface to the disk&nbsp;- the option only protects accessto the files via the block device interface. Furthermore, an attackerwho has gained the appropriate privileges (e.g., <EMCLASS="emphasis">root</EM>)can always remount the disk read/write.</P><PCLASS="para">The existence of the read-only option to the <ICLASS="filename">mount</I>command is largely for when a physically protected diskis mounted read-only; without the option, <SPANCLASS="acronym">UNIX</SPAN>would attempt to modify the &quot;last access&quot; timesof files and directories as they were read, which would lead tomany error messages.</P></BLOCKQUOTE><PCLASS="para">If it is possible to structure the system to place all thecommands, system libraries, system databases, and important directorieson read-only media, the system can be made considerably safer. Tomodify one of these files, an unauthorized user would require physicalaccess to the disk drive to reset the switch, and sufficient accessto the system (physical access or operator privileges) to remountthe partition. In many cases, this access can be severely restricted.Unmounting and remounting a disk would likely be noticed, too!</P><PCLASS="para">In those cases in which the owner needs to modify softwareor install updates, it should be a simple matter to shut down thesystem in an orderly manner and then make the necessary changes.As an added benefit, the additional effort required to make changesin a multiuser system might help deter spur-of-the-moment changes,or the installation of software that is too experimental in nature.(Of course, this whole mechanism would not be very helpful to adedicated Linux hacker who may be making daily changes. As withany approach, it isn't for everyone.)</P><PCLASS="para">The way to organize a system to use read-only disks requiresassistance from the vendor of the system. The vendor needs to structurethe system so that the few system files that need to be modifiedon a frequent basis are located on a different partition from thesystem files that are to be protected. These special files includelog files, <ICLASS="filename">/etc/motd</I>, <ICLASS="filename">utmp</I>,and other files that might need to be altered as part of regularoperation (including, perhaps, <ICLASS="filename">/etc/passwd</I>if your users change passwords or shells frequently). Most modernsystems have symbolic links that can be used for this purpose. Infact, systems that support diskless workstations are often alreadyconfigured in this manner: volatile files are symbolically linkedto a location on a <ICLASS="filename"><ACLASS="indexterm"NAME="AUTOID-12094"></A>/var</I> partition. This link allows the binaries to be mountedread-only from the server and shared by many clients.</P><PCLASS="para">There are some additional benefits to using read-only storagefor system files. Besides the control over modification (friendlyand otherwise) already noted, consider the following:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">You only need to do <ACLASS="indexterm"NAME="AUTOID-12100"></A>backupsof the read-only partitions once after each change&nbsp;- thereis no need to waste time or tapes performing daily or weekly backups</P></LI><LICLASS="listitem"><PCLASS="para">In a large organization, you can put a &quot;standard&quot;set of binaries up on a network file server&nbsp;- or cut a &quot;standard&quot;<SPANCLASS="acronym">CD-ROM</SPAN> to be used by all the systems making <ACLASS="indexterm"NAME="AUTOID-12105"></A>configuration management and portabilitymuch simpler</P></LI><LICLASS="listitem"><PCLASS="para">There is no need to set disk quotas on these partitions,as the contents will not grow except in well-understood (and monitored)ways</P></LI><LICLASS="listitem"><PCLASS="para">There is no need to run periodic file clean or scanoperations on these disks as the contents will not change</P></LI></UL><PCLASS="para">There are some drawbacks and limitations to read-only media,however:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-12116"></A>This media is difficult to employ foruser data protection. Usually, user data is too volatile for read-onlymedia. Furthermore, it would require that the system administratorshut down the system each time a user wanted to make a change. Thisrequirement would not work well in a multiuser environment.</P></LI><LICLASS="listitem"><PCLASS="para">Few vendors supply disks capable of operating inthis mode as a matter of course. Most disks in workstations areinternal, and do not have a write-protect switch.</P></LI><LICLASS="listitem"><PCLASS="para">It requires that an entire disk be made read-only.[2] There may be a largeamount of wasted space on the disk.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[2] Some disks allow only a range of sectors to be protected,but these are not the norm.</P></BLOCKQUOTE></LI><LICLASS="listitem"><PCLASS="para">This media requires at least two physical disksper machine (unless you import network partitions)&nbsp;- theread-only disk for system files, and a disk for user files.</P></LI><LICLASS="listitem"><PCLASS="para">If you are operating from a <SPANCLASS="acronym">CD-ROM</SPAN>disk, these may have slower access times than a standard internalread/write disk.<ACLASS="indexterm"NAME="AUTOID-12130"></A><ACLASS="indexterm"NAME="AUTOID-12132"></A><ACLASS="indexterm"NAME="AUTOID-12135"></A><ACLASS="indexterm"NAME="AUTOID-12138"></A></P></LI></UL></DIV></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch08_08.htm"TITLE="8.8 Administrative Techniques for Conventional Passwords"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 8.8 Administrative Techniques for Conventional Passwords"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="Practical UNIX &amp; Internet Security"><IMGSRC="../gifs/txthome.gif"ALT="Practical UNIX &amp; Internet Security"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch09_02.htm"TITLE="9.2 Detecting Change"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 9.2 Detecting Change"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">8.8 Administrative Techniques for Conventional Passwords</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">9.2 Detecting Change</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><PCLASS="nav"><FONTSIZE="-1">[ <AHREF="../index.htm"TITLE="The Networking CD Bookshelf">Library Home</A> | <AHREF="../dnsbind/index.htm"TITLE="DNS &amp; BIND">DNS &amp; BIND</A> | <AHREF="../tcpip/index.htm"TITLE="TCP/IP Network Administration">TCP/IP</A> | <AHREF="../sendmail/index.htm"TITLE="sendmail">sendmail</A> | <AHREF="../smdref/index.htm"TITLE="sendmail Desktop Reference">sendmail Reference</A> | <AHREF="../firewall/index.htm"TITLE="Building Internet Firewalls">Firewalls</A> | <AHREF="index.htm"TITLE="Practical UNIX &amp; Internet Security">Practical Security</A> ]</FONT></P></DIV></BODY></HTML>