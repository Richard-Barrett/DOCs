<HTML><HEAD><TITLE>[Chapter 18] 18.2 Running a Secure Server</TITLE><METANAME="DC.title"CONTENT="Practical UNIX &amp; Internet Security"><METANAME="DC.creator"CONTENT="Simson Garfinkel &amp; Gene Spafford"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1999-02-04T00:14:22Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-148-8"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch18_01.htm"TITLE="18. WWW Security"><LINKREL="prev"HREF="ch18_01.htm"TITLE="18.1 Security and the World Wide Web"><LINKREL="next"HREF="ch18_03.htm"TITLE="18.3 Controlling Access to Files on Your Server"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="Practical UNIX &amp; Internet Security"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,65"HREF="index.htm"ALT="Practical UNIX &amp; Internet Security"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch18_01.htm"TITLE="18.1 Security and the World Wide Web"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 18.1 Security and the World Wide Web"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 18<BR>WWW Security</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch18_03.htm"TITLE="18.3 Controlling Access to Files on Your Server"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 18.3 Controlling Access to Files on Your Server"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="PUIS-CHP-18-SECT-2">18.2 Running a Secure Server</A></H2><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-24375"></A><ACLASS="indexterm"NAME="AUTOID-24377"></A>Web servers are designed to receive anonymousrequests from unauthenticated hosts on the Internet and to deliverthe requested information in a quick and efficient manner. As such,they provide a portal into your computer that can be used by friendand foe alike.</P><PCLASS="para">No piece of software is without its risk. Web servers, bytheir nature, are complicated programs. Furthermore, many organizationsuse Web servers with source code that is freely available over theInternet. Although this means that the source code is availablefor inspection by the organization, it also means that an attackercan scan that same source code and look for vulnerabilities.</P><PCLASS="para">The ability to add functions to a Web server through the useof <ACLASS="indexterm"NAME="AUTOID-24383"></A><ACLASS="indexterm"NAME="AUTOID-24386"></A><ACLASS="indexterm"NAME="AUTOID-24389"></A><ACLASS="indexterm"NAME="AUTOID-24393"></A><SPANCLASS="acronym">CGI</SPAN> scriptstremendously complicates their security. While a <SPANCLASS="acronym">CGI</SPAN>script can add new features to a Web server, it can also introducesecurity problems of its own. For example, a Web server may be configuredso that it can only access files stored in a particular directoryon your computer, but a user may innocently install a <SPANCLASS="acronym">CGI</SPAN>script that allows outsiders to read any file on your computer.Furthermore, because many users do not have experience in writingsecure programs, it is possible (and likely) that locally written<SPANCLASS="acronym">CGI</SPAN> scripts will contain bugs allowing an outsiderto execute arbitrary commands on your system. Indeed, several booksthat have been published on <SPANCLASS="acronym">CGI</SPAN> programming haveincluded such flaws.</P><PCLASS="para">Because of the richness of its tools, the plethora of programminglanguages, and the ability of multiple users to be logged in atthe same time from remote sites over a network, the <SPANCLASS="acronym">UNIX</SPAN><ACLASS="indexterm"NAME="AUTOID-24403"></A><ACLASS="indexterm"NAME="AUTOID-24406"></A>operating system is a remarkably bad choice for running secure Webservers. Because many PC-based operating systems share many of thesecharacteristics, they are also not very good choices. Experiencehas shown that the most secure Web server is a computer that runsa Web server and no other applications, that does not have a readilyaccessible scripting language, and that does not support remotelogins. In practice, this describes an Apple <ACLASS="indexterm"NAME="AUTOID-24409"></A><ACLASS="indexterm"NAME="AUTOID-24411"></A><ACLASS="indexterm"NAME="AUTOID-24414"></A>Macintosh computer running <SPANCLASS="acronym">M</SPAN>ac<SPANCLASS="acronym">HTTP</SPAN>,WebStar, or a similar Web server. According to recent surveys, suchcomputers comprise as many as 15% of the Web servers onthe Internet.</P><PCLASS="para">Of course, there are many advantages to running a Web serveron a <SPANCLASS="acronym">UNIX</SPAN> computer instead of a Macintosh. <SPANCLASS="acronym">UNIX</SPAN>generally runs faster than MacOS on comparable hardware, and <SPANCLASS="acronym">UNIX</SPAN>is available for hardware platforms that run faster than PowerPC-basedcomputers. Furthermore, it is generally easier for organizationsto integrate <SPANCLASS="acronym">UNIX</SPAN>-based Web servers with theirexisting information infrastructure, creating interesting possibilitiesfor Web offerings. Finally, more <SPANCLASS="acronym">MIS</SPAN> professionalshave familiarity with building <SPANCLASS="acronym">UNIX</SPAN>-based Internetservers than with building MacOS-based ones. Nonetheless, we suggestthat the security-conscious administrator give the Mac-based approachserious thought.</P><PCLASS="para">To build a secure Web server on any platform, you must beable to assure a variety of things, including:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">Network users must <EMCLASS="emphasis">never</EM>be able to execute arbitrary programs or shell commands on yourserver.</P></LI><LICLASS="listitem"><PCLASS="para"><SPANCLASS="acronym">CGI</SPAN> scripts that run on yourserver must perform either the expected function or return an errormessage. Scripts should expect and be able to handle any maliciouslytailored input.</P></LI><LICLASS="listitem"><PCLASS="para">In the event that your server is compromised, anattacker should not be able to use it for further attacks againstyour organization.</P></LI></UL><PCLASS="para">The following sections explore a variety of techniques fordealing with these issues.</P><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-18-SECT-2.1">18.2.1 The Server's UID</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-24439"></A><ACLASS="indexterm"NAME="AUTOID-24442"></A><ACLASS="indexterm"NAME="AUTOID-24445"></A><ACLASS="indexterm"NAME="AUTOID-24447"></A><ACLASS="indexterm"NAME="AUTOID-24450"></A>MostWeb servers are designed to be started by the superuser. The serverneeds to be run as root so it can listen to requests on port 80,the standard <SPANCLASS="acronym">HTTP</SPAN> port.</P><PCLASS="para">Once the server starts running, it changes its <SPANCLASS="acronym">UID</SPAN>to the username that is specified in a configuration file. In thecase of the <SPANCLASS="acronym">NCSA</SPAN> server, this configuration fileis called <ICLASS="filename">conf/httpd.conf</I>. In the file, there are threelines that read:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen"># User/Group: The name (or #number) of the user/group to run httpd as.User http Group http</PRE></BLOCKQUOTE><PCLASS="para">This username should <ICLASS="systemitem">not</I>be <ICLASS="filename">root</I>. Instead, the user and group should specify a user thathas no special access on your server.</P><PCLASS="para">In the example above, the user changes his <SPANCLASS="acronym">UID</SPAN>to the <ICLASS="filename">http </I>user before accessing files orrunning <SPANCLASS="acronym">CGI</SPAN> scripts. If you have a <SPANCLASS="acronym">CGI</SPAN>script that is to be run as superuser (and you should think verycarefully about doing so), it must be <SPANCLASS="acronym">SUID</SPAN> <ICLASS="filename">root</I>.Before you write such a script, carefully read <ACLASS="xref"HREF="ch23_01.htm"TITLE="Writing Secure SUID and Network Programs">Chapter 23</A>.</P><BLOCKQUOTECLASS="note"><PCLASS="para"><STRONG>NOTE:</STRONG> <EMCLASS="emphasis">Do not run your server as root!</EM>Although your server must be started by <ICLASS="filename">root</I>, the <ICLASS="filename">http.conf</I> filemust not contain the line &quot;User root&quot;. If it does,then every script that your Web server executes will be run as superuser,creating many potential problems.</P></BLOCKQUOTE></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-18-SECT-2.2">18.2.2 Understand Your Server's Directory Structure</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-24478"></A>Webservers are complicated pieces of software. They use many filesin many directories. The contents of some directories are made availableover the network. The contents of other directories must <EMCLASS="emphasis">not</EM>be made available over the network, and, for safety, should notbe readable by users on your system. To run a secure server, youmust understand the purpose of each directory, and the necessaryprotections that it must have.</P><PCLASS="para">The <SPANCLASS="acronym">NCSA</SPAN> sever has six directories:</P><TABLECLASS="informaltable"><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Directory</P></TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Purpose</P></TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">cgi-bin</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Holds <SPANCLASS="acronym">CGI</SPAN> scripts</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">conf</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Holds server configuration files</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">htdocs</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Holds Web documents</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">icons</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Holds Web documents</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">logs</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Records server activity</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">support</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Holds supplemental programs for the server</P></TD></TR></TBODY></TABLE><PCLASS="para">Many sources recommend creating a user called <ACLASS="indexterm"NAME="AUTOID-24525"></A><ACLASS="indexterm"NAME="AUTOID-24527"></A><ACLASS="indexterm"NAME="AUTOID-24530"></A><ACLASS="indexterm"NAME="AUTOID-24533"></A><ACLASS="indexterm"NAME="AUTOID-24537"></A>www and a group called www whichcan be used by the Web administrator to administrate the Web server:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">drwxr-xr-x   5 www      www          1024 Aug  8 00:01 cgi-bin/drwxr-x---   2 www      www          1024 Jun 11 17:21 conf/-rwx------   1 www      www        109674 May  8 23:58 httpddrwxrwxr-x   2 www      www          1024 Aug  8 00:01 htdocs/drwxrwxr-x   2 www      www          1024 Jun  3 21:15 icons/drwxr-x---   2 www      www          1024 May  4 22:23 logs/</PRE></BLOCKQUOTE><PCLASS="para">This is an interesting approach, but we don't thinkthat it adds much in the way of security. Because the <KBDCLASS="command">httpd</KBD> programis run as <ICLASS="filename">root</I>, anybody who has the ability to modify this programhas the ability to become the superuser. This is a particular vulnerabilityif you should ever move the server or configuration files onto an<SPANCLASS="acronym">NFS</SPAN>-exported partition. Therefore, we recommendacknowledging this fact, and setting up your Web server directorywith <ICLASS="filename">root</I> ownership:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">drwx--x--x  8 root     www         1024 Nov 23 09:25 cgi-bin/drwx------  2 root     www         1024 Nov 26 11:00 conf/drwxr-xr-x  2 root     www         1024 Dec  7 18:22 htdocs/-rwx------  1 root     www       482168 Aug  6 00:29 httpd*drwxrwxr-x  2 root     www         1024 Dec  1 18:15 icons/drwx------  2 root     www         1024 Nov 25 16:18 logs/drwxr-xr-x  2 root     www         1024 Aug  6 00:31 support/</PRE></BLOCKQUOTE><PCLASS="para">Notice that the <ACLASS="indexterm"NAME="AUTOID-24549"></A><ICLASS="filename">cgi-bin</I>directory has access mode 711; this allows the httpd server to runprograms that it contains, but it doesn't allow a personon the server to view the contents of the directory. More restrictionsmake probing for vulnerabilities more difficult.</P><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="PUIS-CHP-18-SECT-2.2.1">18.2.2.1 Configuration files</A></H4><PCLASS="para">Inside the <ACLASS="indexterm"NAME="AUTOID-24555"></A><ACLASS="indexterm"NAME="AUTOID-24557"></A><ICLASS="filename">conf</I> directory, the <SPANCLASS="acronym">NCSA</SPAN>server has the following files:</P><TABLECLASS="informaltable"><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1"><PCLASS="para">File</P></TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Purpose</P></TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para"><ICLASS="filename">access.conf</I></P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Controls access to the server'sfiles.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para"><ICLASS="filename">httpd.conf</I></P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Configuration file for the server.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para"><ICLASS="filename">mime.types</I></P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Determines the mapping of file extensionsto <SPANCLASS="acronym">MIME</SPAN> file types.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para"><ICLASS="filename">srm.conf</I></P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Server Resource Map. This file containsmore server configuration information. It determines the documentroot, whether or not users can have their own Web directories, theicon that is used for directory listings, the location of your <SPANCLASS="acronym">CGI</SPAN>script directory, document redirections, and error messages.</P></TD></TR></TBODY></TABLE><PCLASS="para">Because the information in these files can be used to subvertyour server or your entire system, you should protect the scriptsso they can only be read and modified by the superuser:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">-rw-------  1 root     wheel        954 Aug  6 01:00 access.conf-rw-------  1 root     wheel       2840 Aug  6 01:05 httpd.conf-rw-------  1 root     wheel       3290 Aug  6 00:30 mime.types-rw-------  1 root     wheel       4106 Nov 26 11:00 srm.conf</PRE></BLOCKQUOTE></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="PUIS-CHP-18-SECT-2.2.2">18.2.2.2 Additional configuration issues</A></H4><PCLASS="para">Besides the setting of permissions, you may wish to enableor disable the following configuration options:</P><DLCLASS="variablelist"><DTCLASS="term">Automatic directory listings</DT><DDCLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-24608"></A><ACLASS="indexterm"NAME="AUTOID-24611"></A><ACLASS="indexterm"NAME="AUTOID-24614"></A><ACLASS="indexterm"NAME="AUTOID-24617"></A>Most Web servers will automaticallylist the contents of a directory if a file called <ICLASS="filename">index.html</I>is not present in directory. This feature can cause security problems,however, as it gives outsiders the ability to scan for files andvulnerabilities on your system.</P></DD><DTCLASS="term">Symbolic-link following</DT><DDCLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-24624"></A><ACLASS="indexterm"NAME="AUTOID-24627"></A><ACLASS="indexterm"NAME="AUTOID-24629"></A><ACLASS="indexterm"NAME="AUTOID-24632"></A>Someservers allow you to follow symbolic links outside of the Web server'sdocument tree. This allows somebody who has access to your Web server'stree to make other documents on your computer available for Webaccess. You may not want people to be able to do this, so don'tenable the following of symbolic links. Alternatively, you may wishto set your Web server's symlinks &quot;If Owner Match&quot;option, so that links are followed only if the owner of the linkmatches the owner of the file that it points to.</P></DD><DTCLASS="term">Server-side includes</DT><DDCLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-24639"></A><ACLASS="indexterm"NAME="AUTOID-24641"></A>Server-side includes are directives that canbe embedded in an <SPANCLASS="acronym">HTML</SPAN> document. The includesare processed by the <SPANCLASS="acronym">HTML</SPAN> server before the documentis sent to a requesting client. Server-side includes can be usedto include other documents or to execute documents, and output theresult.</P><PCLASS="para">Here are two sample server-side includes that demonstratewhy their use is a bad idea:</P><PCLASS="para">&lt;!--#include file=&quot;/etc/passwd&quot;&gt;</P><PCLASS="para">&lt;!--#exec cmd=&quot;rm -rf/&amp;;cat /etc/passwd&quot;&gt;</P><PCLASS="para">The first include provides an attacker with thecontents of your <ICLASS="filename">/etc/passwd</I> file, allowing themto wage a password-cracking attack. The second launches a backgroundprocess that attempts to delete every writable file on your computer.<EMCLASS="emphasis">Then</EM> it provides the attacker with a copy ofyour <ICLASS="filename">/etc/passwd</I> file.</P><PCLASS="para">Fortunately, server-side includes must be specificallyenabled on most Web servers. They are normally turned off.</P></DD></DL><PCLASS="para">Some servers, such as the <SPANCLASS="acronym">NCSA</SPAN> server,allow you to limit processing of server-side includes to specificdirectories. The <SPANCLASS="acronym">NCSA</SPAN> server uses the <ICLASS="filename">Options</I> directive to control includes. Specify the option <ICLASS="filename">Includes</I>for all server-side includes; specify the option <ICLASS="filename">IncludesNOEXEC</I>to specify textual includes but to disable the execution of commands.</P><BLOCKQUOTECLASS="note"><PCLASS="para"><STRONG>NOTE:</STRONG> Server-side includes should <EMCLASS="emphasis">never</EM>be enabled for script directories. This is because it is possiblethat a script will output something that the user has typed, andthe Web server will attempt to interpret the output, giving an attackerthe ability to include arbitrary files or to execute arbitrary commands.<ACLASS="indexterm"NAME="AUTOID-24663"></A></P></BLOCKQUOTE></DIV></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-18-SECT-2.3">18.2.3 Writing Secure CGI Scripts and Programs[1]</A></H3><BLOCKQUOTECLASS="footnote"><PCLASS="para">[1] Thedifference between programs and scripts is not always simple todiscern, and the terms are not used consistently by everyone. Wedefine a <ICLASS="filename">program</I> to be code that must be compiledand linked before execution, and a script as a program that is usuallyinterpreted without first being compiled into binary.</P></BLOCKQUOTE><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-24672"></A><ACLASS="indexterm"NAME="AUTOID-24675"></A>Writing a secure <SPANCLASS="acronym">CGI</SPAN>script has all of the same problems as writing a secure <SPANCLASS="acronym">SUID</SPAN>program or network server, plus many more. That's becausethere can be unexpected interactions between the Web environment,the Web server and the <SPANCLASS="acronym">CGI</SPAN> script, creating problemswith the combined system where no problems obviously were presentin any single part. Therefore, we recommend that you read <ACLASS="xref"HREF="ch23_01.htm"TITLE="Writing Secure SUID and Network Programs">Chapter 23</A> before you embark on writing <SPANCLASS="acronym">CGI</SPAN> scripts.</P><PCLASS="para">In addition to the information that we describe in that chapter,there are additional issues in writing programs for the World WideWeb.</P><PCLASS="para">Most security holes are not intentional. Nonetheless, themore people who have the ability to write scripts on your Web server,the greater the chance that one of those scripts will contain asignificant flaw.</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">Do not allow users to place scriptson your server unless a qualified security professional has personallyread through the scripts and assured you of their safety.</P></LI></UL><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="PUIS-CHP-18-SECT-2.3.1">18.2.3.1 Do not trust the user's browser!</A></H4><PCLASS="para"><SPANCLASS="acronym">HTML</SPAN> includes the ability to display selectionlists, limit the length of fields to a certain number of characters,embed hidden data within forms, and specify variables that shouldbe provided to <SPANCLASS="acronym">CGI</SPAN> scripts. Nevertheless, youcannot make your <SPANCLASS="acronym">CGI</SPAN> script depend on any ofthese restrictions. That is because any <SPANCLASS="acronym">CGI</SPAN> scriptcan be run by directly requesting the script's <SPANCLASS="acronym">URL</SPAN>;attackers do not need to go through your form or use the interfacethat you provide.</P><PCLASS="para">Be especially careful of the following:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">If you create a <ACLASS="indexterm"NAME="AUTOID-24700"></A>selection list, the value that is returned forthe input field will not necessarily match the allowable valuesthat you have defined.</P></LI><LICLASS="listitem"><PCLASS="para">If you specify a maximum length for a <ACLASS="indexterm"NAME="AUTOID-24704"></A>variable, the lengthof the variable that is provided to your script may be significantlylonger. (What would your script do if provided with a username thatis 4000 characters long?)</P></LI><LICLASS="listitem"><PCLASS="para">Variables that are provided to your script may havenames not defined in your script.</P></LI><LICLASS="listitem"><PCLASS="para">The values for variables that are provided may containspecial characters.</P></LI><LICLASS="listitem"><PCLASS="para">The user may view <ACLASS="indexterm"NAME="AUTOID-24713"></A>data that is marked as &quot;hidden.&quot;</P></LI><LICLASS="listitem"><PCLASS="para">If you use <ACLASS="indexterm"NAME="AUTOID-24718"></A>cookiesor special hidden tags to maintain state on your server, your scriptmay receive cookies or tags that it never created.</P></LI></UL><PCLASS="para">Attackers are by definition malicious. They do not followthe rules. Never trust anything that is provided over the network.</P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="PUIS-CHP-18-SECT-2.3.2">18.2.3.2 Testing is not enough!</A></H4><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-24724"></A><ACLASS="indexterm"NAME="AUTOID-24727"></A>One of the reasons that it is surprisingly easyto create an unsecure <SPANCLASS="acronym">CGI</SPAN> script is that it isvery difficult to test your scripts against the wide variety of<SPANCLASS="acronym">HTTP</SPAN> clients available. For example, most clientprograms will &quot;escape,&quot; or specially encode, characterssuch as the <ACLASS="indexterm"NAME="AUTOID-24732"></A>backquote(`), which are specially interpreted by the <SPANCLASS="acronym">UNIX</SPAN>shell. As a result, many <SPANCLASS="acronym">CGI</SPAN> programmers do notexpect the unencoded characters to be present in the input streamfor their applications, and they do not protect their scripts againstthe possibility that the characters <EMCLASS="emphasis">are </EM>present.Nevertheless, it is easy for the characters to be in the input stream,either as the result of a bug in a particular Web browser or, morelikely, because a malicious attacker is attempting to subvert your<SPANCLASS="acronym">CGI</SPAN> script and gain control of your server.</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">Check all values that are providedto your program for special characters and appropriate length.</P></LI></UL><PCLASS="para">By all values, we mean <EMCLASS="emphasis">all values</EM>. Thisincludes the contents of environment variables, host addresses,host names, <SPANCLASS="acronym">URLS</SPAN>, user-supplied data, valueschosen from selection lists, and even data that your script hasinserted onto a <SPANCLASS="acronym">WWW</SPAN> form through the use of the<EMCLASS="emphasis">hidden</EM> data type.</P><PCLASS="para">Consider the case of a <SPANCLASS="acronym">CGI</SPAN> script thatcreates a series of log files for each host that contacts your <SPANCLASS="acronym">WWW</SPAN>server. The name of the log file might be the following: <ICLASS="filename">logfile/{hostname}.</I>What will this program do if it is contacted by the &quot;host&quot; <ICLASS="filename">../../../../etc/passwd.company.com</I>?Such a script, if improperly constructed, could end up appendinga line to a system's <ICLASS="filename">/etc/passwd</I> file.This could then be used as a way of creating unauthorized accountson the system.</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-24755"></A><ACLASS="indexterm"NAME="AUTOID-24757"></A><ACLASS="indexterm"NAME="AUTOID-24759"></A><ACLASS="indexterm"NAME="AUTOID-24761"></A>Beware of <ICLASS="filename">system(  )</I>, <ICLASS="filename">popen (  )</I>, pipes, backquotes(`), and Perl's <ICLASS="filename">eval  (  )</I>function.</P></LI></UL><PCLASS="para">Many programming languages, including C, <ICLASS="filename">ksh</I>,<ICLASS="filename">sh</I>, <ICLASS="filename">csh</I>, and Perl, providethe means to spawn subprocesses. You should try to avoid using thesefeatures when writing <SPANCLASS="acronym">CGI</SPAN> scripts. If you <EMCLASS="emphasis">must</EM>spawn a subprocess, avoid passing through any strings that are providedby the user. If you <EMCLASS="emphasis">must</EM> pass strings fromthe user to the subprocess, be sure that it does not pass shellmeta characters including the `$|;&gt;*&lt;&amp;&gt;characters.</P><PCLASS="para">It is generally better to specify a list of allowable charactersthan to specify a list of dangerous characters. If you forget tospecify an allowable character, there is no real harm done. Butif you forget to specify a dangerous character, such as a backquote,you can compromise the security of your entire system.</P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="PUIS-CHP-18-SECT-2.3.3">18.2.3.3 Sending mail</A></H4><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-24777"></A>If youare writing a <SPANCLASS="acronym">CGI</SPAN> script that allows a user tosend mail, use the <ICLASS="filename">/usr/lib/sendmail</I> programto send the mail, rather than <ICLASS="filename">/bin/mailx</I> or<ICLASS="filename">/usr/ucb/mail</I>. The reason is that <ICLASS="filename">/usr/lib/sendmail</I>does not have shell escapes, whereas the other mailers do.</P><PCLASS="para">Here is a bit of Perl that you can use to send mail securely.It bypasses the shell by using <ACLASS="indexterm"NAME="AUTOID-24786"></A><ICLASS="filename">exec (  )</I> with a fixed string to run <ICLASS="filename">/usr/lib/sendmail</I>directly:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen"> open (WRITE, &quot;|-&quot;)|| exec (&quot;usr/lib/sendmail&quot;, &quot;-oi,&quot; &quot;-t&quot;)|| die &quot;Can't fork$!\n&quot;:print WRITE &quot;To: $address\n&quot;;print WRITE &quot;Subject: $subject\n&quot;;print WRITE &quot;From: $sender\n&quot;;print WRITE &quot;\n$message\n.\n&quot;;close(WRITE);</PRE></BLOCKQUOTE><PCLASS="para">There are many commands in Perl that will run the shell, possiblywithout your knowledge. These include <ACLASS="indexterm"NAME="AUTOID-24792"></A><ACLASS="indexterm"NAME="AUTOID-24794"></A><ACLASS="indexterm"NAME="AUTOID-24796"></A><ACLASS="indexterm"NAME="AUTOID-24798"></A><KBDCLASS="command">system (  ),</KBD><KBDCLASS="command">eval (  )</KBD>, pipes, backquotes, and, occasionally,<KBDCLASS="command">exec (  )</KBD> (if shell meta characters are presenton the command line).</P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="PUIS-CHP-18-SECT-2.3.4">18.2.3.4 Tainting with Perl</A></H4><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-24806"></A><ACLASS="indexterm"NAME="AUTOID-24809"></A><ACLASS="indexterm"NAME="AUTOID-24812"></A>If you are using thePerl programming language, you can use Perl's &quot;tainting&quot;facility to track information that has been provided by the user.Perl marks such information as &quot;tainted.&quot; Theonly way to untaint information is to match it using a Perl regularexpression, and then to copy out the matched values using Perl'sstring match variables.</P><PCLASS="para">For example, if you have a name that has been provided bythe user, you can untaint the value to be sure that it only containsletters, numbers, commas, spaces, and periods by using the followingPerl statements:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$tainted_username =~ m/([a-zA-Z. ]*)/;$untainted_username = $1;</PRE></BLOCKQUOTE><PCLASS="para">You can use the following to extract an email address:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$tainted_email =~ /([\w-.%]+\@[\w.-]+)/;$untainted_email = $1;</PRE></BLOCKQUOTE><PCLASS="para">There are two ways to enable tainting. If you are using Perl4, you should invoke the<ICLASS="filename"> <ACLASS="indexterm"NAME="AUTOID-24820"></A>taintperl</I>command instead of the Perl command, by placing the following statement(or something similar) at the beginning of your file:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">#!/usr/local/bin/taintperl</PRE></BLOCKQUOTE><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-24824"></A>If you are usingPerl version 5, you accomplish the same result by using the -T flag:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">#!/usr/local/bin/perl -T</PRE></BLOCKQUOTE></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="PUIS-CHP-18-SECT-2.3.5">18.2.3.5 Beware stray CGI scripts</A></H4><PCLASS="para">Most Web servers can be configured so that all <SPANCLASS="acronym">CGI</SPAN>scripts must be confined to a single directory. We recommend thisconfiguration, because it makes it easier for you to find and examineall of the <SPANCLASS="acronym">CGI</SPAN> scripts on your system. We donot recommend the practice of allowing any file on the Web serverwith the extension &quot;<ICLASS="filename">.cgi</I>&quot;to be run as a <SPANCLASS="acronym">CGI</SPAN> script.</P><PCLASS="para">Instead, we recommend that you:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">Configure your Web server so thatall <SPANCLASS="acronym">CGI</SPAN> scripts must be placed in a single directory(typically, the directory is called <ICLASS="filename">cgi-bin</I>).</P></LI><LICLASS="listitem"><PCLASS="para">Use a program such as Tripwire (see <ACLASS="xref"HREF="ch09_01.htm"TITLE="Integrity Management">Chapter 9, <CITECLASS="chapter">Integrity Management</CITE></A>) to monitor for unauthorized changes to thesescripts.</P></LI><LICLASS="listitem"><PCLASS="para">Allow limited access to this directory and its contents.Local users should not be allowed to install or remove scripts,or to edit existing scripts without administrative review. You alsomay want to prevent these scripts from being read, to prevent someonefrom snooping.</P></LI><LICLASS="listitem"><PCLASS="para">Remove the backup <ACLASS="indexterm"NAME="AUTOID-24848"></A><ACLASS="indexterm"NAME="AUTOID-24852"></A><ACLASS="indexterm"NAME="AUTOID-24855"></A><ACLASS="indexterm"NAME="AUTOID-24858"></A><ACLASS="indexterm"NAME="AUTOID-24861"></A>files that are automaticallygenerated by your editor. Many system administrators use text editorssuch as Emacs to edit scripts that are in place on the running server.Frequently, this leaves behind backup files, with names such as<ICLASS="filename">start~</I> or <ICLASS="filename">create-account~</I>.These backup files can be executed an attacker, usually with unwantedresults.</P></LI></UL></DIV></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-18-SECT-2.4">18.2.4 Keep Your Scripts Secret!</A></H3><PCLASS="para">Throughout this book, we have railed against the practiceof <ICLASS="firstterm"><ACLASS="indexterm"NAME="AUTOID-24870"></A>securitythrough obscurity</I>&nbsp;- the practice of basing someof the security of your system upon undocumented aspects. Nevertheless,the fact remains that the ready availability of <SPANCLASS="acronym">UNIX</SPAN>source code, as opposed to the relative &quot;obscurity&quot;of the source code for other operating systems such as <SPANCLASS="acronym">VMS</SPAN>or Windows/NT, means that potential attackers can searchthrough the operating system looking for avenues of attack, andthen craft their attacks in such a way as to guarantee the maximumpossible access. One good way to prevent these sorts of attacksis to limit the access to source code.</P><PCLASS="para">Because it is so easy to make a mistake when writing a <SPANCLASS="acronym">CGI</SPAN>program, it behooves sites to keep your <SPANCLASS="acronym">CGI</SPAN> scriptsand programs confidential. This does not guarantee security forbuggy scripts: a determined attacker can still probe and, frequently,find flaws with your system. However, it does significantly increasethe work that is involved. Determined attackers will still get through,but casual attackers may move on to other, more inviting systems.</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">Prevent network users from readingthe contents of your <SPANCLASS="acronym">CGI</SPAN> scripts. This will helpkeep an attacker from analyzing the scripts to discover securityflaws. This is especially important for scripts that are writteninside your organization, and thus might not be subject to the samedegree of certification and checking as scripts that are writtenfor publication or redistribution.</P></LI></UL><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="PUIS-CHP-18-SECT-2.4.1">18.2.4.1 Beware mixing HTTP with anonymous FTP</A></H4><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-24885"></A><ACLASS="indexterm"NAME="AUTOID-24888"></A><ACLASS="indexterm"NAME="AUTOID-24891"></A>Manysites use the same directory for storing documents that are accessedthrough anonymous <SPANCLASS="acronym">FTP</SPAN> and the World Wide Web.For example, you may have a directory called <ICLASS="filename">/NetDocs</I> onyour server that is both the home directory of the <SPANCLASS="acronym">FTP</SPAN>user and the root directory of your Web server. This would allowfiles to be referred to by two <SPANCLASS="acronym">URLS</SPAN>, such as<ACLASS="systemitem.url"HREF="http://server.com/nosmis/myfile.html">http://server.com/nosmis/myfile.html</A>or <ACLASS="systemitem.url"HREF="ftp://server.com/nosmis/myfile.html.">ftp://server.com/nosmis/myfile.html.</A></P><PCLASS="para">The primary advantage of <SPANCLASS="acronym">HTTP</SPAN> over <SPANCLASS="acronym">FTP</SPAN>is speed and efficiency. <SPANCLASS="acronym">HTTP</SPAN> is optimized foranonymous access from a stateless server. <SPANCLASS="acronym">FTP</SPAN>,on the other hand, had anonymous access added as an afterthought,and requires that the server maintain a significant amount of statefor the client</P><PCLASS="para">Mixing <SPANCLASS="acronym">HTTP</SPAN> and <SPANCLASS="acronym">FTP</SPAN>directories poses a variety of security issues, including:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">Allowing anonymous <SPANCLASS="acronym">FTP</SPAN>access to the <SPANCLASS="acronym">HTTP</SPAN> directories gives users ameans of bypassing any restrictions on document access that theWeb server may be providing. Thus, if you have confidential documentsstored on your Web server, they may not remain confidential forlong with this arrangement.</P></LI><LICLASS="listitem"><PCLASS="para">If an attacker can download your <SPANCLASS="acronym">CGI</SPAN>scripts with <SPANCLASS="acronym">FTP</SPAN>, he can search them for avenuesfor attack.</P></LI><LICLASS="listitem"><PCLASS="para">You must be very sure that there is no way for an<SPANCLASS="acronym">FTP</SPAN> user to upload a script that will be runon your server.</P></LI><LICLASS="listitem"><PCLASS="para">The <ICLASS="filename">/etc/passwd </I>file presentfor your <SPANCLASS="acronym">FTP</SPAN> service might be visible to someoneusing the <SPANCLASS="acronym">WWW</SPAN> service, thus leading to a compromiseof its contents. If you have included any real passwords in thatfile, they will be available to the client for remote password cracking.<ACLASS="indexterm"NAME="AUTOID-24926"></A><ACLASS="indexterm"NAME="AUTOID-24929"></A></P></LI></UL></DIV></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-18-SECT-2.5">18.2.5 Other Issues</A></H3><PCLASS="para">There are many other measures that you can take to make yourserver more secure. For example, you can limit the use of the computerso that it is solely a Web server. This will make it harder foran attacker to break in to your server and, if an attacker does,it will limit the amount of damage that he can do to the rest ofyour network.</P><PCLASS="para">If you do chose to make your server a stand-alone computer,read over <ACLASS="xref"HREF="ch21_01.htm"TITLE="Firewalls">Chapter 21, <CITECLASS="chapter">Firewalls</CITE></A>, for a list of techniquesthat you can use to isolate your computer from your network andmake the computer difficult for an attacker to use. In particular,you may wish to consider the following options:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">Delete all unnecessary accounts.</P></LI><LICLASS="listitem"><PCLASS="para">Do not <SPANCLASS="acronym">NFS</SPAN> mount or export anydirectories.</P></LI><LICLASS="listitem"><PCLASS="para">Delete all compilers.</P></LI><LICLASS="listitem"><PCLASS="para">Delete all utility programs that are not used duringboot or by the Web server.</P></LI><LICLASS="listitem"><PCLASS="para">Provide as few network services as possible.</P></LI><LICLASS="listitem"><PCLASS="para">Do not run a mail server.</P></LI></UL><PCLASS="para">Another option, but one that may require a non-trivial amountof work, is to place your <SPANCLASS="acronym">WWW</SPAN> server and allfiles in a separate directory structure. The <SPANCLASS="acronym">WWW</SPAN>server is then wrapped with a small program that does a <KBDCLASS="command">chroot ( )</KBD>to the directory (see <ACLASS="xref"HREF="ch22_01.htm"TITLE="Wrappers and Proxies">Chapter 22, <CITECLASS="chapter">Wrappers and Proxies</CITE></A>). Thus, if some way is found to break out of the controlsyou have placed on the server, the regular filesystem is hiddenand protected from attack. Some <SPANCLASS="acronym">WWW</SPAN> servers mayhave this approach included as an install-time option, so checkthe documentation.<ACLASS="indexterm"NAME="AUTOID-24957"></A></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch18_01.htm"TITLE="18.1 Security and the World Wide Web"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 18.1 Security and the World Wide Web"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="Practical UNIX &amp; Internet Security"><IMGSRC="../gifs/txthome.gif"ALT="Practical UNIX &amp; Internet Security"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch18_03.htm"TITLE="18.3 Controlling Access to Files on Your Server"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 18.3 Controlling Access to Files on Your Server"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">18.1 Security and the World Wide Web</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">18.3 Controlling Access to Files on Your Server</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><PCLASS="nav"><FONTSIZE="-1">[ <AHREF="../index.htm"TITLE="The Networking CD Bookshelf">Library Home</A> | <AHREF="../dnsbind/index.htm"TITLE="DNS &amp; BIND">DNS &amp; BIND</A> | <AHREF="../tcpip/index.htm"TITLE="TCP/IP Network Administration">TCP/IP</A> | <AHREF="../sendmail/index.htm"TITLE="sendmail">sendmail</A> | <AHREF="../smdref/index.htm"TITLE="sendmail Desktop Reference">sendmail Reference</A> | <AHREF="../firewall/index.htm"TITLE="Building Internet Firewalls">Firewalls</A> | <AHREF="index.htm"TITLE="Practical UNIX &amp; Internet Security">Practical Security</A> ]</FONT></P></DIV></BODY></HTML>