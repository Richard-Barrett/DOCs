<HTML><HEAD><TITLE>[Chapter 19] 19.2 Sun's Remote Procedure Call (RPC)</TITLE><METANAME="DC.title"CONTENT="Practical UNIX &amp; Internet Security"><METANAME="DC.creator"CONTENT="Simson Garfinkel &amp; Gene Spafford"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1999-02-04T00:14:59Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-148-8"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch19_01.htm"TITLE="19. RPC, NIS, NIS+,  and Kerberos"><LINKREL="prev"HREF="ch19_01.htm"TITLE="19.1 Securing Network Services"><LINKREL="next"HREF="ch19_03.htm"TITLE="19.3 Secure RPC (AUTH_DES)"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="Practical UNIX &amp; Internet Security"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,65"HREF="index.htm"ALT="Practical UNIX &amp; Internet Security"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch19_01.htm"TITLE="19.1 Securing Network Services"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 19.1 Securing Network Services"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 19<BR>RPC, NIS, NIS+,  and Kerberos</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch19_03.htm"TITLE="19.3 Secure RPC (AUTH_DES)"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 19.3 Secure RPC (AUTH_DES)"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="PUIS-CHP-19-SECT-2">19.2 Sun's Remote Procedure Call (RPC)</A></H2><PCLASS="para">Thefundamental building block of all network information systems isa mechanism for performing remote procedure calls. This mechanism,usually called <SPANCLASS="acronym">RPC</SPAN>, allows a program runningon one computer to more-or-less transparently execute a functionthat is actually running on another computer.</P><PCLASS="para"><SPANCLASS="acronym">RPC</SPAN>systems can be categorized as <EMCLASS="emphasis"><ACLASS="indexterm"NAME="AUTOID-25783"></A><ACLASS="indexterm"NAME="AUTOID-25785"></A><ACLASS="indexterm"NAME="AUTOID-25787"></A>blocking systems</EM>,which cause the calling program to cease execution until a resultis returned, or as <ICLASS="firstterm">non-blocking</I> (<ICLASS="firstterm">asynchronou</I><EMCLASS="emphasis">ssystems</EM>), which means that the calling program continuesrunning while the remote procedure call is performed. (The resultsof a non-blocking <SPANCLASS="acronym">RPC</SPAN>, if they are returned,are usually provided through some type of callback scheme.)</P><PCLASS="para"><SPANCLASS="acronym">RPC</SPAN> allows programs to be distributed:a computationally intensive algorithm can be run on a high-speedcomputer, a remote sensing device can be run on another computer,and the results can be compiled on a third. <SPANCLASS="acronym">RPC</SPAN>also makes it easy to create network-based client/serverprograms: the clients and servers communicate with each other usingremote procedure calls.</P><PCLASS="para">One of the first <SPANCLASS="acronym">UNIX</SPAN>remote procedure call systems was developed by Sun Microsystemsfor use with <SPANCLASS="acronym">NIS</SPAN> and <SPANCLASS="acronym">NFS</SPAN>.Sun's <SPANCLASS="acronym">RPC</SPAN> uses a system called <ACLASS="indexterm"NAME="AUTOID-25801"></A><ACLASS="indexterm"NAME="AUTOID-25803"></A><SPANCLASS="acronym">XDR</SPAN>(external data representation), to represent binary informationin a uniform manner and bit order. <SPANCLASS="acronym">XDR</SPAN> allowsa program running on a computer with one byte order, such as a <SPANCLASS="acronym">SPARC</SPAN>workstation, to communicate seamlessly with a program running ona computer with an opposite byte order, such as a workstation withan Intel x86 microprocessor. <SPANCLASS="acronym">RPC</SPAN> messages canbe sent with either the <SPANCLASS="acronym">TCP</SPAN> or <SPANCLASS="acronym">UDP</SPAN>IP protocols (currently, the <SPANCLASS="acronym">UDP</SPAN> version is morecommon). After their creation by Sun, <SPANCLASS="acronym">XDR</SPAN> and<SPANCLASS="acronym">RPC</SPAN> were reimplemented by the University of Californiaat Berkeley and are now freely available.</P><PCLASS="para">Sun's<SPANCLASS="acronym">RPC</SPAN> is not unique. A different <SPANCLASS="acronym">RPC</SPAN>system is used by the Open Software Foundation's <ACLASS="indexterm"NAME="AUTOID-25817"></A><ACLASS="indexterm"NAME="AUTOID-25819"></A>Distributed Computing Environment(<SPANCLASS="acronym">DCE</SPAN>). Yet another <SPANCLASS="acronym">RPC</SPAN> systemhas been proposed by the Object Management Group. Called <ACLASS="indexterm"NAME="AUTOID-25824"></A><SPANCLASS="acronym">CORBA</SPAN>(Common Object Request Broker Architecture), this system is optimizedfor <SPANCLASS="acronym">RPC</SPAN> between object-oriented programs writtenin C++ or SmallTalk.</P><PCLASS="para">In the followingsections, we'll discuss the Sun <SPANCLASS="acronym">RPC</SPAN>mechanism, as it seems to be the most widely used. The continuingpopularity of <SPANCLASS="acronym">NFS</SPAN> (described in <ACLASS="xref"HREF="ch20_01.htm"TITLE="NFS">Chapter 20</A>) suggeststhat Sun <SPANCLASS="acronym">RPC</SPAN> will be in widespread use for sometime to come.</P><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-19-SECT-2.1">19.2.1 Sun's portmap/rpcbind</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-25836"></A><ACLASS="indexterm"NAME="AUTOID-25838"></A><ACLASS="indexterm"NAME="AUTOID-25840"></A>Foran <SPANCLASS="acronym">RPC</SPAN> client to communicate with an <SPANCLASS="acronym">RPC</SPAN>server, many things must happen:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">The <SPANCLASS="acronym">RPC</SPAN> clientmust be running.</P></LI><LICLASS="listitem"><PCLASS="para">The <SPANCLASS="acronym">RPC</SPAN> server must be runningon the server machine (or it must be automatically started whenthe request is received).</P></LI><LICLASS="listitem"><PCLASS="para">The client must know on which host the <SPANCLASS="acronym">RPC</SPAN>server is located.</P></LI><LICLASS="listitem"><PCLASS="para">The client and the server must agree to communicateon a particular <SPANCLASS="acronym">TCP</SPAN> or <SPANCLASS="acronym">UDP</SPAN>port.</P></LI></UL><PCLASS="para">The simplest way tosatisfy this list of conditions is to have the <SPANCLASS="acronym">UNIX</SPAN>computer start the server when the computer boots, to have the serverrunning on a well-known host, and to have the port numbers predefined.This is the approach that <SPANCLASS="acronym">UNIX</SPAN> takes with standardInternet services such as Telnet and <SPANCLASS="acronym">SMTP</SPAN>.</P><PCLASS="para">The approach that Sun took for <SPANCLASS="acronym">RPC</SPAN> wasdifferent. Instead of having servers run on a well-known port, Sundeveloped a program called <KBDCLASS="command">portmap</KBD> in SunOS 4.x,and renamed <KBDCLASS="command">rpcbind</KBD> in Solaris 2.x. We will refer to the programas the <KBDCLASS="command">portmapper</KBD>.</P><PCLASS="para">When an <SPANCLASS="acronym">RPC</SPAN> serverstarts, it dynamically obtains a free <SPANCLASS="acronym">UDP</SPAN> or<SPANCLASS="acronym">TCP</SPAN> port, then registers itself with the <KBDCLASS="command">portmapper</KBD>.When a client wishes to communicate with a particular server, itcontacts the <KBDCLASS="command">portmapper</KBD> process, determines the port number usedby the server, and then initiates communication.</P><PCLASS="para">The<KBDCLASS="command">portmapper</KBD> approach has the advantage that you can have many more<SPANCLASS="acronym">RPC</SPAN> services (in theory, 232) than there areIP port numbers (216).[2] In practice,however, the greater availability of <SPANCLASS="acronym">RPC</SPAN> servernumbers has not been very important. Indeed, one of the most widelyused <SPANCLASS="acronym">RPC</SPAN> services, <SPANCLASS="acronym">NFS</SPAN>, usuallyhas a fixed <SPANCLASS="acronym">UDP</SPAN> port of 2049.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[2] Of course, you can'treally have <EMCLASS="emphasis">2</EM>32 RPC services, because therearen't enough programmers to write them, or enough computersand RAM for them to run. The reason for having <EMCLASS="emphasis">2</EM>32different RPC service numbers available was that different vendorscould pick RPC numbers without the possibility of conflict. A betterway to have reached this goal would have been to allow RPC servicesto use names, so that companies and organizations could have registeredtheir RPC services using their names as part of the service names&nbsp;- butthe designers didn't ask us.</P></BLOCKQUOTE><PCLASS="para">The<KBDCLASS="command">portmapper</KBD> program also complicates building Internet <ACLASS="indexterm"NAME="AUTOID-25887"></A><ACLASS="indexterm"NAME="AUTOID-25890"></A>firewalls,because you almost never know in advance the particular IP portthat will be used by <SPANCLASS="acronym">RPC</SPAN>-based services.</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-19-SECT-2.2">19.2.2 RPC Authentication</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-25898"></A><ACLASS="indexterm"NAME="AUTOID-25901"></A><ACLASS="indexterm"NAME="AUTOID-25904"></A>Client programs contacting an <SPANCLASS="acronym">RPC</SPAN>server need a way to authenticate themselves to the server, so thatthe server can determine what information the client should be ableto access, and what functions should be allowed. Without authentication,any client on the network that can send packets to the <SPANCLASS="acronym">RPC</SPAN>server could access any function.</P><PCLASS="para">There are severaldifferent forms of authentication available for <SPANCLASS="acronym">RPC</SPAN>,as described in <ACLASS="xref"HREF="ch19_02.htm#PUIS-CHP-19-TAB-1"TITLE="RPC Authentication Options">Table 19.1</A>. Not all authenticationsystems are available in all versions of <SPANCLASS="acronym">RPC</SPAN>:</P><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="PUIS-CHP-19-TAB-1">Table 19.1: RPC Authentication Options</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1"><PCLASS="para">System</P></TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Authentication Technique</P></TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Comments</P></TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">AUTH_NONE</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">None</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">No authentication. Anonymous access.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">AUTH_UNIX[3]</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">RPC client sends the UNIX UID and GIDsfor the user.</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Not secure. Server implicitly truststhat the user is who the user claims to be.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">AUTH_DES</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Authentication based on public key cryptographyand DES</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Reasonably secure, although not widelyavailable from manufacturers other than Sun.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">AUTH_KERB</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Authentication based on Kerberos</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Very secure, but requires that you setup a Kerberos Server (described later in this chapter). As withAUTH_DES, AUTH_KERB is not widely available.</P></TD></TR></TBODY></TABLE><BLOCKQUOTECLASS="footnote"><PCLASS="para">[3] AUTH_UNIXis called AUTH_SYS in at least one version of Sun Solaris.</P></BLOCKQUOTE><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="PUIS-CHP-19-SECT-2.2.1">19.2.2.1 AUTH_NONE</A></H4><PCLASS="para">Live fast, die young.<ACLASS="indexterm"NAME="AUTOID-25961"></A><SPANCLASS="acronym">AUTH_NONE</SPAN>is bare-bones <SPANCLASS="acronym">RPC</SPAN> with no user authentication.You might use it for services that require and provide no usefulinformation, such as time of day. On the other hand, why do youwant other computers on the network to be able to find out the settingof your's system's time-of-day clock? (Furthermore,because the system's time of day is used in a variety ofcryptographic protocols, even that information might be usable inan attack against your computer.)</P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="PUIS-CHP-19-SECT-2.2.2">19.2.2.2 AUTH_UNIX</A></H4><PCLASS="para"><SPANCLASS="acronym">AUTH_UNIX</SPAN><ACLASS="indexterm"NAME="AUTOID-25969"></A>was the only authenticationsystem provided by Sun through Release 4.0 of the SunOS operatingsystems, and it is the only form of <SPANCLASS="acronym">RPC</SPAN> authenticationoffered by many <SPANCLASS="acronym">UNIX</SPAN> vendors. It is widely used.Unfortunately, it is fundamentally unsecure.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-25974"></A>With <SPANCLASS="acronym">AUTH_UNIX</SPAN>, each <SPANCLASS="acronym">RPC</SPAN>request is accompanied with a <SPANCLASS="acronym">UID</SPAN> and a set of<SPANCLASS="acronym">GIDS</SPAN>[4]for authentication.The server implicitly trusts the <SPANCLASS="acronym">UID</SPAN> and <SPANCLASS="acronym">GIDS</SPAN>presented by the client, and uses this information to determineif the action should be allowed or not. Anyone with access to thenetwork can craft an <SPANCLASS="acronym">RPC</SPAN> packet with any arbitraryvalues for <SPANCLASS="acronym">UID</SPAN> and <SPANCLASS="acronym">GID</SPAN>. Obviously,<SPANCLASS="acronym">AUTH_UNIX</SPAN> is not secure, because the client isfree to claim any identity, and there is no provision for checkingon the part of the server.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[4] Some versions of RPC present eight additionalGIDs, while others present up to 16.</P></BLOCKQUOTE><PCLASS="para">In recent years, Sun haschanged the name <SPANCLASS="acronym">AUTH_UNIX</SPAN> to <SPANCLASS="acronym">AUTH_SYS</SPAN>.Nevertheless, it's still the same system.</P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="PUIS-CHP-19-SECT-2.2.3">19.2.2.3 AUTH_DES</A></H4><PCLASS="para"><SPANCLASS="acronym">AUTH_DES</SPAN><ACLASS="indexterm"NAME="AUTOID-25996"></A>is the basis of Sun's&quot;Secure <SPANCLASS="acronym">RPC</SPAN>&quot; (described laterin this chapter). <SPANCLASS="acronym">AUTH_DES</SPAN> uses a combinationof secret key and public key cryptography to allow security in anetworked environment. It was developed several years after <SPANCLASS="acronym">AUTH_UNIX</SPAN>,and is not widely available on <SPANCLASS="acronym">UNIX</SPAN> platformsother than Sun's SunOS and Solaris 2.x operating systems.</P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="PUIS-CHP-19-SECT-2.2.4">19.2.2.4 AUTH_KERB</A></H4><PCLASS="para"><SPANCLASS="acronym">AUTH_KERB</SPAN><ACLASS="indexterm"NAME="AUTOID-26006"></A><ACLASS="indexterm"NAME="AUTOID-26008"></A>is a modification to Sun's <SPANCLASS="acronym">RPC</SPAN> systemthat allows it to interoperate with <SPANCLASS="acronym">MIT</SPAN>'sKerberos system for authentication. Although Kerberos was developedin the mid 1980s, <SPANCLASS="acronym">AUTH_KERB</SPAN> authentication for<SPANCLASS="acronym">RPC</SPAN> was not incorporated into Sun's<SPANCLASS="acronym">RPC</SPAN> until the early 1990s.</P><BLOCKQUOTECLASS="note"><PCLASS="para"><STRONG>NOTE:</STRONG> Carefully review the <SPANCLASS="acronym">RPC</SPAN> servicesthat are configured into your system for automatic start when thesystem boots, or for automatic dispatch from the <ICLASS="filename">inetd</I>(see <ACLASS="xref"HREF="ch17_01.htm"TITLE="TCP/IP Services">Chapter 17, <CITECLASS="chapter">TCP/IP Services</CITE></A>).If you don't need a service, disable it.</P><PCLASS="para">Inparticular, if your version of the <ACLASS="indexterm"NAME="AUTOID-26022"></A>rexdservice cannot be forced into only accepting connections authenticatedwith Kerberos or Secure <SPANCLASS="acronym">RPC</SPAN>, then it should beturned off. The <ICLASS="filename">rexd</I> daemon (which executescommands issued with the on command) otherwise is easily fooledinto executing commands on behalf of any non-root <ACLASS="indexterm"NAME="AUTOID-26026"></A><ACLASS="indexterm"NAME="AUTOID-26029"></A>user.<ACLASS="indexterm"NAME="AUTOID-26032"></A></P></BLOCKQUOTE></DIV></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch19_01.htm"TITLE="19.1 Securing Network Services"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 19.1 Securing Network Services"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="Practical UNIX &amp; Internet Security"><IMGSRC="../gifs/txthome.gif"ALT="Practical UNIX &amp; Internet Security"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch19_03.htm"TITLE="19.3 Secure RPC (AUTH_DES)"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 19.3 Secure RPC (AUTH_DES)"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">19.1 Securing Network Services</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">19.3 Secure RPC (AUTH_DES)</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><PCLASS="nav"><FONTSIZE="-1">[ <AHREF="../index.htm"TITLE="The Networking CD Bookshelf">Library Home</A> | <AHREF="../dnsbind/index.htm"TITLE="DNS &amp; BIND">DNS &amp; BIND</A> | <AHREF="../tcpip/index.htm"TITLE="TCP/IP Network Administration">TCP/IP</A> | <AHREF="../sendmail/index.htm"TITLE="sendmail">sendmail</A> | <AHREF="../smdref/index.htm"TITLE="sendmail Desktop Reference">sendmail Reference</A> | <AHREF="../firewall/index.htm"TITLE="Building Internet Firewalls">Firewalls</A> | <AHREF="index.htm"TITLE="Practical UNIX &amp; Internet Security">Practical Security</A> ]</FONT></P></DIV></BODY></HTML>