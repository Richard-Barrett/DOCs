<HTML><HEAD><TITLE>[Chapter 20] 20.4 Improving NFS Security</TITLE><METANAME="DC.title"CONTENT="Practical UNIX &amp; Internet Security"><METANAME="DC.creator"CONTENT="Simson Garfinkel &amp; Gene Spafford"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1999-02-04T00:16:04Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-148-8"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch20_01.htm"TITLE="20. NFS"><LINKREL="prev"HREF="ch20_03.htm"TITLE="20.3 Client-Side NFS Security"><LINKREL="next"HREF="ch20_05.htm"TITLE="20.5 Some Last Comments"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="Practical UNIX &amp; Internet Security"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,65"HREF="index.htm"ALT="Practical UNIX &amp; Internet Security"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch20_03.htm"TITLE="20.3 Client-Side NFS Security"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 20.3 Client-Side NFS Security"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 20<BR>NFS</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch20_05.htm"TITLE="20.5 Some Last Comments"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 20.5 Some Last Comments"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="PUIS-CHP-20-SECT-4">20.4 Improving NFS Security</A></H2><PCLASS="para">There are many techniques that you can use to improve overallNFS security:</P><OLCLASS="orderedlist"><LICLASS="listitem"><PCLASS="para">Limit the use of <SPANCLASS="acronym">NFS</SPAN>by limiting the machines to which filesystems are exported, andlimit the number of filesystems that each client mounts.</P></LI><LICLASS="listitem"><PCLASS="para">Export filesystems read-only if possible.</P></LI><LICLASS="listitem"><PCLASS="para">Use root ownership of exported files and directories.</P></LI><LICLASS="listitem"><PCLASS="para">Remove group write permissions from exported filesand directories.</P></LI><LICLASS="listitem"><PCLASS="para">Do not export the server's executables.</P></LI><LICLASS="listitem"><PCLASS="para">Do not export home directories.</P></LI><LICLASS="listitem"><PCLASS="para">Do not allow users to log into the server.</P></LI><LICLASS="listitem"><PCLASS="para">Use the <KBDCLASS="command">fsirand</KBD> program, as described below.</P></LI><LICLASS="listitem"><PCLASS="para">Set the <KBDCLASS="command">portmon</KBD> variable, so that <SPANCLASS="acronym">NFS</SPAN>requests that are not received from privileged ports will be ignored.</P></LI><LICLASS="listitem"><PCLASS="para">Use <KBDCLASS="command">showmount -e</KBD> to verify that you are only exportingthe filesystem you wish to export to the hosts specified with thecorrect flags.</P></LI><LICLASS="listitem"><PCLASS="para">Use Secure <SPANCLASS="acronym">NFS</SPAN>.</P></LI></OL><PCLASS="para">These techniques are described below.</P><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-20-SECT-4.1">20.4.1 Limit Exported and Mounted Filesystems</A></H3><PCLASS="para">The best way to limit the danger of <SPANCLASS="acronym">NFS</SPAN>is by having each computer only export and/or mount theparticular filesystems that are needed.</P><PCLASS="para">If a filesystem does not need to be exported, do not exportit. If it must be exported, export it to as few machines as possibleby judiciously using restrictions in the exports list. If you havea sizeable number of machines to export to and such lists are tediousto maintain, consider careful use of the <KBDCLASS="command">netgroups</KBD> mechanism, ifyou have it. Do not export a filesystem to any computer unless youhave to. If possible, export filesystems read-only, as we'lldescribe in the next section.</P><PCLASS="para">If you only need to export part of a filesystem, then exportonly that part. Do not export an entire filesystem if you only needaccess to a particular directory.</P><PCLASS="para">Likewise, your clients should only mount the <SPANCLASS="acronym">NFS</SPAN>servers that are needed. Don't simply have every clientin your organization mount every <SPANCLASS="acronym">NFS</SPAN> server.Limiting the number of mounted <SPANCLASS="acronym">NFS</SPAN> filesystemswill improve overall security, and will improve performance andreliability as well.</P><PCLASS="para">The above advice may seem simple, but it is advice that israrely followed. Many organizations have configured their computersso that every server exports all of its filesystems, and so thatevery client mounts every exported filesystem. And the configurationgets worse: many computers on the Internet today make filesystemsavailable without restriction to any other computer on the Internet.Usually, carelessness or ignorance is to blame: a system administratorfaced with the need to allow access to a directory believes thatthe easiest (or only) way to provide the access is to simply enablefile sharing for everybody.</P><DIVCLASS="sidebar"><H4CLASS="sidebar"><ACLASS="title"NAME="AUTOID-28885">Export Can Be Forever</A></H4><PCLASS="para">Someversions of <SPANCLASS="acronym">NFS</SPAN> enforce the <ICLASS="filename">exports</I> file onlyduring mount, which means that clients that mount filesystems ona server will continue to have access to those filesystems untilthe clients unmount the server's filesystems or until theyare rebooted. Even if the client is removed from the server'sexports file and the server is rebooted, the client will continueto have access and can continue to use a filesystem after unmountingit, unless the directory is no longer exported at all, or unless<ICLASS="filename">fsirand</I> is run on the exported filesystem tochange the generation count of each inode.</P><PCLASS="para">Distinguishinga file handle that is guessed from one that is returned to the clientby the <KBDCLASS="command">mount</KBD> daemon is impossible. Thus, on systems where the exportsare only examined upon mounting, any file on the <SPANCLASS="acronym">NFS</SPAN>server can by accessed by an adversary who has the ability and determinationto search for valid file handles.</P></DIV><PCLASS="para">Not too long ago, one of us watched a student in a lab inthe Netherlands mount filesystems from more than 25 U.S. universitiesand corporations on his workstation&nbsp;- most with read/writeaccess!</P><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="PUIS-CHP-20-SECT-4.1.1">20.4.1.1 The example explained</A></H4><PCLASS="para">In the example we presented earlier in this chapter, <ACLASS="xref"HREF="ch20_02.htm#PUIS-CHP-20-EX-1"TITLE="An /etc/dfs/dfstab file With Some Problems">Example 20.1</A>An<ICLASS="filename">/etc/dfs/dfstab</I> file with some problems&quot;a system administrator made three dangerous mistakes. On the thirdline, the administrator exported the directory <ICLASS="filename">/tftpboot.</I>This directory is exported to any computer on the network that wishesto mount it; if the computer is on the Internet, then any othercomputer on the Internet has access to this server's <ICLASS="filename">/tftpboot</I>directory.</P><PCLASS="para">What's the harm? First of all, users of the <ICLASS="filename">/tftpboot</I>directory may not be aware that files that they place in it canbe so widely accessed. Another problem arises if the directory canbe written: in this case, there is a possibility that the storagespace will be hijacked by software pirates and used as a softwarepirate &quot;warez&quot; repository. Perhaps worse, thesoftware on that partition can be replaced with hacked versionsthat may not perform as the real owners would wish! (In this case,<ICLASS="filename">/tftpboot</I> is probably used for providing bootstrap codeto machines on the network. By modifying this code, a resourcefulattacker could force arbitrary computers to run password sniffers,erase their hard drives, or do other unwanted things.)</P><PCLASS="para">The last two lines of the sample configuration file have asimilar problem: they export the directories <ICLASS="filename">/usr/lib/X11/ncd</I>and <ICLASS="filename">/usr/openwin</I> freely over the network. Althoughthe directories are exported read only, there is still a chancethat a software pirate could use the exported filesystems to obtaincopies of copyrighted software. This scenario could create a legalliability for the site running the <SPANCLASS="acronym">NFS</SPAN> server.</P><PCLASS="para">You can make your server more secure by only exporting filesystemsto the particular computers that need to use those filesystems.<EMCLASS="emphasis">Don't</EM> export filesystems that don'thave to be exported. And don't export filesystems to theentire Internet&nbsp;- otherwise you will only be asking for trouble.</P><PCLASS="para">Here is a revised <ICLASS="filename">dfstab</I> file that isproperly configured:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">#       place share(1M) commands here for automatic execution#       on entering init state 3.##&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This configuration is more secure.#share -F nfs -o rw=red:blue:green /cpgshare -F nfs -o rw=clients -d &quot;spool&quot; /var/spoolshare -F nfs -o ro=clients /tftpbootshare -F nfs -o ro=clients /usr/lib/X11/ncdshare -F nfs -o ro=clients /usr/openwin</PRE></BLOCKQUOTE><BLOCKQUOTECLASS="note"><PCLASS="para"><STRONG>NOTE:</STRONG> Be aware that the options on export commands and configurationfiles have different semantics under <SPANCLASS="acronym">SVR4</SPAN> andearlier, <SPANCLASS="acronym">BSD</SPAN>-like systems (including SunOS).Under earlier <SPANCLASS="acronym">BSD</SPAN>-like systems, the -rooption does not take hostnames as parameters, and there is an -accessoption to limit access. If you specified an export list under SunOSsuch as in the above example:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">		exportfs -i -o rw=clients /var/spool</PRE></BLOCKQUOTE><PCLASS="para">then the directory is exported read/write tothe members of the clients netgroup, but it is <EMCLASS="emphasis">also exported read-onlyto everyone else on the network!</EM> You must also specify the <KBDCLASS="command">-access</KBD>option with the <KBDCLASS="command">-rw</KBD> option to limit the scope of the export. Thus,to prevent other machines from reading exported files, you mustuse the following command:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">		exportfs -i -o rw=clients,access=clients /var/spool</PRE></BLOCKQUOTE><PCLASS="para">Under <SPANCLASS="acronym">SVR4</SPAN>, both the <KBDCLASS="command">-rw</KBD>and <KBDCLASS="command">-ro</KBD> options can take a host list to restrict the exportof the files. The directory is exported <EMCLASS="emphasis">only</EM>to the hosts named in the union of the two lists. There is no -accessoption in <SPANCLASS="acronym">SVR4</SPAN>.</P></BLOCKQUOTE></DIV></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-20-SECT-4.2">20.4.2 Export Read-only</A></H3><PCLASS="para">Many filesystems contain information that is only read, never(or rarely) written. These filesystems can be exported read-only.Exporting the filesystems read-only adds to both security and reliability:it prevents the filesystems from being modified by <SPANCLASS="acronym">NFS</SPAN>clients, limiting the damage that can be done by attackers, ignorantusers, and buggy software.</P><PCLASS="para">Many kinds of filesystems are candidates for read-only export:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">Filesystems containing applications</P></LI><LICLASS="listitem"><PCLASS="para">Organizational reference matter, such as policiesand documents</P></LI><LICLASS="listitem"><PCLASS="para">Netnews (if you do not read news with <SPANCLASS="acronym">NNTP</SPAN>)</P></LI></UL><PCLASS="para">If you have programs or other files that must be exportedread-write, you can improve your system's overall performance,reliability, and security by placing these items on their own filesystemthat is separately exported.</P><PCLASS="para">To export a filesystem read-only, specify the <ICLASS="filename">ro=</I><EMCLASS="emphasis">clients</EM>option in either your <ICLASS="filename">exports</I> file or your<ICLASS="filename">dfstab</I> file (depending on which version of<SPANCLASS="acronym">UNIX</SPAN> you are using). In the following example,the <ICLASS="filename">/LocalLibrary</I> directory is exported read-only:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">share -F nfs -o ro=clients /LocalLibrary</PRE></BLOCKQUOTE></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-20-SECT-4.3">20.4.3 Use Root Ownership</A></H3><PCLASS="para">Because the <SPANCLASS="acronym">NFS</SPAN> server maps <ICLASS="filename">root</I> to <ICLASS="filename">nobody</I>,you can protect files and directories on your server by settingtheir owner to root and their protection mode to 755 (in the caseof programs and directories) or 644 (in the case of data files).This setup will prevent the contents of the files from being modifiedby a client machine.</P><PCLASS="para">If you have information on an <SPANCLASS="acronym">NFS</SPAN> serverthat should not be accessible to <SPANCLASS="acronym">NFS</SPAN> clients,you can use the file protection mode 700 (in the case of programsand directories) or 600 (in the case of data files). However, abetter strategy is not to place the files on the <SPANCLASS="acronym">NFS</SPAN>server in the first place.</P><PCLASS="para">Remember, this system protects only files on the server thatare owned by root. Also, this technique does not work if you havepatched your kernel to set the value of <ICLASS="systemitem"> nobody</I> to 0, or if you export the filesystems to a particularhost with the <ICLASS="filename">-root=</I> option.</P><BLOCKQUOTECLASS="note"><PCLASS="para"><STRONG>NOTE:</STRONG> Protecting an executable file to be execute-only willnot work as you expect in an <SPANCLASS="acronym">NFS</SPAN> environment.Because you must read a file into memory before it can be executed,any file marked executable can also be read from a server using<SPANCLASS="acronym">NFS</SPAN> commands (although it may not be possibleto do so using standard calls through a client). The server hasno way of knowing if the requests to be read are a prelude to executionor not. Thus, putting execute-only files on an exported partitionmay allow them to be examined or copied from a client machine.</P></BLOCKQUOTE></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-20-SECT-4.4">20.4.4 Remove Group-write Permission for Files and Directories</A></H3><PCLASS="para">If you are using standard <SPANCLASS="acronym">AUTH_UNIX</SPAN> authenticationwith <SPANCLASS="acronym">NFS</SPAN>, then users can effectively place themselvesin any group. Thus, to protect files and directories that are ownedby <ICLASS="filename">root</I>, they must <EMCLASS="emphasis">not</EM> be group-writable.</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-20-SECT-4.5">20.4.5 Do Not Export Server Executables</A></H3><PCLASS="para">If your server is running the same operating system on thesame <SPANCLASS="acronym">CPU</SPAN> architecture as your client computers,then you might be tempted to have the server export its own executables(such as the programs stored in <ICLASS="filename">/bin, /usr/bin,/etc.</I>) for use by the clients. Don't do so withoutcareful thought about the consequences.</P><PCLASS="para">At first, exporting a server's own executables seemslike a good way to save disk space: this way, you only need to haveone copy of each program, which is then shared between the clientsand the servers, rather than two copies.</P><PCLASS="para">But exporting your server's executables poses severalsecurity problems:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">It allows an attacker to easily determinewhich version of each executable your server is running, which enablesthe attacker to probe for weak spots with greater ease.</P></LI><LICLASS="listitem"><PCLASS="para">If there is an error in your system's configuration,you may be exporting the binaries on a writable filesystem. An attackercould then modify the server's own binaries, and possiblybreak in (or at least cause you serious problems).</P></LI></UL><PCLASS="para">You can minimize the need for exporting server binaries byusing the <ICLASS="firstterm">dataless client configuration</I> thatis available on some versions of <SPANCLASS="acronym">UNIX</SPAN>. In thiscase, &quot;dataless&quot; means that each client computermaintains a complete copy of all of its executable files, but storesall of its data that is subject to change on a central server.</P><PCLASS="para">If you simply <EMCLASS="emphasis">must </EM>export the server'sbinaries, then export the filesystem read-only.</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-20-SECT-4.6">20.4.6 Do Not Export Home Directories</A></H3><PCLASS="para">If you export a filesystem that has users' home directorieson it and you do not use Secure <SPANCLASS="acronym">RPC</SPAN>, then allother clients mounting that directory, as well as the server itself,can be placed at risk.</P><PCLASS="para">If you export a filesystem that contains users' homedirectories, then there is a risk that an attacker could alter theinformation stored on the <SPANCLASS="acronym">NFS</SPAN> server. This isnormally a serious risk in itself. However, if the partition beingexported includes users' home directories, then one ofthe things that an attacker can do is create files in the users'home directories.</P><PCLASS="para">A simple attack is for an attacker to create a <ICLASS="filename">.rhosts</I> filein a users's home directory that specifically allows accessto the attacker. Having created this file, the attacker could nowlog onto the server and proceed to look for additional securityholes. Perhaps the greatest danger in this attack is that it canbe aimed against system accounts (such as <ICLASS="filename">daemon</I> and <ICLASS="filename">bin</I>) as easilyas accounts used by human users.</P><PCLASS="para">Likewise, you should avoid exporting filesystems that containworld-writable directories (e.g., <ICLASS="filename">/tmp, /usr/tmp,/usr/spool/uucppublic)</I>.</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-20-SECT-4.7">20.4.7 Do Not Allow Users to Log into the Server</A></H3><PCLASS="para"><SPANCLASS="acronym">NFS</SPAN> and direct logins are two fundamentallydifferent ways to use a computer. If you allow users to log intoa server, the user can use that access to probe for weaknesses thatcan be exploited from <SPANCLASS="acronym">NFS</SPAN>, and vice versa.</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-20-SECT-4.8">20.4.8 Use fsirand</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-29014"></A>One of the securityproblems with <SPANCLASS="acronym">NFS</SPAN> is that the file handles usedto reference a file consist solely of a filesystem ID, an inodenumber, and a generation count. Guessing valid file handles is easyin most circumstances. Filesystem IDs are normally small numbers;the root directory on the standard <SPANCLASS="acronym">UNIX</SPAN> filesystemhas the inode number 2, <ICLASS="filename">/lost+found</I> has the inodenumber 3, and so on. The only difficulty in guessing a file handleis the generation count. For many important inodes, including theroot inode, we would expect the generation count to be very small&nbsp;- wedon't normally delete a filesystem's root entry!</P><PCLASS="para">The <KBDCLASS="command">fsirand</KBD> program increases the difficulty of guessing avalid file handle by randomizing the generation number of everyinode on a filesystem. The effect is transparent to the user&nbsp;- filesand directories are still fetched as appropriate when a referenceis made&nbsp;- but someone on the outside is unable to guess filehandles for files and directories anymore.</P><PCLASS="para">You can run <KBDCLASS="command">fsirand</KBD> on the <ICLASS="filename">root</I> directory while in single-usermode or on any unmounted filesystem that will <KBDCLASS="command">fsck</KBD> without error.</P><PCLASS="para">For example, to run <KBDCLASS="command">fsirand</KBD> on your <ICLASS="filename">/dev/sd1a</I>partition, type the following:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen"># <BCLASS="emphasis.bold">umount /dev/sd1a</B>				<EMCLASS="emphasis">Unmount the filesystem</EM># <BCLASS="emphasis.bold">fsirand /dev/sd1a</B>				<EMCLASS="emphasis">Run fsirand</EM></PRE></BLOCKQUOTE><PCLASS="para">You might benefit from running <KBDCLASS="command">fsirand</KBD> once a month on yourexported partitions. Some people run it automatically every timethe system boots, but this has the disadvantage of making all legitimatefile handles stale, too. Consider your environment before takingsuch a drastic step.</P><PCLASS="para">The <KBDCLASS="command">fsirand</KBD> program is not available on all versions of <SPANCLASS="acronym">UNIX</SPAN>.In particular, it is not available under Linux.</P><BLOCKQUOTECLASS="note"><PCLASS="para"><STRONG>NOTE:</STRONG> Older versions of Sun's <KBDCLASS="command">fsirand</KBD> contained buggycode that made the &quot;random&quot; values quite predictable.Be sure you have the latest version of <KBDCLASS="command">fsirand</KBD> from your vendor.Most newer versions of the <KBDCLASS="command">newfs</KBD> command automatically run <KBDCLASS="command">fsirand</KBD>,but not all do. The functionality of <KBDCLASS="command">fsirand</KBD> is incorporated intothe Solaris 2.5 <KBDCLASS="command">mkfs</KBD> command.</P></BLOCKQUOTE></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-20-SECT-4.9">20.4.9 Set the portmon Variable</A></H3><PCLASS="para">Normally, <SPANCLASS="acronym">NFS</SPAN> servers respond to requeststhat are transmitted from any <SPANCLASS="acronym">UDP</SPAN> port. However,because <SPANCLASS="acronym">NFS</SPAN> requests are supposed to come from<ICLASS="systemitem">kernels</I> of other computers,and not from <EMCLASS="emphasis">users</EM> who are running user-levelprograms on other computers, a simple way to improve the securityof <SPANCLASS="acronym">NFS</SPAN> servers is to program them to reject <SPANCLASS="acronym">NFS</SPAN>requests that do not come from privileged ports. On many <SPANCLASS="acronym">NFS</SPAN>servers, the way that this restriction is established is by settingthe kernel variable <ICLASS="filename">nfs_portmon</I> to 1. It's importantto do this if you want even a minimal amount of <SPANCLASS="acronym">NFS</SPAN>security.[10]</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[10] The value of 1 is not the default becausesome vendors' NFS implementations don't send requestsfrom ports &lt;1024. If you set <KBDCLASS="command">portmon</KBD>, those vendors'machines will not be able to be NFS clients from this NFS server.</P></BLOCKQUOTE><PCLASS="para">If you are using SunOS, you can set the nfs_portmonvariable to 1 using the <KBDCLASS="command">adb</KBD> debugger:[11]</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[11] If you rebuildthe kernel, these modifications will be lost. You may want to consideradding them to <ICLASS="filename">/etc/rc/local.</I> (A versionof this command is in <ICLASS="filename">/etc/rc/*</I>on some systems.)</P></BLOCKQUOTE><BLOCKQUOTECLASS="screen"><PRECLASS="screen"># <BCLASS="emphasis.bold">adb -k -w /vmunix /dev/mem</B>		<EMCLASS="emphasis">Changes kernel disk file</EM><BCLASS="emphasis.bold">nfs_portmon/W1</B>	<EMCLASS="emphasis">Changes running kernel</EM>_nfs_portmon: _nfs_portmon: 0				<EMCLASS="emphasis">The default setting </EM>?W1									<EMCLASS="emphasis">Change to 1 </EM>$q									<EMCLASS="emphasis">Write the result out </EM>#</PRE></BLOCKQUOTE><PCLASS="para">If you are using Solaris 2.1-2.4, you can set the <ICLASS="filename">portmon</I>variable by inserting this line into your /etc/systemfile:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">set nfs:nfs_portmon = 1</PRE></BLOCKQUOTE><PCLASS="para">If you are using Solaris 2.5 and above, you can set the variableby inserting this line into your /etc/system file:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">set nfssrv:nfs_portmon = 1</PRE></BLOCKQUOTE></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-20-SECT-4.10">20.4.10 Use showmount -e</A></H3><PCLASS="para">The <ICLASS="filename">showmount -e</I> command, mentioned earlierin this chapter, lists the host&quot;s export lists&nbsp;- -thatis, the directories and hosts that can be mounted. The <ICLASS="filename">showmount</I>command allows an optional argument, <ICLASS="filename">host</I>.When this argument is provided, the <ICLASS="filename">showmount</I>command can be used to remotely inspect another computer'sexport list. The command is useful for finding <SPANCLASS="acronym">NFS</SPAN>servers which are insecurely configured. For example:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% /usr/etc/showmount -e deadly.orgexport list for deadly.org:/bigusers       (everyone)/tmp2           (everyone)/               (everyone)/usr            (everyone)/var            (everyone)/usr/public     (everyone)/usr/public/pub (everyone)%</PRE></BLOCKQUOTE><PCLASS="para">In this case, the computer <ICLASS="filename">deadly.org</I> appears to be exportingits <ICLASS="filename">/bigusers</I>, <ICLASS="filename">/tmp2</I>,<ICLASS="filename">/</I>, <ICLASS="filename">/usr</I>, <ICLASS="filename">/var</I>,<ICLASS="filename">/usr/public</I>, and <ICLASS="filename">/usr/public/pub</I> directories to every other computer on the Internet.</P><PCLASS="para">Fortunately, things aren't as bad as they seem at<ICLASS="systemitem">deadly.org</I>. That'sbecause they are using Secure <SPANCLASS="acronym">NFS</SPAN>. Here'swhat happens when you try to mount the filesystem:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen"># <BCLASS="emphasis.bold">mount deadly.org:/ /nfs/tmp</B>nfs: bad MNT RPC: RPC: Authentication error; why = Client credential too weak</PRE></BLOCKQUOTE></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-20-SECT-4.11">20.4.11 Use Secure NFS</A></H3><PCLASS="para">The biggest security problem with <SPANCLASS="acronym">NFS</SPAN>,as it is normally configured, is that it uses Sun's <SPANCLASS="acronym">AUTH_UNIX</SPAN><SPANCLASS="acronym">RPC</SPAN> authentication system. With <SPANCLASS="acronym">AUTH_UNIX</SPAN>,a user simply provides his <SPANCLASS="acronym">UID</SPAN> and a list of<SPANCLASS="acronym">GIDS</SPAN> with every request. The <SPANCLASS="acronym">NFS</SPAN>server trusts that the users are who they claim to be.</P><PCLASS="para">In a friendly environment, <SPANCLASS="acronym">AUTH_UNIX</SPAN> authenticationpresents no problems, because requests sent out by the <SPANCLASS="acronym">NFS</SPAN>client always have the same <SPANCLASS="acronym">UID</SPAN> and <SPANCLASS="acronym">GIDS</SPAN>as the person who has logged in and is using the workstation. However,if the workstation user has <ICLASS="filename">root</I> access, that person can use theroot access to become any other user, with that other user'scorresponding rights and privileges on the <SPANCLASS="acronym">RPC</SPAN>server. A second problem with <SPANCLASS="acronym">AUTH_UNIX</SPAN> is thatuser-written programs can have their <SPANCLASS="acronym">AUTH_UNIX</SPAN><SPANCLASS="acronym">UID</SPAN> and <SPANCLASS="acronym">GIDS</SPAN> set to any value.[12]When reserved port checking is enabled, <SPANCLASS="acronym">AUTH_UNIX</SPAN>offers roughly the same level of security as the <ICLASS="filename">rsh/rlogin</I>trusted-host facility.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[12] We have seen several &quot;NFS shells&quot; that allowa user to make such accesses in a largely automated way.</P></BLOCKQUOTE><PCLASS="para">Secure <SPANCLASS="acronym">NFS</SPAN> overcomes these problems byusing <SPANCLASS="acronym">AUTH_DES</SPAN> <SPANCLASS="acronym">RPC</SPAN> authenticationinstead of <SPANCLASS="acronym">AUTH_UNIX</SPAN>. With Secure <SPANCLASS="acronym">NFS</SPAN>,users must be able to decrypt a special key stored on the <SPANCLASS="acronym">NIS</SPAN>or <SPANCLASS="acronym">NIS</SPAN>+ server before the <SPANCLASS="acronym">NFS</SPAN>filesystem will allow the user to access his or her files.</P><PCLASS="para">To specify Secure <SPANCLASS="acronym">NFS</SPAN>, you must specifythe secure option both on the <SPANCLASS="acronym">NFS</SPAN> server (inthe <ICLASS="filename">exports</I> file or the <ICLASS="filename">dfstab</I>)and on the client (in the /<ICLASS="filename">etc/fstab</I>or <ICLASS="filename">/etc/vfstab</I> file).</P><BLOCKQUOTECLASS="note"><PCLASS="para"><STRONG>NOTE:</STRONG> Secure <SPANCLASS="acronym">NFS</SPAN> requires Secure <SPANCLASS="acronym">RPC</SPAN>to function, and therefore may not be available on all versionsof <SPANCLASS="acronym">UNIX</SPAN>. If you are in doubt about your system,check your documentation to see if your <SPANCLASS="acronym">NFS</SPAN> <ICLASS="filename">mount</I>command supports the secure option. Also note that Secure <SPANCLASS="acronym">RPC</SPAN>may not be available on non-<SPANCLASS="acronym">UNIX</SPAN> implementationsof <SPANCLASS="acronym">NFS</SPAN>, either.</P></BLOCKQUOTE><PCLASS="para">Here is an example of using Secure <SPANCLASS="acronym">NFS</SPAN>.Suppose that a server has a filesystem <ICLASS="filename">/Users</I> that it willexport using Secure <SPANCLASS="acronym">NFS</SPAN>. The server's<ICLASS="filename">/etc/dfs/dfstab</I> file might contain the followingline:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">share -F nfs -o secure,rw=clients /Users</PRE></BLOCKQUOTE><PCLASS="para">Meanwhile, the clients <ICLASS="filename">/etc/vfstab</I> filewould have a matching line:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">#device&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;device&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mount&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fsck&nbsp;&nbsp;&nbsp;&nbsp;mount&nbsp;&nbsp;&nbsp;&nbsp;mount#to&nbsp;moun&nbsp;&nbsp;&nbsp;&nbsp;to&nbsp;fsck&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pont&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type&nbsp;&nbsp;&nbsp;pass&nbsp;&nbsp;&nbsp;&nbsp;at&nbsp;boot&nbsp;&nbsp;options#server:/Users &nbsp;-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/Users&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nfs&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yes&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;secure</PRE></BLOCKQUOTE></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch20_03.htm"TITLE="20.3 Client-Side NFS Security"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 20.3 Client-Side NFS Security"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="Practical UNIX &amp; Internet Security"><IMGSRC="../gifs/txthome.gif"ALT="Practical UNIX &amp; Internet Security"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch20_05.htm"TITLE="20.5 Some Last Comments"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 20.5 Some Last Comments"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">20.3 Client-Side NFS Security</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">20.5 Some Last Comments</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><PCLASS="nav"><FONTSIZE="-1">[ <AHREF="../index.htm"TITLE="The Networking CD Bookshelf">Library Home</A> | <AHREF="../dnsbind/index.htm"TITLE="DNS &amp; BIND">DNS &amp; BIND</A> | <AHREF="../tcpip/index.htm"TITLE="TCP/IP Network Administration">TCP/IP</A> | <AHREF="../sendmail/index.htm"TITLE="sendmail">sendmail</A> | <AHREF="../smdref/index.htm"TITLE="sendmail Desktop Reference">sendmail Reference</A> | <AHREF="../firewall/index.htm"TITLE="Building Internet Firewalls">Firewalls</A> | <AHREF="index.htm"TITLE="Practical UNIX &amp; Internet Security">Practical Security</A> ]</FONT></P></DIV></BODY></HTML>