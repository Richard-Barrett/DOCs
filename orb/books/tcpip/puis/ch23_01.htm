<HTML><HEAD><TITLE>[Chapter 23] Writing Secure SUID and Network Programs</TITLE><METANAME="DC.title"CONTENT="Practical UNIX &amp; Internet Security"><METANAME="DC.creator"CONTENT="Simson Garfinkel &amp; Gene Spafford"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1999-02-04T00:17:28Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-148-8"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="part05.htm"TITLE="V. Advanced Topics"><LINKREL="prev"HREF="ch22_06.htm"TITLE="22.6 Writing Your Own Wrappers"><LINKREL="next"HREF="ch23_02.htm"TITLE="23.2 Tips on Avoiding Security-related Bugs"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="Practical UNIX &amp; Internet Security"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,65"HREF="index.htm"ALT="Practical UNIX &amp; Internet Security"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch22_06.htm"TITLE="22.6 Writing Your Own Wrappers"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 22.6 Writing Your Own Wrappers"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 23</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch23_02.htm"TITLE="23.2 Tips on Avoiding Security-related Bugs"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 23.2 Tips on Avoiding Security-related Bugs"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="CHAPTER"><H1CLASS="chapter"><ACLASS="title"NAME="PUIS-CHP-23">23. Writing Secure SUID and Network Programs</A></H1><DIVCLASS="htmltoc"><P><B>Contents:</B><BR><ACLASS="SECT1"HREF="#PUIS-CHP-23-SECT-1"TITLE="23.1 One Bug Can Ruin Your Whole Day...">One Bug Can Ruin Your Whole Day...</A><BR><ACLASS="SECT1"HREF="ch23_02.htm"TITLE="23.2 Tips on Avoiding Security-related Bugs">Tips on Avoiding Security-related Bugs</A><BR><ACLASS="SECT1"HREF="ch23_03.htm"TITLE="23.3 Tips on Writing Network Programs">Tips on Writing Network Programs</A><BR><ACLASS="SECT1"HREF="ch23_04.htm"TITLE="23.4 Tips on Writing SUID/SGID Programs">Tips on Writing SUID/SGID Programs</A><BR><ACLASS="SECT1"HREF="ch23_05.htm"TITLE="23.5 Tips on Using Passwords">Tips on Using Passwords</A><BR><ACLASS="SECT1"HREF="ch23_06.htm"TITLE="23.6 Tips on Generating Random Numbers">Tips on Generating Random Numbers</A><BR><ACLASS="SECT1"HREF="ch23_07.htm"TITLE="23.7 UNIX Pseudo-Random Functions">UNIX Pseudo-RandomFunctions</A><BR><ACLASS="SECT1"HREF="ch23_08.htm"TITLE="23.8 Picking a Random Seed">Picking a Random Seed</A><BR><ACLASS="SECT1"HREF="ch23_09.htm"TITLE="23.9 A Good Random Seed Generator">A Good Random SeedGenerator</A></P><P></P></DIV><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-31956"></A><ACLASS="indexterm"NAME="AUTOID-31959"></A><ACLASS="indexterm"NAME="AUTOID-31961"></A>With a few minor exceptions, the underlying security model of the <SPANCLASS="acronym">UNIX</SPAN>operating system&nbsp;- a privileged kernel, user processes, andthe superuser who can perform any system management function&nbsp;- isfundamentally workable. But if that is the case, then why has <SPANCLASS="acronym">UNIX</SPAN>had so many security problems in recent years? The answer is simple:although the <SPANCLASS="acronym">UNIX</SPAN> security model is basicallysound, programmers are careless. Most security flaws in <SPANCLASS="acronym">UNIX</SPAN>arise from bugs and design errors in programs that run as <ICLASS="filename">root</I> orwith other privileges, as a result of configuration errors, or throughthe unanticipated interactions between such programs.</P><DIVCLASS="sect1"><H2CLASS="sect1"><ACLASS="title"NAME="PUIS-CHP-23-SECT-1">23.1 One Bug Can Ruin Your Whole Day...</A></H2><PCLASS="para">The disadvantage of the <SPANCLASS="acronym">UNIX</SPAN> security model is thatit makes a tremendous investment in the infallibility of the superuserand in the software that runs with the privileges of the superuser.If the superuser account is compromised, then the system is leftwide open. Hence our many admonitions in this book to protect thesuperuser account, and to restrict the number of people who mustknow the password.</P><PCLASS="para">Unfortunately, even if you prevent users from logging into thesuperuser account, many <SPANCLASS="acronym">UNIX</SPAN> programs need to runwith superuser privileges. These programs are run as<SPANCLASS="acronym">SUID</SPAN> <ICLASS="filename">root</I> programs, when the system boots, or asnetwork servers. A single bug in any of these complicated programs cancompromise the safety of your entire system. This characteristic isprobably a design flaw, but it is basic to the design of<SPANCLASS="acronym">UNIX</SPAN>, and is not likely to change.</P><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-23-SECT-1.1">23.1.1 The Lesson of the Internet Worm</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-31980"></A><ACLASS="indexterm"NAME="AUTOID-31983"></A>One of the best-known examplesof such a flaw was a single line of code in the program<ICLASS="filename">/etc/fingerd</I>, the <KBDCLASS="command">finger</KBD> server, exploited in 1988 by RobertT. Morris's Internet Worm. <KBDCLASS="command">fingerd</KBD> provides <KBDCLASS="command">finger</KBD> service overthe network. One of the very first lines of the program reads a singleline of text from standard input containing the name of the user thatis to be &quot;fingered.&quot;</P><PCLASS="para">The original <KBDCLASS="command">fingerd</KBD> program contained these lines of code:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">char line[512];line[0]= &quot;\0&quot;;gets(line);</PRE></BLOCKQUOTE><PCLASS="para">Because the <ACLASS="indexterm"NAME="AUTOID-31994"></A><KBDCLASS="command">gets()</KBD>function does not check the length of the line read, a rogue programcould supply more than 512 bytes of valid data, enabling the stackframe of the <KBDCLASS="command">fingerd</KBD> server to be overrun. Morris[1] wrote code that caused <KBDCLASS="command">fingerd</KBD> to execute a shell; because<KBDCLASS="command">fingerd </KBD> was usually installed to run as thesuperuser, the rogue program inherited virtually unrestricted accessto the server computer. (<KBDCLASS="command">fingerd</KBD> didn't really need to run assuperuser&nbsp;- that was simply the default configuration.)</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[1] Orsomeone else. As noted in Spafford's original analysis of thecode (see <ACLASS="xref"HREF="appd_01.htm"TITLE="Paper Sources">Appendix D, <CITECLASS="appendix">Paper Sources</CITE></A>), there is some indication thatMorris did not write this portion of the Worm program.</P></BLOCKQUOTE><PCLASS="para">The fix for the <KBDCLASS="command">finger</KBD> program was simple:replace the <KBDCLASS="command">gets()</KBD> functionwith the <ACLASS="indexterm"NAME="AUTOID-32007"></A><KBDCLASS="command">fgets()</KBD>function, which does not allow its input buffer length to be exceeded:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">fgets(line,sizeof(line),stdin);</PRE></BLOCKQUOTE><PCLASS="para">Fortunately, theMorris version did not explicitly damage programs or data on computersthat it penetrated.[2] Nevertheless, itillustrated the fact that any network service program can potentiallycompromise the system. Furthermore, the flaw was unnoticed in the<KBDCLASS="command">finger</KBD> code for more than six years, from the time of the firstBerkeley <SPANCLASS="acronym">UNIX</SPAN> network software release until theday that the Worm ran loose. Remember this lesson: because a hole hasnever been discovered in a program does not mean that no holeexists. </P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[2] However, as the worm did run withprivileges of the superuser, it could have altered the compromisedsystem in any number of ways.</P></BLOCKQUOTE><PCLASS="para">Interestingly enough, the fallible humancomponent is illustrated by the same example. Shortly after theproblem with the<KBDCLASS="command">gets</KBD>() subroutinewas exposed, the Berkeley group went through all of its code andeliminated every similar use of the<KBDCLASS="command">gets</KBD>() call in anetwork server. Most vendors did the same with their code.  Severalpeople, including one of us, publicly warned that uses of other librarycalls that wrote to buffers without bounds checks also needed to beexamined. These included calls to the<ACLASS="indexterm"NAME="AUTOID-32019"></A><KBDCLASS="command">sprintf</KBD>() routine, and byte-copy routines such as<ACLASS="indexterm"NAME="AUTOID-32022"></A><KBDCLASS="command">strcpy()</KBD>.</P><PCLASS="para">In late 1995, as we were finishing the second edition of thisbook, a new security vulnerability in several versions of<SPANCLASS="acronym">UNIX</SPAN> was widely publicized. It was based on bufferoverruns in the <KBDCLASS="command"><ACLASS="indexterm"NAME="AUTOID-32028"></A>syslog</KBD> library routine. Anattacker could carefully craft an argument to a network daemon suchthat, when an attempt was made to log it using<KBDCLASS="command">syslog</KBD>, the message overran the buffer andcompromised the system in a manner hauntingly similar to the <KBDCLASS="command">fingerd</KBD>problem. After seven years, a cousin to the <KBDCLASS="command">fingerd</KBD>bug was discovered. What underlying library calls contribute to theproblem? The<KBDCLASS="command">sprintf</KBD>()library call does, and so do byte-copy routines such as<EMCLASS="emphasis">strcpy</EM>().</P><PCLASS="para">While programming tools and methods are regrettable andlead to many <SPANCLASS="acronym">UNIX</SPAN> security bugs, the failure tolearn from old mistakes is even more regrettable.</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-23-SECT-1.2">23.1.2 An Empirical Study of the Reliability of UNIX Utilities</A></H3><PCLASS="para">In December 1990, the <EMCLASS="emphasis">Communicationsof the ACM </EM>published an article by<ACLASS="indexterm"NAME="IDX-MILLER-BARTON"></A>Miller, Fredrickson, and So, entitled&quot;An Empirical Study of the Reliability of<SPANCLASS="acronym">UNIX</SPAN> Utilities&quot; (Volume 33, issue 12,pp. 32-44). The paper started almost as a joke: a researcher waslogged into a <SPANCLASS="acronym">UNIX</SPAN> computer from home, and theprograms he was running kept crashing because of line noise from apoor modem connection. Eventually Barton Miller, a professor at theUniversity of Wisconsin, decided to subject the<SPANCLASS="acronym">UNIX</SPAN> utility programs from a variety of differentvendors to a selection of random inputs and monitor theresults.</P><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="PUIS-CHP-23-SECT-1.2.1">23.1.2.1 What they found</A></H4><PCLASS="para">The resultswere discouraging.  Between 25% and 33% of the<SPANCLASS="acronym">UNIX</SPAN> utilities could be crashed or hung bysupplying them with unexpected inputs&nbsp;- sometimes input that wasas simple as an end-of-file on the middle of an input line. On atleast one occasion, crashing a program tickled an operating system bugand caused the entirecomputer to crash. Many times, programs would freeze for no apparentreason.</P><PCLASS="para">In 1995 a new team headed by Miller repeatedthe experiment, this time running a program called <ICLASS="filename">Fuzz</I> on nine different <SPANCLASS="acronym">UNIX</SPAN> platforms.The team also tested <SPANCLASS="acronym">UNIX</SPAN> network servers, anda variety of X Windows applications (both clients and servers).[3]Here are some of the highlights:</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[3] You can download a complete copy of the papers from <ACLASS="systemitem.url"HREF="ftp://grilled.cs.wisc.edu/technical_papers/fuzz-revisited.ps.Z.">ftp://grilled.cs.wisc.edu/technical_papers/fuzz-revisited.ps.Z.</A></P></BLOCKQUOTE><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-32060"></A>Accordingto the 1995 paper, vendors were still shipping a distressingly buggyset of programs: &quot;...the failure rate of utilitieson the commercial versions of <SPANCLASS="acronym">UNIX</SPAN> that we tested(from Sun, <SPANCLASS="acronym">IBM</SPAN>, <SPANCLASS="acronym">SGI</SPAN>, <SPANCLASS="acronym">DEC</SPAN>,and NeXT) ranged from 15-43%.&quot;</P></LI><LICLASS="listitem"><PCLASS="para"><SPANCLASS="acronym">UNIX</SPAN> vendors don't seemto be overly concerned about bugs in their programs: &quot;Manyof the bugs discovered (approximately 40%) and reportedin 1990 are still present in their exact form in 1995. The 1990study was widely published in at least two languages. The code wasmade freely available via anonymous <SPANCLASS="acronym">FTP</SPAN>. Theexact random data streams used in our testing were made freely availablevia <SPANCLASS="acronym">FTP</SPAN>. The identification of failures thatwe found were also made freely available via <SPANCLASS="acronym">FTP</SPAN>;these include code fragments with file and line numbers for theerrant code. According to our records, over 2000 copies of the...toolsand bug identifications were fetched from our <SPANCLASS="acronym">FTP</SPAN>sites...It is difficult to understand why a vendor would not partakeof a free and easy source of reliability improvements.&quot;</P></LI><LICLASS="listitem"><PCLASS="para">The two lowest failure rates in the study were theFree Software Foundation's <ACLASS="indexterm"NAME="AUTOID-32075"></A><ACLASS="indexterm"NAME="AUTOID-32077"></A><SPANCLASS="acronym">GNU</SPAN> utilities (failure rateof 7%) and the utilities included with the freely distributedLinux version of the <SPANCLASS="acronym">UNIX</SPAN> operating system (failurerate 9%).[4]Interestingly enough, the Free Software Foundation has strict codingrules that forbid the use of fixed-length buffers. (Miller <EMCLASS="emphasis">etal</EM> failed to note that many of the Linux utilities wererepackaged <SPANCLASS="acronym">GNU</SPAN> utilities.)</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[4] We don't believe that7% is an acceptable failure rate, either.</P></BLOCKQUOTE></LI></UL><PCLASS="para">There were a few bright points in the 1995 paper. Most notablewas the fact that Miller <EMCLASS="emphasis">et al.</EM> were unableto crash any <SPANCLASS="acronym">UNIX</SPAN> network server. The group wasalso unable to crash any X Windows server. </P><PCLASS="para">Onthe other hand, the group discovered that many X clients will readilycrash when fed random streams of data. Others will lock up&nbsp;- andin the process, freeze the X server until the programs are terminated.</P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="PUIS-CHP-23-SECT-1.2.2">23.1.2.2 Where's the beef?</A></H4><PCLASS="para">Many of theerrors that Miller's group discovered result from commonprogramming mistakes with the C programming language&nbsp;- programmerswho wrote clumsy or confusing code that did the wrong things; programerswho neglected to check for array boundary conditions; and programmerswho assumed that their <EMCLASS="emphasis">char</EM> variables wereunsigned, when in fact they are signed. </P><PCLASS="para">While theseerrors can certainly cause programs to crash when they are fed randomstreams of data, these errors are exactly the kinds of problemsthat can be exploited by carefully crafted streams of data to achievemalicious results. Think back to the Internet Worm: if attackedby the Miller Fuzz program, the original <KBDCLASS="command">fingerd</KBD> programwould have crashed. But when presented with the carefully craftedstream that was present in the Morris Worm, the program gave itsattacker a <EMCLASS="emphasis">root shell! </EM></P><PCLASS="para">What issomewhat frightening about the study is that the tests employedby Miller's group are among the least comprehensive knownto testers&nbsp;- random, black-box testing. Different patternsof input could possibly cause more programs to fail. Inputs madeunder different environmental circumstances could also lead to abnormalbehavior. Other testing methods could expose these problems whererandom testing, by its very nature, would not.</P><PCLASS="para">Miller'sgroup also found that use of several commercially available toolsenabled them to discover errors and perform other tests, includingdiscovery of buffer overruns and related memory errors. These toolsare readily available; however, vendors are apparently not usingthem.</P><PCLASS="para">Why don't vendors care more about quality?Well, according to many of them, they do care, but quality doesnot sell. Writing good code and testing it carefully is not a quickor simple task. It requires extra effort, and extra time. The extratime spent on ensuring quality will result in increased cost. Todate, few customers (possibly including you, gentle reader) haveindicated a willingness to pay extra for better-quality software.Vendors have thus put their efforts into what customers are willingto buy, such as new features. Although we believe that most vendorscould do a better job in this respect (and some could do a <EMCLASS="emphasis">much</EM>better job), we must be fair and point the finger at the user population,too.</P><PCLASS="para">In some sense, any program you write might fareas well as vendor-supplied software. However, that isn'tgood enough if the program is running in a sensitive role and mightbe abused. Therefore, you must practice good coding habits, andpay special attention to common trouble spots.<ACLASS="indexterm"NAME="AUTOID-32101"></A></P></DIV></DIV></DIV><ACLASS="indexterm"NAME="AUTOID-33115"></A></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch22_06.htm"TITLE="22.6 Writing Your Own Wrappers"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 22.6 Writing Your Own Wrappers"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="Practical UNIX &amp; Internet Security"><IMGSRC="../gifs/txthome.gif"ALT="Practical UNIX &amp; Internet Security"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch23_02.htm"TITLE="23.2 Tips on Avoiding Security-related Bugs"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 23.2 Tips on Avoiding Security-related Bugs"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">22.6 Writing Your Own Wrappers</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">23.2 Tips on Avoiding Security-related Bugs</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><PCLASS="nav"><FONTSIZE="-1">[ <AHREF="../index.htm"TITLE="The Networking CD Bookshelf">Library Home</A> | <AHREF="../dnsbind/index.htm"TITLE="DNS &amp; BIND">DNS &amp; BIND</A> | <AHREF="../tcpip/index.htm"TITLE="TCP/IP Network Administration">TCP/IP</A> | <AHREF="../sendmail/index.htm"TITLE="sendmail">sendmail</A> | <AHREF="../smdref/index.htm"TITLE="sendmail Desktop Reference">sendmail Reference</A> | <AHREF="../firewall/index.htm"TITLE="Building Internet Firewalls">Firewalls</A> | <AHREF="index.htm"TITLE="Practical UNIX &amp; Internet Security">Practical Security</A> ]</FONT></P></DIV></BODY></HTML>