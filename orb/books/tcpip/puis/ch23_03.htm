<HTML><HEAD><TITLE>[Chapter 23] 23.3 Tips on Writing Network Programs</TITLE><METANAME="DC.title"CONTENT="Practical UNIX &amp; Internet Security"><METANAME="DC.creator"CONTENT="Simson Garfinkel &amp; Gene Spafford"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1999-02-04T00:17:39Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-148-8"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch23_01.htm"TITLE="23. Writing Secure SUID and Network Programs"><LINKREL="prev"HREF="ch23_02.htm"TITLE="23.2 Tips on Avoiding Security-related Bugs"><LINKREL="next"HREF="ch23_04.htm"TITLE="23.4 Tips on Writing SUID/SGID Programs"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="Practical UNIX &amp; Internet Security"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,65"HREF="index.htm"ALT="Practical UNIX &amp; Internet Security"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch23_02.htm"TITLE="23.2 Tips on Avoiding Security-related Bugs"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 23.2 Tips on Avoiding Security-related Bugs"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 23<BR>Writing Secure SUID and Network Programs</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch23_04.htm"TITLE="23.4 Tips on Writing SUID/SGID Programs"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 23.4 Tips on Writing SUID/SGID Programs"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="PUIS-CHP-23-SECT-3">23.3 Tips on Writing Network Programs</A></H2><PCLASS="para"><ACLASS="indexterm"NAME="IDX-NETWORK-SERVICES"></A><ACLASS="indexterm"NAME="IDX-PROGRAMS-FOR-NETWORK-SERVICES"></A>Ifyou are coding a new network service, there are also a number ofpitfalls to consider. This is a partial list of concerns and advicefor writing more secure network code:</P><OLCLASS="orderedlist"><LICLASS="listitem"><PCLASS="para">Don't make any hard-codedassumptions about service <ACLASS="indexterm"NAME="AUTOID-32566"></A>portnumbers. </P><PCLASS="para">Use the library <KBDCLASS="command">getservbyname()</KBD>and related calls, plus system include files, to get important values.Remember that sometimes constants aren't constant.</P></LI><LICLASS="listitem"><PCLASS="para">Don't place undue reliance on the factthat any incoming packets are from (or claim to be from) a low-numbered,privileged port. </P><PCLASS="para">Any PC can send from those ports,and forged packets can claim to be from any port.</P></LI><LICLASS="listitem"><PCLASS="para">Don't place undue reliance on the sourceIP address in the packets of connections you received. Such itemsmay be forged or altered.</P></LI><LICLASS="listitem"><PCLASS="para">Do a <ACLASS="indexterm"NAME="AUTOID-32577"></A>reverselookup on connections when you need a hostname for any reason. </P><PCLASS="para">After you have obtained a hostname to go with the IP addressyou have, do another lookup on that hostname to ensure that itsIP address matches what you have.</P></LI><LICLASS="listitem"><PCLASS="para">Include some form of <ACLASS="indexterm"NAME="AUTOID-32582"></A><ACLASS="indexterm"NAME="AUTOID-32584"></A>load shedding or load limiting in your serverto handle cases of excessive load. </P><PCLASS="para">Consider what should happen if someone makes a concerted effortto direct a denial of service attack against your server. For example,you may wish to have a server stop processing incoming requests if theload goes over some predefined value.</P></LI><LICLASS="listitem"><PCLASS="para">Put reasonable <ACLASS="indexterm"NAME="AUTOID-32590"></A><ACLASS="indexterm"NAME="AUTOID-32592"></A>time-outs on each network-oriented read request. </P><PCLASS="para">A remote server that does not respond quickly may be common,but one that does not respond for days may hang up your code awaitinga reply. This rule is especially important in <SPANCLASS="acronym">TCP</SPAN>-basedservers that may continue attempting delivery indefinitely.</P></LI><LICLASS="listitem"><PCLASS="para">Put reasonable time-outs on each network <ACLASS="indexterm"NAME="AUTOID-32599"></A>write request. </P><PCLASS="para">If someremote server accepts the first few bytes and then blocks indefinitely,you do not want it to lock up your code awaiting completion.</P></LI><LICLASS="listitem"><PCLASS="para">Make no assumptions about the content of input data,no matter what the source is. </P><PCLASS="para">For instance, do notassume that input is null-terminated, contains linefeeds, or iseven in standard <SPANCLASS="acronym">ASCII</SPAN> format. Your program shouldbehave in a defined manner if it receives random binary data aswell as expected input.</P></LI><LICLASS="listitem"><PCLASS="para">Make no assumptions about the amount of input sentby the remote machine. </P><PCLASS="para">Put in bounds checking on individualitems read, and on the total amount of data read (see the sidebarfor one reason why).</P><DIVCLASS="sidebar"><H4CLASS="sidebar"><ACLASS="title"NAME="AUTOID-32610">Getting More Than You Expected</A></H4><PCLASS="para">You must ensure that your programs, whether they run locallyor over a network, properly handle extended and ill-defined input.We illustrate this point with an edited retelling of an anecdoterelated to one of us by <ACLASS="indexterm"NAME="AUTOID-32613"></A>TsutomuShimomura.</P><PCLASS="para">One day, Shimomura noticed that a certainDepartment of Energy <SPANCLASS="acronym">FTP</SPAN> server machine was setto <KBDCLASS="command">finger</KBD> any machine from which it received an anonymous <SPANCLASS="acronym">FTP</SPAN>request. This bothered Shimomura a little, as anonymous <SPANCLASS="acronym">FTP</SPAN>is more or less as the name implies. Why should the administratorsof that site care? If who was on the machines connecting to theirsmattered, they shouldn't have put up anonymous <SPANCLASS="acronym">FTP</SPAN>.</P><PCLASS="para">This also piqued Shimomura's scientific curiosity,however. Were they using standard <ICLASS="filename">finger?</I> Hemodified his local <KBDCLASS="command">inetd</KBD> configuration to point incoming <KBDCLASS="command">finger</KBD>requests to his character generator (<KBDCLASS="command">chargen</KBD>). He then connectedto the remote <SPANCLASS="acronym">FTP</SPAN> server and logged out again.</P><PCLASS="para">Over the next few hours, Shimomura's machine shippedtens of megabytes of characters to the remote site. Eventually,late at night, the connection was broken. The remote machine nolonger answered any network requests and appeared to have disappearedfrom the network. When it reappeared the next morning, the automatic<KBDCLASS="command">finger</KBD>-of-machines connection for <SPANCLASS="acronym">FTP</SPAN> was nolonger present.</P><PCLASS="para">The moral of this little story is thatif you are going to ask for something, be sure that you are ableto handle <EMCLASS="emphasis">anything</EM> that you might get.</P></DIV></LI><LICLASS="listitem"><PCLASS="para">Consider doing a call to the <ACLASS="indexterm"NAME="AUTOID-32634"></A><KBDCLASS="command">authd</KBD> service on the remote site to identifythe putative source of the connection. </P><PCLASS="para">However, remembernot to place too much trust in the response.</P></LI><LICLASS="listitem"><PCLASS="para">Do not require the user to send a reusable <ACLASS="indexterm"NAME="AUTOID-32640"></A><ACLASS="indexterm"NAME="AUTOID-32643"></A>passwordin cleartext over the network connection to authenticate himself.</P><PCLASS="para">Either use one-time passwords, or some shared, secretmethod of authentication that does not require sending compromisableinformation across the network.</P><PCLASS="para">For instance, the <SPANCLASS="acronym">APOP</SPAN> protocol used in the<SPANCLASS="acronym">POP</SPAN> mail service has the server send the client aunique character string, usually including the current date andtime.[10]The client then hashes the timestamp together with the user'spassword. The result is sent back to the server. The server alsohas the password and performs the same operation to determine ifthere is a match. The password is never transmitted across the network.This approach is described further in the discussion of <SPANCLASS="acronym">POP</SPAN>in <ACLASS="xref"HREF="ch17_01.htm"TITLE="TCP/IP Services">Chapter 17, <CITECLASS="chapter">TCP/IP Services</CITE></A>.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[10] This string is usually referred to as a<ICLASS="firstterm"><ACLASS="indexterm"NAME="AUTOID-32652"></A>nonce</I>.</P></BLOCKQUOTE></LI><LICLASS="listitem"><PCLASS="para">Consider adding some form of sessionencryption to prevent eavesdropping and foil session hijacking.</P><PCLASS="para">But don't try writing your own cryptographyfunctions; see <ACLASS="xref"HREF="ch06_01.htm"TITLE="Cryptography">Chapter 6, <CITECLASS="chapter">Cryptography</CITE></A>,for algorithms that are known to be strong.</P></LI><LICLASS="listitem"><PCLASS="para">Build in support to use a proxy. </P><PCLASS="para">Considerusing <SPANCLASS="acronym">SOCKS</SPAN>, described in <ACLASS="xref"HREF="ch22_01.htm"TITLE="Wrappers and Proxies">Chapter 22, <CITECLASS="chapter">Wrappers and Proxies</CITE></A>) so that the code is firewallfriendly.</P></LI><LICLASS="listitem"><PCLASS="para">Make sure that good logging is performed. </P><PCLASS="para">Thisincludes logging connections, disconnects, rejected connections,detected errors, and format problems.</P></LI><LICLASS="listitem"><PCLASS="para">Build in a graceful shutdown so that the systemoperator can signal the program to shut down and clean up sensitivematerials. </P><PCLASS="para">Usually, this process means trapping the<SPANCLASS="acronym">TERM</SPAN> signal and cleaning up afterwards.</P></LI><LICLASS="listitem"><PCLASS="para">Consider programming a &quot;heartbeat&quot;log function in servers that can be enabled dynamically. </P><PCLASS="para">Thisfunction will periodically log a message indicating that the serverwas still active and working correctly, and possibly record somecumulative activity statistics.</P></LI><LICLASS="listitem"><PCLASS="para">Build in some self recognition or locking to preventmore than one copy of a server from running at a time. </P><PCLASS="para">Sometimes, services are accidentally restarted, which may leadto race conditions and the destruction of logs if it's notrecognized and stopped early.<ACLASS="indexterm"NAME="AUTOID-32678"></A><ACLASS="indexterm"NAME="AUTOID-32679"></A></P></LI></OL></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch23_02.htm"TITLE="23.2 Tips on Avoiding Security-related Bugs"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 23.2 Tips on Avoiding Security-related Bugs"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="Practical UNIX &amp; Internet Security"><IMGSRC="../gifs/txthome.gif"ALT="Practical UNIX &amp; Internet Security"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch23_04.htm"TITLE="23.4 Tips on Writing SUID/SGID Programs"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 23.4 Tips on Writing SUID/SGID Programs"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">23.2 Tips on Avoiding Security-related Bugs</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">23.4 Tips on Writing SUID/SGID Programs</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><PCLASS="nav"><FONTSIZE="-1">[ <AHREF="../index.htm"TITLE="The Networking CD Bookshelf">Library Home</A> | <AHREF="../dnsbind/index.htm"TITLE="DNS &amp; BIND">DNS &amp; BIND</A> | <AHREF="../tcpip/index.htm"TITLE="TCP/IP Network Administration">TCP/IP</A> | <AHREF="../sendmail/index.htm"TITLE="sendmail">sendmail</A> | <AHREF="../smdref/index.htm"TITLE="sendmail Desktop Reference">sendmail Reference</A> | <AHREF="../firewall/index.htm"TITLE="Building Internet Firewalls">Firewalls</A> | <AHREF="index.htm"TITLE="Practical UNIX &amp; Internet Security">Practical Security</A> ]</FONT></P></DIV></BODY></HTML>