<HTML><HEAD><TITLE>[Chapter 23] 23.4 Tips on Writing SUID/SGID Programs</TITLE><METANAME="DC.title"CONTENT="Practical UNIX &amp; Internet Security"><METANAME="DC.creator"CONTENT="Simson Garfinkel &amp; Gene Spafford"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1999-02-04T00:17:48Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-148-8"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch23_01.htm"TITLE="23. Writing Secure SUID and Network Programs"><LINKREL="prev"HREF="ch23_03.htm"TITLE="23.3 Tips on Writing Network Programs"><LINKREL="next"HREF="ch23_05.htm"TITLE="23.5 Tips on Using Passwords"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="Practical UNIX &amp; Internet Security"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,65"HREF="index.htm"ALT="Practical UNIX &amp; Internet Security"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch23_03.htm"TITLE="23.3 Tips on Writing Network Programs"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 23.3 Tips on Writing Network Programs"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 23<BR>Writing Secure SUID and Network Programs</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch23_05.htm"TITLE="23.5 Tips on Using Passwords"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 23.5 Tips on Using Passwords"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="PUIS-CHP-23-SECT-4">23.4 Tips on Writing SUID/SGID Programs</A></H2><PCLASS="para"><ACLASS="indexterm"NAME="IDX-SUID-SGID-PROGRAMS-WRITING"></A>If you are writing programs that are<SPANCLASS="acronym">SUID</SPAN> or <SPANCLASS="acronym">SGID</SPAN>, you must takeadded precautions in your programming. <EMCLASS="emphasis">An</EM> <EMCLASS="emphasis">overwhelmingnumber of </EM><SPANCLASS="acronym">UNIX</SPAN><EMCLASS="emphasis"> securityproblems have been caused by SUID/SGID programs. </EM>Theserules should be considered in addition to the previous list<EMCLASS="emphasis">.</EM></P><PCLASS="para">Here are some rules for writing (and not writing) <SPANCLASS="acronym">SUID/SGID</SPAN>programs:</P><OLCLASS="orderedlist"><LICLASS="listitem"><PCLASS="para">&quot;Don't do it. Mostof the time, it's not necessary.&quot;[11]</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[11] Thanks to Patrick H. Wood and Stephen G. Kochan, <EMCLASS="emphasis">UNIXSystem Security, </EM>Hayden Books, 1985, for this insightfulremark.</P></BLOCKQUOTE></LI><LICLASS="listitem"><PCLASS="para">Avoid writing <SPANCLASS="acronym">SUID</SPAN> shell scripts.</P></LI><LICLASS="listitem"><PCLASS="para">If you are using <SPANCLASS="acronym">SUID</SPAN> to accessa special set of files, don't. </P><PCLASS="para">Instead, createa special group for your files and make the program <SPANCLASS="acronym">SGID</SPAN>to <EMCLASS="emphasis">that group</EM>. If you must use <SPANCLASS="acronym">SUID</SPAN>,create a special user for the purpose.</P></LI><LICLASS="listitem"><PCLASS="para">If your program needs to perform some functionsas superuser, but generally does not require <SPANCLASS="acronym">SUID</SPAN>permissions, consider putting the <SPANCLASS="acronym">SUID</SPAN> part ina different program, and constructing a carefully controlled andmonitored interface between the two.</P></LI><LICLASS="listitem"><PCLASS="para">If you need <SPANCLASS="acronym">SUID</SPAN> or <SPANCLASS="acronym">SGID</SPAN>permissions, use them for their intended purpose as early in theprogram as possible, and then revoke them by returning the effective,and real, <SPANCLASS="acronym">UIDS</SPAN> and <SPANCLASS="acronym">GIDS</SPAN> tothose of the process that invoked the program.</P></LI><LICLASS="listitem"><PCLASS="para">If you have a program that absolutely must run as<SPANCLASS="acronym">SUID</SPAN>, try to avoid equipping the program witha general-purpose interface that allows users to specify much inthe way of commands or options. </P></LI><LICLASS="listitem"><PCLASS="para">Erase the execution environment, if at all possible,and start fresh. </P><PCLASS="para">Many security problems have been caused because there was asignificant difference between the environment in which the programwas run by an attacker and the environment under which the program wasdeveloped. (See item 5 under <ACLASS="xref"HREF="ch23_02.htm"TITLE="Tips on Avoiding Security-related Bugs">Section 23.2, "Tips on Avoiding Security-related Bugs</A>&quot;earlier in this chapter for more information about thissuggestion.)</P></LI><LICLASS="listitem"><PCLASS="para">If your program must spawn processes, use only the<EMCLASS="emphasis"><ACLASS="indexterm"NAME="AUTOID-32731"></A><ACLASS="indexterm"NAME="AUTOID-32733"></A><ACLASS="indexterm"NAME="AUTOID-32735"></A><ACLASS="indexterm"NAME="AUTOID-32737"></A><ACLASS="indexterm"NAME="AUTOID-32739"></A>execve()</EM>, <EMCLASS="emphasis">execv( )</EM>, or <EMCLASS="emphasis">execl()</EM> calls, and use them with great care. </P><PCLASS="para">Avoidthe <EMCLASS="emphasis">execlp( )</EM> and <EMCLASS="emphasis">execvp(  )</EM>calls because they use the <SPANCLASS="acronym">PATH</SPAN> environment variableto find an executable, and you might not run what you think youare running.</P></LI><LICLASS="listitem"><PCLASS="para">If you must provide a shell escape, be sure to <ACLASS="indexterm"NAME="AUTOID-32749"></A><ACLASS="indexterm"NAME="AUTOID-32751"></A><KBDCLASS="command">setgid(getgid( ))</KBD> and<ICLASS="filename">setuid(getuid( ))</I> before executing the user'scommand.</P></LI><LICLASS="listitem"><PCLASS="para">In general, use the <KBDCLASS="command">setuid()</KBD> and <KBDCLASS="command">setgid()</KBD>functions to bracket the sections of your code which require superuserprivileges. For example:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">setuid(0);				/* Become superuser to open the master file */fd = open(&quot;/etc/masterfile&quot;,O_RDONLY);setuid(-1);				/* Give up superuser for now */if(fd&lt;0) error_open();	/* Handle errors */</PRE></BLOCKQUOTE></LI></OL><PCLASS="para">Not all versions of <SPANCLASS="acronym">UNIX</SPAN> allow you to switch<SPANCLASS="acronym">UIDS</SPAN> like this; however, most modern versionsdo.</P><OLCLASS="orderedlist"><LICLASS="listitem"><PCLASS="para">If you must use pipes or subshells,be especially careful with the environment variables <ACLASS="indexterm"NAME="AUTOID-32766"></A><ACLASS="indexterm"NAME="AUTOID-32768"></A><SPANCLASS="acronym">PATH</SPAN> and <SPANCLASS="acronym">IFS</SPAN>.</P><PCLASS="para">If at all possible, erase these variables and set themto safe values. For example:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">putenv(&quot;PATH=/bin:/usr/bin:/usr/ucb&quot;);putenv(&quot;IFS= \t\n&quot;);</PRE></BLOCKQUOTE><PCLASS="para">Then, examine theenvironment to be certain that there is only <EMCLASS="emphasis">one</EM> instance of thevariable: the one you set. An attacker can run your code from anotherprogram that creates multiple instances of an environment variable.Without an explicit check, you may find the first instance, butnot the others; such a situation could result in problems lateron. In particular, step through the elements of the environmentyourself rather than depending on the library <KBDCLASS="command">getenv()</KBD>function.</P></LI><LICLASS="listitem"><PCLASS="para">Use the full pathname for all files that you open.</P><PCLASS="para">Do not make any assumptions about the current directory.(You can enforce this requirement by doing a <EMCLASS="emphasis">chdir(/tmp/root/)</EM>as one of the first steps in your program, but be sureto check the return code!)</P></LI><LICLASS="listitem"><PCLASS="para">Consider <ACLASS="indexterm"NAME="AUTOID-32783"></A><ACLASS="indexterm"NAME="AUTOID-32785"></A>staticallylinking your program, if possible. </P><PCLASS="para">If a user can substitutea different module in a dynamic library, even carefully coded programsare vulnerable. (We have some serious misgivings about the trendin commercial systems towards completely shared, dynamic libraries.See our comments in the section <ACLASS="xref"HREF="ch11_01.htm"TITLE="Protecting Against Programmed Threats">Chapter 11, <CITECLASS="chapter">Protecting Against Programmed Threats</CITE></A>.)</P></LI><LICLASS="listitem"><PCLASS="para">Consider using <EMCLASS="emphasis"><ACLASS="indexterm"NAME="AUTOID-32793"></A><ACLASS="indexterm"NAME="AUTOID-32796"></A><ACLASS="indexterm"NAME="AUTOID-32798"></A>perl -T </EM>or <KBDCLASS="command">taintperl</KBD>for your <SPANCLASS="acronym">SUID</SPAN> programs and scripts. </P><PCLASS="para">Perl'stainting features make it more suited to <SPANCLASS="acronym">SUID</SPAN>programming than C. For example, <KBDCLASS="command">taintperl</KBD> willinsist that you set the <SPANCLASS="acronym">PATH</SPAN> environment variableto a known &quot;safe value&quot; before calling <EMCLASS="emphasis">system().</EM>The program will also require that you &quot;untaint&quot;any variable that is input from the user before using it (or anyvariable dependent on that variable) as an argument for openinga file.</P><PCLASS="para">However, note that you can still get yourselfin a great deal of trouble with <KBDCLASS="command">taintperl</KBD> ifyou circumvent its checks or you are careless in writing code. Alsonote that using <KBDCLASS="command">taintperl</KBD> introduces dependenceon another large body of code working correctly: we'd suggestyou skip using <KBDCLASS="command">taintperl</KBD> if you believe you cancode at least as well as Larry Wall.[12]</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[12] Hint: if youthink you can, you are probably wrong.</P></BLOCKQUOTE></LI></OL><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-23-SECT-4.1">23.4.1 Using chroot()</A></H3><PCLASS="para">If you are writing a <SPANCLASS="acronym">SUID</SPAN> <ICLASS="filename">root</I> program,you can enhance its security by using the <ACLASS="indexterm"NAME="AUTOID-32818"></A><KBDCLASS="command">chroot()</KBD> system call. The <KBDCLASS="command">chroot()</KBD>call changes the root directory of a process to a specified subdirectorywithin your filesystem. This change essentially gives the callingprocess a private world from which it cannot escape.</P><PCLASS="para">Forexample, if you have a program which only needs to listen to thenetwork and write into a log file that is stored in the directory<ICLASS="filename">/usr/local/logs</I>, then you could executethe following system call to restrict the program to that directory:</P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">chroot(&quot;/usr/local/logs&quot;);</PRE></BLOCKQUOTE><PCLASS="para">There are several issues that you must be aware of when usingthe <KBDCLASS="command">chroot()</KBD> system call that are not immediately obvious:</P><OLCLASS="orderedlist"><LICLASS="listitem"><PCLASS="para">If your operating system supports sharedlibraries and you are able to statically link your program, youshould be sure that your program is statically linked. On some systems,static linking is not possible. On these systems, you should makecertain that the necessary shared libraries are available withinthe restricted directory (as copies).</P></LI><LICLASS="listitem"><PCLASS="para">You should not give users write access to the <KBDCLASS="command">chroot()</KBD>'eddirectory.</P></LI><LICLASS="listitem"><PCLASS="para">If you intend to log with <KBDCLASS="command">syslog()</KBD>, youshould call the <KBDCLASS="command">openlog()</KBD> function before executing the<KBDCLASS="command">chroot()</KBD> system call, or make sure that a <ICLASS="filename">/dev/log</I>device file exists within the <KBDCLASS="command">chroot()</KBD> directory.</P></LI></OL><PCLASS="para">Note that under some versions of <SPANCLASS="acronym">UNIX</SPAN>,a user with a root shell and the ability to copy compiled code intothe <ICLASS="filename">chroot'</I>d environment may be able to &quot;breakout.&quot; Thus, don't put all your faith in this mechanism.<ACLASS="indexterm"NAME="AUTOID-32843"></A></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch23_03.htm"TITLE="23.3 Tips on Writing Network Programs"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 23.3 Tips on Writing Network Programs"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="Practical UNIX &amp; Internet Security"><IMGSRC="../gifs/txthome.gif"ALT="Practical UNIX &amp; Internet Security"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch23_05.htm"TITLE="23.5 Tips on Using Passwords"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 23.5 Tips on Using Passwords"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">23.3 Tips on Writing Network Programs</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">23.5 Tips on Using Passwords</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><PCLASS="nav"><FONTSIZE="-1">[ <AHREF="../index.htm"TITLE="The Networking CD Bookshelf">Library Home</A> | <AHREF="../dnsbind/index.htm"TITLE="DNS &amp; BIND">DNS &amp; BIND</A> | <AHREF="../tcpip/index.htm"TITLE="TCP/IP Network Administration">TCP/IP</A> | <AHREF="../sendmail/index.htm"TITLE="sendmail">sendmail</A> | <AHREF="../smdref/index.htm"TITLE="sendmail Desktop Reference">sendmail Reference</A> | <AHREF="../firewall/index.htm"TITLE="Building Internet Firewalls">Firewalls</A> | <AHREF="index.htm"TITLE="Practical UNIX &amp; Internet Security">Practical Security</A> ]</FONT></P></DIV></BODY></HTML>