<HTML><HEAD><TITLE>[Chapter 23] 23.5 Tips on Using Passwords</TITLE><METANAME="DC.title"CONTENT="Practical UNIX &amp; Internet Security"><METANAME="DC.creator"CONTENT="Simson Garfinkel &amp; Gene Spafford"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1999-02-04T00:17:54Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-148-8"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch23_01.htm"TITLE="23. Writing Secure SUID and Network Programs"><LINKREL="prev"HREF="ch23_04.htm"TITLE="23.4 Tips on Writing SUID/SGID Programs"><LINKREL="next"HREF="ch23_06.htm"TITLE="23.6 Tips on Generating Random Numbers"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="Practical UNIX &amp; Internet Security"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,65"HREF="index.htm"ALT="Practical UNIX &amp; Internet Security"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch23_04.htm"TITLE="23.4 Tips on Writing SUID/SGID Programs"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 23.4 Tips on Writing SUID/SGID Programs"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 23<BR>Writing Secure SUID and Network Programs</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch23_06.htm"TITLE="23.6 Tips on Generating Random Numbers"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 23.6 Tips on Generating Random Numbers"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="PUIS-CHP-23-SECT-5">23.5 Tips on Using Passwords</A></H2><PCLASS="para"><ACLASS="indexterm"NAME="IDX-PASSWORDS"></A>Lotsof computer programs use passwords for user authentication. Beyondthe standard <SPANCLASS="acronym">UNIX</SPAN> password, users soon find thatthey have passwords for special electronic mail accounts, specialaccounting programs, and even fantasy role-playing games.</P><PCLASS="para">Fewusers are good at memorizing passwords, and there is a great temptationto use a single password for all uses. This is a bad idea. Usersshould be encouraged to not type their login password into some<SPANCLASS="acronym">MUD</SPAN> that's running over at the localuniversity, for example.</P><PCLASS="para">As a programmer, there areseveral steps that you can take in programs that ask for passwordsto make the process more secure:</P><OLCLASS="orderedlist"><LICLASS="listitem"><PCLASS="para">Don't echo the password asthe user types it.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-32857"></A><ACLASS="indexterm"NAME="AUTOID-32859"></A>Normally, <SPANCLASS="acronym">UNIX</SPAN> turns off echowhen people type passwords. You can do this yourself by using the<KBDCLASS="command">getpass()</KBD> function. In recent years, however, a trendhas evolved to echo asterisks (*) for each character ofthe password typed. This provides some help for the person typingthe password to see if they have made a mistake in their typing,but it also enables somebody looking over the user's shouldersto see how many characters are in the password.</P></LI><LICLASS="listitem"><PCLASS="para">When you store the user's password on thecomputer, encrypt it. </P><PCLASS="para">If nothing else, use the <ACLASS="indexterm"NAME="AUTOID-32866"></A><ACLASS="indexterm"NAME="AUTOID-32868"></A><KBDCLASS="command">crypt()</KBD>library function. Use random numbers to choose the password'ssalt. When the user provides a password, check to see if it is theoriginal password by encrypting the provided password with the samesalt.</P><PCLASS="para">For example, the following bit of a simple Perlcode takes a password in the $password variable, generatesa random salt, and places an encrypted password in the variable<ICLASS="filename">$encrypted_password:</I></P><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$salts=&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789./&quot;;srand(time);local($s1) = rand(64);local($s2) = rand(64);$salt = substr($salts,$s1,1) . substr($salts,$s2,1);$encrypted_password= crypt($password,&amp;salt)</PRE></BLOCKQUOTE><PCLASS="para">You can then check to see if a newly provided password isin fact the encrypted password with this simple Perl fragment:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">if($encrypted_password eq  crypt($new_password, $encrypted_password){  print &quot;password matched.\n&quot;;}</PRE></BLOCKQUOTE></P></LI><LICLASS="listitem"><PCLASS="para">If you need access to <KBDCLASS="command">crypt()</KBD>from a shell script, consider using <ICLASS="filename">/usr/lib/makekey,</I>which provides much the same functionality.</P></LI></OL><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-23-SECT-5.1">23.5.1 Use Message Digests for Storing Passwords</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-32885"></A><ACLASS="indexterm"NAME="AUTOID-32887"></A><ACLASS="indexterm"NAME="AUTOID-32889"></A><ACLASS="indexterm"NAME="AUTOID-32892"></A>Instead of using the <KBDCLASS="command">crypt()</KBD>function to store an encrypted password, consider using a cryptographichash function such as MD5. Using a cryptographic hash allows theuser to type a password (or, properly, a passphrase) of any length.</P><PCLASS="para">This technique is the one that <SPANCLASS="acronym">PGP</SPAN> usesfor encrypting files with &quot;conventional cryptography,&quot;as well as for encrypting the secret key that is stored on yourhard disk. When you type in a passphrase, this phrase is processedwith the MD5 message digest algorithm (described in <ACLASS="xref"HREF="ch06_01.htm"TITLE="Cryptography">Chapter 6</A>). The resulting 128-bit hash is usedas the key for the <SPANCLASS="acronym">IDEA</SPAN> encryption algorithm.</P><PCLASS="para">If you need to be able to verify a password, but you do notneed an encryption key, you can store the MD5 hash. When you needto verify the user's password, take the new value enteredby the user, compute the value's MD5, and see if the newMD5 matches the stored value.</P><PCLASS="para">As with the <KBDCLASS="command">crypt()</KBD>function, you can include a random salt with the passphrase. Ifyou do so, you must record the salt with the saved MD5 and use itwhenever you wish to verify the user's password.</P><PCLASS="para">The primary benefit to using a cryptographic hash value is thatit takes whatever input the user types as the password, no matter howlong that output might be.[13] This may encourage users to type longerpasswords or passphrases that will be resistant to dictionaryattacks. You might also remind them of this practice when you promptthem for newpasswords.<ACLASS="indexterm"NAME="AUTOID-32906"></A></P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[13] But remember to check for buffer overflow when reading thepassword.</P></BLOCKQUOTE></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch23_04.htm"TITLE="23.4 Tips on Writing SUID/SGID Programs"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 23.4 Tips on Writing SUID/SGID Programs"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="Practical UNIX &amp; Internet Security"><IMGSRC="../gifs/txthome.gif"ALT="Practical UNIX &amp; Internet Security"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch23_06.htm"TITLE="23.6 Tips on Generating Random Numbers"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 23.6 Tips on Generating Random Numbers"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">23.4 Tips on Writing SUID/SGID Programs</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">23.6 Tips on Generating Random Numbers</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><PCLASS="nav"><FONTSIZE="-1">[ <AHREF="../index.htm"TITLE="The Networking CD Bookshelf">Library Home</A> | <AHREF="../dnsbind/index.htm"TITLE="DNS &amp; BIND">DNS &amp; BIND</A> | <AHREF="../tcpip/index.htm"TITLE="TCP/IP Network Administration">TCP/IP</A> | <AHREF="../sendmail/index.htm"TITLE="sendmail">sendmail</A> | <AHREF="../smdref/index.htm"TITLE="sendmail Desktop Reference">sendmail Reference</A> | <AHREF="../firewall/index.htm"TITLE="Building Internet Firewalls">Firewalls</A> | <AHREF="index.htm"TITLE="Practical UNIX &amp; Internet Security">Practical Security</A> ]</FONT></P></DIV></BODY></HTML>