<HTML><HEAD><TITLE>[Chapter 25] 25.3 Network Denial of Service Attacks</TITLE><METANAME="DC.title"CONTENT="Practical UNIX &amp; Internet Security"><METANAME="DC.creator"CONTENT="Simson Garfinkel &amp; Gene Spafford"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1999-02-04T00:19:49Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-148-8"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch25_01.htm"TITLE="25. Denial of Service Attacks and Solutions"><LINKREL="prev"HREF="ch25_02.htm"TITLE="25.2 Overload Attacks"><LINKREL="next"HREF="ch26_01.htm"TITLE="26. Computer Security and U.S. Law"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="Practical UNIX &amp; Internet Security"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,65"HREF="index.htm"ALT="Practical UNIX &amp; Internet Security"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch25_02.htm"TITLE="25.2 Overload Attacks"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 25.2 Overload Attacks"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 25<BR>Denial of Service Attacks and Solutions</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="CHAPTER"HREF="ch26_01.htm"TITLE="26. Computer Security and U.S. Law"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 26. Computer Security and U.S. Law"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="PUIS-CHP-25-SECT-3">25.3 Network Denial of Service Attacks</A></H2><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-34924"></A><ACLASS="indexterm"NAME="AUTOID-34927"></A>Networksare also vulnerable to denial of service attacks. In attacks ofthis kind, someone prevents legitimate users from using the network.The three common types of network denial of service attacks are<ICLASS="firstterm">service overloading, message flooding</I>, and <ICLASS="firstterm">signal grounding.</I> A fourthkind of attack is less common, but possible, and we describe itas <ICLASS="firstterm">clogging.</I></P><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-25-SECT-3.1">25.3.1 Service Overloading</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-34936"></A><ACLASS="indexterm"NAME="AUTOID-34938"></A><ACLASS="indexterm"NAME="AUTOID-34941"></A><ICLASS="firstterm">Service overloading</I> occurs when floodsof network requests are made to a server daemon on a single computer.These requests can be initiated in a number of ways, many intentional.The result of these floods can cause your system to be so busy servicinginterrupt requests and network packets that it is unable to processregular tasks in a timely fashion. Many requests will be thrownaway as there is no room to queue them. If it is a <SPANCLASS="acronym">TCP</SPAN>-basedservice, they will be resent and will add to the load. Such attackscan also mask an attack on another machine by preventing audit recordsand remote login requests from being processed in a timely manner.They deny access to a particular service.</P><PCLASS="para">You can use a network monitor to reveal the type, and sometimesthe origin, of overload attacks. If you have a list of machinesand the low-level network address (i.e., Ethernet board-level address,not IP address) this may help you track the source of the problemif it is local to your network. Isolating your local subnet or networkwhile finding the problem may also help. If you have logging onyour firewall or router, you can quickly determine if the attackis coming from outside your network or inside[10]&nbsp;- youcannot depend on the IP address in the packet being correct.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[10] Weare unaware of any firewall offering reliable protection againstdenial of service attacks of this kind.</P></BLOCKQUOTE><PCLASS="para">Unfortunately, there is little that you, as an end user oradministrator, can do to help make the protocols and daemons morerobust in the face of such attacks. The best you can hope to do,at present, is to limit their effect. Partitioning your local networkinto subnets of only a few dozen machines each is one good approach.That way, if one subnet gets flooded as part of an attack or accident,not all of your machines are disabled.</P><PCLASS="para">Another action you can take is to prepare ahead of time foran attack. If you have the budget, buy a network monitor and have(protected) spare taps on your subnet so you can quickly hook upand monitor network traffic. Have printed lists of machine low-leveland high-level addresses available so you can determine the sourceof the overload by observing packet flow.</P><PCLASS="para">One partial help is if the service being attacked is spawnedfrom the <ACLASS="indexterm"NAME="AUTOID-34952"></A>inetdwith the nowait option. inetd, by default, has a &quot;throttle&quot;built in. If too many requests are received in too short a timefor any of the services it monitors, it will start rejecting requestsand syslog a message that the service is failing. This is done underthe assumption that some bug has been triggered to cause all thetraffic. This has the side-effect of disabling your service as surelyas if all the requests were accepted for processing. However, itmay prevent the server itself from failing, and it results in anaudit record showing when the problem occurred.</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-25-SECT-3.2">25.3.2 Message Flooding</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-34958"></A><ACLASS="indexterm"NAME="AUTOID-34960"></A><ACLASS="indexterm"NAME="AUTOID-34963"></A><ICLASS="firstterm">Message flooding</I> occurs when a user slows downthe processing of a system on the network to prevent the systemfrom processing its normal workload, by &quot;flooding&quot;the machine with network messages addressed to it. These may berequests for file service or login, or they may be simple echo-backrequests. Whatever the form, the flood of messages overwhelms thetarget so it spends most of its resources responding to the messages.In extreme cases, this flood may cause the machine to crash witherrors or lack of memory to buffer the incoming packets. This attackdenies access to a network server.</P><PCLASS="para">A server that is being flooded may not be able to respondto network requests in a timely manner. An attacker can take advantageof this behavior by writing a program that answers network requestsin the server's place. For example, an attacker could floodan <SPANCLASS="acronym">NIS</SPAN> server and then issue his own repliesfor <SPANCLASS="acronym">NIS</SPAN> requests&nbsp;- specifically, requestsfor passwords.</P><PCLASS="para">Suppose an attacker writes a program that literally bombardsan <SPANCLASS="acronym">NIS</SPAN> server machine with thousands of echorequests every second directed to the echo service. The attackersimultaneously attempts to log into a privileged account on a workstation.The workstation would request the <SPANCLASS="acronym">NIS</SPAN> <KBDCLASS="command">passwd</KBD>information from the real server, which would be unable to respondquickly because of the flood. The attacker's machine couldthen respond, masquerading as the server, and supply bogus information,such as a record with no password. Under normal circumstances, thereal server would notice this false packet and repudiate it. However,if the server machine is so loaded that it never receives the packet,or fails to receive it in a timely fashion, it cannot respond. Theclient workstation would believe the false response to be correctand process the attacker's login attempt with the false<KBDCLASS="command">passwd</KBD> entry.[11]</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[11] Yes, we are leaving out some low-leveldetails here. This form of masquerade is not as simple as we describeit, but it is possible.</P></BLOCKQUOTE><PCLASS="para">A similar type of attack is a <ACLASS="indexterm"NAME="AUTOID-34978"></A><ACLASS="indexterm"NAME="AUTOID-34980"></A><ICLASS="firstterm">broadcast storm</I>. By careful crafting of networkmessages, you can create a special message that instructs everycomputer receiving the message to reply or retransmit it. The resultis that the network becomes saturated and unusable. Broadcast stormsrarely result from intentional attack; more often, they result fromfailing hardware or from software that is under development, buggy,or improperly installed.</P><PCLASS="para">Broadcasting incorrectly formatted messages can also bringa network of machines to a grinding halt. If each machine is configuredto log the reception of bad messages to disk or console, they couldbroadcast so many messages that the clients can do nothing but processthe errors and log them to disk or console.</P><PCLASS="para">Again, preparing ahead with a monitor and breaking your networkinto subnets will help you prevent and deal with this kind of problem,although such planning will not eliminate the problem completely.</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-25-SECT-3.3">25.3.3 Signal Grounding</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-34989"></A><ACLASS="indexterm"NAME="AUTOID-34991"></A><ACLASS="indexterm"NAME="AUTOID-34994"></A><ACLASS="indexterm"NAME="AUTOID-34997"></A>Physicalmethods can also be used to disable a network. Grounding the signalon a network cable, introducing some other signal, or removing anEthernet terminator all have the effect of preventing clients fromtransmitting or receiving messages until the problem is fixed. Thistype of attack can be used not only to disable access to variousmachines that depend on servers to supply programs and disk resources,but also to mask break-in attempts on machines that report bad loginsor other suspicious behavior to master machines across the network.For this reason, you should be suspicious of any network outage;it might be masking break-ins on individual machines.</P><PCLASS="para">Another method of protection, which also helps to reduce thethreat of eavesdropping, is to protect the network cable physicallyfrom tapping. This protection reduces the threat of eavesdroppersand spoofers to well-defined points on the cable. It also helpsreduce the risk of denial of service attacks from signal grounding.<ACLASS="xref"HREF="ch12_01.htm"TITLE="Physical Security">Chapter 12, <CITECLASS="chapter">Physical Security</CITE></A>,discusses the physical protection of networks.</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-25-SECT-3.4">25.3.4 Clogging</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-35004"></A><ACLASS="indexterm"NAME="AUTOID-35006"></A><ACLASS="indexterm"NAME="AUTOID-35009"></A>The implementation ofthe <SPANCLASS="acronym">TCP/IP</SPAN> protocols on many versions of <SPANCLASS="acronym">UNIX</SPAN>allow them to be abused in various ways. To deny service, one wayis to use up the limit of partially open connections. <SPANCLASS="acronym">TCP</SPAN>connections open on a multi-way handshake to open a connection andset parameters. If an attacker sends multiple requests to initiatea connection but then fails to follow through with the subsequentparts of the connection, the recipient will be left with multiplehalf-open connections that are occupying limited resources. Usually,these connection requests have forged source addresses that specifynonexistent or unreachable hosts that cannot be contacted. Thus,there is also no way to trace the connections back. They remainuntil they time out (or until they are reset by the intruder).</P><PCLASS="para">By analogy, consider what happens when your phone rings. Youanswer and say &quot;hello&quot; but no one responds. Youwait a few seconds, then say &quot;hello&quot; again. Youmay do this one or two more times until you &quot;time out&quot;and hang up. However, during the time you are waiting for someoneto answer your &quot;hello&quot; (and there may be no onethere), the phone line is tied up and can process no other incomingcalls.</P><PCLASS="para">There is little you can do in these situations. Modificationsto the operating system sources could result in a tunable time-out,better logging of these problems, and a higher limit on the numberof half-open connections allowed before new requests are rejected.However, these modifications are not simple to make.</P><PCLASS="para">Firewalls generally do not address this problem either. Thebest you can achieve is to reject connection attempts from unknownhosts and networks at the firewall. The only other alternative isto rethink the protocols involved, and perhaps set much higher limitson the existing implementations. However, any finite limit can beexceeded. Networks based on virtual circuits (e.g., <SPANCLASS="acronym">ATM</SPAN>)may provide a solution by bypassing the protocol problems completely.However, <SPANCLASS="acronym">ATM</SPAN> and related technologies probablyhave their own set of vulnerabilities that we have yet to <ACLASS="indexterm"NAME="AUTOID-35020"></A><ACLASS="indexterm"NAME="AUTOID-35023"></A>discover.<ACLASS="indexterm"NAME="AUTOID-35026"></A><ACLASS="indexterm"NAME="AUTOID-35029"></A></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch25_02.htm"TITLE="25.2 Overload Attacks"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 25.2 Overload Attacks"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="Practical UNIX &amp; Internet Security"><IMGSRC="../gifs/txthome.gif"ALT="Practical UNIX &amp; Internet Security"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="CHAPTER"HREF="ch26_01.htm"TITLE="26. Computer Security and U.S. Law"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 26. Computer Security and U.S. Law"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">25.2 Overload Attacks</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">26. Computer Security and U.S. Law</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><PCLASS="nav"><FONTSIZE="-1">[ <AHREF="../index.htm"TITLE="The Networking CD Bookshelf">Library Home</A> | <AHREF="../dnsbind/index.htm"TITLE="DNS &amp; BIND">DNS &amp; BIND</A> | <AHREF="../tcpip/index.htm"TITLE="TCP/IP Network Administration">TCP/IP</A> | <AHREF="../sendmail/index.htm"TITLE="sendmail">sendmail</A> | <AHREF="../smdref/index.htm"TITLE="sendmail Desktop Reference">sendmail Reference</A> | <AHREF="../firewall/index.htm"TITLE="Building Internet Firewalls">Firewalls</A> | <AHREF="index.htm"TITLE="Practical UNIX &amp; Internet Security">Practical Security</A> ]</FONT></P></DIV></BODY></HTML>