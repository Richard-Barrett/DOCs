<HTML><HEAD><TITLE>[Chapter 27] Who Do You Trust?</TITLE><METANAME="DC.title"CONTENT="Practical UNIX &amp; Internet Security"><METANAME="DC.creator"CONTENT="Simson Garfinkel &amp; Gene Spafford"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1999-02-04T00:20:17Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-148-8"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="part06.htm"TITLE="VI. Handling Security Incidents"><LINKREL="prev"HREF="ch26_04.htm"TITLE="26.4 Other Liability"><LINKREL="next"HREF="ch27_02.htm"TITLE="27.2 Can You Trust Your Suppliers?"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="Practical UNIX &amp; Internet Security"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,65"HREF="index.htm"ALT="Practical UNIX &amp; Internet Security"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch26_04.htm"TITLE="26.4 Other Liability"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 26.4 Other Liability"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 27</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch27_02.htm"TITLE="27.2 Can You Trust Your Suppliers?"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 27.2 Can You Trust Your Suppliers?"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="CHAPTER"><H1CLASS="chapter"><ACLASS="title"NAME="PUIS-CHP-27">27. Who Do You Trust?</A></H1><DIVCLASS="htmltoc"><P><B>Contents:</B><BR><ACLASS="SECT1"HREF="#PUIS-CHP-27-SECT-1"TITLE="27.1 Can you Trust Your Computer?">Can you Trust Your Computer?</A><BR><ACLASS="SECT1"HREF="ch27_02.htm"TITLE="27.2 Can You Trust Your Suppliers?">Can You Trust Your Suppliers?</A><BR><ACLASS="SECT1"HREF="ch27_03.htm"TITLE="27.3 Can You Trust People?">Can You Trust People?</A><BR><ACLASS="SECT1"HREF="ch27_04.htm"TITLE="27.4 What All This Means">What All This Means</A></P><P></P></DIV><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-35645"></A>Trust is the mostimportant quality in computer security. If you build a bridge, youcan look at the bridge every morning and make sure it'sstill standing. If you paint a house, you can sample the soil andanalyze it at a laboratory to ensure that the paint isn'tcausing toxic runoff. But in the field of computer security, mostof the tools that you have for determining the strength of yourdefenses and for detecting break-ins reside on your computer itself.Those tools are as mutable as the rest of your computer system.</P><PCLASS="para">When your computer tells you that nobody has broken throughyour defenses, how do you know that you can trust what it is saying?</P><DIVCLASS="sect1"><H2CLASS="sect1"><ACLASS="title"NAME="PUIS-CHP-27-SECT-1">27.1 Can you Trust Your Computer?</A></H2><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-35651"></A>Fora few minutes, try thinking like a computer criminal. A few monthsago you were fired from Big Whammix, the large smokestack employeron the other side of town, and now you're working for acompeting company, Bigger Bammers. Your job at Bammers is corporateespionage; you've spent the last month trying to breakinto Big Whammix's central mail server. Yesterday, youdiscovered a bug in a version of <KBDCLASS="command">sendmail</KBD> [1]that Whammix is running, and you gained superuser access.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[1] This isa safe enough bet&nbsp;- <KBDCLASS="command">sendmail</KBD> seems to have an endless supplyof bugs and design misfeatures leading to security problems.</P></BLOCKQUOTE><PCLASS="para">What do you do now?</P><PCLASS="para">Your primary goal is to gain as much valuable corporate informationas possible, and to do so without leaving any evidence that wouldallow you to be caught. But you have a secondary goal of maskingyour steps, so that your former employers at Whammix will neverfigure out that they have lost information.</P><PCLASS="para">Realizing that the hole in the Whammix <KBDCLASS="command">sendmail</KBD> daemon mightsomeday be plugged, you decide to create a new back door that youcan use to gain access to the company's computers in thefuture. The easiest thing to do is to modify the computer's<ICLASS="filename">/bin/login</I> program to accepthidden passwords. Therefore, you take your own copy of the sourcecode to <ICLASS="filename">login.c</I> and modify it to allow anybodyto log in as root if they type a particular sequence of apparentlyrandom passwords. Then you install the program as <ICLASS="filename">/bin/passwd </I>.</P><PCLASS="para">You want to hide evidence of your data collection, so youalso patch the<ICLASS="filename"> /bin/ls </I> program. When the programis asked to list the contents of the directory in which you arestoring your cracker tools and intercepted mail, it displays noneof your files. You &quot;fix&quot; these programs so thatthe checksums reported by <ICLASS="filename"> /usr/bin/sum</I> arethe same. Then, you manipulate the system clock or edit the rawdisk to set all the times in the inodes back to their original values,to further cloak your modifications.</P><PCLASS="para">You'll be connecting to the computer on a regularbasis, so you also modify <ICLASS="filename">/usr/bin/netstat</I>so that it doesn't display connections between the BigWhammix IP subnet and the subnet at Bigger Bammers. You may alsomodify the <ICLASS="filename">/usr/bin/ps</I> and <ICLASS="filename">/usr/bin/who</I>programs, so that they don't list users who are loggedin via this special back door.</P><PCLASS="para">Content, you now spend the next five months periodically logginginto the mail server at Big Whammix and making copies of all ofthe email directed to the marketing staff. You do so right up tothe day that you leave your job at Bigger Bammers and move on toa new position at another firm. On your last day, you run a shellscript that you have personally prepared that restores all of theprograms on the hard disk to their original configuration. Then,as a parting gesture, your program introduces subtle modificationsinto the Big Whammix main accounting database.</P><PCLASS="para">Technological fiction? Hardly. By the middle of the 1990s,attacks against computers in which the system binaries were modifiedto prevent detection of the intruder had become commonplace. Aftersophisticated attackers gain superuser access, the common way thatyou discover their presence is if they make a mistake.</P><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-27-SECT-1.1">27.1.1 Harry's Compiler</A></H3><PCLASS="para">In the early days of the <SPANCLASS="acronym">MIT</SPAN> Media Lab,there was a graduate student who was very unpopular with the otherstudents in his lab. To protect his privacy, we'll callthe unpopular student &quot;Harry.&quot;</P><PCLASS="para">Harry was obnoxious and abrasive, and he wasn't avery good programmer either. So the other students in the lab decidedto play a trick on him. They modified the <SPANCLASS="acronym">PL/1</SPAN>compiler on the computer that they all shared so that the programwould determine the name of the person who was running it. If theperson running the compiler was Harry, the program would run asusual, reporting syntax errors and the like, but it would occasionally,randomly, not produce a final output file.</P><PCLASS="para">This mischievous prank caused a myriad of troubles for Harry.He would make a minor change to his program, run it, and&nbsp;- occasionally&nbsp;- theprogram would run the same way as it did before he made his modification.He would fix bugs, but the bugs would still remain. But then, wheneverhe went for help, one of the other students in the lab would sitdown at the terminal, log in, and everything would work properly.</P><PCLASS="para">Poor Harry. It was a cruel trick. Somehow, though, everybodyforgot to tell him about it. He soon grew frustrated with the wholeenterprise, and eventually left school.</P><PCLASS="para">And you thought those random &quot;bugs&quot; in yoursystem were there by accident?</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-27-SECT-1.2">27.1.2 Trusting Trust</A></H3><PCLASS="para">Perhaps the definitive account of the problems inherent incomputer security and trust is related in Ken Thompson'sarticle, &quot;Reflections on Trusting Trust.&quot; [2]Thompson describes a back door planted in an early research versionof <SPANCLASS="acronym">UNIX</SPAN>.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[2] <EMCLASS="emphasis">Communications of the ACM</EM>, Volume 27, Number 8, August 1984.</P></BLOCKQUOTE><PCLASS="para">The <ACLASS="indexterm"NAME="AUTOID-35691"></A><ACLASS="indexterm"NAME="AUTOID-35693"></A>back door was a modification to the <ICLASS="filename">/bin/login </I><ACLASS="indexterm"NAME="AUTOID-35698"></A>programthat would allow him to gain superuser access to the system at anytime, even if his account had been deleted, by providing a predeterminedusername and password. While such a modification is easy to make,it's also an easy one to detect by looking at the computer'ssource code. So Thompson modified the computer's C compilerto detect if it was compiling the <ICLASS="filename">login.c</I> program.If so, then the additional code for the back door would automaticallybe inserted into the object-code stream, even though the code wasnot present in the original C source file.</P><PCLASS="para">Thompson could now have the <ICLASS="filename">login.c program</I> inspected by hiscoworkers, compile the program, install the <ICLASS="filename">/bin/login</I>executable, and yet be assured that the back door was firmly inplace.</P><PCLASS="para">But what if somebody inspected the source code for the C compileritself? Thompson thought of that case as well. He further modifiedthe C compiler so that it would detect whether it was compilingthe source code for itself. If so, the compiler would automaticallyinsert the special program recognition code. After one more roundof compilation, Thompson was able to put all the original sourcecode back in place.</P><PCLASS="para">Thompson's experiment was like a magic trick. Therewas no back door in the <ICLASS="filename">login.c </I>source fileand no back door in the source code for the C compiler, and yetthere was a back door in both the final compiler and in the <ICLASS="filename">login</I>program. Abracadabra!</P><PCLASS="para">What hidden actions do your compiler and <ICLASS="filename">login</I>programs perform?</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="PUIS-CHP-27-SECT-1.3">27.1.3 What the Superuser Can and Cannot Do</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-35713"></A><ACLASS="indexterm"NAME="AUTOID-35716"></A>As all of these examples illustrate, technical expertisecombined with superuser privileges on a computer is a powerful combination.Together, they let an attacker change the very nature of the computer'soperating system. An attacker can modify the system to create &quot;hidden&quot;directories that don't show up under normal circumstances(if at all). Attackers can change the system clock, making it lookas if the files that they modify today were actually modified monthsago. An attacker can forge electronic mail. (Actually, anybody canforge electronic mail, but an attacker can do a better job of it.)</P><PCLASS="para">Of course, there are some things that an attacker cannot do,even if that attacker is a technical genius and has full accessto your computer and its source code. An attacker cannot, for example,decrypt a message that has been encrypted with a perfect encryptionalgorithm. But he can alter the code to record the key the nexttime you type it. An attacker probably can't program yourcomputer to perform mathematical calculations a dozen times fasterthan it currently does, although there are few security implicationsto doing so. Most attackers can't read the contents ofa file after it's been written over with another file unlessthey take apart your computer and take the hard disk to a laboratory.However, an attacker with privileges can alter your system so thatfiles you have deleted are still accessible (to him).</P><PCLASS="para">In each case, how do you tell if the attack has occurred?</P><PCLASS="para">The &quot;what-if&quot; scenario can be taken to considerablelengths. Consider an attacker who is attempting to hide a modificationin a computer's <ICLASS="filename">/bin/login</I>program:</P><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="PUIS-CHP-27-TAB-1">Table 27.1: The &quot;What-If&quot;Scenario</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1"><PCLASS="para">What the Attacker Might Do After GainingRoot Access</P></TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Your Responses</P></TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">The attacker plants a back door in the<ICLASS="filename">/bin/login</I> program to allow unauthorized access.</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">You use PGP to create a digital signatureof  all system programs. You check the signatures every day.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">The attacker modifies the version ofPGP that you are using, so that it will report that the signatureon <ICLASS="filename">/bin/login </I>verifies, even if it doesn't.</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">You copy <ICLASS="filename">/bin/login </I>ontoanother computer before verifying it with a trusted copy of PGP.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">The attacker modifies your computer'skernel by adding loadable modules, so that when the<ICLASS="filename"> /bin/login</I>is sent through a TCP connection, the original <ICLASS="filename">/bin/login,</I>rather than the modified version, is sent.</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">You put a copy of PGP on a removable hard disk. You mount the hard disk to  perform the signatureverification and then  unmount it. Furthermore, you put a good copy of <ICLASS="filename">/bin/login </I>onto your removable hard disk and then copy the good program  over the installedversion on a regular  basis.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">The attacker regains control of yoursystem and further modifies the kernel so that the modificationto <ICLASS="filename">/bin/login</I> is patched into the running programafter it loads. Any attempt to read the contents of the<ICLASS="filename">/bin/login</I> file results in the original,unmodified version.</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">You reinstall the entire system software, and configure the system to boot from a  read-only devicesuch as a CD-ROM.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Because the system now boots from a CD-ROM,you cannot easily update system software as bugs are discovered.The attacker waits for a bug to crop up in one of your installedprograms, such as sendmail. When the bug is reported, the attackerwill be ready to pounce.</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Your move . . .</P></TD></TR></TBODY></TABLE><PCLASS="para">(See <ACLASS="xref"HREF="ch27_01.htm#PUIS-CHP-27-TAB-1"TITLE='The "What-If&quot; Scenario'>Table 27.1</A>.)</P><PCLASS="para">If you think that this description sounds like a game of chess,you're correct. Practical computer security is a seriesof actions and counteractions, of attacks and defenses. As withchess, success depends upon anticipating your opponent'smoves and planning countermeasures ahead of time. Simply reactingto your opponent's moves is a recipe for failure.</P><PCLASS="para">The key thing to note, however, is that somewhere, at somelevel, you need to trust what you are working with. Maybe you trustthe hardware. Maybe you trust the <SPANCLASS="acronym">CD-ROM</SPAN>. Butat some level, you need to trust what you have on hand. Perfectsecurity isn't possible, so we need to settle for the nextbest thing&nbsp;- reasonable trust on which to build.</P><PCLASS="para">The question is, where do you place that trust?<ACLASS="indexterm"NAME="AUTOID-35774"></A><ACLASS="indexterm"NAME="AUTOID-35777"></A><ACLASS="indexterm"NAME="AUTOID-35780"></A></P></DIV></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch26_04.htm"TITLE="26.4 Other Liability"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 26.4 Other Liability"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="Practical UNIX &amp; Internet Security"><IMGSRC="../gifs/txthome.gif"ALT="Practical UNIX &amp; Internet Security"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch27_02.htm"TITLE="27.2 Can You Trust Your Suppliers?"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 27.2 Can You Trust Your Suppliers?"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">26.4 Other Liability</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">27.2 Can You Trust Your Suppliers?</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><PCLASS="nav"><FONTSIZE="-1">[ <AHREF="../index.htm"TITLE="The Networking CD Bookshelf">Library Home</A> | <AHREF="../dnsbind/index.htm"TITLE="DNS &amp; BIND">DNS &amp; BIND</A> | <AHREF="../tcpip/index.htm"TITLE="TCP/IP Network Administration">TCP/IP</A> | <AHREF="../sendmail/index.htm"TITLE="sendmail">sendmail</A> | <AHREF="../smdref/index.htm"TITLE="sendmail Desktop Reference">sendmail Reference</A> | <AHREF="../firewall/index.htm"TITLE="Building Internet Firewalls">Firewalls</A> | <AHREF="index.htm"TITLE="Practical UNIX &amp; Internet Security">Practical Security</A> ]</FONT></P></DIV></BODY></HTML>