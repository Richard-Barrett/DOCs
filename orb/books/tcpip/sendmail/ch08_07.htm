<HTML><HEAD><TITLE>[Chapter 8] 8.7 Wildcard Operators</TITLE><METANAME="DC.title"CONTENT="sendmail"><METANAME="DC.creator"CONTENT="Bryan Costales &amp; Eric Allman"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1999-01-06T18:35:44Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-222-0"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch08_01.htm"TITLE="8. Addresses and Rules"><LINKREL="prev"HREF="ch08_06.htm"TITLE="8.6 The Flow of Addresses Through Rules"><LINKREL="next"HREF="ch08_08.htm"TITLE="8.8 Things to Try"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="sendmail"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,65"HREF="index.htm"ALT="sendmail"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/ssrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch08_06.htm"TITLE="8.6 The Flow of Addresses Through Rules"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 8.6 The Flow of Addresses Through Rules"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 8<BR>Addresses and Rules</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch08_08.htm"TITLE="8.8 Things to Try"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 8.8 Things to Try"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="SML2-CH-8-SECT-7">8.7 Wildcard Operators</A></H2><PCLASS="para"><ACLASS="indexterm"NAME="SML2-CH-8-IX-WILDCARD-OPERATORS"></A><ACLASS="indexterm"NAME="SML2-CH-8-IX-RULES-WILDCARDS-OPERATORS-IN"></A><ACLASS="indexterm"NAME="AUTOID-4975"></A>Rules would be pretty useless if they always had to matchthe workspace exactly. Fortunately, that is not the case. In addition toliteral text, you can also use wildcard operatorsthat allow the LHS of rules to matcharbitrary text in the workspace. To illustrate, consider this rule:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">R$+     <ICLASS="lineannotation">rhs is here</I> <ICLASS="lineannotation"><IMGSRC="../chars/uarr.gif"ALT="-^"></I> <ICLASS="lineannotation">lhs</I></PRE></BLOCKQUOTE></P><PCLASS="para">This LHS begins with the first character following the <CODECLASS="literal">R</CODE>.The LHS in this example is</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$+</PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-4989"></A><ACLASS="indexterm"NAME="AUTOID-4992"></A><ACLASS="indexterm"NAME="SML2-CH-8-IX-OPERATORS-DOLLAR-OPERATORS-PLUS"></A>This is a wildcard operator.The truth of this if statement is determined by a process called <EMCLASS="emphasis">patternmatching</EM>. The LHS <CODECLASS="literal">$+</CODE> (a single token) is a pattern thatmeans&quot;match one or more tokens.&quot;The address that is being evaluatedis tokenized and  placed into the workspace, andthen the workspace is compared to that pattern:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">gw@wash.dc.gov  <ICLASS="lineannotation"><IMGSRC="../chars/darr.gif"ALT="-v"></I>  <ICLASS="lineannotation">tokenized into</I>  <ICLASS="lineannotation"><IMGSRC="../chars/darr.gif"ALT="-v"></I>gw @ wash . dc . gov   <IMGSRC="../chars/larr.gif"ALT="&lt;-"> <ICLASS="lineannotation">in the workspace</I></PRE></BLOCKQUOTE></P><PCLASS="para">When matching the workspace to an LHS pattern, <EMCLASS="emphasis">sendmail</EM> scans theworkspace from left to right. Each token in the workspace is comparedto the wildcard operator (the <CODECLASS="literal">$+</CODE>) in the LHS pattern. If the tokens all matchthe pattern, the if part of the if-then pair is true.</P><PCLASS="para">The <CODECLASS="literal">$+</CODE> wildcard operator simply matches any <EMCLASS="emphasis">one or more</EM> tokens:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"><ICLASS="lineannotation">workspace                 pattern</I>gw               $+       <IMGSRC="../chars/larr.gif"ALT="&lt;-"> <ICLASS="lineannotation">match one token (``one'')</I>@                         <IMGSRC="../chars/larr.gif"ALT="&lt;-"> <ICLASS="lineannotation">and optionally more (``or more'')</I>wash                      <IMGSRC="../chars/darr.gif"ALT="-v">.dc.gov</PRE></BLOCKQUOTE></P><PCLASS="para">As you can see, if there are any tokens in the address at all(the workspace is not empty), the LHS rule <CODECLASS="literal">$+</CODE>evaluates to true.&#13;</P><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="SML2-CH-8-SECT-7-1">8.7.1 Other Text in the LHS</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-5022"></A>A rule of <CODECLASS="literal">$+</CODE> (match one or more tokens) is not sufficient tohandle all possible addresses (especially bad addresses):</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">gw@wash.dc.gov        <IMGSRC="../chars/larr.gif"ALT="&lt;-"> $+ <ICLASS="lineannotation">should match and does</I>@wash.dc.gov          <IMGSRC="../chars/larr.gif"ALT="&lt;-"> $+ <ICLASS="lineannotation">matches an incomplete address</I></PRE></BLOCKQUOTE></P><PCLASS="para">To make matching in the LHS more effective, <EMCLASS="emphasis">sendmail</EM> allowsother text to appear in the pattern.To make sure that the address in the workspacecontains a user part, the <CODECLASS="literal">@</CODE> character, and a host part,the following LHS pattern can be used:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$+@$+</PRE></BLOCKQUOTE></P><PCLASS="para">Just like the address in the workspace, this pattern is tokenizedbefore it is compared for a match. Wildcard operators (like <CODECLASS="literal">$+</CODE>)count as one token, and <CODECLASS="literal">@</CODE> is a token becauseit is a separator character:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">.:<CODECLASS="userinput"><B>@</B></CODE>[]          <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> you can change these</I>()&lt;&gt;,;\&quot;\r\n   <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> you cannot change these</I></PRE></BLOCKQUOTE></P><PCLASS="para">The pattern of <CODECLASS="literal">$+@$+</CODE> is separated into three tokens:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$+ @ $+</PRE></BLOCKQUOTE></P><PCLASS="para">Text in the pattern must match text in the workspace <EMCLASS="emphasis">exactly</EM>(token for token) if there is to be a match. A good address in theworkspace (one containing a user part and a host part)will match our new LHS (<CODECLASS="literal">$+@$+</CODE>):</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"><ICLASS="lineannotation">workspace                 pattern</I>gw              $+       <IMGSRC="../chars/larr.gif"ALT="&lt;-"> <ICLASS="lineannotation">match one or more</I>@               @        <IMGSRC="../chars/larr.gif"ALT="&lt;-"> <ICLASS="lineannotation">match exactly</I>wash            $+       <IMGSRC="../chars/larr.gif"ALT="&lt;-"> <ICLASS="lineannotation">match one</I>.                        <IMGSRC="../chars/darr.gif"ALT="-v"> <ICLASS="lineannotation">  or more</I>dc.gov</PRE></BLOCKQUOTE></P><PCLASS="para">Here, the flow of matching begins with the first <CODECLASS="literal">$+</CODE>,which matches one token (of the one or more) in the workspace. The <CODECLASS="literal">@</CODE> matches theidentical token in the workspace. At this point, the <CODECLASS="literal">$+@</CODE>part of the pattern has been satisfied. All that remains isfor the final <CODECLASS="literal">$+</CODE> to match its one or more ofall the remaining tokens in the workspace, which it does.</P><PCLASS="para">A bad address in the workspace, on the other hand, will not match the pattern.Consider an address, for example, that lacks a user part:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">@wash.dc.gov		<ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> in the workspace</I><ICLASS="lineannotation">workspace                 pattern</I>@               $+	<ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> match one</I>wash			<ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-">   or more</I>.                         dc.gov                @		<ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> match exactly (fails!)</I>                $+</PRE></BLOCKQUOTE></P><PCLASS="para">Here, the first <CODECLASS="literal">$+</CODE> incorrectly matchesthe <CODECLASS="literal">@</CODE> in the workspace. Since there is no other<CODECLASS="literal">@</CODE> in the workspace to be matched by the <CODECLASS="literal">@</CODE>in the pattern, the first <CODECLASS="literal">$+</CODE> matches the entire workspace.Because there is nothing left in the workspace, the attemptto match the <CODECLASS="literal">@</CODE> fails.When any part of a pattern fails to match the workspace, the entireLHS fails (the if part of the if-then is false).&#13;</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="SML2-CH-8-SECT-7-2">8.7.2 Minimal Matching</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-5079"></A>One small bit of confusion may yet remain.  When a wildcard operator such as<CODECLASS="literal">$+</CODE> is used to match the workspace, <EMCLASS="emphasis">sendmail</EM> alwaysdoes a <EMCLASS="emphasis">minimal match</EM>. That is, it matches only what it needsto for the next part of the rule to work.Consider the following:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">R$+@$+</PRE></BLOCKQUOTE></P><PCLASS="para">In this LHS the first <CODECLASS="literal">$+</CODE> matches everythingin the workspace up to the first <CODECLASS="literal">@</CODE> character.For example, consider the following workspace:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">a@b@c</PRE></BLOCKQUOTE></P><PCLASS="para">In the above, <CODECLASS="literal">$+@</CODE> causes the <CODECLASS="literal">$+</CODE> to match only the characters up to the first <CODECLASS="literal">@</CODE> character, the <CODECLASS="literal">a</CODE>.This is the minimum that needs to be matched, and so it is the maximumthat will be matched.&#13;</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="SML2-CH-8-SECT-7-3">8.7.3 More Play with LHS Matching</A></H3><PCLASS="para">Take a moment to replace the previous demo rules withthe following three new demo rules in the <EMCLASS="emphasis">client.cf</EM> file:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">S0R@         oneR@$+       twoR$+@$+     three</PRE></BLOCKQUOTE></P><PCLASS="para">Again, these three rules arefor demonstration purposes only (you'llsee how to declare a real one soon enough). We've given eachtemporary RHS a number to see whether it is selected.Now run <EMCLASS="emphasis">sendmail</EM> in rule-testing mode:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>./sendmail -Cclient.cf -bt</B></CODE>ADDRESS TEST MODE (ruleset 3 NOT automatically invoked)Enter &lt;ruleset&gt; &lt;address&gt;</PRE></BLOCKQUOTE></P><PCLASS="para">Now print the rules to remind yourself what they are:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">&gt; <CODECLASS="userinput"><B>=S 0</B></CODE>R@              one R@ $+           two R$+ @ $+                three</PRE></BLOCKQUOTE></P><PCLASS="para">We'll test those rules with an assortment of test addresses.The first address to try is a lone <CODECLASS="literal">@</CODE>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">&gt; <CODECLASS="userinput"><B>0 @</B></CODE>rewrite: ruleset  0   input: @rewrite: ruleset  0 returns: one</PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="literal">@</CODE> causes the first temporaryRHS to be selected because the rule is</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">R@      one</PRE></BLOCKQUOTE></P><PCLASS="para">The LHS here (the pattern to match) contains the lone <CODECLASS="literal">@</CODE>.That pattern matches the tokenized workspace <CODECLASS="literal">@</CODE> exactly,so the RHS for that rule rewrites the workspace to contain <CODECLASS="literal">one</CODE>.Since <CODECLASS="literal">one</CODE> does not contain an @ character, neither the second nor thirdrules match, so the entire rule set returns <CODECLASS="literal">one</CODE>.</P><PCLASS="para">Next enter an address that just contains a host and domain partbut not a user part:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">&gt; <CODECLASS="userinput"><B>0 @your.domain</B></CODE>rewrite: ruleset  0   input: @ your . domainrewrite: ruleset  0 returns: two</PRE></BLOCKQUOTE></P><PCLASS="para">The first thing to notice is what was <EMCLASS="emphasis">not</EM> printed! The workspacedoes not match the pattern of the first rule. But instead of returning an error,the workspace is carried down <EMCLASS="emphasis">as is</EM> to the next rule&nbsp;- whereit does match:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"> @your.domain <ICLASS="lineannotation">does not match, so ...</I> <ICLASS="lineannotation"><IMGSRC="../chars/darr.gif"ALT="-v"></I>R@      one <ICLASS="lineannotation"><IMGSRC="../chars/darr.gif"ALT="-v"></I> <ICLASS="lineannotation">try the next rule</I> <ICLASS="lineannotation"><IMGSRC="../chars/darr.gif"ALT="-v"></I>R@$+    two</PRE></BLOCKQUOTE></P><PCLASS="para">Now enter an address that fails to match the first two rulesbut successfully matches the third:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">&gt; <CODECLASS="userinput"><B>0 you@your.domain</B></CODE>rewrite: ruleset  0   input: you @ your . domainrewrite: ruleset  0 returns: three</PRE></BLOCKQUOTE></P><PCLASS="para">The flow for this address is</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"> your@your.domain <ICLASS="lineannotation">does not match, so ...</I> <ICLASS="lineannotation"><IMGSRC="../chars/darr.gif"ALT="-v"></I>R@      one <ICLASS="lineannotation"><IMGSRC="../chars/darr.gif"ALT="-v"></I> <ICLASS="lineannotation">try the next rule, which also does not match, so ...</I> <ICLASS="lineannotation"><IMGSRC="../chars/darr.gif"ALT="-v"></I>R@$+    two <ICLASS="lineannotation"><IMGSRC="../chars/darr.gif"ALT="-v"></I> <ICLASS="lineannotation">try the next rule, which does match.</I> <ICLASS="lineannotation"><IMGSRC="../chars/darr.gif"ALT="-v"></I>R$+@$+  three</PRE></BLOCKQUOTE></P><PCLASS="para">Try other addresses such as your login name or UUCPaddresses such as <EMCLASS="emphasis">you@host.uucp</EM> and <EMCLASS="emphasis">host!you</EM>.Can you predict what will happen with weird addresses like<EMCLASS="emphasis">@@</EM> or <EMCLASS="emphasis">a@b@c</EM>?</P><PCLASS="para">When you are done experimenting, exit rule-testing modeand delete the four temporary lines that you addedfor this demonstration.<ACLASS="indexterm"NAME="AUTOID-5161"></A><ACLASS="indexterm"NAME="AUTOID-5162"></A><ACLASS="indexterm"NAME="AUTOID-5163"></A><ACLASS="indexterm"NAME="AUTOID-5164"></A>&#13;</P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch08_06.htm"TITLE="8.6 The Flow of Addresses Through Rules"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 8.6 The Flow of Addresses Through Rules"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="sendmail"><IMGSRC="../gifs/txthome.gif"ALT="sendmail"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch08_08.htm"TITLE="8.8 Things to Try"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 8.8 Things to Try"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">8.6 The Flow of Addresses Through Rules</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">8.8 Things to Try</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><PCLASS="nav"><FONTSIZE="-1">[ <AHREF="../index.htm"TITLE="The Networking CD Bookshelf">Library Home</A> | <AHREF="../dnsbind/index.htm"TITLE="DNS &amp; BIND">DNS &amp; BIND</A> | <AHREF="../tcpip/index.htm"TITLE="TCP/IP Network Administration">TCP/IP</A> | <AHREF="index.htm"TITLE="sendmail">sendmail</A> | <AHREF="../smdref/index.htm"TITLE="sendmail Desktop Reference">sendmail Reference</A> | <AHREF="../firewall/index.htm"TITLE="Building Internet Firewalls">Firewalls</A> | <AHREF="../puis/index.htm"TITLE="Practical UNIX &amp; Internet Security">Practical Security</A> ]</FONT></P></DIV></BODY></HTML>