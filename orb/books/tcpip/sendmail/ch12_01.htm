<HTML><HEAD><TITLE>[Chapter 12] Class</TITLE><METANAME="DC.title"CONTENT="sendmail"><METANAME="DC.creator"CONTENT="Bryan Costales &amp; Eric Allman"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1999-01-06T18:36:48Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-222-0"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="part01.htm"TITLE="I. A Tutorial"><LINKREL="prev"HREF="ch11_08.htm"TITLE="11.8 Things to Try"><LINKREL="next"HREF="ch12_02.htm"TITLE="12.2 The File Form of Class"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="sendmail"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,65"HREF="index.htm"ALT="sendmail"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/ssrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch11_08.htm"TITLE="11.8 Things to Try"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 11.8 Things to Try"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 12</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch12_02.htm"TITLE="12.2 The File Form of Class"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 12.2 The File Form of Class"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="CHAPTER"><H1CLASS="chapter"><ACLASS="title"NAME="SML2-CH-12">12. Class</A></H1><DIVCLASS="htmltoc"><P><B>Contents:</B><BR><ACLASS="sect1"HREF="#SML2-CH-12-SECT-1"TITLE="12.1 The Class Command">The Class Command</A><BR><ACLASS="sect1"HREF="ch12_02.htm"TITLE="12.2 The File Form of Class">The File Form of Class</A><BR><ACLASS="sect1"HREF="ch12_03.htm"TITLE="12.3 Things to Try">Things to Try</A></P><P></P></DIV><PCLASS="para"></P><PCLASS="para">In rule sets, it is often advantageous to compare individualtokens to multiple strings in determining a match.For example, consider the rules developedin the last chapter, that is, the sender rewriting rules fromthe hub delivery agent's <CODECLASS="literal">S=Hubset</CODE> rule set:<ACLASS="indexterm"NAME="SML2-CH-12-IX-CLASS-MACROS"></A><ACLASS="indexterm"NAME="SML2-CH-12-IX-MACROS-CLASS-MACROS"></A></P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">SHubset # Rewrite the sender for the hubR$-             $@ $1@${HUB}            user -&gt; user@hubR$-@$w          $@ $1@${HUB}            user@local -&gt; user@hub</PRE></BLOCKQUOTE></P><PCLASS="para">The second rule's LHS looks for any sender addressthat is composed of a single username followed by an <CODECLASS="literal">@</CODE>character and ending with the short name of the local machine (<CODECLASS="literal">$w</CODE>).Such an address is rewritten by the RHS to become that ofthe central forwarding machine, defined by the <CODECLASS="literal">{HUB}</CODE> macro.</P><PCLASS="para">Now suppose that the local machine is known by several names inaddition to the short name in <CODECLASS="literal">$w</CODE>. All machines,for example, have a short name (such as <EMCLASS="emphasis">here</EM>)and a fully qualified name (such as <EMCLASS="emphasis">here.us.edu</EM>).They also often refer to themselves as <EMCLASS="emphasis">localhost</EM>.In addition, some machines can play special roles at a site (suchas having a printer or containing a central directory of fonts) andmight have another name appropriate to that role.</P><PCLASS="para">To convert any sender address so thatit becomes the central forwarder's name, no matter what the local host'sname, you can use <EMCLASS="emphasis">sendmail</EM> classes.In this chapter we will cover the class configuration commandand its cousin, the file configuration command.Proper use of the class and file commands allowsyou to replace many rules with a single rule.&#13;</P><DIVCLASS="sect1"><H2CLASS="sect1"><ACLASS="title"NAME="SML2-CH-12-SECT-1">12.1 The Class Command</A></H2><PCLASS="para"><ACLASS="indexterm"NAME="SML2-CH-12-IX-CLASS-COMMAND"></A>The class command declares a macro whose value is a list of strings.Rule sets may then compare the workspace to that list of strings.One suchlist could be a list of names by which the local machine is known.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-6491"></A>A class is referenced in the LHS with the <CODECLASS="literal">$=</CODE>prefix:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$=<CODECLASS="replaceable"><I>X          </I></CODE><ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> single-character name</I>$=<CODECLASS="replaceable"><I>{XXX}      </I></CODE><ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> multicharacter name (beginning with V8.7)</I></PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-6502"></A>Here, <CODECLASS="replaceable"><I>X</I></CODE> is a single-character class name.Beginning with V8.7 <EMCLASS="emphasis">sendmail</EM>, multicharacter class name may beused, as shown in the second line above.Multicharacter class names must always be enclosed incurly braces.</P><PCLASS="para">The workspace is tokenized as usual; then the appropriatetoken is looked up to see whether it was defined as belongingto the class referenced by <CODECLASS="literal">$=</CODE>. If the token wasfound, the workspace at that point is considered to be matched.We'll cover this in more detail shortly.&#13;</P><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="SML2-CH-12-SECT-1-1">12.1.1 Declaring a Class</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-6512"></A>The words that form the list of words in a classare declared with the <CODECLASS="literal">C</CODE> configuration command.The form for the class configuration command is as follows:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">C<CODECLASS="replaceable"><I>Xlist          </I></CODE><ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> single-character name</I>C<CODECLASS="replaceable"><I>{XXX}list      </I></CODE><ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> multicharacter name (beginning with V8.7)</I></PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-6523"></A>The class configuration command starts with the letter<CODECLASS="literal">C</CODE>, which must begin a line. The <CODECLASS="literal">C</CODE> is immediately followed(with no intervening whitespace) by the name of that class.A class name can be a single ASCII characteror, beginning with V8.7 <EMCLASS="emphasis">sendmail</EM>, multiple ASCII characters enclosed in curly braces.A whitespace-separated <CODECLASS="replaceable"><I>list</I></CODE> of word elements followson the same line. Space between the name and the <CODECLASS="replaceable"><I>list</I></CODE>is optional.</P><PCLASS="para">For example, the following declaration places two possiblenames for the local machine into the class named <CODECLASS="literal">w</CODE>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Cw printer1 fontserver</PRE></BLOCKQUOTE></P><PCLASS="para">Multiple declarations of the same class macro may exist.Each appends its word elements to the preceding list. For example,the following produces the same result as the single line above:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Cw printer1Cw fontserver</PRE></BLOCKQUOTE></P><PCLASS="para">Both examples define a class named <CODECLASS="literal">w</CODE>, and both assign to that class the same list of two words.&#13;</P><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="SML2-CH-12-SECT-1-1-1">12.1.1.1 A caveat</A></H4><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-6542"></A>Class names and macro namesare completely independent. To illustrate, considerthe following two configuration commands:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Dwprinter1Cwprinter1</PRE></BLOCKQUOTE></P><PCLASS="para">Both assign the value <CODECLASS="literal">printer1</CODE> to the name <CODECLASS="literal">w</CODE>.The first assigns that value to a macro, the second toa class. Internally, <EMCLASS="emphasis">sendmail</EM> stores the value <CODECLASS="literal">printer1</CODE>twice, first as type &quot;macro&quot; and secondas type &quot;class.&quot; Although they share the samevalue (<CODECLASS="literal">printer1</CODE>), macros and classes arecompletely independent of each other.&#13;</P></DIV></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="SML2-CH-12-SECT-1-2">12.1.2 Multiple Known Names for the Local Host</A></H3><PCLASS="para">As an example of one common use of the class macro, we will consider the case of machines that are known by multiple names.Run <EMCLASS="emphasis">sendmail</EM> again:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>./sendmail -Cclient.cf -bt</B></CODE>ADDRESS TEST MODE (ruleset 3 NOT automatically invoked)Enter &lt;ruleset&gt; &lt;address&gt;&gt;</PRE></BLOCKQUOTE></P><PCLASS="para">Now give it the special (new to V8.7 <EMCLASS="emphasis">sendmail</EM>)rule-testing command <CODECLASS="literal">$=</CODE> (whichtells <EMCLASS="emphasis">sendmail</EM> to print the values stored in a class) and followthat with the letter (class name) <CODECLASS="literal">w</CODE>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">&gt; <CODECLASS="userinput"><B>$=w</B></CODE>here.us.eduhere[123.45.67.8]&gt;</PRE></BLOCKQUOTE></P><PCLASS="para">This illustrates that <EMCLASS="emphasis">sendmail</EM> is aware ofthree of your machine's possible names (the last is an IP address).But recall from the previous chapter that the rule that we createdlooked for the local machine using only theshort name in the macro <CODECLASS="literal">w</CODE>, not the three names in class<CODECLASS="literal">w</CODE>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">R$-@$w          $@ $1@${HUB}            user@local -&gt; user@hub</PRE></BLOCKQUOTE></P><PCLASS="para">If we didn't have class macros, we would have to look for the localmachine name using a series of rules like those below:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">R$-@$w                 $@ $1@${HUB}     user@local -&gt; user@hubR$-@here.us.edu        $@ $1@${HUB}     user@local -&gt; user@hubR$-@[123.45.67.8]      $@ $1@${HUB}     user@local -&gt; user@hub</PRE></BLOCKQUOTE></P><PCLASS="para">&#13;Fortunately, the class configuration command provides an alternative.Use of a class list allows one rule to be written that does exactlythe same thing as the three preceding rules:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">R$-@$=w         $@ $1@${HUB}            user@local -&gt; user@hub</PRE></BLOCKQUOTE></P><PCLASS="para">Let's examine this new rule, then test it.&#13;</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="SML2-CH-12-SECT-1-3">12.1.3 Class Macros in the LHS</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-6584"></A>The list of words in a class are referenced in the LHS ofrules by prefixing the class name with the characters<CODECLASS="literal">$=</CODE>. For the class named <CODECLASS="literal">w</CODE> the expressionin the LHS looks like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$=w</PRE></BLOCKQUOTE></P><PCLASS="para">To understand how this expression is evaluated, we need tolook at how the words in the class are stored.Each word that <EMCLASS="emphasis">sendmail</EM> adds to the list (whetherinternally or from a <CODECLASS="literal">C</CODE> configuration command)is stored by <EMCLASS="emphasis">sendmail</EM><ACLASS="indexterm"NAME="AUTOID-6595"></A>in its <EMCLASS="emphasis">symbol table</EM>.  The symbol table holds all the wordsthat appear in the configuration file. It holds the values of macro definitions and the symbolic names of delivery agents.It also holds the words that form a class list.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-6599"></A>Next, we need to review how the workspace is tokenized andcompared to the LHS of a rule. Just before the LHSis compared to the workspace, the workspace is tokenized.The address of a local user in the workspace might look like,and be tokenized like, the following:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">you@here   <ICLASS="lineannotation">becomes <IMGSRC="../chars/rarr.gif"ALT="-&gt;"></I>   you @ here</PRE></BLOCKQUOTE></P><PCLASS="para">When the <CODECLASS="literal">$=w</CODE> expression appears in the LHS of a rule,it is compared to the workspace at the point that corresponds tothe class's position in the LHS:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">R$-@$=w         $@$1@${HUB}            user@local -&gt; user@hub    <ICLASS="lineannotation"><IMGSRC="../chars/uarr.gif"ALT="-^"></I>    <ICLASS="lineannotation">here</I></PRE></BLOCKQUOTE></P><PCLASS="para">In performing its minimum match of the workspace to the LHS,the matches are the following:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$-    <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> match</I> you@     <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> match</I> @$=w   <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> does</I> here <ICLASS="lineannotation">match any token in class </I>w<ICLASS="lineannotation">?</I></PRE></BLOCKQUOTE></P><PCLASS="para">When <EMCLASS="emphasis">sendmail</EM> encounters a class-matching expression inthe LHS, it looks up the corresponding token from the workspacein its symbol table. Here it looks up <CODECLASS="literal">here</CODE>.Because <CODECLASS="literal">here</CODE> is listed in the symbol tableas belonging to the class <CODECLASS="literal">w</CODE>, <EMCLASS="emphasis">sendmail</EM> finds a match.If there were no <CODECLASS="literal">here</CODE> in the symbol table, the matchwould fail. If there were one or more <CODECLASS="literal">here</CODE>entries in the symbol table, but none marked as belonging toclass <CODECLASS="literal">w</CODE>, the match would also fail.&#13;</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="SML2-CH-12-SECT-1-4">12.1.4 Class Macros in the RHS</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-6630"></A><ACLASS="indexterm"NAME="AUTOID-6633"></A>When a match in the LHS allows the RHS to rewrite the workspace, thetoken matched by the <CODECLASS="literal">$=</CODE> prefix can be referencedwith a <CODECLASS="literal">$</CODE><CODECLASS="replaceable"><I>digit</I></CODE> positional operator. This differs from the<CODECLASS="literal">$</CODE> macro prefix that you learned about earlier. Macrosare expanded when the configuration file is read (so <CODECLASS="literal">$</CODE><CODECLASS="replaceable"><I>digit</I></CODE>doesn't work), but classes aregiven values only when a rule is matched (so <CODECLASS="literal">$</CODE><CODECLASS="replaceable"><I>digit</I></CODE> does work).</P><PCLASS="para">We don't use the positional operator in the RHS because wedon't care what word matched. Instead, we take the username fromthe LHS with <CODECLASS="literal">$1</CODE>, add an <CODECLASS="literal">@</CODE> character andthe name of the forwarding hub machine (the <CODECLASS="literal">${HUB}</CODE>):</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">R$-@$=w         $@$1@${HUB}            user@local -&gt; user@hub <ICLASS="lineannotation"><IMGSRC="../chars/uarr.gif"ALT="-^">  <IMGSRC="../chars/uarr.gif"ALT="-^">                <IMGSRC="../chars/uarr.gif"ALT="-^"></I> <ICLASS="lineannotation">1  2                $2 not needed</I></PRE></BLOCKQUOTE></P><PCLASS="para"></P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="SML2-CH-12-SECT-1-5">12.1.5 Testing Class</A></H3><PCLASS="para">Modify the <EMCLASS="emphasis">client.cf</EM> file by changing the <CODECLASS="literal">$w</CODE> inthe second rule (of <CODECLASS="literal">SHubset</CODE>) into a <CODECLASS="literal">$=w</CODE> so that wecan begin to test the class:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">R$-@$<CODECLASS="userinput"><B>=</B></CODE>w         $@ $1@${HUB}            user@local -&gt; user@hub     <ICLASS="lineannotation"><IMGSRC="../chars/uarr.gif"ALT="-^"></I>     <ICLASS="lineannotation">insert an </I>=</PRE></BLOCKQUOTE></P><PCLASS="para">Now run <EMCLASS="emphasis">sendmail</EM> in rule-testing mode once again:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>./sendmail -Cclient.cf -bt</B></CODE>ADDRESS TEST MODE (ruleset 3 NOT automatically invoked)Enter &lt;ruleset&gt; &lt;address&gt;&gt;</PRE></BLOCKQUOTE></P><PCLASS="para">First use the <CODECLASS="literal">$=</CODE> rule-testing command to list the contentsof the class <CODECLASS="literal">w</CODE>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">&gt; <CODECLASS="userinput"><B>$=w</B></CODE>here.us.eduhere[123.45.67.8]</PRE></BLOCKQUOTE></P><PCLASS="para">Next, to test the new rule, specify rule set <CODECLASS="literal">Hubset</CODE> andgive <EMCLASS="emphasis">sendmail</EM> an address with a user, an <CODECLASS="literal">@</CODE>, andone of the local addresses shown for your machine:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">&gt; <CODECLASS="userinput"><B>Hubset you@here.us.edu</B></CODE>rewrite: ruleset 199   input: you @ here . us . edurewrite: ruleset 199 returns: you @ mail . us . edu</PRE></BLOCKQUOTE></P><PCLASS="para">&#13;This result is just what we expected. After all, the value in <CODECLASS="literal">${HUB}</CODE>is <CODECLASS="literal">mail.us.edu</CODE>. Now give <EMCLASS="emphasis">sendmail</EM> another address,only this time give it one not in the list:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">&gt; <CODECLASS="userinput"><B>Hubset you@localhost</B></CODE>rewrite: ruleset 199   input: you @ localhostrewrite: ruleset 199 returns: you @ localhost</PRE></BLOCKQUOTE></P><PCLASS="para">This time the address was not rewritten because <CODECLASS="literal">localhost</CODE> isnot listed in the class <CODECLASS="literal">w</CODE>. But, in general,<EMCLASS="emphasis">localhost</EM> is a legitimate name for the local machine, solet's add it temporarily by employing a new rule-testing commandthat you haven't seen before:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">&gt; <CODECLASS="userinput"><B>.Cw localhost</B></CODE>&gt; <CODECLASS="userinput"><B>$=w</B></CODE>here.us.edulocalhosthere[123.45.67.8]</PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="literal">.C</CODE> command (new with V8.7)tells <EMCLASS="emphasis">sendmail</EM> to temporarily add a word to a class. In this casewe added the word <CODECLASS="literal">localhost</CODE> to the class <CODECLASS="literal">w</CODE>. We thenran the <CODECLASS="literal">$=</CODE> rule-testing command to confirm that <EMCLASS="emphasis">sendmail</EM>had actually added the word to the class. </P><PCLASS="para">Test the address <EMCLASS="emphasis">localhost</EM> again:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">&gt; <CODECLASS="userinput"><B>Hubset you@localhost</B></CODE>rewrite: ruleset 199   input: you @ localhostrewrite: ruleset 199 returns: you @ mail . us . edu</PRE></BLOCKQUOTE></P><PCLASS="para">This time, <EMCLASS="emphasis">sendmail</EM> found <CODECLASS="literal">localhost</CODE> in the listand so rewrote the sender address.&#13;</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="SML2-CH-12-SECT-1-6">12.1.6 Add Class w to client.cf</A></H3><PCLASS="para">As we mentioned earlier, a host may be known by many names.Some of those names are found automatically by <EMCLASS="emphasis">sendmail</EM>; others must be added by you. The name <EMCLASS="emphasis">localhost</EM>is one possibility, and there may be others (such as <EMCLASS="emphasis">printer1</EM>).You can add them to class <CODECLASS="literal">w</CODE> in rule-testing mode, butthat is not a permanent solution (because they are forgotten as soonyou leave rule-testing mode). Instead, you need to addthem to your configuration file using the <CODECLASS="literal">C</CODE> configurationcommand.<ACLASS="indexterm"NAME="AUTOID-6720"></A></P><PCLASS="para">Edit the <EMCLASS="emphasis">client.cf</EM> file and add a new <CODECLASS="literal">C</CODE> configurationline to it:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">V7# Defined macrosD{REMOTE}mailhost              # The name of the mail hubD{HUB}mail.us.edu              # Hub as known to the outside world<CODECLASS="userinput"><B>Cw localhost printer1          # My other names.                      </B></CODE><ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> new</I></PRE></BLOCKQUOTE></P><PCLASS="para">Here we added <CODECLASS="literal">localhost</CODE> because it was missing and <CODECLASS="literal">printer1</CODE>to illustrate later points. Note that the name <CODECLASS="literal">printer1</CODE> is probablynot appropriate for your site, but include it for now.</P><PCLASS="para">Run <EMCLASS="emphasis">sendmail</EM> again in rule-testing mode:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>./sendmail -Cclient.cf -bt</B></CODE>ADDRESS TEST MODE (ruleset 3 NOT automatically invoked)Enter &lt;ruleset&gt; &lt;address&gt;&gt;</PRE></BLOCKQUOTE></P><PCLASS="para">Use the <CODECLASS="literal">$=</CODE> rule-testing command again. Make sure the<CODECLASS="literal">C</CODE> line added the new names to the class <CODECLASS="literal">w</CODE>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">&gt; <CODECLASS="userinput"><B>$=w</B></CODE>here.us.edulocalhosthere[123.45.67.8]printer1</PRE></BLOCKQUOTE></P><PCLASS="para">We can now test each name.Remember that the rule we are testing is this one:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">R$-@$=w         $@ $1@${HUB}            user@local -&gt; user@hub</PRE></BLOCKQUOTE></P><PCLASS="para">We want to match any sender address that is a username,an <CODECLASS="literal">@</CODE>, and any of the names in the class <CODECLASS="literal">w</CODE>.We also want to rewrite each to appear as though the user is fromthe hub.</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">&gt; <CODECLASS="userinput"><B>Hubset you@here.us.edu</B></CODE>rewrite: ruleset 199   input: you @ here . us . edurewrite: ruleset 199 returns: you @ mail . us . edu&gt; <CODECLASS="userinput"><B>Hubset you@localhost</B></CODE>rewrite: ruleset 199   input: you @ localhostrewrite: ruleset 199 returns: you @ mail . us . edu&gt; <CODECLASS="userinput"><B>Hubset you@here</B></CODE>rewrite: ruleset 199   input: you @ hererewrite: ruleset 199 returns: you @ mail . us . edu&gt; <CODECLASS="userinput"><B>Hubset you@[123.45.67.8]</B></CODE>rewrite: ruleset 199   input: you @ [ 123 . 45 . 67 . 8 ]rewrite: ruleset 199 returns: you @ mail . us . edu&gt; <CODECLASS="userinput"><B>Hubset you@printer1</B></CODE>rewrite: ruleset 199   input: you @ printer1rewrite: ruleset 199 returns: you @ mail . us . edu&gt; <CODECLASS="userinput"><B>Hubset you@printer1.us.edu</B></CODE>rewrite: ruleset 199   input: you @ printer1 . us . edurewrite: ruleset 199 returns: you @ printer1 . us . edu</PRE></BLOCKQUOTE></P><PCLASS="para">All the names in class <CODECLASS="literal">w</CODE> match as they should. Noticethat <EMCLASS="emphasis">here</EM> appears in the list as both a short anda fully qualified name, but <EMCLASS="emphasis">printer1</EM> does not. When we tried <EMCLASS="emphasis">printer1</EM> in a fully qualified form (in the lastthree lines above), it failed.To make <EMCLASS="emphasis">printer1</EM> succeed,we could add its fully qualified formto the class <CODECLASS="literal">w</CODE>, but if we did that, we would haveto do the same for <EMCLASS="emphasis">localhost</EM> and any other namesthat we added. Instead, we will deal with the problem by addinga rule to the <EMCLASS="emphasis">client.cf</EM> file.&#13;</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="SML2-CH-12-SECT-1-7">12.1.7 Adding the Domain</A></H3><PCLASS="para">There are three approaches to writing a rule that matches anyof the local hostnames with a domain added:</P><OLCLASS="orderedlist"><LICLASS="listitem"><PCLASS="para">Use a <CODECLASS="literal">$*</CODE> wildcard operator to match anything after the local hostname:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">R$-@$=w$*</PRE></BLOCKQUOTE></P><PCLASS="para">But this is unwise because it assumes that anything thatfollows the host is a domain, which might not always be true.</P></LI><LICLASS="listitem"><PCLASS="para">Use your domain name directly in the rule:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">R$-@$=w.us.edu</PRE></BLOCKQUOTE></P><PCLASS="para">Although this will work,it is better to use a macro in case you change your domain or usethis file on a machine in another domain.</P></LI><LICLASS="listitem"><PCLASS="para">Use a macro that has your domain name as its value.</P></LI></OL><PCLASS="para">We will use the third approach because it is the cleanest. Begin byrunning <EMCLASS="emphasis">sendmail</EM> with the <CODECLASS="literal">-d0.1</CODE> debugging switchagain:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Version 8.8.4 Compiled with: LOG MATCHGECOS MIME7TO8 MIME8TO7 NAMED_BIND NDBM NETINET                NETUNIX NIS SCANF XDEBUG============ SYSTEM IDENTITY (after readcf) ============      (short domain name) $w = here  (canonical domain name) $j = here.us.edu         (subdomain name) $m = us.edu              (node name) $k = here========================================================  ADDRESS TEST MODE (ruleset 3 NOT automatically invoked)Enter &lt;ruleset&gt; &lt;address&gt;&gt;</PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-6791"></A><ACLASS="indexterm"NAME="AUTOID-6793"></A>Note that the line that defines the &quot;subdomain name&quot; (the one with the <CODECLASS="literal">$m</CODE>)is the local domain that we need for our new rule.Add another rule to the <CODECLASS="literal">Hubset</CODE> rule set. This new rule looks forany local names (in <CODECLASS="literal">$=w</CODE>) that are followed by thelocal domain name defined for you by <EMCLASS="emphasis">sendmail</EM>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">SHubset # Rewrite the sender for the hubR$-             $@ $1@${HUB}            user -&gt; user@hubR$-@$=w         $@ $1@${HUB}            user@local -&gt; user@hub<CODECLASS="userinput"><B>R$-@$=w.$m      $@ $1@${HUB}            user@local.domain -&gt; user@hub   </B></CODE><ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> new</I></PRE></BLOCKQUOTE></P><PCLASS="para">&#13;Now run <EMCLASS="emphasis">sendmail</EM> once again and feed it the address that failed inthe last test (but use your local domain):</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>./sendmail -Cclient.cf -bt</B></CODE>ADDRESS TEST MODE (ruleset 3 NOT automatically invoked)Enter &lt;ruleset&gt; &lt;address&gt;&gt; <CODECLASS="userinput"><B>Hubset you@printer1.us.edu</B></CODE>rewrite: ruleset 199   input: you @ printer1 . us . edurewrite: ruleset 199 returns: you @ mail . us . edu</PRE></BLOCKQUOTE></P><PCLASS="para">As expected, the new rule in the <CODECLASS="literal">Hubset</CODE> rule set does its job.It finds thatthe <CODECLASS="literal">printer1.us.edu</CODE> part of the address matches the <CODECLASS="literal">$=w.$m</CODE> partof the rule and rewrites the workspace to make the sender's addressappear as though it is from the hub.<ACLASS="indexterm"NAME="AUTOID-6813"></A>&#13;</P></DIV></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch11_08.htm"TITLE="11.8 Things to Try"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 11.8 Things to Try"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="sendmail"><IMGSRC="../gifs/txthome.gif"ALT="sendmail"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch12_02.htm"TITLE="12.2 The File Form of Class"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 12.2 The File Form of Class"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">11.8 Things to Try</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">12.2 The File Form of Class</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><PCLASS="nav"><FONTSIZE="-1">[ <AHREF="../index.htm"TITLE="The Networking CD Bookshelf">Library Home</A> | <AHREF="../dnsbind/index.htm"TITLE="DNS &amp; BIND">DNS &amp; BIND</A> | <AHREF="../tcpip/index.htm"TITLE="TCP/IP Network Administration">TCP/IP</A> | <AHREF="index.htm"TITLE="sendmail">sendmail</A> | <AHREF="../smdref/index.htm"TITLE="sendmail Desktop Reference">sendmail Reference</A> | <AHREF="../firewall/index.htm"TITLE="Building Internet Firewalls">Firewalls</A> | <AHREF="../puis/index.htm"TITLE="Practical UNIX &amp; Internet Security">Practical Security</A> ]</FONT></P></DIV></BODY></HTML>