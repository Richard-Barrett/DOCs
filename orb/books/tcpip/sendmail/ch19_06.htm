<HTML><HEAD><TITLE>[Chapter 19] 19.6 Alphabetized m4 Macros</TITLE><METANAME="DC.title"CONTENT="sendmail"><METANAME="DC.creator"CONTENT="Bryan Costales &amp; Eric Allman"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1999-01-06T19:18:35Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-222-0"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch19_01.htm"TITLE="19. V8 m4 Configuration"><LINKREL="prev"HREF="ch19_05.htm"TITLE="19.5 Pitfalls"><LINKREL="next"HREF="ch20_01.htm"TITLE="20. The checkcompat() Cookbook"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="sendmail"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,65"HREF="index.htm"ALT="sendmail"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/ssrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch19_05.htm"TITLE="19.5 Pitfalls"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 19.5 Pitfalls"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 19<BR>V8 m4 Configuration</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="CHAPTER"HREF="ch20_01.htm"TITLE="20. The checkcompat() Cookbook"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 20. The checkcompat() Cookbook"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="SML2-CH-19-SECT-6">19.6 Alphabetized m4 Macros</A></H2><PCLASS="para">In this section we detail each of the general macrosavailable when configuring with the <EMCLASS="emphasis">m4</EM> technique.Here we list them in alphabetical order.</P><PCLASS="para">This reference is not comprehensive. Options, macros, and deliveryagents, for example,are described in chapters dedicated to those topics.</P><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-1">19.6.1 BITNET-RELAY</A></H3><PCLASS="refpurpose">The BITNET relay</P>(V8.1 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-14237"></A>The host that will forward BITNET-addressed email.If not defined, the .BITNET pseudo-domain won't work.See <ACLASS="xref"HREF="ch31_10.htm#SML2-CH-31-SECT-10-5"TITLE="">Section 31.10.5</A> for a description of this relayand of the <CODECLASS="literal">$B</CODE> macro.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-2">19.6.2 DECNET-RELAY</A></H3><PCLASS="refpurpose">The DECnet relay</P>(V8.7 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-14249"></A>The host that will forward DECnet addressed email.If not defined, the .DECNET pseudo-domain won't work,nor will an address of the form <EMCLASS="emphasis">node::user</EM>.See <ACLASS="xref"HREF="ch31_10.htm#SML2-CH-31-SECT-10-9"TITLE="">Section 31.10.9</A> for a description of this relayand of the <CODECLASS="literal">$C</CODE> macro.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-3">19.6.3 DOL</A></H3><PCLASS="refpurpose">Insert literal $ in m4 output</P>(V8.1 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-14262"></A>Ordinarily,the <CODECLASS="literal">$</CODE> character is interpreted by <EMCLASS="emphasis">m4</EM> inside its <CODECLASS="literal">define</CODE>expressions.But for ambitious undertakings, such as designing your ownDOMAIN, FEATURE, or HACK files, you may need to include referenceto a macro or operator (and hence a <CODECLASS="literal">$</CODE>)inside an <EMCLASS="emphasis">m4</EM> <CODECLASS="literal">define</CODE> expression. The way you do this is with the DOL <EMCLASS="emphasis">m4</EM> macro. For example,</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">define(`DOWN', `R DOL(*) &lt; @ $1 &gt; DOL(*)    DOL(1) &lt; @ $2 &gt; DOL(2)')</PRE></BLOCKQUOTE></P><PCLASS="para">Here, we define the <EMCLASS="emphasis">m4</EM> macro named DOWN, which takes two arguments (<CODECLASS="literal">$1</CODE>and <CODECLASS="literal">$2</CODE>). When used in one of your <CODECLASS="literal">.m4</CODE> files,</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">DOWN(<EMCLASS="emphasis">badhost, </EM><EMCLASS="emphasis">outhost)</EM></PRE></BLOCKQUOTE></P><PCLASS="para">it creates a rule by substituting the above arguments for thecorresponding <CODECLASS="literal">$1</CODE> and <CODECLASS="literal">$2</CODE> in its original definition:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">R $* &lt; @ outhost &gt; $2</PRE></BLOCKQUOTE></P><PCLASS="para">The DOL <EMCLASS="emphasis">m4</EM> macro in the original definition allowed the insertionof <CODECLASS="literal">$</CODE> characters (such as <CODECLASS="literal">$*</CODE>) while protecting thosecharacters from being wrongly interpreted by <EMCLASS="emphasis">m4</EM>.</P><PCLASS="para">Needless to say, you should <EMCLASS="emphasis">never</EM> redefine the DOL macro.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-4">19.6.4 EXPOSED-USER</A></H3><PCLASS="refpurpose">Masquerade all but these</P>(V8.6 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-14302"></A>Class macro <CODECLASS="literal">$=E</CODE> is used by the V8 configuration file to holda list of usernames that should never be masqueraded (even ifmasquerade is enabled with the MASQUERADE_AS m4 macro). By default,the user <EMCLASS="emphasis">root</EM> is always in that class.There are two ways to add usernames to the class <CODECLASS="literal">E</CODE>.They can be added individually with the EXPOSED_USER <EMCLASS="emphasis">m4</EM> macro:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">EXPOSED_USER(<CODECLASS="replaceable"><I>user</I></CODE>)</PRE></BLOCKQUOTE></P><PCLASS="para">Here, we cause the name <CODECLASS="replaceable"><I>user</I></CODE> to be appended to the class<CODECLASS="literal">E</CODE>. This is identical to the following use of LOCAL_CONFIG to add to the class directly:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">LOCAL_CONFIGCE user</PRE></BLOCKQUOTE></P><PCLASS="para">If you wish to store the list of nonmasqueradable users inan external file, you can cause that file to be read withan <CODECLASS="literal">F</CODE> configuration command (see <ACLASS="xref"HREF="ch32_01.htm#SML2-CH-32-SECT-1-2"TITLE="The F Class Command">Section 32.1.2, "The F Class Command"</A>):</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">LOCAL_CONFIGFE/usr/local/mail/visible.users</PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-5">19.6.5 FAX-RELAY</A></H3><PCLASS="refpurpose">The FAX relay</P>(V8.6 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-14329"></A>The host that will forward email faxes.If not defined, and if you don't have a <CODECLASS="literal">fax</CODE> delivery agent on yourlocal machine, the .FAX pseudo-domain won't work.See <ACLASS="xref"HREF="ch31_10.htm#SML2-CH-31-SECT-10-15"TITLE="">Section 31.10.15</A> for a description of this relayand of the <CODECLASS="literal">$F</CODE> macro. Note that if you service faxes locally, you will also need to declare the <EMCLASS="emphasis">fax</EM> deliveryagent with the MAILER() <EMCLASS="emphasis">m4</EM> command instead (see <ACLASS="xref"HREF="ch19_03.htm#SML2-CH-19-SECT-3-2"TITLE="MAILER()">Section 19.3.2</A>).</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-6">19.6.6 FEATURE(allmasquerade)</A></H3><PCLASS="refpurpose">Masquerade the sender too</P>(V8.2 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="SML2-CH-19-IX-FEATURE-MACRO-M4"></A><ACLASS="indexterm"NAME="AUTOID-14347"></A><ACLASS="indexterm"NAME="AUTOID-14351"></A><ACLASS="indexterm"NAME="AUTOID-14355"></A><ACLASS="indexterm"NAME="AUTOID-14357"></A>If a MASQUERADE_AS host is defined,that hostname replaces all sender addresses.The <CODECLASS="literal">allmasquerade</CODE>feature causes header recipient addresses to also have that treatment.</P><PCLASS="para">But note that this feature can be extremely risky and that it should be used only if the MASQUERADE_AS host has an <EMCLASS="emphasis">aliases</EM> file that is a superset of all <EMCLASS="emphasis">aliases</EM> files and a <EMCLASS="emphasis">passwd</EM> filethat is a superset of all <EMCLASS="emphasis">passwd</EM> files at your site.To illustrate the risk, consider a situation in which the masquerade host is named<EMCLASS="emphasis">hub.domain</EM> and mail is being sent from the localworkstation. If a local alias exists, say <EMCLASS="emphasis">thishost-users</EM>,that does not also exist on the masquerade host, this<CODECLASS="literal">allmasquerade</CODE> feature will cause the <CODECLASS="literal">To:</CODE> headerto go out as:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">To: thishostusers@hub.domain</PRE></BLOCKQUOTE></P><PCLASS="para">Here, the address <EMCLASS="emphasis">thishostusers</EM> does not exist on the masquerade host,and as a consequence, replies to messages containing this header will bounce.</P><PCLASS="para">The form for the <CODECLASS="literal">allmasquerade</CODE> feature is:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">define(`MASQUERADE_AS', `<CODECLASS="replaceable"><I>your.hub.domain</I></CODE>')FEATURE(`allmasquerade')</PRE></BLOCKQUOTE></P><PCLASS="para">Note that MASQUERADE_AS (see <ACLASS="xref"HREF="ch19_06.htm#SML2-CH-19-SECT-6-42"TITLE="">Section 19.6.42</A>) must also bedefined and must contain a fully qualified hostname.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-7">19.6.7 FEATURE(always-add-domain)</A></H3><PCLASS="refpurpose">Add the local domain even on local mail</P>(V8.1 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-14388"></A><ACLASS="indexterm"NAME="AUTOID-14390"></A>Normally, header recipient addresses and header and envelope sender addressesthat select the <CODECLASS="literal">local</CODE> or <CODECLASS="literal">prog</CODE> delivery agentsare left as is. If the <CODECLASS="literal">always_add_domain</CODE> feature is defined,local addresses that lack a host part have an <CODECLASS="literal">@</CODE>and the MASQUERADE_AS host appended (if it is defined).If MASQUERADE_AS is not defined, an <CODECLASS="literal">@</CODE> and the value of <CODECLASS="literal">$j</CODE> (see <ACLASS="xref"HREF="ch31_10.htm#SML2-CH-31-SECT-10-20"TITLE="">Section 31.10.20, $j</A>) are appended.</P><PCLASS="para">The form for the <EMCLASS="emphasis">always_add_domain</EM> feature is</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">FEATURE(`always_add_domain')</PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="literal">always_add_domain</CODE> feature is safe and recommended. It ensuresthat all addresses that are locally delivered will be fully qualified.See the <CODECLASS="literal">allmasquerade</CODE> feature for a description of therisks surrounding masquerading addresses.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-8">19.6.8 FEATURE(bestmx-is-local)</A></H3><PCLASS="refpurpose">Accept best MX record as local if in $=w</P>(V8.6 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-14415"></A>The class <CODECLASS="literal">w</CODE> (see <ACLASS="xref"HREF="ch32_05.htm#SML2-CH-32-SECT-5-8"TITLE="">Section 32.5.8</A>) isrecommended for defining which hostnames will be treatedas being equivalent to the local hostname.That method, however, requires that themail administrator manually keep the class up to date.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-14420"></A>As an alternative, for low- to medium-volume sites, use the <CODECLASS="literal">bestmx_is_local</CODE> feature. When enabled, this featurelooks up each hostname that it finds in the <CODECLASS="literal">bestmx</CODE> internal databasemap (see <ACLASS="xref"HREF="ch33_08.htm#SML2-CH-33-SECT-8-2"TITLE="">Section 33.8.2, bestmx</A>). That map returns the best MXrecord (if it is known) for that name. That returned record is thencompared to the list of hostnames in class <CODECLASS="literal">w</CODE> to see whether it isequivalent to the local host. If so, the address is accepted for localdelivery.</P><PCLASS="para">The form for the <CODECLASS="literal">bestmx_is_local</CODE> feature:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">FEATURE(`bestmx_is_local')</PRE></BLOCKQUOTE></P><PCLASS="para">If you wish to limit lookups to a small list of domains, you can add themas a second argument:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">FEATURE(`bestmx_is_local', `<ICLASS="lineannotation">domain1 domain2 etc.</I>')</PRE></BLOCKQUOTE></P><PCLASS="para">The list of domains is added to the class <CODECLASS="literal">$=B</CODE>. Only hostsin those domains are allowed to list your site as the best MXrecord for use with this feature.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-14438"></A>Use of this feature is best limited to low-volume sites. Looking upevery address in the <CODECLASS="literal">bestmx</CODE> map can cause numerous DNSenquiries. At high-volume sites the magnitude of extra DNSenquiries can adversely tax the system.</P><PCLASS="para">There is also a risk to this feature. Someone could create an MX recordfor your site without your knowledge. Bogusmail might then be accepted at your site without your permission.</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">bogus.site.com.    IN MX 0 your.real.domain</PRE></BLOCKQUOTE></P><PCLASS="para">Here, mail to <EMCLASS="emphasis">bogus.site.com</EM> would be sent to your site, where the name<EMCLASS="emphasis">bogus.site.com</EM> would be looked up with the<CODECLASS="literal">bestmx_is_local</CODE> feature. Your <EMCLASS="emphasis">sendmail</EM> would find itselflisted as MX for <EMCLASS="emphasis">bogus.site.com</EM> and so would accept thebogus mail and attempt to deliver it locally. If the bogus name weredesigned to discredit you, it could be set to<EMCLASS="emphasis">sex.bogus.site.com</EM> for example, and mail to<EMCLASS="emphasis">root@sex.</EM> would be delivered to you without yourknowing the reason.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-9">19.6.9 FEATURE(bitdomain)</A></H3><PCLASS="refpurpose">Convert BITNET addresses into Internet addresses</P>(V8.1 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-14461"></A><ACLASS="indexterm"NAME="AUTOID-14463"></A><ACLASS="indexterm"NAME="AUTOID-14465"></A>Many Internet hosts have BITNET addresses that are separatefrom their Internet addresses. For example, the host <EMCLASS="emphasis">icsi.berkeley.edu</EM>has the registered BITNET name <EMCLASS="emphasis">ucbicsi</EM>. If a user tried to replyto an address such as:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">user@ucbicsi.bitnet</PRE></BLOCKQUOTE></P><PCLASS="para">that mail would fail. To help with translations from registered BITNETnames to Internet addresses, John Gardiner Myers has supplied the <CODECLASS="literal">bitdomain</CODE> program in the <EMCLASS="emphasis">contrib</EM> subdirectory.It produces output in the form</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">ucbicsi    icsi.berkeley.edu</PRE></BLOCKQUOTE></P><PCLASS="para">that can be put into database form for use with the <CODECLASS="literal">K</CODE>configuration command. The <CODECLASS="literal">bitdomain</CODE> feature causes rulesto be included in the configuration file that perform the necessarytranslation:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">R$* &lt; @ $+ .BITNET &gt; $*         $: $1 &lt; @ $(bitdomain $2 $: $2.BITNET $) &gt; $3</PRE></BLOCKQUOTE></P><PCLASS="para">Note that this rule requires BITNET addresses to be so identifiedwith a <CODECLASS="literal">.BITNET</CODE> suffix. If the address, without the suffix, is foundin the <CODECLASS="literal">bitdomain</CODE> database, the Internet equivalent address isused in its place. (See also the UUCPSMTP <EMCLASS="emphasis">m4</EM> macro and the <CODECLASS="literal">domaintable</CODE> feature.</P><PCLASS="para">The form of the <CODECLASS="literal">bitdomain</CODE> feature is</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">FEATURE(`bitdomain')</PRE></BLOCKQUOTE></P><PCLASS="para">This declaration causes the following <CODECLASS="literal">K</CODE> configuration commandto be included in addition to the above rule:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Kbitdomain hash -o /etc/bitdomain.db</PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="literal">bitdomain</CODE> feature is one of those that can take an argumentto specify a different form of or name for the database:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">FEATURE(`bitdomain',`dbm -o /etc/bitdomain')</PRE></BLOCKQUOTE></P><PCLASS="para">The extra argument causes the above <CODECLASS="literal">K</CODE> command to be replacedwith the following one:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Kbitdomain dbm -o /etc/bitdomain</PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="literal">bitdomain</CODE> feature is safe. You can routinely include it inall configuration files. The database lookup is performed only if the<CODECLASS="literal">.BITNET</CODE> suffix is present and the database file exists.</P><PCLASS="para">&#13;Note that you must also define BITNET_RELAY (see <ACLASS="xref"HREF="ch31_10.htm#SML2-CH-31-SECT-10-5"TITLE="">Section 31.10.5</A>) if you want <CODECLASS="literal">.BITNET</CODE>suffixed mail that is not found in the database to be routed to a relay machine. If BITNET_RELAY is not defined, <CODECLASS="literal">.BITNET</CODE>suffixed mail that is not found in the database is bounced.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-10">19.6.10 FEATURE(domaintable)</A></H3><PCLASS="refpurpose">Accept old as equivalent to new domain</P>(V8.2 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-14518"></A><ACLASS="indexterm"NAME="AUTOID-14520"></A><ACLASS="indexterm"NAME="AUTOID-14523"></A>Some sites need to use multiple domain names when transitioning from anold domain to a new one.The <EMCLASS="emphasis">domaintable</EM> feature enables such transitions to operate smoothlyby rewriting the old domain to the new.To begin, create a file of the form:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">other.domain    local.host.domain</PRE></BLOCKQUOTE></P><PCLASS="para">In it the left side of each line has one of possibly many fully qualified hostnames,and the right side has one of your local hostnames. The <EMCLASS="emphasis">makemap</EM>(1) program(see <ACLASS="xref"HREF="ch33_02.htm"TITLE="Create Files with makemap">Section 33.2, "Create Files with makemap"</A>) is then used to convert that file into a database.</P><PCLASS="para">The <CODECLASS="literal">domaintable</CODE> feature causes a rule like this to be included in your configurationfile:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">R$* &lt; @ $+ &gt; $*                 $: $1 &lt; @ $(domaintable $2 $) &gt; $3</PRE></BLOCKQUOTE></P><PCLASS="para">Here, each host part of an address in rule set 3 is looked up in the<CODECLASS="literal">domaintable</CODE> map. If it is found, the local name from that mapreplaces it, and the address is treated as local.</P><PCLASS="para">&#13;The <CODECLASS="literal">domaintable</CODE> feature enables this lookup by including a <CODECLASS="literal">K</CODE>configuration command:&#13;</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Kdomaintable hash -o /etc/domaintable</PRE></BLOCKQUOTE></P><PCLASS="para">The form of <EMCLASS="emphasis">domaintable</EM> feature is</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">FEATURE(`domaintable')</PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="literal">domaintable</CODE> feature is one of those that can take an argumentto specify a different form of or different name for the database:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">FEATURE(`domaintable',`dbm -o /etc/domaintable')</PRE></BLOCKQUOTE></P><PCLASS="para">The extra argument causes the above <CODECLASS="literal">K</CODE> command to be replacedwith the following one:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Kdomaintable dbm -o /etc/domaintable</PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="literal">domaintable</CODE> feature is safe. You can routinely include it inall configuration files. The database lookup is performed only if thedatabase file exists.(See <ACLASS="xref"HREF="ch33_03.htm#SML2-CH-33-SECT-3-4-8"TITLE="-o  the database file is optional (V8.1 and above)">Section 33.3.4.8, "-o  the database file is optional (V8.1 and above)"</A> for a description of the <CODECLASS="literal">K</CODE> command's <CODECLASS="literal">-o</CODE>switch.)</P><PCLASS="para">Although this feature might appear suitable for a service provider that wishesto accept mail for client domains, it really is not. Such a service provider should use the<CODECLASS="literal">virtusertable</CODE> feature instead.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-11">19.6.11 FEATURE(genericstable)</A></H3><PCLASS="refpurpose">Transform sender addresses</P>(V8.8 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-14569"></A><ACLASS="indexterm"NAME="AUTOID-14571"></A>The User Database (see <ACLASS="xref"HREF="ch33_05.htm"TITLE="The User Database">Section 33.5, "The User Database"</A>) allows recipient addresses to be changed so thatthey can be delivered to new hosts. For example, <EMCLASS="emphasis">gw@wash.dc.gov</EM> canbe transformed with the User Database into <EMCLASS="emphasis">george@us.edu</EM>.The <CODECLASS="literal">genericstable</CODE> provides the sametype of transformation on the sender's address.</P><PCLASS="para">To begin, create a file of the form</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">user    newuser@new.host.domain</PRE></BLOCKQUOTE></P><PCLASS="para">In it, each line begins with the user part of an address. On the right isthe new address for that sender. One example of a use for this tablemight be to make the user <EMCLASS="emphasis">news</EM> always appear as though itwas from the <EMCLASS="emphasis">news</EM> machine:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">news    news@news.our.domain</PRE></BLOCKQUOTE></P><PCLASS="para">The <EMCLASS="emphasis">makemap</EM>(1) program(see <ACLASS="xref"HREF="ch33_02.htm"TITLE="Create Files with makemap">Section 33.2</A>) is then used to convert this file into a database:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">makemap hash <CODECLASS="replaceable"><I>file</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="literal">genericstable</CODE> feature causes a rule like thisto be included in your configuration file:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">R$+ &lt; @ $=G . &gt;      $: &lt; $(generics $1 $: @ $) &gt; $1 &lt; @ $2 . &gt;</PRE></BLOCKQUOTE></P><PCLASS="para">Here, in rule set 93, any address whose host part is in the class <CODECLASS="literal">$=G</CODE>has the user part looked up in the <CODECLASS="literal">genericstable</CODE> database.If it is found, it is rewritten to be the address from the right-hand sideof the original file.Note that local and non-local hosts can appear in <CODECLASS="literal">$=G</CODE> for usewith this feature. Also note that the members of <CODECLASS="literal">$=w</CODE> are <EMCLASS="emphasis">not</EM>automatically placed in <CODECLASS="literal">$=G</CODE>.</P><PCLASS="para">The <CODECLASS="literal"><CODECLASS="literal">genericstable</CODE></CODE> feature enables this lookup by including a <CODECLASS="literal">K</CODE> configuration command:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Kgenericstable hash -o /etc/genericstable</PRE></BLOCKQUOTE></P><PCLASS="para">The form of <CODECLASS="literal">genericstable</CODE> feature's declaration is</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">FEATURE(`genericstable')</PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="literal">genericstable</CODE> feature is one of those that can take an argumentto specify a different form of or a different name for the database:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">FEATURE(`genericstable',`dbm -o /etc/genericstable')</PRE></BLOCKQUOTE></P><PCLASS="para">The extra argument causes the above <CODECLASS="literal">K</CODE> command to be replacedwith the following one:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Kgenericstable dbm -o /etc/genericstable</PRE></BLOCKQUOTE></P><PCLASS="para">See <ACLASS="xref"HREF="ch33_03.htm#SML2-CH-33-SECT-3-4-8"TITLE="-o  the database file is optional (V8.1 and above)">Section 33.3.4.8</A> for a description of the <CODECLASS="literal">K</CODE> command <CODECLASS="literal">-o</CODE>switch.</P><PCLASS="para">The <CODECLASS="literal">genericstable</CODE> should be enabled only if you intend to use it.It causes every sender to be looked up in that database.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-12">19.6.12 FEATURE(limited-masquerade)</A></H3><PCLASS="refpurpose">Only masquerade $=M hosts</P>(V8.8 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-14635"></A><ACLASS="indexterm"NAME="AUTOID-14637"></A>Ordinarily, addresses can be masqueraded if they are unqualified (lack a domain part)or if they match any hostname in <CODECLASS="literal">$=w</CODE>.Masquerading replaces the hostnamepart of an address withthe fully qualified hostname defined by MASQUERADE_AS.</P><PCLASS="para">Some sites handle mail for multiple domains. For these sites it isimportant to recognize all incoming mail as local via <CODECLASS="literal">$=w</CODE>.On the other hand, only a subset of the hosts in <CODECLASS="literal">$=w</CODE>should be masqueraded. Consider, for example, the host <EMCLASS="emphasis">our.domain</EM>that receives mail for the domains <EMCLASS="emphasis">his.domain</EM> and <EMCLASS="emphasis">her.domain</EM>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Cw our.domain his.domain her.domain</PRE></BLOCKQUOTE></P><PCLASS="para">In this scenario we want all but <EMCLASS="emphasis">her.domain</EM> to be masqueradedas <EMCLASS="emphasis">our.domain</EM>. The way to create such exceptions is with the<CODECLASS="literal">limited_masquerade</CODE> feature.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-14653"></A>The <CODECLASS="literal">limited_masquerade</CODE> feature causes masquerading to be basedon <CODECLASS="literal">$=M</CODE> instead of <CODECLASS="literal">$=w</CODE>. You use <CODECLASS="literal">limited_masquerade</CODE>like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">define(`MASQUERADE_AS', `<CODECLASS="replaceable"><I>our.domain</I></CODE>')FEATURE(`limited_masquerade')LOCAL_CONFIGCw our.domain his.domain her.domainMASQUERADE_DOMAIN(our.domain his.domain)</PRE></BLOCKQUOTE></P><PCLASS="para">MASQUERADE_AS needs to be declared first. Then the <CODECLASS="literal">limited_masquerade</CODE> featureis declared. Finally, the LOCAL_CONFIG allows two classesto be declared. The first is the normal <CODECLASS="literal">$=w</CODE>. The second usesMASQUERADE_DOMAIN to indirectly declare<CODECLASS="literal">$=M</CODE> and puts a subset of the <CODECLASS="literal">$=w</CODE> hosts in it. Specifically,the second class omits the <EMCLASS="emphasis">her.domain</EM>.</P><PCLASS="para">The <CODECLASS="literal">limited_masquerade</CODE> feature causes <EMCLASS="emphasis">sendmail</EM> to masqueradethe hosts in <CODECLASS="literal">$=M</CODE>, instead of the normal masquerading of <CODECLASS="literal">$=w</CODE>.Note that <CODECLASS="literal">$=M</CODE> is also used to list the domains for the <CODECLASS="literal">masquerade_entire_domain</CODE> feature.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-13">19.6.13 FEATURE(local-procmail)</A></H3><PCLASS="refpurpose">Use procmail(1) as local delivery agent</P>(V8.7 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-14683"></A><ACLASS="indexterm"NAME="AUTOID-14685"></A>The <EMCLASS="emphasis">procmail</EM> (1) program can handle a user's mail autonomously (for example,sorting incoming mail into folders based on subject) and can function asa <EMCLASS="emphasis">sendmail</EM> delivery agent. Some administrators prefer <EMCLASS="emphasis">procmail</EM>(1) in thislatter role over normal UNIX delivery agents. If this is your preference,you can easily use <EMCLASS="emphasis">procmail</EM>(1) in that role with the<EMCLASS="emphasis">local_procmail</EM> feature:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">FEATURE(`local_procmail')</PRE></BLOCKQUOTE></P><PCLASS="para">The <EMCLASS="emphasis">local_procmail</EM> feature changes the <CODECLASS="literal">P=</CODE>, <CODECLASS="literal">F=</CODE>, and<CODECLASS="literal">A=</CODE> equates for the <CODECLASS="literal">local</CODE> delivery agent into</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">P=/usr/local/bin/procmail                 <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> see <ACLASS="xref"HREF="ch30_04.htm#SML2-CH-30-SECT-4-9"TITLE="">Section 30.4.9, P=</A></I>F=SPfhn                                   <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> see <ACLASS="xref"HREF="ch30_04.htm#SML2-CH-30-SECT-4-5"TITLE="">Section 30.4.5, F=</A></I>A=procmail -Y -a $h -d $u                 <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> see <ACLASS="xref"HREF="ch30_04.htm#SML2-CH-30-SECT-4-1"TITLE="">Section 30.4.1, A=</A></I></PRE></BLOCKQUOTE></P><PCLASS="para">If you have installed <EMCLASS="emphasis">procmail</EM> in a different location, you can specifythat alternative location with a second argument:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">FEATURE(`local_procmail', `/admin/mail/bin/procmail')</PRE></BLOCKQUOTE></P><PCLASS="para">If you need to use different <CODECLASS="literal">F=</CODE> flags than those shown, you maydeclare new flags with LOCAL_MAILER_FLAGS(see <ACLASS="xref"HREF="ch30_04.htm#SML2-CH-30-SECT-4-5-1"TITLE="m4 modification of F=">Section 30.4.5.1, "m4 modification of F="</A>). If you need to specify different commandline arguments, you may do so with LOCAL_MAILER_ARGS(see <ACLASS="xref"HREF="ch30_04.htm#SML2-CH-30-SECT-4-1-1"TITLE="m4 A= definitions">Section 30.4.1.1, "m4 A= definitions"</A>).Both must appear before the feature.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-14">19.6.14 FEATURE(mailertable)</A></H3><PCLASS="refpurpose">Database selects new delivery agents</P>(V8.1 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-14724"></A><ACLASS="indexterm"NAME="AUTOID-14726"></A>A <EMCLASS="emphasis">mailertable</EM> is a database that maps <EMCLASS="emphasis">host.domain</EM> namesto special delivery agent and new domain name pairs.Essentially, it provides a database hook into rule set 0.The new domain names are used for routing but are not reflectedin the headers of messages.For example, one mapping in a source text file could be:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">compuserv.com    smtp:compuserve.com</PRE></BLOCKQUOTE></P><PCLASS="para">The key portion (on the left) must be either a fully qualifiedhost and domain name, such as <EMCLASS="emphasis">lady.bcx.com</EM>, or a partialdomain specification with a leading dot, such as <EMCLASS="emphasis">.bcx.com</EM>.On the rightthe delivery agent name must be separated from the new domain name by a colon.The source text file is converted into a database with the <EMCLASS="emphasis">makemap</EM>(1) program (see <ACLASS="xref"HREF="ch33_02.htm"TITLE="Create Files with makemap">Section 33.2</A>).Beginning with V8.8 <EMCLASS="emphasis">sendmail</EM>, the host part can also specify a user:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">downhost.com     smtp:<CODECLASS="userinput"><B>postmaster</B></CODE>@mailhub.our.domain</PRE></BLOCKQUOTE></P><PCLASS="para">&#13;The <EMCLASS="emphasis">mailertable</EM> feature causes rules to be includedin your configuration file that look up <EMCLASS="emphasis">host.domain</EM>names (on the left in the source file) in the <EMCLASS="emphasis">mailertable</EM> database:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">R&lt; $+ &gt; $*                   $: &lt; $(mailertable $1 $) &gt; $2   lookupR&lt; error : $- $+ &gt; $*        $#error $@ $1 $: $2             check - error?</PRE></BLOCKQUOTE></P><PCLASS="para">Here, the <EMCLASS="emphasis">host.domain</EM> is looked up in the <CODECLASS="literal">mailertable</CODE>database, and a delivery agent, colon, and domain pair are returned.If the delivery agent (in <CODECLASS="literal">mailertable</CODE>) is <CODECLASS="literal">error</CODE>,the <CODECLASS="literal">#error</CODE> delivery agent is called. This allows error messagesto be put into the database, as, for example,</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">badhost    error:nohost mail to badhost is prohibited</PRE></BLOCKQUOTE></P><PCLASS="para">The first token following the <CODECLASS="literal">error:</CODE> is passed in the<CODECLASS="literal">$@</CODE> part of the <CODECLASS="literal">#error</CODE> delivery agent.Note that you must use words or <EMCLASS="emphasis">&lt;sysexits.h&gt;</EM> codes here, not DSNvalues (such as <CODECLASS="literal">3.1.0</CODE>), because the latter would be wrongly broken up into five tokens.See <ACLASS="xref"HREF="ch30_05.htm#SML2-CH-30-SECT-5-2"TITLE="The error Delivery Agent">Section 30.5.2, "The error Delivery Agent"</A> for a full description of the<CODECLASS="literal">#error</CODE> delivery agent and for tables of useful words and codes forthe <CODECLASS="literal">$@</CODE> part.</P><PCLASS="para">If the host is found and it is not an <CODECLASS="literal">error</CODE> delivery agent, thatdelivery agent is selected. Otherwise, the unresolved <EMCLASS="emphasis">host.domain</EM>is passed to rule set 90 for further <EMCLASS="emphasis">mailertable</EM> lookups.Rule set 90 recursively strips the leftmost part of the <EMCLASS="emphasis">host.domain</EM>away and looks up the result in the <CODECLASS="literal">mailertable</CODE>. This continuesuntil either a match is found or only a dot is left. Then that dot is lookedup to give you a hook for failed lookups:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">.     smtp:smarthost</PRE></BLOCKQUOTE></P><PCLASS="para">As a special case, the delivery agent named <CODECLASS="literal">local</CODE> causes slightly differentbehavior in that it allows the name of the target user to be listed without a host part:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">virtual.domain    local:bob</PRE></BLOCKQUOTE></P><PCLASS="para">Here, any mail that is received for the <EMCLASS="emphasis">virtual.domain</EM> is delivered to the user <EMCLASS="emphasis">bob</EM>on the local machine. If the user part is missing,</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">virtual.domain    local:</PRE></BLOCKQUOTE></P><PCLASS="para">the mail is delivered to the user part of the original address.</P><PCLASS="para">The form for the <EMCLASS="emphasis">mailertable</EM> feature is:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">FEATURE(`mailertable')</PRE></BLOCKQUOTE></P><PCLASS="para">This causes the following database declaration in the configuration file:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Kmailertable hash -o /etc/mailertable.db</PRE></BLOCKQUOTE></P><PCLASS="para">&#13;If you wish to use a different form of database(such as <EMCLASS="emphasis">dbm</EM>), the <EMCLASS="emphasis">mailertable</EM> feature accepts an argument:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">FEATURE(`mailertable',`dbm -o /etc/mailertable')</PRE></BLOCKQUOTE></P><PCLASS="para">The <EMCLASS="emphasis">mailertable</EM> feature was inspired by the IDA version of<EMCLASS="emphasis">sendmail</EM>.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-15">19.6.15 FEATURE(masquerade-entire-domain)</A></H3><PCLASS="refpurpose">Masquerade all hosts under a domain</P>(V8.8 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-14807"></A><ACLASS="indexterm"NAME="AUTOID-14809"></A><ACLASS="indexterm"NAME="AUTOID-14811"></A>Ordinarily, masquerading transforms any host from a list of hostsin the class <CODECLASS="literal">$=w</CODE> (see <ACLASS="xref"HREF="ch32_05.htm#SML2-CH-32-SECT-5-8"TITLE="">Section 32.5.8</A>)into the host defined by MASQUERADE_AS. If domains are also masqueraded with MASQUERADE_DOMAIN, they too are transformed. For example, consider these declarations:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">MASQUERADE_AS(`our.domain')MASQUERADE_DOMAIN(`her.domain')</PRE></BLOCKQUOTE></P><PCLASS="para">The first line causes any host part of an address contained in the class <CODECLASS="literal">$=w</CODE> to be transformed into <EMCLASS="emphasis">our.domain</EM>.The second line transforms any domain part of <EMCLASS="emphasis">her.domain</EM>into <EMCLASS="emphasis">our.domain</EM>.</P><PCLASS="para">The key point here is that the domain part <EMCLASS="emphasis">her.domain</EM> willbe transformed, whereas hosts under that domain will not be transformed:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">george@her.domain          <ICLASS="lineannotation"><IMGSRC="../chars/rarr.gif"ALT="-&gt;"> becomes <IMGSRC="../chars/rarr.gif"ALT="-&gt;"></I>    george@our.domaingeorge@host.her.domain     <ICLASS="lineannotation"><IMGSRC="../chars/rarr.gif"ALT="-&gt;"> remains <IMGSRC="../chars/rarr.gif"ALT="-&gt;"></I>    george@host.her.domain</PRE></BLOCKQUOTE></P><PCLASS="para">If you wish MASQUERADE_DOMAIN to transform all the hosts under the declareddomain, you may use the <CODECLASS="literal">masquerade_entire_domain</CODE> feature:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">MASQUERADE_AS(`our.domain')MASQUERADE_DOMAIN(`her.domain')FEATURE(`masquerade_entire_domain')</PRE></BLOCKQUOTE></P><PCLASS="para">This feature extends masquerading of <EMCLASS="emphasis">her.domain</EM> to include all the hostsunder that domain:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">george@her.domain          <ICLASS="lineannotation"><IMGSRC="../chars/rarr.gif"ALT="-&gt;"> becomes <IMGSRC="../chars/rarr.gif"ALT="-&gt;"></I>    george@our.domaingeorge@host.her.domain     <ICLASS="lineannotation"><IMGSRC="../chars/rarr.gif"ALT="-&gt;"> becomes <IMGSRC="../chars/rarr.gif"ALT="-&gt;"></I>    george@our.domaingeorge@host.sub.her.domain <ICLASS="lineannotation"><IMGSRC="../chars/rarr.gif"ALT="-&gt;"> becomes <IMGSRC="../chars/rarr.gif"ALT="-&gt;"></I>    george@our.domain</PRE></BLOCKQUOTE></P><PCLASS="para">Note that you may masquerade only domains that are <EMCLASS="emphasis">under your direct jurisdiction</EM>and control. Also note that domain masquerading is intended for actual domains.Virtual (fictional) domains are better handled with the <CODECLASS="literal">virtusertable</CODE>feature (see <ACLASS="xref"HREF="ch19_06.htm#SML2-CH-19-SECT-6-28"TITLE="">Section 19.6.28</A>). But note that the<CODECLASS="literal">virtusertable</CODE> feature handles only incoming mail.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-16">19.6.16 FEATURE(masquerade-envelope)</A></H3><PCLASS="refpurpose">Masquerade the envelope too</P>(V8.7 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-14853"></A><ACLASS="indexterm"NAME="AUTOID-14855"></A>Ordinarily, masquerading (see <ACLASS="xref"HREF="ch19_04.htm#SML2-CH-19-SECT-4-4"TITLE="Masquerading">Section 19.4.4, "Masquerading"</A>) affects only the headers of email messages,but sometimes it is also desirable to masquerade the envelope.[4]For example, error messages are often returned to the envelope-sender address.When many hosts are masquerading as a single host, it is often desirableto have all error messages delivered to that central masquerade host.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[4] See <ACLASS="xref"HREF="ch01_07.htm"TITLE="The Envelope">Section 1.7, "The Envelope"</A> for a description of the envelope and how it differsfrom headers.</P></BLOCKQUOTE><PCLASS="para">The <CODECLASS="literal">masquerade_envelope</CODE> feature causes masquerading to includeenvelope addresses:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">MASQUERADE_AS(`our.domain')        <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> masquerade headers</I>FEATURE(`masquerade_envelope')     <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> also masquerade the envelope</I></PRE></BLOCKQUOTE></P><PCLASS="para">These <EMCLASS="emphasis">mc</EM> lines cause all envelope addresses (where the host part is declared as partof class <CODECLASS="literal">$=w</CODE>; see <ACLASS="xref"HREF="ch32_05.htm#SML2-CH-32-SECT-5-8"TITLE="">Section 32.5.8</A>) to be transformed into <EMCLASS="emphasis">our.domain</EM>.See MASQUERADE_DOMAIN for a way to also masquerade other domains,and see the <CODECLASS="literal">masquerade_entire_domain</CODE> feature for a way to also masquerade all the hosts under other domains.</P><PCLASS="para">In general, <CODECLASS="literal">masquerade_envelope</CODE> is recommended for uniform or smallsites. Large or variegated sites may prefer to tailor the envelope on asubdomain-by-subdomain or host-by-host basis.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-17">19.6.17 FEATURE(nocanonify)</A></H3><PCLASS="refpurpose">Don't canonify with $[ and $]</P>(V8.1 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-14884"></A><ACLASS="indexterm"NAME="AUTOID-14886"></A>Ordinarily, as part of rule set 3, <EMCLASS="emphasis">sendmail</EM> tries to canonify (add a domainto) any hostname that lacks a domain part.<ACLASS="indexterm"NAME="AUTOID-14890"></A><ACLASS="indexterm"NAME="AUTOID-14893"></A>It does this by passing the unadorned hostname to the<CODECLASS="literal">$[</CODE> and <CODECLASS="literal">$]</CODE> operators (see <ACLASS="xref"HREF="ch28_06.htm#SML2-CH-28-SECT-6-6"TITLE="Canonicalize Hostname: $[ and $]">Section 28.6.6, "Canonicalize Hostname: $[ and $]"</A>).The <CODECLASS="literal">nocanonify</CODE> feature prevents <EMCLASS="emphasis">sendmail</EM>from passing addresses to <CODECLASS="literal">$[</CODE> and <CODECLASS="literal">$]</CODE> for canonicalization.This is generally suitable for use by sites that act only as mail gateways or that have MUAs that dofull canonicalization themselves.</P><PCLASS="para">The form for the  <CODECLASS="literal">nocanonify</CODE> feature is:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">FEATURE(`nocanonify')</PRE></BLOCKQUOTE></P><PCLASS="para">You might also want to use:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">define(`confBIND_OPTS',`-DNSRCH -DEFNAMES')</PRE></BLOCKQUOTE></P><PCLASS="para">to turn off the usual resolver options that perform a similar function (see <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-55"TITLE="">Section 34.8.55, ResolverOptions (I)</A>).</P><PCLASS="para">Note that the <CODECLASS="literal">nocanonify</CODE> feature disables only one possibleuse of <CODECLASS="literal">$[</CODE> and <CODECLASS="literal">$]</CODE> in the configuration file. If the<EMCLASS="emphasis">nouucp</EM> feature is omitted(thereby including UUCP support), addressesthat end in a <CODECLASS="literal">.UUCP</CODE> suffix still have the preceding partof the address canonified with <CODECLASS="literal">$[</CODE> and <CODECLASS="literal">$]</CODE> even ifthe <CODECLASS="literal">nocanonify</CODE> feature was declared.</P><PCLASS="para">Note that sending out any unqualified addresses can pose a risk.Be sure to read <ACLASS="xref"HREF="ch16_05.htm"TITLE="Qualify All Addresses?">Section 16.5, "Qualify All Addresses?"</A> for a discussionof why you might not want to use this feature.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-18">19.6.18 FEATURE(nodns)</A></H3><PCLASS="refpurpose">Omit DNS support from configuration file</P>(V8.6)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-14931"></A><ACLASS="indexterm"NAME="AUTOID-14933"></A>The V8.6 <EMCLASS="emphasis">sendmail</EM> configuration files usually assumedthat you were using DNS to get host information.If you did not have DNS available(for example, if you were on a remote UUCP node),you could declare that fact:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">FEATURE(`nodns')</PRE></BLOCKQUOTE></P><PCLASS="para">This told <EMCLASS="emphasis">sendmail</EM> to assume that DNS was not available.It did this by <EMCLASS="emphasis">not</EM> setting any of the <EMCLASS="emphasis">_res.options</EM> flag bits.Note that this was really only a suggestion, because other features(such as <CODECLASS="literal">bestmx_is_local</CODE> temporarilyset those flag bits and used DNS anyway.</P><PCLASS="para">Beginning with V8.7 <EMCLASS="emphasis">sendmail</EM>, you should either use the service-switchfile (see <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-61"TITLE="">Section 34.8.61, ServiceSwitchFile</A>) to control use of DNSor compile a sendmail without DNS support (see <ACLASS="xref"HREF="ch18_08.htm#SML2-CH-18-SECT-8-23"TITLE="">Section 18.8.23, NAMED-BIND</A>).</P><PCLASS="para">Note that the result of a hostname lookup failure differs dependingon whether or not DNS is used. If a hostname is looked up with DNSand not found, the message will be queued, and the name will be looked up again later.If the host is looked up in <EMCLASS="emphasis">/etc/hosts</EM>and the lookup fails, the message bounces.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-19">19.6.19 FEATURE(nouucp)</A></H3><PCLASS="refpurpose">Eliminate all UUCP support</P>(V8.1 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-14958"></A><ACLASS="indexterm"NAME="AUTOID-14960"></A>If your site wants nothing to do with UUCP addresses, youcan enable the <CODECLASS="literal">nouucp</CODE> feature. Among the changes thiscauses that are the <CODECLASS="literal">!</CODE> character is not recognizedas a separator between hostnames; and all the macrosthat relate to UUCP (see <ACLASS="xref"HREF="ch19_04.htm#SML2-CH-19-SECT-4-6"TITLE="UUCP">Section 19.4.6</A>) are ignored.This feature truly means <EMCLASS="emphasis">no</EM> UUCP.</P><PCLASS="para">You declare <CODECLASS="literal">nouucp</CODE> is like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">FEATURE(`nouucp')</PRE></BLOCKQUOTE></P><PCLASS="para">Note that all the other UUCP declarations (such asUUCP_RELAY) will be ignored if you use <CODECLASS="literal">nouucp</CODE>.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-20">19.6.20 FEATURE(nullclient)</A></H3><PCLASS="refpurpose">Relay all mail through a mail host</P>(V8.6 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-14981"></A>Some sites have a number of workstationsthat never receive mail directly. They are usually clustered around a single mail server.Normally, all clients in a cluster like thissend their mail as though the mail is from the server,and they relay all mail through that server rather than sending directly.If you have such a configuration, use</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">FEATURE(`nullclient', `server')</PRE></BLOCKQUOTE></P><PCLASS="para">See <ACLASS="xref"HREF="ch16_01.htm"TITLE="The null.mc File and m4">Chapter 16, <CITECLASS="chapter">The null.mc File and m4</CITE></A>, for a lesson inhow to use this feature. Also see the <CODECLASS="literal">nocanonify</CODE> feature, which can also be used with <CODECLASS="literal">nullclient</CODE>.</P><PCLASS="para">If you wish to prevent the <EMCLASS="emphasis">nullclient</EM> version of <EMCLASS="emphasis">sendmail</EM> fromtrying to access <EMCLASS="emphasis">aliases</EM>, add this line to your <CODECLASS="literal">.mc</CODE> file:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">undefine(`ALIAS_FILE')</PRE></BLOCKQUOTE></P><PCLASS="para">Note that this works only with V8.8 and above <CODECLASS="literal">.mc</CODE> files.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-21">19.6.21 FEATURE(redirect)</A></H3><PCLASS="refpurpose">Add support for address.REDIRECT</P>(V8.1 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-15006"></A><ACLASS="indexterm"NAME="AUTOID-15008"></A><ACLASS="indexterm"NAME="AUTOID-15010"></A><ACLASS="indexterm"NAME="AUTOID-15013"></A>The <CODECLASS="literal">redirect</CODE> feature allows aliases to be set up for retired accounts.Those aliases bounce with an indication of the new forwarding address. A couple of linesfrom such an <EMCLASS="emphasis">aliases</EM>(5) file might look like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">george:   george@new.site.edu.REDIRECTwilliam:  wc@creative.net.REDIRECT</PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="literal">redirect</CODE> feature causesmail addressed to <CODECLASS="literal">george</CODE>, for example,to be bounced with a message like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">551 User not local; please try &lt;george@new.site.edu&gt;</PRE></BLOCKQUOTE></P><PCLASS="para">Note that the message is bounced and not forwarded. Nonotification is sent to the recipient's new address.</P><PCLASS="para">The form of the <CODECLASS="literal">redirect</CODE> feature is</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">FEATURE(`redirect')</PRE></BLOCKQUOTE></P><PCLASS="para">This feature adds the pseudo-domain .REDIRECT to class <CODECLASS="literal">$=P</CODE>,which prevents that suffix from being looked up with DNS.It then adds rules to rule set 0 that handle this suffix only ifthe <CODECLASS="literal">{opMode}</CODE> macro (see <ACLASS="xref"HREF="ch31_10.htm#SML2-CH-31-SECT-10-28"TITLE="">Section 31.10.28, ${opMode}</A>)has any value other than <CODECLASS="literal">i</CODE> (for <EMCLASS="emphasis">initialize aliases</EM> as set by the <CODECLASS="literal">-bi</CODE> command line switch, see <ACLASS="xref"HREF="ch36_01.htm#SML2-CH-36-SECT-1-3"TITLE="newaliases">Section 36.1.3, "newaliases"</A>).The actual bounce is caused by calling the <CODECLASS="literal">error</CODE> delivery agentwith a RHS like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$# error $@ 5.1.1 $: &quot;551 User not local; please try &quot; &lt;$1@$2&gt;</PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="literal">5.1.1</CODE> is a DSN error code (see RFC1893), and the <CODECLASS="literal">551</CODE> is anSMTP code (see RFC821).</P><PCLASS="para">To illustrate why the message is bounced rather than forwarded, consider afictional MTA that is clever about getting this message:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">551 User not local; please try &lt;george@new.site.edu&gt;</PRE></BLOCKQUOTE></P><PCLASS="para">Instead of bouncing the outgoing message, the fictional MTA tries to be cleverand to deliver to <EMCLASS="emphasis">new.site.edu</EM>. If <EMCLASS="emphasis">new.site.edu</EM> also responds witha REDIRECT message, the MTA tries the next host in line.This is a bad idea for two reasons: First, elaborate loop detection would need to bedesigned to catch infinite REDIRECT loops, and second, a down host anywherein the sequence would necessitate that the series of connections be made overand over again until they all succeeded.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-22">19.6.22 FEATURE(smrsh)</A></H3><PCLASS="refpurpose">Use smrsh (sendmail restricted shell)</P>(V8.7 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-15058"></A><ACLASS="indexterm"NAME="AUTOID-15060"></A><ACLASS="indexterm"NAME="AUTOID-15063"></A>Although <EMCLASS="emphasis">sendmail</EM> tries to be very safe about how it runsprograms from the <EMCLASS="emphasis">aliases</EM>(5) and <EMCLASS="emphasis">~/.forward</EM> files(see <ACLASS="xref"HREF="ch24_02.htm#SML2-CH-24-SECT-2-3"TITLE="Delivery via Programs">Section 24.2.3, "Delivery via Programs"</A>), it still may be vulnerable tosome internal attacks.To limit the selection of programs that <EMCLASS="emphasis">sendmail</EM> is allowed torun, V8 <EMCLASS="emphasis">sendmail</EM> now includes source and documentationfor the <EMCLASS="emphasis">smrsh</EM> (<BCLASS="emphasis.bold">s</B>end<BCLASS="emphasis.bold">m</B>ail <BCLASS="emphasis.bold">r</B>estricted <BCLASS="emphasis.bold">sh</B>ell) program.See <ACLASS="xref"HREF="ch22_08.htm#SML2-CH-22-SECT-8-2"TITLE="The smrsh Program">Section 22.8.2, "The smrsh Program"</A> for a full description of the <EMCLASS="emphasis">smrsh</EM> program.</P><PCLASS="para"><EMCLASS="emphasis">After</EM> you have compiled, installed, and configured <EMCLASS="emphasis">smrsh</EM>, youcan include support for it in your configuration file with the <CODECLASS="literal">smrsh</CODE> feature:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">FEATURE(`smrsh')MAILER(`local')</PRE></BLOCKQUOTE></P><PCLASS="para">Note that the <CODECLASS="literal">smrsh</CODE> feature must precede the <CODECLASS="literal">local</CODE> deliveryagent declaration. If these lines are reversed, the following error willprint when you run <EMCLASS="emphasis">m4</EM>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">*** FEATURE(smrsh) must occur before MAILER(local)</PRE></BLOCKQUOTE></P><PCLASS="para">The default location for the <EMCLASS="emphasis">smrsh</EM> program is <EMCLASS="emphasis">/usr/local/etc/smrsh</EM>.If you installed <EMCLASS="emphasis">smrsh</EM> in another location, you will need toadd an argument to the <CODECLASS="literal">smrsh</CODE> feature:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">FEATURE(`smrsh', `/usr/bin/smrsh\')</PRE></BLOCKQUOTE></P><PCLASS="para">Use of <EMCLASS="emphasis">smrsh</EM> is recommended by CERT, so you are encouragedto use this feature as often as possible.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-23">19.6.23 FEATURE(notsticky)</A></H3><PCLASS="refpurpose">Don't differ user from user@local.host</P>(V8.1 through V8.6)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-15108"></A><ACLASS="indexterm"NAME="AUTOID-15110"></A><ACLASS="indexterm"NAME="AUTOID-15113"></A>Mail addressed to a local userthat includes the name of the local host aspart of the address (i.e., local.host)is delivered locally.From V8.1 to V8.6 <EMCLASS="emphasis">sendmail</EM>,if the address has a host part,lookups in the User Database (see <ACLASS="xref"HREF="ch33_05.htm"TITLE="The User Database">Section 33.5</A>) and theadditional processing of rule set 5 (see <ACLASS="xref"HREF="ch29_07.htm"TITLE="Rule Set 5">Section 29.7, "Rule Set 5"</A>) are skipped.Under V8.6,addresses with just the <CODECLASS="replaceable"><I>user</I></CODE> part are always processed by the User Database and rule set 5.</P><PCLASS="para">The V8.6 <CODECLASS="literal">notsticky</CODE> feature changes this logic.If this feature is chosen, all usersare looked up in the User Database, and theadditional processing done by rule set 5 is skipped.</P><PCLASS="para">Beginning with V8.7, the default is now as if <CODECLASS="literal">notsticky</CODE>were used, and the <CODECLASS="literal">stickyhost</CODE> feature is used to restore the previous default.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-24">19.6.24 FEATURE(stickyhost)</A></H3><PCLASS="refpurpose">Differ user from user@local.host</P>(V8.7 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-15133"></A>Beginning with V8.7 <EMCLASS="emphasis">sendmail</EM>, addresses with and withouta host part that resolve to local delivery are handled in the same way.For example, <EMCLASS="emphasis">user</EM> and <EMCLASS="emphasis">user@local.host</EM> areboth looked up with the User Database (see <ACLASS="xref"HREF="ch33_05.htm"TITLE="The User Database">Section 33.5</A>) and processed by rule set 5 (see <ACLASS="xref"HREF="ch29_07.htm"TITLE="Rule Set 5">Section 29.7</A>).This processing can result in those addresses being forwarded toother machines.</P><PCLASS="para">With the <CODECLASS="literal">stickyhost</CODE> feature, you may change this behavior:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">FEATURE(`stickyhost')</PRE></BLOCKQUOTE></P><PCLASS="para">By defining <CODECLASS="literal">stickyhost</CODE>, you are telling <EMCLASS="emphasis">sendmail</EM> tomark addresses that have a local host part as &quot;sticky&quot;:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">user               <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> not sticky</I>user@local.host    <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> sticky</I></PRE></BLOCKQUOTE></P><PCLASS="para">Sticky hosts tend to be delivered on the local machine. That is,they are not looked up with the User Database and are notprocessed by rule set 5.</P><PCLASS="para">One use for this feature is to create a domainwide name space. In it,all addresses without a host part will be forwarded to a centralmail server. Those with a local host part will remain on the localmachine and be delivered in the usual local way.</P><PCLASS="para">Note that this is opposite the behavior of the former <CODECLASS="literal">notsticky</CODE>feature of V8.6.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-25">19.6.25 FEATURE(use-ct-file)</A></H3><PCLASS="refpurpose">Use /etc/sendmail.ct for a list of trusted users</P>(V8.7 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-15163"></A><ACLASS="indexterm"NAME="AUTOID-15165"></A><ACLASS="indexterm"NAME="AUTOID-15167"></A><ACLASS="indexterm"NAME="AUTOID-15170"></A><ACLASS="indexterm"NAME="AUTOID-15173"></A><ACLASS="indexterm"NAME="AUTOID-15175"></A>V6 <EMCLASS="emphasis">sendmail</EM> removed the concept of trusted users(see <ACLASS="xref"HREF="ch22_08.htm"TITLE="Security Features">Section 22.8, "Security Features"</A>). V8.7 reintroduced trusted users, butin a different form from that used by V5 <EMCLASS="emphasis">sendmail</EM>.Now, trusted users are those who may run <EMCLASS="emphasis">sendmail</EM>with the <CODECLASS="literal">-f</CODE> switch (see <ACLASS="xref"HREF="ch36_07.htm#SML2-CH-36-SECT-7-21"TITLE="">Section 36.7.21, -f and -r</A>) without generating anauthentication warning (see <ACLASS="xref"HREF="ch35_10.htm#SML2-CH-35-SECT-10-35"TITLE="">Section 35.10.35, X-Authentication-Warning:</A>):</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">X-Authentication-Warning: <CODECLASS="replaceable"><I>host</I></CODE>: <CODECLASS="replaceable"><I>user</I></CODE> set sender to <CODECLASS="replaceable"><I>other</I></CODE> using -f</PRE></BLOCKQUOTE></P><PCLASS="para">To prevent this warning, the <CODECLASS="replaceable"><I>user</I></CODE> should be added tothe class <CODECLASS="literal">$=t</CODE> (see <ACLASS="xref"HREF="ch32_05.htm#SML2-CH-32-SECT-5-7"TITLE="">Section 32.5.7, $=t</A>). There are three ways to dothis. You may use the <CODECLASS="literal">T</CODE> configuration command:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">T<CODECLASS="replaceable"><I>user</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Or you may use the class command:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Ct<CODECLASS="replaceable"><I>user</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Or you may use the <CODECLASS="literal">use_ct_file</CODE> and add <CODECLASS="replaceable"><I>user</I></CODE> tothe <EMCLASS="emphasis">/etc/sendmail.ct</EM> file. To use this latter approach,declare the following in your <EMCLASS="emphasis">mc</EM> file:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">FEATURE(`use_ct_file')</PRE></BLOCKQUOTE></P><PCLASS="para">If you want to locate the <EMCLASS="emphasis">/etc/sendmail.ct</EM> in a differentplace or give it a different name, you may do so with thisdeclaration:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">define(`confCT_FILE', `/etc/mail/trusted.list')</PRE></BLOCKQUOTE></P><PCLASS="para">Note that the file must exist before <EMCLASS="emphasis">sendmail</EM> is started, orit will complain:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">fileclass: cannot open /etc/mail/trusted.list: No such file or directory</PRE></BLOCKQUOTE></P><PCLASS="para">If you want the file to optionally exist,you may add a <CODECLASS="literal">-o</CODE> (see <ACLASS="xref"HREF="ch32_01.htm#SML2-CH-32-SECT-1-2"TITLE="The F Class Command">Section 32.1.2</A>) to theconf-CT_FILE definition:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">define(`confCT_FILE', `-o /etc/sendmail.ct')</PRE></BLOCKQUOTE></P><PCLASS="para">Here, we don't rename the file: we make the defaultfile's presence optional.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-26">19.6.26 FEATURE(use-cw-file)</A></H3><PCLASS="refpurpose">Use /etc/sendmail.cw for local hostnames</P>(V8.1 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-15230"></A><ACLASS="indexterm"NAME="AUTOID-15232"></A><ACLASS="indexterm"NAME="AUTOID-15234"></A>The <CODECLASS="literal">use_cw_file</CODE> feature causes the file<EMCLASS="emphasis">/etc/sendmail.cw</EM> to be read to obtain alternativenames for the local host.  One use for such a filemight be to declare a list of hosts for which thelocal host is acting as the MX recipient.The <CODECLASS="literal">use_cw_file</CODE> is used like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">FEATURE(`use_cw_file')</PRE></BLOCKQUOTE></P><PCLASS="para">&#13;This feature causes the following <CODECLASS="literal">F</CODE> configurationcommand (see <ACLASS="xref"HREF="ch32_01.htm#SML2-CH-32-SECT-1-2"TITLE="The F Class Command">Section 32.1.2</A>) to appear in the configuration file:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Fw/etc/sendmail.cw</PRE></BLOCKQUOTE></P><PCLASS="para">The actual filename can be changed from <EMCLASS="emphasis">/etc/sendmail.cw</EM> (the default)by defining the <CODECLASS="literal">confCW_FILE</CODE> macro:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">define(`confCW_FILE', `-o /etc/mail/sendmail.cw')</PRE></BLOCKQUOTE></P><PCLASS="para">Here, we both rename the file and make its presence optional byadding the <CODECLASS="literal">-o</CODE> switch (see <ACLASS="xref"HREF="ch32_01.htm#SML2-CH-32-SECT-1-2"TITLE="The F Class Command">Section 32.1.2</A>).</P><PCLASS="para">If the local host is known by only a few names,an alternative is to instead include the following <CODECLASS="literal">C</CODE>configuration command (see <ACLASS="xref"HREF="ch32_01.htm#SML2-CH-32-SECT-1-1"TITLE="The C Class Command">Section 32.1.1, "The C Class Command"</A>) in placeof the above feature:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Cw<CODECLASS="replaceable"><I>name1 name2</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>name1</I></CODE> and <CODECLASS="replaceable"><I>name2</I></CODE> are alternative names for the local host.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-27">19.6.27 FEATURE(uucpdomain)</A></H3><PCLASS="refpurpose">Convert UUCP hosts via a database</P>(V8.1 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-15271"></A>The <EMCLASS="emphasis">uucpdomain</EM> feature is similar to <EMCLASS="emphasis">bitdomain</EM> butis used to translate addresses of the form</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">user@host.UUCP</PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-15278"></A>into the <CODECLASS="literal">!</CODE> path form or routing used by UUCP.The database for this would contain, for example, key and datapairs like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">host     a!b!c!host</PRE></BLOCKQUOTE></P><PCLASS="para">This source text file is converted into a database with the<EMCLASS="emphasis">makemap</EM>(1) program (see <ACLASS="xref"HREF="ch33_02.htm"TITLE="Create Files with makemap">Section 33.2</A>).But note that no software is supplied to transformthe UIUC <EMCLASS="emphasis">pathalias</EM>(1) program's output into a form that is suitable for this database.</P><PCLASS="para">The way you declare <CODECLASS="literal">uucpdomain</CODE> is like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">FEATURE(`uucpdomain')</PRE></BLOCKQUOTE></P><PCLASS="para">This causes a rule like this to be added to rule set 3:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">R$* &lt; @ $+ .UUCP &gt; $*           $: $1 &lt; @ $(uudomain $2 $: $2.UUCP $) &gt; $3</PRE></BLOCKQUOTE></P><PCLASS="para">Here, the host in the pseudo-domain .UUCP is looked up in thedatabase <CODECLASS="literal">uudomain</CODE>. The <CODECLASS="literal">uucpdomain</CODE> feature also createsthe declaration for that database:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Kuudomain hash -o /etc/uudomain</PRE></BLOCKQUOTE></P><PCLASS="para">&#13;If you wish to use a different form of database or a different location forthe database file, you may do so by adding an argument to the featuredeclaration:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">FEATURE(`uucpdomain', `dbm -o /etc/mail/uudomain')</PRE></BLOCKQUOTE></P><PCLASS="para">Here, we tell <EMCLASS="emphasis">sendmail</EM> that we will be using the NDBM formof database instead of the original NEWDB form (see <ACLASS="xref"HREF="ch33_01.htm#SML2-CH-33-SECT-1"TITLE="Enable at Compile Time">Section 33.1, "Enable at Compile Time"</A>).We also relocated the file into the <EMCLASS="emphasis">/etc/mail</EM> directory.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-28">19.6.28 FEATURE(virtusertable)</A></H3><PCLASS="refpurpose">Support for virtual domains</P>(V8.8 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-15314"></A><ACLASS="indexterm"NAME="AUTOID-15316"></A>A <CODECLASS="literal">virtusertable</CODE> is a database that maps virtual (possibly nonexistent)domains into new addresses.Essentially, it gives you a database hook into the early part of rule set 0.Note that this only reroutes delivery. It does not change mail headers.</P><PCLASS="para">By way of example, consider one mapping in a source text file:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">info@stuff.for.sale.com       bobinfo@stuff.wanted.com         hans@remote.host@fictional.com                user@another.host</PRE></BLOCKQUOTE></P><PCLASS="para">The key portion (on the left) must be either a full address(user, host, and domain name), as in the first two lines,or an address with the user part missing, as in the last line.This source text file is converted into a database with the <EMCLASS="emphasis">makemap</EM>(1) program (see <ACLASS="xref"HREF="ch33_02.htm"TITLE="Create Files with makemap">Section 33.2</A>).</P><PCLASS="para">The first two lines illustrate a full address for the key. The first linewill be delivered to a local user (<EMCLASS="emphasis">bob</EM>) the second to a remote user(<EMCLASS="emphasis">hans@remote.host</EM>).The third line file shows how all mail to a virtual domain (<EMCLASS="emphasis">fictional.com</EM>)can be delivered to a single address, no matter what the user part is.</P><PCLASS="para">Note that <EMCLASS="emphasis">sendmail</EM> does a single lookup, so one line may notreference another. The following won't work:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">info@stuff.for.sale.com       forsale@fictional.com@fictional.com                user@another.host</PRE></BLOCKQUOTE></P><PCLASS="para">Here, mail to <EMCLASS="emphasis">info@stuff.for.sale.com</EM> will be delivered to <EMCLASS="emphasis">forsale@fictional.com</EM>,not to <EMCLASS="emphasis">user@another.host</EM>.</P><PCLASS="para">Also note that virtual domains in the key (such as<CODECLASS="literal">@fictional.com</CODE>) must be added to class <CODECLASS="literal">w</CODE>in order for them to be recognized as local.</P><PCLASS="para">You declare the <CODECLASS="literal">virtusertable</CODE> like this in your <EMCLASS="emphasis">mc</EM> file:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">FEATURE(`virtusertable')</PRE></BLOCKQUOTE></P><PCLASS="para">This causes the following database declarationto appear in the configuration file:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Kvirtusertable hash -o /etc/virtusertable</PRE></BLOCKQUOTE></P><PCLASS="para">&#13;If you wish to use a different form of database(such as <EMCLASS="emphasis">dbm</EM>) or a different location, the <CODECLASS="literal">virtusertable</CODE> feature accepts an argument:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">FEATURE(`virtusertable',`dbm -o /etc/mail/virtusertable')</PRE></BLOCKQUOTE></P><PCLASS="para">If the value (the right-hand side in <CODECLASS="literal">virtusertable</CODE>) is <CODECLASS="literal">error:</CODE>,the <CODECLASS="literal">#error</CODE> delivery agent is called. This allows error messagesto be put into the database, as, for example,</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">info@for.sale.com    error:nouser We no longer sell things here</PRE></BLOCKQUOTE></P><PCLASS="para">The text following the <CODECLASS="literal">error:</CODE> is passed to the <CODECLASS="literal">#error</CODE> delivery agentlike this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Rerror : $- $+       $#error $@ $1 $: $2</PRE></BLOCKQUOTE></P><PCLASS="para">Thus the first token following the <CODECLASS="literal">error:</CODE> is passed in the<CODECLASS="literal">$@</CODE> part. Note that you must use words here, not DSNvalues (such as <CODECLASS="literal">3.1.0</CODE>), because the latter would be wrongly broken up into five tokens.See <ACLASS="xref"HREF="ch30_05.htm#SML2-CH-30-SECT-5-2"TITLE="The error Delivery Agent">Section 30.5.2</A> for a full description of the <CODECLASS="literal">#error</CODE> delivery agent and for tables of useful words forthe <CODECLASS="literal">$@</CODE> part.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-15373"></A></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-29">19.6.29 HACK</A></H3><PCLASS="refpurpose">Temporary customizations</P>(V8.1 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-15382"></A><ACLASS="indexterm"NAME="AUTOID-15384"></A><ACLASS="indexterm"NAME="AUTOID-15386"></A><ACLASS="indexterm"NAME="AUTOID-15388"></A>Some things just can't be called features.  To make this clear,they go in the <EMCLASS="emphasis">_CF_DIR_/hack</EM> directory (see <ACLASS="xref"HREF="ch19_02.htm#SML2-CH-19-SECT-2-1"TITLE="Maintain local files with _CF_DIR_">Section 19.2.1, "Maintain local files with _CF_DIR_"</A>)and are referenced using the HACK macro. They tend to be site-dependent. </P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">HACK(cssubdomain)</PRE></BLOCKQUOTE></P><PCLASS="para">This illustrates use ofthe Berkeley-dependent <CODECLASS="literal">cssubdomain</CODE> hack (that makes<EMCLASS="emphasis">sendmail</EM> accept local names in either <EMCLASS="emphasis">Berkeley.EDU</EM> or <EMCLASS="emphasis">CS.Berkeley.EDU</EM>).</P><PCLASS="para">Another way to think of a hack is as a transient feature. Create anduse HACK as a temporary solution to a temporary problem. If a solutionbecomes permanent, move it to the FEATURE directory (see <ACLASS="xref"HREF="ch19_03.htm#SML2-CH-19-SECT-3-4"TITLE="FEATURE()">Section 19.3.4</A>) and referenceit there.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-30">19.6.30 LOCAL-CONFIG</A></H3><PCLASS="refpurpose">Add general information and rules</P>(V8.1 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-15410"></A>The LOCAL_CONFIG macro allows custom configuration lines to be insertedby using the <EMCLASS="emphasis">mc</EM> file. The inserted lines are carried literally into the output andappear in the resulting configuration file just before the rules.</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">LOCAL_CONFIGFE/usr/local/mail/visible.usersKhostmap hash /etc/hostmap.db</PRE></BLOCKQUOTE></P><PCLASS="para">&#13;In this example the class <CODECLASS="literal">$=E</CODE> has additional names readfrom the file <EMCLASS="emphasis">visible.users</EM>, and the <EMCLASS="emphasis">hostmap</EM> databaseis declared.</P><PCLASS="para">New rule sets can be inserted with LOCAL_CONFIG. For V8.7 and above we recommendusing symbolic names to avoid collision with rule set numbers usedby <EMCLASS="emphasis">sendmail</EM>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">LOCAL_CONFIGSfoo<ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> custom rules here</I></PRE></BLOCKQUOTE></P><PCLASS="para">See the discussion of diversions (see <ACLASS="xref"HREF="ch19_01.htm#SML2-CH-19-SECT-1-4"TITLE="m4 diversions">Section 19.1.4, "m4 diversions"</A>) to cause LOCAL_CONFIGlines to output in a predetermined order.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-31">19.6.31 LOCAL-RELAY</A></H3><PCLASS="refpurpose">Relay for unqualified user (deprecated)</P>(V8.1 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-15434"></A><ACLASS="indexterm"NAME="AUTOID-15437"></A><ACLASS="indexterm"NAME="AUTOID-15440"></A><ACLASS="indexterm"NAME="AUTOID-15442"></A>Unless you specify otherwise, any address that is a usernamewithout any <EMCLASS="emphasis">@host</EM> part is delivered using the<CODECLASS="literal">local</CODE> delivery agent. If you prefer to have all suchmail handled by a different machine, you may define that othermachine with the LOCAL_RELAY <EMCLASS="emphasis">m4</EM> macro.</P><PCLASS="para">Note that a relay is different from the knowledgeable hub definedwith MAIL_HUB. (See later in this section for an illustration of how MAIL_HUB and LOCAL_RELAYinteract.)</P><PCLASS="para">This macro is deprecated because it doesn't work well with some MUAs(for example, <EMCLASS="emphasis">mh</EM>(1)). This is because some MUAsput a host part on all addresses even if only the user part was specified.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-32">19.6.32 LOCAL-RULE-0</A></H3><PCLASS="refpurpose">Add rules to rule set 0</P>(V8.6 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-15459"></A><ACLASS="indexterm"NAME="AUTOID-15461"></A>In rule set 0, after the <CODECLASS="literal">local</CODE> delivery agent hasbeen selected and before the <CODECLASS="literal">uucp</CODE>, <CODECLASS="literal">smtp</CODE>, andthe like have been selected, you can insert custom deliveryagents of your own. To do this, use the LOCAL_RULE_0 macro:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">LOCAL_RULE_0# We service lady via an mx record.R$+ &lt; @ lady.Berkeley.EDU. &gt;         $#uucp $@ lady $: $1</PRE></BLOCKQUOTE></P><PCLASS="para">Here, we introduce a new rule to select a delivery agent. The host<EMCLASS="emphasis">lady</EM> is a UUCP host for which we accept mail via anMX record.</P><PCLASS="para">Note that LOCAL_RULE_0 fits into flow of rules throughrule set 0 like this:</P><BLOCKQUOTECLASS="blockquote"><PCLASS="para"><OLCLASS="orderedlist"><LICLASS="listitem"><PCLASS="para"><EMCLASS="emphasis">1.</EM> Basic canonicalization (list syntax, delete local host, etc.)</P></LI><LICLASS="listitem"><PCLASS="para"><EMCLASS="emphasis">2.</EM> LOCAL_RULE_0</P></LI><LICLASS="listitem"><PCLASS="para"><EMCLASS="emphasis">3.</EM> UUCP, BITNET_RELAY (see <ACLASS="xref"HREF="ch31_10.htm#SML2-CH-31-SECT-10-5"TITLE="">Section 31.10.5</A>), etc.</P></LI><LICLASS="listitem"><PCLASS="para"><EMCLASS="emphasis">4.</EM> LOCAL_NET_CONFIG (see <ACLASS="xref"HREF="ch19_06.htm#SML2-CH-19-SECT-6-37"TITLE="">Section 19.6.37</A>)</P></LI><LICLASS="listitem"><PCLASS="para"><EMCLASS="emphasis">5.</EM> SMART_HOST (see <ACLASS="xref"HREF="ch19_06.htm#SML2-CH-19-SECT-6-47"TITLE="">Section 19.6.47</A>)</P></LI><LICLASS="listitem"><PCLASS="para"><EMCLASS="emphasis">6.</EM> SMTP, local, etc. delivery agents</P></LI></OL></P></BLOCKQUOTE></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-33">19.6.33 LOCAL-RULE-1</A></H3><PCLASS="refpurpose">Add rules to rule set 1</P>(V8.6 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">See LOCAL-RULE-2.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-34">19.6.34 LOCAL-RULE-2</A></H3><PCLASS="refpurpose">Add rules to rule set 2</P>(V8.6 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-15512"></A><ACLASS="indexterm"NAME="AUTOID-15514"></A><ACLASS="indexterm"NAME="AUTOID-15517"></A>Rule sets 1 and 2 are normally empty and not included in the configurationfile created from your <EMCLASS="emphasis">mc</EM> file. Rule set 1 processesall sender addresses (see <ACLASS="xref"HREF="ch29_09.htm"TITLE="Rule Set 1">Section 29.9, "Rule Set 1"</A>), and rule set 2 processes allrecipient addresses (see <ACLASS="xref"HREF="ch29_08.htm"TITLE="Rule Set 2">Section 29.8, "Rule Set 2"</A>). These <EMCLASS="emphasis">m4</EM> macros are used just likeLOCAL_RULE_0, above but they introduce rules that would otherwisebe omitted, rather than adding rules to an existing rule set.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-35">19.6.35 LOCAL-RULE-3</A></H3><PCLASS="refpurpose">Add rules to rule set 3</P>(V8.6 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-15532"></A>All addresses are first rewritten by rule set 3 (see <ACLASS="xref"HREF="ch29_04.htm"TITLE="Rule Set 3">Section 29.4, "Rule Set 3"</A>).For complex configuration needs, you can define special rules andcause them to be added to rule set 3. New rules are addedto the end of rule set 3 by way of rule set 6. That is, eachfinal decision in rule set 3 (denoted by a <CODECLASS="literal">$@</CODE> in the RHS)calls rule set 96 (with <CODECLASS="literal">$&gt;96</CODE>) before returning.</P><PCLASS="para">The m4 macro LOCAL_RULE_3 is used to introduce new rules that can be used in canonicalizing the hostnames.Note that any modifications made here are reflected in the header.</P><PCLASS="para">One suggested use for LOCAL_RULE_3 is to convert old UUCP hostnamesinto domain addresses using the <EMCLASS="emphasis">m4</EM> UUCPSMTP macro.For example,</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">LOCAL_RULE_3UUCPSMTP(decvax,   decvax.dec.com)UUCPSMTP(research, research.att.com)</PRE></BLOCKQUOTE></P><PCLASS="para">This causes the following address transformations:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">decvax!user    <ICLASS="lineannotation">becomes <IMGSRC="../chars/rarr.gif"ALT="-&gt;"></I>     user@decvax.dec.comresearch!user  <ICLASS="lineannotation">becomes <IMGSRC="../chars/rarr.gif"ALT="-&gt;"></I>     user@research.att.com</PRE></BLOCKQUOTE></P><PCLASS="para">Another suggested use for LOCAL_RULE_3 is to introduce a newrule to look up hostnames in a locally customized database:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">LOCAL_RULE_3R$*&lt;@$+&gt;$*       $:$1&lt;@ $(hostmap $2 $) &gt;$3</PRE></BLOCKQUOTE></P><PCLASS="para">The declaration and definition of local database maps with the <CODECLASS="literal">K</CODE> configuration command (see <ACLASS="xref"HREF="ch33_03.htm"TITLE="The K Configuration Command">Section 33.3, "The K Configuration Command"</A>) shouldappear in the LOCAL_CONFIG section.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-36">19.6.36 LOCAL-RULESETS</A></H3><PCLASS="refpurpose">Group local rules with others</P>(V8.8 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-15562"></A>Prior to V8.8 <EMCLASS="emphasis">sendmail</EM>, you had to use the <CODECLASS="literal">divert9</CODE><EMCLASS="emphasis">m4</EM> directive to force your new rule set declarations tobe emitted alongside the normal <EMCLASS="emphasis">m4</EM>-generated rules sets.Beginning with V8.8, that bit of &quot;black magic&quot; has been removed.</P><PCLASS="para">The LOCAL_RULESETS <EMCLASS="emphasis">m4</EM> command causes all the rule setsand rules that follow it to be emitted into your configurationfile along with all the rules that are automatically generated.You use it like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">LOCAL_RULESETS<ICLASS="lineannotation">your new rule sets and rules here</I></PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-37">19.6.37 LOCAL-NET-CONFIG</A></H3><PCLASS="refpurpose">Add rules for SMART-HOST</P>(V8.6 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-15581"></A><ACLASS="indexterm"NAME="AUTOID-15583"></A><ACLASS="indexterm"NAME="AUTOID-15585"></A><ACLASS="indexterm"NAME="AUTOID-15588"></A>One possible setup for mail is to allow hosts on the local networkto deliver directly to each other but for all other mail tobe sent to a &quot;smart host&quot; that forwards it offsite.Commonly, such arrangements are used by sites with inhousenetworks that have access to the outside world only through a UUCP link.For such sites you can use LOCAL_NET_CONFIG:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">define(`SMART_HOST', `uucp-new:uunet')LOCAL_NET_CONFIGR$* &lt; @ $* .$m. &gt; $*     $#smtp $@ $2.$m $: $1 &lt; @ $2.$m &gt; $3</PRE></BLOCKQUOTE></P><PCLASS="para">Here, SMART_HOSTis first defined as <CODECLASS="literal">uucp-new:uunet</CODE> (send tothe host <EMCLASS="emphasis">uunet</EM> with the <CODECLASS="literal">uucp-new</CODE> delivery agent).The LOCAL_NET_CONFIG then introduces a rulethat causes all names that end in your domain name (<CODECLASS="literal">$m</CODE>) to be delivered via the <CODECLASS="literal">smtp</CODE> delivery agent.Any other addresses fall through to be handled by the SMART_HOSTrules.</P><PCLASS="para">SMART_HOST can be a network-connected gateway too. Just use <CODECLASS="literal">smtp</CODE>in place of <CODECLASS="literal">uucp-new</CODE> in the SMART_HOST definition, and the nameof the gateway.</P><PCLASS="para">Note that LOCAL_NET_CONFIG fits into the flow of rules through rule set 0 like this:</P><BLOCKQUOTECLASS="blockquote"><PCLASS="para"><OLCLASS="orderedlist"><LICLASS="listitem"><PCLASS="para"><EMCLASS="emphasis">1.</EM> Basic canonicalization (list syntax, delete local host, etc.)</P></LI><LICLASS="listitem"><PCLASS="para"><EMCLASS="emphasis">2.</EM> LOCAL_RULE_0 (see <ACLASS="xref"HREF="ch19_06.htm#SML2-CH-19-SECT-6-32"TITLE="">Section 19.6.32</A>)</P></LI><LICLASS="listitem"><PCLASS="para"><EMCLASS="emphasis">3.</EM> FEATURE(mailertable) (see <ACLASS="xref"HREF="ch19_06.htm#SML2-CH-19-SECT-6-14"TITLE="">Section 19.6.14</A>)</P></LI><LICLASS="listitem"><PCLASS="para"><EMCLASS="emphasis">4.</EM> UUCP, BITNET_RELAY (see <ACLASS="xref"HREF="ch31_10.htm#SML2-CH-31-SECT-10-5"TITLE="">Section 31.10.5</A>), etc.</P></LI><LICLASS="listitem"><PCLASS="para"><EMCLASS="emphasis">5.</EM> LOCAL_NET_CONFIG (see <ACLASS="xref"HREF="ch19_06.htm#SML2-CH-19-SECT-6-37"TITLE="">Section 19.6.37</A>)</P></LI><LICLASS="listitem"><PCLASS="para"><EMCLASS="emphasis">6.</EM> SMART_HOST (see <ACLASS="xref"HREF="ch19_06.htm#SML2-CH-19-SECT-6-47"TITLE="">Section 19.6.47</A>)</P></LI><LICLASS="listitem"><PCLASS="para"><EMCLASS="emphasis">7.</EM> SMTP, local, etc. delivery agents</P></LI></OL></P></BLOCKQUOTE></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-38">19.6.38 LOCAL-USER</A></H3><PCLASS="refpurpose">Users that must be delivered locally</P>(V8.1 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-15640"></A><ACLASS="indexterm"NAME="AUTOID-15642"></A><ACLASS="indexterm"NAME="AUTOID-15645"></A><ACLASS="indexterm"NAME="AUTOID-15649"></A><ACLASS="indexterm"NAME="AUTOID-15652"></A>Some unqualified (without an <EMCLASS="emphasis">@host</EM> part) usernames need to be delivered on the local machine even if LOCAL_RELAY is defined. The user <EMCLASS="emphasis">root</EM> is one suchexample. By remaining local, aliasing is allowed to take place.</P><PCLASS="para">The LOCAL_USER <EMCLASS="emphasis">m4</EM> macro is used to add additional usernamesto the list of local users. Note that <EMCLASS="emphasis">root</EM> isalways a member of that list.</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">LOCAL_USER(<CODECLASS="replaceable"><I>operator</I></CODE>)</PRE></BLOCKQUOTE></P><PCLASS="para">This causes the name <CODECLASS="replaceable"><I>operator</I></CODE> to be appended to the listof local users.That list is stored in the class <CODECLASS="literal">$=L</CODE>.The disposition of local usernames that include the name ofthe local host is determined bythe <CODECLASS="literal">stickyhost</CODE> feature.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-39">19.6.39 LUSER-RELAY</A></H3><PCLASS="refpurpose">Relay for local looking usernames</P>(V8.7 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-15676"></A>The host that handles usernames that appear to be local even thoughthey are not.See <ACLASS="xref"HREF="ch31_10.htm#SML2-CH-31-SECT-10-23"TITLE="">Section 31.10.23</A> for a discussion of this relay.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-40">19.6.40 MAILER-DEFINITIONS</A></H3><PCLASS="refpurpose">Define custom delivery agents</P>(V8.8 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-15687"></A><ACLASS="indexterm"NAME="AUTOID-15689"></A>Prior to V8.8 <EMCLASS="emphasis">sendmail</EM> you had to use a <CODECLASS="literal">divert(7)</CODE> statementto force your new delivery agent definitions to be grouped withall the other delivery agent definitions. Beginning with V8.8,this bit of &quot;black magic&quot; has been removed.</P><PCLASS="para">To force your new delivery agent definitions to be grouped withthe others delivery agent definitions, use the MAILER_DEFINITIONS<EMCLASS="emphasis">m4</EM> command:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">MAILER_DEFINITIONS<ICLASS="lineannotation">your new delivery agent definitions here</I></PRE></BLOCKQUOTE></P><PCLASS="para">See <ACLASS="xref"HREF="ch30_03.htm#SML2-CH-30-SECT-3-1"TITLE="Tuning Without an Appropriate Keyword">Section 30.3.1, "Tuning Without an Appropriate Keyword"</A> for an example ofthis <EMCLASS="emphasis">m4</EM> command.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-41">19.6.41 MAIL-HUB</A></H3><PCLASS="refpurpose">All local delivery on a local server</P>(V8.1 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-15709"></A><ACLASS="indexterm"NAME="AUTOID-15711"></A><ACLASS="indexterm"NAME="AUTOID-15714"></A>One scheme for handling mail is to maintain one mail spool directorycentrally and to mount that directory remotely on all clients.To avoid file locking problems, delivery to such a spool shouldbe performed only on the central server. The MAIL_HUB macroallows you to specify that all local mail be forwardedto the central server for delivery. The point is to let unqualifiednames be forwarded through a machine with a large <EMCLASS="emphasis">aliases</EM> file.</P><PCLASS="para">If you define both LOCAL_RELAYand MAIL_HUB, unqualified names and names in class <CODECLASS="literal">L</CODE> are sent tothe LOCAL_RELAY and other local names are sent to MAIL_HUB.To illustrate,consider the result of various combinations for the user <EMCLASS="emphasis">you</EM>on the machine <EMCLASS="emphasis">here.our.site</EM>.</P><PCLASS="para">If LOCAL_RELAY is defined as <EMCLASS="emphasis">relay.our.site</EM> and MAIL_HUB isnot defined, mail addressed to <EMCLASS="emphasis">you</EM> are forwardedto <EMCLASS="emphasis">relay.our.site</EM>, but mail addressed to <EMCLASS="emphasis">you@here.our.site</EM>is delivered locally.</P><PCLASS="para">If MAIL_HUB is defined as <EMCLASS="emphasis">hub.our.site</EM> and LOCAL_RELAY isnot defined, mail addressed to <EMCLASS="emphasis">you</EM>  and mail addressed to <EMCLASS="emphasis">you@here.our.site</EM> is forwarded to <EMCLASS="emphasis">hub.our.site</EM>for delivery.</P><PCLASS="para">If both LOCAL_RELAY and MAIL_HUB are defined as above, mailaddressed to <EMCLASS="emphasis">you</EM>is sent to <EMCLASS="emphasis">relay.our.site</EM> for delivery, and mail addressed to<EMCLASS="emphasis">you@here.our.site</EM> is forwarded to <EMCLASS="emphasis">hub.our.site</EM>.</P><PCLASS="para">If you want all outgoing mail to go to a central machine, use SMART_HOST too.</P><PCLASS="para">Note that LOCAL_RELAY and MAIL_HUB act identically (exceptthat MAIL_HUB takes precedence) unless the <CODECLASS="literal">stickyhost</CODE> feature is used.Also note that the <CODECLASS="literal">nullclient</CODE> feature can be used if you want all mail to be forwarded to a central machine.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-42">19.6.42 MASQUERADE-AS</A></H3><PCLASS="refpurpose">Masquerade as the server</P>(V8.1 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-15749"></A><ACLASS="indexterm"NAME="AUTOID-15751"></A>At sites with one central mail server (see MAIL_HUB, it can be advantageous for mail from the clients to appear as though it isfrom the hub. This simplifies mail administration in thatall users have the same machine address no matter whichworkstations they use. You can cause a workstation to masqueradeas the server (or as another host) by using the MASQUERADE_AS<EMCLASS="emphasis">m4</EM> macro:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">MASQUERADE_AS(<EMCLASS="emphasis">server)</EM></PRE></BLOCKQUOTE></P><PCLASS="para">&#13;This causes outgoing mail to be labeled as coming from the<EMCLASS="emphasis">server</EM> (rather than from the value in <CODECLASS="literal">$j</CODE> see <ACLASS="xref"HREF="ch31_10.htm#SML2-CH-31-SECT-10-20"TITLE="">Section 31.10.20</A>).The new label is in all but the <CODECLASS="literal">Received:</CODE> (see <ACLASS="xref"HREF="ch35_10.htm#SML2-CH-35-SECT-10-25"TITLE="">Section 35.10.25, Received:</A>)and <CODECLASS="literal">Message-ID:</CODE> (see <ACLASS="xref"HREF="ch35_10.htm#SML2-CH-35-SECT-10-19"TITLE="">Section 35.10.19, Message-ID:</A>) headers.</P><PCLASS="para">Some users (such as <EMCLASS="emphasis">root</EM>) should never be masqueradedbecause one always needs to know their machine of origin.Such users are declared by using the EXPOSED_USER <EMCLASS="emphasis">m4</EM> macro.Note that <EMCLASS="emphasis">root</EM> is always exposed.</P><PCLASS="para">If you wish to have recipient addresses also masqueraded,cautiously use the <EMCLASS="emphasis">allmasquerade</EM> feature.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-43">19.6.43 MASQUERADE-DOMAIN</A></H3><PCLASS="refpurpose">Masquerade other domains</P>(V8.6 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-15779"></A><ACLASS="indexterm"NAME="AUTOID-15781"></A>Ordinarily, MASQUERADE_AS enables only hosts in the localdomain, to be transformed into the masquerading host.If you wish to masquerade a domain other than your local one, youcan use the MASQUERADE_DOMAIN macro:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">MASQUERADE_DOMAIN(`<CODECLASS="replaceable"><I>other.domain</I></CODE>')</PRE></BLOCKQUOTE></P><PCLASS="para">Essentially, all that MASQUERADE_DOMAIN does is to assign itsargument to the class <CODECLASS="literal">$=M</CODE>, so you can list multiple domainsin a single MASQUERADE_DOMAIN statement:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">MASQUERADE_DOMAIN(`<CODECLASS="replaceable"><I>domain1 domain2 domain3</I></CODE>')CM domain1 domain2 domain3                                 <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> the same</I></PRE></BLOCKQUOTE></P><PCLASS="para">Note that MASQUERADE_DOMAIN masquerades only the domain and<EMCLASS="emphasis">not</EM> any hosts under that domain. If you wish to masqueradeall hosts under a domain (including the domain itself), seethe <CODECLASS="literal">masquerade_entire_domain</CODE> feature. </P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-44">19.6.44 MASQUERADE-DOMAIN-FILE</A></H3><PCLASS="refpurpose">Masquerade other domains</P>(V8.6 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-15804"></A><ACLASS="indexterm"NAME="AUTOID-15806"></A>In masquerading other domains, as with MASQUERADE_DOMAIN above,it may prove advantageous to store the list of masqueraded domainsin an external file. The MASQUERADE_DOMAIN_FILE macro allows you to dojust that:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">MASQUERADE_DOMAIN_FILE(`/etc/mail/domains')</PRE></BLOCKQUOTE></P><PCLASS="para">Essentially, all that MASQUERADE_DOMAIN_FILE does is toassign its argument to the class <CODECLASS="literal">$=M</CODE> via an <CODECLASS="literal">F</CODE>configuration command:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">MASQUERADE_DOMAIN_FILE(`-o /etc/mail/domains')   FM -o /etc/mail/domains                               <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> the same</I></PRE></BLOCKQUOTE></P><PCLASS="para">Here, we added a <CODECLASS="literal">-o</CODE> to make the existence of the file optional.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-45">19.6.45 SITE</A></H3><PCLASS="refpurpose">Declare sites for SITECONFIG (obsolete)</P>(V8.1 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-15827"></A><ACLASS="indexterm"NAME="AUTOID-15829"></A>UUCP connections are declared inside the SITECONFIG filewith the SITE macro. That macro just takes a list of oneor more UUCP hostnames:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">SITE(lady)SITE(sonya grimble)</PRE></BLOCKQUOTE></P><PCLASS="para">Each listed host is added to the class that was defined asthe third argument to the SITECONFIG declaration. </P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-46">19.6.46 SITECONFIG</A></H3><PCLASS="refpurpose">Local UUCP connections (obsolete)</P>(V8.1 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-15843"></A>The SITECONFIG <EMCLASS="emphasis">m4</EM> macro (now obsolete but retainedfor backward compatibility) is useful for maintaining lists of UUCPconnections. There are two types of connections: those connectedto the local host and those connected to another host.The first type is declared with SITECONFIG like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">SITECONFIG(`<CODECLASS="replaceable"><I>file</I></CODE>',`<CODECLASS="replaceable"><I>host</I></CODE>',`<CODECLASS="replaceable"><I>class</I></CODE>')</PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>file</I></CODE> is the name of a file (without the <EMCLASS="emphasis">.m4</EM>suffix) that is in the directory <EMCLASS="emphasis">_CF_DIR_/cf/siteconfig</EM>.That file contains a list of SITE declarations (described soon).The <EMCLASS="emphasis">host</EM> is the UUCP node name of the local host.The <EMCLASS="emphasis">class</EM> is the name (one letter) of a class thatholds the list of UUCP connections. For example,</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">SITECONFIG(`uucp.arpa',`arpa',`U')</PRE></BLOCKQUOTE></P><PCLASS="para">Here, the file <EMCLASS="emphasis">_CF_DIR_/cf/siteconfig/uucp.arpa.m4</EM> containsa list of UUCP hosts directly connected to the machine <EMCLASS="emphasis">arpa</EM>.This declaration would be used only in the machine <EMCLASS="emphasis">arpa</EM>'s <EMCLASS="emphasis">mc</EM> file.The list of UUCP hosts is added to the class macro <CODECLASS="literal">$=U</CODE>.The letters available for local connections are <CODECLASS="literal">U</CODE> (for <CODECLASS="literal">uucp-old</CODE>),<CODECLASS="literal">Y</CODE> (for <CODECLASS="literal">uucp-new</CODE>), and <CODECLASS="literal">Z</CODE> (for <CODECLASS="literal">uucp-uudom</CODE>).</P><PCLASS="para">A second form of the SITECONFIG <EMCLASS="emphasis">m4</EM> macro is the one used byhosts other than the one with the direct UUCP connections.It is just like the above one but with the full canonicalname of the <EMCLASS="emphasis">host</EM>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">SITECONFIG(`uucp.arpa',`arpa.Berkeley.EDU',`W')</PRE></BLOCKQUOTE></P><PCLASS="para">This also reads the file <EMCLASS="emphasis">uucp.arpa.m4</EM> but insteadof causing UUCP connections to be made locally, it forwardsthem to the host <EMCLASS="emphasis">arpa.Berkeley.EDU</EM>.</P><PCLASS="para">The hostname that is the second argument is assigned to the<CODECLASS="literal">$W</CODE> macro.The class <CODECLASS="literal">$=W</CODE> is set aside to hold lists of hoststhat appear locallyconnected. This class is also used with the SITE macro.The letters that are available for remote sites are <CODECLASS="literal">V</CODE>, <CODECLASS="literal">W</CODE>, and <CODECLASS="literal">X</CODE>.</P><PCLASS="para">If nothing is specified, the class becomes <CODECLASS="literal">Y</CODE>. If class<CODECLASS="literal">U</CODE> is specified in the third parameter, the second parameteris assumed to be the UUCP name of the local site, rather thanthe name of a remote site. In this latter case, the specified localname has a .UUCP appended, and the result is added to class<CODECLASS="literal">$=w</CODE>.</P><PCLASS="para">Note that SITECONFIG won't work if you disable UUCPwith  the <EMCLASS="emphasis">nouucp</EM> feature.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-47">19.6.47 SMART-HOST</A></H3><PCLASS="refpurpose">The ultimate relay</P>(V8.1 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-15899"></A><ACLASS="indexterm"NAME="AUTOID-15901"></A><ACLASS="indexterm"NAME="AUTOID-15904"></A><ACLASS="indexterm"NAME="AUTOID-15906"></A>Some sites can deliver local mail to the local network butcannot look up hosts on the Internet with DNS. Usually, suchsites are connected to the outside world with UUCP. To ensuredelivery of all mail, such sites need to forward all nonlocalmail over the UUCP link to a <EMCLASS="emphasis">smart</EM> (or well-connected) host.</P><PCLASS="para">You can enable this behavior by defining SMART_HOST:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">define(`SMART_HOST\', uucp-dom:supporthost)</PRE></BLOCKQUOTE></P><PCLASS="para">Here, Internet mail will be forwarded to the host <EMCLASS="emphasis">supporthost</EM>using the <CODECLASS="literal">uucp-dom</CODE> delivery agent. For information aboutother ways to use SMART_HOST, see the file <EMCLASS="emphasis">cf/README</EM>.Note that the value in SMART_HOST is assigned to<CODECLASS="literal">$S</CODE> (see <ACLASS="xref"HREF="ch31_10.htm#SML2-CH-31-SECT-10-34"TITLE="">Section 31.10.34, $S</A>) for later use in rules.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-48">19.6.48 UUCP-RELAY</A></H3><PCLASS="refpurpose">The UUCP relay</P>(V8.1 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-15927"></A><ACLASS="indexterm"NAME="AUTOID-15929"></A>If your site handles UUCP traffic, it can be in one of twoforms. Either a given host has direct UUCP connections or itdoes not. If it does not, then you may wish to have all UUCPmail forwarded to a host that can handle UUCP. This is doneby defining a UUCP_RELAY, which is done just as you would defineany other relay (as described in <ACLASS="xref"HREF="ch19_04.htm#SML2-CH-19-SECT-4-5"TITLE="Relays">Section 19.4.5</A>).</P><PCLASS="para">If your machine or site does not support UUCP, consider disablingall UUCP with the <CODECLASS="literal">nouucp</CODE> feature.</P><PCLASS="para">If your machine has directly connected UUCP hosts, you might wishto use one of or more of the UUCP techniques. But before doingso, be sure to declare the <CODECLASS="literal">uucp</CODE> delivery agent(see <ACLASS="xref"HREF="ch19_03.htm#SML2-CH-19-SECT-3-2"TITLE="MAILER()">Section 19.3.2</A>).</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-49">19.6.49 UUCPSMTP</A></H3><PCLASS="refpurpose">Individual UUCP to network translations</P>(V8.1 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-15945"></A>If your site has hosts that used to be UUCP sites butare now on the network, you may intercept and rewrite the oldaddress into the new network address. For example, mail to themachine <EMCLASS="emphasis">wash</EM> used to be addressed as <EMCLASS="emphasis">wash!user</EM>.Now, however, <EMCLASS="emphasis">wash</EM> is on the network, and the mailshould be addressed as <EMCLASS="emphasis">user@wash.dc.gov</EM>.</P><PCLASS="para">The UUCPSMTP <EMCLASS="emphasis">m4</EM> macro provides the means to specify a UUCPto network translation for specific hosts. The above examplewould be declared like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">UUCPSMTP(`wash',`wash.dc.gov')</PRE></BLOCKQUOTE></P><PCLASS="para">The UUCPSMTP <EMCLASS="emphasis">m4</EM>macro should be used only under LOCAL_RULE_3.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-19-SECT-6-50">19.6.50 VERSIONID</A></H3><PCLASS="refpurpose">Version of the mc file</P>(V8.1 and above)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-15965"></A><ACLASS="indexterm"NAME="AUTOID-15967"></A><ACLASS="indexterm"NAME="AUTOID-15970"></A>The VERSIONID <EMCLASS="emphasis">m4</EM> macro is used to insert an identifier into each <EMCLASS="emphasis">.mc</EM>and <EMCLASS="emphasis">.m4</EM> file that becomes a part of yourfinal <EMCLASS="emphasis">.cf</EM> file. Each of the files that is supplied with <EMCLASS="emphasis">sendmail</EM>already has such an identifier. You should include a similar identifierin each of your <EMCLASS="emphasis">.mc</EM> files. .ds dollar $</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">VERSIONID(`<ICLASS="lineannotation">\*[dollar]Revision\*[dollar]</I>')</PRE></BLOCKQUOTE></P><PCLASS="para">Here, the VERSIONID macro is being used to insert an RCS-style revisionnumber. The <EMCLASS="emphasis">\*[dollar]Revision\*[dollar]</EM> becomes an actual version numberwhen the file is checked in with <EMCLASS="emphasis">ci</EM>(1). Arbitrary textmay appear between the single quotes. You may use RCS, SCCS,or any other kind of revision identification system. The textmay not contain a newline because the text appears inthe <EMCLASS="emphasis">.cf</EM> file as a comment:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">#####  <EMCLASS="emphasis">\*[dollar]Revision: 1.5\*[dollar] #####</EM></PRE></BLOCKQUOTE></P><PCLASS="para">Use of VERSIONID and revision control in general is recommended.<ACLASS="indexterm"NAME="AUTOID-15989"></A><ACLASS="indexterm"NAME="AUTOID-15990"></A><ACLASS="indexterm"NAME="AUTOID-15991"></A></P></DIV></BLOCKQUOTE></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch19_05.htm"TITLE="19.5 Pitfalls"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 19.5 Pitfalls"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="sendmail"><IMGSRC="../gifs/txthome.gif"ALT="sendmail"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="CHAPTER"HREF="ch20_01.htm"TITLE="20. The checkcompat() Cookbook"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 20. The checkcompat() Cookbook"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">19.5 Pitfalls</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">20. The checkcompat() Cookbook</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><PCLASS="nav"><FONTSIZE="-1">[ <AHREF="../index.htm"TITLE="The Networking CD Bookshelf">Library Home</A> | <AHREF="../dnsbind/index.htm"TITLE="DNS &amp; BIND">DNS &amp; BIND</A> | <AHREF="../tcpip/index.htm"TITLE="TCP/IP Network Administration">TCP/IP</A> | <AHREF="index.htm"TITLE="sendmail">sendmail</A> | <AHREF="../smdref/index.htm"TITLE="sendmail Desktop Reference">sendmail Reference</A> | <AHREF="../firewall/index.htm"TITLE="Building Internet Firewalls">Firewalls</A> | <AHREF="../puis/index.htm"TITLE="Practical UNIX &amp; Internet Security">Practical Security</A> ]</FONT></P></DIV></BODY></HTML>