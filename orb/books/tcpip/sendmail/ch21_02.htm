<HTML><HEAD><TITLE>[Chapter 21] 21.2 How sendmail Uses DNS</TITLE><METANAME="DC.title"CONTENT="sendmail"><METANAME="DC.creator"CONTENT="Bryan Costales &amp; Eric Allman"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1999-01-06T19:27:39Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-222-0"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch21_01.htm"TITLE="21. DNS and sendmail"><LINKREL="prev"HREF="ch21_01.htm"TITLE="21.1 Overview"><LINKREL="next"HREF="ch21_03.htm"TITLE="21.3 Set Up MX Records"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="sendmail"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,65"HREF="index.htm"ALT="sendmail"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/ssrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch21_01.htm"TITLE="21.1 Overview"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 21.1 Overview"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 21<BR>DNS and sendmail</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch21_03.htm"TITLE="21.3 Set Up MX Records"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 21.3 Set Up MX Records"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="SML2-CH-21-SECT-2">21.2 How sendmail Uses DNS</A></H2><PCLASS="para">The <EMCLASS="emphasis">sendmail</EM> program uses DNS in four different ways:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">When <EMCLASS="emphasis">sendmail</EM> first starts, it may use DNS to get thecanonical name for the local host. That name is then assignedto the <CODECLASS="literal">$j</CODE> macro (see <ACLASS="xref"HREF="ch31_10.htm#SML2-CH-31-SECT-10-20"TITLE="">Section 31.10.20, $j</A>).[8]If DNS returns additional names forthe local host, those names are assigned to the class <CODECLASS="literal">$=w</CODE>(see <ACLASS="xref"HREF="ch32_05.htm#SML2-CH-32-SECT-5-8"TITLE="">Section 32.5.8, $=w</A>).</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[8] Prior to V8 <EMCLASS="emphasis">sendmail</EM>, the canonical name was storedin the <CODECLASS="literal">$w</CODE> macro (see <ACLASS="xref"HREF="ch31_10.htm#SML2-CH-31-SECT-10-40"TITLE="">Section 31.10.40, $w</A>) and <EMCLASS="emphasis">sendmail</EM>initialized only the <CODECLASS="literal">$j</CODE> macro (see <ACLASS="xref"HREF="ch31_10.htm#SML2-CH-31-SECT-10-20"TITLE="">Section 31.10.20</A>).Beginning with V8 <EMCLASS="emphasis">sendmail</EM>, <EMCLASS="emphasis">sendmail</EM> initializes bothof those variables, among others (see <ACLASS="xref"HREF="ch31_01.htm#SML2-CH-31-SECT-1"TITLE="Preassigned Macros">Section 31.1, "Preassigned Macros"</A>).</P></BLOCKQUOTE></LI><LICLASS="listitem"><PCLASS="para">When another host connects to the local host to transfer mail, the local <EMCLASS="emphasis">sendmail</EM> looks up the other host with DNS to findthe other host's canonical name.</P></LI><LICLASS="listitem"><PCLASS="para">When delivering network SMTP mail, <EMCLASS="emphasis">sendmail</EM> uses DNSto find the address (or addresses) to which it shouldconnect.</P></LI><LICLASS="listitem"><PCLASS="para">When <EMCLASS="emphasis">sendmail</EM> expands <CODECLASS="literal">$[</CODE> and <CODECLASS="literal">$]</CODE> in the RHS of a rule,it looks up the hostname (or IP number) between them.</P></LI></UL><PCLASS="para">We discuss each of these uses individually later in this chapter.&#13;</P><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="SML2-CH-21-SECT-2-1">21.2.1 Determine the Local Canonical Name</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-17276"></A><ACLASS="indexterm"NAME="AUTOID-17279"></A><ACLASS="indexterm"NAME="AUTOID-17282"></A><ACLASS="indexterm"NAME="AUTOID-17284"></A>All versions of <EMCLASS="emphasis">sendmail</EM> use more or less the same logical processto obtain the canonical name of the local host. As illustrated in the sample program below, <EMCLASS="emphasis">sendmail</EM> first calls <EMCLASS="emphasis">gethostname</EM>(3) to obtain the local host's name.That name may either be a short nameor a fully qualified one depending on which comes first in the<EMCLASS="emphasis">/etc/hosts</EM> file. If the call to <EMCLASS="emphasis">gethostname</EM>(3) fails,the name of the local host is set to <EMCLASS="emphasis">localhost</EM>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">#include &lt;sys/types.h&gt;#include &lt;sys/socket.h&gt;#include &lt;sys/param.h&gt;#include &lt;netdb.h&gt;#include &lt;stdio.h&gt;main(){        char hostbuf[MAXHOSTNAMELEN];        struct hostent *hp;        /* Get the local hostname */        if (gethostname(hostbuf, sizeof(hostbuf)) &lt; 0)                strcpy(hostbuf, &quot;localhost&quot;);        printf(&quot;hostname = \&quot;%s\&quot;\n&quot;, hostbuf);        /* canonicalize it and get aliases */        if((hp = gethostbyname(hostbuf)) == NULL)                perror(&quot;gethostbyname&quot;), exit(2);        printf(&quot;canonical = \&quot;%s\&quot;\n&quot;, hp-&gt;h_name);        while (*hp-&gt;h_aliases != NULL)        {                printf(&quot;alias: \&quot;%s\&quot;\n&quot;, *hp-&gt;h_aliases);                ++hp-&gt;h_aliases;        }}</PRE></BLOCKQUOTE></P><PCLASS="para">The local hostname is then given to the <EMCLASS="emphasis">gethostbyname</EM>routine (see <ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-186"TITLE="">Section 37.5.186, -d61.10</A>) to obtain the canonical name for the localhost. That same routine also returns any aliases (othernames for the local host).</P><PCLASS="para">On some Sun and Ultrix machines that are set up to use NIS services, thecanonical name is the short name, and a fully qualifiedname that should have been the canonical nameappears as an alias. For such systems you must link withthe BIND library (<EMCLASS="emphasis">libresolv.a</EM>) when compiling this programor compiling <EMCLASS="emphasis">sendmail</EM>. That library gets its information fromDNS rather than from NIS.But note that V8.7 and above versions of <EMCLASS="emphasis">sendmail</EM> do the intelligent thing and use the canonical name that was found as the aliases if it exists.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-17303"></A>If a good BIND library is not available, or if it is not convenientto compile and install a new version of <EMCLASS="emphasis">sendmail</EM>,you can circumvent the short name assigned to <CODECLASS="literal">$j</CODE> by defining<CODECLASS="literal">$j</CODE> like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Dm<ICLASS="lineannotation">your domain here</I>Dj$w.$m</PRE></BLOCKQUOTE></P><PCLASS="para">&#13;The <EMCLASS="emphasis">canonical name</EM> is your site's hostname with a dot andyour domain name appended. These two lines cause<CODECLASS="literal">$j</CODE> to have your host's fully qualified (and canonical)name assigned to it.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-17315"></A>The canonical name found by <EMCLASS="emphasis">gethostbyname</EM>(3) is assigned as thevalue of the <CODECLASS="literal">$w</CODE> macro. The short name and any aliasesare added to the class <CODECLASS="literal">$=w</CODE>. </P><PCLASS="para">The result of all these lookups can be viewed by running <EMCLASS="emphasis">sendmail</EM>with a <CODECLASS="literal">-d0.4</CODE> debugging switch (see <ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-2"TITLE="">Section 37.5.2, -d0.4</A>).The actual DNS lookups can be watched with the <CODECLASS="literal">-d8.8</CODE> debuggingswitch (see <ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-35"TITLE="">Section 37.5.35, -d8.8</A>).&#13;</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="SML2-CH-21-SECT-2-2">21.2.2 Look Up a Remote Host's Name</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-17329"></A><ACLASS="indexterm"NAME="AUTOID-17331"></A><ACLASS="indexterm"NAME="AUTOID-17333"></A>When <EMCLASS="emphasis">sendmail</EM> begins to run as a daemon, it creates a socket,binds to that socket, and listens for incoming SMTP connections.When a remote host connects to the local host, <EMCLASS="emphasis">sendmail</EM> usesthe <EMCLASS="emphasis">accept</EM>(2) library routine to accept the connection.The <EMCLASS="emphasis">accept</EM>(2) routine provides the IPaddress of the remote machine to <EMCLASS="emphasis">sendmail</EM>.The <EMCLASS="emphasis">sendmail</EM> program thencalls <EMCLASS="emphasis">gethostbyaddr</EM>(2) to convert that IP address toa canonical (official) hostname.</P><PCLASS="para">The <EMCLASS="emphasis">sendmail</EM> program needs the canonical hostname for fourreasons:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">The remote hostname is compared to the local hostname to prevent<EMCLASS="emphasis">sendmail</EM> from connecting to itself.</P></LI><LICLASS="listitem"><PCLASS="para">The remote hostname claimed in the HELO SMTP line is comparedto the canonical name. If they differ, <EMCLASS="emphasis">sendmail</EM> complains.</P></LI><LICLASS="listitem"><PCLASS="para">The macro <CODECLASS="literal">$s</CODE> is assigned the canonical hostname asits value.</P></LI><LICLASS="listitem"><PCLASS="para">The canonical name is included in many log messages producedby the setting of the <CODECLASS="literal">LogLevel</CODE> (<CODECLASS="literal">L</CODE>) option (see <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-33"TITLE="">Section 34.8.33, LogLevel (L)</A>)and is available for inclusionin <CODECLASS="literal">Received:</CODE> header (see <ACLASS="xref"HREF="ch35_10.htm#SML2-CH-35-SECT-10-25"TITLE="">Section 35.10.25, Received:</A>) lines.</P></LI></UL><PCLASS="para">If the <CODECLASS="literal">Timeout.ident</CODE> (<CODECLASS="literal">r</CODE>) option(see <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-70-10"TITLE="Timeout.ident">Section 34.8.70.10, "Timeout.ident"</A>) is greater than zero,the local host also connects to the <EMCLASS="emphasis">identd</EM>(8) daemonat the sending host to discover who opened the connection. If available,that user and host information is assigned to the <CODECLASS="literal">$_</CODE> macro(see <ACLASS="xref"HREF="ch31_10.htm#SML2-CH-31-SECT-10-1"TITLE="">Section 31.10.1, $-</A>).&#13;</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="SML2-CH-21-SECT-2-3">21.2.3 Look Up Addresses for Delivery</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-17371"></A><ACLASS="indexterm"NAME="AUTOID-17374"></A>When <EMCLASS="emphasis">sendmail</EM> prepares to connect to a remote host for transferof mail, it first performs a series of checks that vary from version toversion. All versions accept an IP address surrounded with square bracketsas a literal address and use it as is.</P><PCLASS="para">Beginning with V8.1, <EMCLASS="emphasis">sendmail</EM>checks to see whether the host part of the address is surroundedwith square brackets. If so, it skips looking up MX records.(We'll elaborate on MX records soon.)</P><PCLASS="para">Beginning with V8.8, <EMCLASS="emphasis">sendmail</EM> first checks to seewhether the <CODECLASS="literal">F=0</CODE> flag (see <ACLASS="xref"HREF="ch30_08.htm#SML2-CH-30-SECT-8-1"TITLE="">Section 30.8.1, F=0</A>) is set for the selecteddelivery agent.If it is set, <EMCLASS="emphasis">sendmail</EM> skips looking up MX records.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-17386"></A><ACLASS="indexterm"NAME="AUTOID-17388"></A>If <EMCLASS="emphasis">sendmail</EM> is allowed to look up MX records,it calls the <EMCLASS="emphasis">res_search</EM>(3) BIND library routine[9]to find all the MX records for the host.If it finds any MX records, it sorts them in order of cost, selectingthe least cost first.If V8 <EMCLASS="emphasis">sendmail</EM> finds two costs that are the same,it randomizes the selection between the two when sorting.[10]After all MX records are found, or ifno MX records were found, <EMCLASS="emphasis">sendmail</EM> adds the hostspecified by the <CODECLASS="literal">FallbackMXhost</CODE> (<CODECLASS="literal">V</CODE>) option (see <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-25"TITLE="">Section 34.8.25, FallbackMXhost (V)</A>),if there was one, to that list.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[9] If the <CODECLASS="literal">ServiceSwitchFile</CODE> option (see <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-61"TITLE="">Section 34.8.61, ServiceSwitchFile</A>)lists a file that defines hosts asbeing looked up with NIS, all DNS lookups are skipped.<ACLASS="indexterm"NAME="AUTOID-17397"></A></P><PCLASS="para">[10] Note that this is broken in many older versions of <EMCLASS="emphasis">sendmail</EM>.Also note that when the MX record points to the local host,all MX records with a cost greater than the local host aretossed. (See <ACLASS="xref"HREF="ch31_10.htm#SML2-CH-31-SECT-10-40"TITLE="">Section 31.10.40</A> for a description of this process.)</P></BLOCKQUOTE><PCLASS="para">The <EMCLASS="emphasis">sendmail</EM> program then tries to deliver the message to eachhost in the list of MX hosts,one at a time, until one of them succeeds or until they all fail.Beginning with V8.8 <EMCLASS="emphasis">sendmail</EM>, any host in the list that returns a<CODECLASS="literal">5</CODE><CODECLASS="replaceable"><I>xy</I></CODE> SMTP code (permanent failure) causes all subsequentMX hosts to be ignored (but temporary and connect failurescontinue to the next MX host as usual).</P><PCLASS="para">If no MX records are found, <EMCLASS="emphasis">sendmail</EM> tries to deliverthe message to the single original host.If all else fails, <EMCLASS="emphasis">sendmail</EM> attempts to deliver to the hostlisted with the <CODECLASS="literal">FallbackMXhost</CODE> (<CODECLASS="literal">V</CODE>) option.<ACLASS="indexterm"NAME="AUTOID-17418"></A></P><PCLASS="para">Whether <EMCLASS="emphasis">sendmail</EM> tries to connect to the original hostor to a list of MX hosts, it calls <EMCLASS="emphasis">gethostbyname</EM>(2) toget the network address for each. It then opens a network connectionto that address and attempts to send SMTP mail.&#13;</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="SML2-CH-21-SECT-2-4">21.2.4 The $[ and $] Operators</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-17426"></A><ACLASS="indexterm"NAME="AUTOID-17429"></A>The <CODECLASS="literal">$[</CODE> and <CODECLASS="literal">$]</CODE> operators (see <ACLASS="xref"HREF="ch28_06.htm#SML2-CH-28-SECT-6-6"TITLE="Canonicalize Hostname: $[ and $]">Section 28.6.6, "Canonicalize Hostname: $[ and $]"</A>)are used to canonicalizea hostname.Here is a simplified description of the process.</P><PCLASS="para">Each lookup is actually composed of many lookups that occur in the formof a loop within a loop.In the outermost loop, the following logic is used:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">If the address has at least one dot somewhere in it, <EMCLASS="emphasis">sendmail</EM>looks up that address unmodified first.</P></LI><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-17442"></A><ACLASS="indexterm"NAME="AUTOID-17444"></A>If the unmodified address is not found and the RES_DNSRCHbit is set (see the <CODECLASS="literal">ResolverOptions</CODE> (<CODECLASS="literal">I</CODE>) option, <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-55"TITLE="">Section 34.8.55</A>),<EMCLASS="emphasis">sendmail</EM> looks up variations on the domain partof the address. The default domain is tried first (for a hostin the <EMCLASS="emphasis">sub</EM> subdomain at <EMCLASS="emphasis">dc.gov</EM>, that would be <EMCLASS="emphasis">sub.dc.gov</EM>,thus looking up <EMCLASS="emphasis">host.sub.dc.gov</EM>).If that fails, BIND 4.8 then throws away the lowest part ofthe domain and tries again (looks up <EMCLASS="emphasis">host.dc.gov</EM>).BIND 4.9 uses the <CODECLASS="literal">search</CODE> attribute, if given,and tries that list of possible domains.</P></LI><LICLASS="listitem"><PCLASS="para">If the address has no dots and the RES_DEFNAMES bit is set(see the <CODECLASS="literal">ResolverOptions</CODE> (<CODECLASS="literal">I</CODE>) option, <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-55"TITLE="">Section 34.8.55</A>),<EMCLASS="emphasis">sendmail</EM> tries the single default domain (looks up<EMCLASS="emphasis">host.sub.dc.gov</EM>).  This is for compatibilitywith older versions of DNS.</P></LI></UL><PCLASS="para">Each lookup described above is performed by using the following steps:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">Try the hostname with a T_ANY query that requests all the cachedDNS records for that host.If it succeeds, A recordsand/or MX records may be among those returned.However, success is not guaranteed,because sometimes only NS (<BCLASS="emphasis.bold">n</B>ame <BCLASS="emphasis.bold">s</B>erver) records are returned.In that instance the following steps are also taken.</P></LI><LICLASS="listitem"><PCLASS="para">Try the hostname with a T_A query that requests the Arecord for that host.</P></LI><LICLASS="listitem"><PCLASS="para">Try the hostname with a T_MX query that requests MX recordsfor the host.</P></LI></UL><PCLASS="para">Each query searches the data returned as follows:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">Search for a CNAME (alias) record.If one is found, replace the initial hostname (the alias) withthe canonical name returned and start over.</P></LI><LICLASS="listitem"><PCLASS="para">Search for an A record (the IP address).If one is found, the hostname that was just used to queryis considered the canonical address.</P></LI><LICLASS="listitem"><PCLASS="para">Search for an MX record.If one is found and a default domain has not been added, treat the MX record like an A record.  For example, if theinput hostname is <EMCLASS="emphasis">sub.dc.gov</EM> and anMX record is found the MX record is considered official.  If, on the other hand, the input hostname has no domainadded (is <EMCLASS="emphasis">sub</EM>)and the query happens to stumble across <EMCLASS="emphasis">sub.dc.gov</EM> asthe MX record, the following searches are also tried.</P></LI><LICLASS="listitem"><PCLASS="para">If an MX record is found and no MX record has been previouslyfound, the looked-up hostname is saved for future use.For example, if the query was for <EMCLASS="emphasis">sub.dc.gov</EM> and twoMX records were returned (<EMCLASS="emphasis">hostA.sub.dc.gov</EM> and<EMCLASS="emphasis">hostB.sub.dc.gov</EM>), <EMCLASS="emphasis">sub.dc.gov</EM> is saved for future use.</P></LI><LICLASS="listitem"><PCLASS="para">If no MX record is found, but one was found previously, the previous one is used.  This assumes that the search is normallyfrom most to least complex (<EMCLASS="emphasis">sub.sub.dc.gov</EM>, <EMCLASS="emphasis">sub.dc.gov</EM>, <EMCLASS="emphasis">dc.gov</EM>).</P></LI></UL><PCLASS="para">All this apparent complexity is necessary to deal with wildcard MX records(see <ACLASS="xref"HREF="ch21_03.htm#SML2-CH-21-SECT-3-4"TITLE="Wildcard MX Records">Section 21.3.4, "Wildcard MX Records"</A>) in a reasonable and successful way.&#13;</P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch21_01.htm"TITLE="21.1 Overview"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 21.1 Overview"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="sendmail"><IMGSRC="../gifs/txthome.gif"ALT="sendmail"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch21_03.htm"TITLE="21.3 Set Up MX Records"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 21.3 Set Up MX Records"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">21.1 Overview</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">21.3 Set Up MX Records</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><PCLASS="nav"><FONTSIZE="-1">[ <AHREF="../index.htm"TITLE="The Networking CD Bookshelf">Library Home</A> | <AHREF="../dnsbind/index.htm"TITLE="DNS &amp; BIND">DNS &amp; BIND</A> | <AHREF="../tcpip/index.htm"TITLE="TCP/IP Network Administration">TCP/IP</A> | <AHREF="index.htm"TITLE="sendmail">sendmail</A> | <AHREF="../smdref/index.htm"TITLE="sendmail Desktop Reference">sendmail Reference</A> | <AHREF="../firewall/index.htm"TITLE="Building Internet Firewalls">Firewalls</A> | <AHREF="../puis/index.htm"TITLE="Practical UNIX &amp; Internet Security">Practical Security</A> ]</FONT></P></DIV></BODY></HTML>