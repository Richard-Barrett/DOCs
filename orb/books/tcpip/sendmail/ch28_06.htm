<HTML><HEAD><TITLE>[Chapter 28] 28.6 The RHS</TITLE><METANAME="DC.title"CONTENT="sendmail"><METANAME="DC.creator"CONTENT="Bryan Costales &amp; Eric Allman"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1999-01-06T19:50:19Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-222-0"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch28_01.htm"TITLE="28. Rules"><LINKREL="prev"HREF="ch28_05.htm"TITLE="28.5 The LHS"><LINKREL="next"HREF="ch28_07.htm"TITLE="28.7 Pitfalls"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="sendmail"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,65"HREF="index.htm"ALT="sendmail"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/ssrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch28_05.htm"TITLE="28.5 The LHS"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 28.5 The LHS"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 28<BR>Rules</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch28_07.htm"TITLE="28.7 Pitfalls"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 28.7 Pitfalls"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="SML2-CH-28-SECT-6">28.6 The RHS</A></H2><PCLASS="para"><ACLASS="indexterm"NAME="SML2-CH-28-IX-RHS-RULE"></A>The purpose of the <SPANCLASS="acronym">RHS</SPAN> in a rule is to rewrite the workspace. Tomake this rewriting more versatile, <EMCLASS="emphasis">sendmail</EM> offers severalspecial <SPANCLASS="acronym">RHS</SPAN> operators. The complete list is shown in<ACLASS="xref"HREF="ch28_06.htm#SML2-CH-28-TAB-1"TITLE="RHS Operators">Table 28.2</A>.<ACLASS="indexterm"NAME="AUTOID-26640"></A></P><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="SML2-CH-28-TAB-1">Table 28.2: RHS Operators</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1"><SPANCLASS="acronym">RHS</SPAN></TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1"></TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Description or Use</TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">$</CODE><CODECLASS="replaceable"><I>digit</I></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch28_06.htm#SML2-CH-28-SECT-6-1"TITLE="Copy by Position: $digit">Section 28.6.1, "Copy by Position: $digit"</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Copy by position</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">$:</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch28_06.htm#SML2-CH-28-SECT-6-2"TITLE="Rewrite Once Prefix: $:">Section 28.6.2, "Rewrite Once Prefix: $:"</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Rewrite once (prefix)</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">$@</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch28_06.htm#SML2-CH-28-SECT-6-3"TITLE="Rewrite-and-Return Prefix: $@">Section 28.6.3, "Rewrite-and-Return Prefix: $@"</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Rewrite and return (prefix)</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">$&gt;</CODE><CODECLASS="replaceable"><I>set</I></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch28_06.htm#SML2-CH-28-SECT-6-4"TITLE="Rewrite Through Another Rule Set: $&gt;set">Section 28.6.4, "Rewrite Through Another Rule Set: $&gt;set"</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Rewrite through another rule set</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">$#</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch28_06.htm#SML2-CH-28-SECT-6-5"TITLE="Specify a Delivery Agent: $#">Section 28.6.5, "Specify a Delivery Agent: $#"</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Specify a delivery agent</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">$[ $]</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch28_06.htm#SML2-CH-28-SECT-6-6"TITLE="Canonicalize Hostname: $[ and $]">Section 28.6.6, "Canonicalize Hostname: $[ and $]"</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Canonicalize hostname</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">$( $)</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch33_04.htm"TITLE="Use Maps with $( and $) in Rules">Section 33.4, "Use Maps with $( and $) in Rules"</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Database lookup</TD></TR></TBODY></TABLE><PCLASS="para"></P><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="SML2-CH-28-SECT-6-1">28.6.1 Copy by Position: $digit</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="SML2-CH-28-IX-WILDCARD-OPERATORS-POSITIONAL-OPERATORS"></A><ACLASS="indexterm"NAME="SML2-CH-28-IX-POSITIONAL-OPERATORS"></A>The <CODECLASS="literal">$</CODE><CODECLASS="replaceable"><I>digit</I></CODE> operator in the <SPANCLASS="acronym">RHS</SPAN> is used to copy tokensfrom the <SPANCLASS="acronym">LHS</SPAN> into the workspace. The <CODECLASS="replaceable"><I>digit</I></CODE> refers topositions of <SPANCLASS="acronym">LHS</SPAN> wildcard operators in the <SPANCLASS="acronym">LHS</SPAN>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">R$+@$*    $2!$1 <IMGSRC="../chars/uarr.gif"ALT="-^">  <IMGSRC="../chars/uarr.gif"ALT="-^"> <ICLASS="lineannotation">$1</I> <ICLASS="lineannotation">$2</I></PRE></BLOCKQUOTE></P><PCLASS="para">Here, the <CODECLASS="literal">$1</CODE> in the <SPANCLASS="acronym">RHS</SPAN> indicates tokens matched by the firstwildcard operator in the <SPANCLASS="acronym">LHS</SPAN> (in this case the <CODECLASS="literal">$+</CODE>),and the <CODECLASS="literal">$2</CODE> in the <SPANCLASS="acronym">RHS</SPAN> indicates tokens matched bythe second wildcard operator in the <SPANCLASS="acronym">LHS</SPAN> (the <CODECLASS="literal">$*</CODE>).In this example, if the workspace contains <CODECLASS="literal">A@B.C</CODE>, itwill be rewritten by the <SPANCLASS="acronym">RHS</SPAN> as follows:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$* <ICLASS="lineannotation">matches</I>    B.C<ICLASS="lineannotation">    so</I> $2 <ICLASS="lineannotation">copies it to workspace</I>              !    <ICLASS="lineannotation">explicitly placed into workspace</I>$+ <ICLASS="lineannotation">matches</I>    A    <ICLASS="lineannotation">so</I> $1 <ICLASS="lineannotation">copies it to workspace</I></PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="literal">$</CODE><CODECLASS="replaceable"><I>digit</I></CODE> copies all the tokens matched by its correspondingwildcard operator.For the <CODECLASS="literal">$+</CODE> wildcard operator, only a single token (<CODECLASS="literal">A</CODE>)is matched and copied with <CODECLASS="literal">$1</CODE>.The <CODECLASS="literal">!</CODE> is copied as is.For the <CODECLASS="literal">$*</CODE> wildcard operator,three tokens are matched (<CODECLASS="literal">B.C</CODE>), so <CODECLASS="literal">$2</CODE> copies all three.Thus the above rule rewrites <CODECLASS="literal">A@B.C</CODE> into <CODECLASS="literal">B.C!A</CODE>.</P><PCLASS="para">Not all <SPANCLASS="acronym">LHS</SPAN> operators <EMCLASS="emphasis">need</EM> to be referenced with a <CODECLASS="literal">$</CODE><CODECLASS="replaceable"><I>digit</I></CODE>in the <SPANCLASS="acronym">RHS</SPAN>.Consider the following: </P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">R$*&lt;$*&gt;$*   &lt;$2&gt;</PRE></BLOCKQUOTE></P><PCLASS="para">Here, only the middle <SPANCLASS="acronym">LHS</SPAN> operator (the second one) is required torewrite the workspace. So only the <CODECLASS="literal">$2</CODE> is needed in the<SPANCLASS="acronym">RHS</SPAN> (<CODECLASS="literal">$1</CODE> and <CODECLASS="literal">$3</CODE> are not needed and are not presentin the <SPANCLASS="acronym">RHS</SPAN>).</P><PCLASS="para">Although macros appear to be operators in the <SPANCLASS="acronym">LHS</SPAN>, they arenot. Recall that macros are expanded when the configurationfile is read (see <ACLASS="xref"HREF="ch28_01.htm#SML2-CH-28-SECT-1-1"TITLE="Macros in Rules">Section 28.1.1, "Macros in Rules"</A>). As a consequence, although they appear as<CODECLASS="literal">$</CODE><CODECLASS="replaceable"><I>letter</I></CODE> in the configuration file, they are convertedto tokens when that configuration file is read. For example,</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">DAxxxR$A @ $*   $1</PRE></BLOCKQUOTE></P><PCLASS="para">Here, the macro <CODECLASS="literal">A</CODE> is defined to have the value <CODECLASS="literal">xxx</CODE>.To the unwary, the <CODECLASS="literal">$1</CODE> <EMCLASS="emphasis">appears</EM> to indicate the <CODECLASS="literal">$A</CODE>.But when the configuration file is read, the above rule is expandedinto</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Rxxx @ $*   $1</PRE></BLOCKQUOTE></P><PCLASS="para">Clearly, the <CODECLASS="literal">$1</CODE> refers to the <CODECLASS="literal">$*</CODE> (because <CODECLASS="literal">$</CODE><CODECLASS="replaceable"><I>digit</I></CODE>references only operators and <CODECLASS="literal">$A</CODE> is a macro, not an operator).The <EMCLASS="emphasis">sendmail</EM>program is unable to detect errors of this sort. If the <CODECLASS="literal">$1</CODE>were instead <CODECLASS="literal">$2</CODE> (in a mistaken attempt to reference the<CODECLASS="literal">$*</CODE>), <EMCLASS="emphasis">sendmail</EM> prints the following error and skipsthat rule:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">ruleset replacement <CODECLASS="replaceable"><I>num out of bounds</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">V8 <EMCLASS="emphasis">sendmail</EM> catches these errors when the configurationfile is read.Earlier versions caught this error only when mail was actuallysent.</P><PCLASS="para">The <CODECLASS="replaceable"><I>digit</I></CODE> of the <CODECLASS="literal">$</CODE><CODECLASS="replaceable"><I>digit</I></CODE> must be in the rangeone through nine. A <CODECLASS="literal">$0</CODE> is meaningless and causes<EMCLASS="emphasis">sendmail</EM> to print the above error message and to skip that rule.Extra digits are considered tokens,rather than extensions of the <CODECLASS="literal">$</CODE><CODECLASS="replaceable"><I>digit</I></CODE>. That is,<CODECLASS="literal">$11</CODE> is the <SPANCLASS="acronym">RHS</SPAN> operator <CODECLASS="literal">$1</CODE> and the token <CODECLASS="literal">1</CODE>,not a reference to the eleventh <SPANCLASS="acronym">LHS</SPAN> operator.<ACLASS="indexterm"NAME="AUTOID-26807"></A><ACLASS="indexterm"NAME="AUTOID-26808"></A></P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="SML2-CH-28-SECT-6-2">28.6.2 Rewrite Once Prefix: $:</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="SML2-CH-28-IX-PREFIXES-DOLLAR-PREFIXES-COLON"></A><ACLASS="indexterm"NAME="SML2-CH-28-IX-LOOPS-IN-RULE-SETS-RULE-SETS"></A>Ordinarily, the <SPANCLASS="acronym">RHS</SPAN> rewrites the workspace as long asthe workspace continues to match the <SPANCLASS="acronym">LHS</SPAN>. This looping behavior can beuseful. Consider the need to strip extra trailing dots offan address in the workspace:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">R$*..   $1.</PRE></BLOCKQUOTE></P><PCLASS="para">Here, the <CODECLASS="literal">$*</CODE> matches any address that has two or moretrailing dots. The <CODECLASS="literal">$1.</CODE> in the <SPANCLASS="acronym">RHS</SPAN> then strips oneof those two trailing dots when rewriting the workspace. Forexample,</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">xxx . . . . .     <ICLASS="lineannotation">becomes <IMGSRC="../chars/rarr.gif"ALT="-&gt;"></I> xxx . . . .xxx . . . .       <ICLASS="lineannotation">becomes <IMGSRC="../chars/rarr.gif"ALT="-&gt;"></I> xxx . . .  xxx . .           <ICLASS="lineannotation">becomes <IMGSRC="../chars/rarr.gif"ALT="-&gt;"></I> xxx . .    xxx . .           <ICLASS="lineannotation">becomes <IMGSRC="../chars/rarr.gif"ALT="-&gt;"></I> xxx .      xxx .             <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> match fails</I></PRE></BLOCKQUOTE></P><PCLASS="para">Although this looping behavior of rules can be handy, for mostrules it can be dangerous. Consider the following example:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">R$*	&lt;$1&gt;</PRE></BLOCKQUOTE></P><PCLASS="para">The intention of this rule is to cause whatever is in the workspaceto become surrounded with angle brackets. But after the workspace is rewritten, the <SPANCLASS="acronym">LHS</SPAN>again checks for a match; and since the <CODECLASS="literal">$*</CODE> matches anything,the match succeeds, the <SPANCLASS="acronym">RHS</SPAN> rewrites the workspace again,and again the <SPANCLASS="acronym">LHS</SPAN> checks for a match:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">xxx               <ICLASS="lineannotation">becomes <IMGSRC="../chars/rarr.gif"ALT="-&gt;"></I> &lt; xxx &gt;&lt; xxx &gt;           <ICLASS="lineannotation">becomes <IMGSRC="../chars/rarr.gif"ALT="-&gt;"></I> &lt; &lt; xxx &gt; &gt;&lt; &lt; xxx &gt; &gt;       <ICLASS="lineannotation">becomes <IMGSRC="../chars/rarr.gif"ALT="-&gt;"></I> &lt; &lt; &lt; xxx &gt; &gt; &gt;     <ICLASS="lineannotation"><IMGSRC="../chars/darr.gif"ALT="-v"></I>     <ICLASS="lineannotation">and so on, until ...</I>     <ICLASS="lineannotation"><IMGSRC="../chars/darr.gif"ALT="-v"></I><ICLASS="lineannotation">sendmail prints: </I>rewrite: expansion too long</PRE></BLOCKQUOTE></P><PCLASS="para">&#13;In this case, <EMCLASS="emphasis">sendmail</EM> catches the problem, because the workspacehas become too large. It prints the above error message and skips that and all further rules in the rule set.If you are running <EMCLASS="emphasis">sendmail</EM> in test mode, this fatal error would also be printed:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">== Ruleset 0 (0) status 65</PRE></BLOCKQUOTE></P><PCLASS="para">Unfortunately, not all such endless looping produces a visible errormessage. Consider the following example:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">R$*    $1</PRE></BLOCKQUOTE></P><PCLASS="para">Here is an <SPANCLASS="acronym">LHS</SPAN> that matches anything and an <SPANCLASS="acronym">RHS</SPAN> that rewrites theworkspace in such a way that the workspace never changes. For older versionsthis causes <EMCLASS="emphasis">sendmail</EM> to appear tohang (as it processes the same rule over and over and over).Newer versions of <EMCLASS="emphasis">sendmail</EM> will catch such endless loopingand print (<EMCLASS="emphasis">syslog</EM>) the following error:<ACLASS="indexterm"NAME="AUTOID-26864"></A></P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Infinite loop in ruleset <CODECLASS="replaceable"><I>ruleset_name, rule rule_number</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">In this instance the original workspace is returned.</P><PCLASS="para">It is not always desirable (or even possible) to write &quot;loop-proof&quot;rules. To prevent looping, <EMCLASS="emphasis">sendmail</EM> offers the <CODECLASS="literal">$:</CODE><SPANCLASS="acronym">RHS</SPAN> prefix. By starting the <SPANCLASS="acronym">RHS</SPAN> of a rule with the <CODECLASS="literal">$:</CODE>operator, you are telling <EMCLASS="emphasis">sendmail</EM> to rewrite the workspaceexactly once.</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">R$*   $: &lt;$1&gt;</PRE></BLOCKQUOTE></P><PCLASS="para">Again the rule causes the contents of the workspaceto be surrounded by a pair ofangle brackets. But here the <CODECLASS="literal">$:</CODE> prefix prevents the <SPANCLASS="acronym">LHS</SPAN> from checkingfor another match after the rewrite.</P><PCLASS="para">Note that the <CODECLASS="literal">$:</CODE> prefix must begin the <SPANCLASS="acronym">RHS</SPAN> tohave any effect. If it instead appears inside the <SPANCLASS="acronym">RHS</SPAN>, itsspecial meaning is lost:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">foo  <ICLASS="lineannotation">rewritten by</I>  $:$1   <ICLASS="lineannotation">becomes <IMGSRC="../chars/rarr.gif"ALT="-&gt;"></I>   foofoo  <ICLASS="lineannotation">rewritten by</I>  $1$:   <ICLASS="lineannotation">becomes <IMGSRC="../chars/rarr.gif"ALT="-&gt;"></I>   foo $:</PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-26893"></A><ACLASS="indexterm"NAME="AUTOID-26894"></A></P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="SML2-CH-28-SECT-6-3">28.6.3 Rewrite-and-Return Prefix: $@</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-26898"></A>The flow of rules is such that each and every rulein a series of rules (a rule set) is given a chance to match the workspace:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Rxxx   yyyRyyy   zzz</PRE></BLOCKQUOTE></P><PCLASS="para">The first rule matches <CODECLASS="literal">xxx</CODE> in the workspace andrewrites the workspace to contain <CODECLASS="literal">yyy</CODE>. The firstrule then tries to match the workspace again but, ofcourse, fails.The second rule then tries to match the workspace. Since the workspacecontains <CODECLASS="literal">yyy</CODE>, a match is found, and the <SPANCLASS="acronym">RHS</SPAN> rewrites the workspaceto be <CODECLASS="literal">zzz</CODE>.</P><PCLASS="para">There will often be times when one rule in a series performsthe appropriate rewrite and no subsequent rules need to becalled. In the above example, suppose <CODECLASS="literal">xxx</CODE> shouldonly become <CODECLASS="literal">yyy</CODE> and that the second ruleshould not be called. To solve problems like this,<EMCLASS="emphasis">sendmail</EM> offers the <CODECLASS="literal">$@</CODE> prefix for use in the <SPANCLASS="acronym">RHS</SPAN>.</P><PCLASS="para">The <CODECLASS="literal">$@</CODE> prefix tells <EMCLASS="emphasis">sendmail</EM> that the current ruleis the last one that should be used in the current rule set.If the <SPANCLASS="acronym">LHS</SPAN> of the currentrule matches, any rules that follow (in the current rule set) are ignored:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Rxxx   $@yyyRyyy   zzz</PRE></BLOCKQUOTE></P><PCLASS="para">If the workspace contains anything other than <CODECLASS="literal">xxx</CODE>, thefirst rule does not match, and the second rule is called.But if the workspace contains <CODECLASS="literal">xxx</CODE>, the first rulematches and rewrites the workspace. The <CODECLASS="literal">$@</CODE> prefixfor the <SPANCLASS="acronym">RHS</SPAN> of that rule prevents the second rule (and anysubsequent rules) from being called.</P><PCLASS="para">Note that the <CODECLASS="literal">$@</CODE> also prevents looping. The <CODECLASS="literal">$@</CODE>tells <EMCLASS="emphasis">sendmail</EM> to skip further rules <EMCLASS="emphasis">and</EM> torewrite only once. The difference between <CODECLASS="literal">$@</CODE> and <CODECLASS="literal">$:</CODE> isthat both rewrite only once, but <CODECLASS="literal">$@</CODE> <EMCLASS="emphasis">doesn't</EM>proceed to the next rule, whereas <CODECLASS="literal">$:</CODE> <EMCLASS="emphasis">does</EM>.</P><PCLASS="para">The <CODECLASS="literal">$@</CODE> operator must be used as a prefix because it has specialmeaning only when it begins the <SPANCLASS="acronym">RHS</SPAN> of a rule. If it appears anywhereelse inside the <SPANCLASS="acronym">RHS</SPAN> it loses its special meaning:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">foo  <ICLASS="lineannotation">rewritten by</I>  $@$1   <ICLASS="lineannotation">becomes <IMGSRC="../chars/rarr.gif"ALT="-&gt;"></I>   foofoo  <ICLASS="lineannotation">rewritten by</I>  $1$@   <ICLASS="lineannotation">becomes <IMGSRC="../chars/rarr.gif"ALT="-&gt;"></I>   foo $@</PRE></BLOCKQUOTE></P><PCLASS="para"></P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="SML2-CH-28-SECT-6-4">28.6.4 Rewrite Through Another Rule Set: $&gt;set</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="SML2-CH-28-IX-OPERATORS-DOLLAR-OPERATORS-ANGLE"></A><ACLASS="indexterm"NAME="SML2-CH-28-IX-RULES-REWRITING-USING-OTHER-RULE-SETS"></A><ACLASS="indexterm"NAME="SML2-CH-28-IX-SUBROUTINES-RULES-AS"></A>Rules are organized in sets that can be thought of assubroutines.Occasionally, a rule or series of rulescan be common to two or more rule sets. To make the configurationfile more compact and somewhat clearer, such common series ofrules can be made into separate subroutines.</P><PCLASS="para">The <SPANCLASS="acronym">RHS</SPAN> <CODECLASS="literal">$&gt;</CODE><CODECLASS="replaceable"><I>set</I></CODE> operator tells <EMCLASS="emphasis">sendmail</EM> to performadditional rewriting using a secondary set of rules.The <CODECLASS="replaceable"><I>set</I></CODE> is the rule-set name or number of that secondaryset. If <CODECLASS="replaceable"><I>set</I></CODE> is the name or number of a nonexistent rule set,the effect is the same as if the subroutine rules werenever called (the workspace is unchanged).</P><PCLASS="para">If the <CODECLASS="replaceable"><I>set</I></CODE> is numeric and is greater than the maximum number of allowablerule sets, <EMCLASS="emphasis">sendmail</EM> prints the following error and skips that rule:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">bad ruleset <CODECLASS="replaceable"><I>bad_number (maximum max)</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">&#13;If the <CODECLASS="replaceable"><I>set</I></CODE> is a name and the rule-set name is unknown, <EMCLASS="emphasis">sendmail</EM>prints the following error and skips that rule:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Unknown ruleset <CODECLASS="replaceable"><I>bad_name</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Neither of these errors is caught when the configuration file is read.They are caught only when mail is sent, because a rule set name maybe a macro:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$&gt; $&amp;{SET}</PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-26982"></A>The <CODECLASS="literal">$&amp;</CODE> prefix prevents the macro named <CODECLASS="literal">{SET}</CODE> from being expandedwhen the configuration file is read. Therefore the name or number of the ruleset cannot be known until mail is sent.</P><PCLASS="para">The process of calling another set of rules proceeds in five stages:First As usual, if the <SPANCLASS="acronym">LHS</SPAN> matches the workspace, the <SPANCLASS="acronym">RHS</SPAN> gets to rewritethe workspace.Second The <SPANCLASS="acronym">RHS</SPAN> ignores the <CODECLASS="literal">$&gt;</CODE><CODECLASS="replaceable"><I>set</I></CODE> part and rewrites the rest as usual.Third The rewritten workspace is then given to the set of rules specifiedby <CODECLASS="replaceable"><I>set</I></CODE>. They either rewrite the workspace or do not.Fourth The original <SPANCLASS="acronym">RHS</SPAN> (the one with the <CODECLASS="literal">$&gt;</CODE><CODECLASS="replaceable"><I>set</I></CODE>) leavesthe possibly rewritten workspace as is, as though it had performedthe subroutine's rewriting itself.Fifth The <SPANCLASS="acronym">LHS</SPAN> gets a crack at the new workspace as usual unless it is preventedby a <CODECLASS="literal">$:</CODE> or <CODECLASS="literal">$@</CODE> prefix in the <SPANCLASS="acronym">RHS</SPAN>.</P><PCLASS="para">For example, consider the following two sets of rules:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"># first setS21R$*..   $:$&gt;22 $1.     strip extra trailing dots <ICLASS="lineannotation">...etc.</I># second setS22R$*..    $1.           strip trailing dots</PRE></BLOCKQUOTE></P><PCLASS="para">Here, the first set of rules contains, among other things,a single rule thatremoves extra dots from the end of an address.But because other rule sets may also need extra dots stripped, a subroutine(the second set of rules) is created to perform that task.</P><PCLASS="para">Note that the first rule strips one trailing dotfrom the workspace and then callsrule set 22 (the <CODECLASS="literal">$&gt;22</CODE>), which then stripsany additional dots.The workspace as rewritten by rule set 22 becomesthe workspace yielded by the <SPANCLASS="acronym">RHS</SPAN> in the first rule.The <CODECLASS="literal">$:</CODE> prevents the <SPANCLASS="acronym">LHS</SPAN> of the first rule fromlooking for a match a second time.</P><PCLASS="para">Prior to V8.8 <EMCLASS="emphasis">sendmail</EM>the subroutine call must begin the <SPANCLASS="acronym">RHS</SPAN> (immediately follow any<CODECLASS="literal">$@</CODE> or <CODECLASS="literal">$:</CODE> prefix, if any) andonly a single subroutine may be called. That is, the followingcauses rule set 22 to be called but does not call 23:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$&gt;22 xxx $&gt;23 yyy</PRE></BLOCKQUOTE></P><PCLASS="para">Instead of calling rule set 23, the <CODECLASS="literal">$&gt;</CODE> operator andthe <CODECLASS="literal">23</CODE> are copied as is into the workspace, andthat workspace is passed to rule set 22:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">xxx $&gt; 23 yyy      <EMCLASS="emphasis"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> passed to rule set 22</EM></PRE></BLOCKQUOTE></P><PCLASS="para">Beginning with V8.8[5]<EMCLASS="emphasis">sendmail</EM>, subroutine calls may appear anywhereinside the <SPANCLASS="acronym">RHS</SPAN>, and there may be multiple subroutine calls.Consider the same <SPANCLASS="acronym">RHS</SPAN> as above:</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[5] Using code derived from <SPANCLASS="acronym">IDA</SPAN> sendmail.</P></BLOCKQUOTE><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$&gt;22 xxx $&gt;23 yyy</PRE></BLOCKQUOTE></P><PCLASS="para">Beginning with V8.8 <EMCLASS="emphasis">sendmail</EM>, rule set 23 is called first and isgiven the workspace <CODECLASS="literal">yyy</CODE> to rewrite. The workspace,as rewritten by rule set 23, is added to the end of the <CODECLASS="literal">xxx</CODE>,and the combined result is passed to rule set 22.</P><PCLASS="para">Under V8.8 <EMCLASS="emphasis">sendmail</EM>, subroutine rule-set calls are performedfrom right to left. The result (rewritten workspace)of each call is appended to the <SPANCLASS="acronym">RHS</SPAN> text to the left.</P><PCLASS="para">You should beware of one problem with all versions of <EMCLASS="emphasis">sendmail</EM>.When ordinary text immediately follows the number of the ruleset, that text is likely to be ignored. This can be witnessedby using the <CODECLASS="literal">-d21.3</CODE> debugging switch.</P><PCLASS="para">Consider the following <SPANCLASS="acronym">RHS</SPAN>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$&gt;3uucp.$1</PRE></BLOCKQUOTE></P><PCLASS="para">Because <EMCLASS="emphasis">sendmail</EM> parses the <CODECLASS="literal">3</CODE> and the <CODECLASS="literal">uucp</CODE>as a single token, the subroutine call succeeds, but the<CODECLASS="literal">uucp</CODE> is lost. The <CODECLASS="literal">-d21.3</CODE> switch illustrates thisproblem:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">-----callsubr 3uucp (3)       <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-">  sees this</I>-----callsubr 3 (3)           <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> but should have seen this</I></PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="literal">3uucp</CODE> is interpreted as the number 3,so it is accepted as a valid number despite the factthat <CODECLASS="literal">uucp</CODE> was attached. Since the <CODECLASS="literal">uucp</CODE> is a part of the number, itis not available for comparison to the workspace and so is lost.The correct way to write the above <SPANCLASS="acronym">RHS</SPAN> is</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$&gt;3 uucp.$1</PRE></BLOCKQUOTE></P><PCLASS="para">Note that the space between the <CODECLASS="literal">3</CODE> and the <CODECLASS="literal">uucp</CODE> causesthem to be viewed as two separate tokens.</P><PCLASS="para">This problem can also arise with macros. Consider the following:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$&gt;3$M</PRE></BLOCKQUOTE></P><PCLASS="para">Here, the <CODECLASS="literal">$M</CODE> is expanded when the configuration file isparsed. If the expanded valuelacks a leading space, that value (or the first token in it) is lost.</P><PCLASS="para">Note that operators that follow a rule-set number arecorrectly recognized:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$&gt;3$[$1$]</PRE></BLOCKQUOTE></P><PCLASS="para">Here, the <CODECLASS="literal">3</CODE> is immediately followed by the <CODECLASS="literal">$[</CODE> operator.Because operators are token separators, the call to rule set 3will be correctly interpreted as</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">-----callsubr 3 (3)           <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> good</I></PRE></BLOCKQUOTE></P><PCLASS="para">But as a general rule, and just to be safe, the number of a subroutinecall should always be followed by a space.[6]<ACLASS="indexterm"NAME="AUTOID-27086"></A><ACLASS="indexterm"NAME="AUTOID-27087"></A><ACLASS="indexterm"NAME="AUTOID-27088"></A></P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[6] As a stylistic point, it is easier to read rules that have spacesbetween all patterns that are expected to match separate tokens. Forexample, use <CODECLASS="literal">$+ @ $* $=m</CODE> instead of <CODECLASS="literal">$+@$*$=m</CODE>. Thisstyle handles subroutine calls automatically.</P></BLOCKQUOTE></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="SML2-CH-28-SECT-6-5">28.6.5 Specify a Delivery Agent: $#</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-27092"></A><ACLASS="indexterm"NAME="AUTOID-27095"></A>The <CODECLASS="literal">$#</CODE> operator in the <SPANCLASS="acronym">RHS</SPAN> is copied as is into the workspaceand functions as a flag advising <EMCLASS="emphasis">sendmail</EM> thata delivery agent has been selected. The <CODECLASS="literal">$#</CODE> must be the firsttoken copied into the rewritten workspace for it to have this specialmeaning: If it occupies any other position in the workspace, it loses itsspecial meaning.</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$# local           <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> selects delivery agent</I>xxx $# local       <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> no special meaning</I></PRE></BLOCKQUOTE></P><PCLASS="para">When it occurs first in the rewritten workspace, the <CODECLASS="literal">$#</CODE>operator tells <EMCLASS="emphasis">sendmail</EM>that the second token in the workspace is the name of a deliveryagent.The <CODECLASS="literal">$#</CODE> operator is useful only in rulesets 0 and 5.</P><PCLASS="para">Note that the <CODECLASS="literal">$#</CODE> operator may be prefixed with a <CODECLASS="literal">$@</CODE> ora <CODECLASS="literal">$:</CODE> without losing its special meaning, because those prefixoperators are not copied to the workspace:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$@ $# local     <ICLASS="lineannotation">rewritten as <IMGSRC="../chars/rarr.gif"ALT="-&gt;"></I> $# local</PRE></BLOCKQUOTE></P><PCLASS="para">&#13;However, those prefix operators are not necessary, becausethe <CODECLASS="literal">$#</CODE> acts just like a <CODECLASS="literal">$@</CODE> prefix. Itprevents the <SPANCLASS="acronym">LHS</SPAN> from attempting to match again after the <SPANCLASS="acronym">RHS</SPAN>rewrite, and it causes any following rules to be skipped.When used in nonprefix roles in rule sets 0 and 5, <CODECLASS="literal">$@</CODE> and <CODECLASS="literal">$:</CODE> also act like flags, conveying host and user informationto <EMCLASS="emphasis">sendmail</EM> (see <ACLASS="xref"HREF="ch29_06.htm"TITLE="Rule Set 0">Section 29.6, "Rule Set 0"</A>).</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="SML2-CH-28-SECT-6-6">28.6.6 Canonicalize Hostname: $[ and $]</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="SML2-CH-28-IX-OPERATORS-DOLLAR-OPERATORS-AND-BRACKET"></A><ACLASS="indexterm"NAME="SML2-CH-28-IX-CANONICALIZATION-AND-OPERATORS-AND-DOLLARBRACKET"></A>Tokens that appear between a <CODECLASS="literal">$[</CODE> and <CODECLASS="literal">$]</CODE> pair of operators in the <SPANCLASS="acronym">RHS</SPAN> areconsidered to be the name of a host.That hostname is looked up by using <SPANCLASS="acronym">DNS</SPAN>[7]and replaced with the full canonical form of that name. If found, it is then copied to the workspace, and the <CODECLASS="literal">$[</CODE> and <CODECLASS="literal">$]</CODE> are discarded.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[7] Or other means, depending on the setting of service switch file, if youhave one, or the state of the <CODECLASS="literal">ServiceSwitchFile</CODE> option(see <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-61"TITLE="">Section 34.8.61, ServiceSwitchFile</A>).</P></BLOCKQUOTE><PCLASS="para">For example, consider a rule that looks for ahostname in angle brackets and (if found) rewrites itin canonical form:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">R&lt;$*&gt;     $@ &lt;$[ $1 $]&gt;     canonicalize host name</PRE></BLOCKQUOTE></P><PCLASS="para">Such canonicalization is useful at sites where users frequently send mailto machines using the short version of a machine's name.The <CODECLASS="literal">$[</CODE> tells <EMCLASS="emphasis">sendmail</EM> to view all the tokensthat follow (up to the <CODECLASS="literal">$]</CODE>) as a single hostname.</P><PCLASS="para">If the name cannot be canonicalized (perhaps because thereis no such host), the name is copied as isinto the workspace. For configuration files lower than2, no indication is given that it could not be canonicalized(more about this soon).</P><PCLASS="para">Note that if the <CODECLASS="literal">$[</CODE> is omitted and the <CODECLASS="literal">$]</CODE> is included,the <CODECLASS="literal">$]</CODE> loses its special meaning and is copied as isinto the workspace.</P><PCLASS="para">The hostname between the <CODECLASS="literal">$[</CODE> and <CODECLASS="literal">$]</CODE> can alsobe an <SPANCLASS="acronym">IP</SPAN> address. By surrounding the hostname withsquare brackets (<CODECLASS="literal">[</CODE> and <CODECLASS="literal">]</CODE>), you are telling <EMCLASS="emphasis">sendmail</EM>that it is really an <SPANCLASS="acronym">IP</SPAN> address:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">wash.dc.gov            <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> a host name</I>[123.45.67.8]          <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> an IP address</I></PRE></BLOCKQUOTE></P><PCLASS="para">When the <SPANCLASS="acronym">IP</SPAN> address between the square brackets corresponds toa known host, the address and the square brackets are replacedwith that host's canonical name.</P><PCLASS="para">&#13;If the version of the configurationfile is <CODECLASS="literal">2</CODE> or greater (as set with the <CODECLASS="literal">V</CODE> configuration command;see <ACLASS="xref"HREF="ch27_05.htm"TITLE="The V Configuration Command">Section 27.5, "The V Configuration Command"</A>),a successful canonicalization has a dot appended to theresult:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">myhost       <ICLASS="lineannotation">becomes <IMGSRC="../chars/rarr.gif"ALT="-&gt;"></I>  myhost . domain .   <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> success</I>nohost       <ICLASS="lineannotation">becomes <IMGSRC="../chars/rarr.gif"ALT="-&gt;"></I>  nohost              <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> failure</I></PRE></BLOCKQUOTE></P><PCLASS="para">Note that a trailing dot is not legal[8]in an address specification, so subsequent rules (such as rule set 4)<EMCLASS="emphasis">must</EM> remove these added trailing dots.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[8] Under DNS the trailing dot signifies the root (topmost) domain. Thereforeunder DNS a trailing dot is legal. For mail, however, RFC1123 specificallystates that no address is to be propagated that contains a trailing dot.</P></BLOCKQUOTE><PCLASS="para">Also, the <CODECLASS="literal">K</CODE> configuration command(see <ACLASS="xref"HREF="ch33_03.htm"TITLE="The K Configuration Command">Section 33.3, "The K Configuration Command"</A>)can be usedto redefine (or eliminate) the dot as the added character. For example,</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Khost host -a.found</PRE></BLOCKQUOTE></P><PCLASS="para">This causes <EMCLASS="emphasis">sendmail</EM> to add the text <CODECLASS="literal">.found</CODE> to a successfullycanonicalized hostname instead of the dot.</P><PCLASS="para">One difference between V8 <EMCLASS="emphasis">sendmail</EM> and other versionsis in the way it looks up names from between the <CODECLASS="literal">$[</CODE> and <CODECLASS="literal">$]</CODE>operators. The rules for V8 <EMCLASS="emphasis">sendmail</EM> are as follows:First If the name contains at least one dot (<CODECLASS="literal">.</CODE>) anywhere within it, it islooked up as is; for example, <EMCLASS="emphasis">host.CS</EM>.Second If that fails, it appends the default domain to the name (as definedin <EMCLASS="emphasis">/etc/resolv.conf</EM>) and tries to look up the result;for example, <EMCLASS="emphasis">host.CS.our.Sub.Domain</EM>.Third If that fails, the leftmost part of the subdomain (if any) is discardedand the result is appended to the original host; for example, <EMCLASS="emphasis">host.our.Sub.Domain</EM>.Fourth If the original name did not have a dot in it, it is looked up as is;for example, <EMCLASS="emphasis">host</EM>.</P><PCLASS="para">This approach allows names such as <EMCLASS="emphasis">host.CS</EM> to first matcha site in the Czech Republic, such as <EMCLASS="emphasis">vscht.CS</EM>(if that was intended), rather than to wronglymatch a host in your local Computer Science (<CODECLASS="literal">CS</CODE>) department.This is particularly important if you have wildcard <SPANCLASS="acronym">MX</SPAN> recordsfor your site.</P><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="SML2-CH-28-SECT-6-6-1">28.6.6.1 An example of canonicalization</A></H4><PCLASS="para">The following two-line configuration file can be used toobserve how <EMCLASS="emphasis">sendmail</EM> canonicalizes hostnames:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">V2R$*        $@ $[ $1 $]</PRE></BLOCKQUOTE></P><PCLASS="para">If this file were called <EMCLASS="emphasis">x.cf</EM>, <EMCLASS="emphasis">sendmail</EM>could be run in rule-testing mode with a command like the following:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>/usr/lib/sendmail -oQ. -Cx.cf -bt</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Thereafter, hostname canonicalization can be observed by specifyingrule set 0 and a hostname. One such run of tests is as follows:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">ADDRESS TEST MODE (ruleset 3 NOT automatically invoked)Enter &lt;ruleset&gt; &lt;address&gt;&gt; <CODECLASS="userinput"><B>0 wash</B></CODE>rewrite: ruleset  0   input: washrewrite: ruleset  0 returns: wash . dc . gov .&gt; <CODECLASS="userinput"><B>0 nohost</B></CODE>rewrite: ruleset  0   input: nohostrewrite: ruleset  0 returns: nohost&gt;</PRE></BLOCKQUOTE></P><PCLASS="para">Note that the known host named <CODECLASS="literal">wash</CODE> is rewritten incanonicalized form (with a dot appended because of the <CODECLASS="literal">V2</CODE>).The unknown host named <CODECLASS="literal">nohost</CODE> is unchanged and has no dot appended.</P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="SML2-CH-28-SECT-6-6-2">28.6.6.2 Default in canonicalization: $:</A></H4><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-27233"></A><ACLASS="indexterm"NAME="AUTOID-27236"></A><ACLASS="indexterm"NAME="AUTOID-27240"></A>IDA and V8 <EMCLASS="emphasis">sendmail</EM> both offer an alternative toleaving the hostname unchanged when canonicalization failswith <CODECLASS="literal">$[</CODE> and <CODECLASS="literal">$]</CODE>. A default can be used insteadof the failed hostname by prefixing that default with a <CODECLASS="literal">$:</CODE>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$[ <CODECLASS="replaceable"><I>host $: default $]</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="literal">$:</CODE><CODECLASS="replaceable"><I>default</I></CODE> must follow the <CODECLASS="replaceable"><I>host</I></CODE> andprecede the <CODECLASS="literal">$]</CODE>. To illustrate its use, consider thefollowing rule:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">R$*    $:$[ $1 $: $1.notfound $]</PRE></BLOCKQUOTE></P><PCLASS="para">If the hostname <CODECLASS="literal">$1</CODE> can be canonicalized, the workspacebecomes that canonicalized name. If it cannot, the workspacebecomes the original hostname with a <CODECLASS="literal">.notfound</CODE> appendedto it.If the <CODECLASS="replaceable"><I>default</I></CODE> part of the <CODECLASS="literal">$:</CODE><CODECLASS="replaceable"><I>default</I></CODE> is omitted,a failed canonicalization is rewritten as zero tokens.<ACLASS="indexterm"NAME="AUTOID-27264"></A><ACLASS="indexterm"NAME="AUTOID-27265"></A></P></DIV></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="SML2-CH-28-SECT-6-7">28.6.7 Other Operators</A></H3><PCLASS="para">Many other operators (depending on your versionof <EMCLASS="emphasis">sendmail</EM>) may also be used inrules. Because of their individual complexity, all of thefollowing are detailed in other chapters. We outline themhere, however, for completeness.&#13;</P><DLCLASS="variablelist"><DTCLASS="term"><EMCLASS="emphasis">Class macros</EM></DT><DDCLASS="listitem"><PCLASS="para">Class macros are described in<ACLASS="xref"HREF="ch32_02.htm#SML2-CH-32-SECT-2-1"TITLE="Matching Any in a Class: $=">Section 32.2.1, "Matching Any in a Class: $="</A> and <ACLASS="xref"HREF="ch32_02.htm#SML2-CH-32-SECT-2-2"TITLE="Matching Any Not in a Class: $~">Section 32.2.2, "Matching Any Not in a Class: $~"</A> of<ACLASS="xref"HREF="ch32_01.htm"TITLE="Class Macros">Chapter 32, <CITECLASS="chapter">Class Macros</CITE></A>.Class macros may appear only in the <SPANCLASS="acronym">LHS</SPAN>. They begin with the prefix <CODECLASS="literal">$=</CODE>to match a token in the workspace to one of many items ina class. The alternative prefix <CODECLASS="literal">$~</CODE> causes a tokenin the workspace to match if it does <EMCLASS="emphasis">not</EM> appear in the listof items that are the class.&#13;</P></DD><DTCLASS="term"><EMCLASS="emphasis">Conditionals</EM></DT><DDCLASS="listitem"><PCLASS="para">The conditional macro operator <CODECLASS="literal">$?</CODE> is rarely used inrules (see <ACLASS="xref"HREF="ch31_06.htm"TITLE="Macro Conditionals: $?, $|, and $.">Section 31.6, "Macro Conditionals: $?, $|, and $."</A>). When it is used in rules,the result is often not what was intended.Its <EMCLASS="emphasis">else</EM> part, the <CODECLASS="literal">$|</CODE> conditional operator is used bythe <CODECLASS="literal">check_compat</CODE> rule set (see <ACLASS="xref"HREF="ch29_10.htm#SML2-CH-29-SECT-10-4"TITLE="The check_compat Rule Set">Section 29.10.4, "The check_compat Rule Set"</A>)to separate the sender from the recipient address.&#13;</P></DD><DTCLASS="term"><EMCLASS="emphasis">Database Operators</EM></DT><DDCLASS="listitem"><PCLASS="para">The database operators, <CODECLASS="literal">$(</CODE> and <CODECLASS="literal">$)</CODE>, are used to look up tokens in various types of database files and network database services.They also provide access to internal services, such as dequoting and lookingup <SPANCLASS="acronym">MX</SPAN> records (see <ACLASS="xref"HREF="ch33_01.htm"TITLE="Database Macros">Chapter 33, <CITECLASS="chapter">Database Macros</CITE></A>).<ACLASS="indexterm"NAME="AUTOID-27303"></A><ACLASS="indexterm"NAME="AUTOID-27304"></A></P></DD></DL></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch28_05.htm"TITLE="28.5 The LHS"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 28.5 The LHS"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="sendmail"><IMGSRC="../gifs/txthome.gif"ALT="sendmail"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch28_07.htm"TITLE="28.7 Pitfalls"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 28.7 Pitfalls"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">28.5 The LHS</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">28.7 Pitfalls</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><PCLASS="nav"><FONTSIZE="-1">[ <AHREF="../index.htm"TITLE="The Networking CD Bookshelf">Library Home</A> | <AHREF="../dnsbind/index.htm"TITLE="DNS &amp; BIND">DNS &amp; BIND</A> | <AHREF="../tcpip/index.htm"TITLE="TCP/IP Network Administration">TCP/IP</A> | <AHREF="index.htm"TITLE="sendmail">sendmail</A> | <AHREF="../smdref/index.htm"TITLE="sendmail Desktop Reference">sendmail Reference</A> | <AHREF="../firewall/index.htm"TITLE="Building Internet Firewalls">Firewalls</A> | <AHREF="../puis/index.htm"TITLE="Practical UNIX &amp; Internet Security">Practical Security</A> ]</FONT></P></DIV></BODY></HTML>