<HTML><HEAD><TITLE>[Chapter 29] 29.10 The check_... Rule Sets</TITLE><METANAME="DC.title"CONTENT="sendmail"><METANAME="DC.creator"CONTENT="Bryan Costales &amp; Eric Allman"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1999-01-06T19:52:18Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-222-0"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch29_01.htm"TITLE="29. Rule Sets"><LINKREL="prev"HREF="ch29_09.htm"TITLE="29.9 Rule Set 1"><LINKREL="next"HREF="ch29_11.htm"TITLE="29.11 Pitfalls"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="sendmail"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,65"HREF="index.htm"ALT="sendmail"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/ssrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch29_09.htm"TITLE="29.9 Rule Set 1"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 29.9 Rule Set 1"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 29<BR>Rule Sets</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch29_11.htm"TITLE="29.11 Pitfalls"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 29.11 Pitfalls"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="SML2-CH-29-SECT-10">29.10 The check_... Rule Sets</A></H2><PCLASS="para"><ACLASS="indexterm"NAME="SML2-CH-29-IX-RULE-SETS-CHECK"></A>The rapid spread of the Internet has led to an increase ofmail abuses. Prior to V8.8 <EMCLASS="emphasis">sendmail</EM>, detecting and rejectingabusive email required that you write C language code foruse in the <EMCLASS="emphasis">checkcompat</EM>() routine (see <ACLASS="xref"HREF="ch20_01.htm#SML2-CH-20-SECT-1"TITLE="How checkcompat() Works">Section 20.1, "How checkcompat() Works"</A>). Beginning withV8.8 <EMCLASS="emphasis">sendmail</EM> important and useful checking and rejectingcan be done from within four brand new rule sets:<CODECLASS="literal">check_mail</CODE> Validate the sender-envelope address given tothe SMTP MAIL command.<CODECLASS="literal">check_rcpt</CODE> Validate the recipient-envelope address given tothe SMTP RCPT command.<CODECLASS="literal">check_relay</CODE> Validate the host initiating the SMTP connection.<CODECLASS="literal">check_compat</CODE> Compare or contrast each envelope sender and envelope recipientpair of addresses just before delivery, and validatebased on the result.</P><PCLASS="para">These routines are handled in the same manner. If the rule setdoes not exist, the address is accepted. If the rule set returnsanything other than a <CODECLASS="literal">#error</CODE> delivery agent,the message is accepted. Otherwise, the message is rejected byusing the mechanism described under the <CODECLASS="literal">#error</CODE> delivery agent(see <ACLASS="xref"HREF="ch30_05.htm#SML2-CH-30-SECT-5-2"TITLE="The error Delivery Agent">Section 30.5.2, "The error Delivery Agent"</A>).&#13;</P><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="SML2-CH-29-SECT-10-1">29.10.1 The check_mail Rule Set</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-28410"></A><ACLASS="indexterm"NAME="AUTOID-28412"></A><ACLASS="indexterm"NAME="AUTOID-28415"></A><ACLASS="indexterm"NAME="AUTOID-28417"></A>The MAIL command in the SMTP dialog is used tospecify the envelope-sender address:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">MAIL From: &lt;sender@host.domain&gt;</PRE></BLOCKQUOTE></P><PCLASS="para">If the <CODECLASS="literal">check_mail</CODE> rule set exists, it is called immediatelyafter the MAIL command is read. The workspace passed to<CODECLASS="literal">check_mail</CODE> is the address following the colon in theMAIL command. That envelope sender address may or maynot be surrounded by angle braces.</P><PCLASS="para">To illustrate one use for the <CODECLASS="literal">check_mail</CODE> rule set, considerthe need to reject all incoming mail from the site named<EMCLASS="emphasis">spamming.org</EM>.[6]One method might look like this:</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[6] Also see <ACLASS="xref"HREF="ch22_04.htm#SML2-CH-22-SECT-4-1"TITLE="Accept/Reject Connections via libwrap.a">Section 22.4.1, "Accept/Reject Connections via libwrap.a"</A> for a discussion of how to usethe TCP wrapper library from within <EMCLASS="emphasis">sendmail</EM>.</P></BLOCKQUOTE><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Scheck_mailR$*                   $: $&gt;3 $1              focus on the hostR$* &lt;@ $+. &gt; $*       $1 &lt;@ $2&gt; $3           strip trailing dotsR$* &lt;@ $+ &gt; $*        $: $2                  isolate the hostR$* . $+ . $+         $: $2 . $3             strip subdomainsRspamming.org         $#error $@ 5.7.1 $: &quot;cannot accept mail from spamming.org&quot;</PRE></BLOCKQUOTE></P><PCLASS="para">Here, we force rule set 3 to preprocess the address so thatany RFC822 comments will be thrown away and so thatthe host part of the address will be focused.We then strip any trailing dots from the hostname to preventa trailing dot from wrongly effecting our validation.In the third line we throw away everything but the hostname.In the fourth line we throw away all but the rightmost two componentsof the hostname to eliminate the host part and any subdomainprefixes. What remains is just the domain name. We then comparethat domain name to the hostname <EMCLASS="emphasis">spamming.org</EM>. If they match, wereject the sender.</P><PCLASS="para">After this rule set is installed (and the <EMCLASS="emphasis">sendmail</EM> daemon had been restarted), all mail from <EMCLASS="emphasis">spamming.org</EM> will be rejectedduring the SMTP dialogue like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">MAIL From: &lt;badguy@spamming.org&gt;553 &lt;badguy@spamming.org&gt;... cannot accept mail from spamming.org</PRE></BLOCKQUOTE></P><PCLASS="para">This is just one possible use of the <CODECLASS="literal">check_mail</CODE>rule set. Other uses might be the following:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">Rejecting mail from specific users at a given site.</P></LI><LICLASS="listitem"><PCLASS="para">Looking up <EMCLASS="emphasis">user@host</EM> in a database and rejecting the senderif that lookup succeeds.</P></LI><LICLASS="listitem"><PCLASS="para">Insisting that the host part of the address be canonifiable withthe <CODECLASS="literal">$[</CODE> and <CODECLASS="literal">$]</CODE> operators.</P></LI></UL><PCLASS="para">If you need to base a decision to reject mail on both the sender and the recipient,you may be able to use the <CODECLASS="literal">check_compat</CODE> rule setdescribed below.&#13;</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="SML2-CH-29-SECT-10-2">29.10.2 The check_rcpt Rule Set</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-28458"></A><ACLASS="indexterm"NAME="AUTOID-28460"></A><ACLASS="indexterm"NAME="AUTOID-28463"></A><ACLASS="indexterm"NAME="AUTOID-28465"></A><ACLASS="indexterm"NAME="AUTOID-28468"></A>The RCPT command in the SMTP dialoguespecifies an envelope recipient's address:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">RCPT To: &lt;recipient@host.domain&gt;</PRE></BLOCKQUOTE></P><PCLASS="para">If the <CODECLASS="literal">check_rcpt</CODE> rule set exists, it is called immediatelyafter the RCPT command is read. The workspace that is passed to<CODECLASS="literal">check_rcpt</CODE> is the address following the colon.The envelope recipient address may or maynot be surrounded by angle brackets and may or may not haveother RFC822 comments associated with it.</P><PCLASS="para">To illustrate one use for the <CODECLASS="literal">check_rcpt</CODE> rule set, considerthe need to reject all incoming mail destined for therecipient named <EMCLASS="emphasis">fax</EM>.  One method might look like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">R$*                     $: $&gt;3 $1               focus on hostR$* &lt;@ $~w &gt; $*         $@ ok                   not @ourhost is okayR$* &lt;@ $+ &gt; $*          $: $1                   discard hostRfax                    $#error $@ 5.1.3 $: &quot;cannot send mail to fax&quot;</PRE></BLOCKQUOTE></P><PCLASS="para">Here, we first call rule set 3 to focus on the host part of the addressand normalize it. The second rule accepts anything that is addressed to any host but our own. That way, mail to <EMCLASS="emphasis">fax@another.host</EM> willwork. The third rule discards the host (our local) part of the address. In the fourth line the remaining user part is compared to the name <EMCLASS="emphasis">fax</EM>.Any mail to <EMCLASS="emphasis">fax</EM> is thus rejected:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">RCPT To: &lt;fax@ourhost&gt;553 &lt;fax@ourhost&gt;... cannot send mail to fax</PRE></BLOCKQUOTE></P><PCLASS="para">Other uses for this <CODECLASS="literal">check_rcpt</CODE> rule set might include the following:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">Protecting a user who has become the target of a mail attack. You could create anew account for this user and block incoming mail to the old account.In the <CODECLASS="literal">#error</CODE> message you could print a phone number that others maycall to obtain the new email address.</P></LI><LICLASS="listitem"><PCLASS="para">Claiming that certain secret users are unknown. These might be the pseudo-usersassociated with autonomous processes.</P></LI><LICLASS="listitem"><PCLASS="para">Refusing to accept mail that is not addressed to a user who has an activeaccount as represented by the <EMCLASS="emphasis">passwd</EM>(5) file (see <ACLASS="xref"HREF="ch33_08.htm#SML2-CH-33-SECT-8-20"TITLE="">Section 33.8.20, user</A>).</P></LI><LICLASS="listitem"><PCLASS="para">Looking up recipients in a database and accepting mail for them only ifthey are found in that database. This way, only selected usersmay be allowed, for example, through a firewall, though the firewall knows all about all users.</P></LI><LICLASS="listitem"><PCLASS="para">Looking up local-looking recipients in a database to see whether they havemoved to a new location. If so, advise the other site of the newaddress with a rejection message. This is similar to the<CODECLASS="literal">redirect</CODE> FEATURE (see <ACLASS="xref"HREF="ch19_06.htm#SML2-CH-19-SECT-6-21"TITLE="">Section 19.6.21, FEATURE(redirect)</A>), butoperates at the RCPT level instead of sending bounced mail.</P></LI><LICLASS="listitem"><PCLASS="para">Turning off unwanted &quot;relaying&quot; through your machine. Requires use of the<CODECLASS="literal">${client_name}</CODE> macro (see <ACLASS="xref"HREF="ch31_10.htm#SML2-CH-31-SECT-10-8"TITLE="">Section 31.10.8, ${client-name}</A>).</P></LI></UL><PCLASS="para"></P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="SML2-CH-29-SECT-10-3">29.10.3 The check_relay Rule Set</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-28513"></A><ACLASS="indexterm"NAME="AUTOID-28515"></A>V8.8 <EMCLASS="emphasis">sendmail</EM> supports two mechanisms for screening incoming SMTPconnections. One is the <EMCLASS="emphasis">libwrap.a</EM> mechanism (see <ACLASS="xref"HREF="ch22_04.htm#SML2-CH-22-SECT-4-1"TITLE="Accept/Reject Connections via libwrap.a">Section 22.4.1</A>); the other is this <CODECLASS="literal">check_relay</CODE> rule set. This rule set isused to screen incoming network connections andaccept or reject them based on hostname, domain, or IP  number.  It is called just before the <EMCLASS="emphasis">libwrap.a</EM> code and can be used ifthat code was omitted from your release of <EMCLASS="emphasis">sendmail</EM>.</P><PCLASS="para">The <CODECLASS="literal">check_relay</CODE> rule set is called with a workspace that looks likethis:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">hostname $| IPnumber</PRE></BLOCKQUOTE></P><PCLASS="para">The hostname and IP number are separated by the <CODECLASS="literal">$|</CODE>operator. The <CODECLASS="literal">hostname</CODE> is the fully qualified canonical name of the connecting host. The <CODECLASS="literal">IPnumber</CODE> is the IPnumber of that host in dotted-quad form without surrounding square brackets.</P><PCLASS="para">One way to use <CODECLASS="literal">check_relay</CODE> might be to list offensivesites in a database and to reject any connections from those sites.Consider a database that contains hostnames as its keys and descriptionsof each host's offense as its values:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">hostA.edu      Spamming sitehostB.com      Mail Bombing site123.45.6       Offensive domain</PRE></BLOCKQUOTE></P><PCLASS="para">Notice that the keys can be hostnames or IP addresses.Such a database might be declared in the configuration file like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Kbadhosts dbm -a &lt;&gt; /etc/badhosts</PRE></BLOCKQUOTE></P><PCLASS="para">&#13;Now, each time a site connects to your running daemon, the followingrule set will be called:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Scheck_relayR$* $| $*            $: $(badhosts $1 $) $| $2             look up host nameR$*&lt;&gt; $| $*          $#error $@ 5.1.3 $: Sorry, $1 deniedR$* $|  $*           $: $2                                 select the IP numberR$-.$-.$-.$-         $: $(badhosts $1.$2.$3 $)             look up domain partR$*&lt;&gt;                $#error $@ 5.1.3 $: Sorry, $1 deniedR$*                  $@ ok                                 otherwise okay</PRE></BLOCKQUOTE></P><PCLASS="para">The second rule looks up the host part in the database. If it is found,the value (reason for rejection) is returned and the two characters <CODECLASS="literal">&lt;&gt;</CODE>are appended. The third rule looks for anything to the left of the <CODECLASS="literal">$|</CODE>that ends in <CODECLASS="literal">&lt;&gt;</CODE> and, if anything is found, issues the error: [7]</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[7] Actually, the message is not printed; instead, the SMTP daemon goes into a &quot;reject everything&quot; mode. This prevents some SMTP implementations from retrying the connection.</P></BLOCKQUOTE><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Sorry, <ICLASS="lineannotation">reason for reject</I> denied</PRE></BLOCKQUOTE></P><PCLASS="para">Rejected connections are handled the same way as connections rejected bythe <EMCLASS="emphasis">libwrap.a</EM> technique (see <ACLASS="xref"HREF="ch22_04.htm#SML2-CH-22-SECT-4-1"TITLE="Accept/Reject Connections via libwrap.a">Section 22.4.1</A>).</P><PCLASS="para">The rest of the rules do the same thing, except that they check for the IPnumber. If the <CODECLASS="literal">check_relay</CODE> rule set returns anything other thana <CODECLASS="literal">#error</CODE> delivery agent, the address is accepted.</P><PCLASS="para">Note that the rules presented here are not nearly as complex or sophisticatedas your site will likely need. It does not, for example, reject on the basis of the domainpart of hostnames, nor does it reject on the basis of the individual host IP addresses.</P><PCLASS="para">Note that such rule sets cannot be tested in rule-testing mode, becausethat mode interprets the expression <CODECLASS="literal">$|</CODE> (when you enter it at the<CODECLASS="literal">&gt;</CODE> prompt) wrongly as two separate text characters instead of correctly as a single operator. To test an address that contains an embedded <CODECLASS="literal">$|</CODE> operator,we suggest that you create a translation rule set something like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">STranslateR$* $$| $*              $: $1 $| $2                            fake for -bt mode</PRE></BLOCKQUOTE></P><PCLASS="para">This rule set changes a literal <CODECLASS="literal">$</CODE> and <CODECLASS="literal">|</CODE> into a <CODECLASS="literal">$|</CODE>operator so that you can test rule sets such as <CODECLASS="literal">check_relay</CODE>from rule-testing mode:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">ADDRESS TEST MODE (ruleset 3 NOT automatically invoked)Enter &lt;ruleset&gt; &lt;address&gt;&gt; <CODECLASS="userinput"><B>Translate,check_relay bogus.host.domain $| 123.45.67.89</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">&#13;Here, the comma-separated list of rule sets begins with <CODECLASS="literal">Translate</CODE>, whichchanges the two-character text expression &quot;<CODECLASS="literal">$|</CODE>&quot; into thesingle operator <CODECLASS="literal">$|</CODE>. The result, an address expression that is suitablefor the <CODECLASS="literal">check_relay</CODE> rule set, can then be successfully tested.[8]&#13;</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[8] Don't be tempted to put this rule directly into the <CODECLASS="literal">check_relay</CODE> ruleset. You may someday encounter an address that has the twoadjacent characters &quot;<CODECLASS="literal">$</CODE>&quot; and &quot;<CODECLASS="literal">|</CODE>&quot; as a legal part of it.Also beware of such addresses being intentionally sent just to circumvent your checks.</P></BLOCKQUOTE></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="SML2-CH-29-SECT-10-4">29.10.4 The check_compat Rule Set</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-28585"></A><ACLASS="indexterm"NAME="AUTOID-28587"></A><ACLASS="indexterm"NAME="AUTOID-28590"></A><ACLASS="indexterm"NAME="AUTOID-28593"></A><ACLASS="indexterm"NAME="AUTOID-28596"></A>Not all situations can be resolved by simply checking the recipient or sender address.Sometimes you will need to make judgments based on pairs of addresses. To handle this situation,V8.8 introduced the <CODECLASS="literal">check_compat</CODE> rule set.Unlike <CODECLASS="literal">check_mail</CODE> and <CODECLASS="literal">check_rcpt</CODE>, <CODECLASS="literal">check_compat</CODE>is called for all deliveries, not just SMTP transactions.It is called just after the check for too large a size (as definedby <CODECLASS="literal">M=</CODE>; see <ACLASS="xref"HREF="ch30_04.htm#SML2-CH-30-SECT-4-7"TITLE="">Section 30.4.7, M=</A>) and just beforethe <EMCLASS="emphasis">checkcompat</EM>() routine is called (see <ACLASS="xref"HREF="ch20_01.htm#SML2-CH-20-SECT-1"TITLE="How checkcompat() Works">Section 20.1</A>).</P><PCLASS="para">The <CODECLASS="literal">check_compat</CODE> rule set is called with a workspace thatlooks like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">sender $| recipient</PRE></BLOCKQUOTE></P><PCLASS="para">The sender and recipient address are separated by the <CODECLASS="literal">$|</CODE>operator. Each has undergone aliasing and <EMCLASS="emphasis">~/.forward</EM> file processing.</P><PCLASS="para">As one example of a way to use the <CODECLASS="literal">check_compat</CODE> rule set, considerthe need to prevent a certain user (here <EMCLASS="emphasis">operator</EM>) from sendingmail offsite:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">SGet_domainR$*                     $: $&gt;3 $1               focus on hostR$* &lt;@ $+. &gt; $*         $1 &lt;@ $2&gt; $3            strip trailing dotsR$* &lt;@ $+ &gt; $*          $: $2                   isolate the hostR$* . $+ . $+           $@ $2 . $3              strip host and subdomainsSGet_userR$*                     $: $&gt;3 $1               focus on hostR$* &lt;@ $+ &gt; $*          $@ $1                   discard hostScheck_compatR$* $| $*               $: $1 $|  $&gt;Get_domain $2       fetch recipient domainR$* $|  $=w             $@ ok                           local is okayR$* $|  $m              $@ ok                           local is okayR$* $|  $*              $: $&gt;Get_user $1                fetch sender userRoperator               $#error $@ 5.1.3 $: &quot;operator may not mail offsite&quot;</PRE></BLOCKQUOTE></P><PCLASS="para">First we set up two subroutines patterned after the code in the previous two sections.The first reduces its workspace to just the domain part of an address.The second reduces an address to just the user part.These two subroutines are called by <CODECLASS="literal">check_compat</CODE>.</P><PCLASS="para">The first rule in <CODECLASS="literal">check_compat</CODE> uses the <CODECLASS="literal">Get_domain</CODE> subroutine to convertthe address on the right (the recipient) into just a domain name.That right side is compared to the local hosts names (<CODECLASS="literal">$=w</CODE> and<CODECLASS="literal">$m</CODE>). If the domain is a local one, delivery is allowed(we return anything but <CODECLASS="literal">#error</CODE>).</P><PCLASS="para">If the domain is an offsite one, we then call <CODECLASS="literal">Get_user</CODE>to fetch the user part of the address to the left (the sender).If that user is <EMCLASS="emphasis">operator</EM>, delivery is denied andthe message bounces.</P><PCLASS="para">Other uses for the <CODECLASS="literal">check_compat</CODE> rule set might be the following:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">Creating a class of user who, possibly for security reasons, maysend only mail inside the organization, but not outside it.</P></LI><LICLASS="listitem"><PCLASS="para">Screening a particular recipient to prevent that user from receivingobjectionable mail from a specific source.</P></LI><LICLASS="listitem"><PCLASS="para">Screening mail based on hostname to prevent outsiders from usingyour host as a mail relay.</P></LI></UL><PCLASS="para">Note that such rule sets cannot be tested in rule-testing mode becausethat mode interprets the expression <CODECLASS="literal">$|</CODE> (when you enter it at the<CODECLASS="literal">&gt;</CODE> prompt) wrongly as two separate text characters instead ofcorrectly as a single operator.See <ACLASS="xref"HREF="ch29_10.htm#SML2-CH-29-SECT-10-3"TITLE="The check_relay Rule Set">Section 29.10.3, "The check_relay Rule Set"</A> for one suggested solution to this problem.<ACLASS="indexterm"NAME="AUTOID-28643"></A></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch29_09.htm"TITLE="29.9 Rule Set 1"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 29.9 Rule Set 1"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="sendmail"><IMGSRC="../gifs/txthome.gif"ALT="sendmail"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch29_11.htm"TITLE="29.11 Pitfalls"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 29.11 Pitfalls"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">29.9 Rule Set 1</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">29.11 Pitfalls</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><PCLASS="nav"><FONTSIZE="-1">[ <AHREF="../index.htm"TITLE="The Networking CD Bookshelf">Library Home</A> | <AHREF="../dnsbind/index.htm"TITLE="DNS &amp; BIND">DNS &amp; BIND</A> | <AHREF="../tcpip/index.htm"TITLE="TCP/IP Network Administration">TCP/IP</A> | <AHREF="index.htm"TITLE="sendmail">sendmail</A> | <AHREF="../smdref/index.htm"TITLE="sendmail Desktop Reference">sendmail Reference</A> | <AHREF="../firewall/index.htm"TITLE="Building Internet Firewalls">Firewalls</A> | <AHREF="../puis/index.htm"TITLE="Practical UNIX &amp; Internet Security">Practical Security</A> ]</FONT></P></DIV></BODY></HTML>