<HTML><HEAD><TITLE>[Chapter 32] Class Macros</TITLE><METANAME="DC.title"CONTENT="sendmail"><METANAME="DC.creator"CONTENT="Bryan Costales &amp; Eric Allman"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1999-01-06T20:20:24Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-222-0"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="part04.htm"TITLE="IV. Reference"><LINKREL="prev"HREF="ch31_10.htm"TITLE="31.10 Alphabetized Reference"><LINKREL="next"HREF="ch32_02.htm"TITLE="32.2 Access Class in Rules"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="sendmail"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,65"HREF="index.htm"ALT="sendmail"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/ssrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch31_10.htm"TITLE="31.10 Alphabetized Reference"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 31.10 Alphabetized Reference"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 32</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch32_02.htm"TITLE="32.2 Access Class in Rules"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 32.2 Access Class in Rules"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="CHAPTER"><H1CLASS="chapter"><ACLASS="title"NAME="SML2-CH-32">32. Class Macros</A></H1><DIVCLASS="htmltoc"><P><B>Contents:</B><BR><ACLASS="sect1"HREF="#SML2-CH-32-SECT-1"TITLE="32.1 Class Configuration Commands">Class Configuration Commands</A><BR><ACLASS="sect1"HREF="ch32_02.htm"TITLE="32.2 Access Class in Rules">Access Class in Rules</A><BR><ACLASS="sect1"HREF="ch32_03.htm"TITLE="32.3 Class with m4">Class with m4</A><BR><ACLASS="sect1"HREF="ch32_04.htm"TITLE="32.4 Pitfalls">Pitfalls</A><BR><ACLASS="sect1"HREF="ch32_05.htm"TITLE="32.5 Alphabetized Reference">Alphabetized Reference</A></P><P></P></DIV><PCLASS="para"></P><PCLASS="para">A class is like an array of string values. In the LHS of rules it is sometimes advantageous to compare individualtokens to multiple strings when determining a match.The configuration class command provides this ability.The class command is similarto the macro definition command, except that instead of assigning a single value to a macro, it assigns manyvalues to a class. Classes differsfrom macros in that they can be used only in the LHS of rules,whereas macros can be used in either the RHS or the LHS.<ACLASS="indexterm"NAME="SML2-CH-32-IX-MACROS-CLASS-MACROS"></A><ACLASS="indexterm"NAME="SML2-CH-32-IX-CLASS-MACROS"></A></P><PCLASS="para">Two different configuration commands can be used to assign values toa class.The <CODECLASS="literal">C</CODE> configuration command is used toassign values from within the configuration file.The <CODECLASS="literal">F</CODE> configuration command is used in two ways:to assign values by reading them from a disk file orto assign values by running a program and reading the output.These commands may beintermixed to create a single class or used separately tocreate multiple classes.</P><PCLASS="para">You may wish to review the tutorial in<ACLASS="xref"HREF="ch12_01.htm"TITLE="Class">Chapter 12, <CITECLASS="chapter">Class</CITE></A>, to see a few typical applications of class.&#13;</P><DIVCLASS="sect1"><H2CLASS="sect1"><ACLASS="title"NAME="SML2-CH-32-SECT-1">32.1 Class Configuration Commands</A></H2><PCLASS="para"><ACLASS="indexterm"NAME="SML2-CH-32-IX-CLASSES-DECLARING"></A><ACLASS="indexterm"NAME="SML2-CH-32-IX-DECLARING-CLASSES"></A><ACLASS="indexterm"NAME="AUTOID-35989"></A><ACLASS="indexterm"NAME="AUTOID-35991"></A>The three forms for the class configuration command are the following:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">C<CODECLASS="replaceable"><I>X list           </I></CODE><ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> values from configuration file</I>F<CODECLASS="replaceable"><I>X file           </I></CODE><ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> values from a disk file</I>F<CODECLASS="replaceable"><I>X </I></CODE>|<CODECLASS="replaceable"><I>program       </I></CODE><ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> values via another program</I></PRE></BLOCKQUOTE></P><PCLASS="para">The class configuration command starts with either the letter<CODECLASS="literal">C</CODE> or <CODECLASS="literal">F</CODE>, which must begin a line. The <CODECLASS="literal">C</CODE> saysvalues will be assigned as a part of the configuration command.The <CODECLASS="literal">F</CODE> says values will be assigned from an externalfile or program.</P><PCLASS="para">The <CODECLASS="literal">C</CODE> or <CODECLASS="literal">F</CODE> is immediately followed(with no intervening whitespace) by the name of the class(the <CODECLASS="literal">X</CODE> above). A class name is any single ASCII character or,beginning with V8.7 <EMCLASS="emphasis">sendmail</EM> a multicharacter name enclosedin curly braces:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">C<CODECLASS="replaceable"><I>X list               </I></CODE><ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> all versions</I>C<CODECLASS="replaceable"><I>{LongName} list      </I></CODE><ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> beginning with V8.7</I></PRE></BLOCKQUOTE></P><PCLASS="para">See <ACLASS="xref"HREF="ch31_04.htm#SML2-CH-31-SECT-4-2"TITLE="Multicharacter Names">Section 31.4.2, "Multicharacter Names"</A> for a full discussion of howto use multicharacter names.</P><PCLASS="para">Note that classes are separate from macros, so they may both use thesame letter or name with no conflict.</P><PCLASS="para">The <EMCLASS="emphasis">sendmail</EM> program reserves the lowercase lettersfor its own use as internally defined class names(although currently only a few are actually used).All uppercase letters  and all names that begin with uppercaseletters are available for use.&#13;</P><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="SML2-CH-32-SECT-1-1">32.1.1 The C Class Command</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="SML2-CH-32-IX-C-CONFIGURATION-COMMAND"></A>The <CODECLASS="literal">C</CODE> form of the class command causes values tobe assigned from within the configuration file.In general, the class command looks like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">C<CODECLASS="replaceable"><I>X list              </I></CODE><ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> values from configuration file</I>C<CODECLASS="replaceable"><I>{XX} list           </I></CODE><ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> values from configuration file</I></PRE></BLOCKQUOTE></P><PCLASS="para">Here, a <CODECLASS="replaceable"><I>list</I></CODE> is a list of string elements (delimited by whitespace) that followson the same line as the <CODECLASS="literal">C</CODE> command. Each word in<CODECLASS="replaceable"><I>list</I></CODE> is appended to the array of values in the class<CODECLASS="replaceable"><I>X</I></CODE> in the first case and to the class <CODECLASS="literal">{XX}</CODE> inthe second.[1]</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[1] Note that when a class name is a single character, it may bereferenced with or without enclosing curly braces, with nochange in meaning. That is, <CODECLASS="literal">CX</CODE> and <CODECLASS="literal">C{X}</CODE> areequivalent.</P></BLOCKQUOTE><PCLASS="para">Multiple declarations of the same named class may coexistin the configuration file.Each declaration after the first appends its string elements to the preceding list. That is,</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">CX string1 string2CX string3 string4</PRE></BLOCKQUOTE></P><PCLASS="para">produces the same class as does</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">CX string1 string2 string3 string4</PRE></BLOCKQUOTE></P><PCLASS="para">Both create a class with four strings as elements.</P><PCLASS="para">When an array of values is built, whitespace is used toseparate one value from another. Whitespace is defined bythe C language <EMCLASS="emphasis">isspace</EM>(3) routine and usually includesthe space, tab, newline, carriage-return, and form-feed characters.Each line of text assigned to a class is broken up by <EMCLASS="emphasis">sendmail</EM>into whitespace delimited words. When a lineis indented with a space or a tab, that line is joined by <EMCLASS="emphasis">sendmail</EM>to the preceding line. Thus the following three declarationsalso append four words to the class <CODECLASS="literal">X</CODE>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">CX string1CX string2CX string3      string4   <ICLASS="lineannotation"><IMGSRC="../chars/uarr.gif"ALT="-^"></I>   <ICLASS="lineannotation">tab</I></PRE></BLOCKQUOTE></P><PCLASS="para">Words that are added to a class cannot be removed after <EMCLASS="emphasis">sendmail</EM>has read them. Instead, they must be edited out of whatever fileor program produced them, and the <EMCLASS="emphasis">sendmail</EM> daemon mustbe killed and restarted.</P><PCLASS="para">The list of words in a class declaration can include macros. For examplethe following assigns the same values to class <CODECLASS="literal">X</CODE> as didthe above example:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">D{LIST} string1 string2 string3 string4CX ${LIST}</PRE></BLOCKQUOTE></P><PCLASS="para">Macros used in class declarations are expanded when the configuration fileis read. Deferred macros (those with the <CODECLASS="literal">$&amp;</CODE> prefix) may not be usedin class declarations. But conditionals may:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">CX ourhost$?{Domain}.${Domain}$.</PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-36073"></A></P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="SML2-CH-32-SECT-1-2">32.1.2 The F Class Command</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="SML2-CH-32-IX-F-CONFIGURATION-COMMAND"></A>The <CODECLASS="literal">F</CODE> form of the class configuration command allows valuesto be appended to a class from outside the configuration file.In general, the file command looks like either of the following:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">F<CODECLASS="replaceable"><I>X file           <IMGSRC="../chars/larr.gif"ALT="&lt;-"></I></CODE> values from a disk fileF<CODECLASS="replaceable"><I>X </I></CODE>|<CODECLASS="replaceable"><I>program       <IMGSRC="../chars/larr.gif"ALT="&lt;-"></I></CODE> values via another program (V8.7 and above, or IDA)</PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="literal">F</CODE> is immediately followed by the name of the class. This can be either a single-character name, as shown, or a multicharacter name.The name is followed by optional whitespace and then the name ofa file or program.If the file or program begins with the pipecharacter (<CODECLASS="literal">|</CODE>), it is taken to be the name ofa program to run.[2]Otherwise, it is taken to be the name of a fileto read.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[2] This was removed from V8.1 <EMCLASS="emphasis">sendmail</EM> because it presenteda security risk. It was restored to V8.7 because <EMCLASS="emphasis">sendmail</EM> nowchecks permissions more carefully and <EMCLASS="emphasis">exec</EM>(2)'s the program itselfinstead of using the old, buggy <EMCLASS="emphasis">popen</EM>(3) approach of yore.</P></BLOCKQUOTE><PCLASS="para">If SCANF was defined when <EMCLASS="emphasis">sendmail</EM> was compiled(see <ACLASS="xref"HREF="ch18_08.htm#SML2-CH-18-SECT-8-39"TITLE="">Section 18.8.39, SCANF</A>),each line that is read from a file or programis parsed by the C language <EMCLASS="emphasis">scanf</EM>(3) library routine.The formatting pattern given to <EMCLASS="emphasis">scanf</EM>(3) is <CODECLASS="literal">%s</CODE>,which tells <EMCLASS="emphasis">scanf</EM>(3) to read only the first whitespace-delimited word from each line of text.The file is opened for readingor the program is executed when the configuration file is processed.If either cannot be opened (for reading or execution), <EMCLASS="emphasis">sendmail</EM><EMCLASS="emphasis">syslog</EM>(3)'s the following error and ignores that configuration command:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">cannot open <EMCLASS="emphasis">what</EM>: <CODECLASS="replaceable"><I>why       </I></CODE><ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> file</I>cannot exec <EMCLASS="emphasis">what</EM>: <CODECLASS="replaceable"><I>why       </I></CODE><ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> program</I></PRE></BLOCKQUOTE></P><PCLASS="para">Here, the <EMCLASS="emphasis">what</EM> is the exact text that was given in the configurationfile, and <CODECLASS="replaceable"><I>why</I></CODE> is the text of a system error.</P><PCLASS="para">For the file form only,if the file may optionally not exist, you can prefix its namewith a <CODECLASS="literal">-o</CODE> switch:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">F<CODECLASS="replaceable"><I>X -o file           </I></CODE><ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> okay for file to not exist</I></PRE></BLOCKQUOTE></P><PCLASS="para">This tells <EMCLASS="emphasis">sendmail</EM> to remain silent if the file does not exit.The <CODECLASS="literal">-o</CODE> switch is useful when a configuration file isshared by several machines, only some of which need the external classmacro file.</P><PCLASS="para">The <CODECLASS="literal">C</CODE> and <CODECLASS="literal">F</CODE> forms of the configuration command may beintermixed for any given class name. For example, consider a filenamed <EMCLASS="emphasis">/etc/local/names</EM> with the following contents:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">string3string4</PRE></BLOCKQUOTE></P><PCLASS="para">The following two configuration commands add the samefour strings to the class <CODECLASS="literal">X</CODE> as did the <CODECLASS="literal">C</CODE> command alonein the previous section:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">CX string1 string2FX /etc/local/names</PRE></BLOCKQUOTE></P><PCLASS="para">This creates a class with four strings as array elements. Whitespacedelimits one string from the others in the <CODECLASS="literal">C</CODE> line declaration,and they are stored in the order in which they are listed.The file <EMCLASS="emphasis">/etc/local/names</EM> is then opened and read,and each of the two words in that file is appended to the two wordsthat are already in the class.&#13;</P><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="SML2-CH-32-SECT-1-2-1">32.1.2.1 scanf(3) variations</A></H4><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-36140"></A>The file form of the class configuration commandallows different formatting patterns to be used with <EMCLASS="emphasis">scanf</EM>(3).[3]But the program form does notallow any variation, and so its <EMCLASS="emphasis">scanf</EM>(3) pattern is always <CODECLASS="literal">%s</CODE>,which tells <EMCLASS="emphasis">scanf</EM>(3) to read only the first whitespace-delimitedword from each line of text:</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[3] The version of <EMCLASS="emphasis">sendmail</EM> that you are using must have been compiledwith SCANF defined (see <ACLASS="xref"HREF="ch18_08.htm#SML2-CH-18-SECT-8-39"TITLE="">Section 18.8.39</A>)for <EMCLASS="emphasis">scanf</EM>(3) to be usable from within the configuration file.</P></BLOCKQUOTE><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">F<CODECLASS="replaceable"><I>X file pat       </I></CODE><ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> with scanf(3) pattern</I>F<CODECLASS="replaceable"><I>X </I></CODE>|<CODECLASS="replaceable"><I>program       </I></CODE><ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> always ``%s''</I></PRE></BLOCKQUOTE></P><PCLASS="para">If the optional <CODECLASS="literal">pat</CODE> argument to the file form is missing, the patterngiven to <EMCLASS="emphasis">scanf</EM>(3) is <CODECLASS="literal">%s</CODE>.The <CODECLASS="literal">pat</CODE> argument is separated from the <CODECLASS="literal">file</CODE>argument by one or more spaces or tabs. It should not be quoted, and it consistsof everything from its first character to the end of the line.Internally, <EMCLASS="emphasis">scanf</EM>(3) is called with:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">sscanf(result, pat, input)</PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="literal">result</CODE> is the string array element to be addedto the class definition. The <CODECLASS="literal">pat</CODE> is the <EMCLASS="emphasis">scanf</EM>(3) pattern,and <CODECLASS="literal">input</CODE> is the line of text read from the file.[4]</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[4] Avoid using a bare <CODECLASS="literal">%s</CODE> as the pattern. Doing so risks overflowinginternal <EMCLASS="emphasis">sendmail</EM> buffers. Instead specify a limited stringlength with something like <CODECLASS="literal">%.40s</CODE>.</P></BLOCKQUOTE><PCLASS="para">After each line of text is read from the file and filtered withthe <EMCLASS="emphasis">scanf</EM>(3) pattern, it is further subdivided by <EMCLASS="emphasis">sendmail</EM>into individual words. That subdividing uses whitespace (asdefined by the C language <EMCLASS="emphasis">isspace</EM>(3) routine) to separatewords. Each separate word is then appended as an individual elementto the class array.</P><PCLASS="para">Consider the contents of the following file named <EMCLASS="emphasis">/etc/local/myhosts</EM>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">server1 server2 # my two netsuuhost          # my uucp alias#mailhost       # mail server alias (retired 06,23,91)</PRE></BLOCKQUOTE></P><PCLASS="para">This file contains three hostname aliases to be addedto a class, say <CODECLASS="literal">H</CODE>. The following configuration commanddoes just that:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">FH /etc/local/myhosts %[^\#]</PRE></BLOCKQUOTE></P><PCLASS="para">The pattern <CODECLASS="literal">%[^#]</CODE> causes <EMCLASS="emphasis">scanf</EM>(3) to read all charactersin each line up to, but not including, the first <CODECLASS="literal">#</CODE> character.The first line includes two white-space delimited wordsthat are appended to the class <CODECLASS="literal">H</CODE>. The second linecontains one word, and the third contains none. The <CODECLASS="literal">\</CODE>character prevents <EMCLASS="emphasis">sendmail</EM> from treating the <CODECLASS="literal">#</CODE> as acomment character.<ACLASS="indexterm"NAME="AUTOID-36197"></A><ACLASS="indexterm"NAME="AUTOID-36198"></A><ACLASS="indexterm"NAME="AUTOID-36199"></A>&#13;</P></DIV></DIV></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch31_10.htm"TITLE="31.10 Alphabetized Reference"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 31.10 Alphabetized Reference"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="sendmail"><IMGSRC="../gifs/txthome.gif"ALT="sendmail"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch32_02.htm"TITLE="32.2 Access Class in Rules"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 32.2 Access Class in Rules"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">31.10 Alphabetized Reference</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">32.2 Access Class in Rules</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><PCLASS="nav"><FONTSIZE="-1">[ <AHREF="../index.htm"TITLE="The Networking CD Bookshelf">Library Home</A> | <AHREF="../dnsbind/index.htm"TITLE="DNS &amp; BIND">DNS &amp; BIND</A> | <AHREF="../tcpip/index.htm"TITLE="TCP/IP Network Administration">TCP/IP</A> | <AHREF="index.htm"TITLE="sendmail">sendmail</A> | <AHREF="../smdref/index.htm"TITLE="sendmail Desktop Reference">sendmail Reference</A> | <AHREF="../firewall/index.htm"TITLE="Building Internet Firewalls">Firewalls</A> | <AHREF="../puis/index.htm"TITLE="Practical UNIX &amp; Internet Security">Practical Security</A> ]</FONT></P></DIV></BODY></HTML>