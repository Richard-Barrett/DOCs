<HTML><HEAD><TITLE>[Chapter 32] 32.2 Access Class in Rules</TITLE><METANAME="DC.title"CONTENT="sendmail"><METANAME="DC.creator"CONTENT="Bryan Costales &amp; Eric Allman"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1999-01-06T20:20:32Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-222-0"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch32_01.htm"TITLE="32. Class Macros"><LINKREL="prev"HREF="ch32_01.htm"TITLE="32.1 Class Configuration Commands"><LINKREL="next"HREF="ch32_03.htm"TITLE="32.3 Class with m4"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="sendmail"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,65"HREF="index.htm"ALT="sendmail"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/ssrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch32_01.htm"TITLE="32.1 Class Configuration Commands"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 32.1 Class Configuration Commands"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 32<BR>Class Macros</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch32_03.htm"TITLE="32.3 Class with m4"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 32.3 Class with m4"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="SML2-CH-32-SECT-2">32.2 Access Class in Rules</A></H2><PCLASS="para">Class arrays are useful only in the LHS of rules.The <EMCLASS="emphasis">sendmail</EM> program offers two ways to use them:<CODECLASS="literal">$=X</CODE> The <CODECLASS="literal">$=</CODE> prefix causes <EMCLASS="emphasis">sendmail</EM> to seek a matchbetween the workspace and one of the words in a class list.[5]<CODECLASS="literal">$~X</CODE> The <CODECLASS="literal">$~</CODE> prefix causes <EMCLASS="emphasis">sendmail</EM> to accept onlyan entry in the workspace that does not match any of the wordsin a class list.&#13;</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[5] Under V8, words in a class can be multitokened.</P></BLOCKQUOTE><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="SML2-CH-32-SECT-2-1">32.2.1 Matching Any in a Class: $=</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="SML2-CH-32-IX-PREFIXES-DOLLAR-PREFIXES-EQUAL"></A><ACLASS="indexterm"NAME="AUTOID-36218"></A>The list of words that form a class array are searched by prefixingthe class name with the characters <CODECLASS="literal">$=</CODE>.</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">R$=X    $@&lt;$1&gt;</PRE></BLOCKQUOTE></P><PCLASS="para">In this rule, the expression <CODECLASS="literal">$=X</CODE>causes <EMCLASS="emphasis">sendmail</EM> to search a class forthe word that is in the current workspace.If <EMCLASS="emphasis">sendmail</EM> finds that the word has been defined, and if itfinds that the word is associated with the class <CODECLASS="literal">X</CODE>, then a match is made.</P><PCLASS="para">The matching wordis then made available for use in the RHS rewriting.Because the value of <CODECLASS="literal">$=X</CODE> is not known ahead of time, thematched word can be referenced in the RHS with the <CODECLASS="literal">$</CODE><CODECLASS="replaceable"><I>digit</I></CODE>positional operator.</P><PCLASS="para">Consider the following example. Two classes have been declaredelsewhere in the configuration file. The first, <CODECLASS="literal">w</CODE>,  contains all thepossible names for the local host:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Cw localhost mailhost server1 server2</PRE></BLOCKQUOTE></P><PCLASS="para">The second, <CODECLASS="literal">D</CODE>, contains the domain names of the twodifferent networks on which this host sits:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">CD domain1 domain2</PRE></BLOCKQUOTE></P><PCLASS="para">If the object of a rule is to match any variation on the localhostname at either of the domains and to rewrite the resultas the official hostname at the appropriate domain, the followingrule can be used:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">R $=w . $=D    $@ $w . $2     make any variations &quot;official&quot;</PRE></BLOCKQUOTE></P><PCLASS="para">If the workspace contains the tokenized address <EMCLASS="emphasis">server1.domain2</EM>,<EMCLASS="emphasis">sendmail</EM> first checks to see whether the word <EMCLASS="emphasis">server1</EM>has been defined as part of the class <CODECLASS="literal">w</CODE>. If it has,the dot in the rule and workspace match each other, and then <EMCLASS="emphasis">sendmail</EM>looks up <EMCLASS="emphasis">domain2</EM>.</P><PCLASS="para">If both the host part and the domain part are found to be members oftheir respective classes,the RHS of the rule is called to rewrite the workspace.The <CODECLASS="literal">$2</CODE> in the workspace corresponds to the <CODECLASS="literal">$=D</CODE> in the LHS.The <CODECLASS="literal">$=D</CODE> matches the <EMCLASS="emphasis">domain2</EM> from the workspace.So that text is used to rewrite the new workspace.</P><PCLASS="para">Note that prior to V8 <EMCLASS="emphasis">sendmail</EM>,only words could be in classes. When <EMCLASS="emphasis">sendmail</EM> looked upthe workspace to check for a match to a class, it looked up onlya single token. That is, if the workspace contained <EMCLASS="emphasis">server1.domain2.edu</EM>,the LHS expression <CODECLASS="literal">$=D</CODE> would cause <EMCLASS="emphasis">sendmail</EM> tolook up only the <EMCLASS="emphasis">domain2</EM> part. The <EMCLASS="emphasis">.edu</EM> part wouldnot be looked up, and consequently the rule would fail.</P><PCLASS="para">Note that the V8 and IDA versions of <EMCLASS="emphasis">sendmail</EM> allow multitoken class matching.<ACLASS="indexterm"NAME="AUTOID-36266"></A>&#13;</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="SML2-CH-32-SECT-2-2">32.2.2 Matching Any Not in a Class: $~</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="SML2-CH-32-IX-PREFIXES-DOLLAR-PREFIXES-TILDE"></A>The inverse of the <CODECLASS="literal">$=</CODE> prefix is the <CODECLASS="literal">$~</CODE> prefix.It is used to match any word inthe workspace that is not in a class.It is seldom used in production configurationfiles; but when the need for its properties arises, itcan be very useful.</P><PCLASS="para">To illustrate, consider a network with three PC machines on it.The PC machines cannot receive mail, whereas all the other machines on the network can. If the list of PC hostnames is defined inthe class <CODECLASS="literal">{PChosts}</CODE>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">C{PChosts} pc1 pc2 pc3</PRE></BLOCKQUOTE></P><PCLASS="para">Then a rule can be designed that will match any but a PC hostname:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">R$*&lt;@$~{PChosts}&gt;     $:$1&lt;@$2&gt;       filter out the PC hosts</PRE></BLOCKQUOTE></P><PCLASS="para">Here the LHS looks for an address of the form</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">&quot;user&quot; &quot;&lt;&quot; &quot;@&quot; &quot;<ICLASS="lineannotation">not-a-PC</I>&quot; &quot;&gt;&quot;</PRE></BLOCKQUOTE></P><PCLASS="para">This matches only if the <CODECLASS="literal">@</CODE> token is <EMCLASS="emphasis">not</EM> followedby one of the PC hosts listed in class <CODECLASS="literal">{PChosts}</CODE>.If the part of the workspace that is tested against the list providedby <CODECLASS="literal">$~</CODE> is found in that list, then the match fails.</P><PCLASS="para">Note that the <CODECLASS="literal">$</CODE><CODECLASS="replaceable"><I>digit</I></CODE> positional operator in the RHS (the <CODECLASS="literal">$2</CODE>above) references the part of the workspace that doesn't match. If theworkspace contains <EMCLASS="emphasis">ben&lt;@philly&gt;</EM>, the <CODECLASS="literal">$2</CODE>references the <EMCLASS="emphasis">philly</EM>.</P><PCLASS="para">Also note that multitoken expressions in the workspace will not match, as youmight expect. That is, for multitoken expressions in the workspace,<CODECLASS="literal">$~</CODE> is <EMCLASS="emphasis">not</EM> the opposite of <CODECLASS="literal">$=</CODE>. To illustrate,consider this miniconfiguration file:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">CX hostA.comR$~X    $@ $1 is not in XR$=X    $@ yes $1 is in XR$*     $@ neither</PRE></BLOCKQUOTE></P><PCLASS="para">Now feed a multitokened address through these rules in rule testingmode:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>/usr/lib/sendmail -Cx.cf -bt</B></CODE>ADDRESS TEST MODE (ruleset 3 NOT automatically invoked)Enter &lt;ruleset&gt; &lt;address&gt;&gt; <CODECLASS="userinput"><B>0 hostC.com</B></CODE>rewrite: ruleset   0   input: hostC . comrewrite: ruleset   0 returns: neither</PRE></BLOCKQUOTE></P><PCLASS="para">&#13;Whenever <CODECLASS="literal">$~</CODE> is given a multitoken expression, it will <EMCLASS="emphasis">always</EM>find the expression in the class and so will <EMCLASS="emphasis">always</EM> fail.<ACLASS="indexterm"NAME="AUTOID-36313"></A>&#13;</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="SML2-CH-32-SECT-2-3">32.2.3 Backup and Retry</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-36317"></A>Multitoken matching operators,such as <CODECLASS="literal">$+</CODE>, always try to match the least that they can(see <ACLASS="xref"HREF="ch28_05.htm#SML2-CH-28-SECT-5-2"TITLE="Backup and Retry">Section 28.5.2, "Backup and Retry"</A>).Such a simple-minded approach could lead to problems in matching (or not matching) classes in the LHS.However, the ability of <EMCLASS="emphasis">sendmail</EM> to backup and retry alleviatesthis problem.For example,consider the following three tokens in the workspace:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">&quot;A&quot; &quot;.&quot; &quot;B&quot;</PRE></BLOCKQUOTE></P><PCLASS="para">and consider the following LHS rule:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">R$+ $=X $*</PRE></BLOCKQUOTE></P><PCLASS="para">Because the <CODECLASS="literal">$+</CODE> tries to match the minimum, it firstmatches only the <CODECLASS="literal">A</CODE> in the workspace. The <CODECLASS="literal">$=X</CODE> thentries to match the <CODECLASS="literal">.</CODE> to the class <CODECLASS="literal">X</CODE>. If thismatch fails, <EMCLASS="emphasis">sendmail</EM> backs up and tries again.</P><PCLASS="para">The next time through, the <CODECLASS="literal">$+</CODE> matches the<CODECLASS="literal">A.</CODE>, and the <CODECLASS="literal">$=X</CODE> tries to match the<CODECLASS="literal">B</CODE> in the workspace. If <CODECLASS="literal">B</CODE> is not in the class<CODECLASS="literal">X</CODE>, the entire LHS fails.</P><PCLASS="para">The ability of the <EMCLASS="emphasis">sendmail</EM> program to back up and retryLHS matches eliminates much of the ambiguity from rule design.The multitoken matching operators try to match the minimumbut match more if necessary for the whole LHS to match.&#13;</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="SML2-CH-32-SECT-2-4">32.2.4 Class Name Hashing Algorithm</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-36346"></A><ACLASS="indexterm"NAME="AUTOID-36349"></A>When comparing a token in the workspace to a list of words ina class array, <EMCLASS="emphasis">sendmail</EM> tries to be as efficientas possible. Instead of comparing the token to each word inthe list, one by one, it simply looks up the token in itsinternal <EMCLASS="emphasis">string pool</EM>. If the token is in the pooland if the pool listing is marked as belonging to theclass being sought, then a match is found.</P><PCLASS="para">The comparison of tokens to entries in the string pool is case-insensitive.Each token is converted to lowercase before thecomparison, and all strings in the string pool are stored inlowercase.</P><PCLASS="para">Because strings are stored in the pool as text with a type,the same string value may be used for different types with no conflict.For example, the symbolic name of a delivery agent and a wordin a class may be identical, yet they will still be separate entries inthe string pool.</P><PCLASS="para">The <EMCLASS="emphasis">sendmail</EM> program uses a simple hashing algorithmto ensure that the token is compared to the fewest possiblestrings in the string pool. In normal circumstances that algorithmperforms its job well. At sites with unusually large classes(perhaps a few thousand hosts in a class of host aliases),it may be necessary to tune the hashing algorithm. The codeis in the file <EMCLASS="emphasis">stab.c</EM> with the <EMCLASS="emphasis">sendmail</EM> source.The size of the symbol table hashis set by the constant STABSIZE.</P><PCLASS="para">As an alternative to large class arrays,<EMCLASS="emphasis">sendmail</EM> offers external database macros (see <ACLASS="xref"HREF="ch33_01.htm#SML2-CH-33-SECT-1"TITLE="Enable at Compile Time">Section 33.1, "Enable at Compile Time"</A>).No information is currently available contrasting the efficiency ofthe various approaches.&#13;</P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch32_01.htm"TITLE="32.1 Class Configuration Commands"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 32.1 Class Configuration Commands"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="sendmail"><IMGSRC="../gifs/txthome.gif"ALT="sendmail"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch32_03.htm"TITLE="32.3 Class with m4"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 32.3 Class with m4"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">32.1 Class Configuration Commands</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">32.3 Class with m4</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><PCLASS="nav"><FONTSIZE="-1">[ <AHREF="../index.htm"TITLE="The Networking CD Bookshelf">Library Home</A> | <AHREF="../dnsbind/index.htm"TITLE="DNS &amp; BIND">DNS &amp; BIND</A> | <AHREF="../tcpip/index.htm"TITLE="TCP/IP Network Administration">TCP/IP</A> | <AHREF="index.htm"TITLE="sendmail">sendmail</A> | <AHREF="../smdref/index.htm"TITLE="sendmail Desktop Reference">sendmail Reference</A> | <AHREF="../firewall/index.htm"TITLE="Building Internet Firewalls">Firewalls</A> | <AHREF="../puis/index.htm"TITLE="Practical UNIX &amp; Internet Security">Practical Security</A> ]</FONT></P></DIV></BODY></HTML>