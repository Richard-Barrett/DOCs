<HTML><HEAD><TITLE>[Chapter 37] 37.5 Reference in Numerical Order</TITLE><METANAME="DC.title"CONTENT="sendmail"><METANAME="DC.creator"CONTENT="Bryan Costales &amp; Eric Allman"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1999-01-06T22:03:13Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-222-0"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch37_01.htm"TITLE="37. Debugging with -d"><LINKREL="prev"HREF="ch37_04.htm"TITLE="37.4 Pitfalls"><LINKREL="next"HREF="ch38_01.htm"TITLE="38. Rule-Set Testing with -bt"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="sendmail"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,65"HREF="index.htm"ALT="sendmail"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/ssrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch37_04.htm"TITLE="37.4 Pitfalls"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 37.4 Pitfalls"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 37<BR>Debugging with -d</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="CHAPTER"HREF="ch38_01.htm"TITLE="38. Rule-Set Testing with -bt"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 38. Rule-Set Testing with -bt"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="SML2-CH-37-SECT-5">37.5 Reference in Numerical Order</A></H2><PCLASS="para"><ACLASS="indexterm"NAME="SML2-CH-37-IX-D-SWITCH-COMPLETE-LIST-OF-SWITCHES"></A>The <EMCLASS="emphasis">sendmail</EM> debugging switches vary fromvendor to vendor and from version to version. This section isspecific to V8.8.0 <EMCLASS="emphasis">sendmail</EM>.These switchesare perhaps best used with a copy of the <EMCLASS="emphasis">sendmail</EM> source byyour side. Be further advised that many of the internal detailsshown here will change as <EMCLASS="emphasis">sendmail</EM> continues to evolve andimprove.</P><PCLASS="para">In this section we provide a detailed description of each combinationof debugging category and level. In<ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-TAB-1"TITLE="Debugging Switches by Category">Table 37.2</A>each debugging category and level that we consider useful forthe system administrator who is trying to solve a mail problemis marked with &quot;useful.&quot;The others provide such complex and sophisticated output thatthey may be of use only to those with access to the source.Those marked in the section column with a &quot;n/a&quot; are debuggingswitches that were introduced in the <EMCLASS="emphasis">sendmail</EM> source too latefor documentation in this edition. All are presented in ascendingnumerical order, first by category, then by level within each category. </P><PCLASS="para">Note that for all categories a <CODECLASS="literal">-d</CODE><EMCLASS="emphasis">category</EM> and a<CODECLASS="literal">-d</CODE><EMCLASS="emphasis">category</EM><CODECLASS="literal">.1</CODE> are always equivalent.</P><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="SML2-CH-37-TAB-1">Table 37.2: Debugging Switches by Category</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Category</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1"></TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">It is</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Description</TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d0.1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-1"TITLE="">Section 37.5.1, -d0.1</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">useful</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Print version information</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d0.4</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-2"TITLE="">Section 37.5.2, -d0.4</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">useful</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Our name and aliases</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d0.10</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-3"TITLE="">Section 37.5.3, -d0.10</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Operating System defines</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d0.15</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-4"TITLE="">Section 37.5.4, -d0.15</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">useful</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Dump delivery agents</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d0.20</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-5"TITLE="">Section 37.5.5, -d0.20</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">useful</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Print network address of each interface</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d0.22</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-6"TITLE="">Section 37.5.6, -d0.22</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Show uname() failure</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d0.40</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-7"TITLE="">Section 37.5.7, -d0.40</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Show scanning of interfaces</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d0.44</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-8"TITLE="">Section 37.5.8, -d0.44</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Print addresses of strings</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d0.90</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-9"TITLE="">Section 37.5.9, -d0.90</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">obsolete</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Print first 10 rule sets</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d1.1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-10"TITLE="">Section 37.5.10, -d1.1</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Show sender information</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d1.5</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-11"TITLE="">Section 37.5.11, -d1.5</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Dump the sender address</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d2.1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-12"TITLE="">Section 37.5.12, -d2.1</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">End with finis()</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d2.9</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-13"TITLE="">Section 37.5.13, -d2.9</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Show file descriptors with <EMCLASS="emphasis">dumpfd</EM>()</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d3.1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-14"TITLE="">Section 37.5.14, -d3.1</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Print the load average</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d3.5</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-15"TITLE="">Section 37.5.15, -d3.5</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Print load average</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d3.15</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-16"TITLE="">Section 37.5.16, -d3.15</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Print three load averages</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d3.20</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-17"TITLE="">Section 37.5.17, -d3.20</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Show offset for load average</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d3.30</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-18"TITLE="">Section 37.5.18, -d3.30</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Show result of decision to queue</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d4.80</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-19"TITLE="">Section 37.5.19, -d4.80</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">useful</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Trace enoughspace()</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d5.4</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-20"TITLE="">Section 37.5.20, -d5.4</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Tick for queued events</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d5.5</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-21"TITLE="">Section 37.5.21, -d5.5</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Events set and cleared</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d5.6</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-22"TITLE="">Section 37.5.22, -d5.6</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Show events triggered</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d6.1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-23"TITLE="">Section 37.5.23, -d6.1</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">useful</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Show failed mail</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d6.5</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-24"TITLE="">Section 37.5.24, -d6.5</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">The current error state</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d6.20</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-25"TITLE="">Section 37.5.25, -d6.20</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Show sender of return to sender</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d7.1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-26"TITLE="">Section 37.5.26, -d7.1</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">The Queue filename</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d7.2</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-27"TITLE="">Section 37.5.27, -d7.2</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Show assigned queue filename</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d7.9</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-28"TITLE="">Section 37.5.28, -d7.9</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Dump file descriptor for the qf file</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d7.20</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-29"TITLE="">Section 37.5.29, -d7.20</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Show queue names being tried</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d8.1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-30"TITLE="">Section 37.5.30, -d8.1</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">useful</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Failure of MX search (low level)</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d8.2</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-31"TITLE="">Section 37.5.31, -d8.2</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">useful</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Call to getcanonname(3)</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d8.3</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-32"TITLE="">Section 37.5.32, -d8.3</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">useful</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Trace dropped local hostnames</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d8.5</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-33"TITLE="">Section 37.5.33, -d8.5</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">useful</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Hostname being tried in getcanonname(3)</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d8.7</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-34"TITLE="">Section 37.5.34, -d8.7 </A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">useful</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Yes/no response to -d8.5</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d8.8</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-35"TITLE="">Section 37.5.35, -d8.8</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">useful</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">MX lookup gets wrong type</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d8.20</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-36"TITLE="">Section 37.5.36, -d8.20</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Inconsistency in returned information</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d9.1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-37"TITLE="">Section 37.5.37, -d9.1</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Canonify hostname and RFC1413 queries</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d9.3</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-38"TITLE="">Section 37.5.38, -d9.3</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Show raw RFC1413 reply</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d9.10</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-39"TITLE="">Section 37.5.39, -d9.10</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Show RFC1413 query being sent</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d10.1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-40"TITLE="">Section 37.5.40, -d10.1</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Show recipient delivery</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d10.2</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-41"TITLE="">Section 37.5.41, -d10.2</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Dump controlling user's address</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d10.5</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-42"TITLE="">Section 37.5.42, -d10.5</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Show don't send to MeToo address</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d10.100</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-43"TITLE="">Section 37.5.43, -d10.100</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Predelivery file descriptor dump</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d11.1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-44"TITLE="">Section 37.5.44, -d11.1</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">useful</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Trace delivery</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d11.2</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-45"TITLE="">Section 37.5.45, -d11.2</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">useful</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Show the uid/gid running as during delivery</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d11.20</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-46"TITLE="">Section 37.5.46, -d11.20</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Show tried D=  directories</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d12.1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-47"TITLE="">Section 37.5.47, -d12.1</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">useful</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Show mapping of relative host</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d13.1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-48"TITLE="">Section 37.5.48, -d13.1</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">useful</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Show delivery</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d13.5</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-49"TITLE="">Section 37.5.49, -d13.5</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Show addresses that we should not send to</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d13.6</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">n/a</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Trace envelope stripping, dropping, and moving</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d13.10</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-50"TITLE="">Section 37.5.50, -d13.10</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Trace sendenvelope()</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d13.20</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-51"TITLE="">Section 37.5.51, -d13.20</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Show final mode</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d13.21</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">n/a</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Show final send queue</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d13.25</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">n/a</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Watch owner deliveries</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d13.29</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-52"TITLE="">Section 37.5.52, -d13.29</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Show autoqueueing</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d13.30</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-53"TITLE="">Section 37.5.53, -d13.30</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Show envelopes being split</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d14.2</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-54"TITLE="">Section 37.5.54, -d14.2</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Show header field commas</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d15.1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-55"TITLE="">Section 37.5.55, -d15.1</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Show network get request activity</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d15.2</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-55"TITLE="">Section 37.5.55</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Incoming connections</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d15.101</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-57"TITLE="">Section 37.5.57, -d15.101</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Kernel TCP debugging</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d16.1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-58"TITLE="">Section 37.5.58, -d16.1</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Outgoing Connections</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d16.101</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-59"TITLE="">Section 37.5.59, -d16.101</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Kernel TCP debugging</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d17.1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-60"TITLE="">Section 37.5.60, -d17.1</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">List MX hosts</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d17.9</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-61"TITLE="">Section 37.5.61, -d17.9</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Show randomizing MX records</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d18.1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-62"TITLE="">Section 37.5.62, -d18.1</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Show SMTP replies</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d18.2</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-63"TITLE="">Section 37.5.63, -d18.2</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Show entry to MAIL From:</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d18.100</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-64"TITLE="">Section 37.5.64, -d18.100</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Pause on SMTP read error</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d19.1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-65"TITLE="">Section 37.5.65, -d19.1</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Show ESMTP MAIL and RCPT parameters</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d20.1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-66"TITLE="">Section 37.5.66, -d20.1</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">useful</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Show resolving delivery agent: parseaddr()</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d21.1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-67"TITLE="">Section 37.5.67, -d21.1</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Trace rewriting rules</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d21.2</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-68"TITLE="">Section 37.5.68, -d21.2</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">useful</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Trace $&amp; macros</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d21.3</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-69"TITLE="">Section 37.5.69, -d21.3</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Show subroutine calls</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d21.4</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-70"TITLE="">Section 37.5.70, -d21.4</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Result after rewriting by a rule</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d21.10</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-71"TITLE="">Section 37.5.71, -d21.10</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Announce failure</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d21.12</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-72"TITLE="">Section 37.5.72, -d21.12</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Announce success and show LHS</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d21.15</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-73"TITLE="">Section 37.5.73, -d21.15</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Show $digit replacement</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d21.35</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-74"TITLE="">Section 37.5.74, -d21.35</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Show token by token LHS matching</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d21.36</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-75"TITLE="">Section 37.5.75, -d21.36</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Trace class matching in the LHS</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d22.1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-76"TITLE="">Section 37.5.76, -d22.1</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">useful</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Trace tokenizing an address: prescan()</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d22.11</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-77"TITLE="">Section 37.5.77, -d22.11</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">useful</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Show address before prescan</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d22.12</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-78"TITLE="">Section 37.5.78, -d22.12</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Show address after prescan</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d22.36</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-79"TITLE="">Section 37.5.79, -d22.36</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Show each token</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d22.101</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-80"TITLE="">Section 37.5.80, -d22.101</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Trace low-level state machine</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d24.4</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-81"TITLE="">Section 37.5.81, -d24.4</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Trace address allocation</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d24.5</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-82"TITLE="">Section 37.5.82, -d24.5</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Trace assembly of tokens</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d24.6</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-83"TITLE="">Section 37.5.83, -d24.6</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Show result of buildaddr()</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d25.1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-84"TITLE="">Section 37.5.84, -d25.1</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">useful</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Trace &quot;sendtolist&quot;</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d26.1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-85"TITLE="">Section 37.5.85, -d26.1</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Trace recipient queueing</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d26.8</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-86"TITLE="">Section 37.5.86, -d26.8</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Trace self-destructing addresses</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d26.10</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-87"TITLE="">Section 37.5.87, -d26.10</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Show full send queue in testselfdestruct</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d27.1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-88"TITLE="">Section 37.5.88, -d27.1</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">useful</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Trace aliasing</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d27.2</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-89"TITLE="">Section 37.5.89, -d27.2</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">useful</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Include file, self-reference, error on home</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d27.3</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-90"TITLE="">Section 37.5.90, -d27.3</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">useful</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Forwarding path and alias wait</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d27.4</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-91"TITLE="">Section 37.5.91, -d27.4</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">useful</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Print not safe</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d27.5</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-92"TITLE="">Section 37.5.92, -d27.5</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Trace aliasing with printaddr()</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d27.8</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-93"TITLE="">Section 37.5.93, -d27.8</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Show setting up an alias map</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d27.9</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-94"TITLE="">Section 37.5.94, -d27.9</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">useful</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Show uid/gid changes with :include: reads</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d27.14</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-95"TITLE="">Section 37.5.95, -d27.14</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Show controlling user that caused change in identity</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d27.20</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-96"TITLE="">Section 37.5.96, -d27.20</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Show how alias will be looked up in a map</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d28.1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-97"TITLE="">Section 37.5.97, -d28.1</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">useful</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Trace user database transactions</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d28.2</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-98"TITLE="">Section 37.5.98, -d28.2</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Show no match</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d28.4</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-99"TITLE="">Section 37.5.99, -d28.4</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Show result of lookup</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d28.8</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-100"TITLE="">Section 37.5.100, -d28.8</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Try hes_getmailhost()</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d28.16</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-101"TITLE="">Section 37.5.101, -d28.16</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">MX records for forward host</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d28.20</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-102"TITLE="">Section 37.5.102, -d28.20</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Show udb lookup</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d28.80</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-103"TITLE="">Section 37.5.103, -d28.80</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Preview lookups</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d29.1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-104"TITLE="">Section 37.5.104, -d29.1</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Special rewrite of local recipient</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d29.4</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-105"TITLE="">Section 37.5.105, -d29.4</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">useful</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Trace fuzzy matching</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d29.5</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-106"TITLE="">Section 37.5.106, -d29.5</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Preview rule set 5</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d29.7</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-107"TITLE="">Section 37.5.107, -d29.7</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Show overaliasing fuzzy fallback</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d30.1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-108"TITLE="">Section 37.5.108, -d30</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Trace processing of header</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d30.2</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-109"TITLE="">Section 37.5.109, -d30.2</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Eat from</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d30.3</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-110"TITLE="">Section 37.5.110, -d30.3</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Show a to-less header being added</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d30.35</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-111"TITLE="">Section 37.5.111, -d30.35</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Trace collect states</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d30.94</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-112"TITLE="">Section 37.5.112, -d30.94</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Trace collect states</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d31.2</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-113"TITLE="">Section 37.5.113, -d31.2</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">useful</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Trace processing of headers</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d31.6</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-14"TITLE="">Section 37.5.14</A>1_6</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Is header known?</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d32.1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-115"TITLE="">Section 37.5.115, -d32.1</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Show collected headers</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d32.2</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-116"TITLE="">Section 37.5.116, -d32.2</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Show ARPA mode with setsender</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d33.1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-117"TITLE="">Section 37.5.117, -d33.1</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Watch crackaddr()</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d34.1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-118"TITLE="">Section 37.5.118, -d34.1</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Watch header assembly for output</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d34.11</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-119"TITLE="">Section 37.5.119, -d34.11</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">useful</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Trace header generation and skipping</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d35.9</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-120"TITLE="">Section 37.5.120, -d35.9</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">useful</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Macro values defined</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d35.14</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-121"TITLE="">Section 37.5.121, -d35.14</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Macro identification</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d35.24</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-122"TITLE="">Section 37.5.122, -d35.24</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Macro expansion</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d36.5</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-123"TITLE="">Section 37.5.123, -d36.5</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Trace processing by stab()</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d36.9</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-124"TITLE="">Section 37.5.124, -d36.9</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Show hash bucket</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d36.90</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-125"TITLE="">Section 37.5.125, -d36.90</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Trace function applied to all symbols</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d37.1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-126"TITLE="">Section 37.5.126, -d37.1</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">useful</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Trace setting of options</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d37.8</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-127"TITLE="">Section 37.5.127, -d37.8</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">useful</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Trace adding of words to a class</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d38.2</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-128"TITLE="">Section 37.5.128, -d38.2</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">useful</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Show map opens and failures</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d38.3</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-129"TITLE="">Section 37.5.129, -d38.3</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Show passes</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d38.4</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-130"TITLE="">Section 37.5.130, -d38.4</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">useful</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Show result of map open</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d38.9</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-131"TITLE="">Section 37.5.131, -d38.9</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Trace map closings and appends</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d38.10</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-132"TITLE="">Section 37.5.132, -d38.10</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Trace NIS search for end of aliases</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d38.12</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-133"TITLE="">Section 37.5.133, -d38.12</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Trace map stores</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d38.19</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-134"TITLE="">Section 37.5.134, -d38.19</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">useful</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Trace switch map finds</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d38.20</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-135"TITLE="">Section 37.5.135, -d38.20</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">useful</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Trace map lookups</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d38.44</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-136"TITLE="">Section 37.5.136, -d38.44</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Show nis_getcanonname() record</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d39.1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-137"TITLE="">Section 37.5.137, -d39.1</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Display %digit database mapping</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d40.1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-138"TITLE="">Section 37.5.138, -d40.1</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Trace processing of the queue</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d40.3</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-139"TITLE="">Section 37.5.139, -d40.3</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Show envelope flags</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d40.4</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-140"TITLE="">Section 37.5.140, -d40.4</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Show qf file lines as they are read</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d40.8</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-141"TITLE="">Section 37.5.141, -d40.8</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Show reasons for failure</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d40.9</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-142"TITLE="">Section 37.5.142, -d40.9</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Show qf and lock file descriptors</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d40.32</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-143"TITLE="">Section 37.5.143, -d40.32</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Dump the send queue</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d41.1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-144"TITLE="">Section 37.5.144, -d41.1</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">useful</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Trace queue ordering</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d41.2</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-145"TITLE="">Section 37.5.145, -d41.2</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Cannot open qf</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d41.49</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-146"TITLE="">Section 37.5.146, -d41.49</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Show excluded (skipped) queue files</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d41.50</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-147"TITLE="">Section 37.5.147, -d41.50</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Show every file in the queue</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d42.2</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-148"TITLE="">Section 37.5.148, -d42.2</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Show connection checking</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d42.5</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-149"TITLE="">Section 37.5.149, -d42.5</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Trace caching and uncaching connections</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d43.1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-150"TITLE="">Section 37.5.150, -d43.1</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Trace MIME conversions</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d43.3</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-151"TITLE="">Section 37.5.151, -d43.3</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">See the final MIME boundary name</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d43.5</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-152"TITLE="">Section 37.5.152, -d43.5</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Watch search for boundaries</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d43.8</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-153"TITLE="">Section 37.5.153, -d43.8</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Show the calculations</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d43.35</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-154"TITLE="">Section 37.5.154, -d43.35</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Show boundary lines as emitted</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d43.36</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-155"TITLE="">Section 37.5.155, -d43.36</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Show content transfer encoding</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d43.40</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-156"TITLE="">Section 37.5.156, -d43.40</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Show parse of Content-Type: header</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d43.99</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-157"TITLE="">Section 37.5.157, -d43.99</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Print the leading/following comments</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d43.100</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-158"TITLE="">Section 37.5.158, -d43.100</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Mark collect() and putheader()</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d44.4</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-159"TITLE="">Section 37.5.159, -d44.4</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Trace safefile()</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d44.5</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-160"TITLE="">Section 37.5.160, -d44.5</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">useful</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Trace writable()</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d45.1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-161"TITLE="">Section 37.5.161, -d45.1</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Show envelope sender</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d45.3</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-162"TITLE="">Section 37.5.162, -d45.3</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Show saved domain</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d45.5</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-163"TITLE="">Section 37.5.163, -d45.5</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Show don't send to sender</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d46.9</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-164"TITLE="">Section 37.5.164, -d46.9</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Show xf file's descriptors</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d48.2</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-165"TITLE="">Section 37.5.165, -d48.2</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">useful</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Trace calls to the check_ rule sets</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d49.1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-166"TITLE="">Section 37.5.166, -d49.1</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Trace checkcompat()</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d50.1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-167"TITLE="">Section 37.5.167, -d50.1</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Show envelope being dropped</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d50.2</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-168"TITLE="">Section 37.5.168, -d50.2</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Show Booleans</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d50.10</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-169"TITLE="">Section 37.5.169, -d50.10</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Also show the send queue</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d51.4</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-170"TITLE="">Section 37.5.170, -d51.4</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Show queue entries being unlocked</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d51.104</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-171"TITLE="">Section 37.5.171, -d51.104</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Prevent unlink of xf file</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d52.1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-172"TITLE="">Section 37.5.172, -d52.1</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Show isconnect from controlling TTY</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d52.100</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-173"TITLE="">Section 37.5.173, -d52.100</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Prevent disconnect from controlling tty</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d53.99</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-174"TITLE="">Section 37.5.174, -d53.99</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Trace xclose()</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d54.1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-175"TITLE="">Section 37.5.175, -d54.1</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Show error return and output message</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d54.8</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-176"TITLE="">Section 37.5.176, -d54.8</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Show message and flags</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d55.60</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-177"TITLE="">Section 37.5.177, -d55.60</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Show file locking</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d56.1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-178"TITLE="">Section 37.5.178, -d56.1</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Persistent host status tracing</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d56.2</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-179"TITLE="">Section 37.5.179, -d56.2</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">More persistent host status tracing</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d56.12</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-180"TITLE="">Section 37.5.180, -d56.12</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Perform a sanity check</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d56.80</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-181"TITLE="">Section 37.5.181, -d56.80</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Trace creating the path to the status file</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d56.93</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-182"TITLE="">Section 37.5.182, -d56.93</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Dump MCI record for the host</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d57.2</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-183"TITLE="">Section 37.5.183, -d57.2</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Monitor vsnprintf() overflows</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d59.1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-184"TITLE="">Section 37.5.184, -d59</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">XLA from contrib</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d60.1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-185"TITLE="">Section 37.5.185, -d60.1</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">useful</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Trace map lookups inside rewrite()</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d61.10</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-186"TITLE="">Section 37.5.186, -d61.10</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Trace gethostbyname()</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d62.1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-187"TITLE="">Section 37.5.187, -d62.1</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Log file descriptors before and after all deliveries</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d62.8</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-188"TITLE="">Section 37.5.188, -d62.8</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Log file descriptors before each delivery</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d62.10</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-189"TITLE="">Section 37.5.189, -d62.10</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Log file descriptors after each delivery</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d80.1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-190"TITLE="">Section 37.5.190, -d80.1</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Content-Length: header (Sun enhancement)</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d81.1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-191"TITLE="">Section 37.5.191, -d81.1</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">&gt; option for remote mode (Sun enhancement)</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d91.100</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-192"TITLE="">Section 37.5.192, -d91.100</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Log caching and uncaching connections</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">-d99.100</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-193"TITLE="">Section 37.5.193, -d99.100</A></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">useful</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Prevent backgrounding the daemon</TD></TR></TBODY></TABLE><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-1">37.5.1 -d0.1</A></H3><PCLASS="refpurpose">Print version information</P>(useful)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-54878"></A>The <CODECLASS="literal">-d0.1</CODE> (a.k.a. <CODECLASS="literal">-d0</CODE>) debugging switch previously prevented <EMCLASS="emphasis">sendmail</EM>from forking and detaching itself, but that function has beenmoved to the <CODECLASS="literal">-d99.100</CODE> debugging switch.The <CODECLASS="literal">-d0.1</CODE> debugging switch now just tells <EMCLASS="emphasis">sendmail</EM> toprint information about its version:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Version 8.8.4Compiled with:   LOG MATCHGECOS NAMED_BIND NDBM NEWDB NETINET NETUNIX                 NISSYSTEM IDENTITY (after readcf):            (short domain name) $w = here        (canonical domain name) $j = here.US.EDU               (subdomain name) $m = US.EDU                    (node name) $k = here</PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="literal">Version</CODE> is the current version of <EMCLASS="emphasis">sendmail</EM>. Note that forSun the number may look like <CODECLASS="literal">SMI-8.7.5</CODE>.</P><PCLASS="para">The <CODECLASS="literal">Compiled with:</CODE> lists the compile-time definitions thatwhere specified when <EMCLASS="emphasis">sendmail</EM> is compiled. All the availabledefinitions are listed in <ACLASS="xref"HREF="ch18_08.htm#SML2-CH-18-TAB-2"TITLE="#define Macros for Compiling sendmail">Table 18.3</A> in <ACLASS="xref"HREF="ch18_08.htm"TITLE="Alphabetized Reference">Section 18.8, "Alphabetized Reference"</A>.</P><PCLASS="para">The <CODECLASS="literal">SYSTEM IDENTITY</CODE> shows the value assigned to four importantmacros. The meaning of each macro is contained in<ACLASS="xref"HREF="ch31_10.htm#SML2-CH-31-TAB-6"TITLE="Reserved Macros">Table 31.7</A> in <ACLASS="xref"HREF="ch31_10.htm"TITLE="Alphabetized Reference">Section 31.10, "Alphabetized Reference"</A>.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-2">37.5.2 -d0.4</A></H3><PCLASS="refpurpose">Our name and aliases</P>(useful)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-54910"></A>The <CODECLASS="literal">-d0.4</CODE> debugging switch tells <EMCLASS="emphasis">sendmail</EM>to print several additional lines of information:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Version 8.8.4Compiled with:   LOG MATCHGECOS NAMED_BIND NDBM NEWDB NETINET NETUNIX                 NIS<CODECLASS="userinput"><B>canonical name: here.US.EDU                           </B></CODE><ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> additional</I><CODECLASS="userinput"><B> UUCP nodename: here                                  </B></CODE><ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> additional</I><CODECLASS="userinput"><B>        a.k.a.: [123.45.67.89]                        </B></CODE><ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> additional</I>============ SYSTEM IDENTITY (after readcf) ============            (short domain name) $w = here        (canonical domain name) $j = here.US.EDU               (subdomain name) $m = US.EDU                    (node name) $k = here========================================================</PRE></BLOCKQUOTE></P><PCLASS="para">To find the canonical name of the local host, <EMCLASS="emphasis">sendmail</EM> calls<EMCLASS="emphasis">gethostname</EM>(). If that call fails, the name <EMCLASS="emphasis">localhost</EM>is used. The hostname is then looked up with the internal routine<EMCLASS="emphasis">sm_gethostbyname</EM>(), which gathers additional information (such asother names and addresses for the machine) and fixes severalbugs in some operating system's versions of the <EMCLASS="emphasis">gethostby...</EM> routines.Next the canonicalname for the local host is looked up. For operating systems thatnormally support switched services, the name is looked up as specified.For systems that specify switched services in the configuration file's<CODECLASS="literal">ServiceSwitchFile</CODE> option(see <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-61"TITLE="">Section 34.8.61, ServiceSwitchFile</A>), switched services are not used becausethe configuration file has not been read yet.(This canonicalization process can be traced with the <CODECLASS="literal">-61.10</CODE>debugging switch.)If the canonical is found and that name contains a dot, <EMCLASS="emphasis">sendmail</EM> saves thepart of the name to the right of the leftmost dot as the domainname in the <CODECLASS="literal">$m</CODE> macro (see <ACLASS="xref"HREF="ch31_10.htm#SML2-CH-31-SECT-10-24"TITLE="">Section 31.10.24, $m</A>).It also appends the part of the name tothe left of the leftmost dot to the class <CODECLASS="literal">w</CODE> (see <ACLASS="xref"HREF="ch32_05.htm#SML2-CH-32-SECT-5-8"TITLE="">Section 32.5.8, $=w</A>).If the canonical name doesn't contain a dot, the <CODECLASS="literal">$m</CODE> macro isundefined, and the whole name is appended to the class <CODECLASS="literal">w</CODE>.</P><PCLASS="para">In addition,<EMCLASS="emphasis">sendmail</EM> also sets the <CODECLASS="literal">$k</CODE> macro (see <ACLASS="xref"HREF="ch31_10.htm#SML2-CH-31-SECT-10-21"TITLE="">Section 31.10.21, $k</A>) to bethe correct UUCP name for the machine.It uses <EMCLASS="emphasis">uname</EM>(3), if available, to find thatname (see <ACLASS="xref"HREF="ch18_08.htm#SML2-CH-18-SECT-8-51"TITLE="">Section 18.8.51, TRUST-POPEN</A>); otherwise, it uses the same strategy as for class <CODECLASS="literal">w</CODE>above.</P><PCLASS="para">Then <EMCLASS="emphasis">sendmail</EM> lists any other names or addresses (this latter insquare brackets) that it found.If it finds any, it prints the name prefixed by <CODECLASS="literal">a.k.a.:</CODE>and appends each to the class <CODECLASS="literal">w</CODE>.The aliases listed are only those found using <EMCLASS="emphasis">gethostbyname</EM>(3). Tosee each entry as it is added to the class <CODECLASS="literal">w</CODE>, use the <CODECLASS="literal">-d37.8</CODE>debugging switch.</P><PCLASS="para">Finally, <EMCLASS="emphasis">sendmail</EM> scans the network hardware to find any othernames associated with interfaces.If the <EMCLASS="emphasis">ioctl</EM>(2) call to get that information fails, the <CODECLASS="literal">-d0.4</CODE>debugging switch causes <EMCLASS="emphasis">sendmail</EM> to print that failure:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">SIOGIFCONF failed: <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> reason here</I></PRE></BLOCKQUOTE></P><PCLASS="para">If any are found, each is printedwith an <CODECLASS="literal">a.k.a.:</CODE> prefix and added to theclass macro <CODECLASS="literal">w</CODE>.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-3">37.5.3 -d0.10</A></H3><PCLASS="refpurpose">Operating System Defines</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d0.10</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM> to printall the operating system specific definitions that were usedto compile your specific version of <EMCLASS="emphasis">sendmail</EM>. This outputprints after the &quot;Compiled with:&quot; information described above:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">OS Defines: HASFLOCK HASGETUSERSHELL HASINITGROUPS HASLSTAT                HASSETREUID HASSETSID HASSETVBUF HASUNAME IDENTPROTO                IP_SRCROUTEKernel symbols: /vmunix   Config file: /etc/sendmail.cf  Proc Id file: /etc/sendmail.pid</PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="literal">OS Defines</CODE> are described in <ACLASS="xref"HREF="ch18_08.htm#SML2-CH-18-TAB-2"TITLE="#define Macros for Compiling sendmail">Table 18.3</A> in <ACLASS="xref"HREF="ch18_08.htm"TITLE="Alphabetized Reference">Section 18.8</A>.Most are automatically determined during compilation; othersare specified in <EMCLASS="emphasis">Makefile</EM>.</P><PCLASS="para">The <CODECLASS="literal">Kernel symbols</CODE> is the name of file that is accessed todetermine the load average. It is automatically defined correctlywhen <EMCLASS="emphasis">conf.c</EM> is compiled.The location of the configuration file and the process identifier fileare defined in the <EMCLASS="emphasis">Makefile</EM> and <EMCLASS="emphasis">conf.h</EM> in the <EMCLASS="emphasis">sendmail</EM> source (see <ACLASS="xref"HREF="ch18_08.htm#SML2-CH-18-SECT-8-34"TITLE="">Section 18.8.34, PATH...</A>).</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-4">37.5.4 -d0.15</A></H3><PCLASS="refpurpose">Dump delivery agents</P>(useful)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-54997"></A>The -d0.15 debugging switch causes <EMCLASS="emphasis">sendmail</EM> to displayhow it interpreted its delivery agent definitions.The clarity and completeness of the deliveryagent information vary with the version of <EMCLASS="emphasis">sendmail</EM>.See the <CODECLASS="literal">=M</CODE> rule-testing command (<ACLASS="xref"HREF="ch38_04.htm#SML2-CH-38-SECT-4-2"TITLE="Show Delivery Agents with =M">Section 38.4.2, "Show Delivery Agents with =M"</A>)for an example of this output.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-5">37.5.5 -d0.20</A></H3><PCLASS="refpurpose">Print network address of each interface</P>(useful)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">When <EMCLASS="emphasis">sendmail</EM> scans the network hardware to find other namesfor the local host, it uses only those names that are new. Each new namewas printed by the <CODECLASS="literal">-d0.4</CODE> debugging switch above. To see every namethat <EMCLASS="emphasis">sendmail</EM> finds, new and old alike, use the <CODECLASS="literal">-d0.20</CODE>debugging switch:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"><CODECLASS="userinput"><B>128.32.201.55                                       </B></CODE><ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> already found</I><CODECLASS="userinput"><B>127.0.0.1                                           </B></CODE><ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> found new</I>        a.k.a.: [127.0.0.1]</PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-6">37.5.6 -d0.22</A></H3><PCLASS="refpurpose">Show uname() failure</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">Ordinarily, if the UUCP name for the local host cannot be found (if<EMCLASS="emphasis">uname</EM>(3) fails), <EMCLASS="emphasis">sendmail</EM> silently uses the leftmostcomponent of the canonical name as the UUCP name.To see whether <EMCLASS="emphasis">uname</EM>(3)failed&nbsp;- and, if so why&nbsp;- you can use the <CODECLASS="literal">-d0.22</CODE> debugging switch:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">uname failed (<ICLASS="lineannotation">reason for failure here</I>)</PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-7">37.5.7 -d0.40</A></H3><PCLASS="refpurpose">Announce scanning of interfaces</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d0.40</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM> to announce thatit is about to scan for network interfaces:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"><CODECLASS="userinput"><B>scanning for interface specific names, ifc_len=64</B></CODE>        a.k.a.: [127.0.0.1]</PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="literal">ifc_len</CODE> is the size inbytes of the configuration list returned by the kernel.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-8">37.5.8 -d0.44</A></H3><PCLASS="refpurpose">Print addresses of strings</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d0.44</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM> to prefixcertain lists of strings that it prints with theaddress in memory of each string and an equal sign. With this debugging level,part of the output produced by the <CODECLASS="literal">-d21.12</CODE> debugging switch wouldlook like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">--- rule fails---trying rule:        0009ec68=@        0009ec78=$*--- rule fails</PRE></BLOCKQUOTE></P><PCLASS="para">This debugging level can be useful to the programmer whowishes to modify the <EMCLASS="emphasis">sendmail</EM> source. It might, for example,be helpful in designing more efficient string storage.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-9">37.5.9 -d0.90</A></H3><PCLASS="refpurpose">Print first 10 rule sets</P>(obsolete)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d0.90</CODE> debugging switch causes<EMCLASS="emphasis">sendmail</EM> to display its internal interpretations ofthe first 10 rewriting rules it took from the configuration file.The rule sets are printed in numeric order, rather than in the order in whichthey appeared in the configuration file. The rewriting rules areprinted under each rule set(but these <EMCLASS="emphasis">are</EM> in the order in which they appeared in the configuration file).Rule sets that are declared but lack rewriting rulesare not printed. Note that defined macros in the RHSare expanded (the value used) when the configuration file is parsed.Also note that expressions like <CODECLASS="literal">$+</CODE> may be printed as controlcharacters (e.g., <CODECLASS="literal">^A</CODE>) under older versions of <EMCLASS="emphasis">sendmail</EM>.</P><PCLASS="para">The preferred way to view individual rule sets is withthe <CODECLASS="literal">-bt</CODE> rule-testing mode's <CODECLASS="literal">=S</CODE> command(see <ACLASS="xref"HREF="ch38_04.htm#SML2-CH-38-SECT-4-1"TITLE="Show Rules in a Rule Set with =S">Section 38.4.1, "Show Rules in a Rule Set with =S"</A>).</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-10">37.5.10 -d1.1</A></H3><PCLASS="refpurpose">Show sender information</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">Although there are many kinds of information that one might liketo trace about the sender of an email message, <EMCLASS="emphasis">sendmail</EM>  provides the means to trace only one of them.The <CODECLASS="literal">-d1.1</CODE> (a.k.a. <CODECLASS="literal">-d1</CODE>) debugging switch causes <EMCLASS="emphasis">sendmail</EM> to printits interpretation of whom the message is from (the name of the senderas it was used in the envelope):</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">From person = &quot;<CODECLASS="replaceable"><I>sender</I></CODE>&quot;</PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>sender</I></CODE> is the user portion of the mail address of the sender.This output is most useful when combined with the<CODECLASS="literal">-f</CODE> command-line switch (which sets the name of the senderfrom the command line; see <ACLASS="xref"HREF="ch36_07.htm#SML2-CH-36-SECT-7-21"TITLE="">Section 36.7.21, -f and -r</A>).</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-11">37.5.11 -d1.5</A></H3><PCLASS="refpurpose">Dump the sender address</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d1.5</CODE> debugging switch causesadditional information about the sender to be printed. That outputlooks like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">main: QDONTSEND <ICLASS="lineannotation">output of printaddr</I>()<ICLASS="lineannotation"> here (see <ACLASS="xref"HREF="ch37_03.htm#SML2-CH-37-SECT-3-1"TITLE="The Output Produced by printaddr()">Section 37.3.1, "The Output Produced by printaddr()"</A>)</I></PRE></BLOCKQUOTE></P><PCLASS="para">The QDONTSEND means that the sender is not a recipient and soshould not get a copy of the message. That is followedby the output of the <EMCLASS="emphasis">printaddr</EM>() routine.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-12">37.5.12 -d2.1</A></H3><PCLASS="refpurpose">End with finis()</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">Ordinarily, <EMCLASS="emphasis">sendmail</EM> exits silently when it is done (unlessan error causes an error message to be printed).The <CODECLASS="literal">-d2.1</CODE> (a.k.a. <CODECLASS="literal">-d2</CODE>) debugging switch causes<EMCLASS="emphasis">sendmail</EM> to print three useful values when itexits. The message it prints looks like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">====finis: stat <CODECLASS="replaceable"><I>num</I></CODE> e_id=<CODECLASS="replaceable"><I>qid</I></CODE> e_flags=<CODECLASS="replaceable"><I>flags</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="replaceable"><I>num</I></CODE> is the final value of the<EMCLASS="emphasis">sendmail</EM> program's global <CODECLASS="literal">ExitStat</CODE> variable.It is usually updated to contain the latest error valueas defined in <EMCLASS="emphasis">&lt;sysexits.h&gt;</EM>.See <ACLASS="xref"HREF="ch36_05.htm"TITLE="sendmail's exit() Status">Section 36.5, "sendmail's exit() Status"</A> for a detailed description ofthe possible exit values.</P><PCLASS="para">The <CODECLASS="replaceable"><I>qid</I></CODE> is either the queue identifier (such as SAA24069)or the NOQUEUE if the message was never assigned an identifier(such as if it was never queued).</P><PCLASS="para">The <CODECLASS="replaceable"><I>flags</I></CODE> is a hexadecimal representationof the possible envelope flags followed by a text representationof those flags in angle brackets with the leading <CODECLASS="literal">EF_</CODE> removed, for example,</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">201003&lt;OLDSTYLE,INQUEUE,GLOBALERRS,HAS_DF&gt;</PRE></BLOCKQUOTE></P><PCLASS="para">These are the envelope flags that were in effect with thecurrent envelope when <EMCLASS="emphasis">sendmail</EM> exited. The possible valuesare shown in<ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-TAB-2"TITLE="Hexadecimal Envelope Flags">Table 37.3</A>.</P><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="SML2-CH-37-TAB-2">Table 37.3: Hexadecimal Envelope Flags</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Text</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Hex</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Description</TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">EF_OLDSTYLE</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">0000001</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Use spaces (not commas) in headers</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">EF_INQUEUE</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">0000002</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">This message is fully queued</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">EF_NO_BODY_RETN</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">0000004</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Omit message body on error</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">EF_CLRQUEUE</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">0000008</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Disk copy is no longer needed</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">EF_SENDRECEIPT</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">0000010</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Send a return receipt</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">EF_FATALERRS</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">0000020</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Fatal errors occurred</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">EF_KEEPQUEUE</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">0000040</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Keep queue files always</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">EF_RESPONSE</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">0000080</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">This is an error or return receipt</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">EF_RESENT</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">0000100</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">This message is being forwarded</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">EF_VRFYONLY</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">0000200</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Verify only (don't expand aliases)</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">EF_WARNING</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">0000400</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Warning message has been sent</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">EF_QUEUERUN</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">0000800</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">This envelope is from queue</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">EF_GLOBALERRS</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">0001000</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Treat errors as global</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">EF_PM_NOTIFY</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">0002000</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Send return mail to postmaster</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">EF_METOO</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">0004000</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Send to me too</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">EF_LOGSENDER</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">0008000</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Need to log the sender</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">EF_NORECEIPT</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">0010000</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Suppress all return-receipts</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">EF_HAS8BIT</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">0020000</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">At least one 8-bit character in body</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">EF_NL_NOT_EOL</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">0040000</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Don't accept raw newline as end-of-line</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">EF_CRLF_NOT_EOL</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">0080000</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Don't accept carriage-return/line-feed as end-of-line</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">EF_RET_PARAM</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">0100000</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">SMTP RCPT command had RET argument</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">EF_HAS_DF</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">0200000</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Set when df file is instantiated</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">EF_IS_MIME</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">0400000</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Really is a MIME message</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">EF_DONT_MIME</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">0800000</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">This message is not MIME-able</TD></TR></TBODY></TABLE><PCLASS="para">For example, if the message were fully queued and required aDSN return receipt, the <EMCLASS="emphasis">flags</EM> would print as</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">e_flags=12&lt;INQUEUE,SENDRECEIPT&gt;</PRE></BLOCKQUOTE></P><PCLASS="para">Note that this line of output is also produced by the <CODECLASS="literal">-d13.1</CODE>,<CODECLASS="literal">-d40.3</CODE>, and <CODECLASS="literal">-d50.1</CODE> debugging switches but under differentcircumstances.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-13">37.5.13 -d2.9</A></H3><PCLASS="refpurpose">Show file descriptors with <EMCLASS="emphasis">dumpfd</EM>()</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d2.9</CODE> debugging switch tells <EMCLASS="emphasis">sendmail</EM> to display theproperties of each open file descriptor. That output is producedby the <EMCLASS="emphasis">dumpfd</EM>() routine, and each line of outputis for a single file descriptor:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"><CODECLASS="replaceable"><I>num</I></CODE>: fl=<CODECLASS="replaceable"><I>flags</I></CODE> mode=<CODECLASS="replaceable"><I>mode type stats</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here, the <CODECLASS="replaceable"><I>num</I></CODE> is the number of the open file descriptor. Note thatdescriptors 0, 1, and 2 are usually tied to the standard input, output,and error output.</P><PCLASS="para">The <CODECLASS="replaceable"><I>flags</I></CODE> is a hexadecimal representation of the state flagsassociated with a file descriptor. F_GETFL is used with<EMCLASS="emphasis">ioctl</EM>(2) to fetch each, and all are described in <EMCLASS="emphasis">&lt;sys/fcntlcom.h&gt;</EM>.</P><PCLASS="para">The <CODECLASS="replaceable"><I>mode</I></CODE> is printed in octal and is the <EMCLASS="emphasis">st_mode</EM> associatedwith an <EMCLASS="emphasis">fstat</EM>(2) of the file descriptor. The <CODECLASS="replaceable"><I>type</I></CODE> examinesthe file type portion of the <EMCLASS="emphasis">st_mode</EM> and prints SOCK for a socket,CHR: for a character special device,BLK: for a block special device,FIFO: for a first-in-first-out file, DIR: for a directory, LNK: for a symbolic link,and nothing otherwise (e.g., nothing if it is a file).</P><PCLASS="para">The <CODECLASS="replaceable"><I>stats</I></CODE> are printed for all but the socket. They look like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">dev=<CODECLASS="replaceable"><I>major</I></CODE>/<CODECLASS="replaceable"><I>minor</I></CODE> ino=<CODECLASS="replaceable"><I>inum</I></CODE> nlink=<CODECLASS="replaceable"><I>nlink</I></CODE> u/gid=<CODECLASS="replaceable"><I>uid</I></CODE>/<CODECLASS="replaceable"><I>gid</I></CODE> size=<CODECLASS="replaceable"><I>bytes</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here the <CODECLASS="literal">dev=</CODE> shows the major and minor device numbers for the devicethat the file descriptor is associated with. The <CODECLASS="replaceable"><I>inum</I></CODE> is the inodenumber on the disk (if there is one) and <CODECLASS="replaceable"><I>nlink</I></CODE> is the number of hardlinks to the file on disk. The <CODECLASS="replaceable"><I>uid/gid</I></CODE> shows the user and groupownership associated with the file descriptor. The <CODECLASS="replaceable"><I>size</I></CODE> is thenumber of bytes in a file, and 0 for almost everything else.</P><PCLASS="para">For a socket, the <CODECLASS="replaceable"><I>stats</I></CODE> part of each line looks likethis:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">[<CODECLASS="replaceable"><I>addr</I></CODE>]/<CODECLASS="replaceable"><I>port</I></CODE>-&gt; <CODECLASS="replaceable"><I>host</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>addr</I></CODE> is the IP address of the local end of the socket.If the connection is of type AF_INET, the port number of the connectionis also shown as <CODECLASS="replaceable"><I>/port</I></CODE>. The <CODECLASS="replaceable"><I>host</I></CODE> is the hostname, as returnedby <EMCLASS="emphasis">getpeername</EM>(3), of the connecting host. If any of these cannotbe found, the error string associated with <EMCLASS="emphasis">errno</EM> is printedparenthetically in its place.</P><PCLASS="para">The <CODECLASS="literal">-d7.9</CODE>, <CODECLASS="literal">-d40.9</CODE>, and <CODECLASS="literal">-d46.9</CODE> debuggingswitches also print a line like this for specific file descriptors.Also if <EMCLASS="emphasis">sendmail</EM> is run with the <CODECLASS="literal">-d10.100</CODE> switch, or if <EMCLASS="emphasis">sendmail</EM> fails to open a <EMCLASS="emphasis">tf</EM> queue file (see <ACLASS="xref"HREF="ch23_02.htm#SML2-CH-23-SECT-2-6"TITLE="The Temporary qf Rewrite Image: tf">Section 23.2.6, "The Temporary qf Rewrite Image: tf"</A>),or if <EMCLASS="emphasis">sendmail</EM> exited because of too many open files, it will<EMCLASS="emphasis">syslog</EM> all its open file descriptors within this format.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-14">37.5.14 -d3.1</A></H3><PCLASS="refpurpose">Print load average</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <EMCLASS="emphasis">sendmail</EM> program queues mail, rather than delivering it, ifthe load average (number of processes in the run queue) exceedsthe value set by the <CODECLASS="literal">QueueLA</CODE> (<CODECLASS="literal">x</CODE>) option(see <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-50"TITLE="">Section 34.8.50, QueueLA (x)</A>). Exceeding that valuealso prevents messages that are  already in the queue from being delivered(prevents a queue run). If the load average becomes higherthan the value of the <CODECLASS="literal">RefuseLA</CODE> (<CODECLASS="literal">X</CODE>) option (see <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-54"TITLE="">Section 34.8.54, RefuseLA (X)</A>),<EMCLASS="emphasis">sendmail</EM> rejects incoming SMTP connections until the load average drops.</P><PCLASS="para">The <CODECLASS="literal">-d3.1</CODE> debugging switch (a.k.a. <CODECLASS="literal">-d3</CODE>) causes <EMCLASS="emphasis">sendmail</EM> toprint the load average found by its internal <EMCLASS="emphasis">getla</EM>() routine eachtime that routine is called:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">getla: <CODECLASS="replaceable"><I>la</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>la</I></CODE> is the current load average printed as an integer.If sendmail was compiled with LA_TYPE==LA_ZERO(see <ACLASS="xref"HREF="ch18_08.htm#SML2-CH-18-SECT-8-14"TITLE="">Section 18.8.14, LA-TYPE</A>), the following will be printed toshow that your <EMCLASS="emphasis">sendmail</EM> binary completely lacks loadaveraging support:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">getla: ZERO</PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="literal">-d3.1</CODE> debugging switch also causes <EMCLASS="emphasis">sendmail</EM> to printany errors it encounters while obtaining the load average.</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">getla: open(/dev/kmem): <CODECLASS="replaceable"><I>error</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="literal">/dev/kmem</CODE> is the device that is used to access kernel memory.The <CODECLASS="replaceable"><I>error</I></CODE> is the system error that caused the failure, such as&quot;Permission denied&quot; if <EMCLASS="emphasis">sendmail</EM> is not properly <EMCLASS="emphasis">sgid</EM>to the group <EMCLASS="emphasis">kmem</EM>.</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">getla: nlist(<CODECLASS="replaceable"><I>unix</I></CODE>): <CODECLASS="replaceable"><I>error</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">The <EMCLASS="emphasis">nlist</EM>(3) function extracts a list of symbols froman executable binary (among them the symbol for the load average).The binary that it extracts is the kernel whose pathnameis <CODECLASS="replaceable"><I>unix</I></CODE> (such as <EMCLASS="emphasis">/vmunix</EM> for SunOS 4.x). Here, the<CODECLASS="replaceable"><I>error</I></CODE> is the reason <EMCLASS="emphasis">nlist</EM>(3) failed. One possibilityis that you booted from a nonstandard kernel name (such as <EMCLASS="emphasis">/vmunix.new</EM>)and the expected file didn't exist:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">getla: nlist(<CODECLASS="replaceable"><I>unix</I></CODE>, <CODECLASS="replaceable"><I>la</I></CODE>) ==&gt; 0</PRE></BLOCKQUOTE></P><PCLASS="para">If the expected kernel exists (<CODECLASS="replaceable"><I>unix</I></CODE>) but the machine was bootedfrom a different kernel, the symbol representing the load averagemay not be found. In that instance, <CODECLASS="replaceable"><I>la</I></CODE> is the name of the kernelvariable that <EMCLASS="emphasis">sendmail</EM> was trying to find.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-15">37.5.15 -d3.5</A></H3><PCLASS="refpurpose">Print load average</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The load average that <EMCLASS="emphasis">sendmail</EM> uses is averaged overthe last minute. Internally, the kernel keeps track of three loadaverages. In addition to the last minute, it also tracks thelast 5 and 15 minutes.The <CODECLASS="literal">-d3.5</CODE> debugging switch causes V8 <EMCLASS="emphasis">sendmail</EM> toprint the load average over the last minute:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">getla: averun = <CODECLASS="replaceable"><I>1min</I></CODE></PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-16">37.5.16 -d3.15</A></H3><PCLASS="refpurpose">Print three load averages</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d3.15</CODE> debugging switch causes V8 <EMCLASS="emphasis">sendmail</EM> toprint all three load averages:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">getla: averun = <CODECLASS="replaceable"><I>1min</I></CODE>, <CODECLASS="replaceable"><I>5min</I></CODE>, <CODECLASS="replaceable"><I>15min</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here, the three load averages are printed either in integer orin floating point, depending on the setting of LA_TYPE (see <ACLASS="xref"HREF="ch18_08.htm#SML2-CH-18-SECT-8-14"TITLE="">Section 18.8.14</A>).</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-17">37.5.17 -d3.20</A></H3><PCLASS="refpurpose">Show offset for load average</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <EMCLASS="emphasis">nlist</EM>(3) routine (described above)provides the offset into the kernel file where the valueof the load average is found. The <CODECLASS="literal">-d3.20</CODE> debuggingswitch causes that offset to be displayed:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">getla: symbol address = <CODECLASS="replaceable"><I>offset</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here, the <CODECLASS="replaceable"><I>offset</I></CODE> is printed in hexadecimal. The load averageis read by seeking in the kernel file and reading it. If the seekor read fails, the <CODECLASS="literal">-d3.1</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM>to print:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">getla: seek or read: <CODECLASS="replaceable"><I>error</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">This can indicate a wrong or corrupted kernel image.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-18">37.5.18 -d3.30</A></H3><PCLASS="refpurpose">Show result of decision to queue</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The internal routine <EMCLASS="emphasis">shouldqueue</EM>() is called just beforea mail message is delivered to recipients. That routinedetermines whether mail will be delivered or queued on the basis of thecurrent load average and message <CODECLASS="replaceable"><I>priority</I></CODE>. Upon entry it prints:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">shouldqueue: CurrentLA=<CODECLASS="replaceable"><I>load</I></CODE>, pri=<CODECLASS="replaceable"><I>priority</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">If the <CODECLASS="literal">CurrentLA</CODE> is less than the limit set by the <CODECLASS="literal">QueueLA</CODE>(<CODECLASS="literal">x</CODE>) option (see <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-50"TITLE="">Section 34.8.50</A>), <EMCLASS="emphasis">sendmail</EM> prints:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">FALSE (CurrentLA &lt; QueueLA)</PRE></BLOCKQUOTE></P><PCLASS="para">Then the calculation described in <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-49"TITLE="">Section 34.8.49, QueueFactor (q)</A> for the<CODECLASS="literal">QueueFactor</CODE> (<CODECLASS="literal">q</CODE>) option is performed using the <CODECLASS="replaceable"><I>pri</I></CODE>priority.The result is printed as one of the following, where TRUErepresents a zero result and FALSE represents a nonzero result:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">TRUE (by calculation)FALSE (by calculation)</PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-19">37.5.19 -d4.80</A></H3><PCLASS="refpurpose">Trace enoughspace()</P>(useful)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">MinFreeBlocks</CODE> (<CODECLASS="literal">b</CODE>) option (see <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-40"TITLE="">Section 34.8.40, MinFreeBlocks (b)</A>)defines the minimumnumber of disk blocks that must be reserved on the queue disk.If an incoming SMTP message will fill the disk beyond this minimum, the message is rejected.&#13;</P><PCLASS="para">The <CODECLASS="literal">-d4.80</CODE> debugging switch[1]traces the <EMCLASS="emphasis">enoughspace</EM>()routine in <EMCLASS="emphasis">conf.c</EM>. That routine examines the disk spaceand allows or disallows incoming mail.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[1] No <CODECLASS="literal">-d4.1</CODE> (a.k.a. <CODECLASS="literal">-d4</CODE>) information is available.</P></BLOCKQUOTE><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">enoughspace: no threshold</PRE></BLOCKQUOTE></P><PCLASS="para">This debugging output says that no limit was defined with the<CODECLASS="literal">MinFreeBlocks</CODE> (<CODECLASS="literal">b</CODE>) option.</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">enoughspace: bavail=<CODECLASS="replaceable"><I>haveblocks</I></CODE> need=<CODECLASS="replaceable"><I>needblocks</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">This debugging output shows that the number of blocks free (available)on the disk is <CODECLASS="replaceable"><I>haveblocks</I></CODE> and that the number of blocksrequired by incoming mail is <CODECLASS="replaceable"><I>needblocks</I></CODE>.Note that <CODECLASS="replaceable"><I>haveblocks</I></CODE> will always be -1 if <EMCLASS="emphasis">sendmail</EM>was compiled with SFS_TYPE set to SFS_NONE(see <ACLASS="xref"HREF="ch18_08.htm#SML2-CH-18-SECT-8-40"TITLE="">Section 18.8.40, SFS-TYPE</A>).</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">enoughspace failure: min=<CODECLASS="replaceable"><I>boption</I></CODE> need=<CODECLASS="replaceable"><I>needblocks</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">If the required number of blocks (<CODECLASS="replaceable"><I>needblocks</I></CODE>) exceeds theminimum reserved as defined by the <CODECLASS="literal">MinFreeBlocks</CODE>(<CODECLASS="literal">b</CODE>) option (<CODECLASS="replaceable"><I>boption</I></CODE>), use of the disk is disallowed.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-20">37.5.20 -d5.4</A></H3><PCLASS="refpurpose">Tick for queued events</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">Throughout its many possible levels of forks and children, <EMCLASS="emphasis">sendmail</EM> must keep track of timeouts&nbsp;- the maximumamount of time it should wait for an event to occur.For example, a child must not wait foreverfor an SMTP greeting message, because the program at the other end may neverprovide that message (because it died or is just too busy).</P><PCLASS="para">To keep track of which child should be notified at which time,<EMCLASS="emphasis">sendmail</EM> maintains an internal queue of events.The <EMCLASS="emphasis">sendmail</EM> program uses the SIGALARM signaland the <EMCLASS="emphasis">alarm</EM>(2) system call to setthe interval it waits to next check itsqueue of events for timeouts. That interval (called a <EMCLASS="emphasis">tick</EM>) is theperiod of the timeout itself, or if the timeout is scheduled forthe present or past, the interval is three seconds.The <CODECLASS="literal">-d5.4</CODE> debugging switch[2]causes <EMCLASS="emphasis">sendmail</EM> to print the current time whenever thequeue of events is examined:</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[2] There is no <CODECLASS="literal">-d5.1</CODE> (a.k.a. <CODECLASS="literal">-d5</CODE>) information.</P></BLOCKQUOTE><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">tick: now=<EMCLASS="emphasis">time</EM></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <EMCLASS="emphasis">time</EM> is the current time in seconds as returnedby <EMCLASS="emphasis">time</EM>(2).</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-21">37.5.21 -d5.5</A></H3><PCLASS="refpurpose">Events set and cleared</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">Events are set by the process (child or parent) that needsa timeout. The <CODECLASS="literal">-d5.5</CODE> debugging switch causes<EMCLASS="emphasis">sendmail</EM> to print the information that is used toset up for that timeout:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">setevent: intvl=<CODECLASS="replaceable"><I>secs</I></CODE>, for=<CODECLASS="replaceable"><I>timeo</I></CODE>, func=<CODECLASS="replaceable"><I>addr</I></CODE>, arg=<CODECLASS="replaceable"><I>pass</I></CODE>, ev=<CODECLASS="replaceable"><I>evnt</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">The information is the timeout interval in seconds (<CODECLASS="replaceable"><I>secs</I></CODE>), the time(now plus the interval) in seconds that the timeoutwill occur (<CODECLASS="replaceable"><I>timeo</I></CODE>), the address in memory of the subroutine that willbe called if a timeout occurs (<CODECLASS="replaceable"><I>addr</I></CODE>), the argument to bepassed to that subroutine (<CODECLASS="replaceable"><I>pass</I></CODE>), and the address inmemory of theC language structure that contains this information (<CODECLASS="replaceable"><I>evnt</I></CODE>).The <CODECLASS="replaceable"><I>addr</I></CODE> of the function to be called can be converted to a functionname by running <EMCLASS="emphasis">nm</EM>(1) on an unstripped binary of <EMCLASS="emphasis">sendmail</EM>. For example, ifthe following output was produced by <EMCLASS="emphasis">/usr/lib/sendmail</EM>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">setevent: intvl=3600, for=802463800, func=3ebc4, arg=0, ev=94b68</PRE></BLOCKQUOTE></P><PCLASS="para">you could find the function name associated with the address <CODECLASS="literal">3ebc4</CODE> by running</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B> nm /usr/lib/sendmail | grep 3ebc4</B></CODE>0003ebc4 t _readtimeout</PRE></BLOCKQUOTE></P><PCLASS="para">Here, the result is the name <CODECLASS="literal">readtimeout</CODE>, which corresponds tothe function <EMCLASS="emphasis">readtimeout</EM>() in <EMCLASS="emphasis">util.c</EM>.</P><PCLASS="para">When an event is cleared because a timeout was no longer needed, <EMCLASS="emphasis">sendmail</EM> prints:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">clrevent: ev=<CODECLASS="replaceable"><I>evnt</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>evnt</I></CODE> is the address in memory of the C language structurethat stored the event information. This is the same as thelast item printed by <CODECLASS="literal">setevent</CODE> above.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-22">37.5.22 -d5.6</A></H3><PCLASS="refpurpose">Show events triggered</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d5.6</CODE> debugging switch tells <EMCLASS="emphasis">sendmail</EM>to print the following information when a timeout occurs: </P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">tick: ev=<CODECLASS="replaceable"><I>evnt</I></CODE>, func=<CODECLASS="replaceable"><I>addr</I></CODE>, arg=<CODECLASS="replaceable"><I>pass</I></CODE>, pid=<CODECLASS="replaceable"><I>pid</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">This shows that the event stored in the C language structure,whose address in memory is <CODECLASS="replaceable"><I>evnt</I></CODE>, has timed out. The subroutine whoseaddress in memory is <CODECLASS="replaceable"><I>addr</I></CODE> will be called with an argument of <CODECLASS="replaceable"><I>pass</I></CODE>.The process identification number of the parent process thatasked for the timeout is shown as <CODECLASS="replaceable"><I>pid</I></CODE>.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-23">37.5.23 -d6.1</A></H3><PCLASS="refpurpose">Show failed mail</P>(useful)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">Mail can fail for a wide variety of reasons.The way that <EMCLASS="emphasis">sendmail</EM> handles errors is determinedby the setting of the <CODECLASS="literal">ErrorMode</CODE> (<CODECLASS="literal">e</CODE>) option(see <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-24"TITLE="">Section 34.8.24, ErrorMode (e)</A>) in the configuration file.The <CODECLASS="literal">-d6.1</CODE> (a.k.a. <CODECLASS="literal">-d6</CODE>) debugging switch causes <EMCLASS="emphasis">sendmail</EM>to print the error-handling mode that is in effect at the timeit first begins to handle failed mail:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">savemail, errorMode = <CODECLASS="replaceable"><I>char</I></CODE>, id = <CODECLASS="replaceable"><I>qid</I></CODE>, ExitStat = <CODECLASS="replaceable"><I>err</I></CODE>e_from= <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> output of printaddr() here (see <ACLASS="xref"HREF="ch37_03.htm#SML2-CH-37-SECT-3-1"TITLE="The Output Produced by printaddr()">Section 37.3.1</A>)</I></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>char</I></CODE> is either: <CODECLASS="literal">p</CODE> for print errors; <CODECLASS="literal">m</CODE> for mail back errors; <CODECLASS="literal">w</CODE> for write back errors; <CODECLASS="literal">e</CODE> for special BERKnet processing; or <CODECLASS="literal">q</CODE> for &quot;don't print anything&quot;(all of which are described under the <CODECLASS="literal">ErrorMode</CODE> option in <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-24"TITLE="">Section 34.8.24</A>).The <CODECLASS="replaceable"><I>qid</I></CODE> is the queue identifier (such as KAA15019).The <CODECLASS="replaceable"><I>err</I></CODE> is the error that caused the message to fail (as definedin <EMCLASS="emphasis">&lt;sysexits.h&gt;</EM>).And <CODECLASS="literal">e_from=</CODE> uses <EMCLASS="emphasis">printaddr</EM>() to print details aboutthe sender's address.</P><PCLASS="para">If the error-processing mode is <CODECLASS="literal">m</CODE> (for mail back) andthe <CODECLASS="literal">-d6.1</CODE> debugging switch is in effect, <EMCLASS="emphasis">sendmail</EM>prints details about how the message is being returned tothe sender:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">***Return To Sender: msg=<CODECLASS="replaceable"><I>reason</I></CODE>, depth=<CODECLASS="replaceable"><I>num</I></CODE>, e=<CODECLASS="replaceable"><I>addr</I></CODE>, returnq=<ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> output of printaddr</I>()<ICLASS="lineannotation"> here (see <ACLASS="xref"HREF="ch37_03.htm#SML2-CH-37-SECT-3-1"TITLE="The Output Produced by printaddr()">Section 37.3.1</A>)</I></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>reason</I></CODE> is a quoted string of text that explains whythe mail failed. This may be an SMTP reply string. The <CODECLASS="replaceable"><I>num</I></CODE>is zero for normal delivery and one for error delivery.The <CODECLASS="replaceable"><I>addr</I></CODE> is the location in memory of theinformation about the current envelope.Finally, <EMCLASS="emphasis">sendmail</EM> calls <EMCLASS="emphasis">printaddr</EM>()to print the details of the queue of recipients (<CODECLASS="literal">returnq=</CODE>)for the current message.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-24">37.5.24 -d6.5</A></H3><PCLASS="refpurpose">The current error state</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d6.5</CODE> debugging switch tells <EMCLASS="emphasis">sendmail</EM>to print the error state it was in when it finished processing the error thatcaused the message to fail:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">state <CODECLASS="replaceable"><I>num</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">If <CODECLASS="replaceable"><I>num</I></CODE> is 7 (successful delivery), nothing is printed.Otherwise, the above message is printed, and the value of <CODECLASS="replaceable"><I>num</I></CODE>represents one of the states shown in <ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-TAB-3"TITLE="Error Handling States">Table 37.4</A>.</P><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="SML2-CH-37-TAB-3">Table 37.4: Error Handling States</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">State</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Description</TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Report to sender's terminal</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Mail back to sender</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">2</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Messages have already been returned</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">3</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Save in <EMCLASS="emphasis">~/dead.letter</EM></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">4</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Return to postmaster</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">5</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Save in <EMCLASS="emphasis">/usr/tmp/dead.letter</EM></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">6</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Leave the locked queue/transcript files</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">7</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">The message has been successfully delivered</TD></TR></TBODY></TABLE></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-25">37.5.25 -d6.20</A></H3><PCLASS="refpurpose">Show sender of return to sender</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d6.20</CODE> debugging switch tells <EMCLASS="emphasis">sendmail</EM> to printadditional information to that printed by <CODECLASS="literal">-d6.1</CODE>. Specifically,it prints, via <EMCLASS="emphasis">printaddr</EM>(), the address information about thesender of returned mail:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">***Return To Sender: msg=<CODECLASS="replaceable"><I>reason</I></CODE>, depth=<CODECLASS="replaceable"><I>num</I></CODE>, e=<CODECLASS="replaceable"><I>addr</I></CODE>, returnq=<ICLASS="lineannotation">output of printaddr</I>()<ICLASS="lineannotation"> here (see <ACLASS="xref"HREF="ch37_03.htm#SML2-CH-37-SECT-3-1"TITLE="The Output Produced by printaddr()">Section 37.3.1</A>)</I>Sendq= <ICLASS="lineannotation">output of printaddr</I>()<ICLASS="lineannotation"> here</I></PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-26">37.5.26 -d7.1</A></H3><PCLASS="refpurpose">The Queue filename</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <EMCLASS="emphasis">sendmail</EM> program stores mail messages in its queue for a varietyof reasons. For example, the <CODECLASS="literal">SuperSafe</CODE> (<CODECLASS="literal">s</CODE>) option (see <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-67"TITLE="">Section 34.8.67, SuperSafe (s)</A>) causes it to queue allmessages just to be safe. Also, messages that cannot be deliveredbecause of a temporary lack of resources(or for any correctable reason) are queued for later delivery.</P><PCLASS="para">Mail messages are stored in the queue in two parts. A data part containsthe body of the message. An information part stores headersand other information about the message.The filenames of the two parts are identical but for thefirst two letters. A <CODECLASS="literal">df</CODE> begins the name of the data part, anda <CODECLASS="literal">qf</CODE> begins the name of the information part.A third type of queue file begins with the letters <CODECLASS="literal">xf</CODE>and is a &quot;transcript&quot; file that holds error messagesproduced during delivery.</P><PCLASS="para">To ensure that these filenames do not conflict with the names offiles that may already be in the queue, <EMCLASS="emphasis">sendmail</EM> uses thefollowing pattern to create new names:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">qf<CODECLASS="replaceable"><I>H</I></CODE>AA<CODECLASS="replaceable"><I>pid</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">&#13;Here, <CODECLASS="replaceable"><I>pid</I></CODE> is the process identification number of the incarnationof <EMCLASS="emphasis">sendmail</EM> that is trying to create the file. Because <EMCLASS="emphasis">sendmail</EM>often <EMCLASS="emphasis">fork</EM>(2)'s to process the queue, the <CODECLASS="replaceable"><I>pid</I></CODE> islikely unique and therefore creates a unique name.</P><PCLASS="para">The <CODECLASS="replaceable"><I>H</I></CODE>represents the current hour of the day (using a 24-hour clock) and prefixesthe <CODECLASS="literal">AA</CODE>.It is constructed by adding the current hourto the letter <CODECLASS="literal">A</CODE> (thus 00:23 would produce <CODECLASS="literal">A+0=A</CODE>, while15:45 would produce <CODECLASS="literal">A+15=P</CODE>).Although it is not recommended, the hour character can be useful in viewingthe queue (with the <CODECLASS="literal">-bp</CODE> command-line switch) to observe the particular hours,if any, that messages tend to queue.The hour prefix does not increment.</P><PCLASS="para">If <EMCLASS="emphasis">sendmail</EM> cannot create a file(because a file with that name already exists), it increments therightmost <CODECLASS="literal">A</CODE> of the <CODECLASS="literal">AA</CODE> part of the nameto a <CODECLASS="literal">B</CODE> and tries again. It continuesthis process, incrementing the right from <CODECLASS="literal">A</CODE> to <CODECLASS="literal">Z</CODE> andthe left from <CODECLASS="literal">A</CODE> to <CODECLASS="literal">~</CODE> until it succeeds. If aunique name cannot be found,<EMCLASS="emphasis">sendmail</EM> has failed in its attempt to queue the message.The last filename tried is:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">qf<CODECLASS="replaceable"><I>H</I></CODE>~Zpid</PRE></BLOCKQUOTE></P><PCLASS="para">This name is unlikely to ever appear, because the clocking providesfor over 1600 possible unique names. With some versions of <EMCLASS="emphasis">sendmail</EM>,however, it may appear if the queue directory is not writable. For example,the <CODECLASS="literal">-C</CODE> command-line switch, when used by a normal user, might cause <EMCLASS="emphasis">sendmail</EM> to give up its <EMCLASS="emphasis">root</EM>privilege, thus causing this message to be printed.</P><PCLASS="para">The <CODECLASS="literal">-d7.1</CODE> (a.k.a. <CODECLASS="literal">-d7</CODE>) debugging switch causes <EMCLASS="emphasis">sendmail</EM>to print the portion of the queue name that is common to all thefiles that constitute a single queued message. </P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">queuename: assigned id <CODECLASS="replaceable"><I>H</I></CODE>AA<CODECLASS="replaceable"><I>pid</I></CODE>, env=<CODECLASS="replaceable"><I>addr</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <EMCLASS="emphasis">sendmail</EM> prints the identifier portion of the filename(the <CODECLASS="replaceable"><I>H</I></CODE><CODECLASS="literal">AA</CODE>, or whatever letters succeeded, and the <CODECLASS="replaceable"><I>pid</I></CODE>)that is common to the <CODECLASS="literal">df</CODE>, <CODECLASS="literal">qf</CODE>, and<CODECLASS="literal">xf</CODE> files.The <CODECLASS="replaceable"><I>addr</I></CODE> is the address in memory of theC language structure that describes the envelope for themail message that is queued.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-27">37.5.27 -d7.2</A></H3><PCLASS="refpurpose">Show assigned queue file name</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d7.2</CODE> debugging switch tells <EMCLASS="emphasis">sendmail</EM>to print the full filename of the file that it just created in the queuedirectory:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">queuename: <CODECLASS="replaceable"><I>letter</I></CODE>f<CODECLASS="replaceable"><I>H</I></CODE>AA<CODECLASS="replaceable"><I>pid</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">The first <CODECLASS="replaceable"><I>letter</I></CODE> of the name is either <CODECLASS="replaceable"><I>d</I></CODE>, <CODECLASS="replaceable"><I>q</I></CODE>, or <CODECLASS="replaceable"><I>x</I></CODE>. The <CODECLASS="replaceable"><I>pid</I></CODE> is the process identificationnumber of the <EMCLASS="emphasis">sendmail</EM> process that created the file.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-28">37.5.28 -d7.9</A></H3><PCLASS="refpurpose">Dump file descriptor for the qf file</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">Once <EMCLASS="emphasis">sendmail</EM> successfully opens its <CODECLASS="literal">qf</CODE> file,it has established the unique identifier. The <CODECLASS="literal">-d7.9</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM> to dumpthe file-descriptor for that open file:&#13;</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">lockfd= <ICLASS="lineannotation">output of dumpfd</I>()<ICLASS="lineannotation"> here (see <ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-13"TITLE="">Section 37.5.13</A>)</I></PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-29">37.5.29 -d7.20</A></H3><PCLASS="refpurpose">Show queue names being tried</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d7.20</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM>to print each filename that it is attempting to try as it clocksthe <CODECLASS="literal">AA</CODE> in the name from <CODECLASS="literal">AA</CODE> to <CODECLASS="literal">~Z</CODE>:&#13;</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">queuename: trying qfHAA16391queuename: trying qfHAB16391queuename: trying qfHAC16391queuename: trying qfHAD16391... <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> and so on</I></PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-30">37.5.30 -d8.1</A></H3><PCLASS="refpurpose">DNS name resolution</P>(useful)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">Name resolution is the process of determining a machine's IPaddress based on its fully qualified domain name. This isdone by using the Domain Name System (DNS).The process that <EMCLASS="emphasis">sendmail</EM> uses to resolve a name is described in <ACLASS="xref"HREF="ch21_02.htm"TITLE="How sendmail Uses DNS">Section 21.2, "How sendmail Uses DNS"</A>.</P><PCLASS="para">When <EMCLASS="emphasis">sendmail</EM> finds that a hostname is really an MX(mail exchanger) record, it attempts to look up the A recordfor the host that handles mail receipt. That requestmay fail for a variety of reasons. If the <CODECLASS="literal">-d8.1</CODE> (a.k.a. <CODECLASS="literal">-d8</CODE>) debuggingswitch is specified, <EMCLASS="emphasis">sendmail</EM> produces the following message:&#13;</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">getmxrr: res_search(<CODECLASS="replaceable"><I>host</I></CODE>) failed (errno=<CODECLASS="replaceable"><I>err</I></CODE>, h_errno=<CODECLASS="replaceable"><I>herr</I></CODE>)</PRE></BLOCKQUOTE></P><PCLASS="para">&#13;Here, <CODECLASS="replaceable"><I>host</I></CODE> is the hostname that was being looked up, <CODECLASS="replaceable"><I>err</I></CODE>is the system error number (if any) from <EMCLASS="emphasis">&lt;errno.h&gt;</EM>, and <CODECLASS="replaceable"><I>herr</I></CODE> is the resolver specific error from <EMCLASS="emphasis">&lt;netdb.h&gt;</EM> as shown in<ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-TAB-4"TITLE="Resolver Errors from netdb.h">Table 37.5</A>.&#13;</P><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="SML2-CH-37-TAB-4">Table 37.5: Resolver Errors from netdb.h</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Value</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Mnemonic</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Description</TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">HOST_NOT_FOUND</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Host not found (authoritative answer returned)</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">2</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">TRY_AGAIN</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Nonauthoritative server not found or server failure</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">3</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">NO_RECOVERY</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Nonrecoverable errors and refusals</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">4</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">NO_DATA</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Valid name but no record of requested type</TD></TR></TBODY></TABLE></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-31">37.5.31 -d8.2</A></H3><PCLASS="refpurpose">Call to getcanonname(3)</P>(useful)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The routine <EMCLASS="emphasis">dns_getcanonname</EM>() in <EMCLASS="emphasis">domain.c</EM> of the <EMCLASS="emphasis">sendmail</EM>source converts a hostname to a fully qualified domain name. This routineis called only if DNS is used to look up hostnames, as determinedby the <CODECLASS="literal">ResolverOptions</CODE> (<CODECLASS="literal">I</CODE>) option (see <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-55"TITLE="">Section 34.8.55, ResolverOptions (I)</A>) and the<CODECLASS="literal">ServiceSwitchFile</CODE> option (see <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-61"TITLE="">Section 34.8.61</A>). If it is, <EMCLASS="emphasis">dns_getcanonname</EM>() can be called from two places:during startup to get the values for <CODECLASS="literal">$w</CODE>, <CODECLASS="literal">$j</CODE>, and <CODECLASS="literal">$m</CODE>(see <ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-2"TITLE="">Section 37.5.2</A>) or when a host is looked up via the<CODECLASS="literal">$[</CODE> and <CODECLASS="literal">$]</CODE> canonify-operators (see <ACLASS="xref"HREF="ch28_06.htm#SML2-CH-28-SECT-6-6"TITLE="Canonicalize Hostname: $[ and $]">Section 28.6.6, "Canonicalize Hostname: $[ and $]"</A>).</P><PCLASS="para">The <CODECLASS="literal">-d8.2</CODE> debuggingswitch shows the hostname before it is fully qualified with this call:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">dns_getcanonname(<CODECLASS="replaceable"><I>host</I></CODE>, <CODECLASS="replaceable"><I>flag</I></CODE>)</PRE></BLOCKQUOTE></P><PCLASS="para">If the <CODECLASS="replaceable"><I>flag</I></CODE> is nonzero, calls to the <EMCLASS="emphasis">getmxrr</EM>() routine (which looks up MX records)are also traced.On entry to that routine, <EMCLASS="emphasis">sendmail</EM> will print:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">getmxrr(<CODECLASS="replaceable"><I>host</I></CODE>, droplocalhost=<CODECLASS="replaceable"><I>bool</I></CODE>)</PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="replaceable"><I>host</I></CODE> is the hostname that MX records are being lookedup for. The <CODECLASS="replaceable"><I>bool</I></CODE>, if nonzero, means that all MX recordsthat are less preferred than the local host (as determined by <CODECLASS="literal">$=w</CODE>)will be discarded. If zero, they will be retained.</P><PCLASS="para">The <CODECLASS="literal">-d8.2</CODE> debugging switch also causes <EMCLASS="emphasis">sendmail</EM> to show the result of processing the <CODECLASS="literal">ResolverOptions</CODE> (<CODECLASS="literal">I</CODE>) option'ssettings (see <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-55"TITLE="">Section 34.8.55</A>)while reading the configuration file:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">_res.options = <CODECLASS="replaceable"><I>hex</I></CODE>, HasWildcardMX = <ICLASS="lineannotation">1 or 0</I></PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="replaceable"><I>hex</I></CODE> is a hexadecimal representation of the <CODECLASS="literal">state</CODE>structure's <CODECLASS="literal">options</CODE> variable as described in <EMCLASS="emphasis">&lt;resolv.h&gt;</EM>.The value of HasWildcardMX is determined by its prefix (<CODECLASS="literal">+</CODE>or <CODECLASS="literal">-</CODE>) when listed with the <CODECLASS="literal">ResolverOptions</CODE> (<CODECLASS="literal">I</CODE>) option.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-32">37.5.32 -d8.3</A></H3><PCLASS="refpurpose">Trace dropped local hostnames</P>(useful)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">If a hostname is dropped because <CODECLASS="replaceable"><I>bool</I></CODE> (above) is nonzero,the <CODECLASS="literal">-d8.3</CODE> switch causes <EMCLASS="emphasis">sendmail</EM> to print the following:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">found localhost (<CODECLASS="replaceable"><I>host</I></CODE>) in MX list, pref=<CODECLASS="replaceable"><I>pref</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="replaceable"><I>host</I></CODE> is the hostname that is being dropped. The <CODECLASS="replaceable"><I>pref</I></CODE>is the preference associated with the MX record.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-33">37.5.33 -d8.5</A></H3><PCLASS="refpurpose">Hostname being tried in getcanonname(3)</P>(useful)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d8.5</CODE> debugging switch causes the <EMCLASS="emphasis">getcanonname</EM>(3) routineto print the hostname it is trying to fully qualify. It shows thename with the local domain appended without the local domain appended,and at each step in between. Each try is printed as:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">getcanonname: trying <CODECLASS="replaceable"><I>host.domain</I></CODE> (<CODECLASS="replaceable"><I>type</I></CODE>)</PRE></BLOCKQUOTE></P><PCLASS="para">Here, the <CODECLASS="replaceable"><I>type</I></CODE>  is the type of lookup and is either ANY,A, or MX.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-34">37.5.34 -d8.7 </A></H3><PCLASS="refpurpose">Yes/no response to -d8.5</P>(useful)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d8.7</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM> to print a yes or no response to each ofthe &quot;trying&quot; lines printed by <CODECLASS="literal">-8.5</CODE>.Yes means that the <CODECLASS="replaceable"><I>host</I></CODE> could successfully be fully canonicalized.A yes answer prints just this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">YES</PRE></BLOCKQUOTE></P><PCLASS="para">If the <CODECLASS="replaceable"><I>host</I></CODE> could not be canonicalized, a more complex answeris printed:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">NO: errno=<CODECLASS="replaceable"><I>err</I></CODE>, h_errno=<CODECLASS="replaceable"><I>herr</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="replaceable"><I>err</I></CODE>is the system error number (if any) from <EMCLASS="emphasis">&lt;errno.h&gt;</EM>, and<CODECLASS="replaceable"><I>herr</I></CODE> is the resolver specific error from <EMCLASS="emphasis">&lt;netdb.h&gt;</EM> as shown in<ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-TAB-4"TITLE="Resolver Errors from netdb.h">Table 37.5</A>.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-35">37.5.35 -d8.8</A></H3><PCLASS="refpurpose">Resolver debugging</P>(useful)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d8.8</CODE> debugging switch causes the resolver library tobe put into debugging mode (if that was mode was included whenthat library was compiled). The <CODECLASS="literal">ResolverOptions</CODE> (<CODECLASS="literal">I</CODE>) option(see <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-55"TITLE="">Section 34.8.55</A>)+DEBUG also turns on this debugging mode.But be aware that turning on +DEBUGwill cause a large number of screens full of output to be producedby the resolver library for every DNS lookup.</P><PCLASS="para">If the name server returns an answer to an MX lookup, and ifthe answer is not an MX record or an error, <EMCLASS="emphasis">sendmail</EM> will skip that host.The <CODECLASS="literal">-d8.8</CODE> debugging switch (or the resolver librarybeing in debug mode) then causes <EMCLASS="emphasis">sendmail</EM>to print the following:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">unexpected answer type <CODECLASS="replaceable"><I>wrongtype</I></CODE>, size <CODECLASS="replaceable"><I>bytes</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="replaceable"><I>wrongtype</I></CODE> is an integer that can be found in<EMCLASS="emphasis">&lt;arpa/nameser.h&gt;</EM>.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-36">37.5.36 -d8.20</A></H3><PCLASS="refpurpose">Inconsistency in returned information</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">Internally, the resolver library (<EMCLASS="emphasis">libresolv.a</EM>) stores host domainnames in compressed form (for transmission efficiency). We won'tcover the nature of that compression. For our purposes it issufficient to know that the <EMCLASS="emphasis">sendmail</EM> programcalls <EMCLASS="emphasis">dn_skipname</EM>(3) from the resolver library to skip past thecompressed part of a host domain name. That call should never fail,but if it does, the <CODECLASS="literal">-d8.20</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM>to print:&#13;</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">qdcount failure (<CODECLASS="replaceable"><I>questions</I></CODE>)</PRE></BLOCKQUOTE></P><PCLASS="para">&#13;The <CODECLASS="replaceable"><I>questions</I></CODE> is a count of the number of queries made.&#13;</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-37">37.5.37 -d9.1</A></H3><PCLASS="refpurpose">Canonify hostname and RFC1413 queries</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d9.1</CODE> (a.k.a. <CODECLASS="literal">-d9</CODE>) debugging switchcan be used to watch <EMCLASS="emphasis">sendmail</EM> convert hostnames and addressesinto canonical form.This is done by watching the <EMCLASS="emphasis">host_map_lookup</EM>() functionwith <CODECLASS="literal">-d9.1</CODE>.First the hostname is looked up in the symbol table. If itexists there and if it is marked as a valid canonical entry,<EMCLASS="emphasis">sendmail</EM> prints&#13;</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">host_map_lookup(<CODECLASS="replaceable"><I>host</I></CODE>) =&gt; CACHE <CODECLASS="replaceable"><I>canon</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">&#13;Here, the name <CODECLASS="replaceable"><I>host</I></CODE> was found in the symbol table. The valuereturned was a valid canonical name. If <CODECLASS="replaceable"><I>host</I></CODE> had notbeen found, the <CODECLASS="replaceable"><I>canon</I></CODE> would have printed as NULL.</P><PCLASS="para">If <EMCLASS="emphasis">sendmail</EM> is running in defer-delivery mode(see the <CODECLASS="literal">DeliveryMode</CODE> (<CODECLASS="literal">d</CODE>)option in <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-16"TITLE="">Section 34.8.16, DeliveryMode (d)</A>), it willskip looking up the hostname further. This is done because dial-on-demandconnections should not be brought up merely to perform unnecessaryDNS lookups. When <EMCLASS="emphasis">sendmail</EM> skips further lookups, it prints:&#13;</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">host_map_lookup(<CODECLASS="replaceable"><I>host</I></CODE>) =&gt; DEFERRED</PRE></BLOCKQUOTE></P><PCLASS="para">&#13;If the name is not in the symbol table, it is looked up with the<EMCLASS="emphasis">getcanonname</EM>() function.  First <EMCLASS="emphasis">sendmail</EM> prints:&#13;</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">host_map_lookup(<CODECLASS="replaceable"><I>host</I></CODE>) =&gt;</PRE></BLOCKQUOTE></P><PCLASS="para">&#13;with no trailing newline. Then, if the canonical name is returnedby <EMCLASS="emphasis">getcanonname</EM>(), that returned name is printed. Otherwise,FAIL is printed. If <EMCLASS="emphasis">sendmail</EM> is compiled with NAMED_BIND definedfor DNS support (see <ACLASS="xref"HREF="ch18_08.htm#SML2-CH-18-SECT-8-23"TITLE="">Section 18.8.23, NAMED-BIND</A>), the FAIL is followed by the resolver specific error (<CODECLASS="replaceable"><I>herr</I></CODE>)from <EMCLASS="emphasis">&lt;netdb.h&gt;</EM>:&#13;</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">host_map_lookup(<CODECLASS="replaceable"><I>host</I></CODE>) =&gt; <CODECLASS="replaceable"><I>herr</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">&#13;The <CODECLASS="literal">-d9</CODE> debugging switch is also used to display<EMCLASS="emphasis">identd</EM>(8) queries. When a network connection is made froma remote host to the local host, the local <EMCLASS="emphasis">sendmail</EM> usesthe RFC1413 identification protocol to query the remote hostfor the name of the user who instantiated the connection.The result of that query is printed as:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">getauthinfo: <CODECLASS="replaceable"><I>result</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>result</I></CODE> is two pieces of information: anaddress composed of the username, an <CODECLASS="literal">@</CODE>, and thereal name of the remote host and the IP address of that host:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">getauthinfo: george@fbi.dc.gov [123.45.67.8]</PRE></BLOCKQUOTE></P><PCLASS="para">If the query fails, nothing is printed.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-38">37.5.38 -d9.3</A></H3><PCLASS="refpurpose">Show raw RFC1413 reply</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The above information is not provided by the remote hostin that clear form. Instead, <EMCLASS="emphasis">sendmail</EM> needs to parsethe needed information from a raw reply. The <CODECLASS="literal">-d9.3</CODE>debugging switch causes the raw reply to be printed:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">getauthinfo:  got <CODECLASS="replaceable"><I>raw_reply</I></CODE></PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-39">37.5.39 -d9.10</A></H3><PCLASS="refpurpose">Show RFC1413 query being sent</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d9.10</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM>to display its outgoing RFC1413 query:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">getauthinfo: sent <CODECLASS="replaceable"><I>query</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here, the outgoing <CODECLASS="replaceable"><I>query</I></CODE> is composed of two numbers: the TCP port on the remote machine where itsRFC1413 server is running, followed by a dot andthe local port number for the original connection.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-40">37.5.40 -d10.1</A></H3><PCLASS="refpurpose">Show recipient delivery</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">When <EMCLASS="emphasis">sendmail</EM> is about to deliver a mail message, ithas already resolved three pieces of information: whichdelivery agent to use, the name of the host that receivesthe message, and the name of one or more recipients for thatmessage.The <CODECLASS="literal">-d10.1</CODE> (a.k.a. <CODECLASS="literal">-d10)</CODE> debugging switch tells<EMCLASS="emphasis">sendmail</EM> to display information about the recipient towhom it is about to deliver:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">-deliver, id=<CODECLASS="replaceable"><I>mid</I></CODE>, mailer=<CODECLASS="replaceable"><I>num</I></CODE>, host=`<CODECLASS="replaceable"><I>hname</I></CODE>', first user=`<CODECLASS="replaceable"><I>uname</I></CODE>'</PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>mid</I></CODE> is the queue message identifier (such as PAA08463).The <CODECLASS="replaceable"><I>num</I></CODE> is the number of the delivery agent selected.Delivery agent numbers can be displayed by using the <CODECLASS="literal">-d0.15</CODE> debugging switch.The <CODECLASS="replaceable"><I>hname</I></CODE> is the name of thehost that receives delivery. The <CODECLASS="replaceable"><I>uname</I></CODE> is the name of thefirst of possibly many users who receive the mail message.The <CODECLASS="replaceable"><I>uname</I></CODE> can be either a single name such as <EMCLASS="emphasis">joe</EM>or a full forwarding address such as <EMCLASS="emphasis">joe@jokes.are.us</EM>.</P><PCLASS="para">When <EMCLASS="emphasis">sendmail</EM> attempts delivery, it may be deliveringto multiple recipients. It stores its list of recipients internallyas a linked list of C language structures, each of which holds informationthat is specific to each recipient address.The <CODECLASS="literal">-d10.1</CODE> debugging switch also causes <EMCLASS="emphasis">sendmail</EM> toprint that information using the <EMCLASS="emphasis">printaddr</EM>() routine:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">send to <ICLASS="lineannotation">output of printaddr</I>()<ICLASS="lineannotation"> here (see <ACLASS="xref"HREF="ch37_03.htm#SML2-CH-37-SECT-3-1"TITLE="The Output Produced by printaddr()">Section 37.3.1</A>)</I></PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-41">37.5.41 -d10.2</A></H3><PCLASS="refpurpose">Dump controlling user's address</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">Every recipient address may have a controllinguser associated with it (see <ACLASS="xref"HREF="ch23_09.htm#SML2-CH-23-SECT-9-2"TITLE="">Section 23.9.2, C line</A>). The <CODECLASS="literal">-d10.2</CODE> causes <EMCLASS="emphasis">sendmail</EM> todump the address of the controlling user using the <EMCLASS="emphasis">printaddr</EM>() routine:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">ctladdr= <ICLASS="lineannotation">output of printaddr</I>()<ICLASS="lineannotation"> here (see <ACLASS="xref"HREF="ch37_03.htm#SML2-CH-37-SECT-3-1"TITLE="The Output Produced by printaddr()">Section 37.3.1</A>)</I></PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-42">37.5.42 -d10.5</A></H3><PCLASS="refpurpose">Showq don't send to MeToo address</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">If the <CODECLASS="literal">MeToo</CODE> (<CODECLASS="literal">m</CODE>) option (see <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-39"TITLE="">Section 34.8.39, MeToo (m)</A>) is set to false, the <CODECLASS="literal">-d10.5</CODE> debuggingswitch tells <EMCLASS="emphasis">sendmail</EM> to dump the address that won't receive(the QDONTSEND) the mail message.</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">deliver: QDONTSEND <ICLASS="lineannotation">output of printaddr</I>()<ICLASS="lineannotation"> here (see <ACLASS="xref"HREF="ch37_03.htm#SML2-CH-37-SECT-3-1"TITLE="The Output Produced by printaddr()">Section 37.3.1</A>)</I></PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-43">37.5.43 -d10.100</A></H3><PCLASS="refpurpose">Predelivery file descriptor dump</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d10.100</CODE> debugging switch tells <EMCLASS="emphasis">sendmail</EM> to dumpall its file descriptors just before it is about to attemptdelivery.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-44">37.5.44 -d11.1</A></H3><PCLASS="refpurpose">Trace delivery</P>(useful)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d11.1</CODE> (a.k.a. <CODECLASS="literal">-d11</CODE>) debuggingswitch is used to trace message delivery. Foreach delivery agent the following is printed:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">openmailer: <CODECLASS="replaceable"><I>argv</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">&#13;Here, <CODECLASS="replaceable"><I>argv</I></CODE> is the <CODECLASS="literal">A=</CODE> array for the delivery agent, withmacros expanded and printed.</P><PCLASS="para">The status of remote hosts is cached internally.Before connecting to a remote host, <EMCLASS="emphasis">sendmail</EM> checks itscache to see whether that host is down. If it is, it skipsconnecting to that host. If the <CODECLASS="literal">-d11.1</CODE> debugging switch is alsospecified, the status of the down host is printed as:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">openmailer: <ICLASS="lineannotation">output of mci_dump</I>()<ICLASS="lineannotation"> here</I></PRE></BLOCKQUOTE></P><PCLASS="para">The output of <EMCLASS="emphasis">mci_dump()</EM> looks like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">MCI@<CODECLASS="replaceable"><I>memaddr</I></CODE>: flags=<CODECLASS="replaceable"><I>mci_flags</I></CODE>&lt;<ICLASS="lineannotation">flag,flag,...</I>&gt;, errno=<CODECLASS="replaceable"><I>mci_errno</I></CODE>, herrno=<CODECLASS="replaceable"><I>mci_herrno</I></CODE>, exitstat=<CODECLASS="replaceable"><I>mci_exitstat</I></CODE>, state=<CODECLASS="replaceable"><I>mci_state</I></CODE>,pid=<CODECLASS="replaceable"><I>mci_pid</I></CODE>, maxsize=<CODECLASS="replaceable"><I>mci_maxsize</I></CODE>, phase=<CODECLASS="replaceable"><I>mci_phase</I></CODE>, mailer=<CODECLASS="replaceable"><I>mci_mailer</I></CODE>,host=<CODECLASS="replaceable"><I>mci_host</I></CODE>, lastuse=<CODECLASS="replaceable"><I>mci_lastuse</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">The meaning of each <CODECLASS="replaceable"><I>mci_</I></CODE> item in the above output is described in<ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-TAB-5"TITLE="The Meaning of the MCI Structure Items">Table 37.6</A>.</P><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="SML2-CH-37-TAB-5">Table 37.6: The Meaning of the MCI Structure Items</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Name</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">What prints</TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="replaceable"><I>mci_memaddr</I></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">The address in memory of this C language structure</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="replaceable"><I>mci_flags</I></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">The flag bits in hexadecimal (see <ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-TAB-6"TITLE="The Meaning of mci_flags Hexadecimal Values">Table 37.7</A>)</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="replaceable"><I>mci_errno</I></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">The error number of the last connection</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="replaceable"><I>mci_herrno</I></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">The DNS h_errno of the last lookup</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="replaceable"><I>mci_exitstat</I></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">The <EMCLASS="emphasis">&lt;sysexits.h&gt;</EM> exit status of last connection</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="replaceable"><I>mci_state</I></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">The current SMTP state (see <ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-TAB-15"TITLE="mci_get() Connection States">Table 37.16</A>)</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="replaceable"><I>mci_maxsize</I></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">The maximum size message the host will accept</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="replaceable"><I>mci_pid</I></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">The PID of the child process</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="replaceable"><I>mci_phase</I></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">SMTP phase (string) such as &quot;client greeting&quot; (or NULL)</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="replaceable"><I>mci_mailer</I></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">The (text) name of the delivery agent (or NULL)</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="replaceable"><I>mci_host</I></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">The host's name (or NULL)</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="replaceable"><I>mci_lastuse</I></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Last usage time in <EMCLASS="emphasis">ctime</EM>(3) format</TD></TR></TBODY></TABLE><PCLASS="para"><ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-TAB-6"TITLE="The Meaning of mci_flags Hexadecimal Values">Table 37.7</A>shows what the individual flag bits in <CODECLASS="literal">mci_flags</CODE> mean,and the human-readable <EMCLASS="emphasis">flags</EM> text that corresponds to each bit.Those text items are shown with the leading source <CODECLASS="literal">MCIF_</CODE> prefixremoved.</P><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="SML2-CH-37-TAB-6">Table 37.7: The Meaning of mci_flags Hexadecimal Values</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Value</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Name</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Meaning</TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0001</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">VALID</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">This entry is valid</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0002</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">TEMP</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Don't cache this connection</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0004</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">CACHED</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">This connection currently in open cache</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0008</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">ESMTP</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">This host speaks ESMTP</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0010</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">EXPN</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">EXPN command supported</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0020</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">SIZE</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">SIZE option supported</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0040</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">8BITMIME</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">BODY=8BITMIME supported</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0080</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">7BIT</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Strip this message to 7 bits</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0100</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">MULTSTAT</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">MAIL11V3: handles MULT status</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0200</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">INHEADER</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Currently outputting header</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0400</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">CVT8TO7</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Convert from 8 to 7 bits</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0800</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">DSN</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">DSN extension supported</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">1000</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">8BITOK</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">OK to send 8-bit characters</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">2000</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">CVT7TO8</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Convert from 7 to 8 bits</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">4000</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">INMIME</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Currently reading MIME header</TD></TR></TBODY></TABLE><PCLASS="para">After checking to see whether the host is down, <EMCLASS="emphasis">sendmail</EM> attempts to connect to itfor network SMTP mail. If that connect fails, the <CODECLASS="literal">-d11.1</CODE> debuggingswitch causes the following to be printed:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">openmailer: makeconnection =&gt; stat=<CODECLASS="replaceable"><I>exitstatus</I></CODE>, errno=<CODECLASS="replaceable"><I>errno</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>exitstatus</I></CODE> is a numerical representation of the reason forthe failure as documented in <EMCLASS="emphasis">&lt;sysexits.h&gt;</EM>, and <CODECLASS="replaceable"><I>errno</I></CODE>is the system-level reason for the error, as documented in <EMCLASS="emphasis">&lt;errno.h&gt;</EM>.</P><PCLASS="para">Other errors, such as failure to establish a <EMCLASS="emphasis">pipe</EM>(2),or failure to <EMCLASS="emphasis">fork</EM>(2), causes the following to be printed:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">openmailer: NULL</PRE></BLOCKQUOTE></P><PCLASS="para">This message (although it contains no information) signals thata more descriptive error message was logged with <EMCLASS="emphasis">syslog</EM>(3) (see<ACLASS="xref"HREF="ch26_01.htm#SML2-CH-26-SECT-1"TITLE="Logging with syslog">Section 26.1, "Logging with syslog"</A>).</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-45">37.5.45 -d11.2</A></H3><PCLASS="refpurpose">Show the uid/gid running as during delivery</P>(useful)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">To perform delivery, <EMCLASS="emphasis">sendmail</EM> often has to set its <EMCLASS="emphasis">uid</EM>to something other than <EMCLASS="emphasis">root</EM>'s.The logic behind that process is described in <ACLASS="xref"HREF="ch24_02.htm#SML2-CH-24-SECT-2-2"TITLE="Delivery to Files">Section 24.2.2</A>.The <CODECLASS="literal">-d11.2</CODE> debugging switch tells <EMCLASS="emphasis">sendmail</EM> toprint the real and effective <EMCLASS="emphasis">uid</EM>'s that it is running underduring delivery.</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">openmailer: running as r/euid=<CODECLASS="replaceable"><I>ruid</I></CODE>/<CODECLASS="replaceable"><I>euid</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Also, the <CODECLASS="literal">-d11.2</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM> toprint any error response that may be produced by a delivery agent:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">giveresponse: stat=<CODECLASS="replaceable"><I>status</I></CODE>, e-&gt;e_message=<CODECLASS="replaceable"><I>what</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">&#13;Here, <CODECLASS="replaceable"><I>status</I></CODE> is the error that caused delivery to fail (orsucceed if it is 0) as defined in <EMCLASS="emphasis">&lt;sysexits.h&gt;</EM>. The <CODECLASS="replaceable"><I>what</I></CODE> is either the error message produced by thedelivery agent or &quot;&lt;NULL&gt;&quot; if the delivery agent was silent.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-46">37.5.46 -d11.20</A></H3><PCLASS="refpurpose">Show tried D= directories</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">Execution of a delivery agent can take place in any of a sequenceof directories as defined by the <CODECLASS="literal">D=</CODE> delivery agent equate(see <ACLASS="xref"HREF="ch30_04.htm#SML2-CH-30-SECT-4-3"TITLE="">Section 30.4.3, D=</A>).The <CODECLASS="literal">-d11.20</CODE> debugging switch causes each directoryto be printed as it is tried:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">openmailer: trydir <CODECLASS="replaceable"><I>dir</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>dir</I></CODE> is the name of the directory that <EMCLASS="emphasis">sendmail</EM>is about to <EMCLASS="emphasis">chdir</EM>(2) into.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-47">37.5.47 -d12.1</A></H3><PCLASS="refpurpose">Show mapping of relative host</P>(useful)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">In the SMTP RCPT command, <EMCLASS="emphasis">sendmail</EM> is requiredto express the recipient's address relative to the localhost. For domain addresses, this simply means that the addressshould be RFC822-compliant.</P><PCLASS="para">The <CODECLASS="literal">-d12.1</CODE> (a.k.a. <CODECLASS="literal">-d12</CODE>) debugging switch causes<EMCLASS="emphasis">sendmail</EM> to print the address as it appearedbefore it was made relative:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">remotename(<CODECLASS="replaceable"><I>addr</I></CODE>)</PRE></BLOCKQUOTE></P><PCLASS="para">If the <CODECLASS="replaceable"><I>addr</I></CODE> is for the sender or recipient and is beingprocessed from a queue file, then nothing more is printed, andthe <CODECLASS="replaceable"><I>addr</I></CODE> is processed by rule set 3. If the deliveryagent for the recipient has the <CODECLASS="literal">F=C</CODE> flag set (see <ACLASS="xref"HREF="ch30_08.htm#SML2-CH-30-SECT-8-15"TITLE="">Section 30.8.15, F=C</A>)and the recipient<EMCLASS="emphasis">address</EM> lacks a domain part, then the domain of the sender is appended, and the result is processed by rule set 3 again.Sender/recipient-specific rule sets are then applied (1 and <CODECLASS="literal">S=</CODE>for the sender, or 2 and <CODECLASS="literal">R=</CODE> for the recipient). Next,rule set 4 is applied, and any macros in the result are expanded.Finally, the fully qualified and relative address is printed as:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">remotename =&gt; `<CODECLASS="replaceable"><I>addr</I></CODE>'</PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-48">37.5.48 -d13.1</A></H3><PCLASS="refpurpose">Show delivery</P>(useful)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d13</CODE> (a.k.a. <CODECLASS="literal">-d13</CODE>) debugging switch causes<EMCLASS="emphasis">sendmail</EM> to display information about the recipientsof each mail message as it is being delivered.The <CODECLASS="literal">-d13.1</CODE> debugging switch tells <EMCLASS="emphasis">sendmail</EM>to print the mode of delivery and then the recipient information:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">SENDALL: mode <CODECLASS="replaceable"><I>dmode</I></CODE>, id=<CODECLASS="replaceable"><I>mid</I></CODE>, e_from <ICLASS="lineannotation">output of printaddr</I>()<ICLASS="lineannotation"> here (see <ACLASS="xref"HREF="ch37_03.htm#SML2-CH-37-SECT-3-1"TITLE="The Output Produced by printaddr()">Section 37.3.1</A>)</I>        e_flags = <ICLASS="lineannotation">envelope flags here</I>        sendqueue:<ICLASS="lineannotation">output of printaddr</I>()<ICLASS="lineannotation"> here (see <ACLASS="xref"HREF="ch37_03.htm#SML2-CH-37-SECT-3-1"TITLE="The Output Produced by printaddr()">Section 37.3.1</A>)</I></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <EMCLASS="emphasis">dmode</EM> is one of those shown in<ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-TAB-7"TITLE="Delivery Modes Used by sendall()">Table 37.8</A>.The <CODECLASS="replaceable"><I>mid</I></CODE> is the queue message identifier (such as PAA08463).The address of the sender, <CODECLASS="literal">e_from</CODE>, is dumped byusing the <EMCLASS="emphasis">printaddr</EM>() routine.Then the envelope flags, <CODECLASS="literal">e_flags</CODE>, are dumpedas described in <ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-TAB-2"TITLE="Hexadecimal Envelope Flags">Table 37.3</A>.Next, information about all the recipients (<CODECLASS="literal">sendqueue:</CODE>) is printed by using the <EMCLASS="emphasis">printaddr</EM>() routine.</P><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="SML2-CH-37-TAB-7">Table 37.8: Delivery Modes Used by <EMCLASS="emphasis">sendall</EM>()</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Mode</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Description</TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">i</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Interactive delivery</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">j</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Deliver w/o queueing (obsolete as of V8)</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">b</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Deliver in background</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">q</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Queue, don't deliver</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">d</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Defer, queue w/o DNS lookups</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">v</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Verify only (used internally)</TD></TR></TBODY></TABLE><PCLASS="para">Finally, the <CODECLASS="literal">-d13.1</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM>to print a message every time it splits an envelope in two:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">sendall: split <CODECLASS="replaceable"><I>orig</I></CODE> into <CODECLASS="replaceable"><I>new</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>orig</I></CODE> is the original queue message identifierfor the original envelope (such as PAA08463) and <CODECLASS="replaceable"><I>new</I></CODE> is the identifier for the new envelope, the nearidentical clone of the first. Envelopes need to split if theyhave different owners.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-49">37.5.49 -d13.5</A></H3><PCLASS="refpurpose">Show addresses that we should not send to</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d13.5</CODE> debugging switch is used to displayaddresses to which mail should not be delivered.One such address is that of the sender of the cloned envelope after a split:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">sendall(split): QDONTSEND <ICLASS="lineannotation">output of printaddr</I>()<ICLASS="lineannotation"> here (see <ACLASS="xref"HREF="ch37_03.htm#SML2-CH-37-SECT-3-1"TITLE="The Output Produced by printaddr()">Section 37.3.1</A>)</I></PRE></BLOCKQUOTE></P><PCLASS="para">Another is the sender address(unless the <CODECLASS="literal">MeToo</CODE> (<CODECLASS="literal">m</CODE>) option, see <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-39"TITLE="">Section 34.8.39</A>, is set):</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">sendall: QDONTSEND <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-">output of printaddr</I>()<ICLASS="lineannotation"> here (see <ACLASS="xref"HREF="ch37_03.htm#SML2-CH-37-SECT-3-1"TITLE="The Output Produced by printaddr()">Section 37.3.1</A>)</I></PRE></BLOCKQUOTE></P><PCLASS="para">Finally, senders who are the <CODECLASS="literal">owner-</CODE> of mailing lists(see <ACLASS="xref"HREF="ch25_03.htm"TITLE="Defining a Mailing List Owner">Section 25.3, "Defining a Mailing List Owner"</A>)should not have mail sent to them.</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">sendall(owner): QDONTSEND <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-">output of printaddr</I>()<ICLASS="lineannotation"> here (see <ACLASS="xref"HREF="ch37_03.htm#SML2-CH-37-SECT-3-1"TITLE="The Output Produced by printaddr()">Section 37.3.1</A>)</I></PRE></BLOCKQUOTE></P><PCLASS="para">&#13;This latter sender address is derived by a call to <EMCLASS="emphasis">setsender</EM>(),which can be separately viewed with the <CODECLASS="literal">-d45</CODE> debugging switch.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-50">37.5.50 -d13.10</A></H3><PCLASS="refpurpose">Trace sendenvelope()</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d13.10</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM> to printthe following upon entering its internal <EMCLASS="emphasis">sendenvelope</EM>()routine:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">sendenvelope(<CODECLASS="replaceable"><I>ident</I></CODE>) e_flags=<CODECLASS="replaceable"><I>hex</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">The <EMCLASS="emphasis">ident</EM> is either the queue identifier (such as SAA24069)or the [NOQUEUE] if the message was never assigned an identifier(such as if it was never queued).The <CODECLASS="literal">e_flags</CODE> are dumped in hexadecimalas described in <ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-TAB-2"TITLE="Hexadecimal Envelope Flags">Table 37.3</A>.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-51">37.5.51 -d13.20</A></H3><PCLASS="refpurpose">Show final mode</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <EMCLASS="emphasis">sendmail</EM> program's delivery mode (as initiallyset with the <CODECLASS="literal">DeliveryMode</CODE> (<CODECLASS="literal">d</CODE>) option; see<ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-16"TITLE="">Section 34.8.16</A>) can change during deliveryfor a complex series of reasons. The <CODECLASS="literal">-d13.20</CODE> debuggingswitch causes the final delivery mode to be displayed:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">sendall: final mode = <CODECLASS="replaceable"><I>char</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>char</I></CODE> is the one of the characters that can bespecified for the <CODECLASS="literal">DeliveryMode</CODE> (<CODECLASS="literal">d</CODE>) option.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-52">37.5.52 -d13.29</A></H3><PCLASS="refpurpose">Show auto-queueing</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">If, after all recipient addresses are checked, none are leftto be delivered to (everyone of them was either dropped or queued),and if the <CODECLASS="literal">DeliveryMode</CODE> (<CODECLASS="literal">d</CODE>) option (see <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-16"TITLE="">Section 34.8.16</A>) is neither <CODECLASS="literal">q</CODE>,<CODECLASS="literal">d</CODE>, nor <CODECLASS="literal">v</CODE>, the <CODECLASS="literal">-d13.29</CODE>debugging switch will cause <EMCLASS="emphasis">sendmail</EM> to print:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">No deliveries: auto-queuing</PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-53">37.5.53 -d13.30</A></H3><PCLASS="refpurpose">Show envelopes being split</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The process of creating another envelope for anothersender is called &quot;splitting the envelope.&quot;The <CODECLASS="literal">-d13.30</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM> to showits initial scanning of the send queue to count the number of envelopes(including split envelopes) that will be needed.</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Checking <ICLASS="lineannotation">output of printaddr</I>() here (see <ACLASS="xref"HREF="ch37_03.htm#SML2-CH-37-SECT-3-1"TITLE="The Output Produced by printaddr()">Section 37.3.1</A>)</PRE></BLOCKQUOTE></P><PCLASS="para">Then, depending on the result, each owner willhave one of the following printed:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">... QDONTSEND    ... QBADADDR|QQUEUEUP    ... expensive    ... deliverable</PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="literal">Q</CODE> flags are described under the output of <EMCLASS="emphasis">printaddr</EM>()in <ACLASS="xref"HREF="ch37_03.htm#SML2-CH-37-SECT-3-1"TITLE="The Output Produced by printaddr()">Section 37.3.1</A>.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-54">37.5.54 -d14.2</A></H3><PCLASS="refpurpose">Show header field commas</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">Some programs require that addresses in a list of recipients be separated fromeach other by space characters. This is called an &quot;old-style&quot; address.RFC822 requires that addressees be separatedfrom each other with comma characters.</P><PCLASS="para">The <CODECLASS="literal">-d14.2</CODE>[3]debugging switch tells <EMCLASS="emphasis">sendmail</EM>to show each header line that may need spaces converted tocommas.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[3] There is no <CODECLASS="literal">-d14.1</CODE> information.</P></BLOCKQUOTE><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">commaize(<CODECLASS="replaceable"><I>header</I></CODE>: <CODECLASS="replaceable"><I>list</I></CODE>)</PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>header</I></CODE> is the caption part of a header line, such as<CODECLASS="literal">From:</CODE>. The <CODECLASS="replaceable"><I>list</I></CODE> is a sequence of one or moreaddresses.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-55">37.5.55 -d15.1</A></H3><PCLASS="refpurpose">Show network get request activity</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">When <EMCLASS="emphasis">sendmail</EM> runs in daemon mode, it opens a socket on aport, then listens on that socket for incoming SMTP connections.The <CODECLASS="literal">-d15.1</CODE> (a.k.a. <CODECLASS="literal">-d15</CODE>) debugging switch prints information aboutboth of those steps. Note that <CODECLASS="literal">-d15.1</CODE> should usually be combinedwith <CODECLASS="literal">-d99.100</CODE>, or some output may be lost.</P><PCLASS="para">Before the socket is opened, <EMCLASS="emphasis">sendmail</EM> prints the following:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">getrequests: port 0x<CODECLASS="replaceable"><I>portno</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">This shows that the port numbered <CODECLASS="replaceable"><I>portno</I></CODE> (printed in hexadecimal notation)is used to open the socket.If that open fails, <EMCLASS="emphasis">sendmail</EM> <EMCLASS="emphasis">syslog</EM>(3)'s one ofthe following messages at LOG_CRIT and exits:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">getrequests: problem creating SMTP socket</PRE></BLOCKQUOTE></P><PCLASS="para">If the open succeeds, <EMCLASS="emphasis">sendmail</EM> attempts to bind to that socket.If it cannot bind, it <EMCLASS="emphasis">syslogs</EM> the following message at LOG_CRITand exits:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">getrequests: can't bind socket</PRE></BLOCKQUOTE></P><PCLASS="para">After it binds, <EMCLASS="emphasis">sendmail</EM> goes into a loop in which it listensfor and handles incoming SMTP requests. If the listen fails, <EMCLASS="emphasis">sendmail</EM><EMCLASS="emphasis">syslog</EM>(3)'s the following message at LOG_CRIT and exits:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">getrequests: cannot listen</PRE></BLOCKQUOTE></P><PCLASS="para">If <EMCLASS="emphasis">sendmail</EM> starts to listen successfully, this <CODECLASS="literal">-d15.1</CODE>debugging switch causes it to print the number ofthe socket on which it is listening:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">getrequests: <CODECLASS="replaceable"><I>sockno</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">This shows that <EMCLASS="emphasis">sendmail</EM> is then listening on the socket whosefile descriptor is <CODECLASS="replaceable"><I>sockno</I></CODE>.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-56">37.5.56 -d15.2</A></H3><PCLASS="refpurpose">Incoming connections</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">In daemon mode, <EMCLASS="emphasis">sendmail</EM> waits for an incoming SMTPconnection. When that connection is made, <EMCLASS="emphasis">sendmail</EM>forks, and the child processes the connection from thatpoint on. The <CODECLASS="literal">-d15.2</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM>to print a message that confirms that it is performing this fork.Note that <CODECLASS="literal">-d15.2</CODE> should usually be combinedwith <CODECLASS="literal">-d99.100</CODE>, or some output may be lost:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">getrequests: forking (fd = <CODECLASS="replaceable"><I>sock</I></CODE>)</PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>sock</I></CODE> is the value of the socket being used for the connection.The <CODECLASS="literal">-d15.2</CODE> debugging switch also causes a message to beprinted when the child process exits:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">getreq: returning (normal server)getreq: returning (null server)</PRE></BLOCKQUOTE></P><PCLASS="para">Here, failure of the connection to be validated (see <ACLASS="xref"HREF="ch22_04.htm#SML2-CH-22-SECT-4-1"TITLE="Accept/Reject Connections via libwrap.a">Section 22.4.1, "Accept/Reject Connections via libwrap.a"</A>and <ACLASS="xref"HREF="ch29_10.htm#SML2-CH-29-SECT-10-3"TITLE="The check_relay Rule Set">Section 29.10.3, "The check_relay Rule Set"</A>), causes <CODECLASS="literal">null server</CODE> to be printed.A successful connection causes <CODECLASS="literal">normal server</CODE> to be printed.</P><PCLASS="para">Finally, the <CODECLASS="literal">-d15.2</CODE> debugging switch causes the following tobe printed every time <EMCLASS="emphasis">opendaemonsocket</EM>() routine is called:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">opendaemonsocket()</PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-57">37.5.57 -d15.101</A></H3><PCLASS="refpurpose">Kernel TCP debugging</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">On kernels that support this feature, the <CODECLASS="literal">-d15.101</CODE> debugging switchturns on kernel debugging for thesocket that is opened to handle an incoming SMTP connection. Debugging isturned off when the socket is closed at the end of receipt of the message.The debugging information gathered can be viewed with the <EMCLASS="emphasis">trpt</EM>(8)program.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-58">37.5.58 -d16.1</A></H3><PCLASS="refpurpose">Outgoing connections</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">When mail messages are sent to a site that can bereached via a TCP/IP connection, the <CODECLASS="literal">-d16.1</CODE> (a.k.a. <CODECLASS="literal">-d16</CODE>) debugging switchcauses <EMCLASS="emphasis">sendmail</EM> to print one of the following messages whenit is about to make the connection:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">makeconnection: (<CODECLASS="replaceable"><I>host </I></CODE>[NULLADDR])            <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> null address</I>makeconnection: (<CODECLASS="replaceable"><I>host </I></CODE>[0])                   <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> no address family</I>makeconnection: (<CODECLASS="replaceable"><I>host </I></CODE>[[UNIX: <CODECLASS="replaceable"><I>path</I></CODE>]])        <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> AF_UNIX family</I>makeconnection: (<CODECLASS="replaceable"><I>host </I></CODE>[<CODECLASS="replaceable"><I>ip address</I></CODE>])          <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> AF_INET family</I>makeconnection: (<CODECLASS="replaceable"><I>host </I></CODE>[[LINK: <CODECLASS="replaceable"><I>name</I></CODE>]])        <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> AF_LINK family</I>makeconnection: (<CODECLASS="replaceable"><I>host </I></CODE>[Family <CODECLASS="replaceable"><I>num</I></CODE>:0x<CODECLASS="replaceable"><I>bytes</I></CODE>])  <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> unknown family</I></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>host</I></CODE> is the name of the host to which the connectionis made. The form of the address information differs depending onthe address family.If the connection can be successfully made,the <CODECLASS="literal">-d16.1</CODE> debugging switch then causes<EMCLASS="emphasis">sendmail</EM> to print:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">makeconnection: fd=<CODECLASS="replaceable"><I>sock</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <EMCLASS="emphasis">sock</EM> is the socket descriptor that was issued for use withthe socket connection.</P><PCLASS="para">If the <CODECLASS="literal">DialDelay</CODE> option (see <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-17"TITLE="">Section 34.8.17, DialDelay</A>) is nonzero and the connection fails,<EMCLASS="emphasis">sendmail</EM> will sleep DialDelay seconds and try again. If the<CODECLASS="literal">-d16.1</CODE> debugging switch is also specified, <EMCLASS="emphasis">sendmail</EM> will print:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Connect failed (<CODECLASS="replaceable"><I>error message</I></CODE>); trying again...</PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>error message</I></CODE> describes the reason for the initial failure.</P><PCLASS="para">If there is more than one address for a host, <EMCLASS="emphasis">sendmail</EM> will tryeach in turn until one connects successfully. The <CODECLASS="literal">-d16.1</CODE> debugging switch causes the following to be printed for each failure:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Connect failed (<CODECLASS="replaceable"><I>error message</I></CODE>); trying new address....</PRE></BLOCKQUOTE></P><PCLASS="para">Note that the <CODECLASS="literal">-d16</CODE> debugging switch should usually be combined with the <CODECLASS="literal">-d99.100</CODE> debugging switch, or some output may be lost.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-59">37.5.59 -d16.101</A></H3><PCLASS="refpurpose">Kernel TCP debugging</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">See <CODECLASS="literal">-d15.101</CODE>. The only difference here is thatdebugging is turned on for the outgoing socket.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-60">37.5.60 -d17.1</A></H3><PCLASS="refpurpose">List MX hosts</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">When <EMCLASS="emphasis">sendmail</EM> readies to deliver mail to a remote host, itlooks up that host using DNS to find Mail Exchanger (MX) records.The <CODECLASS="literal">-d17.1</CODE> (a.k.a. <CODECLASS="literal">-d17</CODE>) debugging switch causes V8 <EMCLASS="emphasis">sendmail</EM> toprint the following:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">hostsignature(<CODECLASS="replaceable"><I>host</I></CODE>) = <CODECLASS="replaceable"><I>records</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>host</I></CODE> is the host that was looked up with DNS.The <CODECLASS="replaceable"><I>records</I></CODE> is a colon-delimited list of MX recordsfor that host. That list might contain only the original hostname ifno MX records were found.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-61">37.5.61 -d17.9</A></H3><PCLASS="refpurpose">Show randomizing MX records</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">MX records have preferences. Delivery is to the record withthe lowest preference first, then to each higher preference,in turn, until a delivery succeeds. When two or more preferences areequal, V8 <EMCLASS="emphasis">sendmail</EM> randomizes them so that they aretried in a different order. The order is the same each time,so this is really a pseudo-randomization (actually a hash function).</P><PCLASS="para">The <CODECLASS="literal">-d17.9</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM> toprint the following each time it randomizes:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">mxrand(<CODECLASS="replaceable"><I>host</I></CODE>) = <CODECLASS="replaceable"><I>hash</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">This shows that the MX records for <CODECLASS="replaceable"><I>host</I></CODE> have beengiven a hash value of <CODECLASS="replaceable"><I>hash</I></CODE>.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-62">37.5.62 -d18.1</A></H3><PCLASS="refpurpose">Show SMTP replies</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The process of transmitting (or receiving) a mail messageusing the SMTP protocol requires <EMCLASS="emphasis">sendmail</EM> to send repliesas its side of the dialogue. The <CODECLASS="literal">-d18.1</CODE> (a.k.a. <CODECLASS="literal">-d18</CODE>) debugging switch causes<EMCLASS="emphasis">sendmail</EM> to print each reply that it sends. It prefixes what it printswith three right angle brackets:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">&gt;&gt;&gt; RCPT To: gw@wash.dc.gov</PRE></BLOCKQUOTE></P><PCLASS="para">Note that this is the same output as produced withthe <CODECLASS="literal">-v</CODE> command-line switch (see <ACLASS="xref"HREF="ch36_07.htm#SML2-CH-36-SECT-7-41"TITLE="">Section 36.7.41, -v</A>).</P><PCLASS="para">The <CODECLASS="literal">-d18.1</CODE> debugging switch also causes the following message to beprinted to the standard output if the file descriptor for the connection is NULL:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">smtpmessage: NULL mci_out</PRE></BLOCKQUOTE></P><PCLASS="para">&#13;Prior to opening the connection, the <CODECLASS="literal">-d18.1</CODE>debugging switch causes <EMCLASS="emphasis">sendmail</EM> to print:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">smtpinit <ICLASS="lineannotation">output of mci_dump</I>()<ICLASS="lineannotation"> here</I></PRE></BLOCKQUOTE></P><PCLASS="para">Finally, the <CODECLASS="literal">-d18.1</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM> toprint:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">reply</PRE></BLOCKQUOTE></P><PCLASS="para">Each time it enters its <EMCLASS="emphasis">reply</EM>() routine.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-63">37.5.63 -d18.2</A></H3><PCLASS="refpurpose">Show entry to MAIL From:</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d18.2</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM> toshow processing of the SMTP MAIL From: command that the localmachine will send. </P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">smtpmailfrom: CurHost=<CODECLASS="replaceable"><I>host</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>host</I></CODE> is the name of the current host that<EMCLASS="emphasis">sendmail</EM> is dealing with.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-64">37.5.64 -d18.100</A></H3><PCLASS="refpurpose">Pause on SMTP read error</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d18.100</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM> to <EMCLASS="emphasis">pause</EM>(2)after a read error when processing the SMTP dialog. The administratorcan then use <EMCLASS="emphasis">ps</EM>(8) and <EMCLASS="emphasis">gcore</EM>(8) to produce a core dump,which can then be examined with a debugger to determine the reason for the read error.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-65">37.5.65 -d19.1</A></H3><PCLASS="refpurpose">Show ESMTP MAIL and RCPT parameters</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">Under Extended SMTP (ESMTP)the MAIL and RCPT command can be followedby other optional parameters. The <CODECLASS="literal">-d19.1</CODE> (a.k.a. <CODECLASS="literal">-d19</CODE>)debugging switch displays those parameters.We discuss the MAIL command first, then the RCPT command.&#13;</P><DIVCLASS="refsect2"><H4CLASS="refsect2"><ACLASS="title"NAME="SML2-CH-37-SECT-5-65-1">37.5.65.1 Show MAIL parameters</A></H4><PCLASS="para">The <EMCLASS="emphasis">sendmail</EM> programrecognizes four parameters that can follow the address in theSMTP MAIL command:[4]SIZE, which specifies the size in bytes of the incoming message;BODY, which specifies the nature of the message body (<CODECLASS="literal">8bitmime</CODE> or <CODECLASS="literal">7bit</CODE>);ENVID, which is used to propagate a sender-specific unique identifierfor the envelope;and RET, which specifies whether or not to return the message bodyon an error return.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[4] SIZE is defined in RFC1653,BODY is defined in RFC1652,and ENVID and RET are defined in RFC1891.</P></BLOCKQUOTE><PCLASS="para">The <CODECLASS="literal">-d19.1</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM> to printthe parameters it received:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">MAIL: got arg <CODECLASS="replaceable"><I>param</I></CODE>=&quot;<CODECLASS="replaceable"><I>value</I></CODE>&quot;</PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="replaceable"><I>param</I></CODE> is one of the parameters shown above.The nature of the <CODECLASS="replaceable"><I>value</I></CODE> depends on the <CODECLASS="replaceable"><I>param</I></CODE></P><PCLASS="para">The <CODECLASS="replaceable"><I>value</I></CODE> for SIZE is a positive integer. If SIZElacks a <EMCLASS="emphasis">value</EM>, this error is issued:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">501 SIZE requires a value</PRE></BLOCKQUOTE></P><PCLASS="para">When multiple, illegal SIZE values are specified, the last is the onewhose value is used.</P><PCLASS="para">The <CODECLASS="replaceable"><I>value</I></CODE> for BODY is a case-insensitive string. It caneither be <CODECLASS="literal">8bitmime</CODE> or <CODECLASS="literal">7bit</CODE>. If BODY lacks a <EMCLASS="emphasis">value</EM>, the following error is issued:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">501 BODY requires a value</PRE></BLOCKQUOTE></P><PCLASS="para">If BODY has neither of the approved strings as its value, the following erroris issued:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">501 Unknown BODY type <ICLASS="lineannotation">bad string here</I></PRE></BLOCKQUOTE></P><PCLASS="para">When multiple, illegal BODY values are specified, the last is the onewhose value is used.</P><PCLASS="para">The <CODECLASS="replaceable"><I>value</I></CODE> for ENVID is a special envelope identifier.It is composed of ASCII characters in the range <CODECLASS="literal">!</CODE>through <CODECLASS="literal">~</CODE>, excepting <CODECLASS="literal">+</CODE> and <CODECLASS="literal">=</CODE>. Characters outsidethat range and those two excepted characters are replaced with a<CODECLASS="literal">+</CODE> followed by a hexadecimal representation of the character'svalue (there must be exactly two hexadecimal digits).If ENVID lacks a value, the following error is issued:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">501 ENVID requires a value</PRE></BLOCKQUOTE></P><PCLASS="para">If the text of the value is not as described above, the following erroris issued:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">501 Syntax error in ENVID parameter value</PRE></BLOCKQUOTE></P><PCLASS="para">If more than one ENVID specified is for a given envelope,the second results in this error:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">501 Duplicate ENVID parameter</PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="replaceable"><I>value</I></CODE> for RET is one of two possible case-insensitivestrings: <CODECLASS="literal">hdrs</CODE> tells <EMCLASS="emphasis">sendmail</EM> to return only the headersof a bounced mail message; <CODECLASS="literal">full</CODE> tells <EMCLASS="emphasis">sendmail</EM> to returnthe headers and body of a bounced mail message. If no string is present,the following error is issued:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">501 RET requires a value</PRE></BLOCKQUOTE></P><PCLASS="para">&#13;If a string is present but is something other than<CODECLASS="literal">hdrs</CODE> or <CODECLASS="literal">full</CODE>, the following is printed:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">501 Bad argument <ICLASS="lineannotation">bad string here</I></PRE></BLOCKQUOTE></P><PCLASS="para">If more than one RET is specified for a given envelope, the followingerror is printed:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">501 Duplicate RET parameter</PRE></BLOCKQUOTE></P><PCLASS="para">If the parameter is not SIZE, BODY, ENVID, orRET, the following error is issued:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">501 <CODECLASS="replaceable"><I>param</I></CODE> parameter unrecognized</PRE></BLOCKQUOTE></P><PCLASS="para"></P></DIV><DIVCLASS="refsect2"><H4CLASS="refsect2"><ACLASS="title"NAME="SML2-CH-37-SECT-5-65-2">37.5.65.2 Show RCPT parameters</A></H4><PCLASS="para">The <EMCLASS="emphasis">sendmail</EM> programrecognizes two parameters that can follow the address in theSMTP RCPT command: NOTIFY, which specifies when to notify the sender;and ORCPT, which specifies the original recipient's address.</P><PCLASS="para">The <CODECLASS="literal">-d19.1</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM> to printthe parameters it received:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">RCPT: got arg <CODECLASS="replaceable"><I>param</I></CODE>=&quot;<CODECLASS="replaceable"><I>value</I></CODE>&quot;</PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="replaceable"><I>param</I></CODE> is one of the parameters shown above.The nature of the <CODECLASS="replaceable"><I>value</I></CODE> depends on the <CODECLASS="replaceable"><I>param</I></CODE></P><PCLASS="para">The <CODECLASS="replaceable"><I>value</I></CODE> for NOTIFY is either NEVER or a comma-separated list composed ofSUCCESS, which means to notify the sender upon final deliverythat the message was successfully delivered;FAILURE, which means to notify the sender if the message cannotbe delivered;and DELAY, which means to notify the sender if the message isdelayed.If there is no <CODECLASS="replaceable"><I>value</I></CODE>, the following error is issued:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">501 NOTIFY requires a value</PRE></BLOCKQUOTE></P><PCLASS="para">If a <CODECLASS="replaceable"><I>value</I></CODE> is present but it is not one of the words shown above,the following error is issued:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">501 Bad argument \&quot;<ICLASS="lineannotation">bad value here</I>\&quot;  to NOTIFY</PRE></BLOCKQUOTE></P><PCLASS="para">Multiple, illegal NOTIFY parameters in an envelope cause the subsequentvalues to be logically OR'd together.</P><PCLASS="para">The <CODECLASS="replaceable"><I>value</I></CODE> for ORCPT is an address followed bya semicolon, then an address that is encoded in the same wayas the envelope identifier described for ENVID above.If that <CODECLASS="replaceable"><I>value</I></CODE> is missing, the following error message isissued:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">501 ORCPT requires a value</PRE></BLOCKQUOTE></P><PCLASS="para">&#13;If the <CODECLASS="replaceable"><I>value</I></CODE> is syntactically wrong (i.e., if the <CODECLASS="replaceable"><I>value</I></CODE>does not have a valid address following the semicolon),this error message is issued:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">501 Syntax error in ORCPT parameter value</PRE></BLOCKQUOTE></P><PCLASS="para">If multiple ORCPT values are specified, the second one resultsin this error:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">501 Duplicate ORCPT parameter</PRE></BLOCKQUOTE></P></DIV></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-66">37.5.66 -d20.1</A></H3><PCLASS="refpurpose">Show resolving delivery agent: parseaddr()</P>(useful)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d20.1</CODE> (a.k.a. <CODECLASS="literal">-d20</CODE>)debugging switch causes <EMCLASS="emphasis">sendmail</EM> to printeach recipient address before it is rewritten by rule sets 3 and 0:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">-parseaddr(<CODECLASS="replaceable"><I>addr</I></CODE>)</PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>addr</I></CODE> is the recipient address before it is rewrittenand before any aliasing has been performed on it.</P><PCLASS="para">The <CODECLASS="literal">-d20.1</CODE> debugging switch also causes <EMCLASS="emphasis">sendmail</EM> to print informationabout problems that may exist in recipient addresses. If an address containsany control character that is not an <EMCLASS="emphasis">isspace</EM>(3) character,<EMCLASS="emphasis">sendmail</EM> prints the following message and skips that address:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">parseaddr-&gt;<ICLASS="lineannotation">bad address</I></PRE></BLOCKQUOTE></P><PCLASS="para">If an address is empty (that is, if it is composed entirely of anRFC822-style comment), <EMCLASS="emphasis">sendmail</EM> prints the following andskips that address:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">parseaddr-&gt;NULL</PRE></BLOCKQUOTE></P><PCLASS="para">After the recipient address has been rewritten by rule sets 3 and0, and if a delivery agent was successfully selected,<EMCLASS="emphasis">sendmail</EM> prints the result using the <EMCLASS="emphasis">printaddr</EM>()routine.</P><PCLASS="para">Note that <CODECLASS="literal">-d21</CODE> can be used towatch the rule sets parse the address, and <CODECLASS="literal">-d24</CODE> can be usedto watch the resulting tokens being pasted back together.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-67">37.5.67 -d21.1</A></H3><PCLASS="refpurpose">Trace rewriting rules</P>(useful)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d21.1</CODE> (a.k.a. <CODECLASS="literal">-d21</CODE>) debugging switch causes <EMCLASS="emphasis">sendmail</EM> to printeach step that it takes in rewriting addresses with rules.The <CODECLASS="literal">-d21.1</CODE> debugging switch causes output tobe produced that is identical to the output produced by the <CODECLASS="literal">-bt</CODE>command-line switch (see <ACLASS="xref"HREF="ch38_01.htm#SML2-CH-38-SECT-1"TITLE="Overview">Section 38.1, "Overview"</A>):</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">rewrite: rule set <CODECLASS="replaceable"><I>num</I></CODE>   input: <CODECLASS="replaceable"><I>addr</I></CODE>rewrite: rule set <CODECLASS="replaceable"><I>num</I></CODE> returns: <CODECLASS="replaceable"><I>addr</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>num</I></CODE> is the rule-set number, and <CODECLASS="replaceable"><I>addr</I></CODE> is, first,the address (workspace) before rewriting and, second, the address afterrewriting.</P><PCLASS="para">Because rules are recursive by nature, they can sometimescause infinite loops (see <ACLASS="xref"HREF="ch28_06.htm#SML2-CH-28-SECT-6-2"TITLE="Rewrite Once Prefix: $:">Section 28.6.2, "Rewrite Once Prefix: $:"</A>). When a rule loops more than 100times, the following error is issued:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Infinite loop in rule set <CODECLASS="replaceable"><I>num</I></CODE>, rule <CODECLASS="replaceable"><I>rnum</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">If the <CODECLASS="literal">-d21.1</CODE> debugging switch was also invokedthe above error is followed by:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">workspace: <ICLASS="lineannotation">state of rewritten address so far, here</I></PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-68">37.5.68 -d21.2</A></H3><PCLASS="refpurpose">Trace $&amp; macros</P>(useful)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d21.2</CODE> debugging switch tells <EMCLASS="emphasis">sendmail</EM> to show thecurrent value of any deferred-expansion macro (one that was declaredwith the <CODECLASS="literal">$&amp;</CODE> prefix). Each such macro that is encounteredin processing a rule prints as:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">rewrite: LHS $&amp;<CODECLASS="replaceable"><I>char</I></CODE> =&gt; &quot;<CODECLASS="replaceable"><I>value</I></CODE>&quot;rewrite: RHS $&amp;<CODECLASS="replaceable"><I>char</I></CODE> =&gt; &quot;<CODECLASS="replaceable"><I>value</I></CODE>&quot;</PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="replaceable"><I>char</I></CODE> is the single-character name of the macro, andthe <CODECLASS="replaceable"><I>value</I></CODE> is its current value. If that particularmacro lacks a value, it will print as (NULL). The <CODECLASS="literal">LHS</CODE> refersto the left-hand side of the rule, and the <CODECLASS="literal">RHS</CODE> correspondsto the right-hand side. Deferred-expansion macros are describedin <ACLASS="xref"HREF="ch31_05.htm#SML2-CH-31-SECT-5-3"TITLE="Use Value as Is with $&amp;">Section 31.5.3, "Use Value as Is with $&amp;"</A>.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-69">37.5.69 -d21.3</A></H3><PCLASS="refpurpose">Show subroutine calls</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d21.3</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM> to printthe rule-set number of each rule set called as a subroutine.Rule sets are called as subroutines by using the <CODECLASS="literal">$&gt;</CODE> rewrite-operatorin the RHS of rules (see <ACLASS="xref"HREF="ch28_06.htm#SML2-CH-28-SECT-6-4"TITLE="Rewrite Through Another Rule Set: $&gt;set">Section 28.6.4, "Rewrite Through Another Rule Set: $&gt;set"</A>).The output produced lookslike this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">---callsubr <CODECLASS="replaceable"><I>rset</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>rset</I></CODE> is the text that was interpreted as the numberof the rule set, rather than the numeric value. If the number inthe configuration file was a symbolic name, then that symbolicname is printed. (See <ACLASS="xref"HREF="ch28_06.htm#SML2-CH-28-SECT-6-4"TITLE="Rewrite Through Another Rule Set: $&gt;set">Section 28.6.4</A>for more details about the <CODECLASS="literal">$&gt;</CODE> rewrite-operator.)</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-70">37.5.70 -d21.4</A></H3><PCLASS="refpurpose">Result after rewriting by a rule</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">If the LHS of a rule matches the workspace, the workspaceis rewritten by the RHS of that rule. The <CODECLASS="literal">-d21.4</CODE> debuggingswitch causes <EMCLASS="emphasis">sendmail</EM> to print the result of a successfulrewrite:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">rewritten as: <CODECLASS="replaceable"><I>addr</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Note that the rewritten address (<CODECLASS="replaceable"><I>addr</I></CODE>) may be the result ofrewriting by a subroutine call.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-71">37.5.71 -d21.10</A></H3><PCLASS="refpurpose">Announce failure</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">If the LHS of a rule fails to match the workspace, the <CODECLASS="literal">-d21.10</CODE>debugging switch causes <EMCLASS="emphasis">sendmail</EM> to print:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">--- rule fails</PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-72">37.5.72 -d21.12</A></H3><PCLASS="refpurpose">Announce success and show LHS</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-57283"></A>If the LHS of a rule matches the workspace, the <CODECLASS="literal">-d21.12</CODE>debugging switch causes <EMCLASS="emphasis">sendmail</EM> to print:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">--- rule matches</PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="literal">-d21.12</CODE> debugging switch also causes the LHS of eachrule to be printed before it is tried:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">---trying rule: <CODECLASS="replaceable"><I>lhs</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Remember that rules are pre-expanded when the configuration file isread. As a consequence, defined macros appear as their valuesin the <CODECLASS="replaceable"><I>lhs</I></CODE>, rather than in their <CODECLASS="literal">$</CODE><CODECLASS="replaceable"><I>letter</I></CODE> form.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-73">37.5.73 -d21.15</A></H3><PCLASS="refpurpose">Show $digit replacement</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d21.15</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM> to printeach replacement that is the result of a <CODECLASS="literal">$</CODE><CODECLASS="replaceable"><I>digit</I></CODE>rewrite-operator in the RHS:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$<CODECLASS="replaceable"><I>digit</I></CODE>: <CODECLASS="replaceable"><I>hex</I></CODE>=<CODECLASS="replaceable"><I>token</I></CODE> ...</PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="literal">$</CODE><CODECLASS="replaceable"><I>digit</I></CODE> is followed by one or more <CODECLASS="replaceable"><I>hex</I></CODE><CODECLASS="literal">=</CODE><CODECLASS="replaceable"><I>token</I></CODE> pairs.The <CODECLASS="replaceable"><I>hex</I></CODE> is the address in memory of the <CODECLASS="replaceable"><I>token</I></CODE>,and the <CODECLASS="replaceable"><I>token</I></CODE> is the token from the LHS that is beingcopied into the workspace. This output can run to many screens. </P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-74">37.5.74 -d21.35</A></H3><PCLASS="refpurpose">Show token by token LHS matching</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">In addition to the rewriting information shown by the debugging switches mentionedabove, the <CODECLASS="literal">-d21.35</CODE> debugging switch also shows eachand every attempt by the LHS to match the workspace. Each comparisonis printed like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">ap=<CODECLASS="replaceable"><I>workspace</I></CODE> rp=<CODECLASS="replaceable"><I>operator</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="literal">ap</CODE> (for <EMCLASS="emphasis">address part</EM>) indicates the token in the workspace that the rule is currently trying to match.The <CODECLASS="literal">rp</CODE> (for <EMCLASS="emphasis">rule part</EM>) is the operator or token at thispoint in the LHS that is trying to match the workspace.Note that the <CODECLASS="replaceable"><I>workspace</I></CODE> is a single tokenfrom the workspace, and the <CODECLASS="replaceable"><I>operator</I></CODE> is a single operatoror token from the LHS of the current rule. A complete comparisonof the LHS to the workspace can produce several lines of outputfor each rule.This output can be useful for understanding how the pattern-matching algorithm works.</P><PCLASS="para">The <CODECLASS="literal">-d21.35</CODE> debugging switch also shows the index advancingto the next operator and what the corresponding state of the workspaceis at that time.</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">ADVANCE rp=<CODECLASS="replaceable"><I>operator</I></CODE> ap=<CODECLASS="replaceable"><I>workspace</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">This is useful for watching the left-hand side trying to finda match.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-75">37.5.75 -d21.36</A></H3><PCLASS="refpurpose">Trace class matching in the LHS</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d21.36</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM> toprint the following each time it finds a match for either the <CODECLASS="literal">$=</CODE>or <CODECLASS="literal">$~</CODE> class-operator:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">CLMATCH</PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="literal">-d21.36</CODE> switch also shows how<EMCLASS="emphasis">sendmail</EM> extends the token in the workspace and tries again,should a match for any operator fail. That is, for all operators (notjust <CODECLASS="literal">$=</CODE> or <CODECLASS="literal">$~</CODE>), if the workspace contained<EMCLASS="emphasis">usa.edu</EM>, <EMCLASS="emphasis">sendmail</EM> would first look up <EMCLASS="emphasis">usa</EM>, then<EMCLASS="emphasis">usa.</EM>, and finally <EMCLASS="emphasis">usa.edu</EM>. Each such attempt printsas:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">EXTEND rp=<CODECLASS="replaceable"><I>operator</I></CODE> ap=<CODECLASS="replaceable"><I>workspace</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">If there is still no match, <EMCLASS="emphasis">sendmail</EM> has to back upand try a different tack. In the case of <EMCLASS="emphasis">usa.edu</EM>it would back up to the dot. For example, if it were trying <CODECLASS="literal">$=X</CODE>,the output would look like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">BACKUP  rp=$=X, ap=.</PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-76">37.5.76 -d22.1</A></H3><PCLASS="refpurpose">Trace tokenizing an address: prescan()</P>(useful)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">Processing of rules requires that all addresses be divided intotokens.The <CODECLASS="literal">-d22.1</CODE> (a.k.a. <CODECLASS="literal">-d22</CODE>) debugging switch causes<EMCLASS="emphasis">sendmail</EM> to print the various steps it takes in tokenizingan address.</P><PCLASS="para">In addition to tokenizing, the <EMCLASS="emphasis">prescan</EM>() routine also normalizesaddresses. That is, it removes RFC822-style comments and recognizesquoted strings.Be aware that rules are also viewed as addresses and processed by<EMCLASS="emphasis">prescan</EM>() when the configuration file is being read.</P><PCLASS="para">The <CODECLASS="literal">-d22.1</CODE> debugging switch tells <EMCLASS="emphasis">sendmail</EM> to complain ifthe first token in the address it is parsing turns out to be nothing</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">prescan: null leading token</PRE></BLOCKQUOTE></P><PCLASS="para">This can happen if an address (or rule) contains only RFC822-style comments in parenthesis.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-77">37.5.77 -d22.11</A></H3><PCLASS="refpurpose">Show address before prescan</P>(useful)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d22.11</CODE> debugging switch causes the address to be printedas it appears before any tokenizing or normalization:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">prescan: <CODECLASS="replaceable"><I>addr</I></CODE></PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-78">37.5.78 -d22.12</A></H3><PCLASS="refpurpose">Show address after prescan</P>(useful)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d22.12</CODE> debugging switch causes the address to be printedas it appears after all tokenizing and normalization:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">prescan==&gt; <CODECLASS="replaceable"><I>addr</I></CODE></PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-79">37.5.79 -d22.36</A></H3><PCLASS="refpurpose">Show each token</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d22.36</CODE> debugging switch causes each token to be printedwhen found:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">tok=<CODECLASS="replaceable"><I>token</I></CODE></PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-80">37.5.80 -d22.101</A></H3><PCLASS="refpurpose">Trace low-level state machine</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">For the purpose of tokenizing, an address is viewed as a streamof characters.The process of tokenizing and normalizing is driven by a <EMCLASS="emphasis">state</EM>machine that handles the stream one character at a time.For example, if the current character is <CODECLASS="literal">@</CODE>,<EMCLASS="emphasis">sendmail</EM> sees that it has found both the start and end ofa token and so resets its state to begin looking for a new token.But if the current character is <CODECLASS="literal">a</CODE> and <EMCLASS="emphasis">sendmail</EM> iscurrently gathering a token, it knows that it should continueto gather.The use of a state machine enables <EMCLASS="emphasis">sendmail</EM> to easilykeep track of things such as the nesting level of angle brackets andwhether or not a quoted string is present.</P><PCLASS="para">The <CODECLASS="literal">-d22.101</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM> tooutput two lines of information. The first shows entry intoa state (or continuation of a state):</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">c=<CODECLASS="replaceable"><I>char</I></CODE>, s=<CODECLASS="replaceable"><I>state</I></CODE>;</PRE></BLOCKQUOTE></P><PCLASS="para">Here, <EMCLASS="emphasis">char</EM> is the current character in the stream of charactersthat makes up the original address. The <CODECLASS="replaceable"><I>state</I></CODE> is a two-digitoctal representation of the current state. The first digit modifiesthe second and is a 2 (whichmeans that this is a meta-character so don't pass it through), a 4 (which meansto break the token at this character), or a 6 (which means both 2 and 4).The second digit indicates the state.  The list of states and theirmeanings are shown in<ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-TAB-8"TITLE="States Used by parseaddr() to Tokenize Addresses">Table 37.9</A>.The semicolon separates this output from the rest of the line thatis printed below.</P><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="SML2-CH-37-TAB-8">Table 37.9: States Used by parseaddr() to Tokenize Addresses</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Decimal</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Octal</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Name</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Description</TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">00</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">OPR</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">A wildcard operator (such as <CODECLASS="literal">$*</CODE>)</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">01</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">ATM</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">An atom (text token)</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">2</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">02</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">QST</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Inside a quoted string</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">3</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">03</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">SPC</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Chewing up spaces</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">4</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">04</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">ONE</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Pick up one character</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">5</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">04</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">ILL</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Illegal character</TD></TR></TBODY></TABLE><PCLASS="para">The rest of the output produced by the <CODECLASS="literal">-d22.101</CODE>debugging switch shows the state changing to a new state:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">ns=<CODECLASS="replaceable"><I>nstate</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>nstate</I></CODE> is the new state number, printed in octal witha leading zero.</P><PCLASS="para">Note that the level <CODECLASS="literal">101</CODE> in <CODECLASS="literal">-d22.101</CODE> means that thisdebugging output is for true experts only.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-81">37.5.81 -d24.4</A></H3><PCLASS="refpurpose">Trace address allocation</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d24.4</CODE> debugging switch[5]tells <EMCLASS="emphasis">sendmail</EM> to print a message upon its entry into the <EMCLASS="emphasis">allocaddr</EM>() routine:</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[5] There is no <CODECLASS="literal">-d24.1</CODE> information.</P></BLOCKQUOTE><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">allocaddr(flags=<CODECLASS="replaceable"><I>flags</I></CODE>, paddr=<CODECLASS="replaceable"><I>paddr</I></CODE>)</PRE></BLOCKQUOTE></P><PCLASS="para">Here, the address in <CODECLASS="replaceable"><I>paddr</I></CODE> will be copied into another address(not shown). The <CODECLASS="replaceable"><I>flags</I></CODE> is a hexadecimal representation ofthe <CODECLASS="literal">RF_</CODE> flags used by <EMCLASS="emphasis">sendmail</EM> to communicate withsome of its internal routines. The meanings of the bits in theseflags are shown in<ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-TAB-9"TITLE="sendmail's Internal RF_ flags">Table 37.10</A>.</P><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="SML2-CH-37-TAB-9">Table 37.10: sendmail's Internal RF_ flags</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Hex</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Name</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Description</TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">000</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">RF_COPYNONE</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Don't copy anything</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">001</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">RF_SENDERADDR</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Set = sender address, otherwise recipient</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">002</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">RF_HEADERADDR</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Set = header address, otherwise envelope</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">004</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">RF_CANONICAL</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Strip RFC822 comments</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">008</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">RF_ADDDOMAIN</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Okay to append a domain</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">010</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">RF_COPYPARSE</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Copy parsed user and host</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">020</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">RF_COPYPADDR</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Copy the print address</TD></TR></TBODY></TABLE><PCLASS="para">If RF_COPYPARSE is set in <CODECLASS="replaceable"><I>flags</I></CODE>, the temporary stringsfor the host and user in the passed address (not shown) are allocatedpermanent storage in memory.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-82">37.5.82 -d24.5</A></H3><PCLASS="refpurpose">Trace assembly of tokens</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d24.5</CODE> debugging switch tells <EMCLASS="emphasis">sendmail</EM> to printa message upon its entry into the <EMCLASS="emphasis">buildaddr</EM>() routine.</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">buildaddr, flags=<CODECLASS="replaceable"><I>flags</I></CODE>, tv=<CODECLASS="replaceable"><I>tokens</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">The <EMCLASS="emphasis">buildaddr</EM>() routine takes an array of separate tokensand pastes them back together again. The <CODECLASS="replaceable"><I>flags</I></CODE> are ORed together hexadecimal values as documented in<ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-TAB-9"TITLE="sendmail's Internal RF_ flags">Table 37.10</A>.The RF_SENDERADDR and RF_HEADERADDR flags tell<EMCLASS="emphasis">buildaddr</EM>() which rewriting rules to use in processingthe address.</P><PCLASS="para">The array of <CODECLASS="replaceable"><I>tokens</I></CODE> being assembled isprinted on a single line, each separated from the otherby a space.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-83">37.5.83 -d24.6</A></H3><PCLASS="refpurpose">Show result of buildaddr()</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d24.6</CODE> debugging switch tells <EMCLASS="emphasis">sendmail</EM> toprint the result of <EMCLASS="emphasis">buildaddr</EM>()'s attempt to reconstruct an address.</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">buildaddr =&gt; <ICLASS="lineannotation">output of printaddr</I>()<ICLASS="lineannotation"> here (see <ACLASS="xref"HREF="ch37_03.htm#SML2-CH-37-SECT-3-1"TITLE="The Output Produced by printaddr()">Section 37.3.1</A>)</I></PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-84">37.5.84 -d25.1</A></H3><PCLASS="refpurpose">Trace &quot;sendtolist&quot;</P>(useful)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">Each recipient address for a mail message is added one-by-one to aninternal list of recipients. The <CODECLASS="literal">-d25.1</CODE> (a.k.a. <CODECLASS="literal">-d25</CODE>) debugging switchcauses <EMCLASS="emphasis">sendmail</EM> to print each address as it is added tothis list:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">sendto: <CODECLASS="replaceable"><I>list</I></CODE>   ctladdr= <ICLASS="lineannotation">output of printaddr</I>()<ICLASS="lineannotation"> here (see <ACLASS="xref"HREF="ch37_03.htm#SML2-CH-37-SECT-3-1"TITLE="The Output Produced by printaddr()">Section 37.3.1</A>)</I></PRE></BLOCKQUOTE></P><PCLASS="para">After each is added, those that have selected adelivery agent with the <CODECLASS="literal">F=A</CODE> (see <ACLASS="xref"HREF="ch30_08.htm#SML2-CH-30-SECT-8-12"TITLE="">Section 30.8.12, F=A</A>)and <CODECLASS="literal">F=w</CODE> (see <ACLASS="xref"HREF="ch30_08.htm#SML2-CH-30-SECT-8-43"TITLE="">Section 30.8.43, F=w</A>) flags setare further processed by aliasing and by readingthe user's <EMCLASS="emphasis">~/.forward</EM> file. Each new address that resultsfrom this processing is added to the list, and any duplicatesare discarded. </P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-85">37.5.85 -d26.1</A></H3><PCLASS="refpurpose">Trace recipient queueing</P>(useful)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d26.1</CODE> (a.k.a. <CODECLASS="literal">-d26</CODE>) debugging switch causes <EMCLASS="emphasis">sendmail</EM>to print the addresses of recipients as they are added to the <EMCLASS="emphasis">send queue</EM>&nbsp;- an internal list of addresses that <EMCLASS="emphasis">sendmail</EM>uses to sort and remove duplicates from the recipient addresses fora mail message. </P><PCLASS="para">On entry to the <EMCLASS="emphasis">recipient</EM>() routine, the <CODECLASS="literal">-d26.1</CODE>debugging switch causes <EMCLASS="emphasis">sendmail</EM> toprint the raw address (as it appears before adding it to the send queue):</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">recipient (<CODECLASS="replaceable"><I>level</I></CODE>): <ICLASS="lineannotation">output of printaddr</I>()<ICLASS="lineannotation"> here (see <ACLASS="xref"HREF="ch37_03.htm#SML2-CH-37-SECT-3-1"TITLE="The Output Produced by printaddr()">Section 37.3.1</A>)</I></PRE></BLOCKQUOTE></P><PCLASS="para">An address can be the result of alias expansion. Because the processof aliasing (including <CODECLASS="literal">:include:</CODE> and <EMCLASS="emphasis">.forward</EM> files)can be recursive, it is possible to get too many alias expansions. The <CODECLASS="replaceable"><I>level</I></CODE> shows the number of alias expansions so far. If thatnumber exceeds MaxAliasRecursion (as hard coded in <EMCLASS="emphasis">conf.c</EM> as 10),<EMCLASS="emphasis">sendmail</EM> issues this warning:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">aliasing/forwarding loop broken (<CODECLASS="replaceable"><I>level</I></CODE> aliases deep; <CODECLASS="replaceable"><I>MAXRCRSN</I></CODE> max)</PRE></BLOCKQUOTE></P><PCLASS="para">&#13;Next <EMCLASS="emphasis">sendmail</EM> comparesthe new address to others that are already in the send queue. If it findsa duplicate, it prints the following message and skips thenew address:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"><CODECLASS="replaceable"><I>addr</I></CODE> in sendq: <ICLASS="lineannotation">output of printaddr</I>()<ICLASS="lineannotation"> here (see <ACLASS="xref"HREF="ch37_03.htm#SML2-CH-37-SECT-3-1"TITLE="The Output Produced by printaddr()">Section 37.3.1</A>)</I></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>addr</I></CODE> is the duplicate address. Information about that address is produced with the <EMCLASS="emphasis">printaddr</EM>()routine.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-86">37.5.86 -d26.8</A></H3><PCLASS="refpurpose">Trace self destructing addresses</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">Certain addresses can &quot;self destruct&quot; because they can cause an endless loop.Consider the address <CODECLASS="literal">A</CODE>. If <CODECLASS="literal">A</CODE> is aliased to <CODECLASS="literal">B</CODE> and<CODECLASS="literal">B</CODE> is aliased to <CODECLASS="literal">A</CODE>, <CODECLASS="literal">A</CODE> is a self-destructive address.The <CODECLASS="literal">-d26.8</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM> to printthe address that is being tested for self-destruction:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">testselfdestruct: <ICLASS="lineannotation">output of printaddr</I>()<ICLASS="lineannotation"> here (see <ACLASS="xref"HREF="ch37_03.htm#SML2-CH-37-SECT-3-1"TITLE="The Output Produced by printaddr()">Section 37.3.1</A>)</I></PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-87">37.5.87 -d26.10</A></H3><PCLASS="refpurpose">Show full send queue in testselfdestruct</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d26.10</CODE> debugging switch causes the entire send queue tobe printed after the <CODECLASS="literal">testselfdestruct</CODE> above:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">SENDQ:<ICLASS="lineannotation">output of printaddr</I>()<ICLASS="lineannotation"> here (see <ACLASS="xref"HREF="ch37_03.htm#SML2-CH-37-SECT-3-1"TITLE="The Output Produced by printaddr()">Section 37.3.1</A>)</I>--</PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-88">37.5.88 -d27.1</A></H3><PCLASS="refpurpose">Trace aliasing</P>(useful)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d27.1</CODE> (a.k.a. <CODECLASS="literal">-d27</CODE>) debugging switch causes <EMCLASS="emphasis">sendmail</EM> to printeach step it takes when processing local addresses through aliasing.First, <EMCLASS="emphasis">sendmail</EM> prints the addresses being aliased:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">alias(<CODECLASS="replaceable"><I>addr</I></CODE>)</PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>addr</I></CODE> is the address (usually a local username)that is about to be aliased. Note that itmay already be the result of previous aliasing.If the <CODECLASS="replaceable"><I>addr</I></CODE> can be aliased, its transformation is printed as:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"><CODECLASS="replaceable"><I>addr</I></CODE> (<CODECLASS="replaceable"><I>host</I></CODE>, <CODECLASS="replaceable"><I>user</I></CODE>) aliased to <CODECLASS="replaceable"><I>newaddr</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>addr</I></CODE> is the address before aliasing,and the <CODECLASS="replaceable"><I>newaddr</I></CODE> is the new address that resulted from successful aliasing.The <CODECLASS="replaceable"><I>host</I></CODE> and <CODECLASS="replaceable"><I>user</I></CODE> are the hostname and username fromthe recipient part of the envelope.If the <CODECLASS="replaceable"><I>addr</I></CODE> cannot be aliased, nothing is printed. </P><PCLASS="para">During initialization,if the <EMCLASS="emphasis">aliases</EM> database cannot be opened, the <CODECLASS="literal">-d27.1</CODE> debugging switch causes<EMCLASS="emphasis">sendmail</EM> to print:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Can't open <CODECLASS="replaceable"><I>aliasfile</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>aliasfile</I></CODE> is the full pathname of the <EMCLASS="emphasis">aliases</EM>(5)file, as declared by the <CODECLASS="literal">AliasFile</CODE> (<CODECLASS="literal">A</CODE>) option (see <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-1"TITLE="">Section 34.8.1, AliasFile (A)</A>) or implied withthe service-switch file and the <CODECLASS="literal">ServiceSwitchFile</CODE> option(see <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-61"TITLE="">Section 34.8.61</A>).</P><PCLASS="para">If the failure was due to a faulty map declaration, <EMCLASS="emphasis">sendmail</EM> logs the following error:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">setalias: unknown alias class <CODECLASS="replaceable"><I>mapclass</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">If the map is not one that is allowed to provide alias services,<EMCLASS="emphasis">sendmail</EM> logs this error:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">setalias: map class <CODECLASS="replaceable"><I>mapclass</I></CODE> can't handle aliases</PRE></BLOCKQUOTE></P><PCLASS="para">If <EMCLASS="emphasis">sendmail</EM> is trying to create a database file and it can't (usuallywhen it is run with the <CODECLASS="literal">-bi</CODE> command-line switch or runas <EMCLASS="emphasis">newaliases</EM>), the <CODECLASS="literal">-d27.1</CODE>debugging switch causes the following error to be printed:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Can't create database for <CODECLASS="replaceable"><I>filename</I></CODE>: <ICLASS="lineannotation">reason here</I></PRE></BLOCKQUOTE></P><PCLASS="para">A self-destructive alias can cause a dangerous loop to occur.For example, the following twoaliases can lead to a loop on the host <EMCLASS="emphasis">mailhost</EM>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">jake:           Jake_BairJake_Bair:      jake@mailhost</PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="literal">-d27.1</CODE> debugging switch causes the following message to be printed when<EMCLASS="emphasis">sendmail</EM> tests an address to see whether it loops:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">self_reference(<CODECLASS="replaceable"><I>addr</I></CODE>)        ... no self ref                    <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-">if it didn't loop</I>        ... cannot break loop for &quot;<CODECLASS="replaceable"><I>addr</I></CODE>&quot;   <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-">if it's unbreakable</I></PRE></BLOCKQUOTE></P><PCLASS="para">An alias loop is unbreakable if no local username can be found in the listof aliases.</P><PCLASS="para">The <CODECLASS="literal">-d27.1</CODE> debuggingswitch also causes <EMCLASS="emphasis">sendmail</EM> to print the following messagewhen it is attempting to read the user's <EMCLASS="emphasis">~/.forward</EM> file:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">forward(<EMCLASS="emphasis">user</EM>)</PRE></BLOCKQUOTE></P><PCLASS="para">If the <EMCLASS="emphasis">user</EM> has no home directory listed in the <EMCLASS="emphasis">passwd</EM>(5)file, <EMCLASS="emphasis">sendmail</EM> issuesthe following message with a <EMCLASS="emphasis">syslog</EM>(3) level of LOG_CRIT:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">forward: no home</PRE></BLOCKQUOTE></P><PCLASS="para">&#13;The <CODECLASS="literal">-d27.1</CODE> debuggingswitch also causes <EMCLASS="emphasis">sendmail</EM> to print a warning ifit cannot open or lock an alias file for automatic rebuilding(see <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-4"TITLE="">Section 34.8.4, AutoRebuildAliases (D)</A>, the <CODECLASS="literal">AutoRebuildAliases</CODE> (<CODECLASS="literal">D</CODE>) option):</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Can't open <CODECLASS="replaceable"><I>file</I></CODE>: <ICLASS="lineannotation"> reason here</I>newaliases: cannot open <CODECLASS="replaceable"><I>file</I></CODE>: <ICLASS="lineannotation"> reason here</I></PRE></BLOCKQUOTE></P><PCLASS="para">Here, the error might be caused by the file simply not existing (as wouldbe the case if it was NSF-mounted on a down host) or an I/O error(as would be the case for a bad disk).</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">warning: cannot lock <CODECLASS="replaceable"><I>file</I></CODE>: <ICLASS="lineannotation"> reason here</I></PRE></BLOCKQUOTE></P><PCLASS="para">Failure to lock can be caused by system errors or by thefile being read-only. Note that maintaining an aliases fileunder revision control can cause a read-only copy to exist, resultingin the following error:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Can't create database for <CODECLASS="replaceable"><I>file</I></CODE>: <ICLASS="lineannotation"> reason here</I>Cannot create database for alias file <CODECLASS="replaceable"><I>file</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">This error indicates that the output file (the <EMCLASS="emphasis">dbm</EM>(3) or<EMCLASS="emphasis">db</EM>(3) file) could not be created or written.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-89">37.5.89 -d27.2</A></H3><PCLASS="refpurpose">Include file, self reference, error on home</P>(useful)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d27.2</CODE> debugging switch causes each <CODECLASS="literal">:include:</CODE>and <EMCLASS="emphasis">.forward</EM> filename to be printed before eachis opened for reading:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">include(<CODECLASS="replaceable"><I>file</I></CODE>)</PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="literal">-d27.2</CODE> debugging switch also causes additional information to beprinted for the alias loop check described above:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">self_reference(<CODECLASS="replaceable"><I>addr</I></CODE>)        ... getpwnam(<CODECLASS="replaceable"><I>user</I></CODE>)...found     <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-">if in passwd file</I>        ... getpwnam(<CODECLASS="replaceable"><I>user</I></CODE>)...failed    <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> otherwise</I></PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="literal">-d27.2</CODE> debugging switch also causes <EMCLASS="emphasis">sendmail</EM> to print a messageevery time it sleeps while waiting for the <EMCLASS="emphasis">aliases</EM> database to be rebuilt:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">aliaswait: sleeping for <CODECLASS="replaceable"><I>sec</I></CODE> seconds</PRE></BLOCKQUOTE></P><PCLASS="para">Also, when processing the <EMCLASS="emphasis">~/.forward</EM> file, <EMCLASS="emphasis">sendmail</EM> may experiencea temporary inability to read it (such as when an NFS server is down). In thatcase the <CODECLASS="literal">-d27.2</CODE> debugging switch causes the following message tobe printed:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">forward: transient error on <CODECLASS="replaceable"><I>home</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here the message will be queued and tried again later.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-90">37.5.90 -d27.3</A></H3><PCLASS="refpurpose">Forwarding path and alias wait</P>(useful)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d27.3</CODE> debuggingswitch causes each path for a possible <EMCLASS="emphasis">.forward</EM> file to beprinted before it is tried:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">forward: trying <EMCLASS="emphasis">file</EM></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <EMCLASS="emphasis">file</EM> is each file in the path of files declared bythe <CODECLASS="literal">ForwardPath</CODE> (<CODECLASS="literal">J</CODE>) option (see <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-27"TITLE="">Section 34.8.27, ForwardPath (J)</A>).</P><PCLASS="para">The <CODECLASS="literal">-d27.3</CODE> debugging switch also causes <EMCLASS="emphasis">sendmail</EM> to trace itswait for another alias rebuild to complete (see <ACLASS="xref"HREF="ch24_05.htm#SML2-CH-24-SECT-5-1"TITLE="Rebuild the Alias Database">Section 24.5.1, "Rebuild the Alias Database"</A>). First <EMCLASS="emphasis">sendmail</EM>prints the class (such as <CODECLASS="replaceable"><I>hash</I></CODE>) and filename for which it will wait:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">aliaswait(<CODECLASS="replaceable"><I>class</I></CODE>:<CODECLASS="replaceable"><I>file</I></CODE>)</PRE></BLOCKQUOTE></P><PCLASS="para">If the database is not rebuildable (as would be the case with a networkmap class like <EMCLASS="emphasis">nis</EM>, <EMCLASS="emphasis">nis+</EM>, or <EMCLASS="emphasis">hesiod</EM>), the <CODECLASS="literal">-d27.3</CODE> debugging switchcauses the following to be printed:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">aliaswait: not rebuildable</PRE></BLOCKQUOTE></P><PCLASS="para">If the <CODECLASS="replaceable"><I>file</I></CODE> specified doesn't exist,  the <CODECLASS="literal">-d27.3</CODE> debugging switchprints</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">aliaswait: no source file</PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="literal">-d27.3</CODE> debugging switch also causes <EMCLASS="emphasis">sendmail</EM> to printan error message if there was a read error while processing a <CODECLASS="literal">:include:</CODE>or <EMCLASS="emphasis">.forward</EM> file:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">include: read error: <ICLASS="lineannotation">reason here</I></PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-91">37.5.91 -d27.4</A></H3><PCLASS="refpurpose">Print not safe</P>(useful)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">A <EMCLASS="emphasis">~/.forward</EM> file must be owned by the user or by <EMCLASS="emphasis">root</EM>.If it is not, it is considered unsafe, and <EMCLASS="emphasis">sendmail</EM>ignores it. The <CODECLASS="literal">-d27.4</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM>to print a message describing any such file it finds unsafe:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">include: not safe (uid=<CODECLASS="replaceable"><I>uid</I></CODE>)</PRE></BLOCKQUOTE></P><PCLASS="para">Note that a file is considered unsafe if, among other things,it lacks all read permissions.</P><PCLASS="para">The <CODECLASS="literal">-d27.4</CODE> debugging switch also causes <EMCLASS="emphasis">sendmail</EM> to printinformation about a <CODECLASS="literal">:include:</CODE> file beyond that printedwith <CODECLASS="literal">-d27.2</CODE> above:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">include(<CODECLASS="replaceable"><I>file</I></CODE>)             <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> printed with -d27.2</I>   ruid=<CODECLASS="replaceable"><I>ruid</I></CODE> euid=<CODECLASS="replaceable"><I>euid</I></CODE>    <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> printed with -d27.4</I></PRE></BLOCKQUOTE></P><PCLASS="para">&#13;This shows the real userID (<CODECLASS="replaceable"><I>ruid</I></CODE>) and effective userID(<CODECLASS="replaceable"><I>euid</I></CODE>) of the current running <EMCLASS="emphasis">sendmail</EM>.</P><PCLASS="para">The <CODECLASS="literal">-d27.4</CODE> debugging switch also causes <EMCLASS="emphasis">sendmail</EM> to printan error if a <CODECLASS="literal">:include:</CODE> or <EMCLASS="emphasis">~/.forward</EM> file cannot be opened for reading:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">include: open: <ICLASS="lineannotation">reason here</I></PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-92">37.5.92 -d27.5</A></H3><PCLASS="refpurpose">Trace aliasing with printaddr()</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d27.5</CODE> debugging switch tells <EMCLASS="emphasis">sendmail</EM> to printseveral addresses with <EMCLASS="emphasis">printaddr</EM>() (see <ACLASS="xref"HREF="ch37_03.htm#SML2-CH-37-SECT-3-1"TITLE="The Output Produced by printaddr()">Section 37.3.1</A>)as each one is handled.</P><PCLASS="para">When an address is aliased to another, the original needs to bemarked as one that shouldn't be delivered. The <CODECLASS="literal">QDONTSEND</CODE>below means just that:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">alias: QDONTSEND <ICLASS="lineannotation">output of printaddr</I>()<ICLASS="lineannotation"> here (see <ACLASS="xref"HREF="ch37_03.htm#SML2-CH-37-SECT-3-1"TITLE="The Output Produced by printaddr()">Section 37.3.1</A>)</I></PRE></BLOCKQUOTE></P><PCLASS="para">If there was a self-reference, the retained address is printed like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">sendtolist: QSELFREF <ICLASS="lineannotation">output of printaddr</I>()<ICLASS="lineannotation"> here (see <ACLASS="xref"HREF="ch37_03.htm#SML2-CH-37-SECT-3-1"TITLE="The Output Produced by printaddr()">Section 37.3.1</A>)</I></PRE></BLOCKQUOTE></P><PCLASS="para">If the original (before the test for a self-reference) is not thesame as the retained address, the original must be marked for nondelivery:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">sendtolist: QDONTSEND <ICLASS="lineannotation">output of printaddr</I>()<ICLASS="lineannotation"> here (see <ACLASS="xref"HREF="ch37_03.htm#SML2-CH-37-SECT-3-1"TITLE="The Output Produced by printaddr()">Section 37.3.1</A>)</I></PRE></BLOCKQUOTE></P><PCLASS="para">If an address resulted from a <CODECLASS="literal">:include:</CODE> or <EMCLASS="emphasis">~/.forward</EM> file, it will havea controlling user associated with it. That controlling user's addressneeds to be marked for nondelivery:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">include: QDONTSEND <ICLASS="lineannotation">output of printaddr</I>()<ICLASS="lineannotation"> here (see <ACLASS="xref"HREF="ch37_03.htm#SML2-CH-37-SECT-3-1"TITLE="The Output Produced by printaddr()">Section 37.3.1</A>)</I></PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-93">37.5.93 -d27.8</A></H3><PCLASS="refpurpose">Show setting up an alias map</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d27.8</CODE> debugging switch tells <EMCLASS="emphasis">sendmail</EM> to printthe string passed to its internal <EMCLASS="emphasis">setalias</EM>() routine.</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">setalias(<CODECLASS="replaceable"><I>what</I></CODE>)</PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>what</I></CODE> is one of the items listed with the <CODECLASS="literal">AliasFile</CODE> (<CODECLASS="literal">A</CODE>) option (see <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-1"TITLE="">Section 34.8.1</A>),such as <EMCLASS="emphasis">/etc/aliases</EM>,or implied withthe service-switch file and the <CODECLASS="literal">ServiceSwitchFile</CODE> option(see <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-61"TITLE="">Section 34.8.61</A>).</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-94">37.5.94 -d27.9</A></H3><PCLASS="refpurpose">Show uid/gid changes with :include: reads</P>(useful)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d27.9</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM> to tracethe setting and resetting of its <EMCLASS="emphasis">uid</EM> and <EMCLASS="emphasis">gid</EM> identitieswhen processing <CODECLASS="literal">:include:</CODE> and <EMCLASS="emphasis">~/.forward</EM> files. First an additional lineis printed below the output of the <CODECLASS="literal">-d27.2</CODE> and <CODECLASS="literal">-d27.4</CODE>debugging switches:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">include(<CODECLASS="replaceable"><I>file</I></CODE>)             <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> printed with -d27.2</I>   ruid=<CODECLASS="replaceable"><I>ruid</I></CODE> euid=<CODECLASS="replaceable"><I>euid</I></CODE>    <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> printed with -d27.4</I>include: old uid = <CODECLASS="replaceable"><I>ruid</I></CODE>/<CODECLASS="replaceable"><I>euid</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">The second and third lines above both contain the same information. After thenew line is printed,<EMCLASS="emphasis">sendmail</EM> may or may not change its identity depending on thenature of a <CODECLASS="literal">:include:</CODE> or <EMCLASS="emphasis">~/.forward</EM> file and that file's controlling user.Whether it changed or not, <EMCLASS="emphasis">sendmail</EM> prints:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">include: new uid = <CODECLASS="replaceable"><I>ruid</I></CODE>/<CODECLASS="replaceable"><I>euid</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">After <EMCLASS="emphasis">sendmail</EM> has finished processing a <CODECLASS="literal">:include:</CODE> or <EMCLASS="emphasis">~/.forward</EM> file,it resets its <EMCLASS="emphasis">uid</EM> and <EMCLASS="emphasis">gid</EM> back to their original valuesand displays the result:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">include: reset uid = <CODECLASS="replaceable"><I>ruid</I></CODE>/<CODECLASS="replaceable"><I>euid</I></CODE></PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-95">37.5.95 -d27.14</A></H3><PCLASS="refpurpose">Show controlling user that caused change in identity</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d27.14</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM> to printthe controlling user's address that led to the changing of the<EMCLASS="emphasis">uid</EM> and <EMCLASS="emphasis">gid</EM> or the currently running process:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">include(<CODECLASS="replaceable"><I>file</I></CODE>)                 <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> printed with -d27.2</I>   ruid=<CODECLASS="replaceable"><I>ruid</I></CODE> euid=<CODECLASS="replaceable"><I>euid</I></CODE>        <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> printed with -d27.4</I>ctladdr <CODECLASS="replaceable"><I>addr                  </I></CODE><ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> output of printaddr</I>()<ICLASS="lineannotation"> produced with this -d27.14</I>include: old uid = <CODECLASS="replaceable"><I>ruid</I></CODE>/<CODECLASS="replaceable"><I>euid</I></CODE>  <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> printed with -d27.9</I></PRE></BLOCKQUOTE></P><PCLASS="para">The output of the <EMCLASS="emphasis">printaddr</EM>() routine is describedin <ACLASS="xref"HREF="ch37_03.htm#SML2-CH-37-SECT-3-1"TITLE="The Output Produced by printaddr()">Section 37.3.1</A>.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-96">37.5.96 -d27.20</A></H3><PCLASS="refpurpose">Show how alias will be looked up in a map</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d27.20</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM> to showhow it is about to look up an alias in one of its database maps:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">setalias(<CODECLASS="replaceable"><I>what</I></CODE>)       <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> printed with -d27.8</I>   map <CODECLASS="replaceable"><I>class</I></CODE>:<CODECLASS="replaceable"><I>map</I></CODE> <CODECLASS="replaceable"><I>what</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>class</I></CODE> is the type of map being looked up, suchas <EMCLASS="emphasis">hash</EM> or <EMCLASS="emphasis">implicit</EM> (see <ACLASS="xref"HREF="ch33_03.htm"TITLE="The K Configuration Command">Section 33.3, "The K Configuration Command"</A>).The <CODECLASS="replaceable"><I>map</I></CODE> is the map name, such as <EMCLASS="emphasis">Alias0</EM>.The <CODECLASS="replaceable"><I>what</I></CODE> is one of the items listed with the<CODECLASS="literal">AliasFile</CODE> (<CODECLASS="literal">A</CODE>) option (see <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-1"TITLE="">Section 34.8.1</A>),such as <EMCLASS="emphasis">/etc/aliases</EM>, or implied with the service-switch file and the <CODECLASS="literal">ServiceSwitchFile</CODE> option(see <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-61"TITLE="">Section 34.8.61</A>).</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-97">37.5.97 -d28.1</A></H3><PCLASS="refpurpose">Trace user database transactions</P>(useful)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <EMCLASS="emphasis">sendmail</EM> program can be compiled to use the user database (see<ACLASS="xref"HREF="ch33_05.htm"TITLE="The User Database">Section 33.5, "The User Database"</A>) by defining USERDB in the <EMCLASS="emphasis">Makefile</EM>(see <ACLASS="xref"HREF="ch18_08.htm#SML2-CH-18-SECT-8-54"TITLE="">Section 18.8.54, USERDB</A>).If an address is selectedby rule set 0 for delivery by a delivery agent with the <CODECLASS="literal">F=l</CODE> flagset, and if it remains unaliased even if the <CODECLASS="literal">F=A</CODE> flag is set,it is looked up in the user database.The <CODECLASS="literal">-d28.1</CODE> (a.k.a. <CODECLASS="literal">-d28</CODE>) debugging switch is used to watch the interactionbetween <EMCLASS="emphasis">sendmail</EM> and the user database:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">udbexpand(<EMCLASS="emphasis">addr</EM>)</PRE></BLOCKQUOTE></P><PCLASS="para">Here, <EMCLASS="emphasis">addr</EM> is the address being looked up.</P><PCLASS="para">The sender is looked up in a similar fashion. The intent in this case isto correct information such as the return address:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">udbmatch(<CODECLASS="replaceable"><I>login</I></CODE>, <CODECLASS="replaceable"><I>what</I></CODE>)</PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>login</I></CODE> is the login name of the sender and <CODECLASS="replaceable"><I>what</I></CODE>is the <CODECLASS="literal">mailname</CODE> for sender lookups. If the lookup is via <EMCLASS="emphasis">hesiod</EM>, <EMCLASS="emphasis">sendmail</EM> will print the sameinformation like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">hes_udb_get(<CODECLASS="replaceable"><I>login</I></CODE>, <CODECLASS="replaceable"><I>what</I></CODE>)</PRE></BLOCKQUOTE></P><PCLASS="para">If the senderis found in the database, <EMCLASS="emphasis">sendmail</EM> prints:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">udbmatch ==&gt; <EMCLASS="emphasis">login</EM>@<EMCLASS="emphasis">defaulthost</EM></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>login</I></CODE> may be a new login name. The <CODECLASS="replaceable"><I>defaulthost</I></CODE> iseither the sitewide host for all reply mail as defined in the user databaseor the default destination host for a particular user.</P><PCLASS="para">In the event that a <EMCLASS="emphasis">db</EM>(3) style user database fails to open,the <CODECLASS="literal">-d28.1</CODE> debugging switch displays the following error message:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">dbopen(<CODECLASS="replaceable"><I>database</I></CODE>): <ICLASS="lineannotation"> reason for failure here</I></PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-98">37.5.98 -d28.2</A></H3><PCLASS="refpurpose">Show no match</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d28.2</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM> toprint any failures in lookups:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">udbmatch: no match on <CODECLASS="replaceable"><I>login</I></CODE> (<CODECLASS="replaceable"><I>length</I></CODE>) via <CODECLASS="replaceable"><I>method</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">&#13;This shows that the name <CODECLASS="replaceable"><I>login</I></CODE> was looked up with a particular length, usingthe database <CODECLASS="replaceable"><I>method</I></CODE>, where <CODECLASS="replaceable"><I>method</I></CODE> is either <CODECLASS="literal">db</CODE> or<CODECLASS="literal">hesiod</CODE>. </P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-99">37.5.99 -d28.4</A></H3><PCLASS="refpurpose">Show result of lookup</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d28.4</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM> to printthe result of its attempt to open (initialize) each database. There are threepossible results:</P><OLCLASS="orderedlist"><LICLASS="listitem"><PCLASS="para">If a file on the local machine contains the information sought,<EMCLASS="emphasis">sendmail</EM> prints</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">FETCH: file <CODECLASS="replaceable"><I>fname</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>fname</I></CODE> is the name of the local file.</P></LI><LICLASS="listitem"><PCLASS="para">If a mail message should be sent to another host for delivery,<EMCLASS="emphasis">sendmail</EM> prints:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">FORWARD: host <CODECLASS="replaceable"><I>hostname</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>hostname</I></CODE> is the full canonical name of the host thattakes delivery.</P></LI><LICLASS="listitem"><PCLASS="para">An unknown result causes the address to remainunchanged and the following message to be printed:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">UNKNOWN</PRE></BLOCKQUOTE></P></LI></OL></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-100">37.5.100 -d28.8</A></H3><PCLASS="refpurpose">Try hes-getmailhost()</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">If <EMCLASS="emphasis">sendmail</EM> is compiled with HES_GETMAILHOST defined(see <ACLASS="xref"HREF="ch18_08.htm#SML2-CH-18-SECT-8-11"TITLE="">Section 18.8.11, HES-GETMAILHOST</A>),the following is printed when the <CODECLASS="literal">-d28.8</CODE> debuggingswitch is used:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">udbmatch: no match on <CODECLASS="replaceable"><I>login</I></CODE> (<CODECLASS="replaceable"><I>length</I></CODE>)  <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> from -d28.2</I>  ... trying hes_getmailhost (<CODECLASS="replaceable"><I>login</I></CODE>)udbexpand: hesiod-getmail <CODECLASS="replaceable"><I>login</I></CODE> stat <CODECLASS="replaceable"><I>err</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <EMCLASS="emphasis">hes_getmailhost</EM>() is called to retrieve the name of thepost office that handles this <CODECLASS="replaceable"><I>login</I></CODE>. If that call fails,the last line is printed, showing that the <EMCLASS="emphasis">hesiod</EM> error<CODECLASS="replaceable"><I>err</I></CODE> occurred.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-101">37.5.101 -d28.16</A></H3><PCLASS="refpurpose">MX records for forward host</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">If a lookup is for a forwarding host (FORWARD above) and theforwarding host has MX records, the <CODECLASS="literal">-d28.16</CODE> debugging switch causes those records to be printed:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">getmxrr(<CODECLASS="replaceable"><I>host</I></CODE>): <CODECLASS="replaceable"><I>number</I></CODE>   <ICLASS="lineannotation"> first MX record here</I>   <ICLASS="lineannotation"> second MX record here</I>   <ICLASS="lineannotation"> etc.</I></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>host</I></CODE> is the name of the host to which the lookupis forwarded. The <CODECLASS="replaceable"><I>number</I></CODE> is the number of MX recordsfound. That line is then followed by <CODECLASS="replaceable"><I>number</I></CODE> MX records forthat host.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-102">37.5.102 -d28.20</A></H3><PCLASS="refpurpose">Show udb lookup</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The internal <EMCLASS="emphasis">udb_map_lookup</EM>() routine is called each timeanything is looked up in the udb database. Upon entry intothat routine, the <CODECLASS="literal">-d28.20</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM> toprint</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">udb_map_lookup(<CODECLASS="replaceable"><I>name</I></CODE>, <CODECLASS="replaceable"><I>what</I></CODE>)</PRE></BLOCKQUOTE></P><PCLASS="para">Here, the <CODECLASS="replaceable"><I>what</I></CODE> is key about to be looked up in the map named <CODECLASS="replaceable"><I>name</I></CODE>.This routine in turn calls <EMCLASS="emphasis">udbmatch</EM>().Note that the <CODECLASS="literal">-d38.20</CODE> debugging switch also produces this output.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-103">37.5.103 -d28.80</A></H3><PCLASS="refpurpose">Preview lookups</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d28.80</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM> to showwhat it is about to lookup.</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">udbexpand: trying <CODECLASS="replaceable"><I>login</I></CODE> (<CODECLASS="replaceable"><I>length</I></CODE>) via <CODECLASS="replaceable"><I>method</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">This shows that the name <CODECLASS="replaceable"><I>login</I></CODE> was looked up with a particular <CODECLASS="replaceable"><I>length</I></CODE>, usingthe database <CODECLASS="replaceable"><I>method</I></CODE>, where <CODECLASS="replaceable"><I>method</I></CODE> is either <CODECLASS="literal">db</CODE> or<CODECLASS="literal">hesiod</CODE>. </P><PCLASS="para">The <CODECLASS="literal">-d28.80</CODE> debugging switch also causes the result of a lookup to be displayed:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">udbexpand: match <CODECLASS="replaceable"><I>login</I></CODE>: <CODECLASS="replaceable"><I>result</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>login</I></CODE> was found, and the lookup returned <CODECLASS="replaceable"><I>result</I></CODE>.</P><PCLASS="para">The <CODECLASS="literal">-d28.80</CODE> debugging switch also causes the result of <EMCLASS="emphasis">hes_udb_get</EM>()to be displayed:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">hes_udb_get(<CODECLASS="replaceable"><I>login</I></CODE>, <CODECLASS="replaceable"><I>what</I></CODE>)            <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> printed with -d28.1</I>hes_udb_get =&gt; <CODECLASS="replaceable"><I>result               </I></CODE><ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> printed with -d28.80</I></PRE></BLOCKQUOTE></P><PCLASS="para">Here, the hesiod library routine <EMCLASS="emphasis">hes_resolve</EM>(3) is called with the twoarguments <CODECLASS="replaceable"><I>login</I></CODE> and <CODECLASS="replaceable"><I>what</I></CODE>. The <CODECLASS="replaceable"><I>result</I></CODE> (a string) is printedon the second line.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-104">37.5.104 -d29.1</A></H3><PCLASS="refpurpose">Special rewrite of local recipient</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">With a level 2 or greater configuration file (see the <CODECLASS="literal">V</CODE>configuration command in <ACLASS="xref"HREF="ch27_05.htm"TITLE="The V Configuration Command">Section 27.5, "The V Configuration Command"</A>), V8 <EMCLASS="emphasis">sendmail</EM> passesthe user part (<CODECLASS="literal">$u</CODE>) of local recipient addresses through rule set 5as a hook to select a new delivery agent. Rule set 5 is calledif the address is unchanged after all aliasing (including the<EMCLASS="emphasis">~/.forward</EM> file).The <CODECLASS="literal">-d29.1</CODE> (a.k.a. <CODECLASS="literal">-d29</CODE>) debugging switch causes the address to be printedas it appears before the rule set 5 rewrite:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">maplocaluser: <ICLASS="lineannotation">output of printaddr</I>()<ICLASS="lineannotation"> here (see <ACLASS="xref"HREF="ch37_03.htm#SML2-CH-37-SECT-3-1"TITLE="The Output Produced by printaddr()">Section 37.3.1</A>)</I></PRE></BLOCKQUOTE></P><PCLASS="para">Information about the address is printedwith the <EMCLASS="emphasis">printaddr</EM>() routine.The output of <EMCLASS="emphasis">maplocaluser</EM>() becomes the input to <EMCLASS="emphasis">recipient</EM>(),so the result of rewriting can be seen by using the <CODECLASS="literal">-d26.1</CODE>debugging switch in combination with this one.</P><PCLASS="para">Note that the particulars about whether or not an address willbe processed by rule set 5 are described in <CODECLASS="literal">-d29.5</CODE> below.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-105">37.5.105 -d29.4</A></H3><PCLASS="refpurpose">Trace fuzzy matching</P>(useful)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">Fuzzy matching is the attempt to match a local recipient name toone of the names in the <EMCLASS="emphasis">gecos</EM> field of the <EMCLASS="emphasis">passwd</EM>(5)file (or NIS map).The <CODECLASS="literal">-d29.4</CODE> debugging switch causes the process of fuzzymatching to be traced:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">finduser(<CODECLASS="replaceable"><I>name</I></CODE>)</PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>name</I></CODE> is an address in the form of a local user address,without the host part. The <CODECLASS="replaceable"><I>name</I></CODE> is first looked up in the<EMCLASS="emphasis">passwd</EM>(5) file on the assumption that it is a login name.If it is found, <EMCLASS="emphasis">sendmail</EM> prints</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">found (non-fuzzy)</PRE></BLOCKQUOTE></P><PCLASS="para">If <EMCLASS="emphasis">sendmail</EM> was compiled with <EMCLASS="emphasis">hesiod</EM> support, all numeric login nameswill not work properly, resulting in the following:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">failed (numeric input)</PRE></BLOCKQUOTE></P><PCLASS="para">If the name is looked up and not found, the entire <EMCLASS="emphasis">passwd</EM>(5) is searched, to seewhether <CODECLASS="replaceable"><I>name</I></CODE> appears in any of the <EMCLASS="emphasis">gecos</EM> fields. Thissearch is done only if MATCHGECOS (see <ACLASS="xref"HREF="ch18_08.htm#SML2-CH-18-SECT-8-18"TITLE="">Section 18.8.18, MATCHGECOS</A>)was defined when <EMCLASS="emphasis">sendmail</EM>was compiled and if the <CODECLASS="literal">MatchGECOS</CODE> (<CODECLASS="literal">G</CODE>) option(see <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-34"TITLE="">Section 34.8.34, MatchGECOS (G)</A>)is true.If MATCHGECOS was undefined, the search ends and the not-found<CODECLASS="replaceable"><I>name</I></CODE> causes the mail to bounce. If the <CODECLASS="literal">MatchGecos</CODE>(<CODECLASS="literal">G</CODE>) optionis false, <EMCLASS="emphasis">sendmail</EM> bounces the message and prints the following:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">not found (fuzzy disabled)</PRE></BLOCKQUOTE></P><PCLASS="para">If the <CODECLASS="literal">MatchGecos</CODE> (<CODECLASS="literal">G</CODE>) option is true, the <EMCLASS="emphasis">gecos</EM> fields are searched.But before the search starts, any underscore characters (and the characterdefined by the BlankSub (<CODECLASS="literal">B</CODE>) option; see <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-5"TITLE="">Section 34.8.5, BlankSub (B)</A>)that appear in <EMCLASS="emphasis">name</EM> are convertedto spaces. Then, in turn, each <EMCLASS="emphasis">gecos</EM> field hasthe full name extracted (everything following the first comma, semicolon,or percent is truncated off, including that character),and any <CODECLASS="literal">&amp;</CODE> characters found are converted to the login name.The two are then compared in a case-insensitive fashion. If theyare identical, <EMCLASS="emphasis">sendmail</EM> prints:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">fuzzy matches <EMCLASS="emphasis">gecos</EM></PRE></BLOCKQUOTE></P><PCLASS="para">If all <EMCLASS="emphasis">gecos</EM> fields are compared and no match is found, <EMCLASS="emphasis">sendmail</EM>bounces the message and prints the following:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">no fuzzy match found</PRE></BLOCKQUOTE></P><PCLASS="para">There is no debugging flag to watch each comparison.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-106">37.5.106 -d29.5</A></H3><PCLASS="refpurpose">Preview rule set 5</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d29.5</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM> to printan address just before it is tested to see whether rule set 5 should becalled:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">recipient: testing local?  cl=<CODECLASS="replaceable"><I>level</I></CODE>, rr5=<CODECLASS="replaceable"><I>addr</I></CODE>,                                               <ICLASS="lineannotation"><IMGSRC="../chars/uarr.gif"ALT="-^"></I>                                         <ICLASS="lineannotation">output of printaddr</I>()<ICLASS="lineannotation"> here (see <ACLASS="xref"HREF="ch37_03.htm#SML2-CH-37-SECT-3-1"TITLE="The Output Produced by printaddr()">Section 37.3.1</A>)</I></PRE></BLOCKQUOTE></P><PCLASS="para">For the address to be rewritten, the configuration file version as displayed by<CODECLASS="replaceable"><I>level</I></CODE> must be 2 or more, the address in memory for rule set5 (shown with <CODECLASS="replaceable"><I>rr5</I></CODE>) must be nonzero, the <CODECLASS="replaceable"><I>flags</I></CODE>in <CODECLASS="replaceable"><I>addr</I></CODE> must not contain QNOTREMOTE,QDONTSEND, QQUEUEUP, or QVERIFIED,and the delivery agent for the address must have the <CODECLASS="literal">F=5</CODE>flag set.</P><PCLASS="para">The <CODECLASS="literal">-d29.5</CODE> debugging switch also causes <EMCLASS="emphasis">sendmail</EM> to displaythe following if the address is rewritten by rule set 5:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">maplocaluser: QDONTSEND <ICLASS="lineannotation">output of printaddr</I>()<ICLASS="lineannotation"> here (see <ACLASS="xref"HREF="ch37_03.htm#SML2-CH-37-SECT-3-1"TITLE="The Output Produced by printaddr()">Section 37.3.1</A>)</I></PRE></BLOCKQUOTE></P><PCLASS="para">Here the <EMCLASS="emphasis">printaddr</EM>() routineprints the old address that is being canceled.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-107">37.5.107 -d29.7</A></H3><PCLASS="refpurpose">Show over-aliasing fuzzy fallback</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">If a fuzzy match causesmore than three transformations to occur during aliasing, <EMCLASS="emphasis">sendmail</EM> emits thefollowing error:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">aliasing/forwarding loop for <CODECLASS="replaceable"><I>login</I></CODE> broken</PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>login</I></CODE> is the login name of the recipient that startedthe suspected runaway aliasing.The <CODECLASS="literal">-d29.5</CODE> debugging switch also causes <EMCLASS="emphasis">sendmail</EM> to printthat it is trying to fall back to the original login namefor delivery:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">at trylocaluser <CODECLASS="replaceable"><I>login</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">&#13;Note that this message is printed before the message printed by the <CODECLASS="literal">-d26</CODE> switch (which shows the testing for a self-destructive addresses).</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-108">37.5.108 -d30</A></H3><PCLASS="refpurpose">Trace processing of header</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">When <EMCLASS="emphasis">sendmail</EM> reads a mail message, it first collects (reads) the headerportions of that message (everything up to the first blank line) andplaces the result into a temporary file in the queue directory.While it is processing the header, if the <CODECLASS="literal">SaveFromLine</CODE> (<CODECLASS="literal">f</CODE>)option (see <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-59"TITLE="">Section 34.8.59, SaveFromLine (f)</A>),is false, the UNIX-style &quot;<CODECLASS="literal">From&nbsp;</CODE>&quot; header is removed, andthe important information in it is saved for later use.</P><PCLASS="para">The <CODECLASS="literal">-d30.1</CODE> (a.k.a. <CODECLASS="literal">-d30</CODE>) debugging switch causes <EMCLASS="emphasis">sendmail</EM> toprint the following succinct message when it finds the end ofthe header portion of a mail message:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">EOH</PRE></BLOCKQUOTE></P><PCLASS="para">If end-of-headers was caused by a read error or a broken connection,<EMCLASS="emphasis">sendmail</EM> prints:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">collect: premature EOM: <ICLASS="lineannotation"> reason for failure here</I></PRE></BLOCKQUOTE></P><PCLASS="para">If end-of-headers was caused by a <CODECLASS="literal">Message:</CODE> or <CODECLASS="literal">Text:</CODE>header, then the rest of the header portion of the message isignored.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-109">37.5.109 -d30.2</A></H3><PCLASS="refpurpose">Eatfrom</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d30.2</CODE> debugging switch first causes <EMCLASS="emphasis">sendmail</EM> toprint its entry into <EMCLASS="emphasis">collect</EM>():</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">collect</PRE></BLOCKQUOTE></P><PCLASS="para">Then, when <EMCLASS="emphasis">sendmail</EM> strips (eats) the UNIX-style, five-character &quot;<CODECLASS="literal">From&nbsp;</CODE>&quot; headerfrom a mail message, it tries to extract (and save) the date from the header.The <CODECLASS="literal">-d30.2</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM> to printthe <CODECLASS="replaceable"><I>field</I></CODE> portion of the header as it appears beforethe date is extracted:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">eatfrom(<CODECLASS="replaceable"><I>field</I></CODE>)</PRE></BLOCKQUOTE></P><PCLASS="para">The <EMCLASS="emphasis">eatfrom</EM>() routine will vanish if NOTUNIX(see <ACLASS="xref"HREF="ch18_08.htm#SML2-CH-18-SECT-8-32"TITLE="">Section 18.8.32, NOTUNIX</A>)is defined when compiling <EMCLASS="emphasis">sendmail</EM>.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-110">37.5.110 -d30.3</A></H3><PCLASS="refpurpose">Show a to-less header being added</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">If the header of a mail message lacks recipient information (lacksall of the <CODECLASS="literal">To:</CODE>, <CODECLASS="literal">Cc:</CODE>,<CODECLASS="literal">Bcc</CODE>:, and <CODECLASS="literal">Apparently-To:</CODE> header lines),then <EMCLASS="emphasis">sendmail</EM> adds a header as defined by the <CODECLASS="literal">NoRecipientAction</CODE>option (see <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-43"TITLE="">Section 34.8.43, NoRecipientAction</A>).The <CODECLASS="literal">-d30.3</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM> toprint which <CODECLASS="replaceable"><I>header</I></CODE> it is adding:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Adding <CODECLASS="replaceable"><I>header</I></CODE>: <CODECLASS="replaceable"><I>recipient</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>header</I></CODE> is the text of the header being saved, and<CODECLASS="replaceable"><I>recipient</I></CODE> is the address of the recipient as taken fromthe envelope of the message.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-111">37.5.111 -d30.35</A></H3><PCLASS="refpurpose">Trace collect states</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The process of collecting the message header and body over an SMTPconnection is driven by a state engine inside <EMCLASS="emphasis">sendmail</EM>. The<CODECLASS="literal">-d30.35</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM> to displayeach state just before it is processed:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">top, istate=<CODECLASS="replaceable"><I>is</I></CODE>, mstate=<CODECLASS="replaceable"><I>ms</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>is</I></CODE> is the current input state as described in<ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-TAB-10"TITLE="collect() Input States">Table 37.11</A>and <CODECLASS="replaceable"><I>ms</I></CODE> is the current message state as described in<ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-TAB-11"TITLE="collect() Message States">Table 37.12</A>.</P><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="SML2-CH-37-TAB-10">Table 37.11: collect() Input States</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">istate</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Name</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Description</TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">IS_NORM</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Currently in  middle of a line</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">IS_BOL</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Currently at beginning of a line</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">2</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">IS_DOT</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Just read a dot at beginning of line</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">3</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">IS_DOTCR</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Just read &quot;.\r&quot; at beginning of line</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">4</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">IS_CR</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Just read a carriage return</TD></TR></TBODY></TABLE><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="SML2-CH-37-TAB-11">Table 37.12: collect() Message States</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">mstate</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Name</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Description</TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">MS_UFROM</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Currently reading UNIX from line</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">MS_HEADER</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Currently reading message header</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">2</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">MS_BODY</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Currently reading message body</TD></TR></TBODY></TABLE><PCLASS="para">The <CODECLASS="literal">-d30.35</CODE> debugging switch also causes the same informationto be printed every time <EMCLASS="emphasis">sendmail</EM> goes to a new state:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">nextstate, istate=<CODECLASS="replaceable"><I>is</I></CODE>, mstate=<CODECLASS="replaceable"><I>ms</I></CODE>, line = &quot;<CODECLASS="replaceable"><I>header</I></CODE>&quot;</PRE></BLOCKQUOTE></P><PCLASS="para">Here, the extra information is the current text of the header beingprocessed.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-112">37.5.112 -d30.94</A></H3><PCLASS="refpurpose">Trace collect states</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d30.94</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM> to printthe input state (see<ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-TAB-10"TITLE="collect() Input States">Table 37.11</A>)for each character being processed:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">istate=<CODECLASS="replaceable"><I>is</I></CODE>, c=<CODECLASS="replaceable"><I>char </I></CODE>(<CODECLASS="replaceable"><I>hex</I></CODE>)</PRE></BLOCKQUOTE></P><PCLASS="para">Each character is printed both as the character it is (<CODECLASS="replaceable"><I>char</I></CODE>) andhow it is represented in hexadecimal (<CODECLASS="replaceable"><I>hex</I></CODE>).</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-113">37.5.113 -d31.2</A></H3><PCLASS="refpurpose">Trace processing of headers</P>(useful)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">Header lines (see <ACLASS="xref"HREF="ch35_01.htm#SML2-CH-35-SECT-1"TITLE="The H Configuration Command">Section 35.1, "The H Configuration Command"</A>)from the configuration file and from mail messagesare processed by the <EMCLASS="emphasis">chompheader</EM>() routine before theyare included in any mail message.That routine parses each header line to save critical information,to check for validity, and to replace default values with newvalues.</P><PCLASS="para">The <CODECLASS="literal">-d31.2</CODE> debugging switch[6]shows that <EMCLASS="emphasis">sendmail</EM> isabout to check whether it should replace a <CODECLASS="literal">From:</CODE> or<CODECLASS="literal">Resent-From:</CODE> header withthe one defined by the <CODECLASS="literal">H</CODE> configuration command.If the configuration file is not being read and if <EMCLASS="emphasis">sendmail</EM> isnot processing the queue, the following test is made:</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[6] There is no <CODECLASS="literal">-d31.1</CODE> information.</P></BLOCKQUOTE><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">comparing header from (<CODECLASS="replaceable"><I>header</I></CODE>) against default (<CODECLASS="replaceable"><I>addr</I></CODE> or <CODECLASS="replaceable"><I>name)</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">The value of the <CODECLASS="literal">From:</CODE> or <CODECLASS="literal">Resent-From:</CODE><CODECLASS="replaceable"><I>header</I></CODE> is compared to the sender's address (<CODECLASS="replaceable"><I>addr</I></CODE>)and to the sender's <CODECLASS="replaceable"><I>name</I></CODE>. If it is that same as either one,the address is replaced.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-114">37.5.114 -d31.6</A></H3><PCLASS="refpurpose">Entering chompheader()</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d31.6</CODE> debugging switch shows each header as itappears when it enters the <EMCLASS="emphasis">chompheader</EM>() routine:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">chompheader: <EMCLASS="emphasis">line</EM></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <EMCLASS="emphasis">line</EM> is the exact text of the original header beforeprocessing. Unfortunately, there is no debuggingswitch that allows the result of this processing to be viewed.</P><PCLASS="para">To determine how it should handle a header, <EMCLASS="emphasis">sendmail</EM> compareseach header to its list of headers in <EMCLASS="emphasis">sendmail.h</EM>.The <CODECLASS="literal">-d31.6</CODE> debugging switch also shows the result after thecomparisons have been done:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">no header matchheader match, hi_flags= <ICLASS="lineannotation">flags in hexadecimal here</I></PRE></BLOCKQUOTE></P><PCLASS="para">The flags and their hexadecimal equivalence are shownin <ACLASS="xref"HREF="ch35_05.htm#SML2-CH-35-TAB-1"TITLE="Header Flags in conf.c">Table 35.2</A> in <ACLASS="xref"HREF="ch35_05.htm"TITLE="Header Behavior in conf.c">Section 35.5, "Header Behavior in conf.c"</A>.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-115">37.5.115 -d32.1</A></H3><PCLASS="refpurpose">Show collected headers</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d32.1</CODE> (a.k.a. <CODECLASS="literal">-d31</CODE>) debugging switch causes <EMCLASS="emphasis">sendmail</EM> to printthe header lines that it collected from a received mail message:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">--- collected header ---<ICLASS="lineannotation">     header lines here</I>--------------</PRE></BLOCKQUOTE></P><PCLASS="para">Each header line is printed with the header name on the left, a colon, and the value for that header on the right.If there is no value, <EMCLASS="emphasis">sendmail</EM> prints &lt;NULL&gt;.</P><PCLASS="para">If the H_DEFAULT flag is set for any header (see <ACLASS="xref"HREF="ch35_05.htm#SML2-CH-35-SECT-5-3"TITLE="H_DEFAULT">Section 35.5.3, "H_DEFAULT"</A>),the value for the header is printed inside parentheses with macrosunexpanded, just before it is printed in expanded form. For example,</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Full-Name: ($x) Your Full Name</PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-116">37.5.116 -d32.2</A></H3><PCLASS="refpurpose">Show ARPA mode with setsender</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d32.2</CODE> debugging switch works only if the modeset with the <CODECLASS="literal">-b</CODE> command-line switch is in ARPA (<CODECLASS="literal">-ba</CODE>) mode(see <ACLASS="xref"HREF="ch36_07.htm#SML2-CH-36-SECT-7-3"TITLE="">Section 36.7.3, -ba</A>).It shows the sender address being extracted from the headerwith <EMCLASS="emphasis">setsender</EM>():</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">eatheader: setsender(*<CODECLASS="replaceable"><I>value</I></CODE> == <CODECLASS="replaceable"><I>realvalue</I></CODE>)</PRE></BLOCKQUOTE></P><PCLASS="para">The <EMCLASS="emphasis">setsender</EM>() routine can be further traced with the<CODECLASS="literal">-d45.1</CODE> debugging switch.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-117">37.5.117 -d33.1</A></H3><PCLASS="refpurpose">Watch crackaddr()</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <EMCLASS="emphasis">crackaddr</EM>() routine's job is to find an email addressamidst other nonaddress text, then to save that nonaddress part:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">gw@wash.dc.gov (George Washington)  <CODECLASS="replaceable"><I><IMGSRC="../chars/rarr.gif"ALT="-&gt;"></I></CODE> <CODECLASS="replaceable"><I>crackaddr</I></CODE>() <CODECLASS="replaceable"><I><IMGSRC="../chars/rarr.gif"ALT="-&gt;"></I></CODE> $g (George Washington)</PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="literal">-d33.1</CODE> (a.k.a. <CODECLASS="literal">33</CODE>) debugging switch causes <EMCLASS="emphasis">sendmail</EM> to print the potential address prior to cracking and, after that,the address that it found:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">crackaddr(<CODECLASS="replaceable"><I>potential</I></CODE>)crackaddr=&gt;`<CODECLASS="replaceable"><I>addr</I></CODE>'</PRE></BLOCKQUOTE></P><PCLASS="para">The legal ways that addresses can be placed withinother text is described in <ACLASS="xref"HREF="ch35_03.htm"TITLE="Header Field Contents">Section 35.3, "Header Field Contents"</A>.See also the <CODECLASS="literal">/parse</CODE> rule-testing command (<ACLASS="xref"HREF="ch38_05.htm#SML2-CH-38-SECT-5-5"TITLE="Parse an Address with /parse">Section 38.5.5, "Parse an Address with /parse"</A>)to put <CODECLASS="replaceable"><I>crackaddr</I></CODE>() in context.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-118">37.5.118 -d34.1</A></H3><PCLASS="refpurpose">Watch header assembly for output</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <EMCLASS="emphasis">sendmail</EM> program uses <EMCLASS="emphasis">putheader</EM>() to create headers that didn't exist before.The <CODECLASS="literal">-d34.1</CODE> (a.k.a. <CODECLASS="literal">-d34</CODE>) debugging switch causes <EMCLASS="emphasis">sendmail</EM> toprint the following on entry to that routine:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">-- putheader, mailer = <CODECLASS="replaceable"><I>agent</I></CODE> --</PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>agent</I></CODE> is the symbolic name of thedelivery agent that will deliver the bounced message.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-119">37.5.119 -d34.11</A></H3><PCLASS="refpurpose">Trace header generation and skipping</P>(useful)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">Each header line created is displayed withtwo leading spaces. For example,</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">-- putheader, mailer = *file* --  Return-Path: you</PRE></BLOCKQUOTE></P><PCLASS="para">Then certain headers are excluded from the bounced mail messageheader. Those with the H_CTE flag set(see <ACLASS="xref"HREF="ch35_05.htm#SML2-CH-35-SECT-5-12"TITLE="H_CTE">Section 35.5.12, "H_CTE"</A>)and either the MCIF_CVT8TO7 or MCIF_INMIME <EMCLASS="emphasis">mci</EM> flags set(see <ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-TAB-16"TITLE="mci_get() Status Flags">Table 37.17</A>)will have the text:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">(skipped (content-transfer-encoding))</PRE></BLOCKQUOTE></P><PCLASS="para">appended and that header skipped (excluded).</P><PCLASS="para">Any header that has both H_CHECK and H_ACHECK flagsset and doesn't have identical delivery agent flags set for itself and its cached connection information will also be skipped:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">(skipped)</PRE></BLOCKQUOTE></P><PCLASS="para">All resent headers (those marked with H_RESENT) are also skipped:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">(skipped (resent))</PRE></BLOCKQUOTE></P><PCLASS="para">&#13;Return-receipt headers are also skipped:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">(skipped (receipt))</PRE></BLOCKQUOTE></P><PCLASS="para">If a <CODECLASS="literal">Bcc:</CODE> header (see <ACLASS="xref"HREF="ch35_10.htm#SML2-CH-35-SECT-10-4"TITLE="">Section 35.10.4, Bcc:</A>) is being skipped, thisis printed:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">(skipped - bcc)</PRE></BLOCKQUOTE></P><PCLASS="para">Finally, valueless headers are also skipped with this message:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">(skipped - null value)</PRE></BLOCKQUOTE></P><PCLASS="para">Any headers that survive this skipping process are included in theeventually delivered bounced message. Note that MIME headersare not generated or displayed here (see -d43).</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-120">37.5.120 -d35.9</A></H3><PCLASS="refpurpose">Macro values defined</P>(useful)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-58848"></A>The <CODECLASS="literal">-d35.9</CODE> debugging switch[7]causes <EMCLASS="emphasis">sendmail</EM>to print each macro as it is defined. The output looks like this:</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[7] There is no <CODECLASS="literal">-d35.1</CODE> information.</P></BLOCKQUOTE><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">define(<CODECLASS="replaceable"><I>name</I></CODE> as &quot;<EMCLASS="emphasis">value</EM>&quot;)</PRE></BLOCKQUOTE></P><PCLASS="para">Here, the <CODECLASS="replaceable"><I>name</I></CODE> is the macro's name, and the<EMCLASS="emphasis">value</EM> is the value (text) assigned to the macro.If the macro already has a value assigned to it, <EMCLASS="emphasis">sendmail</EM>prints:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">redefine(<CODECLASS="replaceable"><I>name</I></CODE> as &quot;<EMCLASS="emphasis">value</EM>&quot;)</PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-121">37.5.121 -d35.14</A></H3><PCLASS="refpurpose">Macro Identification</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">With the introduction of multicharacter macro names, it is nownecessary for <EMCLASS="emphasis">sendmail</EM> to convert each macro name from textform into <EMCLASS="emphasis">sendmail</EM>'s internal form. Single-character macronames are represented by themselves. Multicharacter names arerepresented by values from 0240 (octal) upward.The <CODECLASS="literal">-d35.14</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM> toprint each macro name as it is being looked up:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">macid(<CODECLASS="replaceable"><I>name</I></CODE>) =&gt; <CODECLASS="replaceable"><I>value</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="replaceable"><I>name</I></CODE> is the text immediately following a <CODECLASS="literal">$</CODE> character,including any trailing junk in the line. For example, the followingminiconfigurations file:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">V7D{FOO}fooR$H     ${FOO}  note no $H defined</PRE></BLOCKQUOTE></P><PCLASS="para">produces this output (with only the <CODECLASS="literal">macid</CODE> lines shown):</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">macid({FOO}foo) =&gt; 0xa0macid(H\t${FOO}\tnote no $H defined) =&gt; Hmacid({FOO}\tnote no $H defined) =&gt; 0xa0macid(H defined) =&gt; H</PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-122">37.5.122 -d35.24</A></H3><PCLASS="refpurpose">Macro expansion</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">Macros that are included in text must be translatedinto values (expanded) so that the values may be used. The <CODECLASS="literal">-d35.24</CODE>debugging switch tells <EMCLASS="emphasis">sendmail</EM> to display suchtext both before and after the macros in it have been expanded.The &quot;before&quot; looks like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">expand(&quot;<EMCLASS="emphasis">text</EM>&quot;)</PRE></BLOCKQUOTE></P><PCLASS="para">For example,</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">expand(&quot;$w.$D&quot;)</PRE></BLOCKQUOTE></P><PCLASS="para">The <EMCLASS="emphasis">text</EM> (here <CODECLASS="literal">$w.$D</CODE>)may be any ASCII string. In it, special characters likethe newline character are printed in C language, backslash-escapednotation (such as <CODECLASS="literal">\n</CODE>). Macros are printed with eitherthe <CODECLASS="literal">$</CODE> prefix (such as <CODECLASS="literal">$w</CODE> above with V8 <EMCLASS="emphasis">sendmail</EM>)or some other prefix (IDA uses <CODECLASS="literal">^Aw.^AD</CODE>,SunOS uses <CODECLASS="literal">/w./D</CODE>; others use the archaic<CODECLASS="literal">\001w.\001D</CODE> notation).</P><PCLASS="para">Expansion is performed only on defined macros (using the<CODECLASS="literal">$</CODE> prefix), on macro conditionals (in which oneof two values is used, depending on whether a macro has a valueor not, such as <CODECLASS="literal">$?x$x$|nobody$.</CODE>), andand on the <CODECLASS="literal">$&amp;</CODE> prefix (deferred expansion).</P><PCLASS="para">After the first (leftmost) macro or conditional is expanded in<EMCLASS="emphasis">text</EM>, <EMCLASS="emphasis">sendmail</EM> prints the transformed text asfollows:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">expanded ==&gt; &quot;<EMCLASS="emphasis">text</EM>&quot;</PRE></BLOCKQUOTE></P><PCLASS="para">For example,</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">expanded ==&gt; &quot;wash.$D&quot;</PRE></BLOCKQUOTE></P><PCLASS="para">If any unexpanded macros or conditionals remain in<EMCLASS="emphasis">text</EM>, this <CODECLASS="literal">expanded</CODE> process is<EMCLASS="emphasis">recursively</EM> repeated until everything that can be expandedhas been expanded.This process of recursion allows macros to have other macros as their values.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-123">37.5.123 -d36.5</A></H3><PCLASS="refpurpose">Trace processing by stab()</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The symbol table is a block of memory that contains informationabout all the symbolic names used by <EMCLASS="emphasis">sendmail</EM>. Symbolicnames are delivery agent names (such as <CODECLASS="literal">local</CODE>),aliases, database classes, hostnames, and macros.Symbols are placed into the symbol table with the <EMCLASS="emphasis">stab</EM>() routine.That routine is also used to see whether a symbol has already beeninserted and, if so, to obtain its value.The <CODECLASS="literal">-d36.5</CODE> debugging switch[8]causes <EMCLASS="emphasis">sendmail</EM> to printthe following upon its entry into the <EMCLASS="emphasis">stab</EM>() routine:</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[8] There is no <CODECLASS="literal">-d36.1</CODE> information.</P></BLOCKQUOTE><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">STAB: <CODECLASS="replaceable"><I>name</I></CODE> <CODECLASS="replaceable"><I>type</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>name</I></CODE> is the symbolic name to be inserted or looked up.The <CODECLASS="replaceable"><I>type</I></CODE> is one of the values listed in <ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-TAB-12"TITLE="Types of Symbols Recognized by stab()">Table 37.13</A>.</P><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="SML2-CH-37-TAB-12">Table 37.13: Types of Symbols Recognized by stab()</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Type</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Mnemonic</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Description</TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">ST_UNDEF</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Undefined type</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">ST_CLASS</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Class (from <CODECLASS="literal">C</CODE> and <CODECLASS="literal">F</CODE> configuration commands)</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">2</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">ST_ADDRESS</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">An address in parsed format</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">3</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">ST_MAILER</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">A delivery agent (from <CODECLASS="literal">M</CODE> configuration command)</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">4</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">ST_ALIAS</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">An alias, if no external database</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">5</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">ST_MAPCLASS</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">A database class (<CODECLASS="literal">K</CODE> command)</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">6</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">ST_MAP</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Function that handles a class</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">7</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">ST_HOSTSIG</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Host MX signature</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">8</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">ST_NAMECANON</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Cached canonical name</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">9</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">ST_MACRO</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Macro name to id value mapping</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">10</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">ST_RULESET</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Ruleset name to number mapping</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">11</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">ST_SERVICE</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Service switch file entry</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">16</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">ST_MCI</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">SMTP connection status\*[=a]</TD></TR></TBODY></TABLE><PCLASS="para">This is the base (offset) of types 16 through 16+<EMCLASS="emphasis">n</EM>, where<EMCLASS="emphasis">n</EM> is 16 plus MAXMAILERS as defined in <EMCLASS="emphasis">conf.h</EM>.If <EMCLASS="emphasis">stab</EM>() is being used to insert a symbol, the above outputis concluded with:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">entered</PRE></BLOCKQUOTE></P><PCLASS="para">If <EMCLASS="emphasis">stab</EM>() is being used to look up a symbol, one of thetwo following messages is printed:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">not foundtype <CODECLASS="replaceable"><I>type</I></CODE> val <CODECLASS="replaceable"><I>hex hex hex hex</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">If it is found, four hexadecimal values are printed, whichshow the first four 4-byte words of the value.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-124">37.5.124 -d36.9</A></H3><PCLASS="refpurpose">Show hash bucket</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">A hashing algorithm is used to make the symbol table more efficient.The <CODECLASS="literal">-d36.9</CODE> debugging switch is used to see the hashvalue selected for any given symbol:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">(hfunc=<CODECLASS="replaceable"><I>hash</I></CODE>)</PRE></BLOCKQUOTE></P><PCLASS="para">The number of possible hash-table buckets is limited by STABSIZE, as definedin <EMCLASS="emphasis">stab.c</EM>.[9]</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[9] You can experiment with different hashing algorithms by modifyingthe code in <EMCLASS="emphasis">stab.c</EM>. But note that it has already been heavily tunedin V8.7, roughly doubling its speed over that of earlier versions.</P></BLOCKQUOTE></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-125">37.5.125 -d36.90</A></H3><PCLASS="refpurpose">Trace function applied to all symbols</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d36.90</CODE> debugging switch causes the name and type ofeach symbol to be printed as a common function is applied to each with<EMCLASS="emphasis">sendmail</EM>'s internal <EMCLASS="emphasis">stabapply</EM>() function.</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">stabapply: trying <CODECLASS="replaceable"><I>type</I></CODE>/<CODECLASS="replaceable"><I>name</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">The <EMCLASS="emphasis">stabapply</EM>() routine is used to initialize maps andto print the members of a class.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-126">37.5.126 -d37.1</A></H3><PCLASS="refpurpose">Trace setting of options</P>(useful)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-59082"></A>Options can be set on the command line or in the configuration file.The <CODECLASS="literal">-d37.1</CODE> (a.k.a. <CODECLASS="literal">-d37</CODE>) debugging switch allows you to watch each optionbeing defined. As each is processed, this message is firstprinted, without a trailing newline:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">setoption: <CODECLASS="replaceable"><I>name</I></CODE> (<CODECLASS="replaceable"><I>char</I></CODE>).<CODECLASS="replaceable"><I>sub</I></CODE>=<CODECLASS="replaceable"><I>val</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>name</I></CODE> is the option's multicharacter name,<CODECLASS="replaceable"><I>char</I></CODE> is its single-character equivalent (or a hexadecimalvalue if it is non-ASCII), and <CODECLASS="replaceable"><I>sub</I></CODE> is thesubvalue for that option if there was one.Finally, <EMCLASS="emphasis">val</EM> is the value being given to that option.If the option has already been set from the command line andis thus prohibited from being set in the configuration file,<EMCLASS="emphasis">sendmail</EM> prints:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">(ignored)</PRE></BLOCKQUOTE></P><PCLASS="para">A newline is then printed, and the job is done. Ifdefining the option is permitted, <EMCLASS="emphasis">sendmail</EM> next checks to see whetherit is <EMCLASS="emphasis">safe</EM>. If it is not, <EMCLASS="emphasis">sendmail</EM> prints:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">(unsafe)</PRE></BLOCKQUOTE></P><PCLASS="para">If it is unsafe, <EMCLASS="emphasis">sendmail</EM> checks to see whether it shouldrelinquish its <EMCLASS="emphasis">root</EM> privilege. If so, it prints:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">(Resetting uid)</PRE></BLOCKQUOTE></P><PCLASS="para">A newline is then printed, and the option has been defined. Optionsin general and safe versus unsafe are covered in<ACLASS="xref"HREF="ch34_01.htm"TITLE="Options">Chapter 34, <CITECLASS="chapter">Options</CITE></A>.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-127">37.5.127 -d37.8</A></H3><PCLASS="refpurpose">Trace adding of words to a class</P>(useful)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The adding of words to a class (<CODECLASS="literal">C</CODE>or <CODECLASS="literal">F</CODE> configuration commands) can be traced with the<CODECLASS="literal">-d37.8</CODE> debugging switch. Each word is printed like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">setclass(<CODECLASS="replaceable"><I>name</I></CODE>, <CODECLASS="replaceable"><I>text</I></CODE>)</PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="replaceable"><I>text</I></CODE> is added to the class whose symbolic name is<CODECLASS="replaceable"><I>name</I></CODE>. Class names can be single-character or multicharacter(see <ACLASS="xref"HREF="ch32_01.htm#SML2-CH-32-SECT-1"TITLE="Class Configuration Commands">Section 32.1, "Class Configuration Commands"</A>).</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-128">37.5.128 -d38.2</A></H3><PCLASS="refpurpose">Show map opens and failures</P>(useful)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">Most maps are declared directly with the <CODECLASS="literal">K</CODE> configurationcommand (see <ACLASS="xref"HREF="ch33_03.htm"TITLE="The K Configuration Command">Section 33.3</A>). Others are declared internally by <EMCLASS="emphasis">sendmail</EM>,such as the <EMCLASS="emphasis">host</EM> and <EMCLASS="emphasis">alias</EM> maps.The <CODECLASS="literal">-d38.2</CODE> debugging switch[10]first shows maps being initialized:</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[10] There is no <CODECLASS="literal">-d38.1</CODE> information.</P></BLOCKQUOTE><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">map_init(<CODECLASS="replaceable"><I>class</I></CODE>:<CODECLASS="replaceable"><I>name</I></CODE>, <CODECLASS="replaceable"><I>file</I></CODE>, <CODECLASS="replaceable"><I>pass</I></CODE>)</PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>class</I></CODE> is one of the internal classes allowed by <EMCLASS="emphasis">sendmail</EM>,such as <EMCLASS="emphasis">host</EM>, and <EMCLASS="emphasis">dequote</EM> (see <ACLASS="xref"HREF="ch33_03.htm"TITLE="The K Configuration Command">Section 33.3</A>, the <CODECLASS="literal">K</CODE> configuration command).The <CODECLASS="replaceable"><I>name</I></CODE> is either the name you gave to the map with the <CODECLASS="literal">K</CODE>configuration command or one assigned internally by <EMCLASS="emphasis">sendmail</EM> (like<EMCLASS="emphasis">aliases.files</EM>).The <CODECLASS="replaceable"><I>file</I></CODE> is either NULL or the name of the database file (suchas <EMCLASS="emphasis">/etc/aliases</EM>).And <CODECLASS="replaceable"><I>pass</I></CODE> is a flag that tells <EMCLASS="emphasis">sendmail</EM> whether ornot it should open the database, rebuild the database, or do neither.</P><PCLASS="para">Next the <CODECLASS="literal">-d38.2</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM>to show each map as it is about to beopened. The output that is produced will look like one of thefollowing lines:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">bt_map_open(<CODECLASS="replaceable"><I>name</I></CODE>, <CODECLASS="replaceable"><I>file</I></CODE>, <CODECLASS="replaceable"><I>mode</I></CODE>)hash_map_open(<CODECLASS="replaceable"><I>name</I></CODE>, <CODECLASS="replaceable"><I>file</I></CODE>, <CODECLASS="replaceable"><I>mode</I></CODE>)hes_map_open(<CODECLASS="replaceable"><I>name</I></CODE>, <CODECLASS="replaceable"><I>file</I></CODE>, <CODECLASS="replaceable"><I>mode</I></CODE>)impl_map_open(<CODECLASS="replaceable"><I>name</I></CODE>, <CODECLASS="replaceable"><I>file</I></CODE>, <CODECLASS="replaceable"><I>mode</I></CODE>)ldap_map_open(<CODECLASS="replaceable"><I>name</I></CODE>, <CODECLASS="replaceable"><I>mode</I></CODE>)ndbm_map_open(<CODECLASS="replaceable"><I>name</I></CODE>, <CODECLASS="replaceable"><I>file</I></CODE>, <CODECLASS="replaceable"><I>mode</I></CODE>)ni_map_open(<CODECLASS="replaceable"><I>name</I></CODE>, <CODECLASS="replaceable"><I>file</I></CODE>, <CODECLASS="replaceable"><I>mode</I></CODE>)nis_map_open(<CODECLASS="replaceable"><I>name</I></CODE>, <CODECLASS="replaceable"><I>file</I></CODE>, <CODECLASS="replaceable"><I>mode</I></CODE>)nisplus_map_open(<CODECLASS="replaceable"><I>name</I></CODE>, <CODECLASS="replaceable"><I>file</I></CODE>, <CODECLASS="replaceable"><I>mode</I></CODE>)stab_map_open(<CODECLASS="replaceable"><I>name</I></CODE>, <CODECLASS="replaceable"><I>file</I></CODE>, <CODECLASS="replaceable"><I>mode</I></CODE>)switch_map_open(<CODECLASS="replaceable"><I>name</I></CODE>, <CODECLASS="replaceable"><I>file</I></CODE>, <CODECLASS="replaceable"><I>mode</I></CODE>)text_map_open(<CODECLASS="replaceable"><I>name</I></CODE>, <CODECLASS="replaceable"><I>file</I></CODE>, <CODECLASS="replaceable"><I>mode</I></CODE>)user_map_open(<CODECLASS="replaceable"><I>name</I></CODE>, <CODECLASS="replaceable"><I>mode</I></CODE>)</PRE></BLOCKQUOTE></P><PCLASS="para">In all of the previous lines, the <CODECLASS="replaceable"><I>mode</I></CODE> is a decimal representationof the file permissions that are used during the open. The name prefixingeach line corresponds to the class of map. For example, <CODECLASS="literal">impl</CODE>corresponds to the <EMCLASS="emphasis">implicit</EM> class.</P><PCLASS="para">The <CODECLASS="literal">-d38.2</CODE> debugging switch also causes <EMCLASS="emphasis">sendmail</EM> todisplay the <EMCLASS="emphasis">nis</EM> domain that was used if one was specified for the <EMCLASS="emphasis">nisplus</EM>class:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">nisplus_map_open(<CODECLASS="replaceable"><I>file</I></CODE>): using domain <CODECLASS="replaceable"><I>ypdomain</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="literal">-d38.2</CODE> debugging switch also allows other silent errorsto be printed about some open failures.Under <EMCLASS="emphasis">nis+</EM>, lookups are performed by named columns (as in the case ofthe password database, the columns are named <CODECLASS="literal">passwd</CODE>, <CODECLASS="literal">shell</CODE>,and so on):</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">nisplus_map_open(<CODECLASS="replaceable"><I>name</I></CODE>): can not find key column <CODECLASS="replaceable"><I>colname</I></CODE>nisplus_map_open(<CODECLASS="replaceable"><I>name</I></CODE>): can not find column <CODECLASS="replaceable"><I>colname</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Text files that are used as maps must be declared with a filename thatis an absolute path (begins with a <CODECLASS="literal">/</CODE> character thus forminga fully qualified pathname), that exists, and that is a regular file.If there is a problem, one of the followingis logged (even if <CODECLASS="literal">-d38.2</CODE> is not specified):</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">text_map_open: file name requiredtext_map_open(<CODECLASS="replaceable"><I>file</I></CODE>): file name must be fully qualifiedtext_map_open(<CODECLASS="replaceable"><I>name</I></CODE>): can not stat <CODECLASS="replaceable"><I>file</I></CODE>text_map_open(<CODECLASS="replaceable"><I>name</I></CODE>): <CODECLASS="replaceable"><I>file</I></CODE> is not a file</PRE></BLOCKQUOTE></P><PCLASS="para">Text files should be syntactically correct. The delimiting character,<CODECLASS="replaceable"><I>char</I></CODE>, will print either as a single character or as the phrase<CODECLASS="literal">(whitespace)</CODE>. Note that the third line below will bereported only when the <CODECLASS="literal">-d38.2</CODE> debugging switch is used:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">text_map_open(<CODECLASS="replaceable"><I>file</I></CODE>): -k should specify a number, not <CODECLASS="replaceable"><I>badtext</I></CODE>text_map_open(<CODECLASS="replaceable"><I>file</I></CODE>): -v should specify a number, not <CODECLASS="replaceable"><I>badtext</I></CODE>text_map_open(<CODECLASS="replaceable"><I>file</I></CODE>): delimiter = <CODECLASS="replaceable"><I>char</I></CODE></PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-129">37.5.129 -d38.3</A></H3><PCLASS="refpurpose">Show passes</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <EMCLASS="emphasis">sendmail</EM> program initializes maps in passes so that itcan open a map for reading or rebuild. That is, pass 0 opens it forreading only, and passes 1 and 2 open it for updating.This gives <EMCLASS="emphasis">sendmail</EM> the opportunity to detect optional maps. The <CODECLASS="literal">-d38.3</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM>to print <CODECLASS="literal">wrong pass</CODE>every time it skips rebuilding because the pass is inappropriate:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">map_init(<CODECLASS="replaceable"><I>class</I></CODE>:<CODECLASS="replaceable"><I>name</I></CODE>, <CODECLASS="replaceable"><I>file</I></CODE>, <CODECLASS="replaceable"><I>pass</I></CODE>)  <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> from -d38.2</I>wrong pass</PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="literal">-d38.3</CODE> debugging switch also causes <EMCLASS="emphasis">sendmail</EM> to printa failure message if an <CODECLASS="literal">implicit</CODE> class map does not exist:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">impl_map_open(<CODECLASS="replaceable"><I>name</I></CODE>, <CODECLASS="replaceable"><I>file</I></CODE>, <CODECLASS="replaceable"><I>mode</I></CODE>)   <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> from -d38.2</I>no map file</PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-130">37.5.130 -d38.4</A></H3><PCLASS="refpurpose">Show result of map open</P>(useful)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">When rebuilding the aliases files, each database is opened before it isrebuilt or not. The <CODECLASS="literal">-d38.4</CODE> debugging switch shows the success orfailure of each open:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">map_init(<CODECLASS="replaceable"><I>class</I></CODE>:<CODECLASS="replaceable"><I>name</I></CODE>, <CODECLASS="replaceable"><I>file</I></CODE>, <CODECLASS="replaceable"><I>pass</I></CODE>)  <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> from -d38.2</I>     <CODECLASS="replaceable"><I>class</I></CODE>:<CODECLASS="replaceable"><I>name</I></CODE> <CODECLASS="replaceable"><I>file</I></CODE> valid <EMCLASS="emphasis">or</EM> invalid</PRE></BLOCKQUOTE></P><PCLASS="para">The status is <CODECLASS="literal">valid</CODE> if the open succeeded; otherwise, it is <CODECLASS="literal">invalid</CODE>.</P><PCLASS="para">The <CODECLASS="literal">-d38.4</CODE> debugging switch also shows each map being looked upin a <CODECLASS="literal">switch</CODE> class map (see <ACLASS="xref"HREF="ch33_08.htm#SML2-CH-33-SECT-8-17"TITLE="">Section 33.8.17, switch</A>).</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">switch_map_open(<CODECLASS="replaceable"><I>name</I></CODE>, <CODECLASS="replaceable"><I>file</I></CODE>, <CODECLASS="replaceable"><I>mode</I></CODE>)  <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> from -d38.2</I>        map_stack[<CODECLASS="replaceable"><I>index</I></CODE>] = <CODECLASS="replaceable"><I>class</I></CODE>:<CODECLASS="replaceable"><I>name</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">If the <CODECLASS="replaceable"><I>name</I></CODE> is not one that was declared in a <CODECLASS="literal">K</CODE> configurationcommand, the following error is printed:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Switch map <CODECLASS="replaceable"><I>class</I></CODE>: unknown member map <CODECLASS="replaceable"><I>name</I></CODE></PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-131">37.5.131 -d38.9</A></H3><PCLASS="refpurpose">Trace map closings and appends</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d38.9</CODE> debugging switch traces map closures for those kindof maps that can be closed:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">ndbm_map_close(<CODECLASS="replaceable"><I>name</I></CODE>, <CODECLASS="replaceable"><I>file</I></CODE>, <CODECLASS="replaceable"><I>flags</I></CODE>)db_map_close(<CODECLASS="replaceable"><I>name</I></CODE>, <CODECLASS="replaceable"><I>file</I></CODE>, <CODECLASS="replaceable"><I>flags</I></CODE>)impl_map_close(<CODECLASS="replaceable"><I>name</I></CODE>, <CODECLASS="replaceable"><I>file</I></CODE>, <CODECLASS="replaceable"><I>flags</I></CODE>)prog_map_lookup(<CODECLASS="replaceable"><I>name</I></CODE>) failed (<CODECLASS="replaceable"><I>errno</I></CODE>) - closingseq_map_close(<CODECLASS="replaceable"><I>name</I></CODE>)</PRE></BLOCKQUOTE></P><PCLASS="para">Here, the <CODECLASS="replaceable"><I>name</I></CODE> is either the name you gave to the map with the <CODECLASS="literal">K</CODE>configuration command or one assigned internally by <EMCLASS="emphasis">sendmail</EM> (like<EMCLASS="emphasis">aliases.files</EM>).The <CODECLASS="replaceable"><I>file</I></CODE> is the filename on disk that contains the database.The <CODECLASS="replaceable"><I>flags</I></CODE> describe the specific features of a map. They are printedin hexadecimal, and the meanings of the values printed are listed in<ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-TAB-13"TITLE="Flags Describing Properties of Database Maps">Table 37.14</A>.</P><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="SML2-CH-37-TAB-13">Table 37.14: Flags Describing Properties of Database Maps</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Hex</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Text</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Description</TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">00001</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">MF_VALID</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">This entry is valid.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">00002</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">MF_INCLNULL</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Include null byte in key.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">00004</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">MF_OPTIONAL</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Don't complain if map not found.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">00008</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">MF_NOFOLDCASE</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Don't fold case in keys.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">00010</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">MF_MATCHONLY</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Don't use the map value.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">00020</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">MF_OPEN</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">This entry is open.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">00040</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">MF_WRITABLE</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Open for writing.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">00080</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">MF_ALIAS</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">This is an alias file.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">00100</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">MF_TRY0NULL</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Try with no null byte.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">00200</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">MF_TRY1NULL</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Try with the null byte.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">00400</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">MF_LOCKED</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">This map is currently locked.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">00800</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">MF_ALIASWAIT</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Alias map in aliaswait state.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">01000</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">MF_IMPL_HASH</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Implicit: underlying hash database.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">02000</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">MF_IMPL_NDBM</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Implicit: underlying ndbm database.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">04000</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">MF_UNSAFEDB</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">This map is world writable.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">08000</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">MF_APPEND</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Append new entry on rebuild.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">10000</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">MF_KEEPQUOTES</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Don't dequote key before lookup.</TD></TR></TBODY></TABLE><PCLASS="para">In addition to tracing map closures, the <CODECLASS="literal">-d38.9</CODE> debugging switchtraces map appends allowed by the MF_APPEND flag (see <ACLASS="xref"HREF="ch33_03.htm#SML2-CH-33-SECT-3-4-1"TITLE="-A  append values for duplicate keys (V8.7 and above)">Section 33.3.4.1, "-A  append values for duplicate keys (V8.7 and above)"</A>) as specifiedwhen the database is declared by the <CODECLASS="literal">K</CODE> configuration command:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">ndbm_map_store append=<CODECLASS="replaceable"><I>new</I></CODE>db_map_store append=<CODECLASS="replaceable"><I>new</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here <CODECLASS="replaceable"><I>new</I></CODE> is new value appended to the old. Since this property is used for alias files, thenew and old values have a comma inserted between them.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-132">37.5.132 -d38.10</A></H3><PCLASS="refpurpose">Trace NIS search for @:@</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The NIS  alias map needs to contain a <CODECLASS="literal">@:@</CODE> entry to indicatethat it is fully updated and ready for reading. Butbecause HP-UX omits the <CODECLASS="literal">@:@</CODE>, it is useful only asa check to see whether the NIS map exists. The <CODECLASS="literal">-d38.10</CODE> debugging switchcauses the result of this check to be printed as:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">nis_map_open: yp_match(@, <CODECLASS="replaceable"><I>domain</I></CODE>, <CODECLASS="replaceable"><I>nismap</I></CODE>)</PRE></BLOCKQUOTE></P><PCLASS="para">&#13;Here, <CODECLASS="replaceable"><I>domain</I></CODE> is the NIS domain, and <CODECLASS="replaceable"><I>nismap</I></CODE>is usually <EMCLASS="emphasis">mail.aliases</EM> (but it can be redefined in yourconfiguration file; see <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-1"TITLE="">Section 34.8.1</A>).If the map is not marked as optional(see <ACLASS="xref"HREF="ch33_03.htm#SML2-CH-33-SECT-3-4-8"TITLE="-o  the database file is optional (V8.1 and above)">Section 33.3.4.8, "-o  the database file is optional (V8.1 and above)"</A>), the following error will be printed:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Cannot bind to map <CODECLASS="replaceable"><I>nismap</I></CODE> in domain <CODECLASS="replaceable"><I>domain</I></CODE>: <ICLASS="lineannotation"> reason here</I></PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="literal">-d38.10</CODE> debugging switch also traces the NIS+ open's check for a validtable.</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">nisplus_map_open: <CODECLASS="replaceable"><I>nisplusmap.domain</I></CODE> is not a table</PRE></BLOCKQUOTE></P><PCLASS="para">Essentially, this says that the NIS+ map <CODECLASS="replaceable"><I>nisplusmap</I></CODE> (in the domain shown) does not exist. The error is printedeven if the <CODECLASS="literal">-o</CODE> (optional) database switch (see <ACLASS="xref"HREF="ch33_03.htm#SML2-CH-33-SECT-3-4-8"TITLE="-o  the database file is optional (V8.1 and above)">Section 33.3.4.8</A>) is missing.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-133">37.5.133 -d38.12</A></H3><PCLASS="refpurpose">Trace map stores</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d38.12</CODE> debugging switch shows values being stored in mapsthat support updates.</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">db_map_store(<CODECLASS="replaceable"><I>name</I></CODE>, <CODECLASS="replaceable"><I>key</I></CODE>, <CODECLASS="replaceable"><I>value</I></CODE>)ndbm_map_store(<CODECLASS="replaceable"><I>name</I></CODE>, <CODECLASS="replaceable"><I>key</I></CODE>, <CODECLASS="replaceable"><I>value</I></CODE>)seq_map_store(<CODECLASS="replaceable"><I>name</I></CODE>, <CODECLASS="replaceable"><I>key</I></CODE>, <CODECLASS="replaceable"><I>value</I></CODE>)</PRE></BLOCKQUOTE></P><PCLASS="para">Here, the <CODECLASS="replaceable"><I>name</I></CODE> is either the name you gave to the map with the <CODECLASS="literal">K</CODE>configuration command or the <CODECLASS="replaceable"><I>name</I></CODE> assigned internally by <EMCLASS="emphasis">sendmail</EM> (like<EMCLASS="emphasis">aliases.files</EM>).The <CODECLASS="replaceable"><I>key</I></CODE> is the key for which the new value is being stored,and the <CODECLASS="replaceable"><I>value</I></CODE> is the value for that key.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-134">37.5.134 -d38.19</A></H3><PCLASS="refpurpose">Trace switch map finds</P>(useful)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">A switched map is one that, either as the result of a service-switch file orbecause of <EMCLASS="emphasis">sendmail</EM>'s internal logic, causes lookups to followa select path. For example, Sun's Solaris 2 <EMCLASS="emphasis">nsswitch.conf</EM> mightspecify that aliases be looked up in the order <EMCLASS="emphasis">files</EM>, then <EMCLASS="emphasis">nis</EM>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">switch_map_open(<CODECLASS="replaceable"><I>name</I></CODE>, <CODECLASS="replaceable"><I>file</I></CODE>, <CODECLASS="replaceable"><I>mode</I></CODE>)  <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> from -d38.2</I>switch_map_find =&gt; <CODECLASS="replaceable"><I>nmaps</I></CODE>                <CODECLASS="replaceable"><I>maptype</I></CODE>                ...</PRE></BLOCKQUOTE></P><PCLASS="para">First the number of maps found is printed with <CODECLASS="replaceable"><I>nmaps</I></CODE>, then eachtype of map found in the list is printed. Each is a class name, such as<EMCLASS="emphasis">files</EM>, or <EMCLASS="emphasis">nis</EM>.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-135">37.5.135 -d38.20</A></H3><PCLASS="refpurpose">Trace map lookups</P>(useful)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The -d38.20 debugging switch traces many different map lookups.The <EMCLASS="emphasis">getcanonname</EM>() routine looks up a hostname and triesto canonify it:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">getcanonname(<CODECLASS="replaceable"><I>host</I></CODE>), trying <CODECLASS="replaceable"><I>maptype</I></CODE>getcanonname(<CODECLASS="replaceable"><I>host</I></CODE>), foundgetcanonname(<CODECLASS="replaceable"><I>host</I></CODE>), failed, stat=<CODECLASS="replaceable"><I>error</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>host</I></CODE> is the hostname that is being looked up, and <CODECLASS="replaceable"><I>maptype</I></CODE>is one of <EMCLASS="emphasis">files</EM>, <EMCLASS="emphasis">nis</EM>, <EMCLASS="emphasis">nisplus</EM>, <EMCLASS="emphasis">dns</EM>, or <EMCLASS="emphasis">netinfo</EM>.If the canonical name is not found, the <CODECLASS="replaceable"><I>error</I></CODE> shows one of theerrors listed in <EMCLASS="emphasis">&lt;sysexits.h&gt;</EM>.The process of canonifying the name is handled by calling specialsubroutines based on the <CODECLASS="replaceable"><I>maptype</I></CODE>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">text_getcanonname(<CODECLASS="replaceable"><I>host</I></CODE>)				<ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> maptype is files</I>nis_getcanonname(<CODECLASS="replaceable"><I>host</I></CODE>)				<ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> maptype is nis</I>nisplus_getcanoname(<CODECLASS="replaceable"><I>host</I></CODE>), qbuf=<CODECLASS="replaceable"><I>query</I></CODE>		<ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> maptype is nisplus</I>dns_getcanonname(<CODECLASS="replaceable"><I>host</I></CODE>, <CODECLASS="replaceable"><I>flag</I></CODE>)			<ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> maptype is dns, printed with -d8.2</I>ni_getcanonname(<CODECLASS="replaceable"><I>host</I></CODE>)				<ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> maptype is netinfo</I></PRE></BLOCKQUOTE></P><PCLASS="para">The <EMCLASS="emphasis">nisplus_getcanoname</EM>() routine is far more verbose than the other. Inaddition to the information printed above, the <CODECLASS="literal">-d38.20</CODE> switch also prints</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">nisplus_getcanoname(<CODECLASS="replaceable"><I>host</I></CODE>), got <CODECLASS="replaceable"><I>count</I></CODE> entries, all but first ignorednisplus_getcanoname(<CODECLASS="replaceable"><I>host</I></CODE>), found in directory &quot;<CODECLASS="replaceable"><I>nisdir</I></CODE>&quot;nisplus_getcanonname(<CODECLASS="replaceable"><I>host</I></CODE>), found <CODECLASS="replaceable"><I>result</I></CODE>nisplus_getcanonname(<CODECLASS="replaceable"><I>host</I></CODE>), failed, status=<CODECLASS="replaceable"><I>nsistatus</I></CODE>, nsw_stat=<CODECLASS="replaceable"><I>errno</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">The -d38.20 debugging switch also traces general lookups in variouskinds of databases. Again note that <EMCLASS="emphasis">nisplus</EM> is more verbosethan the others:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">ndbm_map_lookup(<CODECLASS="replaceable"><I>name</I></CODE>, <CODECLASS="replaceable"><I>key</I></CODE>)db_map_lookup(<CODECLASS="replaceable"><I>name</I></CODE>, <CODECLASS="replaceable"><I>key</I></CODE>)nis_map_lookup(<CODECLASS="replaceable"><I>name</I></CODE>, <CODECLASS="replaceable"><I>key</I></CODE>)nisplus_map_lookup(<CODECLASS="replaceable"><I>name</I></CODE>, <CODECLASS="replaceable"><I>key</I></CODE>)qbuf=<CODECLASS="replaceable"><I>query</I></CODE>nisplus_map_lookup(<CODECLASS="replaceable"><I>key</I></CODE>), got <CODECLASS="replaceable"><I>count</I></CODE> entries, additional entries ignorednisplus_map_lookup(<CODECLASS="replaceable"><I>key</I></CODE>), found <CODECLASS="replaceable"><I>value</I></CODE>nisplus_map_lookup(<CODECLASS="replaceable"><I>key</I></CODE>), failedhes_map_lookup(<CODECLASS="replaceable"><I>name</I></CODE>, <CODECLASS="replaceable"><I>key</I></CODE>)ni_map_lookup(<CODECLASS="replaceable"><I>name</I></CODE>, <CODECLASS="replaceable"><I>key</I></CODE>)stab_lookup(<CODECLASS="replaceable"><I>name</I></CODE>, <CODECLASS="replaceable"><I>key</I></CODE>)impl_map_lookup(<CODECLASS="replaceable"><I>name</I></CODE>, <CODECLASS="replaceable"><I>key</I></CODE>)user_map_lookup(<CODECLASS="replaceable"><I>name</I></CODE>, <CODECLASS="replaceable"><I>key</I></CODE>)prog_map_lookup(<CODECLASS="replaceable"><I>name</I></CODE>, <CODECLASS="replaceable"><I>key</I></CODE>)prog_map_lookup(<CODECLASS="replaceable"><I>name</I></CODE>): empty answerseq_map_lookup(<CODECLASS="replaceable"><I>name</I></CODE>, <CODECLASS="replaceable"><I>key</I></CODE>)</PRE></BLOCKQUOTE></P><PCLASS="para">Here, the <CODECLASS="replaceable"><I>name</I></CODE> is either the name you gave to the map with the <CODECLASS="literal">K</CODE>configuration command or one assigned internally by <EMCLASS="emphasis">sendmail</EM> (such as<EMCLASS="emphasis">aliases.files</EM>). The <CODECLASS="replaceable"><I>key</I></CODE> is the item being looked up. The<CODECLASS="replaceable"><I>file</I></CODE> is the pathname of the file that contains the database.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-136">37.5.136 -d38.44</A></H3><PCLASS="refpurpose">Show nis-getcanonname() record</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d38.20</CODE> debugging switch described above prints the <EMCLASS="emphasis">nis</EM> lookup of the canonicalhostname. This <CODECLASS="literal">-d38.44</CODE> debugging switch prints the result of that lookup:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">nis_getcanonname(<CODECLASS="replaceable"><I>host</I></CODE>)          <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> from -d38.20</I>got record `<CODECLASS="replaceable"><I>result</I></CODE>\'</PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-137">37.5.137 -d39.1</A></H3><PCLASS="refpurpose">Display %digit database mapping</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">When the RHS of a rule matches an entry in a database map with <CODECLASS="literal">$(</CODE>and <CODECLASS="literal">$)</CODE>, that entry replaces the key. If the entry contains<CODECLASS="literal">%</CODE><CODECLASS="replaceable"><I>digit</I></CODE> literals, they are replaced by corresponding <CODECLASS="literal">$@</CODE> values in the RHS (see <ACLASS="xref"HREF="ch33_04.htm#SML2-CH-33-SECT-4-2"TITLE="Specify Numbered Substitution with $@">Section 33.4.2, "Specify Numbered Substitution with $@"</A>).</P><PCLASS="para">The <CODECLASS="literal">-d39.1</CODE> (a.k.a. <CODECLASS="literal">-d39</CODE>) debugging switch causes <EMCLASS="emphasis">sendmail</EM> to printthe entry and any replacement values:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">map_rewrite(<CODECLASS="replaceable"><I>entry</I></CODE>), av =       <CODECLASS="replaceable"><I>value1</I></CODE>       <CODECLASS="replaceable"><I>value2</I></CODE>       <CODECLASS="replaceable"><I>...</I></CODE><ICLASS="lineannotation">etc</I></PRE></BLOCKQUOTE></P><PCLASS="para">After the RHS is rewritten (after all the <CODECLASS="literal">$@</CODE> values havereplaced all the <CODECLASS="literal">%</CODE><CODECLASS="replaceable"><I>digit</I></CODE> literals), <EMCLASS="emphasis">sendmail</EM> prints the result:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">map_rewrite =&gt; <ICLASS="lineannotation">rewritten RHS here</I></PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-138">37.5.138 -d40.1</A></H3><PCLASS="refpurpose">Trace processing of the queue</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d40.1</CODE> (a.k.a. <CODECLASS="literal">-d40</CODE>) debugging switch traces the placingof a mail message into the queue and the processing ofqueued files.</P><PCLASS="para">When a mail message is placed into the queue, its <CODECLASS="literal">qf</CODE>file is written as a <CODECLASS="literal">tf</CODE> temporary file; then that temporaryfile is closed and renamed to be the <CODECLASS="literal">qf</CODE> file. The <CODECLASS="literal">-d40.1</CODE>debugging switch causes <EMCLASS="emphasis">sendmail</EM> to announcethat it is beginning that process by printing the queued message'sidentifier:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">&gt;&gt;&gt;&gt;&gt; queueing <CODECLASS="replaceable"><I>qid</I></CODE>(new id) &gt;&gt;&gt;&gt;&gt; queueing <ICLASS="lineannotation"> for each recipient, output of printaddr</I>()<ICLASS="lineannotation"> here (see <ACLASS="xref"HREF="ch37_03.htm#SML2-CH-37-SECT-3-1"TITLE="The Output Produced by printaddr()">Section 37.3.1</A>)</I>&lt;&lt;&lt;&lt;&lt; done queueing <CODECLASS="replaceable"><I>qid</I></CODE> &lt;&lt;&lt;&lt;&lt;</PRE></BLOCKQUOTE></P><PCLASS="para">First, the queue identifier is printed (<CODECLASS="replaceable"><I>qid</I></CODE>). If thisidentifier is brand-new, the phrase &quot;<CODECLASS="literal">(new id)</CODE>&quot; is printed.Next, <EMCLASS="emphasis">sendmail</EM> prints complete information about each recipientfor the message using the <EMCLASS="emphasis">printaddr</EM>() routine.Finally, <CODECLASS="literal">done queueing</CODE> is printed, and the queuingof the <CODECLASS="replaceable"><I>qid</I></CODE> item is finished.</P><PCLASS="para">When <EMCLASS="emphasis">sendmail</EM> processes files in the queue, it first prereadsall the <CODECLASS="literal">qf</CODE> files and sorts the jobs by priority.After the list has been sorted, the <CODECLASS="literal">-d40.1</CODE> debuggingswitch causes <EMCLASS="emphasis">sendmail</EM> to print that list, onemessage per line, in the following format:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"><CODECLASS="replaceable"><I>qfname</I></CODE>: pri=<CODECLASS="replaceable"><I>priority</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>qfname</I></CODE> is the basename of the <CODECLASS="literal">qf</CODE> file, and<CODECLASS="replaceable"><I>priority</I></CODE> is the current priority of each message(see <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-53"TITLE="">Section 34.8.53, RecipientFactor (y)</A>).After the sorted list of messages has been processed, and if thereare any messages in that list, <EMCLASS="emphasis">sendmail</EM> attempts todeliver each of the messages in the order in whichit appears in the list.The <CODECLASS="literal">-d40.1</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM>to print the following line of information for each message processed:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">dowork: (<CODECLASS="replaceable"><I>qfname</I></CODE>)</PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-139">37.5.139 -d40.3</A></H3><PCLASS="refpurpose">Show envelope flags</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d40.3</CODE> debugging switch causes the envelope flags foreach message to be printed as it is queued:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">&gt;&gt;&gt;&gt;&gt; queueing <CODECLASS="replaceable"><I>qid</I></CODE>(new id) &gt;&gt;&gt;&gt;&gt; <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> from -d40.1</I>  e_flags= <ICLASS="lineannotation"> output of printenvflags</I>()<ICLASS="lineannotation"> here</I></PRE></BLOCKQUOTE></P><PCLASS="para">The envelope flags aredescribed in <ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-TAB-2"TITLE="Hexadecimal Envelope Flags">Table 37.3</A> in <ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-12"TITLE="">Section 37.5.12</A>. </P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-140">37.5.140 -d40.4</A></H3><PCLASS="refpurpose">Show qf file lines as they are read</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">qf</CODE> file is composed of individual lines of information (see <ACLASS="xref"HREF="ch23_09.htm#SML2-CH-23-SECT-9-11"TITLE="">Section 23.9.11, P line</A>).The <CODECLASS="literal">-d40.4</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM>to print each of those lines as it is read:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">+++++ <CODECLASS="replaceable"><I>X</I></CODE>text</PRE></BLOCKQUOTE></P><PCLASS="para">Each line begins with five plus characters. The <CODECLASS="literal">qf</CODE> file's<EMCLASS="emphasis">key</EM> letter (here, <CODECLASS="replaceable"><I>X</I></CODE>) follows, then the rest of the <CODECLASS="replaceable"><I>text</I></CODE>that made up that line. In the <CODECLASS="literal">qf</CODE> file, indented lines(lines that begin with a space or tab character) that immediatelyfollow the key line are appended to that key line.Those joined lines are printed after they are joined.Note that the lines of the <CODECLASS="literal">qf</CODE> file are printed before they are processedby <EMCLASS="emphasis">sendmail</EM>. An error in a line is printed afterthe line is printed.</P><PCLASS="para">If the queue file could not be read,the <CODECLASS="literal">-d40.4</CODE> debugging switch instead causes <EMCLASS="emphasis">sendmail</EM>to print this error:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">readqf(<CODECLASS="replaceable"><I>qid</I></CODE>) failed</PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>qid</I></CODE> is the queue identifier for the message.Note that reading can legitimately fail if the queue file is locked.Use <CODECLASS="literal">-d40.8</CODE> (described below) to see the exact reason forfailure.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-141">37.5.141 -d40.8</A></H3><PCLASS="refpurpose">Show reasons for failure</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d40.8</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM> to printthe reason it could not process a message's <CODECLASS="literal">qf</CODE> file.One possibility is:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">readqf(<CODECLASS="replaceable"><I>qfname</I></CODE>): fopen failure (<ICLASS="lineannotation">error text here</I>)</PRE></BLOCKQUOTE></P><PCLASS="para">If the failure was caused by anything other than the file's nonexistence,the following is also logged:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">readqf: no control file <CODECLASS="replaceable"><I>qfname</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">If the <CODECLASS="literal">qf</CODE> file could not be readbecause it is locked by another incantation of <EMCLASS="emphasis">sendmail</EM> (a valid reason),the <CODECLASS="literal">-d40.8</CODE> debugging switch prints:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"><CODECLASS="replaceable"><I>qid</I></CODE>: locked</PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>qid</I></CODE> is the identifier portion of the <CODECLASS="literal">qf</CODE> file.If the log level is set to greater than 19(see the <CODECLASS="literal">LogLevel</CODE> (<CODECLASS="literal">L</CODE>) option, <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-33"TITLE="">Section 34.8.33, LogLevel (L)</A>),the above message will also be logged.</P><PCLASS="para">For security the <EMCLASS="emphasis">sendmail</EM> program <EMCLASS="emphasis">fstat</EM>(2)'s the <CODECLASS="literal">qf</CODE>file after it is open to make sure it cannot be fooled by arace condition.  If that <EMCLASS="emphasis">fstat</EM>(2) fails, the following isprinted if the <CODECLASS="literal">-d40.8</CODE> debugging switch was specified:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">readqf(<CODECLASS="replaceable"><I>qid</I></CODE>): fstat failure (<ICLASS="lineannotation">error text here</I>)</PRE></BLOCKQUOTE></P><PCLASS="para">If the <CODECLASS="literal">qf</CODE> file is owned by someone other than the effective<EMCLASS="emphasis">uid</EM> of <EMCLASS="emphasis">sendmail</EM>, the <CODECLASS="literal">qf</CODE> file will be renamed intoa <CODECLASS="literal">Qf</CODE> file (see <ACLASS="xref"HREF="ch23_03.htm"TITLE="A Bogus qf File (V8 only): Qf">Section 23.3, "A Bogus qf File (V8 only): Qf"</A>).If this <CODECLASS="literal">-d40.8</CODE> debugging switch was specified, the following message will also be printed:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">readqf(<CODECLASS="replaceable"><I>qid</I></CODE>): bogus file</PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="literal">MinQueueAge</CODE> option (see <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-41"TITLE="">Section 34.8.41, MinQueueAge</A>) determines the intervalbetween queue runs for any given file. If a <CODECLASS="literal">qf</CODE> file was notlast run at least <CODECLASS="literal">MinQueueAge</CODE> minutes ago, it is skippedand the <CODECLASS="literal">-d40.8</CODE> debugging switch causes the following message to be printed:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"><CODECLASS="replaceable"><I>qid</I></CODE>: too young (<CODECLASS="replaceable"><I>howlong</I></CODE>)</PRE></BLOCKQUOTE></P><PCLASS="para">If the log level is set to greater than 19(see the <CODECLASS="literal">LogLevel</CODE> (<CODECLASS="literal">L</CODE>) option, <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-33"TITLE="">Section 34.8.33</A>),the above message will also be logged.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-142">37.5.142 -d40.9</A></H3><PCLASS="refpurpose">Show qf and lock file descriptors</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">After <EMCLASS="emphasis">sendmail</EM> has opened the <CODECLASS="literal">qf</CODE> file (with <CODECLASS="literal">-d40.1</CODE>)and printed the envelope flags (with <CODECLASS="literal">-d40.3</CODE>), this <CODECLASS="literal">-d40.9</CODE>debugging switch will cause the file descriptors for the <CODECLASS="literal">qf</CODE> fileand its corresponding lock file to be dumped:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">&gt;&gt;&gt;&gt;&gt; queueing <CODECLASS="replaceable"><I>qid</I></CODE>(new id) &gt;&gt;&gt;&gt;&gt; <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> from -d40.1</I> e_flags=                       <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> from -d40.3</I> tfp= <ICLASS="lineannotation"> output of dumpfd</I>()<ICLASS="lineannotation"> here</I> lockfp= <ICLASS="lineannotation"> output of dumpfd</I>()<ICLASS="lineannotation"> here</I></PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="literal">e_flags</CODE> aredescribed in <ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-TAB-2"TITLE="Hexadecimal Envelope Flags">Table 37.3</A> of <ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-12"TITLE="">Section 37.5.12</A>.Here, <CODECLASS="literal">tfp=</CODE> shows the file descriptors for the <CODECLASS="literal">qf</CODE> file,and <CODECLASS="literal">lockfp=</CODE> shows the descriptors for the lock. See<CODECLASS="literal">-d2.9</CODE> (<ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-13"TITLE="">Section 37.5.13</A>) for a description ofoutput of dumpfd().</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-143">37.5.143 -d40.32</A></H3><PCLASS="refpurpose">Dump the send queue</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d40.32</CODE> debugging switch causes <EMCLASS="emphasis"> sendmail</EM> todump the list of message recipients:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">&gt;&gt;&gt;&gt;&gt; queueing <CODECLASS="replaceable"><I>qid</I></CODE>(new id) &gt;&gt;&gt;&gt;&gt; <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> from -d40.1</I>  e_flags=                       <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> from -d40.3</I>  sendq= <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> output of printaddr</I>()) <EMCLASS="emphasis">here (see <ACLASS="xref"HREF="ch37_03.htm#SML2-CH-37-SECT-3-1"TITLE="The Output Produced by printaddr()">Section 37.3.1</A>)</EM>  tfp=                           <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> from -d40.9</I>  lockfp=                        <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> from -d40.9</I></PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-144">37.5.144 -d41.1</A></H3><PCLASS="refpurpose">Trace queue ordering</P>(useful)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d41</CODE> (a.k.a. <CODECLASS="literal">-d41</CODE>)debugging switch causes <EMCLASS="emphasis">sendmail</EM> to print its orderingof the queue. First it prints</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">orderq:        QueueLimitId = <CODECLASS="replaceable"><I>qid</I></CODE>            <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> if </I>-qI<ICLASS="lineannotation"> used</I>        QueueLimitSender = <CODECLASS="replaceable"><I>sid</I></CODE>        <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> if </I>-qS<ICLASS="lineannotation"> used</I>        QueueLimitRecipient = <CODECLASS="replaceable"><I>rid</I></CODE>     <ICLASS="lineannotation"><IMGSRC="../chars/larr.gif"ALT="&lt;-"> if </I>-qR<ICLASS="lineannotation"> used</I></PRE></BLOCKQUOTE></P><PCLASS="para">See <ACLASS="xref"HREF="ch23_06.htm#SML2-CH-23-SECT-6-2-3"TITLE="Process by identifier/recipient/sender: -q[ISR]">Section 23.6.2.3, "Process by identifier/recipient/sender: -q[ISR]"</A> for an explanation of how the <CODECLASS="literal">-qI</CODE>, <CODECLASS="literal">-qS</CODE>, and <CODECLASS="literal">-qR</CODE>command-line switches can limit the scope of a queue run. If none of them werespecified, only <CODECLASS="literal">orderq:</CODE> is printed.The <CODECLASS="literal">-d41.1</CODE> debugging switch is extremely handy for previewing theeffect of the <CODECLASS="literal">-qI</CODE>, <CODECLASS="literal">-qS</CODE>, and <CODECLASS="literal">-qR</CODE> command-line switches. Whencombined with <CODECLASS="literal">-bp</CODE> (<EMCLASS="emphasis">mailq</EM>), these switches limit the queue listingand thus preview the effect of a limited queue run:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>mailq</B></CODE>                Mail Queue (1 request)-Q-ID- -Size- ---Q-Time--- ------Sender/Recipient------MAA11111     4560 Tue Dec 31 12:37 you                                   you@here.us.edu% <CODECLASS="userinput"><B>mailq -d41.1 -qI22222</B></CODE>orderq:        QueueLimitId = 22222Mail queue is empty</PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="literal">-d41.1</CODE> debugging switch also traces the growth of the queue workinglist. Every time the limit of that list is reached, the internalroutine <EMCLASS="emphasis">grow_wlist</EM>() is called to extend the list sizeby QUEUESEGSIZE (where QUEUESEGSIZE is described in <ACLASS="xref"HREF="ch18_08.htm#SML2-CH-18-SECT-8-38"TITLE="">Section 18.8.38, QUEUESEGSIZE</A>).</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">grow_wlist: WorkListSize=<CODECLASS="replaceable"><I>current</I></CODE>grow_wlist: WorkListSize now <CODECLASS="replaceable"><I>newsize</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">If the log level is set to greater than 1(see the <CODECLASS="literal">LogLevel</CODE> (<CODECLASS="literal">L</CODE>) option, <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-33"TITLE="">Section 34.8.33</A>),the following is also logged each time the list size grows:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">grew WorkList for <CODECLASS="replaceable"><I>qdirectory</I></CODE> to <CODECLASS="replaceable"><I>newsize</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">If the size could not be increased (because the program reachedthe limit of available memory) and if the <CODECLASS="literal">LogLevel</CODE> (<CODECLASS="literal">L</CODE>) optionis greater than 0, <EMCLASS="emphasis">sendmail</EM> will log this error at LOG_ALERT:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">FAILED to grow WorkList for <CODECLASS="replaceable"><I>qdirectory</I></CODE> to <CODECLASS="replaceable"><I>newsize</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">This message will repeat until there are no more queue entriesto process after the limit is received. However, all the files that arealready in the work list will be processed, so presumably the nextrun will catch the failed messages.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-145">37.5.145 -d41.2</A></H3><PCLASS="refpurpose">Cannot open qf</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">Ordinarily, <EMCLASS="emphasis">sendmail</EM> is silent about failures to open a <CODECLASS="literal">qf</CODE>file, but the <CODECLASS="literal">-d41.2</CODE> debuggingswitch causes it to print the reason the open failed:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">orderq: cannot open <CODECLASS="replaceable"><I>qfname</I></CODE> (<ICLASS="lineannotation">reason for failure here</I>)</PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>qfname</I></CODE> is the name of the <CODECLASS="literal">qf</CODE> file that couldnot be opened.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-146">37.5.146 -d41.49</A></H3><PCLASS="refpurpose">Show excluded (skipped) queue files</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">41.49</CODE> debugging switchcauses <EMCLASS="emphasis">sendmail</EM> to display the queue files that were notincluded in the work list:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">skipping <CODECLASS="replaceable"><I>qfname</I></CODE> (<CODECLASS="replaceable"><I>bit</I></CODE>)</PRE></BLOCKQUOTE></P><PCLASS="para">Here, the <CODECLASS="replaceable"><I>bit</I></CODE> is a hexadecimal representation of therequirement that was not met. These bits are listed in<ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-TAB-14"TITLE="Bits Describing a Queue Run's Requirements">Table 37.15</A>.</P><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="SML2-CH-37-TAB-14">Table 37.15: Bits Describing a Queue Run's Requirements</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Hex</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Mnemonic</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Description</TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">1</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">NEED_P</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Priority must be high enough (required qf file line)</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">2</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">NEED_T</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Must have been in queue long enough (required qf file line)</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">4</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">NEED_R</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Match a recipient</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="literal">10</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">NEED_S</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Match a sender</TD></TR></TBODY></TABLE><PCLASS="para">Note that nothing will be printed if the message was skippedbecause its identifier did not match the <CODECLASS="literal">-qI</CODE> specification.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-147">37.5.147 -d41.50</A></H3><PCLASS="refpurpose">Show every file in the queue</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <EMCLASS="emphasis">sendmail</EM> program scans the queue directory looking forall the <CODECLASS="literal">qf</CODE> files to set up its working list. If a filedoesn't start with the letters &quot;qf,&quot; it is ordinarily silentlyskipped. The <CODECLASS="literal">-d41.50</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM>to display every single file it finds in its queue directory:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">orderq: checking <CODECLASS="replaceable"><I>file</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="literal">file</CODE> can be a directory, such as <CODECLASS="literal">..</CODE>, or a regularfile, such as a <CODECLASS="literal">df</CODE> or <CODECLASS="literal">qf</CODE> file.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-148">37.5.148 -d42.2</A></H3><PCLASS="refpurpose">Show connection checking</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">V8 <EMCLASS="emphasis">sendmail</EM> can be configured with the <CODECLASS="literal">ConnectionCacheSize</CODE> (<CODECLASS="literal">k</CODE>) option (see <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-10"TITLE="">Section 34.8.10, ConnectionCacheSize (k)</A>)to maintain open SMTP connections to a few other hosts. Before making a new SMTP connection, <EMCLASS="emphasis">sendmail</EM> checks to see if it already has one established.The <CODECLASS="literal">-d42.2</CODE>[11]debugging switch causes <EMCLASS="emphasis">sendmail</EM> to print the result of that check.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[11] Note that there is no <CODECLASS="literal">-d42.1</CODE> information.</P></BLOCKQUOTE><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">mci_get(<CODECLASS="replaceable"><I>host</I></CODE> <CODECLASS="replaceable"><I>mailer</I></CODE>): mci_state=<CODECLASS="replaceable"><I>state</I></CODE>, _flags=<CODECLASS="replaceable"><I>flag</I></CODE>, _exitstat= <CODECLASS="replaceable"><I>stat</I></CODE>, _errno=<CODECLASS="replaceable"><I>err</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here, the <CODECLASS="replaceable"><I>host</I></CODE> is the name of the host to which the connection is tobe made, and the <CODECLASS="replaceable"><I>mailer</I></CODE> is the symbolic name of the delivery agent.The <CODECLASS="replaceable"><I>state</I></CODE> is the status of the current SMTP connection (if thereis one) as shown in<ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-TAB-15"TITLE="mci_get() Connection States">Table 37.16</A>.</P><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="SML2-CH-37-TAB-15">Table 37.16: mci_get() Connection States</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">State</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Mnemonic</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Description</TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">MCIS_CLOSED</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">No traffic on this connection</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">1</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">MCIS_OPENING</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Sending initial protocol</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">2</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">MCIS_OPEN</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Connection is open</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">3</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">MCIS_ACTIVE</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Message being sent</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">4</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">MCIS_QUITING</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Running SMTP quit protocol</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">5</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">MCIS_SSD</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">SMTP service shutting down</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">6</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">MCIS_ERROR</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">I/O error on connection</TD></TR></TBODY></TABLE><PCLASS="para">The <CODECLASS="replaceable"><I>flag</I></CODE> describes the overall status of the connection. It canhave one or more values from those shown in<ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-TAB-16"TITLE="mci_get() Status Flags">Table 37.17</A>where those values are OR'd together.</P><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="SML2-CH-37-TAB-16">Table 37.17: mci_get() Status Flags</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Flag</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Mnemonic</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Description</TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0x0001</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">MCIF_VALID</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">If set, this entry is valid</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0x0002</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">MCIF_TEMP</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">If set, don't cache this connection</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0x0004</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">MCIF_CACHED</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">If set, connection is currently in open cache</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0x0008</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">MCIF_ESMTP</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">This host speaks ESMTP</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0x0010</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">MCIF_EXPN</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">EXPN command supported</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0x0020</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">MCIF_SIZE</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">SIZE option supported</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0x0040</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">MCIF_8BITMIME</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">BODY=8BITMIME supported</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0x0080</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">MCIF_7BIT</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Strip this message to 7 bits</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0x0100</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">MCIF_MULTSTAT</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">MAIL11V3, handles MULT status</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0x0200</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">MCIF_INHEADER</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Currently outputting header</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0x0400</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">MCIF_CVT8TO7</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Convert from 8 to 7 bits</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0x0800</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">MCIF_DSN</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">DSN extension supported</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0x1000</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">MCIF_8BITOK</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Okay to send 8 bit characters</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0x2000</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">MCIF_CVT7TO8</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Convert from 7 to 8 bits</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0x4000</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">MCIF_INMIME</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Currently reading MIME header</TD></TR></TBODY></TABLE><PCLASS="para">The <CODECLASS="replaceable"><I>stat</I></CODE> is the exit status of the last delivered mail messageto this connection. It is one of the values defined in <EMCLASS="emphasis">&lt;sysexits.h&gt;</EM>.The <CODECLASS="replaceable"><I>err</I></CODE> is the value of the last system error (if any), asdefined in <EMCLASS="emphasis">&lt;errno.h&gt;</EM>.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-149">37.5.149 -d42.5</A></H3><PCLASS="refpurpose">Trace caching and uncaching connections</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d42.5</CODE> debugging switch shows connections being cached andfreed:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">mci_cache: caching <CODECLASS="replaceable"><I>addr</I></CODE> (<CODECLASS="replaceable"><I>host</I></CODE>) in slot <CODECLASS="replaceable"><I>slot</I></CODE>mci_uncache: uncaching <CODECLASS="replaceable"><I>addr</I></CODE> (<CODECLASS="replaceable"><I>host</I></CODE>) from slot <CODECLASS="replaceable"><I>slot</I></CODE> (<CODECLASS="replaceable"><I>doquit</I></CODE>)</PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>addr</I></CODE> is the address in memory of the C language structure(<EMCLASS="emphasis">struct mailer_con_info</EM> defined in <EMCLASS="emphasis">sendmail.h</EM>) that definesthe current (or about to be made) connection. The <CODECLASS="replaceable"><I>host</I></CODE>is the name of the host to which the connection is to be made.The <CODECLASS="replaceable"><I>slot</I></CODE> is an index into the array of structures that contain the connection information. For uncaching, the <CODECLASS="replaceable"><I>doquit</I></CODE>is a Boolean that tells <EMCLASS="emphasis">sendmail</EM> to close the connection ifit is nonzero.</P><PCLASS="para">The <CODECLASS="literal">-d91.100</CODE> debugging switch produces information identical to theabove but logs its output at LOG_DEBUG instead of printing it:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"><CODECLASS="replaceable"><I>qid</I></CODE>: mci_cache: caching <CODECLASS="replaceable"><I>addr</I></CODE> (<CODECLASS="replaceable"><I>host</I></CODE>) in slot <CODECLASS="replaceable"><I>slot</I></CODE><CODECLASS="replaceable"><I>qid</I></CODE>: mci_uncache: uncaching <CODECLASS="replaceable"><I>addr</I></CODE> (<CODECLASS="replaceable"><I>host</I></CODE>) from slot <CODECLASS="replaceable"><I>slot</I></CODE> (<CODECLASS="replaceable"><I>doquit</I></CODE>)</PRE></BLOCKQUOTE></P><PCLASS="para">Note that each line is prefixed by the queue identifierfor the message (<CODECLASS="replaceable"><I>qid</I></CODE>). The <CODECLASS="literal">-d91.100</CODE> debugging switch is especiallyhandy for monitoring caching when running <EMCLASS="emphasis">sendmail</EM> as a daemon.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-150">37.5.150 -d43.1</A></H3><PCLASS="refpurpose">Trace MIME conversions</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">V8.7 <EMCLASS="emphasis">sendmail</EM> can convert 8-bit MIME to 7 bits.The <CODECLASS="literal">-d43.1</CODE> (a.k.a. <CODECLASS="literal">-d43</CODE>) debugging switch traces this process.</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">mime8to7: flags = <CODECLASS="replaceable"><I>mflags</I></CODE>, boundaries = <ICLASS="lineannotation"> boundaries printed here</I></PRE></BLOCKQUOTE></P><PCLASS="para">Here, the internal <EMCLASS="emphasis">mime8to7</EM>() routine has been called to do theconversion. The <CODECLASS="replaceable"><I>mflags</I></CODE> are printed in hexadecimal, and aredescribed in<ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-TAB-17"TITLE="Conversion Flags for mime8to7()">Table 37.18</A>.</P><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="SML2-CH-37-TAB-17">Table 37.18: Conversion Flags for mime8to7()</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Hex</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Mnemonic</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Description</TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0x00</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">M87F_OUTER</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">This is the outer context</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0x01</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">M87F_NO8BIT</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Can't have 8-bit in this section</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0x02</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">M87F_DIGEST</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Currently processing a multipart digest</TD></TR></TBODY></TABLE><PCLASS="para">&#13;The <CODECLASS="replaceable"><I>boundaries</I></CODE> is either <CODECLASS="literal">&lt;none&gt;</CODE> or a list of the boundariesfound in the message.In multipart messages the <CODECLASS="literal">-d43.1</CODE> debugging switch causes each boundaryto be printed as it is found:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">mime8to7: multi part boundary <ICLASS="lineannotation">boundary printed here</I></PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-151">37.5.151 -d43.3</A></H3><PCLASS="refpurpose">See the final MIME boundary name</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d43.3</CODE> debugging switch is used to see thefinal MIME boundary name that is selected:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">mime8to7=&gt;<CODECLASS="replaceable"><I>boundary</I></CODE> (multipart)mime8to7=&gt;<CODECLASS="replaceable"><I>boundary</I></CODE> (basic)</PRE></BLOCKQUOTE></P><PCLASS="para">Each line is prefixed with three tabs.</P><PCLASS="para">The <CODECLASS="literal">-d43.3</CODE> debugging switch is also used to trace7- to 8-bit conversion. If a delivery agent has the <CODECLASS="literal">F=9</CODE>flag set (see <ACLASS="xref"HREF="ch30_08.htm#SML2-CH-30-SECT-8-6"TITLE="">Section 30.8.6, F=9</A>) and if the message hasa <CODECLASS="literal">Content-Transfer-Encoding:</CODE> header that specifies Base64or Quoted-Printable, <EMCLASS="emphasis">sendmail</EM> will attempt to convertit from its encoded 7-bit form back into 8-bit form:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">mime7to8 =&gt; <ICLASS="lineannotation">base64 or quoted-printable</I>  to 8bit done</PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-152">37.5.152 -d43.5</A></H3><PCLASS="refpurpose">Watch search for boundaries</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d43.5</CODE> debugging switch allows you to watch the searchfor boundaries. First each line read is printed:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">mimeboundary: line=&quot;<ICLASS="lineannotation">line is printed here</I>&quot;...                                                         <ICLASS="lineannotation"><IMGSRC="../chars/uarr.gif"ALT="-^"></I>                                                      <ICLASS="lineannotation">boundary, if found, printed here</I></PRE></BLOCKQUOTE></P><PCLASS="para">Then, if the line contained a valid MIME boundary, thefound boundary is printed at the end of the preceding.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-153">37.5.153 -d43.8</A></H3><PCLASS="refpurpose">Show the calculations</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <EMCLASS="emphasis">sendmail</EM> program determines how to convert the MIME messageby examining the first eighth of the file. If the firsteighth of the total number of characters in the file have the high bit set, conversionwill be with Base64; otherwise, it will be with Quoted-Printable(see <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-22"TITLE="">Section 34.8.22, EightBitMode (8)</A>).If the message is marked as binary, it is always convertedwith Base64.The <CODECLASS="literal">-d43.8</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM> to printthe result of this calculation:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">mime8to7: <CODECLASS="replaceable"><I>hcount</I></CODE> high bit(s) in <CODECLASS="replaceable"><I>bcount</I></CODE> byte(s), cte=<CODECLASS="replaceable"><I>type</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="literal">cte=</CODE> is either <CODECLASS="literal">[none]</CODE> or the content-transfer-encodingtype, such as <CODECLASS="literal">binary</CODE>.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-154">37.5.154 -d43.35</A></H3><PCLASS="refpurpose">Show boundary lines as emitted</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-43.35</CODE> debugging switch causes each new boundary lineto be printed as it is inserted into the message:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">...-<ICLASS="lineannotation">mid-boundary here</I>...-<ICLASS="lineannotation">end boundary here</I>-</PRE></BLOCKQUOTE></P><PCLASS="para">The midboundary marks begin with a <CODECLASS="literal">-</CODE>. The ending-boundarymark begins and ends with a <CODECLASS="literal">-</CODE>.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-155">37.5.155 -d43.36</A></H3><PCLASS="refpurpose">Show content transfer encoding</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-43.36</CODE> debugging switch causes the encoding headerto be printed as it is added to the message:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">...Content-Transfer-Encoding: <ICLASS="lineannotation"> type of encoding here</I></PRE></BLOCKQUOTE></P><PCLASS="para">The type of encoding will either be the original as printedwith <CODECLASS="literal">cte=</CODE> in <CODECLASS="literal">-d43.8</CODE> above or Base64or Quoted-Printable.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-156">37.5.156 -d43.40</A></H3><PCLASS="refpurpose">Show parse of Content-Type: header</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-43.40</CODE> debugging switch causesthe contents of the parsed <CODECLASS="literal">Content-Type:</CODE> header tobe displayed.</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">pvp[<CODECLASS="replaceable"><I>n</I></CODE>] = &quot;<CODECLASS="replaceable"><I>item</I></CODE>&quot;</PRE></BLOCKQUOTE></P><PCLASS="para">For zero through <CODECLASS="replaceable"><I>n</I></CODE> items that were parsed, each is printedon its own line. </P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-157">37.5.157 -d43.99</A></H3><PCLASS="refpurpose">Print the leading/following comments</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d43.99</CODE> debugging switch tells <EMCLASS="emphasis">sendmail</EM> to print each lineof MIME commentary that precedes the leading boundary:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">...<ICLASS="lineannotation"> leading commentary here</I>...-<ICLASS="lineannotation">midboundary here</I></PRE></BLOCKQUOTE></P><PCLASS="para">and the commentary that follows the last boundary:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">...-<ICLASS="lineannotation">end boundary here</I>-...<ICLASS="lineannotation"> trailing commentary here</I></PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-158">37.5.158 -d43.100</A></H3><PCLASS="refpurpose">Mark collect() and putheader()</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d43.100</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM>to print a mark just after it has called <EMCLASS="emphasis">collect</EM>()and after it has called <EMCLASS="emphasis">putheader</EM>():</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">+++after collect+++after putheader</PRE></BLOCKQUOTE></P><PCLASS="para">The <EMCLASS="emphasis">collect</EM>() routine is traced with the <CODECLASS="literal">-d30</CODE>debugging switch, and <EMCLASS="emphasis">putheader</EM>() is traced with the <CODECLASS="literal">-d34</CODE> debugging switch.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-159">37.5.159 -d44.4</A></H3><PCLASS="refpurpose">Trace safefile()</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The V8 <EMCLASS="emphasis">sendmail</EM> program tries to be extra careful aboutfile permissions, and the key to checking them is theinternal <EMCLASS="emphasis">safefile</EM>() function.The <CODECLASS="literal">-d44.4</CODE> debugging switch[12]prints the parameters passed to the <EMCLASS="emphasis">safefile</EM>() function:</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[12] There is no <CODECLASS="literal">-d44.1</CODE> debugging information.</P></BLOCKQUOTE><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">safefile(<CODECLASS="replaceable"><I>fname</I></CODE>, uid=<CODECLASS="replaceable"><I>uid</I></CODE>, gid=<CODECLASS="replaceable"><I>gid</I></CODE>, flags=<CODECLASS="replaceable"><I>sff_flags</I></CODE>, mode=<CODECLASS="replaceable"><I>wantmode</I></CODE>)</PRE></BLOCKQUOTE></P><PCLASS="para">Here, the file named <CODECLASS="replaceable"><I>fname</I></CODE> is being checkedto determine whether the user identified by the <CODECLASS="replaceable"><I>uid</I></CODE>, with the group <CODECLASS="replaceable"><I>gid</I></CODE>,is allowed to find or use the file. The range of checking is determinedby the hexadecimal <CODECLASS="replaceable"><I>sff_flags</I></CODE>, described in<ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-TAB-18"TITLE="safefile() Access Flags">Table 37.19</A>.Where a file's permissions are required, the mode printed in <CODECLASS="replaceable"><I>wantmode</I></CODE>will be used.</P><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="SML2-CH-37-TAB-18">Table 37.19: safefile() Access Flags</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Flag</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Mnemonic</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Description</TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0x000</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">SFF_ANYFILE</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">No special restrictions</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0x001</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">SFF_MUSTOWN</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Uid must own this file</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0x002</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">SFF_NOSLINK</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">File must not be a symbolic link</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0x004</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">SFF_ROOTOK</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Okay for root to own this file</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0x008</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">SFF_RUNASREALUID</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">If no controlling user, run as real <EMCLASS="emphasis">uid</EM></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0x010</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">SFF_NOPATHCHECK</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Don't bother checking leading path</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0x020</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">SFF_SETUIDOK</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Setuid files are okay</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0x040</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">SFF_CREAT</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Okay to create the file if necessary</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0x080</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">SFF_REGONLY</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Allow regular files only</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0x100</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">SFF_OPENASROOT</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Open as root instead of as <EMCLASS="emphasis">uid</EM></TD></TR></TBODY></TABLE><PCLASS="para">If the SFF_NOPATHCHECK flag is clear (0), <EMCLASS="emphasis">sendmail</EM> examineseach component of the path leading the file. If any component of thepath is rejected, the <CODECLASS="literal">-d44.4</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM> to print:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">[dir <CODECLASS="replaceable"><I>fname</I></CODE>] <ICLASS="lineannotation"> reason for the rejection here</I></PRE></BLOCKQUOTE></P><PCLASS="para">A path component can fail because <EMCLASS="emphasis">stat</EM>(2) failed. If the <CODECLASS="replaceable"><I>uid</I></CODE> is0 for <EMCLASS="emphasis">root</EM>, a warning is logged if a component is found to be group-or world-writable:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">WARNING: writable directory <CODECLASS="replaceable"><I>fname</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">For each component in the path, <EMCLASS="emphasis">safefile</EM>() checks to verify thatthis user has permission to search the directory. If the SFF_ROOTOK flagis not set (is clear), <EMCLASS="emphasis">root</EM> (<EMCLASS="emphasis">uid</EM> 0) access is special casedin that all directory components must be world-searchable.</P><PCLASS="para">Otherwise, the path component is accepted if it is owned by the <CODECLASS="replaceable"><I>uid</I></CODE> andhas the user search bit set or if its group is the same as <CODECLASS="replaceable"><I>gid</I></CODE> andhas the group search bit set.If NO_GROUP_SET is undefined when <EMCLASS="emphasis">sendmail</EM> is compiled(see <ACLASS="xref"HREF="ch18_08.htm#SML2-CH-18-SECT-8-31"TITLE="">Section 18.8.31, NO-GROUP-SET</A>) and the <CODECLASS="literal">DontInitGroups</CODE>option (see <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-19"TITLE="">Section 34.8.19, DontInitGroups</A>) is not set,each group to which <CODECLASS="replaceable"><I>uid</I></CODE> belongs is also checked.Otherwise, the directory must be world-searchable.</P><PCLASS="para">If the <CODECLASS="replaceable"><I>fname</I></CODE> could not be checked with <EMCLASS="emphasis">stat</EM>(2), the <CODECLASS="literal">-d44.4</CODE>debugging switch causes the reason to be printed:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"><ICLASS="lineannotation"> reason for failure here</I></PRE></BLOCKQUOTE></P><PCLASS="para">If the file does not exist, it may need to be created.If so, <EMCLASS="emphasis">sendmail</EM> checks to be sure that the <CODECLASS="replaceable"><I>uid</I></CODE> has write permission.The result is printed with the <CODECLASS="literal">-d44.4</CODE> debugging switch like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">[final dir <CODECLASS="replaceable"><I>fname</I></CODE> uid <CODECLASS="replaceable"><I>uid</I></CODE> mode <CODECLASS="replaceable"><I>wantmode</I></CODE>] <ICLASS="lineannotation"> error here</I></PRE></BLOCKQUOTE></P><PCLASS="para">If the file exists and if symbolic links are supported, the file is rejected ifit is a symbolic link and if the SFF_NOSLINK flag is set. If the <CODECLASS="literal">-d44.4</CODE>debugging switch is specified, this error is printed:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">[slink mode <CODECLASS="replaceable"><I>mode</I></CODE>]    EPERM</PRE></BLOCKQUOTE></P><PCLASS="para">&#13;If the SFF_REGONLY flag is set the file must be a regular file. If it is not,it is rejected, and <CODECLASS="literal">-d44.4</CODE> causes the following to be printed:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">[non-reg mode <CODECLASS="replaceable"><I>mode</I></CODE>]    EPERM</PRE></BLOCKQUOTE></P><PCLASS="para">If <CODECLASS="replaceable"><I>wantmode</I></CODE> has the write bits set, and the existing file hasany execute bits set, the file is rejected and <CODECLASS="literal">-d44.4</CODE> causesthe following to be printed:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">[exec bits <CODECLASS="replaceable"><I>mode</I></CODE>]    EPERM</PRE></BLOCKQUOTE></P><PCLASS="para">If the file has more than one link, the file is rejected and <CODECLASS="literal">-d44.4</CODE> causes the following to be printed:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">[link count <CODECLASS="replaceable"><I>nlinks</I></CODE>]    EPERM</PRE></BLOCKQUOTE></P><PCLASS="para">If the SFF_SETUIDOK flag is specified, if the file exists,if it has the <EMCLASS="emphasis">suid</EM> bit set in the mode but no execute bits setin the mode, and if it is <EMCLASS="emphasis">not</EM> owned by <EMCLASS="emphasis">root</EM>,<EMCLASS="emphasis">sendmail</EM>performs subsequent checks under the <EMCLASS="emphasis">suid</EM> and <EMCLASS="emphasis">sgid</EM> identitiesof the existing file.A similar process occurs with the <EMCLASS="emphasis">sgid</EM> bit. <EMCLASS="emphasis">Sendmail</EM> then prints:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">[uid <CODECLASS="replaceable"><I>new_uid</I></CODE>, stat <CODECLASS="replaceable"><I>filemode</I></CODE>, mode <CODECLASS="replaceable"><I>wantmode</I></CODE>]</PRE></BLOCKQUOTE></P><PCLASS="para">If access is finally allowed, <EMCLASS="emphasis">sendmail</EM> concludes the above with:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">OK</PRE></BLOCKQUOTE></P><PCLASS="para">Otherwise, it concludes with:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">EACCES</PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-160">37.5.160 -d44.5</A></H3><PCLASS="refpurpose">Trace writable()</P>(useful)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d44.5</CODE> debugging switch displays the values passed to <EMCLASS="emphasis">sendmail</EM>'s internal <EMCLASS="emphasis">writable</EM>() routine. This routinenearly duplicates the function of the <EMCLASS="emphasis">access</EM>(3) call[13]but doesit much more safely and allows checks to be made under theidentity of the controlling user:</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[13] It is more restrictive for <EMCLASS="emphasis">root</EM>-owned files and can allowthe <EMCLASS="emphasis">suid</EM> semantics needed for delivery to files.</P></BLOCKQUOTE><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">writable(<CODECLASS="replaceable"><I>fname</I></CODE>, <CODECLASS="replaceable"><I>sff_flags</I></CODE>)</PRE></BLOCKQUOTE></P><PCLASS="para">Here, the <EMCLASS="emphasis">fname</EM> is the full pathname of the file being checked.The <CODECLASS="replaceable"><I>sff_flags</I></CODE> are documented in<ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-TAB-18"TITLE="safefile() Access Flags">Table 37.19</A>above.  Success or failure is described under <CODECLASS="literal">-d44.4</CODE>.&#13;</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-161">37.5.161 -d45.1</A></H3><PCLASS="refpurpose">Show envelope sender</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d45.1</CODE> (a.k.a. <CODECLASS="literal">-d45</CODE>) debugging switch causes <EMCLASS="emphasis">sendmail</EM> toprint the current form of the envelope sender address before it hasfully rewritten that address into its final form:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">setsender(<CODECLASS="replaceable"><I>addr</I></CODE>)</PRE></BLOCKQUOTE></P><PCLASS="para">If the <CODECLASS="replaceable"><I>addr</I></CODE> is empty (as would be the case if the senderwere being gathered from the header), <EMCLASS="emphasis">sendmail</EM> prints NULL.The final envelope sender address is placed into the<CODECLASS="literal">$f</CODE> macro. (See <ACLASS="xref"HREF="ch31_10.htm#SML2-CH-31-SECT-10-14"TITLE="">Section 31.10.14, $f</A>for a description of that macro andthe process used by <EMCLASS="emphasis">sendmail</EM> to set the sender's address.)</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-162">37.5.162 -d45.3</A></H3><PCLASS="refpurpose">Show saved domain</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">If the <CODECLASS="literal">F=C</CODE> flag (see <ACLASS="xref"HREF="ch30_08.htm#SML2-CH-30-SECT-8-15"TITLE="">Section 30.8.15</A>)is set for the delivery agentselected for the sender, <EMCLASS="emphasis">sendmail</EM> will save the domain partof the address for later use. The <CODECLASS="literal">-d45.3</CODE> causes thesaved domain part to be printed:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Saving from domain: <CODECLASS="replaceable"><I>domain</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">The domain is saved in the <EMCLASS="emphasis">e_fromdomain</EM> part of the C language structure that contains the envelope information for the sender.Later, if the <CODECLASS="literal">F=C</CODE> flag is set, this domain will be appendedto any recipient addresses that lack a domain part.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-163">37.5.163 -d45.5</A></H3><PCLASS="refpurpose">Show don't send to sender</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">Unless a message is bounced, it will not be sent to the sender.The <CODECLASS="literal">-d45.5</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM> todisplay sender information when this decision is made:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">setsender: QDONTSEND <ICLASS="lineannotation"> output of printaddr</I>()<ICLASS="lineannotation"> here (see <ACLASS="xref"HREF="ch37_03.htm#SML2-CH-37-SECT-3-1"TITLE="The Output Produced by printaddr()">Section 37.3.1</A>)</I></PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-164">37.5.164 -d46.9</A></H3><PCLASS="refpurpose">Show xf file's descriptors</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">xf</CODE> queue file (see <ACLASS="xref"HREF="ch23_02.htm#SML2-CH-23-SECT-2-7"TITLE="The Transcript File: xf">Section 23.2.7, "The Transcript File: xf"</A>)contains a record ofthe errors and other information produced by a deliveryagent. That information is used for bounced mail.The <CODECLASS="literal">-d46.9</CODE> debugging switch[14]causes <EMCLASS="emphasis">sendmail</EM> to dump the file descriptors for the opened <CODECLASS="literal">xf</CODE> file:</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[14] There is no <CODECLASS="literal">-d46.1</CODE> information.</P></BLOCKQUOTE><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">openxscript(xf<CODECLASS="replaceable"><I>qid</I></CODE>):<ICLASS="lineannotation"> output of dumpfd</I>()<ICLASS="lineannotation"> here (see <ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-13"TITLE="">Section 37.5.13</A>)</I></PRE></BLOCKQUOTE></P><PCLASS="para">If <EMCLASS="emphasis">sendmail</EM> cannot open an <CODECLASS="literal">xf</CODE> file, it logsthis warning:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Can't create transcript file xf<CODECLASS="replaceable"><I>qid</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">It then tries to open <EMCLASS="emphasis">/dev/null</EM> so that it can continuewith the delivery. If that fails, it logs the following panic messageand immediately exits:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Can't open /dev/null</PRE></BLOCKQUOTE></P><PCLASS="para">Once the file is open (or not), <EMCLASS="emphasis">sendmail</EM> turnsit into an I/O stream with a call to <EMCLASS="emphasis">fdopen</EM>(3). If thatcall fails, <EMCLASS="emphasis">sendmail</EM> logs this message and immediatelyexits:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Can't create transcript stream xf<CODECLASS="replaceable"><I>qid</I></CODE></PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-165">37.5.165 -d48.2</A></H3><PCLASS="refpurpose">Trace calls to the check- rule sets</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">Beginning with V8.8, <EMCLASS="emphasis">sendmail</EM> calls rule sets whose namesbegin with <CODECLASS="literal">check_</CODE> (see <ACLASS="xref"HREF="ch29_10.htm"TITLE="The check_... Rule Sets">Section 29.10, "The check_... Rule Sets"</A>) tofilter incoming and outgoing mail. The <CODECLASS="literal">-d48.2</CODE> debuggingswitch[15]can be used to display the workspace being passed to each suchrule set:</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[15] There is no <CODECLASS="literal">-d48.1</CODE> information.</P></BLOCKQUOTE><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">rscheck(<CODECLASS="replaceable"><I>name</I></CODE>, <CODECLASS="replaceable"><I>left</I></CODE>, <CODECLASS="replaceable"><I>right</I></CODE>)</PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="replaceable"><I>name</I></CODE> is the name of the named rule set being called.If <CODECLASS="replaceable"><I>right</I></CODE> is missing, it prints as NULL, and theworkspace passed to the rule set is:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"><CODECLASS="replaceable"><I>left</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">If <CODECLASS="replaceable"><I>right</I></CODE> is present, the workspace is:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"><CODECLASS="replaceable"><I>left </I></CODE>$| <CODECLASS="replaceable"><I>right</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here, the <CODECLASS="literal">$|</CODE> in the workspace is the <CODECLASS="literal">$|</CODE> operator.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-166">37.5.166 -d49.1</A></H3><PCLASS="refpurpose">Trace checkcompat()</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <EMCLASS="emphasis">checkcompat</EM>() routine inside <EMCLASS="emphasis">conf.c</EM>can be tuned to solve many problems (see <ACLASS="xref"HREF="ch20_01.htm#SML2-CH-20-SECT-1"TITLE="How checkcompat() Works">Section 20.1, "How checkcompat() Works"</A>).The default <CODECLASS="literal">-d49.1</CODE> (a.k.a. <CODECLASS="literal">49</CODE>)debugging switch inside it prints the arguments that were passed to it:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">checkcompat(to=<CODECLASS="replaceable"><I>recipient</I></CODE>, from=<EMCLASS="emphasis">sender</EM>)</PRE></BLOCKQUOTE></P><PCLASS="para">When designing your own <EMCLASS="emphasis">checkcompat</EM>(), you shouldonly use the <CODECLASS="literal">-d49</CODE> category to trace it.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-167">37.5.167 -d50.1</A></H3><PCLASS="refpurpose">Show envelope being dropped</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">Deallocating an envelope frees that envelope's C languagestructure for future reuse. Deallocation also causes all thequeued files for that mail message to be removed (exceptas possibly prevented by the <CODECLASS="literal">-d51</CODE> debugging switch described in thenext section).  An envelope is deallocated afterits mail message has been deliveredto all recipients (including any failed deliveries).</P><PCLASS="para">The <CODECLASS="literal">-d50.1</CODE> (a.k.a. <CODECLASS="literal">-d50</CODE>) debugging switch causes <EMCLASS="emphasis">sendmail</EM> to printinformation about each envelope that is being deallocated:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">dropenvelope <EMCLASS="emphasis">loc</EM> id=<EMCLASS="emphasis">ident</EM> flags= <ICLASS="lineannotation"> output of printenvflags() here</I></PRE></BLOCKQUOTE></P><PCLASS="para">This output shows the address in memory for the envelope'sC language structure (<CODECLASS="replaceable"><I>loc</I></CODE>), the queue identifier (<CODECLASS="replaceable"><I>ident</I></CODE>,as used to name queued files), and the envelope flags as printed by <EMCLASS="emphasis">printenvflags</EM>()(see <ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-TAB-2"TITLE="Hexadecimal Envelope Flags">Table 37.3</A> in <ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-12"TITLE="">Section 37.5.12</A>).</P><PCLASS="para">Note that if the version of <EMCLASS="emphasis">sendmail</EM> is pre-8.7,a <CODECLASS="literal">Return-Receipt:</CODE> header was in the message,and delivery was to at least one local recipient,the process of deallocation also causesacknowledgment of delivery to be returned to the sender and triggerserror returns.</P><PCLASS="para">The <CODECLASS="literal">-d50.1</CODE> debugging switch also shows the <CODECLASS="literal">qf</CODE> and <CODECLASS="literal">df</CODE> filesjust before they are removed:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">===== Dropping [dq]f<CODECLASS="replaceable"><I>qid</I></CODE>... queueit=<CODECLASS="replaceable"><I>bool</I></CODE>, e_flags= <ICLASS="lineannotation"> output of printenvflags() here</I></PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-168">37.5.168 -d50.2</A></H3><PCLASS="refpurpose">Show Booleans</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d50.2</CODE> debugging switch shows the setting of three variables thatdetermine how the envelope will be treated:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">failure_return=<CODECLASS="replaceable"><I>val</I></CODE> delay_return=<CODECLASS="replaceable"><I>val</I></CODE> success_return=<CODECLASS="replaceable"><I>val</I></CODE> queueit=<CODECLASS="replaceable"><I>val</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">A 1 indicates that the variable is true, a 0 indicates that it is false.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-169">37.5.169 -d50.10</A></H3><PCLASS="refpurpose">Also show the send queue</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d50.10</CODE> debugging switch causes the current send queue to also be printed:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">sendq=<ICLASS="lineannotation"> output of printaddr</I>()<EMCLASS="emphasis"> here (see <ACLASS="xref"HREF="ch37_03.htm#SML2-CH-37-SECT-3-1"TITLE="The Output Produced by printaddr()">Section 37.3.1</A></EM>)</PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-170">37.5.170 -d51.4</A></H3><PCLASS="refpurpose">Show queue entries being unlocked</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d51.4</CODE>[16]debugging switch causes V8 <EMCLASS="emphasis">sendmail</EM> to printthe following each time an envelope is unlocked in the queue:</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[16] There is no <CODECLASS="literal">-d51.1</CODE> information.</P></BLOCKQUOTE><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">unlockqueue(<CODECLASS="replaceable"><I>qid</I></CODE>)</PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>qid</I></CODE> is the queue identifier.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-171">37.5.171 -d51.104</A></H3><PCLASS="refpurpose">Prevent unlink of xf file</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">xf</CODE> file (one of the files that form a queued mail message)holds error messages generated by a delivery agent. The last lineof text in this file ismade the value of the <CODECLASS="literal">M</CODE> line in the <CODECLASS="literal">qf</CODE> file (see <ACLASS="xref"HREF="ch23_09.htm#SML2-CH-23-SECT-9-9"TITLE="">Section 23.9.9, M line</A>).Ordinarily, the <CODECLASS="literal">xf</CODE>file is removed after that error line is saved.</P><PCLASS="para">The <CODECLASS="literal">-d51.104</CODE>debugging switch prevents <EMCLASS="emphasis">sendmail</EM> from removing the <CODECLASS="literal">xf</CODE>file.If mail continually fails, this debugging switch canbe used to save all error messages instead of just the one that isusually saved in the <CODECLASS="literal">qf</CODE> file.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-172">37.5.172 -d52.1</A></H3><PCLASS="refpurpose">Show disconnect from controlling TTY</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">When <EMCLASS="emphasis">sendmail</EM> runs as a daemon, it must disconnect itselffrom the terminal device that is used to run it. This prevents keyboardsignals from killing it and prevents it from hanging(on a dial-in line waiting for carrier detect, for example).</P><PCLASS="para">The <CODECLASS="literal">-d52.1</CODE> (a.k.a. <CODECLASS="literal">-d52</CODE>) debugging switch shows <EMCLASS="emphasis">sendmail</EM>disconnecting from the controlling terminal device:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">disconnect: In <CODECLASS="replaceable"><I>fd</I></CODE> Out <CODECLASS="replaceable"><I>fd</I></CODE>, e=<CODECLASS="replaceable"><I>addr</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">For both its input and output connections, the <CODECLASS="replaceable"><I>fd</I></CODE> is a decimalrepresentation of the file descriptor number.The <CODECLASS="replaceable"><I>addr</I></CODE> is a hexadecimal representation of the addressthat contains the envelope information.If the <CODECLASS="literal">L</CODE>logging level option is greater than 71, <EMCLASS="emphasis">sendmail</EM><EMCLASS="emphasis">syslog</EM>(3)'s the following message to show that it has disconnected:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">in background, pid=<CODECLASS="replaceable"><I>pid</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>pid</I></CODE> is the process identification number of the childprocess (the daemon).</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-173">37.5.173 -d52.100</A></H3><PCLASS="refpurpose">Prevent disconnect from controlling tty</P>(useful)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d52.100</CODE> debugging switch[17]prevents <EMCLASS="emphasis">sendmail</EM> fromdisconnecting from its controlling terminal device. To showthat it is skipping the disconnect, it prints:</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[17] This was formerly the <CODECLASS="literal">-d52.5</CODE> debugging switch.</P></BLOCKQUOTE><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">don't</PRE></BLOCKQUOTE></P><PCLASS="para">This debugging switch is useful for debugging the daemon.Note that this <CODECLASS="literal">-d52.100</CODE> prevents the detach but allows thedaemon to <EMCLASS="emphasis">fork</EM>(2). This differs from the behavior of the <CODECLASS="literal">-d99.100</CODE> debugging switch.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-174">37.5.174 -d53.99</A></H3><PCLASS="refpurpose">Trace xclose()</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">Ordinarily, files are closed silently.The <CODECLASS="literal">-d53.99</CODE>[18]debugging switchcan be used to observe file closings. Just before the file isclosed, <EMCLASS="emphasis">sendmail</EM> prints:</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[18] There is no <CODECLASS="literal">-d53.1</CODE> information.</P></BLOCKQUOTE><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">xfclose(<CODECLASS="replaceable"><I>fp</I></CODE>) <CODECLASS="replaceable"><I>what</I></CODE> <CODECLASS="replaceable"><I>file</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>fp</I></CODE> is the file pointer for the open file, printedin hexadecimal. The <CODECLASS="replaceable"><I>what</I></CODE> is an indication of the internal functionthat requires the close (such as <CODECLASS="literal">savemail</CODE> or <CODECLASS="literal">mci_uncache</CODE>).The <CODECLASS="replaceable"><I>file</I></CODE> is the name of the file to be closed.</P><PCLASS="para">If the close fails, the following is also printed:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">xfclose FAILURE: <CODECLASS="replaceable"><I>why</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>why</I></CODE> is the text corresponding to the error valuereturned by <EMCLASS="emphasis">fclose</EM>(3) (see <EMCLASS="emphasis">sys_errlist</EM>(3)).</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-175">37.5.175 -d54.1</A></H3><PCLASS="refpurpose">Show error return and output message</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The exit values that are returned by <EMCLASS="emphasis">sendmail</EM> are documented in<ACLASS="xref"HREF="ch36_05.htm"TITLE="sendmail's exit() Status">Section 36.5</A>.The <CODECLASS="literal">-d54.1</CODE> debugging switch shows the exit value beingset by the internal <EMCLASS="emphasis">syserr</EM>() routine:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">syserr: ExitStat = <CODECLASS="replaceable"><I>num</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>num</I></CODE> corresponds to the values defined in <EMCLASS="emphasis">&lt;sysexits.h&gt;</EM>.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-176">37.5.176 -d54.8</A></H3><PCLASS="refpurpose">Show message and flags</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d54.8</CODE> debugging switch causes the text of the errormessage to be printed along with the flags that control itsactual output:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">-- <CODECLASS="replaceable"><I>message</I></CODE> (hold) (held)</PRE></BLOCKQUOTE></P><PCLASS="para">If <CODECLASS="literal">(hold)</CODE> appears, it means that the <CODECLASS="replaceable"><I>message</I></CODE>will be held (stored) and not output.If <CODECLASS="literal">(held)</CODE> appears, it means that the <CODECLASS="replaceable"><I>message</I></CODE>was previously held and should not be added to the <CODECLASS="literal">xf</CODE> file.If neither is printed, the <CODECLASS="replaceable"><I>message</I></CODE> will be logged andappended to the <CODECLASS="literal">xf</CODE> file.If the message on output fails, <EMCLASS="emphasis">sendmail</EM> will attempt to log thispanic message:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"><CODECLASS="replaceable"><I>qid</I></CODE>: SYSERR: putoutmsg (<CODECLASS="replaceable"><I>host</I></CODE>): error on output channel sending &quot;<CODECLASS="replaceable"><I>message</I></CODE>&quot;: <CODECLASS="replaceable"><I>err</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">If the message was never queued, the <CODECLASS="replaceable"><I>qid</I></CODE> will print as NOQUEUE.If you are not currently connected to a <CODECLASS="replaceable"><I>host</I></CODE>, it will print as NO-HOST.The <CODECLASS="replaceable"><I>err</I></CODE> is the error that caused the message to fail (as definedin either <EMCLASS="emphasis">&lt;sys/errno.h&gt;</EM> or <EMCLASS="emphasis">sysexits.h</EM>).</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-177">37.5.177 -d55.60</A></H3><PCLASS="refpurpose">Show file locking</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <EMCLASS="emphasis">sendmail</EM> program tries to lock every file before reading or writing it.If <EMCLASS="emphasis">sendmail</EM> was compiledwith HASFLOCK defined (see <ACLASS="xref"HREF="ch18_08.htm#SML2-CH-18-SECT-8-9"TITLE="">Section 18.8.9, HAS...</A>),it uses <EMCLASS="emphasis">flock</EM>(3) tolock and unlock files. If HASFLOCK is not defined, <EMCLASS="emphasis">sendmail</EM> tries to lock and unlock with <EMCLASS="emphasis">fcntl</EM>(2).</P><PCLASS="para">The <CODECLASS="literal">-d55.60</CODE>[19]debugging switch tells <EMCLASS="emphasis">sendmail</EM> to printhow it is about to try to lock a file:</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[19] There is no <CODECLASS="literal">-d55.1</CODE> information.</P></BLOCKQUOTE><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">lockfile(<CODECLASS="replaceable"><I>filename</I></CODE>, action=<CODECLASS="replaceable"><I>set</I></CODE>, type=<CODECLASS="replaceable"><I>l_type</I></CODE>)lockfile(<CODECLASS="replaceable"><I>filename</I></CODE>, type=<CODECLASS="replaceable"><I>what</I></CODE>)</PRE></BLOCKQUOTE></P><PCLASS="para">The first form is printed if HASFLOCK is not defined. In it,<EMCLASS="emphasis">sendmail</EM> is about to use <EMCLASS="emphasis">fcntl</EM>(2) to lock the file.The <EMCLASS="emphasis">action</EM> is a decimal representation of the F_SETflag that is <EMCLASS="emphasis">fcntl</EM>(2)'s second argument. The <CODECLASS="replaceable"><I>l_type</I></CODE>is the <EMCLASS="emphasis">l_type</EM> structure member of <EMCLASS="emphasis">fcntl</EM>(2)'sthird argument (see the online manual for <EMCLASS="emphasis">fcntl</EM>(2)).</P><PCLASS="para">The second form is printed if HASFLOCK is defined so that<EMCLASS="emphasis">flock</EM>(2) will be used.In it, <CODECLASS="replaceable"><I>what</I></CODE> is the type of locking to be performed, printedin octal, as described in<ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-TAB-19"TITLE="Flags That Control File Locking">Table 37.20</A>.</P><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="SML2-CH-37-TAB-19">Table 37.20: Flags That Control File Locking</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Flag</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Mnemonic</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Description</TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">001</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">LOCK_SH</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Make it a shared lock</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">002</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">LOCK_EX</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Make it an exclusive lock</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">004</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">LOCK_NB</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Make it a nonblocking lock</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">010</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">LOCK_UN</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Unlock the file</TD></TR></TBODY></TABLE><PCLASS="para">For both forms of locking, if the file is successfully locked, the abovedebugging output is concluded with:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">SUCCESS</PRE></BLOCKQUOTE></P><PCLASS="para">Otherwise, it is concluded with:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">(<ICLASS="lineannotation">error message here</I>) FAILURE</PRE></BLOCKQUOTE></P><PCLASS="para">In this later instance, regardless of the setting of thisdebugging flag, <EMCLASS="emphasis">sendmail</EM> will also log the followingerror message:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">cannot <CODECLASS="replaceable"><I>lock</I></CODE>(<CODECLASS="replaceable"><I>filename</I></CODE>, fd=<CODECLASS="replaceable"><I>num</I></CODE>, type=<CODECLASS="replaceable"><I>what</I></CODE>, omode=<CODECLASS="replaceable"><I>octal</I></CODE>, euid=<CODECLASS="replaceable"><I>euid</I></CODE>)</PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>lock</I></CODE> is either <CODECLASS="literal">lockf</CODE> or <CODECLASS="literal">flock</CODE>. The<CODECLASS="replaceable"><I>filename</I></CODE> and <CODECLASS="replaceable"><I>fd</I></CODE> are the file name and file descriptorfor the file. The <CODECLASS="replaceable"><I>what</I></CODE> is the same as described in<ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-TAB-19"TITLE="Flags That Control File Locking">Table 37.20</A>.If F_GETFLwas defined at the system level when <EMCLASS="emphasis">sendmail</EM> was compiled, then<CODECLASS="replaceable"><I>omode</I></CODE> is an octal representation of the value returned byan <EMCLASS="emphasis">fcntl</EM>(2) F_GETFL call; otherwise, it is a -1 in octal.The <CODECLASS="replaceable"><I>euid</I></CODE> is the effective <EMCLASS="emphasis">uid</EM> under which <EMCLASS="emphasis">sendmail</EM>was running at the time.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-178">37.5.178 -d56.1</A></H3><PCLASS="refpurpose">Persistent host status tracing</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d56.1</CODE> (a.k.a. <CODECLASS="literal">-d56</CODE>) debugging switch tells <EMCLASS="emphasis">sendmail</EM>to print a record of each step it is going through when saving and updatingits persistent host status. The <CODECLASS="literal">HostStatusDirectory</CODE> option (see <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-31"TITLE="">Section 34.8.31, HostStatusDirectory</A>) specifies where and whether persistent hoststatus will be saved. Just before a status file is updated, and ifthe <CODECLASS="literal">SingleThreadDelivery</CODE> option (see <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-64"TITLE="">Section 34.8.64, SingleThreadDelivery</A>)is true, it needs to be locked:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">mci_lock_host: attempting to lock <CODECLASS="replaceable"><I>host</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>host</I></CODE> is the name of the host whose status is being savedor updated. If the hostname is empty (as in the case of an address that containsonly an RFC822 comment), one of the following errors is printed foran attempt to lock or unlock the host information:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">mci_lock_host: NULL mcimci_unlock_host: NULL mci</PRE></BLOCKQUOTE></P><PCLASS="para">After the status file is locked, <EMCLASS="emphasis">sendmail</EM> will transfer the informationfrom that file into its internal <EMCLASS="emphasis">mci</EM> structure:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">mci_load_persistent: Attempting to load persistent information for <CODECLASS="replaceable"><I>host</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Again, if the hostname is empty, this error will print:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">mci_load_persistent: NULL</PRE></BLOCKQUOTE></P><PCLASS="para">If <EMCLASS="emphasis">sendmail</EM> was unable to translate the hostname into a UNIX path,the <CODECLASS="literal">-d56.1</CODE> debugging switch causes it to print:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">mci_load_persistent: Couldn't generate host path</PRE></BLOCKQUOTE></P><PCLASS="para">If <EMCLASS="emphasis">sendmail</EM> was unable open the host status file, it prints:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">mci_load_persistent: open(<CODECLASS="replaceable"><I>filename</I></CODE>): <CODECLASS="replaceable"><I>host</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Similarly, when <EMCLASS="emphasis">sendmail</EM> needs to store or update the hostinformation, it first prints that it is doing so:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">mci_store_persistent: Storing information for <CODECLASS="replaceable"><I>host</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">If <EMCLASS="emphasis">sendmail</EM> could not open the host status file, itprints:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">mci_store_persistent: no statfile</PRE></BLOCKQUOTE></P><PCLASS="para">The internals of the status file are described inAppendix <ACLASS="xref"HREF="appb_01.htm"TITLE="Host Status File Internals">Appendix B, <CITECLASS="appendix">Host Status File Internals</CITE></A>.</P><PCLASS="para">Ordinarily, <EMCLASS="emphasis">sendmail</EM> is silent about its inability toopen status files when printing its host information withthe <EMCLASS="emphasis">hoststat</EM>(1) command (see <ACLASS="xref"HREF="ch36_01.htm#SML2-CH-36-SECT-1-1"TITLE="hoststat (V8.8 and Above)">Section 36.1.1, "hoststat (V8.8 and Above)"</A>).But if the<CODECLASS="literal">-d56.1</CODE> debugging switch is used, <EMCLASS="emphasis">sendmail</EM> will complain:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">mci_print_persistent: cannot open <CODECLASS="replaceable"><I>filename</I></CODE>: <CODECLASS="replaceable"><I>host</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">When its host information is being purged with the <EMCLASS="emphasis">purgestat</EM>(1)command (see <ACLASS="xref"HREF="ch36_01.htm#SML2-CH-36-SECT-1-4"TITLE="purgestat (V8.8 and Above)">Section 36.1.4, "purgestat (V8.8 and Above)"</A>), the <CODECLASS="literal">-d56.1</CODE> debugging switch tells <EMCLASS="emphasis">sendmail</EM> to show whatit is trying to achieve:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">mci_purge_persistent: purging <CODECLASS="replaceable"><I>path</I></CODE>mci_purge_persistent: dpurge <CODECLASS="replaceable"><I>directory</I></CODE></PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-179">37.5.179 -d56.2</A></H3><PCLASS="refpurpose">More persistent host status tracing</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d56.2</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM> to showadditional information about what it is trying to do.Just before attempting to lock a status file, it prints:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">mci_lock_host: attempting to lock <CODECLASS="replaceable"><I>host</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">&#13;If a path could not be generated from the hostname, <EMCLASS="emphasis">sendmail</EM>prints this error:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">mci_lock_host: Failed to generate host path for <CODECLASS="replaceable"><I>host</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">If <EMCLASS="emphasis">sendmail</EM> could not lock the status file, it prints:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">mci_lock_host: couldn't get lock on <CODECLASS="replaceable"><I>filename</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">When <EMCLASS="emphasis">sendmail</EM> is about to update a status file, justbefore unlocking that file, it announces that fact:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">mci_unlock_host: store prior to unlock</PRE></BLOCKQUOTE></P><PCLASS="para">The process of updating or reading a status file begins by <EMCLASS="emphasis">sendmail</EM>traversing the directory hierarchy under which that file is stored.If <EMCLASS="emphasis">sendmail</EM> is unable to <EMCLASS="emphasis">stat</EM>(2) any component of thatpath, it prints the following error:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">mci_traverse: Failed to stat <CODECLASS="replaceable"><I>component</I></CODE>: <ICLASS="lineannotation">reason for failure</I></PRE></BLOCKQUOTE></P><PCLASS="para">If <EMCLASS="emphasis">sendmail</EM> cannot descend into the next directory, it prints:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">mci_traverse: opendir <CODECLASS="replaceable"><I>component</I></CODE>: <ICLASS="lineannotation">reason for failure</I></PRE></BLOCKQUOTE></P><PCLASS="para">When purging its host information with the <EMCLASS="emphasis">purgestat</EM>(1)command (see <ACLASS="xref"HREF="ch36_01.htm#SML2-CH-36-SECT-1-4"TITLE="purgestat (V8.8 and Above)">Section 36.1.4</A>), if <EMCLASS="emphasis">sendmail</EM> cannotremove the status file, it prints:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">mci_purge_persistent: failed to unlink <CODECLASS="replaceable"><I>filename</I></CODE>: <ICLASS="lineannotation">reason for failure</I></PRE></BLOCKQUOTE></P><PCLASS="para">And if it cannot remove any of the directory components, it prints:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">mci_purge_persistent: rmdir <CODECLASS="replaceable"><I>directory</I></CODE>: <ICLASS="lineannotation">reason for failure</I></PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-180">37.5.180 -d56.12</A></H3><PCLASS="refpurpose">Perform a sanity check</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">As a &quot;sanity check,&quot; the <CODECLASS="literal">-d56.12</CODE> debugging switchcauses <EMCLASS="emphasis">sendmail</EM> to print the following if the lock was successfullyacquired on the status file:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">mci_lock_host: Sanity check - lock is good</PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-181">37.5.181 -d56.80</A></H3><PCLASS="refpurpose">Trace creating the path to the status file</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">If the status file does not exist, <EMCLASS="emphasis">sendmail</EM> recursively makesthe directories leading to it. The <CODECLASS="literal">-d56.80</CODE> debugging switchis used to trace this process:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">mci_generate_persistent_path(<CODECLASS="replaceable"><I>host</I></CODE>): FAILURE <CODECLASS="replaceable"><I>errno</I></CODE>mci_generate_persistent_path(<CODECLASS="replaceable"><I>host</I></CODE>): SUCCESS <CODECLASS="replaceable"><I>path</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">If this process of making directories fails, <CODECLASS="replaceable"><I>errno</I></CODE> is printed,as listed in <EMCLASS="emphasis">&lt;errno.h&gt;</EM>. If it succeeds, the <CODECLASS="replaceable"><I>path</I></CODE> createdis displayed.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-182">37.5.182 -d56.93</A></H3><PCLASS="refpurpose">Dump MCI record for the host</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d56.93</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM> to dump theconnection cache information associated with a host's status file:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">mci_read_persistent: fp=<CODECLASS="replaceable"><I>hex</I></CODE>, mci= <ICLASS="lineannotation">output of mci_dump() here (see <ACLASS="xref"HREF="ch37_05.htm#SML2-CH-37-SECT-5-44"TITLE="">Section 37.5.44</A>)</I></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>hex</I></CODE> is the file pointer of the open status file printed inhexadecimal. That is followed by a dump of the MCI record for thehost.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-183">37.5.183 -d57.2</A></H3><PCLASS="refpurpose">Monitor vsnprintf() overflows</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">If HASSNPRINTF is not defined, <EMCLASS="emphasis">sendmail</EM> emulatesthe <EMCLASS="emphasis">snprintf</EM>(3) function. If the internal bufferof that emulation overflows, the <CODECLASS="literal">-d57.2</CODE>debugging switch causes this warning to be printed:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">vsnprintf overflow: <ICLASS="lineannotation">first 200 characters of buffer</I></PRE></BLOCKQUOTE></P><PCLASS="para">Note that you may have to also use the <CODECLASS="literal">-v</CODE> command-line switchto make this output visible.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-184">37.5.184 -d59</A></H3><PCLASS="refpurpose">XLA from contrib</P>(obsolete)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">See the XLA package in the <EMCLASS="emphasis">contrib/xla</EM> directory as distributedwith the V8 <EMCLASS="emphasis">sendmail</EM> source. Note that XLA is no longer distributedwith <EMCLASS="emphasis">sendmail</EM> as of V8.8.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-185">37.5.185 -d60.1</A></H3><PCLASS="refpurpose">Trace map lookups inside rewrite()</P>(useful)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">Rules defined by the <CODECLASS="literal">R</CODE> configuration command are rewrittenby <EMCLASS="emphasis">sendmail</EM>'s internal <EMCLASS="emphasis">rewrite</EM>() subroutine.The <CODECLASS="literal">$[</CODE> and <CODECLASS="literal">$(</CODE> lookup operators(see <ACLASS="xref"HREF="ch33_04.htm#SML2-CH-33-SECT-4-3"TITLE="$[ and $]: A Special Case">Section 33.4.3, "$[ and $]: A Special Case"</A> and <ACLASS="xref"HREF="ch33_04.htm"TITLE="Use Maps with $( and $) in Rules">Section 33.4, "Use Maps with $( and $) in Rules"</A>)cause <EMCLASS="emphasis">sendmail</EM> to look up keys in databases (maps).</P><PCLASS="para">If <EMCLASS="emphasis">sendmail</EM> is running in deferred mode (see <ACLASS="xref"HREF="ch34_08.htm#SML2-CH-34-SECT-8-16"TITLE="">Section 34.8.16</A>), itskips map lookups because they may cause DNS accesses. The <CODECLASS="literal">-d60.1</CODE>(a.k.a. <CODECLASS="literal">-d60</CODE>) debugging switch causes <EMCLASS="emphasis">sendmail</EM> to print that it isskipping the lookup:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">map_lookup(<CODECLASS="replaceable"><I>name</I></CODE>, <CODECLASS="replaceable"><I>key</I></CODE>) =&gt; DEFERRED</PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>name</I></CODE> is the map type, such as <CODECLASS="literal">dequote</CODE> or<CODECLASS="literal">host</CODE>. The <CODECLASS="replaceable"><I>key</I></CODE> is the information being looked up.</P><PCLASS="para">&#13;If running in something other than deferred mode, <EMCLASS="emphasis">sendmail</EM> performs the lookup.If the lookup fails (if <CODECLASS="replaceable"><I>key</I></CODE> is not found), <EMCLASS="emphasis">sendmail</EM>prints:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">map_lookup(<CODECLASS="replaceable"><I>name</I></CODE>, <CODECLASS="replaceable"><I>key</I></CODE>) =&gt; NOT FOUND (<CODECLASS="replaceable"><I>stat</I></CODE>)</PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>stat</I></CODE> is the number of the error that caused the failure.If it is 0, then the lookup failed merely because the <CODECLASS="replaceable"><I>key</I></CODE>was not found. Otherwise, it corresponds to the error numbers in<EMCLASS="emphasis">&lt;sysexits.h&gt;</EM>. Then if <CODECLASS="replaceable"><I>stat</I></CODE> is the special value 75 (forEX_TEMPFAIL), <EMCLASS="emphasis">sendmail</EM> also prints:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">map_lookup(<CODECLASS="replaceable"><I>name</I></CODE>, <CODECLASS="replaceable"><I>key</I></CODE>) tempfail: errno=<CODECLASS="replaceable"><I>err</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Here, <CODECLASS="replaceable"><I>err</I></CODE> is the error number that corresponds to the errorslisted in <EMCLASS="emphasis">&lt;errno.h&gt;</EM>.</P><PCLASS="para">If the <CODECLASS="replaceable"><I>key</I></CODE> is successfully found, <EMCLASS="emphasis">sendmail</EM> prints:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">map_lookup(<CODECLASS="replaceable"><I>name</I></CODE>, <CODECLASS="replaceable"><I>key</I></CODE>) =&gt; <ICLASS="lineannotation">replacement value here</I> (<CODECLASS="replaceable"><I>stat</I></CODE>)</PRE></BLOCKQUOTE></P><PCLASS="para">Note that the replacement value will be whatever value was defined bythe <CODECLASS="literal">-a</CODE> database switch when the <CODECLASS="literal">K</CODE> command definedthe map (see <ACLASS="xref"HREF="ch33_03.htm#SML2-CH-33-SECT-3-4-2"TITLE="-a  append tag on successful match (V8.1 and above)">Section 33.3.4.2, "-a  append tag on successful match (V8.1 and above)"</A>).</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-186">37.5.186 -d61.10</A></H3><PCLASS="refpurpose">Trace gethostbyname()</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <EMCLASS="emphasis">gethostbyname</EM>(3) library routine is called by <EMCLASS="emphasis">sendmail</EM> every time<EMCLASS="emphasis">sendmail</EM> needs to find the canonical name of a host. The <CODECLASS="literal">-d61.10</CODE>[20]debugging switch shows the result of that lookup:</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[20] There is no <CODECLASS="literal">-d61.1</CODE> information.</P></BLOCKQUOTE><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">_switch_gethostbyname_r(<CODECLASS="replaceable"><I>host</I></CODE>)... <ICLASS="lineannotation">canonical name here</I>__switch_gethostbyname(<CODECLASS="replaceable"><I>host</I></CODE>)... <ICLASS="lineannotation">canonical name here</I>gethostbyname(<CODECLASS="replaceable"><I>host</I></CODE>)... <ICLASS="lineannotation">canonical name here</I></PRE></BLOCKQUOTE></P><PCLASS="para">In all three lines of output, the <CODECLASS="replaceable"><I>host</I></CODE> was looked up to find its canonicalname. If one was found, its canonical name is printed; otherwise, <CODECLASS="literal">failure</CODE> isprinted.The first two lines show variations on <EMCLASS="emphasis">gethostbyname</EM>(3) that was requiredby some early SysVR4-based machines.These represent <EMCLASS="emphasis">sendmail</EM>'s attempt to canonify the <CODECLASS="replaceable"><I>host</I></CODE>no matter what.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-187">37.5.187 -d62.1</A></H3><PCLASS="refpurpose">Log file descriptors before and after all deliveries</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d62.1</CODE> (a.k.a. <CODECLASS="literal">-d62</CODE>) debugging switch causes <EMCLASS="emphasis">sendmail</EM>to log the state of all of its file descriptors. It does this once justbefore it starts to process the list of its recipients and again justafter it has completed delivery of all its recipients. Note that thisdebugging switch is unusual in that it causes its outputto be logged with <EMCLASS="emphasis">syslog</EM>(3), rather than written to <EMCLASS="emphasis">stdout</EM>.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-188">37.5.188 -d62.8</A></H3><PCLASS="refpurpose">Log file descriptors before each delivery</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d62.8</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM>to log the state of all its file descriptors just before undertakingdelivery of each message.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-189">37.5.189 -d62.10</A></H3><PCLASS="refpurpose">Log file descriptors after each delivery</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d62.10</CODE> debugging switch causes <EMCLASS="emphasis">sendmail</EM>to log the state of all its file descriptors just after completingdelivery of each message.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-190">37.5.190 -d80.1</A></H3><PCLASS="refpurpose">Content-Length: header (Sun enhancement)</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d80.1</CODE> (a.k.a. <CODECLASS="literal">-d80</CODE>) debugging switch is used to watch howSun's version of <EMCLASS="emphasis">sendmail</EM> handles the <CODECLASS="literal">Content-Length:</CODE>header.As soon as the size of the body of a message is known, Sun's <EMCLASS="emphasis">sendmail</EM>stores it in the envelope information. When the time comes to emitthe <CODECLASS="literal">Content-Length:</CODE> header, that information is fetched.If the size is unknown, the <CODECLASS="literal">-d80.1</CODE> debugging switchcauses <EMCLASS="emphasis">sendmail</EM> to print:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">content_length(): Error:  Message bodysize undefined !</PRE></BLOCKQUOTE></P><PCLASS="para">If the size is known, it is reduced by the number and size ofthe end-of-line characters (as defined by the delivery agent's<CODECLASS="literal">E =</CODE> equate). If the delivery agent's <CODECLASS="literal">F=E</CODE> flag isset (see <ACLASS="xref"HREF="ch30_08.htm#SML2-CH-30-SECT-8-19"TITLE="">Section 30.8.19, F=E</A>),the size is further reduced by the number of five character&quot;<CODECLASS="literal">From </CODE>&quot; strings that begin lines in the message body.The <CODECLASS="literal">-d80</CODE> debugging switch then causes the final resultto be printed:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Content length = <ICLASS="lineannotation"> final length here</I></PRE></BLOCKQUOTE></P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-191">37.5.191 -d81.1</A></H3><PCLASS="refpurpose">&gt; option for remote mode (Sun enhancement)</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">In V8.1 <EMCLASS="emphasis">sendmail</EM> the letter <CODECLASS="literal">R</CODE> was co-opted by theBerkeley distribution as an option name. This forced Sun to change thename of its former <CODECLASS="literal">R</CODE> option into the new <CODECLASS="literal">&gt;</CODE> option. The<CODECLASS="literal">-d81.1</CODE> (a.k.a. <CODECLASS="literal">-d80</CODE>) debugging switch causes Sun's <EMCLASS="emphasis">sendmail</EM> to displaythe status of this remote mode:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">verify_mail_server(): remote mode is <ICLASS="lineannotation"> either </I>on <ICLASS="lineannotation">or </I>offmail server = <ICLASS="lineannotation"> host name here</I></PRE></BLOCKQUOTE></P><PCLASS="para">If the <CODECLASS="literal">&gt;</CODE> option is declared, <CODECLASS="literal">on</CODE> is printed, and thename of the remote mail host is displayed, if known. See <ACLASS="xref"HREF="appd_05.htm"TITLE="The &gt; Option">Section 38.18, "The &gt; Option"</A>for a further description of this option.</P></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-192">37.5.192 -d91.100</A></H3><PCLASS="refpurpose">Log caching and uncaching connections</P></DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d91.100</CODE> debugging switch[21]causes the same information to be loggedwith <EMCLASS="emphasis">syslog</EM>(3)as is printed by the <CODECLASS="literal">-d42.5</CODE> debugging switch.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[21] There is no <CODECLASS="literal">-d91.1</CODE> information available.</P></BLOCKQUOTE></DIV></BLOCKQUOTE></DIV><DIVCLASS="refentry"><DIVCLASS="refnamediv"><H3CLASS="refname"><ACLASS="refname"NAME="SML2-CH-37-SECT-5-193">37.5.193 -d99.100</A></H3><PCLASS="refpurpose">Prevent backgrounding the daemon</P>(useful)</DIV><BLOCKQUOTE><DIVCLASS="refsect1"><PCLASS="para">The <CODECLASS="literal">-d99.100</CODE> debugging switch[22]prevents the <EMCLASS="emphasis">sendmail</EM> daemonfrom forking and putting itself into the background. This leavesthe running daemon connected to your terminal so that you can seeother debugging output. For example,</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[22] There is no <CODECLASS="literal">-d99.1</CODE> information available.</P></BLOCKQUOTE><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"># <CODECLASS="userinput"><B>/usr/lib/sendmail -bd -d99.100 -d9.30</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">This allows you to watch the daemon perform RFC1413 identificationqueries when SMTP connections are made. See also <CODECLASS="literal">-d52.100</CODE>, which prevents <EMCLASS="emphasis">sendmail</EM> fromdisconnecting from its controlling terminal device, or the <CODECLASS="literal">-bD</CODE> command-line switch (<ACLASS="xref"HREF="ch36_07.htm#SML2-CH-36-SECT-7-4"TITLE="">Section 36.7.4, -bD</A>), which does both.<ACLASS="indexterm"NAME="AUTOID-61529"></A></P></DIV></BLOCKQUOTE></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch37_04.htm"TITLE="37.4 Pitfalls"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 37.4 Pitfalls"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="sendmail"><IMGSRC="../gifs/txthome.gif"ALT="sendmail"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="CHAPTER"HREF="ch38_01.htm"TITLE="38. Rule-Set Testing with -bt"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 38. Rule-Set Testing with -bt"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">37.4 Pitfalls</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">38. Rule-Set Testing with -bt</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><PCLASS="nav"><FONTSIZE="-1">[ <AHREF="../index.htm"TITLE="The Networking CD Bookshelf">Library Home</A> | <AHREF="../dnsbind/index.htm"TITLE="DNS &amp; BIND">DNS &amp; BIND</A> | <AHREF="../tcpip/index.htm"TITLE="TCP/IP Network Administration">TCP/IP</A> | <AHREF="index.htm"TITLE="sendmail">sendmail</A> | <AHREF="../smdref/index.htm"TITLE="sendmail Desktop Reference">sendmail Reference</A> | <AHREF="../firewall/index.htm"TITLE="Building Internet Firewalls">Firewalls</A> | <AHREF="../puis/index.htm"TITLE="Practical UNIX &amp; Internet Security">Practical Security</A> ]</FONT></P></DIV></BODY></HTML>