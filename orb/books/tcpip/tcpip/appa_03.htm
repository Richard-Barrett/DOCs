<HTML><HEAD><TITLE>[Appendix A] A.3 chat</TITLE><METANAME="DC.title"CONTENT="TCP/IP Network Administration"><METANAME="DC.creator"CONTENT="Craig Hunt"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1999-02-04T01:42:42Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-322-7"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="appa_01.htm"TITLE="A. PPP Tools"><LINKREL="prev"HREF="appa_02.htm"TITLE="A.2 The PPP Daemon"><LINKREL="next"HREF="appb_01.htm"TITLE="B. A gated Reference"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="TCP/IP Network Administration"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,65"HREF="index.htm"ALT="TCP/IP Network Administration"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/tsrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="appa_02.htm"TITLE="A.2 The PPP Daemon"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: A.2 The PPP Daemon"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Appendix A<BR>PPP Tools</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="APPENDIX"HREF="appb_01.htm"TITLE="B. A gated Reference"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: B. A gated Reference"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="TCP2-AP-1-SECT-3">A.3 chat</A></H2><PCLASS="para"><ACLASS="indexterm"NAME="TCP2-AP-1-IX-CHAT-SCRIPTING-LANGUAGE"></A><BCLASS="emphasis.bold">chat</B> is a general-purpose scripting language that is used tocontrol the modem, dial the remote server, and perform the remote systemlogin. <BCLASS="emphasis.bold">chat</B> is less powerful than <BCLASS="emphasis.bold">dip</B> but is widely used.The &quot;expect/send&quot; structure of a <BCLASS="emphasis.bold">chat</B> script is the fundamentalstructure used in most scripting languages.</P><PCLASS="para">A <BCLASS="emphasis.bold">chat</B> script is composed of expect/send pairs. These pairsconsist of the string expected from the remote system, separated bywhitespace from the response that is sent to the remote host when theexpected string is received. If no string is expected from the remote<ACLASS="indexterm"NAME="AUTOID-20467"></A><ACLASS="indexterm"NAME="AUTOID-20469"></A><ACLASS="indexterm"NAME="AUTOID-20471"></A><ACLASS="indexterm"NAME="AUTOID-20473"></A>system, two quotes (<CODECLASS="literal">&quot;&quot;</CODE>) or two apostrophes (<CODECLASS="literal">&quot;</CODE>) areused to &quot;expect nothing.&quot;  A simple <BCLASS="emphasis.bold">chat</B> script is:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">&quot;&quot; \r name&gt; jane word&gt; TOga!toGA</PRE></BLOCKQUOTE></P><PCLASS="para">The script expects nothing (<CODECLASS="literal">&quot;&quot;</CODE>) until it sends the remotesystem a carriage return (<CODECLASS="literal">\r</CODE>). Then the script expects theremote system to send the string <CODECLASS="literal">name&gt;</CODE>, which is part of thesystem's <CODECLASS="literal">Username&gt;</CODE> prompt. In response to this prompt, thescript sends the username <CODECLASS="literal">jane</CODE>.  Finally the script waits forpart of the <CODECLASS="literal">Password&gt;</CODE> prompt and responds with<CODECLASS="literal">TOga!toGA</CODE>. A script this simple can be defined directly on the<BCLASS="emphasis.bold">chat</B> command line:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% chat -v -t30 &quot;&quot; \r name&gt; jane word&gt; TOga!toGA</PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-20492"></A>This command runs <BCLASS="emphasis.bold">chat</B> in verbose mode, sets the length of timethe script waits for an expected string to 30 seconds, and then executesthe simple login script described above.</P><PCLASS="para">The syntax of the <BCLASS="emphasis.bold">chat</B> command is:</P><DLCLASS="variablelist"><DTCLASS="term"></DT><DDCLASS="listitem"><PCLASS="para"><BCLASS="emphasis.bold">chat</B> [<CODECLASS="replaceable"><I>options</I></CODE>] [<CODECLASS="replaceable"><I>script</I></CODE>]</P></DD></DL><PCLASS="para">The <BCLASS="emphasis.bold">chat</B> command options are:</P><DLCLASS="variablelist"><DTCLASS="term"><BCLASS="emphasis.bold">-v</B></DT><DDCLASS="listitem"><PCLASS="para">Runs the <BCLASS="emphasis.bold">chat</B> script in verbose mode. Verbose mode logs<ACLASS="indexterm"NAME="AUTOID-20514"></A>informational messages via <BCLASS="emphasis.bold">syslogd</B>.</P></DD><DTCLASS="term"><BCLASS="emphasis.bold">-V</B></DT><DDCLASS="listitem"><PCLASS="para">Runs the <BCLASS="emphasis.bold">chat</B> script in stderr verbose mode. The stderr verbosemode displays informational messages on the stderr device. See Chapter6 for an example of this being used with <BCLASS="emphasis.bold">pppd</B>.</P></DD><DTCLASS="term"><BCLASS="emphasis.bold">-t</B> <CODECLASS="replaceable"><I>timeout</I></CODE></DT><DDCLASS="listitem"><PCLASS="para">Sets the maximum time to wait for an expected string. If the expectedstring is not received in <CODECLASS="replaceable"><I>timeout</I></CODE> seconds, the reply string isnot sent and the script terminates&amp;amp;amp;amp;mdash;unless an alternate send isdefined. If defined, the alternate send (more about this later) issent and the remote system is given one more <CODECLASS="replaceable"><I>timeout</I></CODE> period torespond. If this fails, the script is terminated with a nonzero errorcode. By default, the timeout period is 45 seconds.</P></DD><DTCLASS="term"><BCLASS="emphasis.bold">-f</B> <CODECLASS="replaceable"><I>scriptfile</I></CODE></DT><DDCLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-20538"></A>Reads the <BCLASS="emphasis.bold">chat</B> script from the <CODECLASS="replaceable"><I>scriptfile</I></CODE> instead of fromthe command line. Multiple lines of expect/send pairs are permitted inthe file.</P></DD><DTCLASS="term"><BCLASS="emphasis.bold">-r</B> <CODECLASS="replaceable"><I>reportfile</I></CODE></DT><DDCLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-20548"></A>Writes the output generated by REPORT strings to the <CODECLASS="replaceable"><I>reportfile</I></CODE>.By default, REPORT strings are written to stderr. The REPORT keyword iscovered below.</P></DD></DL><PCLASS="para">In order to make the scripts more useful and robust, <BCLASS="emphasis.bold">chat</B>provides special keywords, escape sequences, and alternate send/expectpairs that can be used in the script. First let's look at the five<BCLASS="emphasis.bold">chat</B> keywords.</P><PCLASS="para">Two keywords transmit special signals to the remote system. Thekeyword <CODECLASS="literal">EOT</CODE> sends the End of Transmission character. On UNIXsystems this is usually the End of File character, which is aCTRL-D. The <CODECLASS="literal">BREAK</CODE> keyword sends a line break to the remotesystem. The three remaining keywords define processing characteristicsfor the script itself.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-20558"></A>The <CODECLASS="literal">TIMEOUT</CODE> keyword defines the amount of time to wait for an expectedstring. Because it is defined inside the script, the timeout value canbe changed for each expected string. For example, assume you want toallow the remote server 30 seconds to display the initial <CODECLASS="literal">Username&gt;</CODE>prompt but only 5 seconds to display <CODECLASS="literal">Password&gt;</CODE> once the username hasbeen sent. Enter this script command:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">TIMEOUT 30 name&gt; karen TIMEOUT 5 word&gt; beach%PARTY</PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-20566"></A><ACLASS="indexterm"NAME="AUTOID-20568"></A>The <CODECLASS="literal">ABORT</CODE> keyword and the <CODECLASS="literal">REPORT</CODE> keyword aresimilar. They both define strings that, when received, cause a specialaction to take place. The <CODECLASS="literal">ABORT</CODE> keyword defines strings thatcause the script to abort if they are received when the system isexpecting the string CONNECT from the modem. The <CODECLASS="literal">REPORT</CODE>keyword defines substrings that determine what messages received onthe serial port should be written to stderr or the report file. Asample <BCLASS="emphasis.bold">chat</B> script file illustrates both of these keywords:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">REPORT CONNECTABORT BUSYABORT 'NO CARRIER'ABORT 'RING - NO ANSWER'&quot;&quot; ATDT5551234CONNECT \rname&gt; karenword&gt; beach%PARTY</PRE></BLOCKQUOTE></P><PCLASS="para">The first line says that any message received by the script thatcontains the word CONNECT will be logged. If the <BCLASS="emphasis.bold">-r</B>command-line option was used when <BCLASS="emphasis.bold">chat</B> was started, the messageis logged in the file defined by that option. Otherwise the message isdisplayed on stderr. The point of this command is to display themodem's connect message to the user. For example: the complete messagemight be CONNECT 28,800 LAPM/V, which tells the user the link speedand the transmission protocol used by the modems. The CONNECT messagemeans success. The next three lines of the script begin with thekeyword <CODECLASS="literal">ABORT</CODE> and define the modem messages that mean failure. If themodem responds with BUSY, NO CARRIER, or RING - NO ANSWER, thescript aborts.</P><PCLASS="para">The last four lines are the basic expect/send pairs we have seenrepeatedly in this section. We expect nothing (<CODECLASS="literal">&quot;&quot;</CODE>) and send thedial command to the modem (<CODECLASS="literal">ATDT</CODE>). We expect CONNECT from themodem and send a carriage return (<CODECLASS="literal">\r</CODE>) to the remote server.We expect <CODECLASS="literal">Username&gt;</CODE> from the remote server and send <CODECLASS="literal">karen</CODE>.Finally, we expect <CODECLASS="literal">Password&gt;</CODE> from the server and send<CODECLASS="literal">beach%PARTY</CODE>.</P><PCLASS="para"><BCLASS="emphasis.bold">chat</B> extends the standard expect/send pair with an alternate sendand an alternate expect to improve robustness. You may define analternate send string and an alternate expect value to be used when thescript times out waiting for the primary expected value. The alternatesend and the alternate expect are indicated in the script by precedingthem with dashes. For example:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">gin:-BREAK-gin: becca</PRE></BLOCKQUOTE></P><PCLASS="para">In this sample we wait for the string <CODECLASS="literal">gin:</CODE> and send the string<CODECLASS="literal">becca</CODE>. The first string and the last string compose thestandard expect/send pair. The alternate send/expect is only used ifthe timer expires and the expected <CODECLASS="literal">gin:</CODE> string has not beenreceived. When this occurs, the script sends a line break, restartsthe timer, and waits for <CODECLASS="literal">gin:</CODE> again, because that is what ouralternate send/expect pair (<CODECLASS="literal">-BREAK-gin:</CODE>) tells the script todo. Note that unlike the standard expect/send pair, in the send/expectpair a value is transmitted before a string is expected, i.e., the sendcomes before the expect. Another example more in keeping with ourother script examples is:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">name&gt;&amp;amp;amp;amp;mdash;name&gt; karen</PRE></BLOCKQUOTE></P><PCLASS="para">Here the script expects the <CODECLASS="literal">name&gt;</CODE> string. If it is notreceived, the script sends an empty line, which is simply a carriagereturn, and again waits for the <CODECLASS="literal">name&gt;</CODE> string. This action isdictated by the alternate send/expect pair, <CODECLASS="literal">&amp;amp;amp;amp;mdash;name&gt;</CODE>. Thepair begins with a dash that signals the start of the send string, butthe next character is the second dash that marks the beginning of thealternate expect string. There is no send string. It is this &quot;emptystring&quot; that causes the script to send a single return character. Thisexample is more common than the BREAK example shown above, though a little harder to explain.</P><PCLASS="para"><ACLASS="indexterm"NAME="TCP2-AP-1-IX-CHAT-SCRIPTING-LANGUAGE-ESCAPE-SEQUENCES-LISTED"></A>The carriage return character is not the only special character that can be sent froma <BCLASS="emphasis.bold">chat</B> script. <BCLASS="emphasis.bold">chat</B> provides several escape sequences forsending and receiving special characters. <ACLASS="xref"HREF="appa_03.htm#TCP2-AP-1-TAB-1"TITLE="chat Escape Sequences">Table 13.2</A>lists these.</P><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="TCP2-AP-1-TAB-1">Table A.2: chat Escape Sequences</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Escape Sequence</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Meaning</TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">\b</B></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">The backspace character.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">\</B></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Send without the terminating return character.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">\d</B></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Delay sending for one second.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">\K</B></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Send a BREAK.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">\n</B></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Send a newline character.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">\N</B></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Send a null character.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">\</B></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Delay sending 1/10th of a second.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">\q</B></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Send the string but don't log it.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">\r</B></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">The carriage return.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">\s</B></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">The space character.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">\t</B></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">The tab character.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">\\</B></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">The backslash character.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">\</B><EMCLASS="emphasis">ddd</EM></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">The ASCII character with the octal value ddd.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">^</B><EMCLASS="emphasis">C</EM></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">A control character.</TD></TR></TBODY></TABLE><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-20679"></A><ACLASS="indexterm"NAME="AUTOID-20681"></A>All of the escape sequences start with a backslash (\)except for the sequenceused to enter a control character.  Control characters are entered as acaret (^) followed by an uppercase letter.  For example control X is enteredas ^X. The escapesequences that are described in <ACLASS="xref"HREF="appa_03.htm#TCP2-AP-1-TAB-1"TITLE="chat Escape Sequences">Table 13.2</A>with the words &quot;send&quot; or&quot;sending&quot; can only be used in a send string; all others can be used ineither a send or expect string. Several escape sequences are used inthe following example:<ACLASS="indexterm"NAME="AUTOID-20684"></A></P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">&quot;&quot; \d\d^G\p^G\p\p^GWake\sUp!\nSleepy\sHead!</PRE></BLOCKQUOTE></P><PCLASS="para">Expect nothing (<CODECLASS="literal">&quot;&quot;</CODE>). Wait two seconds (<CODECLASS="literal">\d\d</CODE>). Sendthree ASCII BELL characters, which is CTRL-G on the keyboard, atintervals of 1/10 of a second (<CODECLASS="literal">^G\p^G\p\p^G</CODE>). Send thestring <CODECLASS="literal">Wake Up!</CODE>. Go to a new line (<CODECLASS="literal">\n</CODE>) and send thestring <CODECLASS="literal">Sleepy Head!</CODE>.<ACLASS="indexterm"NAME="AUTOID-20694"></A><ACLASS="indexterm"NAME="AUTOID-20695"></A></P></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="appa_02.htm"TITLE="A.2 The PPP Daemon"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: A.2 The PPP Daemon"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="TCP/IP Network Administration"><IMGSRC="../gifs/txthome.gif"ALT="TCP/IP Network Administration"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="APPENDIX"HREF="appb_01.htm"TITLE="B. A gated Reference"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: B. A gated Reference"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">A.2 The PPP Daemon</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">B. A gated Reference</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><PCLASS="nav"><FONTSIZE="-1">[ <AHREF="../index.htm"TITLE="The Networking CD Bookshelf">Library Home</A> | <AHREF="../dnsbind/index.htm"TITLE="DNS &amp; BIND">DNS &amp; BIND</A> | <AHREF="index.htm"TITLE="TCP/IP Network Administration">TCP/IP</A> | <AHREF="../sendmail/index.htm"TITLE="sendmail">sendmail</A> | <AHREF="../smdref/index.htm"TITLE="sendmail Desktop Reference">sendmail Reference</A> | <AHREF="../firewall/index.htm"TITLE="Building Internet Firewalls">Firewalls</A> | <AHREF="../puis/index.htm"TITLE="Practical UNIX &amp; Internet Security">Practical Security</A> ]</FONT></P></DIV></BODY></HTML>