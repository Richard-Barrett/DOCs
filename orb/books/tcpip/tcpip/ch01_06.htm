<HTML><HEAD><TITLE>[Chapter 1] 1.6 Transport Layer</TITLE><METANAME="DC.title"CONTENT="TCP/IP Network Administration"><METANAME="DC.creator"CONTENT="Craig Hunt"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1999-02-04T01:31:02Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-322-7"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch01_01.htm"TITLE="1. Overview of TCP/IP"><LINKREL="prev"HREF="ch01_05.htm"TITLE="1.5 Internet Layer"><LINKREL="next"HREF="ch01_07.htm"TITLE="1.7 Application Layer"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="TCP/IP Network Administration"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,65"HREF="index.htm"ALT="TCP/IP Network Administration"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/tsrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch01_05.htm"TITLE="1.5 Internet Layer"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 1.5 Internet Layer"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 1<BR>Overview of TCP/IP</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch01_07.htm"TITLE="1.7 Application Layer"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 1.7 Application Layer"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="TCP2-CH-1-SECT-6">1.6 Transport Layer</A></H2><PCLASS="para"><ACLASS="indexterm"NAME="TCP2-CH-1-IX-TRANSPORT-LAYER"></A><ACLASS="indexterm"NAME="TCP2-CH-1-IX-USER-DATAGRAM-PROTOCOL-UDP"></A>The protocol layer just above the Internet Layer is the <EMCLASS="emphasis">Host-to-HostTransport Layer</EM>. This name is usually shortened to <EMCLASS="emphasis">TransportLayer</EM>. The two most important protocols in the Transport Layer are<EMCLASS="emphasis">Transmission Control Protocol</EM> (TCP)<ACLASS="indexterm"NAME="AUTOID-810"></A>and <EMCLASS="emphasis">User Datagram Protocol</EM> (UDP).TCP provides reliable data delivery service with end-to-end error detection<ACLASS="indexterm"NAME="AUTOID-813"></A>and correction. UDP provides low-overhead,connectionless datagram delivery service.<ACLASS="indexterm"NAME="AUTOID-817"></A>Both protocolsdeliver data between the Application Layer and theInternet Layer. Applications programmers can choose whichever serviceis more appropriate for their specific applications.</P><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="TCP2-CH-1-SECT-6.1">1.6.1 User Datagram Protocol</A></H3><PCLASS="para">The User Datagram Protocol gives application programs direct access toa datagram delivery service, like the delivery service that IPprovides. This allows applications to exchange messages over thenetwork with a minimum of protocol overhead.</P><PCLASS="para">UDP is an unreliable, connectionless datagram protocol. As notedpreviously, &quot;unreliable&quot; merely means that there are no techniques in theprotocol for verifying that the data reached the other end of thenetwork correctly. Within your computer, UDP will deliver datacorrectly. UDP uses 16-bit <EMCLASS="emphasis">Source Port</EM><ACLASS="indexterm"NAME="AUTOID-825"></A>and <EMCLASS="emphasis">Destination Port</EM> numbers<ACLASS="indexterm"NAME="AUTOID-828"></A>in word 1 of the message header, to deliver data tothe correct applications process. <ACLASS="xref"HREF="ch01_06.htm#TCP2-CH-1-FIG-7"TITLE="UDP message format">Figure 1.8</A>shows the UDPmessage format.</P><H4CLASS="figure"><ACLASS="title"NAME="TCP2-CH-1-FIG-7">Figure 1.8: UDP message format</A></H4><IMGCLASS="graphic"SRC="figs/tcp2_0108.gif"ALT="Figure 1.8"><PCLASS="para">Why do applications programmers choose UDP as a data transport service?There are a number of good reasons. If the amount of data beingtransmitted is small, the overhead of creating connections and ensuringreliable delivery may be greaterthan the work of re-transmitting the entire data set. In this case,UDP is the most efficient choice for a Transport Layer protocol.Applications that fit a <EMCLASS="emphasis">query-response</EM> model<ACLASS="indexterm"NAME="AUTOID-836"></A>are also excellentcandidates for using UDP. The response can be used as a positiveacknowledgment to the query. If a response isn't received within acertain time period, the application just sends another query. Stillother applications provide their own techniques for reliable data delivery,and don't require that service from the transport layer protocol.Imposing another layer of acknowledgment on any of these types ofapplications is inefficient.<ACLASS="indexterm"NAME="AUTOID-838"></A></P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="TCP2-CH-1-SECT-6.2">1.6.2 Transmission Control Protocol</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="TCP2-CH-1-IX-TRANSPORT-CONTROL-PROTOCOL-TCP"></A>Applications that require the transport protocol to provide reliabledata delivery use TCP because itverifies that data is delivered across the network accurately and inthe proper sequence. TCP is a <EMCLASS="emphasis">reliable</EM>,<EMCLASS="emphasis">connection-oriented</EM>, <EMCLASS="emphasis">byte-stream</EM> protocol. Let's look ateach of the terms&nbsp;- reliable, connection-oriented, and byte-stream&nbsp;- inmore detail.</P><PCLASS="para">TCP provides reliability<ACLASS="indexterm"NAME="AUTOID-848"></A>with a mechanism called <EMCLASS="emphasis">PositiveAcknowledgment with Re-transmission</EM> (PAR).<ACLASS="indexterm"NAME="AUTOID-851"></A>Simply stated, a systemusing PAR sends the data again, unless it hears from the remote systemthat the data arrived okay. The unit of data exchanged betweencooperating TCP modules is called a <EMCLASS="emphasis">segment</EM><ACLASS="indexterm"NAME="AUTOID-855"></A>(see <ACLASS="xref"HREF="ch01_06.htm#TCP2-CH-1-FIG-8"TITLE="TCP segment format">Figure 1.9</A>Each segment contains a checksum<ACLASS="indexterm"NAME="AUTOID-859"></A>that the recipient uses toverify that the data is undamaged. If the data segment is receivedundamaged, the receiver sends a <EMCLASS="emphasis">positive acknowledgment</EM><ACLASS="indexterm"NAME="AUTOID-862"></A>back to the sender. If the data segment is damaged, the receiverdiscards it. After an appropriate time-out period,<ACLASS="indexterm"NAME="AUTOID-864"></A>the sending TCP module re-transmits any segment for which nopositive acknowledgment has been received.</P><H4CLASS="figure"><ACLASS="title"NAME="TCP2-CH-1-FIG-8">Figure 1.9: TCP segment format</A></H4><IMGCLASS="graphic"SRC="figs/tcp2_0109.gif"ALT="Figure 1.9"><PCLASS="para">TCP is connection-oriented. It establishes a logical end-to-endconnection between the two communicating hosts. Control information,called a <EMCLASS="emphasis">handshake</EM>,<ACLASS="indexterm"NAME="AUTOID-871"></A>is exchanged between the two endpoints toestablish a dialogue before data is transmitted. TCP indicates thecontrol function of a segment by settingthe appropriate bit in the Flags field in word 4 of the <EMCLASS="emphasis">segment header</EM>.<ACLASS="indexterm"NAME="AUTOID-874"></A></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-878"></A>The type of handshake used by TCP is called a <EMCLASS="emphasis">three-wayhandshake</EM> because three segments are exchanged. <ACLASS="xref"HREF="ch01_06.htm#TCP2-CH-1-FIG-9"TITLE="Three-way handshake">Figure 1.10</A>shows the simplest form of the three-way handshake. Host <EMCLASS="emphasis">A</EM> begins theconnection by sending host <EMCLASS="emphasis">B</EM> a segment with the &quot;Synchronizesequence numbers&quot; (SYN) bit set.<ACLASS="indexterm"NAME="AUTOID-884"></A><ACLASS="indexterm"NAME="AUTOID-886"></A>This segment tells host <EMCLASS="emphasis">B</EM>that <EMCLASS="emphasis">A</EM> wishes to set up a connection, and it tells <EMCLASS="emphasis">B</EM> whatsequence number host <EMCLASS="emphasis">A</EM> will use as a starting number forits segments. (Sequence numbers are used to keep data in the properorder.) Host <EMCLASS="emphasis">B</EM> responds to <EMCLASS="emphasis">A</EM> with a segment that has<ACLASS="indexterm"NAME="AUTOID-894"></A>the &quot;Acknowledgment&quot; (ACK) and SYN bits set. <EMCLASS="emphasis">B</EM>'s segmentacknowledges the receipt of <EMCLASS="emphasis">A</EM>'s segment, and informs <EMCLASS="emphasis">A</EM> whichSequence Number host <EMCLASS="emphasis">B</EM> will start with. Finally, host<EMCLASS="emphasis">A</EM> sends a segment that acknowledges receipt of <EMCLASS="emphasis">B</EM>'s segment,and transfers the first actual data.</P><H4CLASS="figure"><ACLASS="title"NAME="TCP2-CH-1-FIG-9">Figure 1.10: Three-way handshake</A></H4><IMGCLASS="graphic"SRC="figs/tcp2_0110.gif"ALT="Figure 1.10"><PCLASS="para">After this exchange, host <EMCLASS="emphasis">A</EM>'s TCP has positive evidence that theremote TCP is alive and ready to receive data. As soon as theconnection is established, data can be transferred. When thecooperating modules have concluded the data transfers, they willexchange a three-way handshake with segments containing the &quot;No moredata from sender&quot; bit (called the <EMCLASS="emphasis">FIN</EM> bit)<ACLASS="indexterm"NAME="AUTOID-908"></A><ACLASS="indexterm"NAME="AUTOID-910"></A>to close theconnection. It is the end-to-end exchange of data that provides thelogical connection between the two systems.</P><PCLASS="para">TCP views the data it sends as a continuous stream of bytes, notas independent packets. Therefore, TCP takes care to maintain thesequence in which bytes are sent and received.The Sequence Number<ACLASS="indexterm"NAME="AUTOID-913"></A>and Acknowledgment Number fields<ACLASS="indexterm"NAME="AUTOID-915"></A>in theTCP segment header keep track of the bytes.</P><PCLASS="para">The TCP standard does not require that each system start numberingbytes with any specific number; each system chooses thenumber it will use as a starting point. To keep track of the datastream correctly, each end of the connection must know the other end'sinitial number. The two ends of the connection synchronize<ACLASS="indexterm"NAME="AUTOID-918"></A>byte-numbering systems by exchanging SYN segments during the handshake. TheSequence Number field in the SYN segment contains the <EMCLASS="emphasis">InitialSequence Number</EM> (ISN),<ACLASS="indexterm"NAME="AUTOID-921"></A><ACLASS="indexterm"NAME="AUTOID-923"></A>which is the starting point for thebyte-numbering system. For security reasons the ISN should be arandom number, though it is often 0.</P><PCLASS="para">Each byte of data is numbered sequentially from the ISN, so the firstreal byte of data sent has a sequence number of ISN+1. TheSequence Number in the header of a data segment identifies thesequential position in the data stream of the first data byte in thesegment. For example, if the first byte in the data stream was sequencenumber 1 (ISN=0) and 4000 bytes of data have already been transferred,then the first byte of data in the current segment is byte 4001, andthe Sequence Number would be 4001.</P><PCLASS="para">The Acknowledgment Segment (ACK) performs two functions:<ACLASS="indexterm"NAME="AUTOID-927"></A><EMCLASS="emphasis">positive acknowledgment</EM> and <EMCLASS="emphasis">flow control</EM>.<ACLASS="indexterm"NAME="AUTOID-931"></A>The acknowledgment tells thesender how much data has been received, and how much more the receivercan accept. The Acknowledgment Number is the sequence number of the nextbyte the receiver expects to receive. The standard does not requirean individual acknowledgment for every packet. The acknowledgmentnumber is a positive acknowledgment of all bytes up to that number.For example, if the first byte sent was numbered 1 and 2000 bytes havebeen successfully received, the Acknowledgment Number would be 2001.</P><PCLASS="para">The Window field contains the <EMCLASS="emphasis">window</EM>,<ACLASS="indexterm"NAME="AUTOID-935"></A>or the number of bytesthe remote end is able to accept. If the receiver is capable ofaccepting 6000 more bytes, the window would be 6000.The window indicates to the sender that it can continuesending segments as long as the total number of bytes that it sendsis smaller than the window of bytes thatthe receiver can accept. The receiver controlsthe flow of bytes from the sender by changing the size of the window.A zero window tells the sender to cease transmission until itreceives a non-zero window value.</P><PCLASS="para"><ACLASS="xref"HREF="ch01_06.htm#TCP2-CH-1-FIG-10"TITLE="TCP data stream">Figure 1.11</A>shows a TCP data stream that starts with an InitialSequence Number of 0. The receiving system has received and acknowledged2000 bytes, so the current Acknowledgment Number is 2001. The receiveralso has enough buffer space for another 6000 bytes, so it hasadvertised a window of 6000. The sender is currently sending a segmentof 1000 bytes starting with Sequence Number 4001. The sender hasreceived no acknowledgment for the bytes from 2001 on, but continuessending data as long as it is within the window. If the sender fillsthe window and receives no acknowledgment of the data previously sent,it will, after an appropriate time-out, send the data again startingfrom the first unacknowledged byte.</P><PCLASS="para">In <ACLASS="xref"HREF="ch01_06.htm#TCP2-CH-1-FIG-10"TITLE="TCP data stream">Figure 1.11</A>re-transmission wouldstart from byte 2001 if no further acknowledgments are received. Thisprocedure ensures that data is reliably received at the far end of thenetwork.</P><PCLASS="para">TCP is also responsible for delivering data received from IP to thecorrect application. The application that the data is bound for isidentified by a 16-bit number called the <EMCLASS="emphasis">port number</EM>.<ACLASS="indexterm"NAME="AUTOID-943"></A>The <EMCLASS="emphasis">Source Port</EM><ACLASS="indexterm"NAME="AUTOID-947"></A>and <EMCLASS="emphasis">Destination Port</EM><ACLASS="indexterm"NAME="AUTOID-950"></A>are contained in the first word of the segment header.Correctly passing data to and fromthe Application Layer is an important part of what the Transport Layerservices do.<ACLASS="indexterm"NAME="AUTOID-952"></A><ACLASS="indexterm"NAME="AUTOID-953"></A></P><H4CLASS="figure"><ACLASS="title"NAME="TCP2-CH-1-FIG-10">Figure 1.11: TCP data stream</A></H4><IMGCLASS="graphic"SRC="figs/tcp2_0111.gif"ALT="Figure 1.11"></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch01_05.htm"TITLE="1.5 Internet Layer"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 1.5 Internet Layer"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="TCP/IP Network Administration"><IMGSRC="../gifs/txthome.gif"ALT="TCP/IP Network Administration"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch01_07.htm"TITLE="1.7 Application Layer"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 1.7 Application Layer"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">1.5 Internet Layer</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">1.7 Application Layer</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><PCLASS="nav"><FONTSIZE="-1">[ <AHREF="../index.htm"TITLE="The Networking CD Bookshelf">Library Home</A> | <AHREF="../dnsbind/index.htm"TITLE="DNS &amp; BIND">DNS &amp; BIND</A> | <AHREF="index.htm"TITLE="TCP/IP Network Administration">TCP/IP</A> | <AHREF="../sendmail/index.htm"TITLE="sendmail">sendmail</A> | <AHREF="../smdref/index.htm"TITLE="sendmail Desktop Reference">sendmail Reference</A> | <AHREF="../firewall/index.htm"TITLE="Building Internet Firewalls">Firewalls</A> | <AHREF="../puis/index.htm"TITLE="Practical UNIX &amp; Internet Security">Practical Security</A> ]</FONT></P></DIV></BODY></HTML>