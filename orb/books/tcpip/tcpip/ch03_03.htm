<HTML><HEAD><TITLE>[Chapter 3] 3.3 Domain Name Service</TITLE><METANAME="DC.title"CONTENT="TCP/IP Network Administration"><METANAME="DC.creator"CONTENT="Craig Hunt"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1999-02-04T01:31:34Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-322-7"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch03_01.htm"TITLE="3. Network Services"><LINKREL="prev"HREF="ch03_02.htm"TITLE="3.2 The Host Table"><LINKREL="next"HREF="ch03_04.htm"TITLE="3.4 Mail Services"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="TCP/IP Network Administration"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,65"HREF="index.htm"ALT="TCP/IP Network Administration"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/tsrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch03_02.htm"TITLE="3.2 The Host Table"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 3.2 The Host Table"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 3<BR>Network Services</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch03_04.htm"TITLE="3.4 Mail Services"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 3.4 Mail Services"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="TCP2-CH-3-SECT-3">3.3 Domain Name Service</A></H2><PCLASS="para"><ACLASS="indexterm"NAME="TCP2-CH-3-IX-DOMAIN-NAME-SERVICE-DNS"></A>The Domain Name System (DNS) overcomes both major weaknesses of the<ACLASS="indexterm"NAME="AUTOID-2486"></A>host table:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">DNS scales well.<ACLASS="indexterm"NAME="AUTOID-2492"></A>It doesn't rely on a single large table; it is a distributed databasesystem that doesn't bog down as the database grows.  DNS currentlyprovides information on approximately 16,000,000 hosts, while lessthan 10,000 are listed in the host table.</P></LI><LICLASS="listitem"><PCLASS="para">DNS guarantees that new host information will be disseminated to therest of the network as it is needed.</P></LI></UL><PCLASS="para">Information is automatically disseminated, and onlyto those who are interested. Here's how it works.If a DNS server receives a request for information about ahost for which it has no information, it passes on the request to an<EMCLASS="emphasis">authoritative server</EM>.<ACLASS="indexterm"NAME="AUTOID-2498"></A>An authoritative server is any server responsible for maintainingaccurate information about the domain being queried. When theauthoritative server answers, the local server saves (<EMCLASS="emphasis">caches</EM>)<ACLASS="indexterm"NAME="AUTOID-2501"></A>the answer for future use. The next time the local server receives arequest for this information, it answers the request itself. Theability to control host information from an authoritative source andto automatically disseminate accurate information makes DNS superiorto the host table, even for networks not connected to the Internet.</P><PCLASS="para">In addition to superseding the host table, DNS also replaces anearlier form of name service. Unfortunately, both the old and newservices are commonly called <EMCLASS="emphasis">name service</EM>. Both are listed in the<EMCLASS="emphasis">/etc/services</EM> file. In that file, the old software is assigned UDPport 42 and is called <EMCLASS="emphasis">nameserver</EM> or <EMCLASS="emphasis">name</EM>. DNS name service isassigned port 53 and is called <EMCLASS="emphasis">domain</EM>. Naturally, there is someconfusion between the two name servers. This text discusses DNS only;when we refer to &quot;name service,&quot; we always mean DNS.</P><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="TCP2-CH-3-SECT-3.1">3.3.1 The Domain Hierarchy</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="TCP2-CH-3-IX-DOMAIN-HIERARCHY"></A>DNS is a distributed hierarchical system for resolving hostnames into<ACLASS="indexterm"NAME="AUTOID-2515"></A>IP addresses. Under DNS, there is no central database with all of theInternet host information. The information is distributed amongthousands of name servers organized into a hierarchy similar to thehierarchy of the UNIX filesystem.  DNS has a <EMCLASS="emphasis">root domain</EM> at the<ACLASS="indexterm"NAME="AUTOID-2518"></A>top of the domain hierarchy that is served by a group of name serverscalled the <EMCLASS="emphasis">root servers</EM>.<ACLASS="indexterm"NAME="AUTOID-2522"></A></P><PCLASS="para">Just as directories in the UNIX filesystem are found byfollowing a path from the root directory, through subordinatedirectories, to the target directory, information about a domain isfound by tracing pointers from the root domain, through subordinatedomains, to the target domain.</P><PCLASS="para">Directly under the root domain are the <EMCLASS="emphasis">top-level domains</EM>. There<ACLASS="indexterm"NAME="AUTOID-2528"></A>are two basic types of top-level domains&nbsp;- geographic and organizational.<ACLASS="indexterm"NAME="AUTOID-2530"></A>Geographic domains have been set aside for each country in the world,and are identified by a two-letter code. For example, the UnitedKingdom is domain UK, Japan is JP, and the United States is US. WhenUS is used as the top-level domain, the second-level domain is usuallya state's two-letter postal abbreviation (e.g., WY for Wyoming). USgeographic domains are usually used by state governments and K-12schools and are not widely used for other hosts within the UnitedStates.</P><PCLASS="para">Within the United States, the most popular top-level domains are<ACLASS="indexterm"NAME="AUTOID-2533"></A>organizational&nbsp;- that is, membership in a domain is based on the typeof organization (commercial, military, etc.) to which the systembelongs.[3]Thetop-level domains used in the United States are:</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[3] There is no relationship betweenthe organizational and geographic domains in the U.S.Each system belongs to either an organizationaldomain <EMCLASS="emphasis">or</EM> a geographical domain, not both. </P></BLOCKQUOTE><DLCLASS="variablelist"><DTCLASS="term"><EMCLASS="emphasis">com</EM></DT><DDCLASS="listitem"><PCLASS="para">Commercial organizations<ACLASS="indexterm"NAME="AUTOID-2545"></A></P></DD><DTCLASS="term"><EMCLASS="emphasis">edu</EM></DT><DDCLASS="listitem"><PCLASS="para">Educational institutions<ACLASS="indexterm"NAME="AUTOID-2552"></A></P></DD><DTCLASS="term"><EMCLASS="emphasis">gov</EM></DT><DDCLASS="listitem"><PCLASS="para">Government agencies<ACLASS="indexterm"NAME="AUTOID-2559"></A></P></DD><DTCLASS="term"><EMCLASS="emphasis">mil</EM></DT><DDCLASS="listitem"><PCLASS="para">Military organizations<ACLASS="indexterm"NAME="AUTOID-2566"></A></P></DD><DTCLASS="term"><EMCLASS="emphasis">net</EM></DT><DDCLASS="listitem"><PCLASS="para">Network support organizations, such as network operation centers<ACLASS="indexterm"NAME="AUTOID-2573"></A></P></DD><DTCLASS="term"><EMCLASS="emphasis">int</EM>&nbsp;&nbsp;</DT><DDCLASS="listitem"><PCLASS="para">International governmental or quasi-governmental organizations<ACLASS="indexterm"NAME="AUTOID-2580"></A></P></DD><DTCLASS="term"><EMCLASS="emphasis">org</EM></DT><DDCLASS="listitem"><PCLASS="para">Organizations that don't fit in any of the above, such as non-profitorganizations<ACLASS="indexterm"NAME="AUTOID-2587"></A></P></DD></DL><PCLASS="para">Several proposals have been made to increase the number of top-leveldomains. The proposed domains are called <EMCLASS="emphasis">generic top leveldomains</EM> or gTLDs. The proposals call for the creation of additionaltop-level domains and for the creation of new registrars to manage thedomains.  All of the current domains are handled by a singleregistrar&nbsp;- the InterNIC. One motivation for these efforts is thehuge size of the <EMCLASS="emphasis">.com</EM> domain. It is so large some people feel itwill be difficult to maintain an efficient <EMCLASS="emphasis">.com</EM> database.  Butthe largest motivation for creating new gTLDs is money.  Now that itcharges fifty dollars a year for domain registration, some people seethe InterNIC as a profitable monopoly. They have asked for theopportunity to create their own domain registration &quot;businesses.&quot; Aquick way to respond to that request is to create more officialtop-level domains and more registrars.  The best known gTLDs proposalis the one from the <EMCLASS="emphasis">International Ad Hoc Committee</EM> (IAHC).  TheIAHC proposes the following new generic top-level domains:</P><DLCLASS="variablelist"><DTCLASS="term"><EMCLASS="emphasis">firm</EM></DT><DDCLASS="listitem"><PCLASS="para">businesses or firms</P></DD><DTCLASS="term"><EMCLASS="emphasis">store</EM></DT><DDCLASS="listitem"><PCLASS="para">businesses selling goods</P></DD><DTCLASS="term"><EMCLASS="emphasis">web</EM></DT><DDCLASS="listitem"><PCLASS="para">organizations emphasizing the World Wide Web</P></DD><DTCLASS="term"><EMCLASS="emphasis">arts</EM></DT><DDCLASS="listitem"><PCLASS="para">cultural and entertainment organizations</P></DD><DTCLASS="term"><EMCLASS="emphasis">rec</EM></DT><DDCLASS="listitem"><PCLASS="para">recreational and entertainment organizations</P></DD><DTCLASS="term"><EMCLASS="emphasis">info</EM></DT><DDCLASS="listitem"><PCLASS="para">sites providing information services</P></DD><DTCLASS="term"><EMCLASS="emphasis">nom</EM></DT><DDCLASS="listitem"><PCLASS="para">individuals or organizations that want to define a personal nomenclature</P></DD></DL><PCLASS="para">Will the IAHC proposal be adopted? Will it be modified? Will anotherproposal win out? I don't know. There are several other proposals,and as you would expect when money is involved, plenty of controversy.At this writing the only official organizational domain names are: <EMCLASS="emphasis">com</EM>,<EMCLASS="emphasis">edu</EM>, <EMCLASS="emphasis">gov</EM>, <EMCLASS="emphasis">mil</EM>, <EMCLASS="emphasis">net</EM>, <EMCLASS="emphasis">int</EM>, and <EMCLASS="emphasis">org</EM>.</P><PCLASS="para"><ACLASS="xref"HREF="ch03_03.htm#TCP2-CH-3-FIG-0"TITLE="Domain hierarchy">Figure 3.1</A>illustrates the domain hierarchy by using the organizational top-leveldomains. At the top is the root. Directly below the root domain arethe top-level domains. The root servers only have complete informationabout the top-level domains. No servers, not even the root servers,have complete information about all domains, but the root servers havepointers to the servers for the second-level domains.[4]So while the root servers may not know the answer to a query, theyknow who to ask.<ACLASS="indexterm"NAME="AUTOID-2647"></A></P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[4] <ACLASS="xref"HREF="ch03_03.htm#TCP2-CH-3-FIG-1"TITLE="Non-recursive query">Figure 3.2</A> shows two second-level domains: <EMCLASS="emphasis">nih</EM> under <EMCLASS="emphasis">gov</EM>and <EMCLASS="emphasis">nuts</EM> under <EMCLASS="emphasis">com</EM>.</P></BLOCKQUOTE><H4CLASS="figure"><ACLASS="title"NAME="TCP2-CH-3-FIG-0">Figure 3.1: Domain hierarchy</A></H4><IMGCLASS="graphic"SRC="figs/tcp2_0301.gif"ALT="Figure 3.1"></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="TCP2-CH-3-SECT-3.2">3.3.2 Creating Domains and Subdomains</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="TCP2-CH-3-IX-DOMAIN-CREATING"></A>The Network Information Center<ACLASS="indexterm"NAME="AUTOID-2657"></A>has the authority to allocate domains.  To obtain a domain, you applyto the NIC for authority to create a domain under one of the top-leveldomains.  Once the authority to create a domain is granted, you cancreate additional domains, called <EMCLASS="emphasis">subdomains</EM>, under your<ACLASS="indexterm"NAME="AUTOID-2660"></A>domain. Let's look at how this works at our imaginary nut packingcompany.</P><PCLASS="para">Our company is a commercial profit-making (we hope) enterprise. Itclearly falls into the <EMCLASS="emphasis">com</EM> domain. We apply to the NIC forauthority to create a domain named <EMCLASS="emphasis">nuts</EM> within the <EMCLASS="emphasis">com</EM>domain. The request for the new domain contains the hostnames andaddresses of at least two servers that will provide name service forthe new domain. (<ACLASS="xref"HREF="ch04_01.htm"TITLE="Getting Started ">Chapter 4, <CITECLASS="chapter">Getting Started </CITE></A> discusses the domain name application.) When the NIC approves the request, it adds pointers in the <EMCLASS="emphasis">com</EM>domain to the new domain's name servers. Now when queries arereceived by the root servers for the <EMCLASS="emphasis">nuts.com</EM> domain, the queriesare referred to the new name servers.</P><PCLASS="para">The NIC's approval grants us complete authority over our new domain.Any registered domain has authority to divide its domain intosubdomains. Our imaginary company can create separate domains for thesales organization (<EMCLASS="emphasis">sales.nuts.com</EM>) and for the packing plant(<EMCLASS="emphasis">plant.nuts.com</EM>) without consulting the NIC.The decision to add subdomains is completely up to the localdomain administrator.</P><PCLASS="para">Name assignment is, in some ways, similar to address assignment. TheNIC assigns a network address to an organization, and the organizationassigns subnet addresses and host addresses within the range of thatnetwork address. Similarly, the NIC assigns a domain to anorganization, and the organization assigns subdomains and hostnameswithin that domain. The NIC is the central authority that delegatesauthority and distributes control over names and addresses toindividual organizations. Once that authority has been delegated, theindividual organization is responsible for managing the names andaddresses it has been assigned.</P><PCLASS="para">The parallel between subnet<ACLASS="indexterm"NAME="AUTOID-2674"></A>and subdomain assignment can cause confusion. Subnets and subdomainsare not linked. A subdomain may contain information about hosts fromseveral different networks.  Creating a new subnet does not requirecreating a new subdomain, and creating a new subdomain does notrequire creating a new subnet.</P><PCLASS="para">A new subdomain becomes accessible when pointers to the servers for thenew domain are placed in the domain above it (see <ACLASS="xref"HREF="ch03_03.htm#TCP2-CH-3-FIG-0"TITLE="Domain hierarchy">Figure 3.1</A>Remote servers cannot locate the <EMCLASS="emphasis">nuts.com</EM> domain until a pointer to itsserver is placed in the <EMCLASS="emphasis">com</EM> domain. Likewise, the subdomains<EMCLASS="emphasis">sales</EM> and <EMCLASS="emphasis">plant</EM> cannot be accessed until pointers to themare placed in <EMCLASS="emphasis">nuts.com</EM>. The DNS database record that points tothe name servers for a domain is the NS (<EMCLASS="emphasis">name server</EM>) record.This record contains the name of the domain and the name of the hostthat is a server for that domain. <ACLASS="xref"HREF="ch08_01.htm"TITLE="Configuring DNS Name Service ">Chapter 8, <CITECLASS="chapter">Configuring DNS Name Service </CITE></A>,discusses the actual DNS database. For now, let's just think of theserecords as pointers.<ACLASS="indexterm"NAME="AUTOID-2685"></A></P><H4CLASS="figure"><ACLASS="title"NAME="TCP2-CH-3-FIG-1">Figure 3.2: Non-recursive query</A></H4><IMGCLASS="graphic"SRC="figs/tcp2_0302.gif"ALT="Figure 3.2"><PCLASS="para"><ACLASS="xref"HREF="ch03_03.htm#TCP2-CH-3-FIG-1"TITLE="Non-recursive query">Figure 3.2</A>illustrates how the NS records are used as pointers. A localserver has a request to resolve <EMCLASS="emphasis">salt.plant.nuts.com</EM> into an IPaddress. The server has no information on <EMCLASS="emphasis">nuts.com</EM> in its cache,so it queries a root server (<EMCLASS="emphasis">terp.umd.edu</EM> in our example) forthe address. The root server replies with an NS record that points to<EMCLASS="emphasis">almond.nuts.com</EM> as the source of information on <EMCLASS="emphasis">nuts.com</EM>.The local server queries <EMCLASS="emphasis">almond</EM>, which points it to<EMCLASS="emphasis">pack.plant.nuts.com</EM> as the server for <EMCLASS="emphasis">plant.nuts.com</EM>. Thelocal server then queries <EMCLASS="emphasis">pack.plant.nuts.com</EM>, and finallyreceives the desired IP address. The local server caches the A (address)record and each of the NS records. The next time it has a query for<EMCLASS="emphasis">salt.plant.nuts.com</EM>, it will answer the query itself. And the nexttime the server has a query for other information in the <EMCLASS="emphasis">nuts.com</EM>domain, it will go directly to <EMCLASS="emphasis">almond</EM> without involving a rootserver.</P><PCLASS="para"><ACLASS="xref"HREF="ch03_03.htm#TCP2-CH-3-FIG-1"TITLE="Non-recursive query">Figure 3.2</A>is an example of a non-recursive query. In a <EMCLASS="emphasis">non-recursive</EM><ACLASS="indexterm"NAME="AUTOID-2707"></A>query, the remote server tells the local server who to ask next. Thelocal server must follow the pointers itself. In a <EMCLASS="emphasis">recursive</EM><ACLASS="indexterm"NAME="AUTOID-2710"></A>search, the remote server follows the pointers and returns the finalanswer to the local server. The root servers generally perform onlynon-recursive searches.<ACLASS="indexterm"NAME="AUTOID-2712"></A></P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="TCP2-CH-3-SECT-3.3">3.3.3 Domain Names</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="TCP2-CH-3-IX-DOMAIN-NAME-DN"></A>Domain names reflect the domain hierarchy. Domain names are writtenfrom most specific (a hostname) to least specific (a top-leveldomain), with each part of the domain name separated by a dot.[5]A fully qualified domain name (FQDN) starts with a specific hostand ends with a top-level domain. <EMCLASS="emphasis">peanut.nuts.com</EM> is the FQDN of workstation <EMCLASS="emphasis">peanut</EM>, in the <EMCLASS="emphasis">nuts</EM> domain, of the <EMCLASS="emphasis">com</EM>domain.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[5] The root domain is identified by a single dot; i.e., the root nameis a null name written simply as &quot;<CODECLASS="literal">.</CODE>&quot;.</P></BLOCKQUOTE><PCLASS="para">Domain names are not always written as fully qualified domain names.Domain names can be written relative to a <EMCLASS="emphasis">default domain</EM> in the<ACLASS="indexterm"NAME="AUTOID-2728"></A>same way that UNIX pathnames are written relative to the current(default) working directory. DNS adds the default domain to the userinput when constructing the query for the name server. For example, ifthe default domain is <EMCLASS="emphasis">nuts.com</EM>, a user can omit the<EMCLASS="emphasis">nuts.com</EM> extension for any hostnames in that domain.<EMCLASS="emphasis">almond.nuts.com</EM> could be addressed simply as <EMCLASS="emphasis">almond</EM>. DNSadds the default domain <EMCLASS="emphasis">nuts.com</EM>.</P><PCLASS="para">This feature is implemented in different ways on different systems, butthere are two predominant techniques. On some systems the extension isadded to every hostname request unless it <EMCLASS="emphasis">ends</EM> with a dot, i.e.,is qualified out to the root. For example, assume that there is a hostnamed <EMCLASS="emphasis">salt</EM> in the subdomain <EMCLASS="emphasis">plant</EM> of the <EMCLASS="emphasis">nuts.com</EM>domain. <EMCLASS="emphasis">salt.plant</EM> does not end with a dot, so <EMCLASS="emphasis">nuts.com</EM> isadded to it giving the domain name <EMCLASS="emphasis">salt.plant.nuts.com</EM>. On mostsystems, the extension is added only if there is no dotembedded in the requested hostname. On this type of system,<EMCLASS="emphasis">salt.plant</EM> would not be extended and would therefore not beresolved by the name server because <EMCLASS="emphasis">plant</EM> is not a valid top-leveldomain. But <EMCLASS="emphasis">almond</EM>, which contains no embedded dot, wouldbe extended with <EMCLASS="emphasis">nuts.com</EM>, giving the valid domain name<EMCLASS="emphasis">almond.nuts.com</EM>.</P><PCLASS="para">How the default domain is used<ACLASS="indexterm"NAME="AUTOID-2750"></A>and how queries are constructed variesdepending on software implementation. It can even vary by releaselevel. For this reason, you should exercise caution when embedding ahostname in a program. Only a fully qualified domain name or an IP<ACLASS="indexterm"NAME="AUTOID-2754"></A>address is immune from changes in the name server software.<ACLASS="indexterm"NAME="AUTOID-2758"></A></P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="TCP2-CH-3-SECT-3.4">3.3.4 BIND, resolver, and named</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="TCP2-CH-3-IX-BERKELEY-INTERNET-NAME-DOMAIN-BIND"></A>The implementation of DNS used on most UNIX systems is the <EMCLASS="emphasis">BerkeleyInternet Name Domain</EM> (BIND) software. Descriptions in this text arebased on the BIND name server implementation.</P><PCLASS="para">DNS name service software is conceptually divided into twocomponents&nbsp;- a resolver and a name server. The <EMCLASS="emphasis">resolver</EM> is thesoftware that forms the query; it asks the questions. The <EMCLASS="emphasis">name<ACLASS="indexterm"NAME="AUTOID-2768"></A>server</EM> is the process that responds to the query; it answers thequestions.</P><PCLASS="para">The resolver does not exist as a distinct process running on thecomputer. Rather, the resolver is a library of software routines(called the &quot;resolver code&quot;)<ACLASS="indexterm"NAME="AUTOID-2772"></A>that is linked into any program that needsto look up addresses. This library knows how to ask the name serverfor host information.</P><PCLASS="para">Under BIND, all computers use resolver code, but not all computers runthe name server process.A computer that does not run alocal name server process and relies on other systems for all nameservice answers is called a <EMCLASS="emphasis">resolver-only</EM> system. Resolver-only<ACLASS="indexterm"NAME="AUTOID-2777"></A>configurations are common on single user systems. Larger UNIX<ACLASS="indexterm"NAME="AUTOID-2779"></A>systems run a local name server process.</P><PCLASS="para">The BIND name server runs as a distinct process called <EMCLASS="emphasis">named</EM><ACLASS="indexterm"NAME="AUTOID-2784"></A>(pronounced &quot;name&quot; &quot;d&quot;). Name servers are classified differentlydepending on how they are configured. The three main categories ofname servers are:</P><DLCLASS="variablelist"><DTCLASS="term"><EMCLASS="emphasis">Primary</EM></DT><DDCLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-2793"></A>The <EMCLASS="emphasis">primary server</EM> is the server from which all data about adomain is derived. The primary server loads the domain's informationdirectly from a disk file created by the domain administrator. Primaryservers are <EMCLASS="emphasis">authoritative</EM>,<ACLASS="indexterm"NAME="AUTOID-2797"></A>meaning they have complete information about their domain and theirresponses are always accurate. There should be only one primary serverfor a domain.&#13;</P></DD><DTCLASS="term"><EMCLASS="emphasis">Secondary</EM></DT><DDCLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-2804"></A><EMCLASS="emphasis">Secondary servers</EM> transfer the entire domain database from theprimary server. A particular domain's database file is called a<EMCLASS="emphasis">zone file</EM>; copying this file to a secondary server is called a<ACLASS="indexterm"NAME="AUTOID-2808"></A><EMCLASS="emphasis">zone file transfer</EM>. A secondary server assures that it hascurrent information about a domain by periodically transferring thedomain's zone file. Secondary servers are also authoritative for theirdomain.</P></DD><DTCLASS="term"><EMCLASS="emphasis">Caching-only</EM></DT><DDCLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-2817"></A><EMCLASS="emphasis">Caching-only servers</EM> get the answers to all name service queriesfrom other name servers. Once a caching server has received an answerto a query, it caches the information and will use it in the future toanswer queries itself. Most name servers cache answers and use them inthis way. What makes the caching-only server unique is that this isthe only technique it uses to build its domain database. Cachingservers are <EMCLASS="emphasis">non-authoritative</EM>,<ACLASS="indexterm"NAME="AUTOID-2821"></A>meaning that their information is second-hand and incomplete, thoughusually accurate.</P></DD></DL><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-2824"></A>The relationship between the different types of servers is anadvantage that DNS has over the host table for most networks, evenvery small networks. Under DNS, there should be only one primary nameserver for each domain. DNS data is entered into the primary server'sdatabase by the domain administrator.<ACLASS="indexterm"NAME="AUTOID-2827"></A>Therefore, the administrator has central control of the hostnameinformation. An automatically distributed, centrally controlleddatabase is an advantage for a network of any size. When you add a newsystem to the network, you don't need to modify the <EMCLASS="emphasis">/etc/hosts</EM><ACLASS="indexterm"NAME="AUTOID-2831"></A><ACLASS="indexterm"NAME="AUTOID-2835"></A>files on every node in the network; you modify only the DNS databaseon the primary server. The information is automatically disseminatedto the other servers by full zone transfers<ACLASS="indexterm"NAME="AUTOID-2838"></A>or by caching single answers.<ACLASS="indexterm"NAME="AUTOID-2840"></A><ACLASS="indexterm"NAME="AUTOID-2843"></A></P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="TCP2-CH-3-SECT-3.5">3.3.5 Network Information Service</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="TCP2-CH-3-IX-NETWORK-INFORMATION-SERVICE-NIS"></A>The <EMCLASS="emphasis">Network Information Service</EM> (NIS)[6]is an administrative database system developed by Sun<ACLASS="indexterm"NAME="AUTOID-2854"></A>Microsystems. It provides central control and automatic disseminationof important administrative files. NIS can be used in conjunction withDNS, or as an alternative to it.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[6] NIS was formerly called the &quot;Yellow Pages,&quot; or <EMCLASS="emphasis">yp</EM>. Although the namehas changed, the abbreviation <EMCLASS="emphasis">yp</EM> is still used.</P></BLOCKQUOTE><PCLASS="para">NIS and DNS have similarities and differences. Like DNS, theNetwork Information Service overcomes the problem of accuratelydistributing the host table, but unlike DNS, it provides service onlyfor local area networks. NIS is not intended as a service for theInternet as a whole. Another difference is that NIS provides access toa wider range of information than DNS&nbsp;- much more thanname-to-address conversions. It converts several standard UNIX filesinto databases that can be queried over the network. These databasesare called <EMCLASS="emphasis">NIS maps</EM>.<ACLASS="indexterm"NAME="AUTOID-2858"></A></P><PCLASS="para">NIS converts files such as <EMCLASS="emphasis">/etc/hosts</EM> and<ACLASS="indexterm"NAME="AUTOID-2863"></A><ACLASS="indexterm"NAME="AUTOID-2867"></A><ACLASS="indexterm"NAME="AUTOID-2870"></A><ACLASS="indexterm"NAME="AUTOID-2873"></A><EMCLASS="emphasis">/etc/networks</EM> into maps.  The maps can be stored on a centralserver where they can be centrally maintained while still being fullyaccessible to the NIS clients.  Because the maps can be both centrallymaintained and automatically disseminated to users, NIS overcomes amajor weakness of the host table. But NIS is not an alternative to DNSfor Internet hosts, because the host table, and therefore NIS,contains only a fraction of the information available to DNS. For thisreason DNS and NIS are usually used together.</P><PCLASS="para">This section has introduced the concept of hostnames and providedan overview of the various techniques used to translate hostnames intoIP addresses. This is by no means the complete story. Assigning hostnames and managing name service are important tasks for the networkadministrator. These topics are revisited several times in thisbook and discussed in extensive detail in <ACLASS="xref"HREF="ch08_01.htm"TITLE="Configuring DNS Name Service ">Chapter 8</A>.</P><PCLASS="para">Name service is not the only service that you will install on yournetwork. Another service that you are sure to use is electronic mail.<ACLASS="indexterm"NAME="AUTOID-2881"></A><ACLASS="indexterm"NAME="AUTOID-2882"></A></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch03_02.htm"TITLE="3.2 The Host Table"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 3.2 The Host Table"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="TCP/IP Network Administration"><IMGSRC="../gifs/txthome.gif"ALT="TCP/IP Network Administration"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch03_04.htm"TITLE="3.4 Mail Services"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 3.4 Mail Services"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">3.2 The Host Table</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">3.4 Mail Services</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><PCLASS="nav"><FONTSIZE="-1">[ <AHREF="../index.htm"TITLE="The Networking CD Bookshelf">Library Home</A> | <AHREF="../dnsbind/index.htm"TITLE="DNS &amp; BIND">DNS &amp; BIND</A> | <AHREF="index.htm"TITLE="TCP/IP Network Administration">TCP/IP</A> | <AHREF="../sendmail/index.htm"TITLE="sendmail">sendmail</A> | <AHREF="../smdref/index.htm"TITLE="sendmail Desktop Reference">sendmail Reference</A> | <AHREF="../firewall/index.htm"TITLE="Building Internet Firewalls">Firewalls</A> | <AHREF="../puis/index.htm"TITLE="Practical UNIX &amp; Internet Security">Practical Security</A> ]</FONT></P></DIV></BODY></HTML>