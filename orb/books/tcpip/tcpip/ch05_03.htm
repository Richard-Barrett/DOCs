<HTML><HEAD><TITLE>[Chapter 5] 5.3 The BSD Kernel Configuration File </TITLE><METANAME="DC.title"CONTENT="TCP/IP Network Administration"><METANAME="DC.creator"CONTENT="Craig Hunt"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1999-02-04T01:33:33Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-322-7"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch05_01.htm"TITLE="5. Basic Configuration "><LINKREL="prev"HREF="ch05_02.htm"TITLE="5.2 Linux Kernel Configuration "><LINKREL="next"HREF="ch05_04.htm"TITLE="5.4 The Internet Daemon "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="TCP/IP Network Administration"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,65"HREF="index.htm"ALT="TCP/IP Network Administration"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/tsrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch05_02.htm"TITLE="5.2 Linux Kernel Configuration "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 5.2 Linux Kernel Configuration "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 5<BR>Basic Configuration </FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch05_04.htm"TITLE="5.4 The Internet Daemon "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 5.4 The Internet Daemon "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="TCP2-CH-5-SECT-3">5.3 The BSD Kernel Configuration File </A></H2><PCLASS="para"><ACLASS="indexterm"NAME="TCP2-CH-5-IX-BSD-SYSTEMS-KERNEL-CONFIGURATION-FILE"></A>The BSD UNIX kernel is a C program compiled and installed by <BCLASS="emphasis.bold">make</B>.The <BCLASS="emphasis.bold">config</B> command reads the kernel configuration file andgenerates the files (including the Makefile) needed to compile and linkthe kernel. On FreeBSD systems,<ACLASS="indexterm"NAME="AUTOID-5202"></A>the kernel configuration file is locatedin the directory<ACLASS="indexterm"NAME="AUTOID-5204"></A><ACLASS="indexterm"NAME="AUTOID-5207"></A><EMCLASS="emphasis">/usr/src/sys/i386/conf</EM>.[5]</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[5] <EMCLASS="emphasis">/usr/src/sys</EM> is symbolically linked to <EMCLASS="emphasis">/sys</EM>. We use<EMCLASS="emphasis">/usr/src/sys</EM> only as an example. Your system may use anotherdirectory.</P></BLOCKQUOTE><PCLASS="para">A large kernel configuration file named <EMCLASS="emphasis">GENERIC</EM> is delivered withthe FreeBSD system. The <EMCLASS="emphasis">GENERIC</EM> kernel file<ACLASS="indexterm"NAME="AUTOID-5218"></A>configures all ofthe standard devices for your system&nbsp;- including everything necessaryfor TCP/IP. No modifications are necessary for the <EMCLASS="emphasis">GENERIC</EM> kernelto run basic TCP/IP services. The reasons for modifying the BSD kernelare the same as those discussed for the Linux kernel: to make a smaller,more efficient kernel, or to add new features.</P><PCLASS="para">There is no standard name for a BSD kernel configuration file. When youcreate a configuration file, choose any name you wish. By convention,BSD kernel configuration filenames use uppercase letters. To createa new configuration, copy <EMCLASS="emphasis">GENERIC</EM> to the new file and then edit thenewly created file. The following creates a new configuration filecalled <EMCLASS="emphasis">FILBERT</EM>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"># cd /usr/src/sys/i386/conf# cp GENERIC FILBERT</PRE></BLOCKQUOTE></P><PCLASS="para">If the kernel has been modified on your system, the systemadministrator will have created a new configuration file in the<EMCLASS="emphasis">/usr/src/sys/i386/conf</EM> directory. The kernel configuration filecontains many configuration commands that cover all aspects of the systemconfiguration. This text discusses only those parameters that directlyaffect TCP/IP configuration. See the documentation that comes withthe FreeBSD system for information about the other configuration commands.</P><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="TCP2-CH-5-SECT-3.1">5.3.1 TCP/IP in the BSD Kernel </A></H3><PCLASS="para">For a network administrator, it is more important to understand whichkernel statements are necessary to configure TCP/IP than to understandthe detailed structure of each statement. Three types of statements areused to configure TCP/IP in the BSD kernel: options, pseudo-device,and device statements.</P><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="TCP2-CH-5-SECT-3.1.1">5.3.1.1 Options </A></H4><PCLASS="para"><ACLASS="indexterm"NAME="TCP2-CH-5-IX-OPTIONS-STATEMENT"></A>The options statement tells the kernel to compile a softwareoption into the system.The options statement that is most important to TCP/IP is:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">options INET                   # basic networking support--mandatory</PRE></BLOCKQUOTE></P><PCLASS="para">Every BSD-based system running TCP/IP has an <BCLASS="emphasis.bold">options INET</B><ACLASS="indexterm"NAME="AUTOID-5241"></A>statement in its kernel configuration file. The statement produces a<BCLASS="emphasis.bold">-DINET</B> argument for the C complier, which in turn causes the IP,ICMP, TCP, UDP, and ARP modules to be compiled into the kernel. Thissingle statement incorporates the basic transport and IP datagramservices into the system. Never remove this statement from theconfiguration file.</P><PCLASS="para">There are several other options statements in addition to the requiredINET option. Some of these perform functions identical to features wehave already seen in the Linux configuration. A few have no directparallels in the Linux configuration.</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">options GATEWAY                # internetwork gateway</PRE></BLOCKQUOTE></P><PCLASS="para">The GATEWAY option<ACLASS="indexterm"NAME="AUTOID-5250"></A>determines whether the system forwards IP datagramsdestined for another computer. When this option is selected, the systemforwards datagrams<ACLASS="indexterm"NAME="AUTOID-5253"></A>if it has more than one network interface; i.e.,the system is assumed to be a gateway. You don't need GATEWAY on asystem with a single network interface. Hosts&nbsp;- systems with one networkinterface&nbsp;- do not forward the packets of other systems, because this would hide configuration problems on other systems on the network. If the othersystems are incorrectly delivering datagrams to a host, forwarding thedatagrams makes it appear as if they were correctly addressed and makes itdifficult to detect the real problem. On occasion, you might even wantto force a system that has multiple network interfaces not to forwarddatagrams by commenting <BCLASS="emphasis.bold">options GATEWAY</B> out of your configuration.This is useful for preventing a multi-homed host<ACLASS="indexterm"NAME="AUTOID-5257"></A>(a host with two networkinterfaces) from acting as a gateway.</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">options IPFIREWALL             # firewall</PRE></BLOCKQUOTE></P><PCLASS="para">The IPFIREWALL option prepares the system to act as a firewall.<ACLASS="indexterm"NAME="AUTOID-5263"></A>The fullfirewall implementation requires application software and other tools.However, certain functions of a firewall, such as address filtering,must be implemented in the kernel. This option requests those kernel-level services. A variant of this option is IPFIREWALL_VERBOSE, whichenables the same basic kernel services with enhanced error reporting.The enhanced errors can be useful for detecting intrusions, but theyincrease the size of the kernel.</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">options MROUTING               # Multicast routing</PRE></BLOCKQUOTE></P><PCLASS="para">The MROUTING option adds multicast routing<ACLASS="indexterm"NAME="AUTOID-5269"></A>support to the kernel. A multicastkernel is necessary for the system to be able to interpret multicastaddresses and for the system to supportmulticast applications like<ACLASS="indexterm"NAME="AUTOID-5272"></A>MBONE and Internet Talk Radio.<ACLASS="indexterm"NAME="AUTOID-5274"></A></P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">options IPACCT                 # ipaccounting</PRE></BLOCKQUOTE></P><PCLASS="para">The IPACCT option adds additional code and counters that keep trackof network usage, which is helpful for billing purposes.</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">options ARP_PROXYALL           # global proxy ARP</PRE></BLOCKQUOTE></P><PCLASS="para">The ARP_PROXYALL option turns the system into a proxy ARP server.<ACLASS="indexterm"NAME="AUTOID-5282"></A><ACLASS="indexterm"NAME="AUTOID-5285"></A>The Address Resolution Protocol (ARP) is discussed in <ACLASS="xref"HREF="ch02_01.htm"TITLE="Delivering the Data">Chapter 2, <CITECLASS="chapter">Delivering the Data</CITE></A>. ProxyARP is a variant on the standard protocol in which a server answers theARP request for its clients. Here's how it works. Host A sends out anARP request for the Ethernet address of host B. The proxy ARP server,C, hears the request and sends an ARP response back to A claiming thatC's Ethernet address is the address of host B. A then sends trafficintended for B to C because it uses C's Ethernet address. C is thereforeresponsible for forwarding the traffic on to B. The proxy ARP server isusually a router and proxy ARP is used as a means of forwarding trafficbetween systems that cannot use normal routing for that traffic.</P><PCLASS="para">In <ACLASS="xref"HREF="ch02_01.htm"TITLE="Delivering the Data">Chapter 2</A>, we saw how a system can act as a proxy ARP server forindividual addresses using the <BCLASS="emphasis.bold">publish</B> option on the <BCLASS="emphasis.bold">arp</B> command.<ACLASS="indexterm"NAME="AUTOID-5292"></A>The ARP_PROXYALL kernel option creates a server for <EMCLASS="emphasis">all</EM> addresses;not just for individual addresses configured in the ARP table.</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">options &quot;TCP_COMPAT_42&quot;        # emulate 4.2BSD TCP bugs</PRE></BLOCKQUOTE></P><PCLASS="para">This option prevents connections between 4.2 and FreeBSD systemsfrom hanging by adjusting FreeBSD<ACLASS="indexterm"NAME="AUTOID-5299"></A>to ignore mistakes made by 4.2.This parameter also disables UDP checksum calculations. The UDP checksum<ACLASS="indexterm"NAME="AUTOID-5301"></A><ACLASS="indexterm"NAME="AUTOID-5304"></A>calculation in BSD 4.2 was incorrect, so when a host receives a UDP packetfrom a system running 4.2, it causes a checksum error. This parametertells the system to ignore these errors. In addition, setting thisparameter prevents the system from sending TCP Sequence Numbers thatare interpreted as negative numbers by 4.2 systems. With this option,the initial sequence number will be set to zero for each connection.Forcing sequence numbers to zero is a potential security problem because<ACLASS="indexterm"NAME="AUTOID-5307"></A>it allows an intruder to guess the sequence number and to interject bogus<ACLASS="indexterm"NAME="AUTOID-5310"></A>packets into a TCP stream. For this reason, avoid using this parameterunless you must.<ACLASS="indexterm"NAME="AUTOID-5313"></A></P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="TCP2-CH-5-SECT-3.1.2">5.3.1.2 Pseudo-device </A></H4><PCLASS="para"><ACLASS="indexterm"NAME="TCP2-CH-5-IX-PSEUDO-DEVICE-STATEMENT"></A>The second statement required by TCP/IP in all BSD configurations is apseudo-device statement. A <EMCLASS="emphasis">pseudo-device</EM> is a device driver notdirectly associated with an actual piece of hardware. The pseudo-devicestatement creates a header (<EMCLASS="emphasis">.h</EM>)<ACLASS="indexterm"NAME="AUTOID-5321"></A>file that is identified by thepseudo-device name in the kernel directory. For example, the statementshown below creates the file <EMCLASS="emphasis">loop.h</EM>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">pseudo-device   loop           # loopback network--mandatory</PRE></BLOCKQUOTE></P><PCLASS="para">The loop pseudo-device is necessary to create the loopback device<ACLASS="indexterm"NAME="AUTOID-5328"></A>(lo0). This device is associated with the loopback address 127.0.0.1;it is defined as a pseudo-device because it is not really a piece ofhardware.</P><PCLASS="para">Another pseudo-device that is used on many FreeBSD TCP/IP systems is:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">pseudo-device   ether          # basic Ethernet support</PRE></BLOCKQUOTE></P><PCLASS="para">This statement is necessary to support Ethernet.<ACLASS="indexterm"NAME="AUTOID-5335"></A>The etherpseudo-device is required for full support of ARP<ACLASS="indexterm"NAME="AUTOID-5338"></A>and other Ethernetspecific functions. While it is possible that a system that does nothave Ethernet may not require this statement, it is usually configured,and should remain in your kernel configuration.</P><PCLASS="para">The pseudo-terminals, or ptys,<ACLASS="indexterm"NAME="AUTOID-5342"></A><ACLASS="indexterm"NAME="AUTOID-5344"></A>are other pseudo-devices that areuniversally configured:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">pseudo-device   pty     16     # pseudo-tty's</PRE></BLOCKQUOTE></P><PCLASS="para">This statement defines the virtual terminal devices<ACLASS="indexterm"NAME="AUTOID-5349"></A>used by remote loginservices such as <BCLASS="emphasis.bold">rlogin</B><ACLASS="indexterm"NAME="AUTOID-5353"></A><ACLASS="indexterm"NAME="AUTOID-5356"></A>and <BCLASS="emphasis.bold">telnet</B>. Pseudo-terminals arealso used by many other applications, such as Emacs, that have no directconnection to TCP/IP networking. The number, 16 in the example, is thenumber of ptys created by the kernel. The maximum on a FreeBSD systemis 64.</P><PCLASS="para">Other commonly configured pseudo-devices are those that support SLIP<ACLASS="indexterm"NAME="AUTOID-5360"></A><ACLASS="indexterm"NAME="AUTOID-5362"></A>and PPP.</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">pseudo-device   sl        2    # Serial Line IP</PRE></BLOCKQUOTE></P><PCLASS="para">This statement defines the interface for the Serial Line IP protocol.The number, 2 in the example, defines the number of SLIP pseudo-devicescreated by the kernel. The two devices created here would be addressedas device sl0 and sl1.</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">pseudo-device   ppp       2    # Point-to-point protocol</PRE></BLOCKQUOTE></P><PCLASS="para">The ppp pseudo-device is the interface for the Point-to-Point Protocol.The number, 2 in the example, defines the number of PPP pseudo-devicescreated by the kernel. The two devices created here would be addressedas device ppp0 and ppp1. Two other pseudo-devices directly related toPPP are shown next.</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">pseudo-device   sppp           # Generic synchronous PPPpseudo-device   tun        1   # Tunnel driver(user process ppp)</PRE></BLOCKQUOTE></P><PCLASS="para">The sppp statement adds support for synchronous PPP data link-layer<ACLASS="indexterm"NAME="AUTOID-5373"></A><ACLASS="indexterm"NAME="AUTOID-5375"></A>protocols. Normally, PPP runs over a dial-up line using an asynchronouslink protocol. Asynchronous modems<ACLASS="indexterm"NAME="AUTOID-5377"></A>are the common modems all of ushave on our home computers. Synchronous modems<ACLASS="indexterm"NAME="AUTOID-5380"></A>and synchronous linkprotocols are used on leased lines.</P><PCLASS="para">The tun pseudo-device is a tunnel driver used by user-level PPP software.<ACLASS="indexterm"NAME="AUTOID-5384"></A><EMCLASS="emphasis">Tunneling</EM> is when a system passes one protocol through anotherprotocol; tun is a FreeBSD feature for doing this over PPP links.The number, 1 in the example, is the number of tunnels that will besupported by this kernel.</P><PCLASS="para">The last three pseudo-devices are less frequently used.</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">pseudo-device   fddi           # Generic FDDIpseudo-device   bpfilter   4   # Berkeley packet filterpseudo-device   disc           # Discard device</PRE></BLOCKQUOTE></P><PCLASS="para">The fddi statement adds support for the Fiber Digital Data Interface<ACLASS="indexterm"NAME="AUTOID-5391"></A>(FDDI) to the kernel. FDDI is a local area network standard fortransmitting data at 100M bps over fiber-optic cable.</P><PCLASS="para">The bpfilter statement adds the support necessary for capturing packets.<ACLASS="indexterm"NAME="AUTOID-5394"></A>Capturing packets is an essential part of protocol analyzers;<ACLASS="indexterm"NAME="AUTOID-5397"></A>see <ACLASS="xref"HREF="ch11_01.htm"TITLE="Troubleshooting TCP/IP ">Chapter 11, <CITECLASS="chapter">Troubleshooting TCP/IP </CITE></A>. When the bpfilter statement is included in the BSDkernel, the Ethernet interface can be placed into &quot;promiscuous mode&quot;.[6]<ACLASS="indexterm"NAME="AUTOID-5403"></A>An interface in promiscuous mode passes all packets, not just thoseaddressed to the local system, up to the software at the next layer. Thisfeature is useful for a system administrator troubleshooting a network.But it can also be used by intruders to steal passwords and compromise<ACLASS="indexterm"NAME="AUTOID-5406"></A>security. Use the bpfilter pseudo-device only if you really need it.The number, 4 in the example, indicates the maximum number of Ethernetinterfaces that can be monitored by bpfilter.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[6] This assumes that the Ethernet hardware is capable of functioning inpromiscuous mode. Not all Ethernet boards support this feature.</P></BLOCKQUOTE><PCLASS="para">The final network pseudo-device is disc. It discards all data thatit receives. This device is used only for testing.<ACLASS="indexterm"NAME="AUTOID-5410"></A></P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="TCP2-CH-5-SECT-3.1.3">5.3.1.3 Devices </A></H4><PCLASS="para"><ACLASS="indexterm"NAME="TCP2-CH-5-IX-DEVICE-STATEMENT"></A>Real hardware devices are defined using the device statement. Every hostattached to a TCP/IP network requires some physical hardware for thatattachment. The hardware is declared with a device statement in thekernel configuration file.<ACLASS="indexterm"NAME="TCP2-CH-5-IX-ETHERNET-FREEBSD-DEVICE-DRIVERS-LISTED"></A>There are many possible network interfacesfor TCP/IP, but the most common are Ethernet interfaces. <ACLASS="indexterm"NAME="AUTOID-5419"></A></P><PCLASS="para"><ACLASS="xref"HREF="ch05_03.htm#TCP2-CH-5-TAB-0"TITLE="Ethernet Cards Supported by FreeBSD">Table 5.1</A>lists the Ethernet device drivers available with FreeeBSD 2.1.5.</P><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="TCP2-CH-5-TAB-0">Table 5.1: Ethernet Cards Supported by FreeBSD</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Device</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Description</TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">de0</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">DEC DC21040 PCI adapter</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">ed0</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Western Digital SMC 80xx, Novell NE1000/2000, 3COM 3C503</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">eg0</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">3COM 3C505</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">el0</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">3COM 3C501</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">ep0</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">3COM 3C509</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">fe0</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Fujitsu MB86960A/MB86965A</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">ie0</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">AT&amp;T StarLAN 10 &amp; EN100, 3COM 3C507, N15210</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">ix0</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Intel EtherExpress 16</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">le0</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">DEC EtherWorks 2 and EtherWorks3</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">lnc0</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Isolan, Novell NE2100 and NE32-VL</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">ze0</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">IBM/National Semiconductor PCMCIA adapter</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">zp0</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">3COM Etherlink III PCMICA adapter</TD></TR></TBODY></TABLE><PCLASS="para">A sample device statement shows the general format of the commandsused to configure an Ethernet interface in the FreeBSD kernel:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">device ed0 at isa? port 0x280 net irq 5 iomem 0xd8000 vector edintrdevice de0</PRE></BLOCKQUOTE></P><PCLASS="para">Note that the ed0 device statement defines the bus type (isa), the I/Obase address (port 0x280), the interrupt number (irq 5) and the memoryaddress (iomem 0xd8000). These values should match the values configuredon the adapter card. All of these are standard items for configuringPC hardware.[7]On the other hand, the de0 device statement requires very littleconfiguration because it configures a card attached to the PCI bus.<ACLASS="indexterm"NAME="AUTOID-5475"></A>The PCI is an intelligent bus that can determine the configurationdirectly from the hardware.<ACLASS="indexterm"NAME="AUTOID-5477"></A></P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[7] See <EMCLASS="emphasis">Networking Personal Computers with TCP/IP</EM>, by Craig Hunt(O'Reilly &amp; Associates), for details about PC hardware configuration.</P></BLOCKQUOTE><PCLASS="para">Ethernet is not the only TCP/IP network interface supported by FreeBSD.It supports an experimental ISDN interface<ACLASS="indexterm"NAME="AUTOID-5479"></A>as well as the DEC FDDIadapter. More widely used than these are the serial line interfacesnecessary for SLIP and PPP.</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">device sio0  at isa? port &quot;IO_COM1&quot; tty irq 4  vector siointrdevice sio1  at isa? port &quot;IO_COM2&quot; tty irq 3  vector siointrdevice sio2  at isa? port &quot;IO_COM3&quot; tty irq 5  vector siointrdevice sio3  at isa? port &quot;IO_COM4&quot; tty irq 9  vector siointr</PRE></BLOCKQUOTE></P><PCLASS="para">The four serial interfaces, sio0 through sio3, correspond to the MS-DOSinterfaces COM1 to COM4. These are needed for SLIP and PPP. <ACLASS="xref"HREF="ch06_01.htm"TITLE="Configuring the Interface ">Chapter 6</A>covers other aspects of configuring PPP and SLIP.</P><PCLASS="para">The device statement varies according to the interface beingconfigured. But how do you know which hardware interfaces are installedin your system? Remember that the <EMCLASS="emphasis">GENERIC</EM> kernel<ACLASS="indexterm"NAME="AUTOID-5488"></A>that comes with yourFreeBSD system is configured for a large number of devices. A simpleway to tell which hardware interfaces are installed in your system is tolook at the messages displayed on the console at boot time. These messagesshow all of the devices, including network devices, that the kernel foundduring initialization. Look at the output of the <BCLASS="emphasis.bold">dmesg</B> command.It displays a copy of the console messages generated during the last boot.<ACLASS="indexterm"NAME="AUTOID-5491"></A></P><PCLASS="para">The options, pseudo-device, and device statements found in the kernelconfiguration file tell the system to include the TCP/IP hardware andsoftware in the kernel. The statements in your configuration may varysomewhat from those shown in the previous examples. But you have the samebasic statements in your kernel configuration file. With these basicstatements, FreeBSD UNIX is ready to run TCP/IP.</P><PCLASS="para">You will probably never change any of the variables discussed in thissection. Like everything else in the kernel configuration file, theyusually come correctly configured to run TCP/IP.<ACLASS="indexterm"NAME="AUTOID-5494"></A><ACLASS="indexterm"NAME="AUTOID-5495"></A></P></DIV></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch05_02.htm"TITLE="5.2 Linux Kernel Configuration "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 5.2 Linux Kernel Configuration "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="TCP/IP Network Administration"><IMGSRC="../gifs/txthome.gif"ALT="TCP/IP Network Administration"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch05_04.htm"TITLE="5.4 The Internet Daemon "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 5.4 The Internet Daemon "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">5.2 Linux Kernel Configuration </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">5.4 The Internet Daemon </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><PCLASS="nav"><FONTSIZE="-1">[ <AHREF="../index.htm"TITLE="The Networking CD Bookshelf">Library Home</A> | <AHREF="../dnsbind/index.htm"TITLE="DNS &amp; BIND">DNS &amp; BIND</A> | <AHREF="index.htm"TITLE="TCP/IP Network Administration">TCP/IP</A> | <AHREF="../sendmail/index.htm"TITLE="sendmail">sendmail</A> | <AHREF="../smdref/index.htm"TITLE="sendmail Desktop Reference">sendmail Reference</A> | <AHREF="../firewall/index.htm"TITLE="Building Internet Firewalls">Firewalls</A> | <AHREF="../puis/index.htm"TITLE="Practical UNIX &amp; Internet Security">Practical Security</A> ]</FONT></P></DIV></BODY></HTML>