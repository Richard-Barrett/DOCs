<HTML><HEAD><TITLE>[Chapter 6] 6.3 Installing PPP </TITLE><METANAME="DC.title"CONTENT="TCP/IP Network Administration"><METANAME="DC.creator"CONTENT="Craig Hunt"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1999-02-04T01:34:35Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-322-7"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch06_01.htm"TITLE="6. Configuring the Interface "><LINKREL="prev"HREF="ch06_02.htm"TITLE="6.2 TCP/IP Over a Serial Line "><LINKREL="next"HREF="ch06_04.htm"TITLE="6.4 Installing SLIP "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="TCP/IP Network Administration"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,65"HREF="index.htm"ALT="TCP/IP Network Administration"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/tsrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch06_02.htm"TITLE="6.2 TCP/IP Over a Serial Line "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 6.2 TCP/IP Over a Serial Line "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 6<BR>Configuring the Interface </FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch06_04.htm"TITLE="6.4 Installing SLIP "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 6.4 Installing SLIP "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="TCP2-CH-6-SECT-3">6.3 Installing PPP </A></H2><PCLASS="para"><ACLASS="indexterm"NAME="TCP2-CH-6-IX-POINT-TO-POINT-PROTOCOL-PPP-INSTALLING"></A>The procedures for installing and configuring PPP vary fromimplementation to implementation.[10]In this section, we use the implementation of PPP included with Linux2.0 and the supporting configuration commands that come with it.PPP is an Internet standard and most UNIX systems include support forit in the kernel as part of the standard operating system installation.Usually this does not require any action on your part. Refer to Chapter5 for examples of how PPP is configured in the Linux kernel.<ACLASS="indexterm"NAME="AUTOID-6523"></A>The Linux system installs the PPP physical and data link layersoftware (the HDLC protocol) in the kernel.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[10] Check your system documentation to find out exactly how to configure PPPon your system.</P></BLOCKQUOTE><PCLASS="para">Installing PPP in the kernel is only the beginning. In this sectionwe look at how <BCLASS="emphasis.bold">pppd</B> is configured to provide PPP services on aSlackware 96 Linux system.</P><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="TCP2-CH-6-SECT-3.1">6.3.1 The PPP Daemon </A></H3><PCLASS="para"><ACLASS="indexterm"NAME="TCP2-CH-6-IX-POINT-TO-POINT-PROTOCOL-PPP-DAEMON-PPPD"></A>Point-to-Point Protocol is implemented on the Linux system in the PPPdaemon (<BCLASS="emphasis.bold">pppd</B>), which was derived from a freeware PPP implementationfor BSD systems. <BCLASS="emphasis.bold">pppd</B> can be configured to run in all modes:as a client, as a server, over dial-up connections, and over dedicatedconnections. Clients and servers are familiar concepts from <ACLASS="xref"HREF="ch03_01.htm"TITLE="Network Services">Chapter 3, <CITECLASS="chapter">Network Services</CITE></A>.<ACLASS="indexterm"NAME="AUTOID-6538"></A>A dedicated connection is a direct cable connection or a leased line;neither of which need to have a telephone call placed to establish theconnection.<ACLASS="indexterm"NAME="AUTOID-6540"></A>A dial-up connection is a modem link that is establishedby dialing a telephone number.</P><PCLASS="para">Configuring <BCLASS="emphasis.bold">pppd</B> for a dedicated line is the simplestconfiguration. A dial-up script is not needed for a leased line or directconnection. There is no point in dynamically assigning addresses becausea dedicated line always connects the same two systems. Authentication isof limited use because the dedicated line physically runs between twopoints. There is no way for an intruder to access the link,short of &quot;breaking and entering&quot; or &quot;wiretap.&quot; A single<BCLASS="emphasis.bold">pppd</B> command configures a dedicated PPP link for our Linux system.We place it in the <EMCLASS="emphasis">/etc/rc.d/rc.inet1</EM> file:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">pppd /dev/cua3 56000 crtscts defaultroute</PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="literal">/dev/cua3</CODE> argument selects the device to which PPP is attached.It is, of course, the same port to which the dedicated line is attached.Next, the line speed is specified in bits per second (56000).The remainder of the command line is a series of keyword options.The <BCLASS="emphasis.bold">crtscts</B> option<ACLASS="indexterm"NAME="AUTOID-6551"></A>turns on hardware flow control. The finaloption, <BCLASS="emphasis.bold">defaultroute</B>,<ACLASS="indexterm"NAME="AUTOID-6554"></A>creates a default route using the remoteserver as the default gateway.[11]</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[11] If a default route already exists in the routing table, the<BCLASS="emphasis.bold">defaultroute</B> option is ignored.</P></BLOCKQUOTE><PCLASS="para">PPP exchanges IP addresses during the initial link connectionprocess. If no address is specified on the <BCLASS="emphasis.bold">pppd</B> command line,the daemon sends the address of the local host, which it learns fromDNS or the host table, to the remote host. Likewise, the remote systemsends its address to the local host. The addresses are then used asthe source and destination addresses of the link. You can override<ACLASS="indexterm"NAME="AUTOID-6561"></A>this by specifying the addresses on the command line in the form<EMCLASS="emphasis">local-address</EM><BCLASS="emphasis.bold">:</B><EMCLASS="emphasis">remote-address</EM>. For example:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">pppd /dev/cua3 56000 crtscts defaultroute 172.16.24.1:</PRE></BLOCKQUOTE></P><PCLASS="para">Here we define the local address as 172.16.24.1 and leave the remoteaddress blank. In this case <BCLASS="emphasis.bold">pppd</B> sends the address from thecommand line and waits for the remote server to send its address.The local address is specified on the command line when it is differentfrom the address associated with the local hostname in the host table orthe DNS server. For example, the system might have an Ethernet interfacethat already has an address assigned. If we want to use a differentaddress for the PPP connection, we must specify it on the <BCLASS="emphasis.bold">pppd</B>command line; otherwise, the PPP link will be assigned the same addressas the Ethernet interface.</P><PCLASS="para">The <BCLASS="emphasis.bold">pppd</B> command has many more options than those used inthese examples.[12]In fact, there are so many <BCLASS="emphasis.bold">pppd</B> command-line options,<ACLASS="indexterm"NAME="AUTOID-6580"></A>it is sometimes easier to put them in a file than it is to enter themall on the command line. <BCLASS="emphasis.bold">pppd</B> reads its options from the<EMCLASS="emphasis">/etc/ppp/options</EM> file,<ACLASS="indexterm"NAME="AUTOID-6586"></A><ACLASS="indexterm"NAME="AUTOID-6589"></A>then the <EMCLASS="emphasis">~/.ppprc</EM> file, andfinally from the command line. The order in which they are processedcreates a hierarchy such that options on the command line can overridethose in the <EMCLASS="emphasis">~/.ppprc</EM> file, which can in turn override those in the<EMCLASS="emphasis">/etc/ppp/options</EM> file. This permits the system administrator toestablish certain system-wide defaults in the <EMCLASS="emphasis">/etc/ppp/options</EM> filewhile still permitting the end user to customize the PPP configuration.The <EMCLASS="emphasis">/etc/ppp/options</EM> file is a convenient and flexible way to pass parameters to <BCLASS="emphasis.bold">pppd</B>.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[12] There is a full list of the <BCLASS="emphasis.bold">pppd</B> options in <ACLASS="xref"HREF="appa_01.htm"TITLE="PPP Tools">Appendix A, <CITECLASS="appendix">PPP Tools</CITE></A>.</P></BLOCKQUOTE><PCLASS="para">A single <BCLASS="emphasis.bold">pppd</B> command is all that is needed to set up and configurethe software for a dedicated PPP link. Dial-up connections are morechallenging.<ACLASS="indexterm"NAME="AUTOID-6599"></A></P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="TCP2-CH-6-SECT-3.2">6.3.2 Dial-Up PPP </A></H3><PCLASS="para"><ACLASS="indexterm"NAME="TCP2-CH-6-IX-DIAL-UP-PPP"></A>A direct connect cable can connect just two systems. When a third systemis purchased, it cannot be added to the network. For that reason,most people use expandable network technologies, such as Ethernet,for connecting systems in a local area. Additionally, leased lines areexpensive. They are primarily used by large organizations to connecttogether networks of systems. For these reasons, using PPP for dedicatednetwork connections is less common than using it for dial-up connections.</P><PCLASS="para">Several different utilities provide dial-up supportfor PPP. Dial-up IP (<BCLASS="emphasis.bold">dip</B>)<ACLASS="indexterm"NAME="AUTOID-6607"></A><ACLASS="indexterm"NAME="AUTOID-6609"></A>is a popular package for simplifying the process of dialing the remote server, performing the login, and attaching PPP to theresulting connection. We discuss <BCLASS="emphasis.bold">dip</B> in this section because it ispopular and because it comes with Slackware 96 Linux, which is the systemwe have been using for our PPP examples.</P><PCLASS="para">One of the most important features of <BCLASS="emphasis.bold">dip</B> is a scripting language<ACLASS="indexterm"NAME="AUTOID-6614"></A>that lets you automate all of the steps necessary to set up an operationalPPP link. <ACLASS="xref"HREF="appa_01.htm"TITLE="PPP Tools">Appendix A</A> covers all of the scripting commands supportedby the 3.3.7o-uri version of <BCLASS="emphasis.bold">dip</B>. You can list the commandssupported by your system by running <BCLASS="emphasis.bold">dip</B> in test mode (<BCLASS="emphasis.bold">-t</B>)and then entering the <BCLASS="emphasis.bold">help</B> command:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">&gt; <BCLASS="emphasis.bold">dip -t</B>DIP: Dialup IP Protocol Driver version 3.3.7o-uri (8 Feb 96)Written by Fred N. van Kempen, MicroWalt Corporation.DIP&gt; <BCLASS="emphasis.bold">help</B>DIP knows about the following commands:        beep     bootp    break    chatkey  config           databits dec      default  dial     echo             flush    get      goto     help     if               inc      init     mode     modem    netmask          onexit   parity   password proxyarp print            psend    port     quit     reset    send             shell    sleep    speed    stopbits term             timeout  wait     DIP&gt; <BCLASS="emphasis.bold">quit</B></PRE></BLOCKQUOTE></P><PCLASS="para">These commands can configure the interface, control the executionof the script, and process errors. Only a subset of the commands isrequired for a minimal script:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"># Ask PPP to provide the local IP addressget $local 0.0.0.0# Select the port and set the line speedport cua1speed 38400# Reset the modem and flush the terminalresetflush# Dial the PPP server and wait for the CONNECT responsedial *70,301-555-1234wait CONNECT# Give the server 2 seconds to get readysleep 2# Send a carriage-return to wake up the serversend \r# Wait for the Login&gt; prompt and send the usernamewait ogin&gt;send kristin\r# Wait for the Password&gt; prompt and send the passwordwait word&gt;password# Wait for the PPP server's command-line promptwait &gt;# Send the command required by the PPP serversend ppp enabled\r# Set the interface to PPP modemode PPP# Exit the scriptexit</PRE></BLOCKQUOTE></P><PCLASS="para">The <BCLASS="emphasis.bold">get</B> command<ACLASS="indexterm"NAME="AUTOID-6631"></A>at the beginning of the script allows PPP toprovide the local and remote addresses.  <CODECLASS="literal">$local</CODE> is a script variable.There are several available script variables; all of which are coveredin <ACLASS="xref"HREF="appa_01.htm"TITLE="PPP Tools">Appendix A</A>.  <CODECLASS="literal">$local</CODE> normally stores the local address, which canbe set statically in the script. A PPP server, however, is capable ofassigning an address to the local system dynamically. We take advantageof this capability by giving a local address of all zeros. This peculiarsyntax tells <BCLASS="emphasis.bold">dip</B> to let <BCLASS="emphasis.bold">pppd</B> handle the address assignments.A <BCLASS="emphasis.bold">pppd</B> client can get addresses<ACLASS="indexterm"NAME="AUTOID-6639"></A>in three ways:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">The PPP systems can exchange their local addresses as determined from DNS.This was discussed previously for the dedicated line configuration.</P></LI><LICLASS="listitem"><PCLASS="para">The addresses can be specified on the <BCLASS="emphasis.bold">pppd</B> command line. This wasalso discussed above.</P></LI><LICLASS="listitem"><PCLASS="para">The client can allow the server to assign both addresses. This featureis most commonly used on dial-up lines. It is very popular with serversthat must handle a large number of short-lived connections. A dial-upInternet Service Provider (ISP)<ACLASS="indexterm"NAME="AUTOID-6650"></A>is a good example.</P></LI></UL><PCLASS="para">The next two lines select the physical device to which the modem isconnected and set the speed at which the device operates. The <BCLASS="emphasis.bold">port</B>command assumes the path <EMCLASS="emphasis">/dev</EM>, so the full device path is not used.On most PC UNIX systems the value provided to the <BCLASS="emphasis.bold">port</B> command iscua0, cua1, cua2, or cua3. These values correspond to MS-DOS ports COM1to COM4. The <BCLASS="emphasis.bold">speed</B> command sets the maximum speed used to senddata to the modem on this port. The default speed is 38400. Change itif your modem accepts data at a different speed.</P><PCLASS="para">The <BCLASS="emphasis.bold">reset</B> command<ACLASS="indexterm"NAME="AUTOID-6659"></A>resets the modem by sending it the Hayes<ACLASS="indexterm"NAME="AUTOID-6661"></A>modem interrupt (+++) followed by the Hayes modem reset command (ATZ).This version of <BCLASS="emphasis.bold">dip</B> uses the Hayes modem AT command set andworks only with Hayes-compatible modems.[13]Fortunately, that includes most brands of modems. After being reset,the modem responds with a message indicating that the modem is readyto accept input. The <BCLASS="emphasis.bold">flush</B> command removes this message, andany others that might have been displayed by the modem, out of theinput queue. Use <BCLASS="emphasis.bold">flush</B> to avoid the problems that can be causedby unexpected data in the queue.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[13] If your modem doesn't use the full Hayes modem command set, avoid using<BCLASS="emphasis.bold">dip</B> commands, such as <BCLASS="emphasis.bold">rest</B> and <BCLASS="emphasis.bold">dial</B>, that generateHayes commands. Use <BCLASS="emphasis.bold">send</B> instead. It allows you to send anystring you want to the modem.</P></BLOCKQUOTE><PCLASS="para">The next command dials the remote server.<ACLASS="indexterm"NAME="AUTOID-6673"></A>The <BCLASS="emphasis.bold">dial</B> command sends astandard Hayes ATD <BCLASS="emphasis.bold">dial</B> command to the modem. It passes the entire stringprovided on the command line to the modem as part of the ATD command.The sample <BCLASS="emphasis.bold">dial</B> command generates ATD*70,301-555-1234. This causes themodem to dial *70 (which turns off call waiting), and then area code 301,exchange 555, and number 1234.[14]When this modem successfully connects to the remote modem, it displaysthe message CONNECT. The <BCLASS="emphasis.bold">wait</B> command waits for thatmessage from the modem.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[14] If you have call waiting, turn it off before you attempt to make aSLIP or PPP connection. Different local telephone companies may usedifferent codes to disable call waiting.</P></BLOCKQUOTE><PCLASS="para">The <BCLASS="emphasis.bold">sleep 2</B> command inserts a two-second delay<ACLASS="indexterm"NAME="AUTOID-6684"></A>into the script.It is often useful to delay at the beginning of the connection to allowthe remote server to initialize. Remember that the CONNECT message isdisplayed by the modem, not by the remote server. The remote servermay have several steps to execute before it is ready to accept input.A small delay can sometimes avoid unexplained intermittent problems.</P><PCLASS="para">The <BCLASS="emphasis.bold">send</B> command sends a carriage return (\r) to the remotesystem. Once the modems are connected, anything sent from the localsystem goes all the way to the remote system. The <BCLASS="emphasis.bold">send</B> commandcan send any string. In the sample script the remote server requires acarriage return before it issues its first prompt. The carriage returnis entered as \r and the newline is entered as \n.</P><PCLASS="para">The remote server then prompts for the username with <CODECLASS="literal">Login&gt;</CODE>.  <ACLASS="indexterm"NAME="AUTOID-6691"></A>The <BCLASS="emphasis.bold">wait ogin&gt;</B> command detects this prompt and the <BCLASS="emphasis.bold">send kristin</B> command sends the username <CODECLASS="literal">kristin</CODE> as a response. The server then prompts for the password with <CODECLASS="literal">Password&gt;</CODE>.  The <BCLASS="emphasis.bold">password</B> command <ACLASS="indexterm"NAME="AUTOID-6698"></A>causes the script to ask the local user to manually enter the password. It ispossible to store the password in a <BCLASS="emphasis.bold">send</B> command inside the script.However, this is a potential security problem if an unauthorized persongains access to the script and reads the password. The <BCLASS="emphasis.bold">password</B>command improves security.</P><PCLASS="para">If the password is accepted, our remote server prompts for input withthe greater than (&gt;) symbol. Many servers require a command to setthe correct protocol mode. The server in our example supports severaldifferent protocols. We must tell it to use PPP by using<BCLASS="emphasis.bold">send</B> to pass it the correct command.</P><PCLASS="para">The script finishes with a few commands that set the correctenvironment on the local host. The <BCLASS="emphasis.bold">mode</B> command<ACLASS="indexterm"NAME="AUTOID-6707"></A>tells the localhost to use the PPP protocol on this link. The protocol selected mustmatch the protocol running on the remote server. Protocol values thatare valid for the <BCLASS="emphasis.bold">dip</B><BCLASS="emphasis.bold">mode</B> command are SLIP, CSLIP, PPP,and TERM. SLIP and CSLIP are variations of the SLIP protocol, which isdiscussed in the next section. TERM is terminal emulation mode. PPPis the Point-to-Point Protocol. Finally, the <BCLASS="emphasis.bold">exit</B> command endsthe script, while <BCLASS="emphasis.bold">dip</B> keeps running in the background servicingthe link.</P><PCLASS="para">This simple script does work and it should give you a good idea of thewait/send structure of a <BCLASS="emphasis.bold">dip</B> script. However, your scripts willprobably be more complicated. The sample script is not robust becauseit does not do any error checking. If an expected response does notmaterialize, the sample script hangs. To address this problem, use a<ACLASS="indexterm"NAME="AUTOID-6715"></A>timeout on each <BCLASS="emphasis.bold">wait</B> command. For example, the <BCLASS="emphasis.bold">wait OK 10</B>command tells the system to wait 10 seconds for the OK response. Whenthe OK response is detected, the <BCLASS="emphasis.bold">$errlvl</B> script variable is set to zeroand the script falls through to the next command. If the OK responseis not returned before the 10-second timer expires, <BCLASS="emphasis.bold">$errlvl</B> is set to anon-zero value and the script continues on to the next command. The<BCLASS="emphasis.bold">$errlvl</B> variable is combined with the <BCLASS="emphasis.bold">if</B> and <BCLASS="emphasis.bold">goto</B>commands to provide error handling in <BCLASS="emphasis.bold">dip</B> scripts. Refer to<ACLASS="xref"HREF="appa_01.htm"TITLE="PPP Tools">Appendix A</A> for more details.</P><PCLASS="para">Once the script is created it is executed with the <BCLASS="emphasis.bold">dip</B> command.Assume that the sample script shown above was saved to a file named<EMCLASS="emphasis">start-ppp.dip</EM>. The following command executes the script,creating a PPP link between the local system and the remote server:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">&gt; dip start-ppp</PRE></BLOCKQUOTE></P><PCLASS="para">Terminate the PPP connection with the command <BCLASS="emphasis.bold">dip -k</B>. This closesthe connection and kills the background <BCLASS="emphasis.bold">dip</B> process.</P><PCLASS="para"><BCLASS="emphasis.bold">pppd</B> options are not configured in the <BCLASS="emphasis.bold">dip</B> script.<BCLASS="emphasis.bold">dip</B> creates the PPP connection; it doesn't customize <BCLASS="emphasis.bold">pppd</B>.<BCLASS="emphasis.bold">pppd</B> options are stored in the <EMCLASS="emphasis">/etc/ppp/options</EM> file.<ACLASS="indexterm"NAME="AUTOID-6742"></A><ACLASS="indexterm"NAME="AUTOID-6745"></A></P><PCLASS="para">Assuming the <BCLASS="emphasis.bold">dip</B> script shown above, we might use the following<BCLASS="emphasis.bold">pppd</B> options:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">noipdefaultipcp-accept-localipcp-accept-remotedefaultroute</PRE></BLOCKQUOTE></P><PCLASS="para">The <BCLASS="emphasis.bold">noipdefault</B> option tells the client not to look up the localaddress. <BCLASS="emphasis.bold">ipcp-accept-local</B> tells the client to obtain itslocal address from the remote server. The <BCLASS="emphasis.bold">ipcp-accept-remote</B>option tells the system to accept the remote address from the remoteserver. Finally, <BCLASS="emphasis.bold">pppd</B> sets the PPP link as the default route.This is the same <BCLASS="emphasis.bold">defaultroute</B> option we saw on the <BCLASS="emphasis.bold">pppd</B>command line in an earlier example. Any <BCLASS="emphasis.bold">pppd</B> option that can beinvoked on the command line can be put in the <EMCLASS="emphasis">/etc/ppp/options</EM>file and thus be invoked when <BCLASS="emphasis.bold">pppd</B> is started by a <BCLASS="emphasis.bold">dip</B>script.</P><PCLASS="para">I use <BCLASS="emphasis.bold">dip</B> on my home computer to set up my dial PPP connection.Personally, I find <BCLASS="emphasis.bold">dip</B> simple and straightforward to use.In part, that is because I am familiar with the <BCLASS="emphasis.bold">dip</B> scriptinglanguage. You may prefer to use the <BCLASS="emphasis.bold">chat</B> command that comes withthe <BCLASS="emphasis.bold">pppd</B> software package.<ACLASS="indexterm"NAME="AUTOID-6769"></A></P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="TCP2-CH-6-SECT-3.3">6.3.3 chat </A></H3><PCLASS="para"><ACLASS="indexterm"NAME="TCP2-CH-6-IX-CHAT-SCRIPT"></A>A <BCLASS="emphasis.bold">chat</B> script is a simple &quot;expect/send&quot; scriptconsisting of the strings the system expects and the stringsthe system sends in response. The script is organized as alist of expect/send pairs. <BCLASS="emphasis.bold">chat</B> does not really have a scriptinglanguage, but it does have some special characters that can be used tocreate more complex scripts. The <BCLASS="emphasis.bold">chat</B> script to perform the samedial-up and login functions as the sample <BCLASS="emphasis.bold">dip</B> script would contain:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">'' ATZOK ATDT*70,301-555-1234CONNECT \d\d\rogin&gt; kristinword&gt; Wats?Wat?&gt; 'set port ppp enabled'</PRE></BLOCKQUOTE></P><PCLASS="para">Each line in the script begins with an expected string and ends withthe string sent as a response. The modem does not send a string untilit receives a command. The first line on the script says, in effect, &quot;expectnothing and send the modem a reset command.&quot;  The pair of single quotes<ACLASS="indexterm"NAME="AUTOID-6782"></A><ACLASS="indexterm"NAME="AUTOID-6784"></A><ACLASS="indexterm"NAME="AUTOID-6786"></A><ACLASS="indexterm"NAME="AUTOID-6788"></A>(<CODECLASS="literal">&quot;</CODE>) at the beginning of the line tells <BCLASS="emphasis.bold">chat</B> to expect nothing.The script then waits for the modem's OK prompt and dials the remoteserver. When the modem displays the CONNECT message, the script delaystwo seconds (\d\d) and then sends a carriage return (\r). Each \dspecial character causes a one-second delay. The \r special characteris the carriage return. <BCLASS="emphasis.bold">chat</B> has many special characters that canbe used in the expect strings and the send strings.[15]Finally, the script ends by sending the username, password, and remoteserver configuration command in response to the server's prompts.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[15] See <ACLASS="xref"HREF="appa_01.htm"TITLE="PPP Tools">Appendix A</A> for more details.</P></BLOCKQUOTE><PCLASS="para">Create the script with your favorite editor and save it in a file such as<EMCLASS="emphasis">dial-server</EM>. Test the script using <BCLASS="emphasis.bold">chat</B> with the<BCLASS="emphasis.bold">-V</B> option, which logs the script execution through stderr:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% chat -V -f dial-server</PRE></BLOCKQUOTE></P><PCLASS="para">Invoking the <BCLASS="emphasis.bold">chat</B> script is not sufficient to configure thePPP line. It must be combined with <BCLASS="emphasis.bold">pppd</B> to do the whole job.The <BCLASS="emphasis.bold">connection</B> command-line option<ACLASS="indexterm"NAME="AUTOID-6806"></A>allows you to start <BCLASS="emphasis.bold">pppd</B>and invoke a dial-up script all in one command:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"># pppd /dev/cua1 56700 connect &quot;chat -V -f dial-server&quot; \     -detach crtscts modem defaultroute</PRE></BLOCKQUOTE></P><PCLASS="para">The <BCLASS="emphasis.bold">chat</B> command following the <BCLASS="emphasis.bold">connect</B> option is used toperform the dial-up and login. Any package capable of doing the jobcould be called here; it doesn't have to be <BCLASS="emphasis.bold">chat</B>.</P><PCLASS="para">The <BCLASS="emphasis.bold">pppd</B> command has some other options that are used when PPPis run as a dial-up client. The <BCLASS="emphasis.bold">modem</B> option causes <BCLASS="emphasis.bold">pppd</B> tomonitor the carrier-detect (DCD) indicator of the modem.<ACLASS="indexterm"NAME="AUTOID-6819"></A><ACLASS="indexterm"NAME="AUTOID-6821"></A>This indicatortells <BCLASS="emphasis.bold">pppd</B> when the connection is made and when the connectionis broken. <BCLASS="emphasis.bold">pppd</B> monitors DCD to know when the remote serverhangs up the line. The <BCLASS="emphasis.bold">-detach</B> option prevents <BCLASS="emphasis.bold">pppd</B> fromdetaching from the terminal to run as a background process. This is onlynecessary when running <BCLASS="emphasis.bold">chat</B> with the <BCLASS="emphasis.bold">-V</B> option. When you aredone debugging the <BCLASS="emphasis.bold">chat</B> script, you can remove the <BCLASS="emphasis.bold">-V</B> option from the <BCLASS="emphasis.bold">chat</B> subcommand and the <BCLASS="emphasis.bold">-detach</B> option from the <BCLASS="emphasis.bold">pppd</B> command. An alternative is to use <BCLASS="emphasis.bold">-v</B> on the <BCLASS="emphasis.bold">chat</B> command.<BCLASS="emphasis.bold">-v</B> does not require <BCLASS="emphasis.bold">pppd</B> to remain attached to a terminalbecause it sends the <BCLASS="emphasis.bold">chat</B> logging information to <BCLASS="emphasis.bold">syslogd</B>instead of to stderr. We have seen all of the other options on thiscommand line before.<ACLASS="indexterm"NAME="AUTOID-6841"></A></P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="TCP2-CH-6-SECT-3.4">6.3.4 PPP Daemon Security </A></H3><PCLASS="para"><ACLASS="indexterm"NAME="TCP2-CH-6-IX-POINT-TO-POINT-PROTOCOL-PPP-DAEMON-PPPD-SECURITY-IN"></A>A major benefit of PPP over SLIP is the enhanced security PPP provides.Put the following <BCLASS="emphasis.bold">pppd</B> options in the <EMCLASS="emphasis">/etc/ppp/options</EM> fileto enhance security:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">lockauthusehostnamedomain nuts.com</PRE></BLOCKQUOTE></P><PCLASS="para">&#13;The first option, <BCLASS="emphasis.bold">lock</B>, makes <BCLASS="emphasis.bold">pppd</B> use UUCP-style lock<ACLASS="indexterm"NAME="AUTOID-6856"></A>files. This prevents other applications, such as UUCP or a terminalemulator, from interfering with the PPP connection. The <BCLASS="emphasis.bold">auth</B><ACLASS="indexterm"NAME="TCP2-CH-6-IX-AUTHENTICATION-IN-PPPD"></A>option requires the remote system to be authenticated before the PPPlink is established. This option causes the local system to requestauthentication data from the remote system. It does not cause theremote system to request similar data from the local system. If theremote system administrator wants to authenticate your system beforeallowing a connection, she must put the <BCLASS="emphasis.bold">auth</B> keyword in theconfiguration of her system. The <BCLASS="emphasis.bold">usehostname</B> option requiresthat the hostname is used in the authentication process and preventsthe user from setting an arbitrary name for the local system with the<BCLASS="emphasis.bold">name</B> option. (More on authentication in a minute.) The finaloption makes sure that the local hostname is fully qualified with thespecified domain before it is used in any authentication procedure.</P><PCLASS="para">Recall that the <EMCLASS="emphasis">~/.ppprc</EM> file and the <BCLASS="emphasis.bold">pppd</B> command-lineoptions can override options set in the <EMCLASS="emphasis">/etc/ppp/options</EM> file,which could be a security problem. For this reason, several options,once configured in the <EMCLASS="emphasis">/etc/ppp/options</EM> file, cannot be overridden.That includes the options just listed.</P><PCLASS="para"><BCLASS="emphasis.bold">pppd</B> supports two authentication protocols: Challenge HandshakeAuthentication Protocol (CHAP)<ACLASS="indexterm"NAME="AUTOID-6872"></A>and Password Authentication Protocol (PAP).<ACLASS="indexterm"NAME="AUTOID-6874"></A>PAP is a simple password security system that is vulnerable to all ofthe attacks of any reusable password system. CHAP, however, is anadvanced authentication system that does not use reusable passwords andthat repeatedly re-authenticates the remote system.</P><PCLASS="para">Two files are used in the authentication process, the<EMCLASS="emphasis">/etc/ppp/chap-secrets</EM> file and the <EMCLASS="emphasis">/etc/ppp/pap-secrets</EM>file. Given the options file shown above, <BCLASS="emphasis.bold">pppd</B> first attemptsto authenticate the remote system with CHAP. To do this, there mustbe data in the <EMCLASS="emphasis">chap-secrets</EM> file<ACLASS="indexterm"NAME="AUTOID-6881"></A>and the remote system mustrespond to the CHAP challenge. If either of these conditions are nottrue, <BCLASS="emphasis.bold">pppd</B> attempts to authenticate the remote system with PAP.If there is no applicable entry in the <EMCLASS="emphasis">pap-secrets</EM> file<ACLASS="indexterm"NAME="AUTOID-6885"></A>or the remote system does not respond to the PAP challenge, the PPP connectionis not established. This process allows you to authenticate remotesystems with CHAP (the preferred protocol), if they support it, and tofall back to PAP for systems that support only PAP. For this to work,however, you must have the correct entries in both files.</P><PCLASS="para">Each entry in the <EMCLASS="emphasis">chap-secrets</EM> file contains up to four fields:</P><DLCLASS="variablelist"><DTCLASS="term"><EMCLASS="emphasis">client</EM></DT><DDCLASS="listitem"><PCLASS="para">The name of the computer that must answer the challenge, i.e., thecomputer that must be authenticated before the connection is made.This is not necessarily a client that is seeking access to a PPPserver. <EMCLASS="emphasis">Client</EM> is the term used in most of the documentation,but really this is the respondent&nbsp;- the system that responds to thechallenge. Both ends of a PPP link can be forced to undergoauthentication. In your <EMCLASS="emphasis">chap-secrets</EM> file you will probably havetwo entries for each remote system: one entry to authenticate theremote system and a corresponding entry to authenticate your systemwhen it is challenged by the remote system.</P></DD><DTCLASS="term"><EMCLASS="emphasis">server</EM></DT><DDCLASS="listitem"><PCLASS="para">The name of the system that issues the CHAP challenge, i.e., the computerthat requires the authentication before the PPP link is established.This is not necessarily a PPP server. The client system can requirethe server to authenticate itself. <EMCLASS="emphasis">Server</EM> is the term used inmost documentation, but really this is the authenticator&nbsp;- the systemthat authenticates the response.</P></DD><DTCLASS="term"><EMCLASS="emphasis">secret</EM></DT><DDCLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-6908"></A>The secret key that is used to encrypt<ACLASS="indexterm"NAME="AUTOID-6911"></A><ACLASS="indexterm"NAME="AUTOID-6913"></A>the challenge string before itis sent back to the system that issued the challenge.</P></DD><DTCLASS="term"><EMCLASS="emphasis">address</EM></DT><DDCLASS="listitem"><PCLASS="para">An address, written as a hostname or an IP address, that is acceptablefor the host named in the first field. If the host listed in the firstfield attempts to use an address other than the address listed here,the connection is terminated even if the remote host properly encryptsthe challenge response. This field is optional.</P></DD></DL><PCLASS="para">A sample <EMCLASS="emphasis">chap-secrets</EM> file for the host <EMCLASS="emphasis">macadamia</EM> might contain:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">cashew     macadamia  Peopledon'tknowyou    172.16.15.3macadamia  cashew     andtrustisajoke.      172.16.15.1</PRE></BLOCKQUOTE></P><PCLASS="para">The first entry is used to validate <EMCLASS="emphasis">cashew</EM>, the remote PPP server.<EMCLASS="emphasis">cashew</EM> is being authenticated and the system performing theauthentication is <EMCLASS="emphasis">macadamia</EM>. The secret key is &quot;Peopledon'tknowyou&quot;.The allowable address is 172.16.15.3, which is the address assigned to<EMCLASS="emphasis">cashew</EM> in the host table. The second entry is used to validate<EMCLASS="emphasis">macadamia</EM> when <EMCLASS="emphasis">cashew</EM> issues the challenge. The secret keyis &quot;andtrustisajoke.&quot;.  The only address <EMCLASS="emphasis">macadamia</EM> is allowed touse is 172.16.15.1. A pair of entries, one for each end of the link,is normal. The <EMCLASS="emphasis">chap-secret</EM> file usually contains two entries forevery PPP link: one entry for validating the remote system and one entryfor answering the challenge of that remote system.</P><PCLASS="para">Use PAP only when you must. If you deal with a system that does notsupport CHAP, make an entry for that system in the <EMCLASS="emphasis">pap-secrets</EM> file.The format of <EMCLASS="emphasis">pap-secrets</EM> entries is the same as those used in the<EMCLASS="emphasis">chap-secrets</EM> file. A system that does not support CHAP might havethe following entry in the <EMCLASS="emphasis">pap-secrets</EM> file:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">acorn     macadamia  Wherearethestrong?  acorn.nuts.commacadamia acorn      Whoarethetrusted?   macadamia.nuts.com</PRE></BLOCKQUOTE></P><PCLASS="para">Again we have a pair of entries: one for the remote system and one forour system. We support CHAP but the remote system does not. Thus wemust be able to respond using the PAP protocol in case the remote systemrequests authentication.</P><PCLASS="para">PPP authentication improves security in a dial-up environment. It ismost important when you run the PPP server into which remote systemsdial. In the next section, we look at PPP server configuration.<ACLASS="indexterm"NAME="AUTOID-6943"></A><ACLASS="indexterm"NAME="AUTOID-6944"></A></P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="TCP2-CH-6-SECT-3.5">6.3.5 PPP Server Configuration </A></H3><PCLASS="para"><ACLASS="indexterm"NAME="TCP2-CH-6-IX-POINT-TO-POINT-PROTOCOL-PPP-SERVER-CONFIGURATION"></A>The PPP server is started by the <EMCLASS="emphasis">/etc/ppp/ppplogin</EM> script.[16]<ACLASS="indexterm"NAME="AUTOID-6955"></A><BCLASS="emphasis.bold">ppplogin</B> is a login shell script for dial-in PPP users. Replacethe login shell entry in the <EMCLASS="emphasis">/etc/passwd</EM> file<ACLASS="indexterm"NAME="AUTOID-6959"></A><ACLASS="indexterm"NAME="AUTOID-6962"></A>with the path of<BCLASS="emphasis.bold">ppplogin</B> to start the server. A modified <EMCLASS="emphasis">/etc/passwd</EM> entrymight contain:</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[16] The example is for Linux systems running <BCLASS="emphasis.bold">pppd</B>. It may be differenton your system. Check your system's documentation.</P></BLOCKQUOTE><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">craig:wJxX.iPuPzg:101:100:Craig Hunt:/tmp:/etc/ppp/ppplogin</PRE></BLOCKQUOTE></P><PCLASS="para">The fields are exactly the same as any <EMCLASS="emphasis">/etc/passwd</EM> entry: username,password, uid, gid, gcos information, home directory, and login shell.For a remote PPP user, the home directory is <EMCLASS="emphasis">/tmp</EM> and the loginshell is the full path of the <BCLASS="emphasis.bold">ppplogin</B> program. The encryptedpassword must be set using the <BCLASS="emphasis.bold">passwd</B> program, just as it is forany user. And the login process is the same as it is for any user.When <BCLASS="emphasis.bold">getty</B> detects incoming traffic on the serial port it invokes<BCLASS="emphasis.bold">login</B> to authenticate the user. <BCLASS="emphasis.bold">login</B> verifies the usernameand the password entered by the user and starts the login shell. In thiscase the login shell is actually a shell script that configures thePPP port and starts the PPP daemon. Our sample <EMCLASS="emphasis">/etc/ppp/ppplogin</EM>script is:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">#!/bin/shmesg -nstty -echoexec /sbin/pppd auth passive crtscts modem</PRE></BLOCKQUOTE></P><PCLASS="para">The first two lines demonstrate that the <EMCLASS="emphasis">ppplogin</EM> file can containmore than just the <BCLASS="emphasis.bold">pppd</B> command. The <BCLASS="emphasis.bold">mesg -n</B> command makessure that other users cannot write to this terminal with <BCLASS="emphasis.bold">talk</B>,<BCLASS="emphasis.bold">write</B>, or similar programs. The <BCLASS="emphasis.bold">stty</B> command turns offcharacter echoing. On some systems, characters typed at the terminalare echoed from the remote host instead of being locally echoed by theterminal; this behavior is called <EMCLASS="emphasis">full duplex</EM>.<ACLASS="indexterm"NAME="AUTOID-6987"></A>We don't want to echoanything back on a PPP link, so we turn full duplex off. </P><PCLASS="para">The key line in the script is, of course, the line that starts <BCLASS="emphasis.bold">pppd</B>.We start the daemon with several options, but one thing that is notincluded on the command line is the <EMCLASS="emphasis">tty</EM> device name.<ACLASS="indexterm"NAME="AUTOID-6992"></A>In all of theprevious <BCLASS="emphasis.bold">pppd</B> examples, we provided a device name. When it is notprovided, as is this case, <BCLASS="emphasis.bold">pppd</B> uses the controlling terminal asits device and doesn't put itself in background mode. This is just whatwe want. We want to use the device that <BCLASS="emphasis.bold">login</B> was servicing whenit invoked the <EMCLASS="emphasis">ppplogin</EM> script.</P><PCLASS="para">The <BCLASS="emphasis.bold">auth</B> command-line option tells <BCLASS="emphasis.bold">pppd</B> to authenticate theremote system, which of course requires us to place an entry for thatsystem in the <EMCLASS="emphasis">chap-secrets</EM> or the <EMCLASS="emphasis">pap-secret</EM> file. The<BCLASS="emphasis.bold">crtscts</B> option turns on hardware flow control, and the<BCLASS="emphasis.bold">modem</B> option tells PPP to monitor the modem's DCD indicator sothat it can detect when the remote system drops the line. We have seenall of these options before. The one new option is <BCLASS="emphasis.bold">passive</B>.<ACLASS="indexterm"NAME="AUTOID-7006"></A>With <BCLASS="emphasis.bold">passive</B> set, the local system waits until it receives avalid LCP packet from the remote system, even if the remote systemfails to respond to its first packet. Normally, the local system woulddrop the connection if the remote system fails to respond in a timelymanner. This option gives the remote system time to initialize its ownPPP daemon.</P><PCLASS="para">Creating an appropriate <BCLASS="emphasis.bold">ppplogin</B> script and defining it as alogin shell in the <EMCLASS="emphasis">/etc/passwd</EM> file are all that is necessary torun <BCLASS="emphasis.bold">pppd</B> as a server.<ACLASS="indexterm"NAME="AUTOID-7014"></A></P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="TCP2-CH-6-SECT-3.6">6.3.6 Solaris PPP </A></H3><PCLASS="para"><ACLASS="indexterm"NAME="TCP2-CH-6-IX-POINT-TO-POINT-PROTOCOL-PPP-SERVER-CONFIGURATION-IN-SOLARIS"></A><BCLASS="emphasis.bold">dip</B> and <BCLASS="emphasis.bold">pppd</B> are available for Linux, BSD, AIX, Ultrix,OSF/1, and SunOS. If you have adifferent operating system, you probablywon't use these packages. Solaris is a good example of a system thatuses a different set of commands to configure PPP.</P><PCLASS="para">PPP is implemented under Solaris as the Asynchronous PPP Daemon<ACLASS="indexterm"NAME="AUTOID-7025"></A>(<BCLASS="emphasis.bold">aspppd</B>). <BCLASS="emphasis.bold">aspppd</B> is configured by the <EMCLASS="emphasis">/etc/asppp.cf</EM><ACLASS="indexterm"NAME="AUTOID-7030"></A><ACLASS="indexterm"NAME="AUTOID-7033"></A>file. The <EMCLASS="emphasis">asppp.cf</EM> file is divided into two sections: an<CODECLASS="literal">ifconfig</CODE> section and a <CODECLASS="literal">path</CODE> section.</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">ifconfig ipdptp0 plumb macadamia cashew uppath   interface ipdptp0   peer_system_name cashew   inactivity_timeout 300</PRE></BLOCKQUOTE></P><PCLASS="para">The <BCLASS="emphasis.bold">ifconfig</B> command configures the PPP interface (<CODECLASS="literal">ipdptp0</CODE>) as apoint to point link with a local address of <EMCLASS="emphasis">macadamia</EM> and adestination address of <EMCLASS="emphasis">cashew</EM>. The <BCLASS="emphasis.bold">ifconfig</B> command doesnot have to define the destination address of the link. However, ifyou always connect to the same remote server, it will probably bedefined here as the destination address. We saw all of these optionsin the discussion of the <BCLASS="emphasis.bold">ifconfig</B> command earlier in thischapter.</P><PCLASS="para">The more interesting part of this file is the <CODECLASS="literal">path</CODE> section,which defines the PPP environment. The <BCLASS="emphasis.bold">interface</B> statementidentifies the interface used for the connection. It must be one ofthe PPP interfaces defined in the <CODECLASS="literal">ifconfig</CODE> section. In theexample, only one is defined, so it must be<CODECLASS="literal">ipdptp0</CODE>. The <BCLASS="emphasis.bold">peer_system_name</B> statement identifies the systemat the remote end of the connection, which may be the same address asthe destination address from the <BCLASS="emphasis.bold">ifconfig</B> statement as it is inour example. But it doesn't have to be. It is possible to have nodestination address on the <BCLASS="emphasis.bold">ifconfig</B> command and several<CODECLASS="literal">path</CODE> sections if you connect to several different remotehosts. The hostname on the <BCLASS="emphasis.bold">peer_system_name</B> statement is usedin the dialing process as described later.</P><PCLASS="para">The <CODECLASS="literal">path</CODE> section ends with an <BCLASS="emphasis.bold">inactivity_timeout</B>statement. The command in the sample sets the timeout<ACLASS="indexterm"NAME="AUTOID-7060"></A>to 300 seconds.This is interesting because it points to a nice feature of the Solarissystem. Solaris automatically dials the remote system when it detectdata that needs to be delivered through that system. Further, itautomatically disconnects the PPP link when it is inactive for thespecified time. With this feature you can use a PPP link withoutmanually initiating the dial program and without tying up phone lineswhen the link is not in use.</P><PCLASS="para">Like <BCLASS="emphasis.bold">pppd</B>, <BCLASS="emphasis.bold">aspppd</B> does not have a built-in dial facility.It relies on an external program to do the dialing. In the case of<BCLASS="emphasis.bold">aspppd</B>, it utilizes the dial-up facility that comes with UUCP.Here's how.</P><PCLASS="para">First, the serial port, the modem attached to it, and the speed atwhich they operate are defined in the <EMCLASS="emphasis">/etc/uucp/Devices</EM> file.For example, here we define an Automatic Call Unit (ACU<ACLASS="indexterm"NAME="AUTOID-7069"></A>is anothername for a modem) attached to serial port B (cua/b) that operates atany speed defined in the <EMCLASS="emphasis">Systems</EM> file, and that has the modemcharacteristics defined by the &quot;hayes&quot; entry in the <EMCLASS="emphasis">Dialers</EM> file:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">ACU cua/b - Any hayes</PRE></BLOCKQUOTE></P><PCLASS="para">Next, the modem characteristics, such as its initialization settingand dial command, are defined in the <EMCLASS="emphasis">/etc/uucp/Dialers</EM> file.The initialization and dial commands are defined as a <BCLASS="emphasis.bold">chat</B> scriptusing the standard expect/send format and the standard set of <BCLASS="emphasis.bold">chat</B>special characters. For example:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">hayes =,-, &quot;&quot; \dA\pTE1V1X1Q0S2=255S12=255\r\c OK\r \EATDT\T\r\c CONNECT</PRE></BLOCKQUOTE></P><PCLASS="para">The system comes with <EMCLASS="emphasis">Devices</EM> and <EMCLASS="emphasis">Dialers</EM> pre-configured.The pre-configured entries are probably compatible with the modem on yoursystem. The <EMCLASS="emphasis">/etc/uucp/Systems</EM> file may be the only configurationfile that you modify. In the <EMCLASS="emphasis">systems</EM> file you need to enter thename of the remote system, select the modem you'll use, enter thetelephone number, and enter a <BCLASS="emphasis.bold">chat</B> script to handle the login.For example:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">cashew Any ACU 19200 5551234 &quot;&quot; \r ogin&gt; kristin word&gt; Wats?Watt? &gt;     set ppp on</PRE></BLOCKQUOTE></P><PCLASS="para">In this one line, we identify <EMCLASS="emphasis">cashew</EM> as the remote system, declarethat we allow connections to and from that hosts at any time of the day(Any), select the ACU entry in the <EMCLASS="emphasis">Devices</EM> file to specify the portand modem, set the line speed to 19200, send the dialer the telephonenumber, and define the login <BCLASS="emphasis.bold">chat</B> script.</P><PCLASS="para">This is not a book about UUCP, so we won't go into further detailsabout these files. I'd suggest <EMCLASS="emphasis">Using and Managing UUCP</EM>(by Ed Ravin, O'Reilly &amp; Associates) for moreinformation about UUCP and the Solaris <EMCLASS="emphasis">TCP/IP Network AdministrationGuide</EM> (where did they come up with such a great name?) for moreinformation about <BCLASS="emphasis.bold">aspppd</B>.<ACLASS="indexterm"NAME="AUTOID-7097"></A><ACLASS="indexterm"NAME="AUTOID-7098"></A></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch06_02.htm"TITLE="6.2 TCP/IP Over a Serial Line "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 6.2 TCP/IP Over a Serial Line "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="TCP/IP Network Administration"><IMGSRC="../gifs/txthome.gif"ALT="TCP/IP Network Administration"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch06_04.htm"TITLE="6.4 Installing SLIP "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 6.4 Installing SLIP "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">6.2 TCP/IP Over a Serial Line </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">6.4 Installing SLIP </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><PCLASS="nav"><FONTSIZE="-1">[ <AHREF="../index.htm"TITLE="The Networking CD Bookshelf">Library Home</A> | <AHREF="../dnsbind/index.htm"TITLE="DNS &amp; BIND">DNS &amp; BIND</A> | <AHREF="index.htm"TITLE="TCP/IP Network Administration">TCP/IP</A> | <AHREF="../sendmail/index.htm"TITLE="sendmail">sendmail</A> | <AHREF="../smdref/index.htm"TITLE="sendmail Desktop Reference">sendmail Reference</A> | <AHREF="../firewall/index.htm"TITLE="Building Internet Firewalls">Firewalls</A> | <AHREF="../puis/index.htm"TITLE="Practical UNIX &amp; Internet Security">Practical Security</A> ]</FONT></P></DIV></BODY></HTML>