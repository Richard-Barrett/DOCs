<HTML><HEAD><TITLE>[Chapter 10] 10.6 Rewriting the Mail Address </TITLE><METANAME="DC.title"CONTENT="TCP/IP Network Administration"><METANAME="DC.creator"CONTENT="Craig Hunt"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1999-02-04T01:39:29Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-322-7"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch10_01.htm"TITLE="10. sendmail "><LINKREL="prev"HREF="ch10_05.htm"TITLE="10.5 sendmail Configuration "><LINKREL="next"HREF="ch10_07.htm"TITLE="10.7 Modifying a sendmail.cf File "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="TCP/IP Network Administration"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,65"HREF="index.htm"ALT="TCP/IP Network Administration"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/tsrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch10_05.htm"TITLE="10.5 sendmail Configuration "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 10.5 sendmail Configuration "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 10<BR>sendmail </FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch10_07.htm"TITLE="10.7 Modifying a sendmail.cf File "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 10.7 Modifying a sendmail.cf File "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="TCP2-CH-10-SECT-6">10.6 Rewriting the Mail Address </A></H2><PCLASS="para"><ACLASS="indexterm"NAME="TCP2-CH-10-IX-SENDMAIL-CF-FILE-REWRITE-RULES-R-S-AND-K-COMMANDS"></A>Rewrite rules are the heart of the <EMCLASS="emphasis">sendmail.cf</EM> file. Rulesetsare groups of individual rewrite rules used to parse emailaddresses from user mail programs and rewrite them into the formrequired by the mail delivery programs. Each rewrite rule is definedby an <BCLASS="emphasis.bold">R</B> command. The syntax of the <BCLASS="emphasis.bold">R</B> command is:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"><BCLASS="emphasis.bold">R</B><CODECLASS="replaceable"><I>pattern    transformation    comment</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">The fields in an <BCLASS="emphasis.bold">R</B> command are separated by tab characters.<ACLASS="indexterm"NAME="AUTOID-14147"></A>The comment field is ignored by the system, but good comments arevital if you want to have any hope of understanding what's going on.The pattern and transformation fields are the heart of thiscommand.</P><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="TCP2-CH-10-SECT-6.1">10.6.1 Pattern Matching </A></H3><PCLASS="para"><ACLASS="indexterm"NAME="TCP2-CH-10-IX-PATTERN-MATCHING"></A><ACLASS="indexterm"NAME="TCP2-CH-10-IX-SENDMAIL-CF-FILE-REWRITE-RULES-R-S-AND-K-COMMANDS-PATTERN-MATCHING"></A>Rewrite rules match the input address against the pattern, and ifa match is found, rewrite the address in a new format using the rulesdefined in the transformation. A rewrite rule may process the sameaddress several times because, after being rewritten, the address isagain compared against the pattern. If it still matches, it isrewritten again. The cycle of pattern matching and rewriting continuesuntil the address no longer matches the pattern.</P><PCLASS="para">The pattern is defined using macros, classes, literals, and special<ACLASS="indexterm"NAME="AUTOID-14159"></A>metasymbols. The macros, classes, and literals provide the valuesagainst which the input is compared, and the metasymbols define therules used in matching the pattern. <ACLASS="xref"HREF="ch10_06.htm#TCP2-CH-10-TAB-3"TITLE="Pattern Matching Symbols">Table 10.4</A>shows the metasymbolsused for pattern matching.</P><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="TCP2-CH-10-TAB-3">Table 10.4: Pattern Matching Symbols</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Symbol</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Meaning</TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">$@</B></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Match exactly zero tokens.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">$*</B></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Match zero or more tokens.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">$+</B></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Match one or more tokens.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">$-</B></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Match exactly one token.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">$=</B><EMCLASS="emphasis">x</EM></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Match any token in class <EMCLASS="emphasis">x</EM>.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">$~</B><EMCLASS="emphasis">x</EM></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Match any token not in class <EMCLASS="emphasis">x</EM>.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">$</B><EMCLASS="emphasis">x</EM></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Match all tokens in macro <EMCLASS="emphasis">x</EM>.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">$%</B><EMCLASS="emphasis">x</EM></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Match any token in the NIS map named in macro <EMCLASS="emphasis">x</EM>.[17]</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">$!</B><EMCLASS="emphasis">x</EM></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Match any token not in the NIS map named in macro <EMCLASS="emphasis">x</EM>.[17]</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">$%y</B></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Match any token in the NIS hosts.byname map.[17]</TD></TR></TBODY></TABLE><BLOCKQUOTECLASS="footnote"><PCLASS="para">[17] This symbol is specific to Sun operating systems.</P></BLOCKQUOTE><PCLASS="para">All of the metasymbols request a match for some number of tokens.<ACLASS="indexterm"NAME="AUTOID-14225"></A>A tokenis a string of characters in an email address delimited by an operator.The operators are the characters defined in the <BCLASS="emphasis.bold">OperatorChars</B> option.[18]Operators are also counted as tokens when an address is parsed.For example:</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[18] On older systems, they are defined in the <EMCLASS="emphasis">o</EM> macro. See <ACLASS="xref"HREF="appe_01.htm"TITLE="A sendmail Reference">Appendix E</A>.</P></BLOCKQUOTE><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">becky@peanut.nuts.com</PRE></BLOCKQUOTE></P><PCLASS="para">This email address contains seven tokens: becky, @, peanut, .,nuts, ., and com. This address would match the pattern:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$-@$+</PRE></BLOCKQUOTE></P><PCLASS="para">The address matches the pattern because:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">It has exactly one token before the @ that matches the requirement ofthe <BCLASS="emphasis.bold">$-</B> symbol.</P></LI><LICLASS="listitem"><PCLASS="para">It has an @ that matches the pattern's literal @.</P></LI><LICLASS="listitem"><PCLASS="para">It has one or more tokens after the @ that match the requirement ofthe <BCLASS="emphasis.bold">$+</B> symbol.</P></LI></UL><PCLASS="para">Many addresses, <ACLASS="email"HREF="mailto:hostmaster@rs.internic.net"TITLE="hostmaster@rs.internic.net">hostmaster@rs.internic.net</A>, <ACLASS="email"HREF="mailto:craigh@ora.com"TITLE="craigh@ora.com">craigh@ora.com</A>,etc., match this pattern, but other addresses do not. For example,<EMCLASS="emphasis">rebecca.hunt@nuts.com</EM> does not match because it has three tokens:rebecca, ., and hunt, before the @.  Therefore, it fails to meet therequirement of exactly one token specified by the <BCLASS="emphasis.bold">$-</B> symbol. Using themetasymbols, macros, and literals, patterns can be constructed to matchany type of email address.</P><PCLASS="para">When an address matches a pattern, the strings from the address thatmatch the metasymbols are assigned to <EMCLASS="emphasis">indefinite tokens</EM>.<ACLASS="indexterm"NAME="AUTOID-14254"></A>The matching strings are called indefinite tokens because they may containmore than one token value. The indefinite tokens are identifiednumerically according to the relative position in the pattern of themetasymbol that the string matched. In other words, the indefinitetoken produced by the match of the first metasymbol is called $1; thematch of the second symbol is called $2; the third is $3; and so on.When the address <EMCLASS="emphasis">becky@peanut.nuts.com</EM> matched the pattern<BCLASS="emphasis.bold">$-@$+</B>, two indefinite tokens were created. The first isidentified as $1 and contains the single token, <EMCLASS="emphasis">becky</EM>, thatmatched the <BCLASS="emphasis.bold">$-</B> symbol.  The second indefinite token is $2 andcontains the five tokens&nbsp;- peanut, ., nuts, ., and com&nbsp;- thatmatched the <BCLASS="emphasis.bold">$+</B> symbol. The indefinite tokens created by thepattern matching can then be referenced by name ($1, $2, etc.) whenrewriting the address.</P><PCLASS="para">A few of the symbols in <ACLASS="xref"HREF="ch10_06.htm#TCP2-CH-10-TAB-3"TITLE="Pattern Matching Symbols">Table 10.4</A>are used only in special cases.  The $@ symbol is normally used byitself to test for an empty, or null, address. The symbols that testagainst NIS maps,<ACLASS="indexterm"NAME="AUTOID-14263"></A>can only be used on Sun systems<ACLASS="indexterm"NAME="AUTOID-14266"></A>that run thesendmail program that Sun provides with the operatingsystem. We'll see in the next section that systems running sendmail V8can use NIS maps, but only for transformation&nbsp;- not for patternmatching.<ACLASS="indexterm"NAME="AUTOID-14268"></A><ACLASS="indexterm"NAME="AUTOID-14269"></A></P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="TCP2-CH-10-SECT-6.2">10.6.2 Transforming the Address </A></H3><PCLASS="para"><ACLASS="indexterm"NAME="TCP2-CH-10-IX-SENDMAIL-CF-FILE-REWRITE-RULES-R-S-AND-K-COMMANDS-TRANSFORMING-THE-ADDRESS"></A>The transformation field, from the righthand side of the rewrite rule,defines the format used for rewriting the address. It is defined withthe same things used to define the pattern: literals, macros,and special metasymbols.<ACLASS="indexterm"NAME="AUTOID-14277"></A>Literals in the transformation are writteninto the new address exactly as shown.<ACLASS="indexterm"NAME="AUTOID-14279"></A>Macros are expanded and thenwritten. The metasymbols perform special functions. The<ACLASS="indexterm"NAME="TCP2-CH-10-IX-METASYMBOLS-FOR-TRANSFORMING-THE-ADDRESS"></A>transformation metasymbols and their functions are shown in <ACLASS="xref"HREF="ch10_06.htm#TCP2-CH-10-TAB-4"TITLE="Transformation Metasymbols">Table 10.5</A></P><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="TCP2-CH-10-TAB-4">Table 10.5: Transformation Metasymbols</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Symbol</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Meaning</TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">$</B><CODECLASS="replaceable"><I>n</I></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Substitute indefinite token <CODECLASS="replaceable"><I>n</I></CODE>.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">$[</B><CODECLASS="replaceable"><I>name</I></CODE><BCLASS="emphasis.bold">$</B><BCLASS="emphasis.bold">]</B></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Substitute the canonical form of <CODECLASS="replaceable"><I>name</I></CODE>.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">$(</B><CODECLASS="replaceable"><I>map key </I></CODE><BCLASS="emphasis.bold">$@</B><CODECLASS="replaceable"><I>argument </I></CODE><BCLASS="emphasis.bold">$:</B><CODECLASS="replaceable"><I>default</I></CODE><BCLASS="emphasis.bold">$)</B></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Substitute a value from database <CODECLASS="replaceable"><I>map</I></CODE> indexed by <CODECLASS="replaceable"><I>key</I></CODE>.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">$&gt;</B><CODECLASS="replaceable"><I>n</I></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Call ruleset <CODECLASS="replaceable"><I>n</I></CODE>.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">$@</B></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Terminate ruleset.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">$:</B></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Terminate rewrite rule.</TD></TR></TBODY></TABLE><PCLASS="para">&#13;The <BCLASS="emphasis.bold">$</B><CODECLASS="replaceable"><I>n</I></CODE> symbol, where <CODECLASS="replaceable"><I>n</I></CODE> is a number, is used for theindefinite token substitution<ACLASS="indexterm"NAME="AUTOID-14337"></A>discussed above. The indefinite token isexpanded and written to the &quot;new&quot; address. Indefinite token substitutionis essential for flexible address rewriting. Without it, values couldnot be easily moved from the input address to the rewritten address.The following example demonstrates this.<ACLASS="indexterm"NAME="AUTOID-14340"></A></P><PCLASS="para">Addresses are always processed<ACLASS="indexterm"NAME="AUTOID-14342"></A>by several rewrite rules. No one ruletries to do everything. Assume the input address <EMCLASS="emphasis">mccafferty@peanut</EM>has been through some preliminary processing and now is:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">kathy.mccafferty&lt;@peanut&gt;</PRE></BLOCKQUOTE></P><PCLASS="para">Assume the current rewrite rule is:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">R$+&lt;@$-&gt;    $1&lt;@$2.$D&gt;   user@host -&gt; user@host.domain</PRE></BLOCKQUOTE></P><PCLASS="para">The address matches the pattern because it contains one or more tokensbefore the literal &lt;@, exactly one token after the &lt;@, and then theliteral &gt;.  The pattern match produces two indefinite tokens that areused in the transformation to rewrite the address.</P><PCLASS="para">The transformation contains the indefinite token $1, a literal &lt;@,indefinite token $2, a literal dot (.), the macro D, and the literal &gt;.After the pattern matching, $1 contains <EMCLASS="emphasis">kathy.mccafferty</EM> and $2contains <EMCLASS="emphasis">peanut</EM>. Assume that the macro D was defined elsewherein the <EMCLASS="emphasis">sendmail.cf</EM> file as <EMCLASS="emphasis">nuts.com</EM>. In this case the inputaddress is rewritten as:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">kathy.mccafferty&lt;@peanut.nuts.com&gt;</PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="xref"HREF="ch10_06.htm#TCP2-CH-10-FIG-2"TITLE="Rewriting an address">Figure 10.3</A>illustrates this specific address rewrite. It shows thetokens derived from the input address, and how those tokens are matchedagainst the pattern. It also shows the indefinite tokensproduced by the pattern matching, and how the indefinite tokens, andother values from the transformation, are used to produce the rewrittenaddress. After rewriting, the address is again compared to the pattern. This timeit fails to match the pattern because it no longer contains exactlyone token between the literal &lt;@ and the literal &gt;.  So, no furtherprocessing is done by this rewrite rule and the address is passed tothe next rule in line. Rules in a ruleset are processed sequentially,<ACLASS="indexterm"NAME="AUTOID-14362"></A>though a few metasymbols can be used to modify this flow.</P><H4CLASS="figure"><ACLASS="title"NAME="TCP2-CH-10-FIG-2">Figure 10.3: Rewriting an address</A></H4><IMGCLASS="graphic"SRC="figs/tcp2_1003.gif"ALT="Figure 10.3"><PCLASS="para">The <BCLASS="emphasis.bold">$&gt;</B><EMCLASS="emphasis">n</EM> symbol calls ruleset <EMCLASS="emphasis">n</EM> and passes the addressdefined by the remainder of the transformation to ruleset <EMCLASS="emphasis">n</EM> forprocessing. For example:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$&gt;9 $1 % $2</PRE></BLOCKQUOTE></P><PCLASS="para">This transformation calls ruleset 9 ($&gt;9), and passes the contents of$1, a literal %, and the contents of $2 to ruleset 9 for processing.When ruleset 9 finishes processing, it returns a rewritten address tothe calling rule. The returned email address is then compared againto the pattern in the calling rule. If it still matches, ruleset 9 iscalled again.  </P><PCLASS="para">The recursion built into rewrite rules<ACLASS="indexterm"NAME="AUTOID-14377"></A>creates the possibility forinfinite loops. sendmail does its best to detect possible loops,<ACLASS="indexterm"NAME="AUTOID-14380"></A>but you should take responsibility for writing rules that don't loop.The <BCLASS="emphasis.bold">$@</B> and the <BCLASS="emphasis.bold">$:</B> symbols are used to control processing andto prevent loops. If the transformation begins with the <BCLASS="emphasis.bold">$@</B> symbol,the entire ruleset is terminated and the remainder of the transformationis the value returned by the ruleset. If the transformation beginswith the <BCLASS="emphasis.bold">$:</B> symbol, the individual rule is executed only once.Use <BCLASS="emphasis.bold">$:</B> to prevent recursion and to prevent loops when callingother rulesets. Use <BCLASS="emphasis.bold">$@</B> to exit a ruleset at a specific rule.</P><PCLASS="para">The <BCLASS="emphasis.bold">$[</B><EMCLASS="emphasis">name</EM><BCLASS="emphasis.bold">$]</B> symbol converts a host's nickname or its IPaddress to its canonical name by passing the value <EMCLASS="emphasis">name</EM> to thename server for resolution. For example, using the <EMCLASS="emphasis">nuts.com</EM> nameservers, <BCLASS="emphasis.bold">$[goober$]</B> returns <EMCLASS="emphasis">peanut.nuts.com</EM> and<BCLASS="emphasis.bold">$[[172.16.12.1]$]</B> returns <EMCLASS="emphasis">almond.nuts.com</EM>.</P><PCLASS="para">In the same way that a hostname or address is used to look up a canonicalname in the name server database, the <BCLASS="emphasis.bold">$(</B><EMCLASS="emphasis">map key</EM><BCLASS="emphasis.bold">$)</B> syntaxuses the <EMCLASS="emphasis">key</EM> to retrieve information from the database identifiedby <EMCLASS="emphasis">map</EM>. This is a more generalized database retrieval syntax thanis the one that returns canonical hostnames, and it is more complexto use. Before we get into the details of setting up and using databasesfrom within sendmail, let's finish describing the rest of the syntax ofrewrite rules.<ACLASS="indexterm"NAME="AUTOID-14404"></A></P><PCLASS="para">There is a special rewrite rule syntax that is used in ruleset 0.Ruleset 0 defines the triple (<EMCLASS="emphasis">mailer, host, user</EM>) that specifiesthe mail delivery program, the recipient host, and the recipient user.&#13;</P><PCLASS="para">The special transformation syntax used to do this is:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"><BCLASS="emphasis.bold">$#</B><CODECLASS="replaceable"><I>mailer</I></CODE><BCLASS="emphasis.bold">$@</B><CODECLASS="replaceable"><I>host</I></CODE><BCLASS="emphasis.bold">$:</B><CODECLASS="replaceable"><I>user</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">An example of this syntax taken from the <EMCLASS="emphasis">linux.smtp.cf</EM> samplefile is:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">R$*&lt;@$*&gt;$*    $#smtp$@$2$:$1&lt;@$2&gt;$3     user@host.domain</PRE></BLOCKQUOTE></P><PCLASS="para">Assume the email address <EMCLASS="emphasis">david&lt;@filbert.nuts.com&gt;</EM> is processedby this rule. The address matches the pattern <CODECLASS="literal">$*&lt;@$+&gt;$*</CODE> because:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">The address has zero or more tokens (the token <EMCLASS="emphasis">david</EM>) thatmatch the first <BCLASS="emphasis.bold">$*</B> symbol.</P></LI><LICLASS="listitem"><PCLASS="para">The address has a literal &lt;@.</P></LI><LICLASS="listitem"><PCLASS="para">The address has zero or more tokens (the five tokens<EMCLASS="emphasis">filbert.nuts.com</EM>) that match the requirement of the second <BCLASS="emphasis.bold">$*</B> symbol.</P></LI><LICLASS="listitem"><PCLASS="para">The address has a literal &gt;.</P></LI><LICLASS="listitem"><PCLASS="para">The address has zero or more, in this case zero, tokens that match therequirement of the last <BCLASS="emphasis.bold">$*</B> symbol.</P></LI></UL><PCLASS="para">This pattern match produces two indefinite tokens. Indefinite token $1contains <EMCLASS="emphasis">david</EM> and $2 contains <EMCLASS="emphasis">filbert.nuts.com</EM>. No other matchesoccurred, so $3 is null. These indefinite tokens are used to rewrite theaddress into the following triple:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$#smtp$@filbert.nuts.com$:david&lt;@filbert.nuts.com&gt;</PRE></BLOCKQUOTE></P><PCLASS="para">The components of this triple are:</P><DLCLASS="variablelist"><DTCLASS="term">$#smtp</DT><DDCLASS="listitem"><PCLASS="para"><EMCLASS="emphasis">smtp</EM> is the internal name of the mailer that delivers themessage.</P></DD><DTCLASS="term">$@filbert.nuts.com</DT><DDCLASS="listitem"><PCLASS="para"><EMCLASS="emphasis">filbert.nuts.com</EM> is the recipient host.</P></DD><DTCLASS="term">$:david&lt;@filbert.nuts.com&gt;</DT><DDCLASS="listitem"><PCLASS="para"><EMCLASS="emphasis">david&lt;@filbert.nuts.com&gt;</EM> is the recipient user.</P></DD></DL><PCLASS="para">There is one special variant of this syntax, also used only in ruleset0, that passes error messages<ACLASS="indexterm"NAME="AUTOID-14464"></A>to the user:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"><CODECLASS="userinput"><B>$#error$</B></CODE>@<CODECLASS="replaceable"><I>comment</I></CODE>$:<CODECLASS="replaceable"><I>message</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="replaceable"><I>comment</I></CODE> field is ignored by sendmail. <CODECLASS="replaceable"><I>message</I></CODE> isthe text of an error message returned to the user, for example:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">R&lt;@$+&gt;     $#error$@5.1.1$:&quot;user address required&quot;</PRE></BLOCKQUOTE></P><PCLASS="para">This rule returns the message &quot;user address required&quot; if theaddress matches the pattern.</P><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="TCP2-CH-10-SECT-6.2.1">10.6.2.1 Transforming with a database </A></H4><PCLASS="para"><ACLASS="indexterm"NAME="TCP2-CH-10-IX-REWRITE-RULES-USING-EXTERNAL-DATABASES-IN"></A>External databases can be used to transform addresses in rewrite rules.The database is included in the transformation part of a rule by usingthe following syntax:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"><CODECLASS="userinput"><B>$(</B></CODE><CODECLASS="replaceable"><I>map key</I></CODE> [<CODECLASS="userinput"><B>$@</B></CODE><CODECLASS="replaceable"><I>argument</I></CODE>...] [<CODECLASS="userinput"><B>$:</B></CODE><CODECLASS="replaceable"><I>default</I></CODE>] <CODECLASS="userinput"><B>$)</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para"><CODECLASS="replaceable"><I>map</I></CODE> is the name assigned to the database<ACLASS="indexterm"NAME="AUTOID-14496"></A>within the<EMCLASS="emphasis">sendmail.cf</EM> file. The name assigned to <CODECLASS="replaceable"><I>map</I></CODE> is not limitedby the rules that govern macro names. Like mailer names, map namesare only used inside of the <EMCLASS="emphasis">sendmail.cf</EM> file and can be anyname you choose. Select a simple descriptive name, such as &quot;users&quot;or &quot;mailboxes.&quot;  The map name is assigned with a <BCLASS="emphasis.bold">K</B> command.(More on the <BCLASS="emphasis.bold">K</B> command in a moment.)</P><PCLASS="para"><CODECLASS="replaceable"><I>key</I></CODE> is the value used to index into the database. The valuereturned from the database for this key is used to rewrite the inputaddress. If no value is returned, the input address is not changedunless a <CODECLASS="replaceable"><I>default</I></CODE> value is provided.</P><PCLASS="para">An <CODECLASS="replaceable"><I>argument</I></CODE> is an additional value passed to the database procedure<ACLASS="indexterm"NAME="AUTOID-14509"></A>along with the key. Multiple arguments can be used, but each argumentmust start with <BCLASS="emphasis.bold">$@</B>. The argument can be used by the databaseprocedure to modify the value it returns to sendmail. It isreferenced inside the database as <BCLASS="emphasis.bold">%</B><EMCLASS="emphasis">n</EM>, where <EMCLASS="emphasis">n</EM> is a digitthat indicates the order in which the argument appears in the rewriterule&nbsp;- %1, %2, and so on&nbsp;- when multiple arguments are used. (Argument %0 isthe <CODECLASS="replaceable"><I>key</I></CODE>.)</P><PCLASS="para">An example will make the use of arguments clear. Assume the followinginput address:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">tom.martin&lt;@sugar&gt;</PRE></BLOCKQUOTE></P><PCLASS="para">Further, assume the following database with the internal sendmailname of &quot;relays&quot;:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">oil     %1&lt;@relay.fats.com&gt;sugar   %1&lt;@relay.calories.com&gt;salt    %1&lt;@server.sodium.org&gt;</PRE></BLOCKQUOTE></P><PCLASS="para">Finally, assume the following rewrite rule:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">R$+&lt;@$-&gt;     $(relays $2 $@ $1 $:$1&lt;@$2&gt; $)</PRE></BLOCKQUOTE></P><PCLASS="para">The input address <EMCLASS="emphasis">tom.martin&lt;@sugar&gt;</EM> matches the pattern becauseit has one or more tokens (tom.martin) before the literal &lt;@ and exactlyone token (sugar) after it. The pattern matching creates two indefinitetokens and passes them to the transformation. The transformationcalls the database (relays) and passes it token $2 (sugar) as thekey and token $1 (tom.martin) as the argument. If the key is notfound in the database the default ($1&lt;@$2&gt;) is used. In this case,the key is found in the database. The database program uses the key toretrieve &quot;%1@relay.calories.com&quot;, expands the %1 argument, and returns&quot;tom.martin@relay.calories.com&quot; to sendmail, which uses the returnedvalue to replace the input address.</P><PCLASS="para">Before a database can be used within sendmail, it must be defined.<ACLASS="indexterm"NAME="AUTOID-14529"></A>This is done with the <BCLASS="emphasis.bold">K</B> command. The syntax of the <BCLASS="emphasis.bold">K</B>command is:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"><CODECLASS="userinput"><B>K</B></CODE><CODECLASS="replaceable"><I>name type</I></CODE> [<CODECLASS="replaceable"><I>arguments</I></CODE>]</PRE></BLOCKQUOTE></P><PCLASS="para"><CODECLASS="replaceable"><I>name</I></CODE> is the name used to reference this database withinsendmail. In the example above, the <CODECLASS="replaceable"><I>name</I></CODE> is &quot;relays&quot;.</P><PCLASS="para"><CODECLASS="replaceable"><I>type</I></CODE> is the class of database. The <CODECLASS="replaceable"><I>type</I></CODE> specified inthe <BCLASS="emphasis.bold">K</B> command must match the database support complied into yoursendmail. Most sendmail programs do not support all databasetypes, but a few basic types are widely supported. Common types are dbm,hash, btree, and nis. There are many more, all of which are describedin <ACLASS="xref"HREF="appe_01.htm"TITLE="A sendmail Reference">Appendix E</A>.</P><PCLASS="para"><CODECLASS="replaceable"><I>arguments</I></CODE> are optional. Generally, the only argument is the pathof the database file. Occasionally the arguments include flags that areinterpreted by the database program. The full list of K command flagsthat can be passed in the argument field are listed in <ACLASS="xref"HREF="appe_01.htm"TITLE="A sendmail Reference">Appendix E</A>.</P><PCLASS="para">To define the &quot;relays&quot; database file used in the example above, we mightenter the following command in the <EMCLASS="emphasis">sendmail.cf</EM> file:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Krelays dbm /usr/local/relays</PRE></BLOCKQUOTE></P><PCLASS="para">The name <EMCLASS="emphasis">relays</EM> is simply a name you chose because it isdescriptive. The database type <EMCLASS="emphasis">dbm</EM> is a type supported by yourversion of sendmail and was used by you when you built the databasefile. Finally, the argument <EMCLASS="emphasis">/usr/local/relays</EM> is the location ofthe database file you created.<ACLASS="indexterm"NAME="AUTOID-14558"></A><ACLASS="indexterm"NAME="AUTOID-14559"></A></P><PCLASS="para">Don't worry if you're confused about how to build and use database fileswithin sendmail. We will revisit this topic later in the chapterand the examples will make the practical use of database files clear.</P></DIV></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="TCP2-CH-10-SECT-6.3">10.6.3 The Set Ruleset Command </A></H3><PCLASS="para"><ACLASS="indexterm"NAME="TCP2-CH-10-IX-RULESETS"></A><ACLASS="indexterm"NAME="TCP2-CH-10-IX-SET-RULESET-S-COMMAND"></A>Rulesets are groups of associated rewrite rules that can be referencedby a number. The <BCLASS="emphasis.bold">S</B> command marks the beginning of a ruleset andidentifies it with a number. In the <BCLASS="emphasis.bold">S</B><EMCLASS="emphasis">n</EM> command syntax, <EMCLASS="emphasis">n</EM>is the number that identifies the ruleset. Numbers in the range of 0 to99 are used.</P><PCLASS="para">Rulesets can be thought of as subroutines, or functions, designed toprocess email addresses.<ACLASS="indexterm"NAME="AUTOID-14573"></A>They are called from mailer definitions, fromindividual rewrite rules, or directly by sendmail. Six rulesetshave special functions and are called directly by sendmail.These are:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">Ruleset 3 is the firstruleset applied to addresses. It converts an address<ACLASS="indexterm"NAME="AUTOID-14580"></A>to the canonical form: <EMCLASS="emphasis">local-part</EM>@<EMCLASS="emphasis">host.domain</EM>.</P><PCLASS="para">In specific circumstances the <EMCLASS="emphasis">@host.domain</EM> part is added bysendmail after ruleset 3 terminates. This happens only if themail has been received from a mailer with the C flag set.[19]In our sample configuration file, none of the mailers use this flag.If the C flag is set, the sender's <EMCLASS="emphasis">@host.domain</EM> is added toall addresses that have only a <EMCLASS="emphasis">local-part</EM>. This processing isdone after ruleset 3 and before rulesets 1 and 2. (This function isrepresented in <ACLASS="xref"HREF="ch10_06.htm#TCP2-CH-10-FIG-3"TITLE="Sequence of rulesets">Figure 10.4</A>by the box marked &quot;D.&quot;)</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[19] See <ACLASS="xref"HREF="appe_01.htm"TITLE="A sendmail Reference">Appendix E</A> for the full set of mailer flags.</P></BLOCKQUOTE></LI><LICLASS="listitem"><PCLASS="para">Ruleset 0 is applied to the addresses used to deliver the mail.Ruleset 0 is applied after ruleset 3, and only to the recipientaddresses actually used for mail delivery. It resolves the address tothe triple (<EMCLASS="emphasis">mailer, host, user</EM>) composed of the name of themailer that will deliver the mail, the recipient hostname, and therecipient username.</P></LI><LICLASS="listitem"><PCLASS="para">Ruleset 1 is applied to all sender addresses<ACLASS="indexterm"NAME="AUTOID-14598"></A>in the message.</P></LI><LICLASS="listitem"><PCLASS="para">Ruleset 2 is applied to all recipient addresses<ACLASS="indexterm"NAME="AUTOID-14603"></A>in the message.</P></LI><LICLASS="listitem"><PCLASS="para">Ruleset 4 is applied to all addresses in the message and is used totranslate internal address formats into external address formats.</P></LI><LICLASS="listitem"><PCLASS="para">Ruleset 5 is applied to local addresses after sendmail processesthe address against the aliases file.<ACLASS="indexterm"NAME="AUTOID-14610"></A>Ruleset 5 is only applied tolocal addresses that do not have an alias.</P></LI></UL><PCLASS="para"><ACLASS="xref"HREF="ch10_06.htm#TCP2-CH-10-FIG-3"TITLE="Sequence of rulesets">Figure 10.4</A>shows the flow of the message and addresses through theserulesets. The D box does not symbolize a ruleset. It is the internalsendmail process described above. The S and R symbols do standfor rulesets. They have numeric names just like all normal rulesets,but the numbers are not fixed as is the case with rulesets 0, 1, 2,3, 4, and 5. The S and R ruleset numbers are defined in the S andR fields of the mailer definition. Each mailer may specify its own Sand R rulesets for mailer-specific cleanup of the sender and recipientaddresses just before the message is delivered.</P><H4CLASS="figure"><ACLASS="title"NAME="TCP2-CH-10-FIG-3">Figure 10.4: Sequence of rulesets</A></H4><IMGCLASS="graphic"SRC="figs/tcp2_1004.gif"ALT="Figure 10.4"><PCLASS="para">There are, of course, many more rulesets in most <EMCLASS="emphasis">sendmail.cf</EM> files.The other rulesets provide additional address processing and are calledby existing rulesets using the <BCLASS="emphasis.bold">$&gt;</B><EMCLASS="emphasis">n</EM> construct.[20]The rulesets provided in any sample <EMCLASS="emphasis">sendmail.cf</EM> file will beadequate for delivering SMTP mail. It's unlikely you'll have to add tothese rulesets, unless you want to add new features to your mailer.<ACLASS="indexterm"NAME="AUTOID-14626"></A><ACLASS="indexterm"NAME="AUTOID-14627"></A><ACLASS="indexterm"NAME="AUTOID-14628"></A></P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[20] See Table 10-5.</P></BLOCKQUOTE></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch10_05.htm"TITLE="10.5 sendmail Configuration "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 10.5 sendmail Configuration "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="TCP/IP Network Administration"><IMGSRC="../gifs/txthome.gif"ALT="TCP/IP Network Administration"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch10_07.htm"TITLE="10.7 Modifying a sendmail.cf File "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 10.7 Modifying a sendmail.cf File "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">10.5 sendmail Configuration </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">10.7 Modifying a sendmail.cf File </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><PCLASS="nav"><FONTSIZE="-1">[ <AHREF="../index.htm"TITLE="The Networking CD Bookshelf">Library Home</A> | <AHREF="../dnsbind/index.htm"TITLE="DNS &amp; BIND">DNS &amp; BIND</A> | <AHREF="index.htm"TITLE="TCP/IP Network Administration">TCP/IP</A> | <AHREF="../sendmail/index.htm"TITLE="sendmail">sendmail</A> | <AHREF="../smdref/index.htm"TITLE="sendmail Desktop Reference">sendmail Reference</A> | <AHREF="../firewall/index.htm"TITLE="Building Internet Firewalls">Firewalls</A> | <AHREF="../puis/index.htm"TITLE="Practical UNIX &amp; Internet Security">Practical Security</A> ]</FONT></P></DIV></BODY></HTML>