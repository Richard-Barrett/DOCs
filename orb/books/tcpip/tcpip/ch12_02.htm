<HTML><HEAD><TITLE>[Chapter 12] 12.2 User Authentication </TITLE><METANAME="DC.title"CONTENT="TCP/IP Network Administration"><METANAME="DC.creator"CONTENT="Craig Hunt"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1999-02-04T01:41:38Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-322-7"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch12_01.htm"TITLE="12. Network Security "><LINKREL="prev"HREF="ch12_01.htm"TITLE="12.1 Security Planning "><LINKREL="next"HREF="ch12_03.htm"TITLE="12.3 Application Security "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="TCP/IP Network Administration"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,65"HREF="index.htm"ALT="TCP/IP Network Administration"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/tsrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch12_01.htm"TITLE="12.1 Security Planning "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 12.1 Security Planning "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 12<BR>Network Security </FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch12_03.htm"TITLE="12.3 Application Security "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 12.3 Application Security "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="TCP2-CH-12-SECT-2">12.2 User Authentication </A></H2><PCLASS="para"><ACLASS="indexterm"NAME="TCP2-CH-12-IX-USERS-AUTHENTICATION-OF"></A><ACLASS="indexterm"NAME="TCP2-CH-12-IX-USERS-AUTHENTICATION-OF2"></A>Good passwords are one of the simplest parts of good network security.Passwords are used to log in to systems that use password authentication.Popular mythology says that network security breaches arecaused by sophisticated security crackers who discover software securityholes to break into computer systems. In reality, many intruders entersystems simply by guessing or stealing passwords,<ACLASS="indexterm"NAME="AUTOID-17074"></A>or by exploiting well-known security problems in outdated software.<ACLASS="indexterm"NAME="AUTOID-17077"></A>Later in this chapter we look at guidelines for keeping software up-to-date, and at ways toprevent a thief from stealing your password. First, let's see what wecan do to prevent it from being guessed.</P><PCLASS="para">These are a few things that make it easy to guess passwords:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">Accounts that use the account name as the password. Accounts with thistype of trivial password are called <EMCLASS="emphasis">joe accounts</EM>.<ACLASS="indexterm"NAME="AUTOID-17085"></A></P></LI><LICLASS="listitem"><PCLASS="para">Guest or demonstration accounts that require no password, or use awell-publicized password.</P></LI><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-17091"></A>System accounts with default passwords.</P></LI><LICLASS="listitem"><PCLASS="para">User who tell their passwords to others.</P></LI></UL><PCLASS="para">Guessing these kinds of passwords requires no skill, just lots of sparetime! Changing your password frequently<ACLASS="indexterm"NAME="AUTOID-17097"></A>is a deterrent to passwordguessing. However, if you choose good passwords, don't change them sooften that it is hard to remember them. Many security expertsrecommend that passwords should be changed about every 3 to 6 months.</P><PCLASS="para">A more sophisticated form of password guessing is <EMCLASS="emphasis">dictionaryguessing</EM>.<ACLASS="indexterm"NAME="AUTOID-17102"></A>Dictionary guessing uses a program that encrypts eachword in a dictionary (e.g., <EMCLASS="emphasis">/usr/dict/words</EM>) and compares eachencrypted word to the encrypted password in the <EMCLASS="emphasis">/etc/passwd</EM>file. Dictionary guessing is not limited to words from a dictionary.Things known about you (your name, initials, telephone number, etc.)are also run through the guessing program when trying to guess thepassword for your account.Because of dictionary guessing, you must protect the <EMCLASS="emphasis">/etc/passwd</EM>file.<ACLASS="indexterm"NAME="AUTOID-17107"></A><ACLASS="indexterm"NAME="AUTOID-17110"></A></P><PCLASS="para">Some systems provide a <EMCLASS="emphasis">shadow password file</EM> to hide the encryptedpasswords from potential intruders. If your system has a shadow passwordfacility, use it. Hiding encrypted passwords greatly reduces the riskof password guessing.</P><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="TCP2-CH-12-SECT-2.1">12.2.1 The Shadow Password File </A></H3><PCLASS="para"><ACLASS="indexterm"NAME="TCP2-CH-12-IX-SHADOW-PASSWORD-FILE"></A>Shadow password files have restricted permissions that prevent themfrom being read by intruders. The encrypted password is stored only inthe shadow password file, <EMCLASS="emphasis">/etc/shadow</EM>,<ACLASS="indexterm"NAME="AUTOID-17122"></A><ACLASS="indexterm"NAME="AUTOID-17124"></A>and not in the <EMCLASS="emphasis">/etc/passwd</EM> file. The <EMCLASS="emphasis">passwd</EM> file is maintained<ACLASS="indexterm"NAME="AUTOID-17129"></A>as a world-readable file because it contains information that variousprograms use. The <EMCLASS="emphasis">shadow</EM> file can only be read by root and itdoes not duplicate the information in the <EMCLASS="emphasis">passwd</EM> file. It onlycontains passwords and the information needed to manage them. Theformat of a <EMCLASS="emphasis">shadow</EM> file entry on a Solaris system is:</P><BLOCKQUOTECLASS="blockquote"><PCLASS="para"><EMCLASS="emphasis">username</EM><BCLASS="emphasis.bold">:</B><EMCLASS="emphasis">password</EM><BCLASS="emphasis.bold">:</B><EMCLASS="emphasis">lastchg</EM><BCLASS="emphasis.bold">:</B><EMCLASS="emphasis">min</EM><BCLASS="emphasis.bold">:</B><EMCLASS="emphasis">max</EM><BCLASS="emphasis.bold">:</B><EMCLASS="emphasis">warn</EM><BCLASS="emphasis.bold">:</B><EMCLASS="emphasis">inactive</EM><BCLASS="emphasis.bold">:</B><EMCLASS="emphasis">expire</EM><BCLASS="emphasis.bold">:</B><EMCLASS="emphasis">flag</EM></P></BLOCKQUOTE><PCLASS="para"><EMCLASS="emphasis">username</EM> is the login username. <EMCLASS="emphasis">password</EM> is theencrypted password or one of the keyword values <CODECLASS="literal">NP</CODE> and<CODECLASS="literal">*LK*</CODE>. <EMCLASS="emphasis">lastchg</EM> is the date that the password was lastchanged, written as the number of days from January 1, 1970 to thedate of the change. <EMCLASS="emphasis">min</EM> is the minimum number of days that mustelapse before the password can be changed. <EMCLASS="emphasis">max</EM> is the maximumnumber of days the user can keep the password before it must be changed.<EMCLASS="emphasis">warn</EM> is the number of days before the password expires that theuser is warned. <EMCLASS="emphasis">inactive</EM> is the number of days the account canbe inactive before it is locked. <EMCLASS="emphasis">expire</EM> is the date on which theaccount will be closed. <EMCLASS="emphasis">flag</EM> is unused.</P><PCLASS="para">The encrypted password appears only in this file. Every password fieldin the <EMCLASS="emphasis">/etc/passwd</EM> file contains an <BCLASS="emphasis.bold">x</B>, which tells thesystem to look in the <EMCLASS="emphasis">shadow</EM> file for the real password. Everypassword field in the <EMCLASS="emphasis">/etc/shadow</EM> file contains either anencrypted password, <CODECLASS="literal">NP</CODE>, or <CODECLASS="literal">*LK*</CODE>. If it contains the keyword<CODECLASS="literal">NP</CODE>,<ACLASS="indexterm"NAME="AUTOID-17173"></A>it means that there is no password because this is not alogin account. System accounts, such as <EMCLASS="emphasis">daemon</EM> or <EMCLASS="emphasis">uucp</EM>,are not login accounts, so they have <CODECLASS="literal">NP</CODE> in the passwordfield.<ACLASS="indexterm"NAME="AUTOID-17178"></A><CODECLASS="literal">*LK*</CODE> in the password field means that this account has beenlocked and is therefore disabled from any further use.</P><PCLASS="para">While the most important purpose of the <EMCLASS="emphasis">shadow</EM> file is to protect the password, the additional fields in the shadow entry provide other useful security services.<ACLASS="indexterm"NAME="AUTOID-17183"></A>One of these is <EMCLASS="emphasis">password aging</EM>.A password aging mechanism defines a lifetime for each password. Whena password reaches the end of its lifetime, the password agingmechanism notifies the user to change the password. If it is notchanged within some specified period, the password is removed from thesystem and the user is blocked from using his account.</P><PCLASS="para">The lastchg, max, and warn fields all play a role inpassword aging. They allow the system to know when the password waschanged and how long it should be kept, as well as when the user shouldbe warned about his impending doom. Another nice feature of the shadow file is the min field. This is a more subtle aspectof password aging. It prevents the user from changing her favoritepassword to a dummy password and then immediately back to herfavorite. When the password is changed it must be used for the numberof days defined by min before it can be changed again. Thisreduces one of the common tricks used to avoid really changingpasswords.<ACLASS="indexterm"NAME="AUTOID-17188"></A></P><PCLASS="para">The inactive and expire fields help eliminate unused<ACLASS="indexterm"NAME="AUTOID-17193"></A>accounts. Here &quot;inactivity&quot; is determined by the number of days theaccount continues with an expired password. Once the password expires,the user is given some number of days to log in and set a new password.If the user does not log in before the specified number of days haselapsed, the account is locked and the user cannot log in.</P><PCLASS="para">The expire field<ACLASS="indexterm"NAME="AUTOID-17197"></A>lets you a create user account that has a specified&quot;life.&quot;  When the date stored in the expire field is reached,the user account is disabled even if it is still active. The expirationdate is stored as the number of days since January 1, 1970.</P><PCLASS="para">On a Solaris system the <EMCLASS="emphasis">/etc/shadow</EM> file is not edited directly.It is modified by using the &quot;users&quot; sub-window of the <BCLASS="emphasis.bold">admintool</B><ACLASS="indexterm"NAME="AUTOID-17202"></A>or special options on the <BCLASS="emphasis.bold">passwd</B> command line.<ACLASS="indexterm"NAME="AUTOID-17205"></A>This window isshown in <ACLASS="xref"HREF="ch12_02.htm#TCP2-CH-12-FIG-0"TITLE="Admintool password maintenance">Figure 12.1</A>The username, password, min, max, warn, inactive, and expire fields are clearly shown.</P><H4CLASS="figure"><ACLASS="title"NAME="TCP2-CH-12-FIG-0">Figure 12.1: Admintool password maintenance</A></H4><IMGCLASS="graphic"SRC="figs/tcp2_1201.gif"ALT="Figure 12.1"><PCLASS="para">The <BCLASS="emphasis.bold">passwd</B> command on Solaris systems has <BCLASS="emphasis.bold">-n </B><EMCLASS="emphasis">min</EM>,<BCLASS="emphasis.bold">-w </B><EMCLASS="emphasis">warn</EM>, and <BCLASS="emphasis.bold">-x </B><EMCLASS="emphasis">max</EM> options to set the min, max,and warn fields in the <EMCLASS="emphasis">/etc/shadow</EM> file. Only the root user caninvoke these options.Here root sets the maximum life of Tyler's password to 180 days:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"># passwd -x 180 tyler</PRE></BLOCKQUOTE></P><PCLASS="para">The Solaris system permits the system administrator to set defaultvalues for all of these options so that they do not have to be setevery time a user is added through the <BCLASS="emphasis.bold">admintool</B> or the<BCLASS="emphasis.bold">passwd</B> command line. The default values are set in the<EMCLASS="emphasis">/etc/default/passwd</EM> file.<ACLASS="indexterm"NAME="AUTOID-17226"></A><ACLASS="indexterm"NAME="AUTOID-17228"></A></P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <BCLASS="emphasis.bold">cat /etc/default/passwd</B>#ident  &quot;@(#)passwd.dfl 1.3     92/07/14 SMI&quot;MAXWEEKS=MINWEEKS=PASSLENGTH=6</PRE></BLOCKQUOTE></P><PCLASS="para">&#13;The default values that can be set in the <EMCLASS="emphasis">/etc/default/passwd</EM>file are:</P><DLCLASS="variablelist"><DTCLASS="term">MAXWEEKS</DT><DDCLASS="listitem"><PCLASS="para">The maximum life of a password defined in weeks&nbsp;- not days. The 180-dayperiod used in the example above would be defined with this parameteras MAXWEEKS=26.</P></DD><DTCLASS="term">MINWEEKS</DT><DDCLASS="listitem"><PCLASS="para">The minimum number of weeks a password must be used before it can bechanged.</P></DD><DTCLASS="term">PASSLENGTH</DT><DDCLASS="listitem"><PCLASS="para">The minimum number of characters that a password must contain. This isset to 6 in the sample file. Only the first eight characters aresignificant on a Solaris system. Setting the value above 8 does notchange that fact.</P></DD><DTCLASS="term">WARNWEEKS</DT><DDCLASS="listitem"><PCLASS="para">The number of weeks before a password expires that the user is warned.</P></DD></DL><PCLASS="para">This section uses Solaris as an example because the shadow password systemis provided as part of the Solaris operating system. If it doesn't comewith your system, you may be able to download shadow password softwarefrom the Internet. It is available for Linux systems. The <EMCLASS="emphasis">shadow</EM>file described above is exactly the same format used on Linux systemsand it functions in the same way.</P><PCLASS="para">No intruder can take the encrypted password and decrypt it back to itsoriginal form, but encrypted passwords can be compared againstencrypted dictionaries. If bad passwords are used, they can be easilyguessed. Take care to protect the <EMCLASS="emphasis">/etc/passwd</EM> file and choosegood passwords.<ACLASS="indexterm"NAME="AUTOID-17257"></A></P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="TCP2-CH-12-SECT-2.2">12.2.2 Choosing a Password </A></H3><PCLASS="para"><ACLASS="indexterm"NAME="TCP2-CH-12-IX-PASSWORD-CHOOSING"></A>A good password is an essential part of security. We usually think ofthe password used for login; however, one-time passwords and encryptionkeys are needed. For all of these purposes you want to choose a good password.Choosing a good password boils down to this, don't choose a password thatcan be guessed using the techniques described above. Some guidelines<ACLASS="indexterm"NAME="AUTOID-17264"></A>for choosing a good password are:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">Don't use your login name.</P></LI><LICLASS="listitem"><PCLASS="para">Don't use the name of anyone or anything.</P></LI><LICLASS="listitem"><PCLASS="para">Don't use any English, or foreign language, word or abbreviation.</P></LI><LICLASS="listitem"><PCLASS="para">Don't use any personal information associated with the owner of theaccount. For example, don't use initials, phone number, socialsecurity number, job title, organizational unit, etc.</P></LI><LICLASS="listitem"><PCLASS="para">Don't use keyboard sequences, e.g., qwerty.</P></LI><LICLASS="listitem"><PCLASS="para">Don't use any of the above spelled backwards, or in caps, orotherwise disguised.</P></LI><LICLASS="listitem"><PCLASS="para">Don't use an all-numeric password.</P></LI><LICLASS="listitem"><PCLASS="para">Don't use a sample password, no matter how good, that you've gottenfrom a book that discusses computer security.</P></LI><LICLASS="listitem"><PCLASS="para"><EMCLASS="emphasis">Do</EM> use a mixture of numbers, special characters, and mixed-caseletters.</P></LI><LICLASS="listitem"><PCLASS="para"><EMCLASS="emphasis">Do</EM> use at least six characters.</P></LI><LICLASS="listitem"><PCLASS="para"><EMCLASS="emphasis">Do</EM> use a seemingly random selection of letters and numbers.</P></LI></UL><PCLASS="para">Common suggestions for constructing seemingly random<ACLASS="indexterm"NAME="AUTOID-17295"></A>passwords are:</P><OLCLASS="orderedlist"><LICLASS="listitem"><PCLASS="para">Use the first letter of each word from a line in a book, song, or poem.For example: &quot;People don't know you and trust is a joke.&quot;[1]would produce Pd'ky&amp;tiaj.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[1] Toad the Wet Sprocket, &quot;Walk on the Ocean.&quot;</P></BLOCKQUOTE></LI><LICLASS="listitem"><PCLASS="para">Use the output from a random password generator. Select a randomstring that can be pronounced and is easy to remember. For example,the random string &quot;adazac&quot; can be pronounced a-da-zac, and you can remember it by thinking of it as &quot;A-to-Z.&quot; Add uppercaseletters to create your own emphasis, e.g., aDAzac.[2]</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[2] A VMS-system password generator created thispassword.</P></BLOCKQUOTE></LI><LICLASS="listitem"><PCLASS="para">Use two short words connected by punctuation, e.g., wRen%Rug.</P></LI><LICLASS="listitem"><PCLASS="para">Use numbers and letters to create an imaginary vanity license platepassword, e.g., 2hot4U?.</P></LI></OL><PCLASS="para">A common theme of these suggestions is that the password should be easyto remember. Avoid passwords that must be written down to beremembered. If unreliable people gain access to your office and findthe password you have written down, the security of your system will becompromised.</P><PCLASS="para">However, don't assume that you will not be able to remember a randompassword. It may be difficult the first few times you use thepassword, but any password that is used often enough is easy to<ACLASS="indexterm"NAME="AUTOID-17313"></A>remember. If you have an account on a system that you rarely use, youmay have trouble remembering a random password. But in that case, thebest solution is to get rid of the account. Unused and under-utilizedaccounts are prime targets for intruders. They like to attack unusedaccounts because there is no user to notice changes to the files orstrange <EMCLASS="emphasis">Last login:</EM> messages. Remove all unused accounts from<ACLASS="indexterm"NAME="AUTOID-17316"></A>your systems.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-17320"></A>How do you ensure that the guidance for creating new passwords isfollowed? The most important step is to make sure that every userknows these suggestions and the importance of following them. Coverthis topic in your network security plan, and periodically reinforce itthrough newsletter articles and online system bulletins.</P><PCLASS="para">It is also possible to use programs that force users tofollow specific password selection guidelines. The Web page<ACLASS="systemitem.sitename"HREF="http://csrc.nist.gov/tools/tools.htm">http://csrc.nist.gov/tools/tools.htm</A> lists several programs that doexactly that.<ACLASS="indexterm"NAME="AUTOID-17325"></A></P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="TCP2-CH-12-SECT-2.3">12.2.3 One-Time Passwords </A></H3><PCLASS="para"><ACLASS="indexterm"NAME="TCP2-CH-12-IX-PASSWORD-ONE-TIME"></A>Sometimes good passwords are not enough. Passwords are transmitted acrossthe network as clear text. Intruders use protocol-analyzer software<ACLASS="indexterm"NAME="AUTOID-17332"></A>to spy on network traffic and steal passwords. If a thief steals yourpassword, it does not matter how good the password was.</P><PCLASS="para">The thief can be on any network that handles your TCP/IP packets.If you log in through your local network you have to worry only aboutlocal snoops. But if you log in over the Internet you must worry aboutunseen listeners from any number of unknown networks.</P><PCLASS="para">The <BCLASS="emphasis.bold">rlogin</B> command<ACLASS="indexterm"NAME="AUTOID-17338"></A>is not vulnerable to this type of attack.<BCLASS="emphasis.bold">rlogin</B> does not send the password over the network, because userauthentication is done only on the local host. The remote host acceptsthe user because it trusts the local host. However, trust shouldbe extended only to UNIX hosts on your local network that you really do trust.Never extend trust to remote systems.<ACLASS="indexterm"NAME="AUTOID-17342"></A>It is too easy for an intruder topretend that he is logged into a trusted system by stealing the trustedsystem's IP address, or by corrupting DNS so that it gives his system'saddress in response to the trusted system's name. <BCLASS="emphasis.bold">rlogin</B> doesnot help when you must log in from a remote site or an untrusted system.Use one-time passwords for remote logins. Because a one-time passwordcan be used only once, a thief who steals the password cannot use it.</P><PCLASS="para">Naturally, one-time passwords systems are a hassle. You must carry a listof one-time passwords, or something that can generate them,with you any time you want to log in. If you forget the password list,you cannot log in. However, this may not be as big a problem as it seems.You usually log in from your office where your primarylogin host is probably on your desktop or your local area network.When you log in to your desktop system from its keyboard, the passworddoes not traverse the network, so you can use a reusable password.And <BCLASS="emphasis.bold">rlogin</B> can be used between UNIX hosts on a local area network.One-time passwords are only needed for the occasions when you log in from aremote location or an untrusted host.For this reason, some one-timepassword systems are designed to allow reusable passwords when theyare appropriate.</P><PCLASS="para">There are several one-time password systems. <ACLASS="indexterm"NAME="AUTOID-17350"></A>Some use specializedhardware such as &quot;smart cards.&quot;  OPIE is a free software system thatrequires no special hardware.</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="TCP2-CH-12-SECT-2.4">12.2.4 OPIE </A></H3><PCLASS="para"><ACLASS="indexterm"NAME="TCP2-CH-12-IX-ONE-TIME-PASSWORDS-IN-EVERYTHING-OPIE"></A><EMCLASS="emphasis">One-time Passwords In Everything</EM> (OPIE) is free software from theU.S. Naval Research Laboratory (NRL)<ACLASS="indexterm"NAME="AUTOID-17360"></A>that modifies a UNIX system to useone-time passwords. OPIE is directly derived from SKey, which is aone-time password system created by Bell Communications Research(Bellcore).</P><PCLASS="para">Download OPIE from<ACLASS="systemitem.url"HREF="ftp://ftp.nrl.navy.mil/pub/security/opie/opie&#8211;2.3.tar.gz">ftp://ftp.nrl.navy.mil/pub/security/opie/opie-2.3.tar.gz</A>. It isa binary file. <BCLASS="emphasis.bold">gunzip</B> the file and extract it using <BCLASS="emphasis.bold">tar</B>.The directory this produces contains the source files, Makefiles, andscripts necessary to compile and install OPIE.</P><PCLASS="para">OPIE comes with <BCLASS="emphasis.bold">configure</B>, an auto-configuration script thatdetects your system's configuration and modifies the Makefile accordingly.It does a good job, but you still should manually edit the Makefile tomake sure it is correct. For example: my Linux system uses the WashingtonUniversity FTP daemon <BCLASS="emphasis.bold">wu.ftpd</B>. OPIE replaces <BCLASS="emphasis.bold">login</B>, <BCLASS="emphasis.bold">su</B>,and <BCLASS="emphasis.bold">ftpd</B> with its own version of these programs. On my Linux system,<BCLASS="emphasis.bold">configure</B> did not find <BCLASS="emphasis.bold">ftpd</B> and I did not notice the problemwhen I checked the Makefile. <BCLASS="emphasis.bold">make</B> ran without errors but <BCLASS="emphasis.bold">makeinstall</B> failed during the install of the OPIE FTP daemon. The Makefilewas easily corrected and the rerun of <BCLASS="emphasis.bold">make install</B> was successful.</P><PCLASS="para">The effects of OPIE are evident as soon as the install completes. Run<BCLASS="emphasis.bold">su</B> and you're prompted with <CODECLASS="literal">root's response:</CODE> instead of<CODECLASS="literal">Password:</CODE>.  <BCLASS="emphasis.bold">login</B> prompts with <CODECLASS="literal">Response or Password:</CODE> insteadof just <CODECLASS="literal">Password:</CODE>. The <CODECLASS="literal">response</CODE> requested by these programs isthe OPIE equivalent of a password. Programs that prompt with <CODECLASS="literal">Response or Password</CODE> accept either the OPIE response or the traditionalpassword from the <EMCLASS="emphasis">/etc/passwd</EM> file. This feature permits usersto migrate gracefully from traditional passwords to OPIE. It alsoallows local console logins with re-usable passwords while permittingremote logins with one-time passwords. The best of both worlds&nbsp;- convenient local logins without creating separate local and remotelogin accounts!</P><PCLASS="para">To use OPIE you must first select a secret password that is usedto generate the one-time password list, and then you must run theprogram that generates the list. To select a secret password, run<ACLASS="indexterm"NAME="AUTOID-17388"></A><BCLASS="emphasis.bold">opiepassword</B> as shown below:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <BCLASS="emphasis.bold">opiepasswd -c</B>Updating kristin:Reminder  -  Only use this method from the console; NEVER from remote. If you are using telnet, xterm, or a dial-in, type ^C now or exit with no password. Then run opiepasswd without the -c parameter.Using MD5 to compute responses.Enter old secret pass phrase: <BCLASS="emphasis.bold">3J5Wd6PaWP</B>Enter new secret pass phrase: <BCLASS="emphasis.bold">9WA11WSfW95/NT</B>Again new secret pass phrase: <BCLASS="emphasis.bold">9WA11WSfW95/NT</B></PRE></BLOCKQUOTE></P><PCLASS="para">The example above shows the user <EMCLASS="emphasis">kristin</EM> updating her secretpassword. She runs <BCLASS="emphasis.bold">opiepasswd</B> from the computer's console, asindicated by the <BCLASS="emphasis.bold">-c</B> command option. Running <BCLASS="emphasis.bold">opiepasswd</B>from the console is the most secure. If it is not run from the console,you must have a copy of the <BCLASS="emphasis.bold">opiekey</B> software<ACLASS="indexterm"NAME="AUTOID-17403"></A>with you to generatethe correct responses needed to enter your old and new secret passwordsbecause clear-text passwords are only accepted from the console.Kristin is prompted to enter her old password and to select a new one.OPIE passwords must be at least 10 characters long. Since the newpassword is long enough, <BCLASS="emphasis.bold">opiepasswd</B> accepts it and displays thefollowing two lines:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">ID kristin OPIE key is 499 be93564CITE JAN GORY BELA GET ABED</PRE></BLOCKQUOTE></P><PCLASS="para">These lines tell Kristin the information she needs to generateOPIE login responses and the first response she will need to log in tothe system. The one-time password needed for Kristin's next loginresponse is the second line of this display: a group of six short,uppercase character strings. The first line of the display containsthe initial sequence number (499) and the seed (be93564) she needs,along with her secret password, to generate OPIE login responses.The software used to generate those responses is <BCLASS="emphasis.bold">opiekey</B>.</P><PCLASS="para"><BCLASS="emphasis.bold">opiekey</B> takes the login sequence number, the user's seed, and theuser's secret password as input and outputs the correct one-time password.If you have <BCLASS="emphasis.bold">opiekey</B> software on the system from which you areinitiating the login, you can produce one-time passwords one at a time.If, however, you will not have access to <BCLASS="emphasis.bold">opiekey</B> when you areaway from your login host, you can use the <BCLASS="emphasis.bold">-n</B> option to requestseveral passwords. Write the passwords down,<ACLASS="indexterm"NAME="AUTOID-17415"></A>put them in your wallet,and you're ready to go![3]In the following example we request five (<BCLASS="emphasis.bold">-n 5</B>) responses from<BCLASS="emphasis.bold">opiekey</B>:</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[3] Security experts will cringe when they read this suggestion. Writingdown passwords is a &quot;no-no.&quot;  Frankly, I think the people who stealwallets are more interested in my money and credit cards than in thepassword to my system. But you should consider this suggestion inlight of the level of protection that your system needs.</P></BLOCKQUOTE><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <BCLASS="emphasis.bold">opiekey -n 5 495 wi01309</B>Using MD5 algorithm to compute response.Reminder: Don't use  opiekey  from  telnet  or dial-in sessions.Enter secret pass phrase: <BCLASS="emphasis.bold">UUaX26CPaU</B>491: HOST VET FOWL SEEK IOWA YAP492: JOB ARTS WERE FEAT TILE IBIS493: TRUE BRED JOEL USER HALT EBEN494: HOOD WED MOLT PAN FED RUBY495: SUB YAW BILE GLEE OWE NOR</PRE></BLOCKQUOTE></P><PCLASS="para">First <BCLASS="emphasis.bold">opiekey</B> tells us that it is using the MD5 algorithm to producethe responses, which is the default for OPIE. For compatibility witholder Skey or OPIE implementations, force <BCLASS="emphasis.bold">opiekey</B> to use theMD4 algorithm by using the <BCLASS="emphasis.bold">-4</B> command-line option. <BCLASS="emphasis.bold">opiekey</B>prompts for your secret password. This is the password you defined withthe <BCLASS="emphasis.bold">opiepasswd</B> command. It then prints out the number of responsesrequested and lists them in sequence number order. The login sequencenumbers in the example are 495 to 491. When the sequence number getsdown to 10, rerun <BCLASS="emphasis.bold">opiepasswd</B> and select a new secret password.Selecting a new secret password resets the sequence number to 499.The OPIE login prompt displays a sequence number and you must providethe response that goes with that sequence number. For example:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">login: <BCLASS="emphasis.bold">tyler</B>otp-md5 492 wi01309Response or Password: <BCLASS="emphasis.bold">JOB ARTS WERE FEAT TILE IBIS</B></PRE></BLOCKQUOTE></P><PCLASS="para">At the <CODECLASS="literal">login:</CODE> prompt Tyler enters her username. The system then displaysa single line that tells her that one-time passwords are being generatedwith the MD5 algorithm (otp-md5), that this is login sequence number 492,and that the seed used for her one-time passwords is wi01309. She looksup the response for login number 492 and enters the six short strings.She then marks that response off her list because it cannot be used againto log into the system. A response from the list must be used any timeshe is not sitting at the console of her system. Reusable passwords can be used only at the console.<ACLASS="indexterm"NAME="AUTOID-17439"></A><ACLASS="indexterm"NAME="AUTOID-17440"></A></P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="TCP2-CH-12-SECT-2.5">12.2.5 Secure the r Commands </A></H3><PCLASS="para"><ACLASS="indexterm"NAME="TCP2-CH-12-IX-SECURITY-MECHANISMS-INCLUDED-WITHIN-APPLICATIONS"></A>Some applications use their own security mechanisms. Make sure thatthe security for these applications is configured properly. Inparticular, check the UNIX <BCLASS="emphasis.bold">r</B> commands,<ACLASS="indexterm"NAME="AUTOID-17448"></A>which are a set of UNIXnetworking applications comparable to <BCLASS="emphasis.bold">ftp</B> and <BCLASS="emphasis.bold">telnet</B>. Caremust be taken to ensure that the <BCLASS="emphasis.bold">r</B> commands don't compromisesystem security. Improperly configured <BCLASS="emphasis.bold">r</B> commands can openaccess to your computer facilities to virtually everyone in the world.</P><PCLASS="para">In place of password authentication, the <BCLASS="emphasis.bold">r</B> commands use asecurity system based on trusted hosts and users.<ACLASS="indexterm"NAME="AUTOID-17457"></A>Trusted users ontrusted hosts are allowed to access the local system without providinga password. Trusted hosts are also called &quot;equivalent hosts&quot;<ACLASS="indexterm"NAME="AUTOID-17459"></A>because the system assumes that users given access to a trusted host should begiven equivalent access to the local host. The system assumes thatuser accounts with the same name on both hosts are &quot;owned&quot; by the sameuser. For example, a user logged in as <EMCLASS="emphasis">becky</EM> on a trusted systemis granted the same access as a user logged in as <EMCLASS="emphasis">becky</EM> on thelocal system.</P><PCLASS="para">This authentication system requires databases that define the trustedhosts and the trusted users. The databases used to configure the<BCLASS="emphasis.bold">r</B> commands are <EMCLASS="emphasis">/etc/hosts.equiv</EM><ACLASS="indexterm"NAME="AUTOID-17466"></A><ACLASS="indexterm"NAME="AUTOID-17469"></A><ACLASS="indexterm"NAME="AUTOID-17471"></A>and <EMCLASS="emphasis">.rhosts</EM>.</P><PCLASS="para">The <EMCLASS="emphasis">/etc/hosts.equiv</EM> file defines the hosts and users that aregranted &quot;trusted&quot; <BCLASS="emphasis.bold">r</B> command access to your system. This file canalso define hosts and users that are explicitly denied trusted access.Not having trusted access doesn't mean that the user is deniedaccess; it just means that he is required to supply a password.</P><PCLASS="para">The basic format of entries in the <EMCLASS="emphasis">/etc/hosts.equiv</EM> file is:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">[<BCLASS="emphasis.bold">+</B> | <BCLASS="emphasis.bold">-</B>][<CODECLASS="replaceable"><I>hostname</I></CODE>] [<BCLASS="emphasis.bold">+</B> | <BCLASS="emphasis.bold">-</B>][<CODECLASS="replaceable"><I>username</I></CODE>]</PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="replaceable"><I>hostname</I></CODE> is the name of a &quot;trusted&quot; host, which may optionallybe preceded by a plus (+) sign.<ACLASS="indexterm"NAME="AUTOID-17489"></A>The plus sign has no real significance, except when used alone. A + sign without a hostname following it is a wildcard character that means&quot;any host.&quot;</P><PCLASS="para">If a host is granted equivalence, users logged into that host areallowed access to like-named user accounts on your system withoutproviding a password. (This is one good reason for administrators toobserve uniform rules in handing out login names.) The optional<CODECLASS="replaceable"><I>username</I></CODE> is the name of a user on the trusted host who is grantedaccess to all user accounts. If <CODECLASS="replaceable"><I>username</I></CODE> is specified, that useris not limited to like-named accounts, but is given access to all useraccounts without being required to provide a password.[4]</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[4] The <EMCLASS="emphasis">root</EM> account is not included.</P></BLOCKQUOTE><PCLASS="para">The <CODECLASS="replaceable"><I>hostname</I></CODE> may also be preceded by a minus sign (-).<ACLASS="indexterm"NAME="AUTOID-17499"></A><ACLASS="indexterm"NAME="AUTOID-17501"></A><ACLASS="indexterm"NAME="AUTOID-17503"></A>Thisexplicitly says that the host is <EMCLASS="emphasis">not</EM> an equivalent system. Usersfrom that host must always supply a password when they use an <BCLASS="emphasis.bold">r</B>command to interact with your system. A <EMCLASS="emphasis">username</EM> can also bepreceded with a minus sign. This says that, whatever else may be trueabout that host, the user is &quot;not trusted&quot; and must always supply apassword.</P><PCLASS="para">The following examples show how entries in the <EMCLASS="emphasis">hosts.equiv</EM> fileare interpreted:</P><DLCLASS="variablelist"><DTCLASS="term"><EMCLASS="emphasis">peanut</EM></DT><DDCLASS="listitem"><PCLASS="para">Allows password-free access from any user on <EMCLASS="emphasis">peanut</EM> to alike-named user account on your local system.</P></DD><DTCLASS="term"><EMCLASS="emphasis">-peanut</EM></DT><DDCLASS="listitem"><PCLASS="para">Denies password-free access from any user on <EMCLASS="emphasis">peanut</EM> to accountson your system.</P></DD><DTCLASS="term"><EMCLASS="emphasis">peanut&nbsp;-david</EM></DT><DDCLASS="listitem"><PCLASS="para">Denies password-free access to the user <EMCLASS="emphasis">david</EM>, if he attempts toaccess your system from <EMCLASS="emphasis">peanut</EM>.</P></DD><DTCLASS="term"><EMCLASS="emphasis">peanut +becky</EM></DT><DDCLASS="listitem"><PCLASS="para">Allows the user <EMCLASS="emphasis">becky</EM> to access any account (except <EMCLASS="emphasis">root</EM>)on your system, without supplying a password, if she logs in from<EMCLASS="emphasis">peanut</EM>.</P></DD><DTCLASS="term"><EMCLASS="emphasis">+ becky</EM></DT><DDCLASS="listitem"><PCLASS="para">Allows the user <EMCLASS="emphasis">becky</EM> to access any account (except <EMCLASS="emphasis">root</EM>)on your system without supplying a password, no matter what host shelogs in from.</P></DD></DL><PCLASS="para">This last entry is an example of something that should never be used inyour configuration. Don't use a standalone plus sign (+) in place ofa hostname. It allows access from any host anywhere, and can open up abig security hole. For example, if the entry shown above was in your<EMCLASS="emphasis">hosts.equiv</EM> file, an intruder could create an account named<EMCLASS="emphasis">becky</EM> on his system and gain access to every account on yoursystem. Check the <EMCLASS="emphasis">/etc/hosts.equiv</EM> and <EMCLASS="emphasis">~/.rhosts</EM> files,and <EMCLASS="emphasis">/etc/hosts.lpd</EM>, to make sure that none of them contain aplus-sign (+) entry. Remember to check the <EMCLASS="emphasis">.rhosts</EM> file inevery user's home directory.</P><PCLASS="para">A simple typographical error could give you a standalone plus sign.For example, consider the entry:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"><CODECLASS="userinput"><B>+ peanut becky</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">The system administrator probably meant &quot;give <EMCLASS="emphasis">becky</EM> password-freeaccess to all accounts when she logs in from <EMCLASS="emphasis">peanut</EM>.&quot; However,with an extraneous space after the + sign, it means &quot;allow users named<EMCLASS="emphasis">peanut</EM> and <EMCLASS="emphasis">becky</EM> password-free access from any host in theworld.&quot; Don't use a plus sign in front of a hostname, and alwaysuse care when working with the <EMCLASS="emphasis">/etc/hosts.equiv</EM> file to avoidsecurity problems.</P><PCLASS="para">When configuring the <EMCLASS="emphasis">/etc/hosts.equiv</EM> file, grant trustedaccess only to the systems and users you actually trust. Don't granttrusted access to every system attached to your local network. It isbest only to trust hosts from your local network when you know theperson responsible for that host, and when you know that the host isnot available for public use. Don't grant trusted access bydefault&nbsp;- have some reason for conferring trusted status. Never granttrust to remotely located systems. It is too easy for an intruder tocorrupt routing or DNS in order to fool your system when you granttrust to a remote system. Also, never begin your <EMCLASS="emphasis">hosts.equiv</EM>file with a minus sign (-) as the first character. (This confusessome systems, causing them to improperly grant access.) Always err onthe side of caution when creating a <EMCLASS="emphasis">hosts.equiv</EM> file. Addingtrusted hosts as they are requested is much easier than recovering froma malicious intruder.</P><PCLASS="para"><ACLASS="indexterm"NAME="TCP2-CH-12-IX-RHOSTS-FILE"></A>The <EMCLASS="emphasis">.rhosts</EM> file grants or denies password-free <BCLASS="emphasis.bold">r</B> commandaccess to a specific user's account. It is placed in the user's homedirectory and contains entries that define the trusted hosts andusers. Entries in the <EMCLASS="emphasis">.rhosts</EM> file use the same formatas entries in the <EMCLASS="emphasis">hosts.equiv</EM> file, and function in almostthe same way. The difference is the scope of access granted by entriesin these two files. In the <EMCLASS="emphasis">.rhosts</EM> file, the entries grant ordeny access to a single user account; the entries in <EMCLASS="emphasis">hosts.equiv</EM>control access to an entire system.</P><PCLASS="para">This functional difference can be shown in a simple example. Assumethe following entry:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">pecan anthony</PRE></BLOCKQUOTE></P><PCLASS="para">In <EMCLASS="emphasis">almond</EM>'s <EMCLASS="emphasis">hosts.equiv</EM> file, this entry means that theuser <EMCLASS="emphasis">anthony</EM> on <EMCLASS="emphasis">pecan</EM> can access any account on<EMCLASS="emphasis">almond</EM> without entering a password. In an <EMCLASS="emphasis">.rhosts</EM> filein the home directory of user <EMCLASS="emphasis">resnick</EM>, the exact same entryallows <EMCLASS="emphasis">anthony</EM> to <BCLASS="emphasis.bold">rlogin</B> from <EMCLASS="emphasis">pecan</EM> as <EMCLASS="emphasis">resnick</EM>without entering a password, but it does not grant password-free accessto any other accounts on <EMCLASS="emphasis">almond</EM>.</P><PCLASS="para">Individuals use the <EMCLASS="emphasis">.rhosts</EM> file to establish equivalence amongthe different accounts they own. The entry shown above would probablyonly be made if <EMCLASS="emphasis">anthony</EM> and <EMCLASS="emphasis">resnick</EM> are the sameperson. For example, I have accounts on several different systems.Sometimes my username is <EMCLASS="emphasis">hunt</EM>, and sometimes it is <EMCLASS="emphasis">craig</EM>.It would be nice if I had the same account name everywhere, but that isnot always possible; the names <EMCLASS="emphasis">craig</EM> and <EMCLASS="emphasis">hunt</EM> areused by two other people on my local network. I want to be able to<BCLASS="emphasis.bold">rlogin</B> to my workstation from any host that I have an account on,but I don't want mistaken logins from the other <EMCLASS="emphasis">craig</EM> and theother <EMCLASS="emphasis">hunt</EM>. The <EMCLASS="emphasis">.rhosts</EM> file gives me a way to controlthis problem.</P><PCLASS="para">For example, assume my username on <EMCLASS="emphasis">almond</EM> is <EMCLASS="emphasis">craig</EM>, but myusername on <EMCLASS="emphasis">filbert</EM> is <EMCLASS="emphasis">hunt</EM>. Another user on<EMCLASS="emphasis">filbert</EM> is <EMCLASS="emphasis">craig</EM>. To allow myself password-free access tomy <EMCLASS="emphasis">almond</EM> account from <EMCLASS="emphasis">filbert</EM>, and to make sure that theother user doesn't have password-free access, I put the following<EMCLASS="emphasis">.rhosts</EM> file in my home directory:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">filbert huntfilbert -craig</PRE></BLOCKQUOTE></P><PCLASS="para">Normally the <EMCLASS="emphasis">hosts.equiv</EM> file is searched first, followed by theuser's <EMCLASS="emphasis">.rhosts</EM> file, if it exists. The first explicit matchdetermines whether or not password-free access is allowed. Therefore,the <EMCLASS="emphasis">.rhosts</EM> file cannot override the <EMCLASS="emphasis">hosts.equiv</EM> file.The exception to this is root user access. When a root user attemptsto access a system via the <BCLASS="emphasis.bold">r</B> commands, the <EMCLASS="emphasis">hosts.equiv</EM> fileis not checked, only <EMCLASS="emphasis">.rhosts</EM> in the root user's home directory isconsulted. This allows root access to be more tightly controlled. Ifthe <EMCLASS="emphasis">hosts.equiv</EM> file was used for root access, entries that granttrusted access to hosts would give root users on those hosts rootprivileges. You can add trusted hosts to <EMCLASS="emphasis">hosts.equiv</EM> withoutgranting remote root users root access to your system.</P><PCLASS="para">If security is particularly important at your site, you should rememberthat the user can provide access with the <EMCLASS="emphasis">.rhosts</EM> file evenwhen the <EMCLASS="emphasis">hosts.equiv</EM> file doesn't exist. The only way to preventusers from doing this is to periodically check for and remove the<EMCLASS="emphasis">.rhosts</EM> files. As long as you have the <BCLASS="emphasis.bold">r</B> commands onyour system, it is possible for a user to accidentally compromise thesecurity of your system.<ACLASS="indexterm"NAME="AUTOID-17630"></A><ACLASS="indexterm"NAME="AUTOID-17631"></A></P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="TCP2-CH-12-SECT-2.6">12.2.6 Secure Shell </A></H3><PCLASS="para"><ACLASS="indexterm"NAME="TCP2-CH-12-IX-SECURE-SHELL-SSH"></A><ACLASS="indexterm"NAME="TCP2-CH-12-IX-SECURE-SHELL-SSH2"></A>The <BCLASS="emphasis.bold">r</B> commands, also called the remote shell, pose a securitythreat. You cannot use these commands to provide secure remote access, even if you use all the techniques given in the previous section. At best,only trusted local systems can be given access via the <BCLASS="emphasis.bold">r</B>commands. The reason for this is that the <BCLASS="emphasis.bold">r</B> commands grant trustbased on a belief that the IP address uniquely identifies the correctcomputer. Normally it does. But an intruder can corrupt DNS toprovide the wrong IP address or corrupt routing to deliver to the wrongnetwork and thus undermine the authentication scheme used by the<BCLASS="emphasis.bold">r</B> commands.</P><PCLASS="para">An alternative to the remote shell is the secure shell (SSH). SSHreplaces the standard <BCLASS="emphasis.bold">r</B> commands with secure commands thatinclude encryption and authentication. SSH uses a strongauthentication scheme to ensure that the trusted host really is thehost it claims to be. SSH provides a number of public key encryptionschemes to ensure that every packet in the stream of packets is fromthe source it claims to be from. SSH is secure and easy to use.</P><PCLASS="para">The secure shell is available via the Internet at<ACLASS="systemitem.sitename"HREF="http://www.cs.hut.fi/ssh">http://www.cs.hut.fi/ssh</A>. The Web site also provides information aboutthe secure shell. Download and compile SSH. Use the <BCLASS="emphasis.bold">configure</B>command that comes with the SSH source code to detect the configurationof your system and build the correct Makefile. Then <BCLASS="emphasis.bold">make</B> andinstall the components of SSH. The key components are:</P><DLCLASS="variablelist"><DTCLASS="term"><BCLASS="emphasis.bold">sshd</B></DT><DDCLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-17655"></A><ACLASS="indexterm"NAME="AUTOID-17658"></A>The Secure Shell daemon handles incoming SSH connections. <BCLASS="emphasis.bold">sshd</B>should be started at boot time from one of the boot scripts. Don'tstart <BCLASS="emphasis.bold">sshd</B> from <EMCLASS="emphasis">inetd.conf</EM>.  <BCLASS="emphasis.bold">sshd</B> generates anencryption key every time it starts. This can cause it to be slow tostart, which makes it unsuitable for <EMCLASS="emphasis">inetd.conf</EM>. A systemserving SSH connections must run <BCLASS="emphasis.bold">sshd</B>.</P></DD><DTCLASS="term"><BCLASS="emphasis.bold">ssh</B></DT><DDCLASS="listitem"><PCLASS="para">The Secure Shell user command.<ACLASS="indexterm"NAME="AUTOID-17672"></A><BCLASS="emphasis.bold">ssh</B> command replaces <BCLASS="emphasis.bold">rsh</B>and <BCLASS="emphasis.bold">rlogin</B>. It is used to securely pass a command to a remotesystem or to securely log in to a remote system. This command createsthe outgoing connections that are handled by the remote Secure Shelldaemon. A client system that wants to use a SSH connection must havethe <BCLASS="emphasis.bold">ssh</B> command.</P></DD><DTCLASS="term"><BCLASS="emphasis.bold">scp</B></DT><DDCLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-17684"></A><ACLASS="indexterm"NAME="AUTOID-17686"></A>Secure copy (<BCLASS="emphasis.bold">scp</B>) is the Secure Shell version of <BCLASS="emphasis.bold">rcp</B>.</P></DD><DTCLASS="term"><BCLASS="emphasis.bold">ssh-keygen</B></DT><DDCLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-17695"></A>Generates the public and private encryption keysused to secure the transmission for the Secure Shell.</P></DD></DL><PCLASS="para">When an <BCLASS="emphasis.bold">ssh</B> client connects to a <BCLASS="emphasis.bold">sshd</B> server, they exchangepublic keys. The systems compare the keys they receive to the knownkeys that they have stored in the <EMCLASS="emphasis">/etc/ssh_known_hosts</EM> file and<ACLASS="indexterm"NAME="AUTOID-17701"></A>in the <EMCLASS="emphasis">.ssh/known_hosts</EM><ACLASS="indexterm"NAME="AUTOID-17705"></A>file in the user's host directory.[5]If the key is not found or has changed, the user is asked to verify thatthe new key should be accepted:</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[5] The system administrator can initialize the <EMCLASS="emphasis">ssh_known_hosts</EM> file byrunning <BCLASS="emphasis.bold">make-ssh-known-hosts</B>, which gets the key from every hostwithin a selected domain.</P></BLOCKQUOTE><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">&gt; <CODECLASS="userinput"><B>ssh pecan</B></CODE>Host key not found from the list of known hosts.Are you sure you want to continue connecting (yes/no)? yesHost 'pecan' added to the list of known hosts.craig's password: <CODECLASS="userinput"><B>Watts.Watt.</B></CODE>Last login: Thu Sep 25 15:01:32 1997 from peanutLinux 2.0.0./usr/X11/bin/xauth:  creating new authority file /home/craig/.Xauthority</PRE></BLOCKQUOTE></P><PCLASS="para">If the key is found in one of the files or is accepted by the user, theclient uses it to encrypt a randomly generated session key. The sessionkey is then sent to the server and both systems use the key to encryptthe remainder of the SSH session.</P><PCLASS="para">The client is authenticated if it is listed in the <EMCLASS="emphasis">hosts.equiv</EM>file, the <EMCLASS="emphasis">shost.equiv</EM> file, the user's <EMCLASS="emphasis">.rhosts</EM> file, or the<EMCLASS="emphasis">.shosts</EM> file. This type of authentication is similar to the type usedby the <BCLASS="emphasis.bold">r</B> commands and the format of the <EMCLASS="emphasis">shost.equiv</EM>and the <EMCLASS="emphasis">.shosts</EM> files is the same as their <BCLASS="emphasis.bold">r</B> command equivalents.Notice that in the sample above the user is prompted for a password.If the client is not listed in one of the files, password authenticationis used. There is no need to worry about password thieves, because SSHencrypts the password before it is sent across the link.</P><PCLASS="para">Users can employ a public key challenge/response protocol for authentication. First generate your public and private encryption keys:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">&gt; <CODECLASS="userinput"><B>ssh-keygen</B></CODE>Initializing random number generator...Generating p:  ......................................++ (distance 616)Generating q:  ....................++ (distance 244)Computing the keys...Testing the keys...Key generation complete.Enter file in which to save the key (/home/craig/.ssh/identity): Enter passphrase: <CODECLASS="userinput"><B>Pdky&amp;tiaj.</B></CODE>Enter the same passphrase again: <CODECLASS="userinput"><B>Pdky&amp;tiaj.</B></CODE>Your identification has been saved in /home/craig/.ssh/identity.Your public key is:1024 35 158564823484025855320901702005057103023948197170850159592181522craig@pecanYour public key has been saved in /home/craig/.ssh/identity.pub</PRE></BLOCKQUOTE></P><PCLASS="para">The <BCLASS="emphasis.bold">ssh-keygen</B> command creates your keys. Enter a password,called a &quot;passphrase&quot; here, that is at least 10 characters long. Use therules described above to pick a good passphrase that is easy to remember.If you forget the passphrase, no one will be able to recover it for you.</P><PCLASS="para">Once you have created your keys on the client system, copy the publickey to your account on the server. The public key is stored in yourhome directory on the client in <EMCLASS="emphasis">.ssh/identity.pub</EM>.<ACLASS="indexterm"NAME="AUTOID-17735"></A>Copy itto <EMCLASS="emphasis">.ssh/authorized_keys</EM> in your home directory on the server.Now when you log in using <BCLASS="emphasis.bold">ssh</B>, you are prompted for the passphrase:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">&gt; <CODECLASS="userinput"><B>ssh pecan</B></CODE>Enter passphrase for RSA key 'craig@pecan': <CODECLASS="userinput"><B>Pdky&amp;tiaj.</B></CODE>Last login: Thu Sep 25 17:11:51 1997Linux 2.0.0.</PRE></BLOCKQUOTE></P><PCLASS="para">To improve system security, the <BCLASS="emphasis.bold">r</B> commands should be disabled<ACLASS="indexterm"NAME="AUTOID-17745"></A>after SSH is installed. Comment <BCLASS="emphasis.bold">rshd</B>, <BCLASS="emphasis.bold">rlogind</B>, <BCLASS="emphasis.bold">rexcd</B>,and <BCLASS="emphasis.bold">rexd</B> out of the <EMCLASS="emphasis">inetd.conf</EM> file to disable inboundconnections to the <BCLASS="emphasis.bold">r</B> commands. To ensure that SSH is used foroutbound connections, replace <BCLASS="emphasis.bold">rlogin</B> and <BCLASS="emphasis.bold">rsh</B> with <BCLASS="emphasis.bold">ssh</B>.To do this, store copies of the original <BCLASS="emphasis.bold">rlogin</B> and <BCLASS="emphasis.bold">rsh</B> in<ACLASS="indexterm"NAME="AUTOID-17760"></A>a safe place, re-run <BCLASS="emphasis.bold">configure</B> with the special options shown below,and run <BCLASS="emphasis.bold">make install</B>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"># <CODECLASS="userinput"><B>whereis rlogin</B></CODE>/usr/bin/rlogin# <CODECLASS="userinput"><B>whereis rsh</B></CODE>/usr/bin/rsh# <CODECLASS="userinput"><B>cp /usr/bin/rlogin /usr/lib/rlogin</B></CODE># <CODECLASS="userinput"><B>cp /usr/bin/rsh /usr/lib/rsh</B></CODE># <CODECLASS="userinput"><B>./configure --with-rsh=/usr/bin --program-transform-name='s/s/r/'</B></CODE># <CODECLASS="userinput"><B>make install</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">The example assumes that the path to the original <BCLASS="emphasis.bold">rlogin</B> and<BCLASS="emphasis.bold">rsh</B> commands is <EMCLASS="emphasis">/usr/bin</EM>. Use whatever is correct foryour system.</P><PCLASS="para">After replacing the <BCLASS="emphasis.bold">rlogin</B> and <BCLASS="emphasis.bold">rsh</B>, you can still log in tosystems that don't support SSH. You will, however, be warned that itis not a secure connection:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">&gt; <CODECLASS="userinput"><B>rlogin cow</B></CODE>Secure connection to cow refused; reverting to insecure method.Using rsh.  WARNING: Connection will not be encrypted.Last login: Wed Sep 24 22:15:28 from peanutSun Microsystems Inc.   SunOS 5.5.1     Generic May 1996You have new mail.</PRE></BLOCKQUOTE></P><PCLASS="para">SSH is an excellent way to have secure communications between systemsacross the Internet. However, it does require that both systems have SSHinstalled. When you control both ends of the link, this is not a problem.But there are times when you must log in from a system that is not underyour control. For those occasions, one-time passwords, as provided byOPIE, are still essential.<ACLASS="indexterm"NAME="AUTOID-17783"></A><ACLASS="indexterm"NAME="AUTOID-17784"></A><ACLASS="indexterm"NAME="AUTOID-17785"></A><ACLASS="indexterm"NAME="AUTOID-17786"></A></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch12_01.htm"TITLE="12.1 Security Planning "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 12.1 Security Planning "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="TCP/IP Network Administration"><IMGSRC="../gifs/txthome.gif"ALT="TCP/IP Network Administration"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch12_03.htm"TITLE="12.3 Application Security "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 12.3 Application Security "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">12.1 Security Planning </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">12.3 Application Security </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><PCLASS="nav"><FONTSIZE="-1">[ <AHREF="../index.htm"TITLE="The Networking CD Bookshelf">Library Home</A> | <AHREF="../dnsbind/index.htm"TITLE="DNS &amp; BIND">DNS &amp; BIND</A> | <AHREF="index.htm"TITLE="TCP/IP Network Administration">TCP/IP</A> | <AHREF="../sendmail/index.htm"TITLE="sendmail">sendmail</A> | <AHREF="../smdref/index.htm"TITLE="sendmail Desktop Reference">sendmail Reference</A> | <AHREF="../firewall/index.htm"TITLE="Building Internet Firewalls">Firewalls</A> | <AHREF="../puis/index.htm"TITLE="Practical UNIX &amp; Internet Security">Practical Security</A> ]</FONT></P></DIV></BODY></HTML>