<HTML><HEAD><TITLE>[Chapter 1] 1.8 Background Jobs</TITLE><METANAME="DC.title"CONTENT="Learning the Korn Shell"><METANAME="DC.creator"CONTENT="Bill Rosenblatt"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-03T20:52:20Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-054-6"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch01_01.htm"TITLE="1. Korn Shell Basics"><LINKREL="prev"HREF="ch01_07.htm"TITLE="1.7 Input and Output"><LINKREL="next"HREF="ch01_09.htm"TITLE="1.9 Special Characters and Quoting"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="Learning the Korn Shell"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,66"HREF="index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/ksrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch01_07.htm"TITLE="1.7 Input and Output"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 1.7 Input and Output"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 1<BR>Korn Shell Basics</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch01_09.htm"TITLE="1.9 Special Characters and Quoting"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 1.9 Special Characters and Quoting"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="KSH-CH-1-SECT-8">1.8 Background Jobs</A></H2><PCLASS="para">Pipes are actually a special case of a more general feature:doing more than one thing at a time. This is a capabilitythat many other commercial operating systems don't have, becauseof the rigid limits that they tend to impose upon users.  UNIX, on the other hand,was developed in a research lab and meant for internal use,so it does relatively little to impose limits on the resources availableto users on a computer-as usual, leaning towards uncluttered simplicityrather than overcomplexity.  </P><PCLASS="para">&quot;Doing more than one thing at a time&quot; means running more thanone program at the same time. You do this when you invoke apipeline; you can also do it by logging on to a UNIX systemas many times simultaneously as you wish.<ACLASS="indexterm"NAME="AUTOID-1438"></A>(If you try that on an <SPANCLASS="acronym">IBM</SPAN> VM/CMS system, for example, you will get anobnoxious &quot;already logged in&quot; message.)</P><PCLASS="para">The shell also lets you run more than one command at a timeduring a single login session. Normally, when you type a commandand hit RETURN, the shell will let the command have control of yourterminal until it is done; you can't type in further commands untilthe first one is done. But if you want to run a command that doesnot require user input and you want to do other things while thecommand is running, put an ampersand (<BCLASS="emphasis.bold">&amp;</B>) after the command.  <ACLASS="indexterm"NAME="AUTOID-1443"></A><ACLASS="indexterm"NAME="AUTOID-1446"></A><ACLASS="indexterm"NAME="KSH-CH-1-IX-BACKGROUND-JOBS"></A></P><PCLASS="para">This is called running the command in the background, and a commandthat runs in this way is called a background job; forcontrast, a job run the normal way is called a foreground job.When you start a background job, you get your shell prompt backimmediately, enabling you to enter other commands.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-1454"></A><ACLASS="indexterm"NAME="AUTOID-1456"></A>The most obvious use for background jobs is programs that take a long time to run, such as <EMCLASS="emphasis">sort</EM> or<EMCLASS="emphasis">uncompress</EM> on large files. For example, assume youjust got an enormous compressed file loaded into your directoryfrom magnetic tape.  <ACLASS="indexterm"NAME="AUTOID-1460"></A>Compressed files are created by the <EMCLASS="emphasis">compress</EM>utility, which packs files into smaller amounts of space; theyhave names of the form <EMCLASS="emphasis">filename.Z</EM>, where <EMCLASS="emphasis">filename</EM> isthe name of the original uncompressed file.Let's say the file is <EMCLASS="emphasis">gcc.tar.Z</EM>, which is acompressed archive file that contains well over 10 MB ofsource code files.  </P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-1467"></A>Type <BCLASS="emphasis.bold">uncompress gcc.tar &amp;</B> (youcan omit the .Z), and the system will start a job in thebackground that uncompresses the data &quot;in place&quot; and endsup with the file <EMCLASS="emphasis">gcc.tar</EM>.Right after you type the command, you will see a line like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">[1]     4692</PRE></BLOCKQUOTE></P><PCLASS="para">followed by your shell prompt, meaning that you can enterother commands. Those numbers give youways of referring to your background job; <ACLASS="xref"HREF="ch08_01.htm"TITLE="Process Handling">Chapter 8</A>explainsthem in detail.  </P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-1476"></A>You can check on background jobs with the command <BCLASS="emphasis.bold">jobs</B>.For each background job, <BCLASS="emphasis.bold">jobs</B> prints a line similarto the above but with an indication of the job's status:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">[1]  +  Running                 uncompress gcc.tar</PRE></BLOCKQUOTE></P><PCLASS="para">When the job finishes, you will see a messagelike this right before your shell prompt:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">[1] +  Done                     uncompress gcc.tar</PRE></BLOCKQUOTE></P><PCLASS="para">The message changes if your background job terminated withan error; again, see <ACLASS="xref"HREF="ch08_01.htm"TITLE="Process Handling">Chapter 8</A> for details.</P><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="KSH-CH-1-SECT-8.1">1.8.1 Background I/O</A></H3><PCLASS="para">Jobs you put in thebackground should not do I/O to your terminal.Just think about it for a moment and you'll understand why.</P><PCLASS="para">By definition, a background job doesn't have control over your terminal. Among other things, this means that only theforeground process (or, if none, the shell itself) is &quot;listening&quot;for input from your keyboard. If a background job needs keyboardinput, it will often just sit there doing nothing until youdo something about it (as described in <ACLASS="xref"HREF="ch08_01.htm"TITLE="Process Handling">Chapter 8</A>).</P><PCLASS="para">If a background job produces screen output, the output will just appear on your screen.If you are running a job in the foreground that produces outputtoo, then the output from the two jobs will be randomly(and often annoyingly) interspersed.</P><PCLASS="para">If you want to run a job in the background that expects standardinput or produces standard output, the obvious solution isto redirect it so that it comes from or goes to a file. The onlyexception is that some programs produce small, one-line messages(warnings, &quot;done&quot; messages, etc.); you may not mind if these areinterspersed with whatever other output you are seeing at agiven time.</P><PCLASS="para"><ACLASS="indexterm"NAME="KSH-CH-1-IX-DIFF"></A>For example, the <EMCLASS="emphasis">diff</EM> utility examines two files,whose names are given as arguments, and prints a summary oftheir differences on the standard output. If the files areexactly the same, <EMCLASS="emphasis">diff</EM> is silent. Usually, you invoke<EMCLASS="emphasis">diff</EM> expecting to see a few lines that are different.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-1502"></A><ACLASS="indexterm"NAME="AUTOID-1504"></A><EMCLASS="emphasis">diff</EM>, like <EMCLASS="emphasis">sort</EM> and <EMCLASS="emphasis">compress</EM>, can take a longtime to run if the input files are very large. Suppose you havetwo large files that are called <EMCLASS="emphasis">warandpeace.wp</EM> and <EMCLASS="emphasis">warandpeace.wp.old</EM>.The command <BCLASS="emphasis.bold">diff warandpeace.wp warandpeace.wp.old</B>[9]reveals that the author decided to change the name &quot;Ivan&quot;to &quot;Aleksandr&quot; throughout the entire file-i.e., hundreds ofdifferences, resulting in large amounts of output.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[9] You could use <BCLASS="emphasis.bold">diff warandpeace</B><CODECLASS="literal">*</CODE> as a shorthand to savetyping-as long as there are no other files with names of thatform. Remember that <EMCLASS="emphasis">diff</EM> doesn't see the arguments untilafter the shell has expanded the wildcards. Many peopleoverlook this use of wildcards.</P></BLOCKQUOTE><PCLASS="para">If you type <BCLASS="emphasis.bold">diff warandpeace.wp warandpeace.wp.old &amp;</B>,then the system will spew lots and lots of output at you,which it will be very difficult to stop-even with the techniquesexplained in <ACLASS="xref"HREF="ch07_01.htm"TITLE="Input/Output and Command-line Processing">Chapter 7</A>.  However, if you type:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <BCLASS="emphasis.bold">diff warandpeace.wp warandpeace.wp.old &gt; wpdiff &amp;</B></PRE></BLOCKQUOTE></P><PCLASS="para">then the differences will be saved in the file <EMCLASS="emphasis">wpdiff</EM>for you to examine later.<ACLASS="indexterm"NAME="AUTOID-1525"></A></P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="KSH-CH-1-SECT-8.2">1.8.2 Background Jobs and Priorities</A></H3><PCLASS="para">Background jobs can save you a lot of thumb-twiddling time(or can help you diet by eliminating excuses to run to thecandy machine). Just remember that such jobseat up lots of system resources like memory and the processor(CPU). Just because you're running several jobs at oncedoesn't mean that they will run faster than theywould if run sequentially-in fact, it's usually worse.</P><PCLASS="para"><ACLASS="indexterm"NAME="KSH-CH-1-IX-PRIORITIES"></A>Every job on the system is assigned a <EMCLASS="emphasis">priority</EM>, a numberthat tells the operating system how much priority to give thejob when it doles out resources (the higher the number, the lowerthe priority). Foreground commands that you enterfrom the shell usually have the same, standard priority.But background jobs, by default, have lower priority.[10]</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[10] This feature was borrowed from the C shell; it is not present in most Bourne shells.</P></BLOCKQUOTE><PCLASS="para">You'll find out in <ACLASS="xref"HREF="ch03_01.htm"TITLE="Customizing Your Environment">Chapter 3</A> how you can override this priority assignmentso that background jobs run at the same priority as foregroundjobs. However,if you're on a multiuser system, then running lotsof background jobs may eat up more than your fairshare of resources, and you should consider whether having your job run as fast as possible is really more important thanbeing a good citizen.<ACLASS="indexterm"NAME="KSH-CH-1-IX-NICE"></A></P><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="KSH-CH-1-SECT-8.2.1">1.8.2.1 nice</A></H4><PCLASS="para">Speaking of good citizenship, there is also a shell command that lets you lower the priority of any job: the aptly-named<EMCLASS="emphasis">nice</EM>. If you type<BCLASS="emphasis.bold">nice</B> <EMCLASS="emphasis">command</EM>, where <EMCLASS="emphasis">command</EM> can be a complex shellcommand line with pipes, redirectors, etc., then the commandwill run at a lower priority. You can control just how much lowerby giving <EMCLASS="emphasis">nice</EM> a numerical argument; consult the manpage for details.  [11]<ACLASS="indexterm"NAME="AUTOID-1551"></A><ACLASS="indexterm"NAME="AUTOID-1552"></A><ACLASS="indexterm"NAME="AUTOID-1553"></A></P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[11] If you are a system administrator logged in as <BCLASS="emphasis.bold">root</B>, thenyou can also use <EMCLASS="emphasis">nice</EM> to raise a job's priority.</P></BLOCKQUOTE></DIV></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch01_07.htm"TITLE="1.7 Input and Output"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 1.7 Input and Output"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="Learning the Korn Shell"><IMGSRC="../gifs/txthome.gif"ALT="Learning the Korn Shell"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch01_09.htm"TITLE="1.9 Special Characters and Quoting"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 1.9 Special Characters and Quoting"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">1.7 Input and Output</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">1.9 Special Characters and Quoting</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="../upt/index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>