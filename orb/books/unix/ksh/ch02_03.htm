<HTML><HEAD><TITLE>[Chapter 2] 2.3 Emacs Editing Mode</TITLE><METANAME="DC.title"CONTENT="Learning the Korn Shell"><METANAME="DC.creator"CONTENT="Bill Rosenblatt"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-03T20:56:30Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-054-6"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch02_01.htm"TITLE="2. Command-line Editing"><LINKREL="prev"HREF="ch02_02.htm"TITLE="2.2 The History File"><LINKREL="next"HREF="ch02_04.htm"TITLE="2.4 Vi Editing Mode"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="Learning the Korn Shell"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,66"HREF="index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/ksrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch02_02.htm"TITLE="2.2 The History File"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 2.2 The History File"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 2<BR>Command-line Editing</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch02_04.htm"TITLE="2.4 Vi Editing Mode"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 2.4 Vi Editing Mode"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="KSH-CH-2-SECT-2">2.3 Emacs Editing Mode</A></H2><PCLASS="para"><ACLASS="indexterm"NAME="KSH-CH-2-IX-EMACS-MODE"></A><ACLASS="indexterm"NAME="AUTOID-2219"></A>If you are an <EMCLASS="emphasis">emacs</EM> user, you will find it most useful tothink of emacs editing mode as a simplified, non-customizable[5]<EMCLASS="emphasis">emacs</EM> with a single, one-line window. All of the basic commands are available for cursor motion, cut and paste, and search.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[5] The public domain Korn shell and <EMCLASS="emphasis">bash</EM> have emacs-modesthat are customizable. See <ACLASS="xref"HREF="appa_01.htm"TITLE="Related Shells">Appendix A, Related Shells</A>.</P></BLOCKQUOTE><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="KSH-CH-2-SECT-2.1">2.3.1 Basic Commands</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="KSH-CH-2-IX-EMACS-MODE-BASIC-CMNDS"></A>Emacs-mode uses control keys for the most basic editing functions.<ACLASS="indexterm"NAME="AUTOID-2233"></A><ACLASS="indexterm"NAME="AUTOID-2236"></A>If you aren't familiar with <EMCLASS="emphasis">emacs</EM>,you can think of these as extensions of the rudimentary&quot;erase&quot; character (usually backspace or <SPANCLASS="acronym">DEL</SPAN>) that UNIX provides through its interface to users' terminals.In fact, emacs-mode figures out whatyour erase character is and uses that as its delete-backward key.For the sake of consistency, we'll assume your erase character is<SPANCLASS="acronym">DEL</SPAN> from now on; if it is <KBDCLASS="keycap">[CTRL-H]</KBD> or something else, you will need tomake a mental substitution.The most basic control-key commands are shown in <ACLASS="xref"HREF="ch02_03.htm#KSH-CH-2-TAB-0"TITLE="Basic emacs-mode Commands">Table 2.1</A>.</P><BLOCKQUOTECLASS="note"><PCLASS="para"><STRONG>NOTE:</STRONG> (<EMCLASS="emphasis">Important:</EM> remember that typing <KBDCLASS="keycap">[CTRL-D]</KBD> when your command line isempty may log you off!)</P></BLOCKQUOTE><PCLASS="para">The basic finger habits of emacs-mode are easy to learn, butthey do require that you assimilate a couple of concepts thatare peculiar to the <EMCLASS="emphasis">emacs</EM> editor.</P><PCLASS="para">The first of these is the use of <KBDCLASS="keycap">[CTRL-B]</KBD> and <KBDCLASS="keycap">[CTRL-F]</KBD> for backward and forward cursor motion. These keys have the advantage of beingobvious mnemonics, but many people would rather use the arrowkeys that are on just about every keyboard nowadays.<ACLASS="indexterm"NAME="AUTOID-2252"></A></P><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="KSH-CH-2-TAB-0">Table 2.1: Basic emacs-mode Commands</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Command</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Description</TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><KBDCLASS="keycap">[CTRL-B]</KBD></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Move backward one character (without deleting)</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><KBDCLASS="keycap">[CTRL-F]</KBD></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Move forward one character </TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">DEL</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Delete one character backward</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><KBDCLASS="keycap">[CTRL-D]</KBD></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Delete one character forward</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><KBDCLASS="keycap">[CTRL-Y]</KBD></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Retrieve (&quot;yank&quot;) last item deleted</TD></TR></TBODY></TABLE><PCLASS="para">Unfortunately,emacs-mode doesn't use the arrow keys, because the codes that theytransmit to the computer aren't completely standardized;emacs-mode was designed to work on the widest varietyof terminals possible without needing to do the kind of heavy-dutycustomization that the full <EMCLASS="emphasis">emacs</EM> does.<ACLASS="indexterm"NAME="AUTOID-2283"></A>Just about the only hardware requirement of emacs-modeis that the SPACE character overwrite the characteron top of which it is typed.  </P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-2287"></A>In emacs-mode, the <EMCLASS="emphasis">point</EM> (sometimesalso called <EMCLASS="emphasis">dot</EM>) is an imaginary place just tothe left of the character the cursor is on.  In the command descriptionsin <ACLASS="xref"HREF="ch02_03.htm#KSH-CH-2-TAB-0"TITLE="Basic emacs-mode Commands">Table 2.1</A>,some say &quot;forward&quot; while others say &quot;backward.&quot;Think of forward as &quot;to the right of point&quot; and backward as&quot;to the left of point.&quot;</P><PCLASS="para">For example, let's say you type in a line and, instead of typing<BCLASS="emphasis.bold">RETURN</B>, you type <KBDCLASS="keycap">[CTRL-B]</KBD> and hold it down so that it repeats.The cursor will move to the leftuntil it is over the first character on the line, like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <BCLASS="emphasis.bold"><UCLASS="cursor">f</U>grep -l Bob &lt; ~pete/wk/names</B></PRE></BLOCKQUOTE></P><PCLASS="para">Now the cursor is on the <BCLASS="emphasis.bold">f</B>, and point is at the beginning of theline, just before the <BCLASS="emphasis.bold">f</B>.If you type <SPANCLASS="acronym">DEL</SPAN>, nothing will happen because there are no charactersto the left of point. However, if you press <KBDCLASS="keycap">[CTRL-D]</KBD> (the &quot;delete characterforward&quot; command) you will delete the first letter:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <BCLASS="emphasis.bold"><UCLASS="cursor">g</U>rep -l Bob &lt; ~pete/wk/names</B></PRE></BLOCKQUOTE></P><PCLASS="para">Point is still at the beginning of the line.  If this were the desired command, you couldhit <BCLASS="emphasis.bold">RETURN</B> now and run it; you don't need to move the cursorback to the end of the line. However, if you wanted to, you could type<KBDCLASS="keycap">[CTRL-F]</KBD> repeatedly to get there:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <BCLASS="emphasis.bold">grep -l Bob &lt; ~pete/wk/names<UCLASS="cursor"> </U></B></PRE></BLOCKQUOTE></P><PCLASS="para">At this point, typing <KBDCLASS="keycap">[CTRL-D]</KBD> wouldn't do anything, but hitting <SPANCLASS="acronym">DEL</SPAN> would erasethe final <BCLASS="emphasis.bold">s</B>. If you type <SPANCLASS="acronym">DEL</SPAN> and decide you want the <BCLASS="emphasis.bold">s</B>back again, just press <KBDCLASS="keycap">[CTRL-Y]</KBD> to yank it back.  If you think this example is silly, you're right in this particular case, but bear in mind that <KBDCLASS="keycap">[CTRL-Y]</KBD> undoes the last delete commandof any kind, including the delete-word and delete-linecommands that we will see shortly.[6]<ACLASS="indexterm"NAME="AUTOID-2328"></A></P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[6] <EMCLASS="emphasis">emacs</EM> users should note that this usage of <KBDCLASS="keycap">[CTRL-Y]</KBD> is differentfrom  the full editor, which doesn't save character deletes.</P></BLOCKQUOTE></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="KSH-CH-2-SECT-2.2">2.3.2 Word Commands</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="KSH-CH-2-IX-EMACS-MODE-WORD-CMNDS"></A>The basic commands are really all you need to get around acommand line, but a set of more advanced commands lets you doit with fewer keystrokes. These commands operate on <EMCLASS="emphasis">words</EM>rather than single characters; emacs-mode defines a word to bea sequence of one or more alphanumeric characters.</P><PCLASS="para">The word commands are shown in <ACLASS="xref"HREF="ch02_03.htm#KSH-CH-2-TAB-1"TITLE="Emacs-mode Word Commands">Table 2.2</A>.Whereas the basiccommands are all single characters, these consist of two keystrokes,<SPANCLASS="acronym">ESC</SPAN> followed by a letter. You will notice thatthe command <SPANCLASS="acronym">ESC</SPAN> <EMCLASS="emphasis">X</EM>, where <EMCLASS="emphasis">X</EM> is any letter,often does for a word what <KBDCLASS="keycap">[CTRL-]</KBD><EMCLASS="emphasis">X</EM> does for a single character.The multiplicity of choices for delete-word-backward arises fromthe fact that your erase character could be either <KBDCLASS="keycap">[CTRL-H]</KBD> or DEL.</P><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="KSH-CH-2-TAB-1">Table 2.2: Emacs-mode Word Commands</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Command</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Description</TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">ESC b</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Move one word backward</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">ESC f</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Move one word forward</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">ESC DEL</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Delete one word backward</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">ESC h</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Delete one word backward</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">ESC <KBDCLASS="keycap">[CTRL-H]</KBD></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Delete one word backward</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">ESC d</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Delete one word forward</TD></TR></TBODY></TABLE><PCLASS="para">To return to our example: if we type <SPANCLASS="acronym">ESC</SPAN> b, point will move backa word. Since <BCLASS="emphasis.bold">/</B> is not an alphanumeric character, emacs-mode willstop there:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <BCLASS="emphasis.bold">grep -l Bob &lt; ~pete/wk/<UCLASS="cursor">n</U>ames</B></PRE></BLOCKQUOTE></P><PCLASS="para">The cursor is on the <BCLASS="emphasis.bold">n</B> in <EMCLASS="emphasis">names</EM>, and point is between the <BCLASS="emphasis.bold">/</B> andthe <BCLASS="emphasis.bold">n</B>. Now let's say we want to change the <BCLASS="emphasis.bold">-l</B> option of this commandfrom <EMCLASS="emphasis">Bob</EM> to <EMCLASS="emphasis">Dave</EM>. We need to move back on the command line,so we type <SPANCLASS="acronym">ESC</SPAN> b two more times. This gets us here:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <BCLASS="emphasis.bold">grep -l Bob &lt; ~<UCLASS="cursor">p</U>ete/wk/names</B></PRE></BLOCKQUOTE></P><PCLASS="para">If we type <SPANCLASS="acronym">ESC</SPAN> b again, we end up at the beginning of <EMCLASS="emphasis">Bob</EM>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <BCLASS="emphasis.bold">grep -l <UCLASS="cursor">B</U>ob &lt; ~pete/wk/names</B></PRE></BLOCKQUOTE></P><PCLASS="para">Why? Remember that a word is defined as a sequence of alphanumericcharacters only; therefore <BCLASS="emphasis.bold">&lt;</B> is not a word, and the next wordin the backward direction is <EMCLASS="emphasis">Bob</EM>. We are now in the right positionto delete <EMCLASS="emphasis">Bob</EM>, so we type <SPANCLASS="acronym">ESC</SPAN> d and get:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <BCLASS="emphasis.bold">grep -l <UCLASS="cursor"> </U>&lt; ~pete/wk/names</B></PRE></BLOCKQUOTE></P><PCLASS="para">Now we can type in the desired argument:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <BCLASS="emphasis.bold">grep -l Dave<UCLASS="cursor"> </U>&lt; ~pete/wk/names</B></PRE></BLOCKQUOTE></P><PCLASS="para">The <KBDCLASS="keycap">[CTRL-Y]</KBD> &quot;undelete&quot; command will retrieve an entire word, instead ofa character, if the word was the last thing deleted.  <ACLASS="indexterm"NAME="AUTOID-2415"></A></P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="KSH-CH-2-SECT-2.3">2.3.3 Line Commands</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="KSH-CH-2-IX-EMACS-MODE-LINE-CMNDS"></A>There are still more efficient ways of moving around a commandline in emacs-mode. A few commands deal with the entire line;they are shown in <ACLASS="xref"HREF="ch02_03.htm#KSH-CH-2-TAB-2"TITLE="Emacs-mode Line Commands">Table 2.3</A>.</P><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="KSH-CH-2-TAB-2">Table 2.3: Emacs-mode Line Commands</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Command</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Description</TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><KBDCLASS="keycap">[CTRL-A]</KBD></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Move to beginning of line</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><KBDCLASS="keycap">[CTRL-E]</KBD></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Move to end of line</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><KBDCLASS="keycap">[CTRL-K]</KBD></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Delete (&quot;kill&quot;) forward to end of line</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><KBDCLASS="keycap">[CTRL-C]</KBD></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Capitalize character after point</TD></TR></TBODY></TABLE><PCLASS="para"><KBDCLASS="keycap">[CTRL-C]</KBD> is often the &quot;interrupt&quot; key that UNIX provides through its interface to your terminal. If this is the case, <KBDCLASS="keycap">[CTRL-C]</KBD> in emacs-mode will erase the entire line, as if <KBDCLASS="keycap">[CTRL-A]</KBD> and <KBDCLASS="keycap">[CTRL-K]</KBD> were pressed.On systems where the interrupt key is set to something else (often <SPANCLASS="acronym">DEL</SPAN>),<KBDCLASS="keycap">[CTRL-C]</KBD> capitalizes the current character. </P><PCLASS="para">Using <KBDCLASS="keycap">[CTRL-A]</KBD>, <KBDCLASS="keycap">[CTRL-E]</KBD>, and <KBDCLASS="keycap">[CTRL-K]</KBD>should be straightforward. Remember that <KBDCLASS="keycap">[CTRL-Y]</KBD> will alwaysundelete the last thing deleted; if you use <KBDCLASS="keycap">[CTRL-K]</KBD>, thatcould be quite a few characters.<ACLASS="indexterm"NAME="AUTOID-2460"></A></P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="KSH-CH-2-SECT-2.4">2.3.4 Moving Around in the History File</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="KSH-CH-2-IX-EMACS-MODE-HIST-FILE-CMNDS"></A>Now we know how to get around the command line efficientlyand make changes. But that doesn't address the original issueof recalling previous commands by accessing the historyfile. Emacs-mode has several commands for doing this, summarized in<ACLASS="xref"HREF="ch02_03.htm#KSH-CH-2-TAB-3"TITLE="Emacs-mode Commands for Moving Through the History File">Table 2.4</A>.</P><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="KSH-CH-2-TAB-3">Table 2.4: Emacs-mode Commands for Moving Through the History File</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Command</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Description</TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><KBDCLASS="keycap">[CTRL-P]</KBD></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Move to previous line</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><KBDCLASS="keycap">[CTRL-N]</KBD></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Move to next line</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><KBDCLASS="keycap">[CTRL-R]</KBD></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Search backward</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">ESC &lt;</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Move to first line of history file</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">ESC &gt;</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Move to last line of history file</TD></TR></TBODY></TABLE><PCLASS="para"><KBDCLASS="keycap">[CTRL-P]</KBD> is by far the one you will use most often-it's the &quot;I made a mistake, let me go back and fix it&quot; key.You can use it as many times as you wish to scroll backthrough the history file. If you want to get back to thelast command you entered, you can hold down <KBDCLASS="keycap">[CTRL-N]</KBD> until the Korn shellbeeps at you, or just type <SPANCLASS="acronym">ESC</SPAN> &gt;.As an example, you hit <BCLASS="emphasis.bold">RETURN</B> to run the command above, butyou get an error message telling you that your option letterwas incorrect. You want to change it without retyping thewhole thing.First, you would type <KBDCLASS="keycap">[CTRL-P]</KBD> to recall the bad command. You get itback with point at the end:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <BCLASS="emphasis.bold">grep -l Dave &lt; ~pete/wk/names<UCLASS="cursor"> </U> </B></PRE></BLOCKQUOTE></P><PCLASS="para">After <KBDCLASS="keycap">[CTRL-A]</KBD>, <SPANCLASS="acronym">ESC</SPAN> f, two <KBDCLASS="keycap">[CTRL-F]</KBD>s, and <KBDCLASS="keycap">[CTRL-D]</KBD>, you have:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <BCLASS="emphasis.bold">grep -<UCLASS="cursor"> </U>Dave &lt; ~pete/wk/names</B></PRE></BLOCKQUOTE></P><PCLASS="para">You decide to try <BCLASS="emphasis.bold">-s</B> instead of <BCLASS="emphasis.bold">-l</B>, so you type <BCLASS="emphasis.bold">s</B> andhit RETURN.You get the same error message, so you give up andlook it up in the manual.  You find out that the command you want is <EMCLASS="emphasis">fgrep</EM>-not <EMCLASS="emphasis">grep</EM>-after all.  You sigh heavily and go backand find the <EMCLASS="emphasis">fgrep</EM> command you typed in an hour ago.  <ACLASS="indexterm"NAME="KSH-CH-2-IX-EMACS-MODE-SEARCH-HIST-FILE"></A>To do this, you type <KBDCLASS="keycap">[CTRL-R]</KBD>; whatever was on the line will disappearand be replaced by <BCLASS="emphasis.bold">^R</B>.  Then type <BCLASS="emphasis.bold">fgrep</B>, and you will see this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <BCLASS="emphasis.bold">^Rfgrep</B></PRE></BLOCKQUOTE></P><PCLASS="para">Hit RETURN, and the shell will search backwards through the historyfile for a line containing &quot;fgrep&quot;. If it doesn't find one, it willbeep. But if it finds one, it will display it, and your &quot;current line&quot; will be that line (i.e.,you will be somewhere in the middle of the history file, notat the end as usual):</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <BCLASS="emphasis.bold">fgrep -l Bob &lt; ~pete/wk/names<UCLASS="cursor"> </U></B></PRE></BLOCKQUOTE></P><PCLASS="para">Typing <KBDCLASS="keycap">[CTRL-R]</KBD> without an argument (i.e., just <KBDCLASS="keycap">[CTRL-R]</KBD> followed by RETURN)causes the shell to repeat your last backward search.If you try the <EMCLASS="emphasis">fgrep</EM> command by hitting RETURN again, two thingswill happen. First, of course, the command will run. Second,this line will be entered into the history file at the end,and your &quot;current line&quot; will be at the end as well. You willno longer be in the middle of the history file.  <ACLASS="indexterm"NAME="AUTOID-2538"></A><ACLASS="indexterm"NAME="AUTOID-2541"></A><ACLASS="indexterm"NAME="AUTOID-2545"></A><KBDCLASS="keycap">[CTRL-R]</KBD> may not work properly on some versionsof UNIX, because it is also the default setting for the &quot;reprint&quot; functionof the terminal interface. (It works correctly on all the versionswe've tried.) If you press <KBDCLASS="keycap">[CTRL-R]</KBD> and see thecommand line reprinted, you may want to consider changing the terminal interface's&quot;reprint&quot; key. See the section on <EMCLASS="emphasis">stty</EM> in <ACLASS="xref"HREF="ch08_01.htm"TITLE="Process Handling">Chapter 8</A>.</P><PCLASS="para"><KBDCLASS="keycap">[CTRL-P]</KBD> and <KBDCLASS="keycap">[CTRL-R]</KBD> are clearly the most important emacs-mode commandsthat deal with the history file; you might use <KBDCLASS="keycap">[CTRL-N]</KBD> occasionally.<ACLASS="indexterm"NAME="AUTOID-2555"></A>The others are less useful, and we suspect that they were mainlyincluded for compatibility with the full <EMCLASS="emphasis">emacs</EM> editor.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-2558"></A><ACLASS="indexterm"NAME="AUTOID-2561"></A><EMCLASS="emphasis">emacs</EM> users should also note that the full editor's &quot;deluxe&quot;search capabilities, such as incremental and regular expressionsearch, are not available in the Korn shell's emacs-mode&nbsp;- with oneminor exception: if you use <KBDCLASS="keycap">[CTRL-R]</KBD> and precede your search string witha ^ (caret character), it will match only commands that have thesearch string at the beginning of the line.<ACLASS="indexterm"NAME="AUTOID-2566"></A></P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="KSH-CH-2-SECT-2.5">2.3.5 Filename Completion and Expansion</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="KSH-CH-2-IX-EMACS-MODE-FILENAME-COMPLETION"></A><ACLASS="indexterm"NAME="AUTOID-2573"></A><ACLASS="indexterm"NAME="AUTOID-2575"></A><ACLASS="indexterm"NAME="AUTOID-2577"></A>One of the most powerful (and typically underused) featuresof emacs-mode is its <EMCLASS="emphasis">filename completion</EM> facility, inspiredby similar features in the full <EMCLASS="emphasis">emacs</EM> editor, the C shell,and (originally) the old <SPANCLASS="acronym">DEC TOPS-20</SPAN> operating system.</P><PCLASS="para">The premise behindfilename completion is that when you need to type a filename, youshould not have to type more than is necessary toidentify the file unambiguously.  This is an excellent feature; there is an analogous one in vi-mode.We recommend that you get it under your fingers, since it will saveyou quite a bit of typing.</P><PCLASS="para">There are three commands in emacs-mode that relate to filenamecompletion. The most important is <SPANCLASS="acronym">ESC ESC</SPAN>.[7]When you type in a word of text followed by <SPANCLASS="acronym">ESC ESC</SPAN>, the Korn shellwill attempt to complete the name of a file in the current directory.Then one of four things can happen:</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[7] <EMCLASS="emphasis">emacs</EM> users can think of this as analogousto minibuffer completion with the TAB key.</P></BLOCKQUOTE><OLCLASS="orderedlist"><LICLASS="listitem"><PCLASS="para">If there is no file whose name begins with the word, the shellwill beep and nothing further will happen.</P></LI><LICLASS="listitem"><PCLASS="para">If there is exactly one way to complete the filename and the fileis a regular file, the shell will type the rest of the filename andfollow it with a space so you can type in more command arguments.</P></LI><LICLASS="listitem"><PCLASS="para">If there is exactly one way to complete the filename and the fileis a directory, the shell will complete the filename and followit with a slash.</P></LI><LICLASS="listitem"><PCLASS="para">If there is more than one way to complete the filename,the shell will complete out to the longest common prefix amongthe available choices.</P></LI></OL><PCLASS="para">For example, assume you have a directory with the files <EMCLASS="emphasis">program.c</EM> and <EMCLASS="emphasis">problem.c</EM>. You want to compilethe first of these by typing <BCLASS="emphasis.bold">cc program.c</B>. You type<BCLASS="emphasis.bold">cc pr</B> followed by <SPANCLASS="acronym">ESC ESC</SPAN>. This is not an unambiguous prefix,since the prefix &quot;pro&quot; is common to both filenames, so the shellonly completes out to <BCLASS="emphasis.bold">cc pro</B>.  You need to type more lettersto disambiguate, so you type <BCLASS="emphasis.bold">g</B> and hit <SPANCLASS="acronym">ESC ESC</SPAN> again. Then the shellcompletes out to &quot;<BCLASS="emphasis.bold">cc program.c</B> &quot;, leaving the extra space for youto type in other filenames or options.<ACLASS="indexterm"NAME="AUTOID-2608"></A></P><PCLASS="para"><ACLASS="indexterm"NAME="KSH-CH-2-IX-EMACS-MODE-FILENAME-EXPANSION"></A>A related command is <SPANCLASS="acronym">ESC</SPAN> <CODECLASS="literal">*</CODE>, which expands the prefix to allpossible choices. <SPANCLASS="acronym">ESC</SPAN> <CODECLASS="literal">*</CODE> acts like the standard <CODECLASS="literal">*</CODE> shell wildcard character except that it expands the choicesfor you to see and does not execute the command. In the aboveexample, if you type <SPANCLASS="acronym">ESC</SPAN> <CODECLASS="literal">*</CODE> instead of <SPANCLASS="acronym">ESC ESC</SPAN>, the shell will expandto &quot;<BCLASS="emphasis.bold">cc problem.c program.c</B> &quot;. If you type <SPANCLASS="acronym">ESC</SPAN> <CODECLASS="literal">=</CODE> instead of<SPANCLASS="acronym">ESC</SPAN> <CODECLASS="literal">*</CODE>, you will see a numbered list of expansions printed to standard error.<ACLASS="indexterm"NAME="AUTOID-2626"></A></P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="KSH-CH-2-SECT-2.6">2.3.6 Miscellaneous Commands</A></H3><PCLASS="para">Several miscellaneous commands complete emacs editing mode;they are shown in <ACLASS="xref"HREF="ch02_03.htm#KSH-CH-2-TAB-4"TITLE="Emacs-mode Miscellaneous Commands">Table 2.5</A>.</P><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="KSH-CH-2-TAB-4">Table 2.5: Emacs-mode Miscellaneous Commands</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Command</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Description</TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><KBDCLASS="keycap">[CTRL-J]</KBD></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Same as RETURN</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><KBDCLASS="keycap">[CTRL-L]</KBD></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Redisplay the line</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><KBDCLASS="keycap">[CTRL-M]</KBD></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Same as RETURN</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><KBDCLASS="keycap">[CTRL-O]</KBD></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Same as RETURN, then display next line in history file</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><KBDCLASS="keycap">[CTRL-T]</KBD></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Transpose two characters to the right of point and move point forwardby one[8]</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><KBDCLASS="keycap">[CTRL-U]</KBD></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Repeat the following command four times</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><KBDCLASS="keycap">[CTRL-V]</KBD></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Print the version of the Korn shell</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><KBDCLASS="keycap">[CTRL-W]</KBD></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Delete (&quot;wipe&quot;) all characters between point and &quot;mark&quot;. &quot;Mark&quot; isdiscussed later in this section.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><KBDCLASS="keycap">[CTRL-X]</KBD> <KBDCLASS="keycap">[CTRL-X]</KBD></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Exchange point and mark</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><KBDCLASS="keycap">[CTRL-]</KBD>[</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Same as ESC (most keyboards)</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><KBDCLASS="keycap">[CTRL-]</KBD>] x</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Search forward on current line for x, where x is any character</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><SPANCLASS="acronym">ESC</SPAN></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Change word after point to all capital letters</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><SPANCLASS="acronym">ESC</SPAN> l</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Change word after point to all lowercase letters</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><SPANCLASS="acronym">ESC</SPAN> p</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Save all characters between point and mark as if they were deleted</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><SPANCLASS="acronym">ESC</SPAN> .</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Insert last word in previous command line after point</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><SPANCLASS="acronym">ESC _</SPAN></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Same as above</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><SPANCLASS="acronym">ESC CTRL</SPAN>-]<EMCLASS="emphasis">x</EM></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Search backward for <EMCLASS="emphasis">x</EM>, where <EMCLASS="emphasis">x</EM> is any character</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><SPANCLASS="acronym">ESC SPACE</SPAN></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Set mark at point</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><SPANCLASS="acronym">ESC</SPAN>#</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Insert line in history file for future editing</TD></TR></TBODY></TABLE><BLOCKQUOTECLASS="footnote"><PCLASS="para">[8] <KBDCLASS="keycap">[CTRL-T]</KBD> behaves slightly differently if you put <BCLASS="emphasis.bold">set -o gmacs</B> (instead of <BCLASS="emphasis.bold">emacs</B>)in your <EMCLASS="emphasis">.profile</EM>. In this case, it will transposethe two characters to the left of point, leaving point unmoved.This is the only difference between emacs and gmacs modes;the latter conforms to the James Gosling version of the <EMCLASS="emphasis">emacs</EM> editor (a.k.a. Unipress <EMCLASS="emphasis">emacs</EM>).Note: neither of these behaves like <KBDCLASS="keycap">[CTRL-T]</KBD> inGNU <EMCLASS="emphasis">emacs</EM>, which transposes the characters on either sideof point.</P></BLOCKQUOTE><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-2734"></A>Several of these commands may clash with terminal interfacecontrol keys on your system. <KBDCLASS="keycap">[CTRL-U]</KBD> is the default key for&quot;kill line&quot; on most versions of UNIX.<ACLASS="indexterm"NAME="AUTOID-2738"></A><ACLASS="indexterm"NAME="AUTOID-2742"></A>BSD-derived systems use <KBDCLASS="keycap">[CTRL-V]</KBD> and <KBDCLASS="keycap">[CTRL-W]</KBD> as defaultsettings for the &quot;quote next character&quot; and &quot;word erase&quot;terminal interface functions respectively. <KBDCLASS="keycap">[CTRL-V]</KBD> is particularlyconfusing, since it is meant to override other terminalinterface control keys but has no effect on emacs-modecommands.<ACLASS="indexterm"NAME="AUTOID-2747"></A><ACLASS="indexterm"NAME="AUTOID-2750"></A><ACLASS="indexterm"NAME="AUTOID-2753"></A><ACLASS="indexterm"NAME="KSH-CH-2-IX-EMACS-MODE-REPEAT-COUNTS"></A></P><PCLASS="para">A few miscellaneous commands are worth discussing, even though they maynot be among the most useful emacs-mode commands.  </P><PCLASS="para"><KBDCLASS="keycap">[CTRL-O]</KBD> is useful for repeating a sequence of commands you havealready entered. Just go back to the first command in the sequenceand press <KBDCLASS="keycap">[CTRL-O]</KBD> instead of RETURN. This will execute the commandand bring up the next command in the history file. Press <KBDCLASS="keycap">[CTRL-O]</KBD>again to enter this command and bring up the next one. Repeat thisuntil you see the last command in the sequence; then just hit RETURN.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-2765"></A><KBDCLASS="keycap">[CTRL-U]</KBD>, if it doesn't perform the line-delete function of yoursystem's terminal interface, repeats the next commandfour times.If you type <KBDCLASS="keycap">[CTRL-U]</KBD> twice, the repeat factor becomes 16; for 3 <KBDCLASS="keycap">[CTRL-U]</KBD>s it's64; and so on. <KBDCLASS="keycap">[CTRL-U]</KBD> is possibly most useful when navigating through your historyfile. If you want to recall a command that you entered a whileago, you could type <KBDCLASS="keycap">[CTRL-U]</KBD> <KBDCLASS="keycap">[CTRL-P]</KBD> to go back through the history file four lines at a time;you could think of this as a &quot;fast rewind&quot; through your commandhistory.  </P><PCLASS="para">Another possible use of <KBDCLASS="keycap">[CTRL-U]</KBD> is when you want to go from one end of a long pathname to the other. Unlike vi-mode,emacs-mode does not have a concept of &quot;word&quot; that is flexible enoughto distinguish between pathnames and filename components.The emacs-mode wordmotion commands (<SPANCLASS="acronym">ESC</SPAN> b and <SPANCLASS="acronym">ESC</SPAN> f) will move through a pathnameonly one component at a time, because emacs-mode treats the slash asa word separator. You can use <KBDCLASS="keycap">[CTRL-U]</KBD> to help get around this limitation.If you have a line that looks like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <BCLASS="emphasis.bold">ls -l /a/very/long/pathname/filename<UCLASS="cursor"> </U></B></PRE></BLOCKQUOTE></P><PCLASS="para">and you need to go back and change &quot;very&quot; to &quot;really&quot;you can type <KBDCLASS="keycap">[CTRL-U]</KBD> <SPANCLASS="acronym">ESC</SPAN> b and your cursor will end up here:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <BCLASS="emphasis.bold">ls -l /a/<UCLASS="cursor">v</U>ery/long/pathname/filename</B></PRE></BLOCKQUOTE></P><PCLASS="para">Then you can make the change:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <BCLASS="emphasis.bold">ls -l /a/really<UCLASS="cursor">/</U>long/pathname/filename</B></PRE></BLOCKQUOTE></P><PCLASS="para">Judicious use of <KBDCLASS="keycap">[CTRL-U]</KBD> can save you a few keystrokes, but consideringthe small amount of information you manipulate when you editcommand lines, it's probably not an incredibly vital feature.Often, holding down a key to repeat it is justas effective as <KBDCLASS="keycap">[CTRL-U]</KBD>. Because you'll probably have to redefine theterminal driver's line erase key before you can use <KBDCLASS="keycap">[CTRL-U]</KBD>, it'sprobably better to do without <KBDCLASS="keycap">[CTRL-U]</KBD>.<ACLASS="indexterm"NAME="AUTOID-2799"></A></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-2801"></A><ACLASS="indexterm"NAME="KSH-CH-2-IX-EMACS-MODE-MARK"></A>The mark mentioned in the explanation of <KBDCLASS="keycap">[CTRL-W]</KBD> should be familiarto <EMCLASS="emphasis">emacs</EM> editor users, but its function in emacs-mode isa subset of that in the full editor.Emacs-mode keeps track of the place at which the last deletewas performed (whether a delete character, word, line, or whatever);this place is called the <EMCLASS="emphasis">mark</EM>. If nothing has been deletedon the current line, mark defaults to the beginning of the line.You can also set the mark to where your cursor is by typing <SPANCLASS="acronym">ESC</SPAN> SPACE.<ACLASS="indexterm"NAME="KSH-CH-2-IX-EMACS-MODE-EXCH-POINT-AND-MARK"></A><KBDCLASS="keycap">[CTRL-X]</KBD> <KBDCLASS="keycap">[CTRL-X]</KBD> (<KBDCLASS="keycap">[CTRL-X]</KBD> hit twice) causes the Korn shell to swap point and mark,i.e., to move your cursor to where the mark is and reset mark to where your cursor was before you typed <KBDCLASS="keycap">[CTRL-X]</KBD> <KBDCLASS="keycap">[CTRL-X]</KBD>.</P><PCLASS="para">The mark concept is not extremely useful becauseof the small amount of &quot;distance&quot; to travel in command lines.But if you ever have to make a series of changes in the sameplace in a line, <KBDCLASS="keycap">[CTRL-X]</KBD> <KBDCLASS="keycap">[CTRL-X]</KBD> will take you back there. In the previous example, if you wanted to change &quot;really&quot; to&quot;monumentally&quot;, one way would be to type <KBDCLASS="keycap">[CTRL-X]</KBD> <KBDCLASS="keycap">[CTRL-X]</KBD> to returnto the beginning of &quot;really&quot;:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <BCLASS="emphasis.bold">ls -l /a/<UCLASS="cursor">r</U>eally/long/pathname/filename</B></PRE></BLOCKQUOTE></P><PCLASS="para">Then you could type <SPANCLASS="acronym">ESC</SPAN> d to delete &quot;really&quot; and make the change.Of course, you could do this faster by typing <SPANCLASS="acronym">ESC</SPAN> <SPANCLASS="acronym">DEL</SPAN>instead of <KBDCLASS="keycap">[CTRL-X]</KBD> <KBDCLASS="keycap">[CTRL-X]</KBD> and <SPANCLASS="acronym">ESC</SPAN> d.<ACLASS="indexterm"NAME="AUTOID-2834"></A><ACLASS="indexterm"NAME="AUTOID-2835"></A></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-2837"></A>Of the case-changing commands,<SPANCLASS="acronym">ESC</SPAN> l is useful when you hit the CAPS LOCK key by accident anddon't notice it immediately. Since all-caps words aren't usedtoo often in the UNIX world, you may not use <SPANCLASS="acronym">ESC</SPAN> c very often.</P><PCLASS="para">If it seems like there are too many synonyms for RETURN,bear in mind that <KBDCLASS="keycap">[CTRL-M]</KBD> is actually the same (ASCII) character asRETURN, and that <KBDCLASS="keycap">[CTRL-J]</KBD> is actually the same as LINEFEED, which UNIXusually accepts in lieu of RETURN anyway.</P><PCLASS="para"><SPANCLASS="acronym">ESC</SPAN> <CODECLASS="literal">.</CODE> and <SPANCLASS="acronym">ESC</SPAN> _ are useful if you want to run several commandson a given file. The usual UNIX convention is that a filenameis the last argument to a command. Therefore you can save typingby just entering each command followed by SPACE and then typing<SPANCLASS="acronym">ESC</SPAN> <CODECLASS="literal">.</CODE> or <SPANCLASS="acronym">ESC</SPAN> _.  For example, say you want to examine a fileusing <EMCLASS="emphasis">more</EM>, so you type:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <BCLASS="emphasis.bold">more myfilewithaverylongname</B></PRE></BLOCKQUOTE></P><PCLASS="para">Then you decide you want to print it, so you type the print command<EMCLASS="emphasis">lp</EM>. You can avoid typing the very long name by typing<BCLASS="emphasis.bold">lp</B> followed by a space and then <SPANCLASS="acronym">ESC</SPAN> <CODECLASS="literal">.</CODE> or <SPANCLASS="acronym">ESC</SPAN> _; the Korn shell willinsert <EMCLASS="emphasis">myfilewithaverylongname</EM> for you.</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="KSH-CH-2-SECT-2.7">2.3.7 Keyboard Shortcuts with Aliases</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-2866"></A><ACLASS="indexterm"NAME="AUTOID-2869"></A>Finally, emacs-mode has an interesting way of defining keyboard shortcuts forcommonly used commands by interactingwith the Korn shell's alias facility, as described in the nextchapter. Here's how it works: if you define an aliascalled _<EMCLASS="emphasis">x</EM>, where <EMCLASS="emphasis">x</EM> is a letter, then emacs-mode will expand the aliaswhen you hit <SPANCLASS="acronym">ESC</SPAN> <EMCLASS="emphasis">x</EM>. The expansion will appear on your screen, butthe Korn shell will not run the command, leaving you free to type more orjust hit RETURN to run it. We don't find this particularly useful,since you can just define an alias in the normal way instead.<ACLASS="indexterm"NAME="AUTOID-2875"></A></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch02_02.htm"TITLE="2.2 The History File"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 2.2 The History File"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="Learning the Korn Shell"><IMGSRC="../gifs/txthome.gif"ALT="Learning the Korn Shell"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch02_04.htm"TITLE="2.4 Vi Editing Mode"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 2.4 Vi Editing Mode"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">2.2 The History File</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">2.4 Vi Editing Mode</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="../upt/index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>