<HTML><HEAD><TITLE>[Chapter 3] 3.2 Aliases</TITLE><METANAME="DC.title"CONTENT="Learning the Korn Shell"><METANAME="DC.creator"CONTENT="Bill Rosenblatt"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-03T20:58:21Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-054-6"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch03_01.htm"TITLE="3. Customizing Your Environment"><LINKREL="prev"HREF="ch03_01.htm"TITLE="3.1 The .profile File"><LINKREL="next"HREF="ch03_03.htm"TITLE="3.3 Options"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="Learning the Korn Shell"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,66"HREF="index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/ksrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch03_01.htm"TITLE="3.1 The .profile File"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 3.1 The .profile File"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 3<BR>Customizing Your Environment</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch03_03.htm"TITLE="3.3 Options"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 3.3 Options"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="KSH-CH-3-SECT-2">3.2 Aliases</A></H2><PCLASS="para"><ACLASS="indexterm"NAME="KSH-CH-3-IX-AKAS"></A>Perhaps the easiest and most popular type of customization isthe <EMCLASS="emphasis">alias</EM>, which is a synonym for a command or command string. <ACLASS="indexterm"NAME="AUTOID-3905"></A>This is one of several Korn shell features that were appropriated fromthe C shell.[2]<ACLASS="indexterm"NAME="AUTOID-3910"></A>You define an alias by entering (or adding to your <EMCLASS="emphasis">.profile</EM>)a line with the following form:</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[2] C shell users should note that the Korn shell's alias feature does not support arguments in aliasexpansions, as C shell aliases do.</P></BLOCKQUOTE><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">alias <EMCLASS="emphasis">new</EM>=<EMCLASS="emphasis">original</EM></PRE></BLOCKQUOTE></P><PCLASS="para">(Notice that there are no spaces on either side of the equal sign(<BCLASS="emphasis.bold">=</B>); thisis required syntax.) The alias command defines new to be an alias fororiginal, so that whenever you type <BCLASS="emphasis.bold">new</B>, the Korn shellsubstitutes <EMCLASS="emphasis">original</EM> internally.  </P><PCLASS="para"><ACLASS="indexterm"NAME="KSH-CH-3-IX-AKAS-USING-MNEMONIC"></A>There are a few basic ways to use an alias. The first, and simplest,is as a more mnemonic name for an existing command.Many commonly-used UNIX commands have names that are poormnemonics and therefore are excellent candidates for aliasing, butthe classic example is:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">alias search=grep</PRE></BLOCKQUOTE></P><PCLASS="para"><EMCLASS="emphasis">grep</EM>, the UNIX file-searching utility, was named as anacronym for something like &quot;Generalized Regular Expression Parser.&quot;[3]This acronym may mean something to a computer scientist, but not to theoffice administrator who has to find <BCLASS="emphasis.bold">Fred</B> in a list of phonenumbers. If you have to find <BCLASS="emphasis.bold">Fred</B> and you have the word <EMCLASS="emphasis">search</EM> defined as an alias for <EMCLASS="emphasis">grep</EM>, you can type:</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[3] Another theory has it that <EMCLASS="emphasis">grep</EM> stands for the command &quot;g/re/p&quot;, in the old <EMCLASS="emphasis">ed</EM> text editor, which does essentially thesame thing as <EMCLASS="emphasis">grep</EM>.</P></BLOCKQUOTE><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <BCLASS="emphasis.bold">search Fred phonelist</B></PRE></BLOCKQUOTE></P><PCLASS="para">Another popular alias eschews <EMCLASS="emphasis">exit</EM> in favor of a morewidely-used command for ending a login session:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">alias logout=exit</PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-3948"></A><ACLASS="indexterm"NAME="AUTOID-3950"></A>If you are a C shell user, you may be used to having a <EMCLASS="emphasis">.logout</EM>file of commands that the shell executes just before you log out.The Korn shell doesn't have this feature as such, but you can mimicit quite easily using an alias:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">alias logout='. ~/.ksh_logout; exit'</PRE></BLOCKQUOTE></P><PCLASS="para">This reads commands in from the file <EMCLASS="emphasis">.ksh_logout</EM> in your homedirectory and then logs you out.  <ACLASS="indexterm"NAME="AUTOID-3957"></A>The semicolon acts as a statement separator, allowing you to have more than onecommand on the same line.</P><PCLASS="para">You might want the file <EMCLASS="emphasis">.logout</EM> to &quot;clean up&quot; your history files,as we discussed in the last chapter. Recall that we created historyfiles with the filename <EMCLASS="emphasis">.hist$$</EM>, which guarantees a unique namefor every shell. To remove these files when the shells exit, just putthis line in your <EMCLASS="emphasis">.logout</EM> file:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">rm ~/.hist$$</PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-3967"></A><ACLASS="indexterm"NAME="AUTOID-3968"></A>Some people who aren't particularly good typists like to use aliasesfor typographical errors they make often. For example:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">alias emcas=emacsalias mali=mailalias gerp=grep</PRE></BLOCKQUOTE></P><PCLASS="para">This can be handy, but we feel you're probably better off suffering withthe error message and getting the correct spelling under yourfingers.<ACLASS="indexterm"NAME="KSH-CH-3-IX-AKAS-USING-SHORTHAND"></A>Another common way to use an alias is as a shorthand for a longercommand string. For example, you may have a directory to which youneed to go often. It's buried deeply in your directory hierarchy, soyou want to set up an alias that will allow you to <BCLASS="emphasis.bold">cd</B> therewithout typing (or even remembering) the entire pathname:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">alias cdcm='cd work/projects/devtools/windows/confman'</PRE></BLOCKQUOTE></P><PCLASS="para">Notice the quotes around the full <BCLASS="emphasis.bold">cd</B> command;these are necessary if the string being aliased consists ofmore than one word.[4]</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[4] This contrasts with C shell aliases, in which the quotes aren'trequired.</P></BLOCKQUOTE><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-3987"></A>As another example, a useful option to the <EMCLASS="emphasis">ls</EM> command is <BCLASS="emphasis.bold">-F</B>:it puts a slash (<BCLASS="emphasis.bold">/</B>) after directory files and an asterisk (<CODECLASS="literal">*</CODE>) afterexecutable files. Since typing a dash followed by a capital letteris inconvenient, many people like to define an alias like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">alias lf='ls -F'</PRE></BLOCKQUOTE></P><PCLASS="para">A few things about aliases are important to remember.First, the Korn shell makes a textualsubstitution of the alias for that which it is aliasing; it may help to imagine <EMCLASS="emphasis">ksh</EM> passing your command through a texteditor or word processor and issuing a &quot;change&quot; or &quot;substitute&quot;command before interpreting and executing it.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-3999"></A>This, in turn, means that any special characters (such as wildcards like <CODECLASS="literal">*</CODE> and <CODECLASS="literal">?</CODE>) that resultwhen the alias is expanded are interpreted properly by the shell.[5]For example, to make it easierto print all of the files in your directory, you could definethe alias:</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[5] An important corollary: wildcards and other specialcharacters cannot be used in the names of aliases, i.e., on theleft side of the equal sign.</P></BLOCKQUOTE><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">alias printall='pr * | lpr'</PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-4009"></A><ACLASS="indexterm"NAME="KSH-CH-3-IX-AKAS-RECURSIVE"></A>Second, keep in mind that aliases are recursive,which means that it is possible to alias an alias. A legitimateobjection to the previous example is that the alias, while mnemonic,is too long and doesn't save enough typing. If we want to keep thisalias but add a shorter abbreviation, we could define:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">alias pa=printall</PRE></BLOCKQUOTE></P><PCLASS="para">Recursive aliasing makes it possible to set up an &quot;infinite loop&quot;of definitions, wherein an alias ends up (perhaps after severallookups) being defined as itself. For example, the command:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">alias ls='ls -l'</PRE></BLOCKQUOTE></P><PCLASS="para">sets up a possible infinite loop. Luckily, the shell has a mechanismto guard against such dangers. The above command will work asexpected (typing <BCLASS="emphasis.bold">ls</B> produces a long list with permissions,sizes, owners, etc.), while in more pathological situations such as:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">alias listfile=lsalias ls=listfile</PRE></BLOCKQUOTE></P><PCLASS="para">the alias <BCLASS="emphasis.bold">listfile</B> is ignored.<ACLASS="indexterm"NAME="AUTOID-4024"></A></P><PCLASS="para">Aliases can only be used forthe beginning of a command string-albeit with certainexceptions. In the <BCLASS="emphasis.bold">cd</B> example above, you might want to define an alias for thedirectory name alone, not for the entire command.  But if you define:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">alias cm=work/projects/devtools/windows/confman</PRE></BLOCKQUOTE></P><PCLASS="para">and then type <BCLASS="emphasis.bold">cd cm</B>, the Korn shell will probably printa message like <BCLASS="emphasis.bold">ksh: cm: not found</B>.</P><PCLASS="para"><ACLASS="indexterm"NAME="KSH-CH-3-IX-AKAS-ON-ARGS-COMMAND-LINE"></A>An obscure, rather ugly feature of the Korn shell's alias facility-one not present in the analogous C shell feature-providesa way around this problem. If the value of an alias(the right side of the equal sign) ends in a blank, then theKorn shell tries to do alias substitution on the next word on the command line. To make the value ofan alias end in a blank, you need to surround it with quotes.</P><PCLASS="para">Here is how you would use this capability to allow aliasesfor directory names, at least for use with the <BCLASS="emphasis.bold">cd</B>command. Just define:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">alias cd='cd '</PRE></BLOCKQUOTE></P><PCLASS="para">This causes the Korn shell to search for an alias for the directory name argument to <BCLASS="emphasis.bold">cd</B>, which in the previous example would enable it to expand the alias <BCLASS="emphasis.bold">cm</B> correctly. <ACLASS="indexterm"NAME="AUTOID-4043"></A></P><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="KSH-CH-3-SECT-2.1">3.2.1 Tracked Aliases</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="KSH-CH-3-IX-AKAS-TRACKED"></A>Another rather obscure feature of the alias facility is the <EMCLASS="emphasis">tracked</EM>alias, which can shorten the time it takes the shell to invoke commands.If you specify this option (as shown under &quot;Options&quot; below), then forall subsequent alias definitions, the shellwill internally substitute the full pathname of each command forwhich an alias is defined. <ACLASS="indexterm"NAME="AUTOID-4051"></A><ACLASS="indexterm"NAME="AUTOID-4055"></A>You can also define individual tracked aliaseswith the option <BCLASS="emphasis.bold">-t</B> to the <BCLASS="emphasis.bold">alias</B> command, and you can listall tracked aliases by typing <BCLASS="emphasis.bold">alias -t</B> by itself.</P><PCLASS="para">As you will see later in this chapter, a tracked aliascuts down the number of steps the shell has to take to findthe command when you want to run it.  <ACLASS="indexterm"NAME="AUTOID-4063"></A><ACLASS="indexterm"NAME="AUTOID-4067"></A>More important, however,are its implications for system security; see <ACLASS="xref"HREF="ch10_01.htm"TITLE="Korn Shell Administration">Chapter 10, Korn Shell Administration</A>.</P><PCLASS="para">For example, assume that you have defined the alias <BCLASS="emphasis.bold">em</B> forthe <EMCLASS="emphasis">emacs</EM> editor, which is kept in the executable file<EMCLASS="emphasis">/usr/local/bin/emacs</EM>. If you specify that you want aliasestracked, then the first time you type <BCLASS="emphasis.bold">em myfile</B>, the shellwill substitute the full pathname, i.e., as if you had defined the alias as:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">alias em=/usr/local/bin/emacs</PRE></BLOCKQUOTE></P><PCLASS="para">You'll see how this can save time when you read about the PATHenvironment variable later on. <ACLASS="indexterm"NAME="AUTOID-4078"></A></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-4080"></A>Finally, there are a few useful adjuncts to the basic <BCLASS="emphasis.bold">alias</B> command.If you type <BCLASS="emphasis.bold">alias</B> <EMCLASS="emphasis">name</EM> without an equal sign (<BCLASS="emphasis.bold">=</B>) andvalue, the shell will print the alias' value or <BCLASS="emphasis.bold">alias</B> <EMCLASS="emphasis">name</EM><BCLASS="emphasis.bold"> not found</B> if it is undefined. If you type<BCLASS="emphasis.bold">alias</B> without any arguments, you geta list of all the aliases you have defined aswell as several that are built-in.  <ACLASS="indexterm"NAME="AUTOID-4091"></A><ACLASS="indexterm"NAME="AUTOID-4093"></A>The command <BCLASS="emphasis.bold">unalias</B> <EMCLASS="emphasis">name</EM> removes any alias definitionfor its argument.</P><PCLASS="para">Aliases are very handy for creating a comfortable environment,but they are really just kid stuff compared to more advancedcustomization techniques like scripts and functions, which wewill see in the next chapter. These give you everything aliases do plusmuch more, so if you become proficient at them, you may find thatyou don't need aliases anymore. However, aliases are ideal fornovices who find UNIX to be a rather forbidding place, full ofterseness and devoid of good mnemonics.<ACLASS="indexterm"NAME="AUTOID-4099"></A></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch03_01.htm"TITLE="3.1 The .profile File"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 3.1 The .profile File"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="Learning the Korn Shell"><IMGSRC="../gifs/txthome.gif"ALT="Learning the Korn Shell"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch03_03.htm"TITLE="3.3 Options"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 3.3 Options"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">3.1 The .profile File</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">3.3 Options</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="../upt/index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>