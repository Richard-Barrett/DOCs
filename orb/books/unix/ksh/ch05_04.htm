<HTML><HEAD><TITLE>[Chapter 5] 5.4 select</TITLE><METANAME="DC.title"CONTENT="Learning the Korn Shell"><METANAME="DC.creator"CONTENT="Bill Rosenblatt"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-03T21:09:51Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-054-6"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch05_01.htm"TITLE="5. Flow Control"><LINKREL="prev"HREF="ch05_03.htm"TITLE="5.3 case"><LINKREL="next"HREF="ch05_05.htm"TITLE="5.5 while and until"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="Learning the Korn Shell"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,66"HREF="index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/ksrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch05_03.htm"TITLE="5.3 case"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 5.3 case"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 5<BR>Flow Control</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch05_05.htm"TITLE="5.5 while and until"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 5.5 while and until"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="KSH-CH-5-SECT-4">5.4 select</A></H2><PCLASS="para"><ACLASS="indexterm"NAME="KSH-CH-5-IX-SELECT"></A><ACLASS="indexterm"NAME="AUTOID-8963"></A><ACLASS="indexterm"NAME="AUTOID-8965"></A>All of the flow-control constructs we have seen so far are alsoavailable in the Bourne shell, and the C shell has equivalents withdifferent syntax. Our next construct, <BCLASS="emphasis.bold">select</B>, is new for the Korn shell;moreover, it has no analog in conventional programming languages.</P><PCLASS="para"><BCLASS="emphasis.bold">select</B> allows you to generate simple menus easily.<ACLASS="indexterm"NAME="AUTOID-8970"></A>It has concise syntax, but it does quite a lot of work.The syntax is:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">select <EMCLASS="emphasis">name</EM> [in <EMCLASS="emphasis">list</EM>]do    <EMCLASS="emphasis">statements that can use </EM>$name...done</PRE></BLOCKQUOTE></P><PCLASS="para">This is the same syntax as <BCLASS="emphasis.bold">for</B> except forthe keyword <BCLASS="emphasis.bold">select</B>.  <ACLASS="indexterm"NAME="AUTOID-8981"></A><ACLASS="indexterm"NAME="AUTOID-8984"></A><ACLASS="indexterm"NAME="AUTOID-8988"></A>And like <BCLASS="emphasis.bold">for</B>, you can omitthe <BCLASS="emphasis.bold">in</B> <EMCLASS="emphasis">list</EM> and it will default to <BCLASS="emphasis.bold">&quot;$@&quot;</B>, i.e.,the list of quoted command-line arguments.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-8997"></A>Here is what <BCLASS="emphasis.bold">select</B> does:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">Generates a menu of each item in <EMCLASS="emphasis">list</EM>, formatted withnumbers for each choice</P></LI><LICLASS="listitem"><PCLASS="para">Prompts the user for a number</P></LI><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-9009"></A><ACLASS="indexterm"NAME="AUTOID-9013"></A>Stores the selected choice in the variable <EMCLASS="emphasis">name</EM>and the selected number in the built-in variable <BCLASS="emphasis.bold">REPLY</B></P></LI><LICLASS="listitem"><PCLASS="para">Executes the statements in the body</P></LI><LICLASS="listitem"><PCLASS="para">Repeats the process forever (but see below for how to exit)</P></LI></UL><PCLASS="para">Once again, an example should help make this process clearer.Assume you need to write the code for Task 5-4, but your lifeis not as simple. You don't have terminals hardwired to your computer;instead, your users communicate through a terminal server.This means, among other things, that the tty number does <EMCLASS="emphasis">not</EM>determine the type of terminal.</P><PCLASS="para">Therefore, you have no choice but to prompt the user for his orher terminal type at login time.  <ACLASS="indexterm"NAME="AUTOID-9025"></A>To do this, you can put the followingcode in <EMCLASS="emphasis">/etc/profile</EM> (assume you have the same choice ofterminal types):<ACLASS="indexterm"NAME="KSH-CH-5-IX-TERM-2"></A><ACLASS="indexterm"NAME="KSH-CH-5-IX-ENVVARS-TERM-2"></A><ACLASS="indexterm"NAME="AUTOID-9033"></A></P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">PS3='terminal? 'select term in gl35a t2000 s531 vt99; do    if [[ -n $term ]]; then        TERM=$term        print TERM is $TERM        break    else        print 'invalid.'    fidone</PRE></BLOCKQUOTE></P><PCLASS="para">If you run this code, you will see this menu:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">1) gl35a2) t20003) s5314) vt99terminal?</PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-9043"></A><ACLASS="indexterm"NAME="AUTOID-9046"></A><ACLASS="indexterm"NAME="AUTOID-9048"></A>The built-in shell variable <BCLASS="emphasis.bold">PS3</B> contains the prompt stringthat <BCLASS="emphasis.bold">select</B> uses; its default value is the not particularlyuseful &quot;<BCLASS="emphasis.bold">#</B><CODECLASS="literal">? </CODE>&quot;.  So the first line of the above code sets it toa more relevant value.</P><PCLASS="para">The <BCLASS="emphasis.bold">select</B> statement constructsthe menu from the list of choices. If the user enters a validnumber (from 1 to 4), then the variable <BCLASS="emphasis.bold">term</B> is set tothe corresponding value; otherwise it is null. (If the userjust presses RETURN, the shell prints the menu again.)</P><PCLASS="para">The code in the loop body checks if <BCLASS="emphasis.bold">term</B>is non-null. If so, it assigns <BCLASS="emphasis.bold">$term</B> to the environmentvariable <BCLASS="emphasis.bold">TERM</B> and prints a confirmation message; thenthe <BCLASS="emphasis.bold">break</B> statement exits the <BCLASS="emphasis.bold">select</B> loop. If <BCLASS="emphasis.bold">term</B>is null, the code prints an error message and repeats the prompt(but not the menu).</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-9066"></A><ACLASS="indexterm"NAME="AUTOID-9068"></A>The <BCLASS="emphasis.bold">break</B> statement is the usual way of exiting a <BCLASS="emphasis.bold">select</B>loop. Actually (like its analog in C),it can be used to exit any surrounding control structure we'veseen so far <ACLASS="indexterm"NAME="AUTOID-9072"></A><ACLASS="indexterm"NAME="AUTOID-9075"></A><ACLASS="indexterm"NAME="AUTOID-9078"></A><ACLASS="indexterm"NAME="AUTOID-9080"></A>(except <BCLASS="emphasis.bold">case</B>, where the double-semicolonsact like <BCLASS="emphasis.bold">break</B>) as well as the <BCLASS="emphasis.bold">while</B> and<BCLASS="emphasis.bold">until</B> we will see soon. We haven't introduced <BCLASS="emphasis.bold">break</B> until nowbecause it is considered bad coding style to use it toexit a loop. However, it is necessary for exiting<BCLASS="emphasis.bold">select</B> when the user makes a valid choice.[18]</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[18] <ACLASS="indexterm"NAME="AUTOID-9090"></A><ACLASS="indexterm"NAME="AUTOID-9093"></A>A user can also type <KBDCLASS="keycap">[CTRL-D]</KBD> (for end-of-input) to getout of a <BCLASS="emphasis.bold">select</B> loop. This gives the user a uniform wayof exiting, but it doesn't help the shell programmer much.</P></BLOCKQUOTE><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-9098"></A>Let's refine our solution by making the menu more user-friendly,so that the user doesn't have to know the <EMCLASS="emphasis">terminfo</EM> name ofhis or her terminal. We do this by using quoted characterstrings as menu items and then using <BCLASS="emphasis.bold">case</B> to determine thetermcap name:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">print 'Select your terminal type:'PS3='terminal? 'select term in \    'Givalt GL35a' \    'Tsoris T-2000' \    'Shande 531' \    'Vey VT99'do    case $REPLY in        1 ) TERM=gl35a ;;        2 ) TERM=t2000 ;;        3 ) TERM=s531 ;;        4 ) TERM=vt99 ;;        * ) print 'invalid.' ;;    esac    if [[ -n $term ]]; then        print TERM is $TERM        break    fidone</PRE></BLOCKQUOTE></P><PCLASS="para">This code looks a bit more like a menu routine in aconventional program, though <BCLASS="emphasis.bold">select</B> still provides the shortcutof converting the menu choices into numbers.We list each of the menu choices on its ownline for reasons of readability, but once again we need continuationcharacters to keep the shell from complaining about syntax.</P><PCLASS="para">Here is what the user will see when this code is run:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">Select your terminal type:1) Givalt GL35a2) Tsoris T-20003) Shande 5314) Vey VT99terminal?</PRE></BLOCKQUOTE></P><PCLASS="para">This is a bit more informative than the previous code's output.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-9111"></A><ACLASS="indexterm"NAME="AUTOID-9115"></A>When the body of the <BCLASS="emphasis.bold">select</B> loop is entered, <BCLASS="emphasis.bold">$term</B> equalsone of the four strings (or is null if the user made an invalidchoice), while the built-in variable <BCLASS="emphasis.bold">REPLY</B> contains thenumber the user selects. We need a <BCLASS="emphasis.bold">case</B> statement to assign the correctvalue to <BCLASS="emphasis.bold">TERM</B>; we use the value of <BCLASS="emphasis.bold">REPLY</B> as the <BCLASS="emphasis.bold">case</B>selector.</P><PCLASS="para">Once the <BCLASS="emphasis.bold">case</B> statement is finished, the <BCLASS="emphasis.bold">if</B> checks tosee if a valid choice was made, as in the previous solution.If the choice was valid, then <BCLASS="emphasis.bold">TERM</B> has already been assigned,so the code just prints a confirmation message and exits the<BCLASS="emphasis.bold">select</B> loop. If it wasn't valid, the <BCLASS="emphasis.bold">select</B> loop repeats the prompt and goes through the process again.<ACLASS="indexterm"NAME="AUTOID-9131"></A><ACLASS="indexterm"NAME="AUTOID-9132"></A><ACLASS="indexterm"NAME="AUTOID-9133"></A></P></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch05_03.htm"TITLE="5.3 case"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 5.3 case"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="Learning the Korn Shell"><IMGSRC="../gifs/txthome.gif"ALT="Learning the Korn Shell"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch05_05.htm"TITLE="5.5 while and until"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 5.5 while and until"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">5.3 case</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">5.5 while and until</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="../upt/index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>