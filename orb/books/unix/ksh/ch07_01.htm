<HTML><HEAD><TITLE>[Chapter 7] Input/Output and Command-line Processing</TITLE><METANAME="DC.title"CONTENT="Learning the Korn Shell"><METANAME="DC.creator"CONTENT="Bill Rosenblatt"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-03T21:11:40Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-054-6"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="index.htm"TITLE="Learning the Korn Shell"><LINKREL="prev"HREF="ch06_03.htm"TITLE="6.3 Arrays"><LINKREL="next"HREF="ch07_02.htm"TITLE="7.2 String I/O"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="Learning the Korn Shell"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,66"HREF="index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/ksrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch06_03.htm"TITLE="6.3 Arrays"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 6.3 Arrays"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 7</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch07_02.htm"TITLE="7.2 String I/O"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 7.2 String I/O"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="CHAPTER"><H1CLASS="chapter"><ACLASS="title"NAME="KSH-CH7-INOUTCOM">7. Input/Output and Command-line Processing</A></H1><DIVCLASS="htmltoc"><P><B>Contents:</B><BR><ACLASS="sect1"HREF="#KSH-CH-7-SECT-1"TITLE="7.1 I/O Redirectors">I/O Redirectors</A><BR><ACLASS="sect1"HREF="ch07_02.htm"TITLE="7.2 String I/O">String I/O</A><BR><ACLASS="sect1"HREF="ch07_03.htm"TITLE="7.3 Command-line Processing">Command-line Processing</A></P><P></P></DIV><PCLASS="para">The past few chapters have gone into detail about various shellprogramming techniques, mostly focused on the flow of data andcontrol through shell programs. In this chapter,we'll switch the focus to two related topics.The first is the shell's mechanisms for doing file-oriented inputand output. We'll present information that expands on what youalready know about the shell's basic I/O redirectors.  </P><PCLASS="para">Second, we'll &quot;zoom in&quot; and talk about I/O at the line and word level.This is a fundamentally different topic, since it involves moving information between the domains of files/terminals and shell variables.<BCLASS="emphasis.bold">print</B> andcommand substitution are two ways of doing this that we've seen so far.</P><PCLASS="para">Our discussion of line and word I/O will lead into a more detailed explanation of how the shell processes command lines. This information is necessary so that you can understand exactlyhow the shell deals with <EMCLASS="emphasis">quotation</EM>, and so that you can appreciatethe power of an advanced command called <BCLASS="emphasis.bold">eval</B>, which we will coverat the end of the chapter.</P><DIVCLASS="sect1"><H2CLASS="sect1"><ACLASS="title"NAME="KSH-CH-7-SECT-1">7.1 I/O Redirectors</A></H2><PCLASS="para"><ACLASS="indexterm"NAME="KSH-CH-7-IX-I-O-REDIRECTION"></A>In <ACLASS="xref"HREF="ch01_01.htm"TITLE="Korn Shell Basics">Chapter 1, Korn Shell Basics</A> you learned about the shell's basic I/O redirectors, <BCLASS="emphasis.bold">&gt;</B>, <BCLASS="emphasis.bold">&lt;</B>, and <BCLASS="emphasis.bold">|</B>. Although these are enough to get youthrough 95% of your UNIX life, you should know that the Korn shellsupports a total of 16 I/O redirectors.  <ACLASS="xref"HREF="ch07_01.htm#KSH-CH-7-TAB-0"TITLE="I/O Redirectors">Table 7.1</A>lists them, including the three we've already seen.Although some of the rest are useful, others are mainly forsystems programmers.<ACLASS="indexterm"NAME="AUTOID-11147"></A>We will wait until the next chapter to discussthe last three, which, along with <BCLASS="emphasis.bold">&gt;|</B>, are not present in most Bourne shellversions.<ACLASS="indexterm"NAME="AUTOID-11150"></A><ACLASS="indexterm"NAME="AUTOID-11154"></A><ACLASS="indexterm"NAME="AUTOID-11158"></A><ACLASS="indexterm"NAME="AUTOID-11162"></A><ACLASS="indexterm"NAME="AUTOID-11166"></A><ACLASS="indexterm"NAME="AUTOID-11170"></A><ACLASS="indexterm"NAME="AUTOID-11174"></A><ACLASS="indexterm"NAME="AUTOID-11179"></A><ACLASS="indexterm"NAME="AUTOID-11183"></A><ACLASS="indexterm"NAME="AUTOID-11186"></A><ACLASS="indexterm"NAME="AUTOID-11190"></A><ACLASS="indexterm"NAME="AUTOID-11194"></A><ACLASS="indexterm"NAME="AUTOID-11198"></A><ACLASS="indexterm"NAME="AUTOID-11202"></A></P><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="KSH-CH-7-TAB-0">Table 7.1: I/O Redirectors</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Redirector</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Function</TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">&gt;</B> <EMCLASS="emphasis">file</EM></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Direct standard output to <EMCLASS="emphasis">file</EM></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">&lt;</B> <EMCLASS="emphasis">file</EM></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Take standard input from <EMCLASS="emphasis">file</EM></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><EMCLASS="emphasis">cmd1</EM> | <EMCLASS="emphasis">cmd2</EM></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Pipe; take standard output of <EMCLASS="emphasis">cmd1</EM> as standard input to <EMCLASS="emphasis">cmd2</EM></P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">&gt;&gt;</B> <EMCLASS="emphasis">file</EM></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Direct standard output to <EMCLASS="emphasis">file</EM>;append to <EMCLASS="emphasis">file</EM> if it already exists</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">&gt;|</B> <EMCLASS="emphasis">file</EM></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Force standard output to <EMCLASS="emphasis">file</EM> even if <BCLASS="emphasis.bold">noclobber</B> set</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">&lt;&gt;</B> <EMCLASS="emphasis">file</EM></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Use <EMCLASS="emphasis">file</EM> as both standard input and standard output</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">&lt;&lt;</B> <EMCLASS="emphasis">label</EM></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Here-document; see text</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><EMCLASS="emphasis">n</EM><BCLASS="emphasis.bold">&gt;</B> <EMCLASS="emphasis">file</EM></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Direct file descriptor <EMCLASS="emphasis">n</EM> to <EMCLASS="emphasis">file</EM></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><EMCLASS="emphasis">n</EM><BCLASS="emphasis.bold">&lt;</B> <EMCLASS="emphasis">file</EM></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Set <EMCLASS="emphasis">file</EM> as file descriptor <EMCLASS="emphasis">n</EM></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">&gt;&amp;</B><EMCLASS="emphasis">n</EM></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Duplicate standard output to file descriptor <EMCLASS="emphasis">n</EM></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">&lt;&amp;</B><EMCLASS="emphasis">n</EM></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Duplicate standard input from file descriptor <EMCLASS="emphasis">n</EM></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">&lt;&amp;-</B></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Close the standard input</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">&gt;&amp;-</B></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Close the standard output</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">|&amp;</B></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Background process with I/O from parent shell</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">&gt;&amp;p</B></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Direct background process' standard output to the parent shell'sstandard output</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">&lt;&amp;p</B></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Direct parent shell's standard input to background process'standard input</P></TD></TR></TBODY></TABLE><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11312"></A>Notice that some of the redirectors in <ACLASS="xref"HREF="ch07_01.htm#KSH-CH-7-TAB-0"TITLE="I/O Redirectors">Table 7.1</A>contain a digit <EMCLASS="emphasis">n</EM>,and that their descriptions contain the term <EMCLASS="emphasis">file descriptor</EM>;we'll cover that in a little while.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11318"></A><ACLASS="indexterm"NAME="AUTOID-11322"></A><ACLASS="indexterm"NAME="AUTOID-11326"></A>The first two new redirectors, <BCLASS="emphasis.bold">&gt;&gt;</B> and <BCLASS="emphasis.bold">&gt;|</B>, are simplevariations on the standard output redirector <BCLASS="emphasis.bold">&gt;</B>. The <BCLASS="emphasis.bold">&gt;&gt;</B>appends to the output file (instead of overwriting it)if it already exists; otherwise it actsexactly like <BCLASS="emphasis.bold">&gt;</B>.  <ACLASS="indexterm"NAME="AUTOID-11335"></A><ACLASS="indexterm"NAME="AUTOID-11337"></A>A common use of <BCLASS="emphasis.bold">&gt;&gt;</B> is for addinga line to an initialization file (such as <EMCLASS="emphasis">.profile</EM> or<EMCLASS="emphasis">.mailrc</EM>) when you don't want to bother with a text editor. For example:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"><BCLASS="emphasis.bold">cat &gt;&gt; .mailrcalias fred frederick@longmachinename.longcompanyname.com^D</B></PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11346"></A><ACLASS="indexterm"NAME="AUTOID-11348"></A><ACLASS="indexterm"NAME="AUTOID-11350"></A>As we saw in <ACLASS="xref"HREF="ch01_01.htm"TITLE="Korn Shell Basics">Chapter 1</A>,<EMCLASS="emphasis">cat</EM> without an argument uses standard input as its input. Thisallows you to type the input and end it with <KBDCLASS="keycap">[CTRL-D]</KBD> on its own line.The <BCLASS="emphasis.bold">alias</B> line will be appended to the file <EMCLASS="emphasis">.mailrc</EM>if it already exists; if it doesn't, the file is created withthat one line.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11358"></A><ACLASS="indexterm"NAME="AUTOID-11361"></A>Recall from <ACLASS="xref"HREF="ch03_01.htm"TITLE="Customizing Your Environment">Chapter 3, Customizing Your Environment</A> that you can prevent the shell fromoverwriting a file with <BCLASS="emphasis.bold">&gt;</B> <EMCLASS="emphasis">file</EM> by typing <BCLASS="emphasis.bold">set -o noclobber</B>.<BCLASS="emphasis.bold">&gt;|</B> overrides <BCLASS="emphasis.bold">noclobber</B>&nbsp;- it's the &quot;Do it anyway, dammit!&quot;redirector.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11372"></A>The redirector <BCLASS="emphasis.bold">&lt;&gt;</B> is mainly meant for use with device files(in the <EMCLASS="emphasis">/dev</EM> directory), i.e., files that correspond tohardware devices such as terminals and communication lines.Low-level systems programmers can use it to test device drivers;otherwise, it's not very useful. <ACLASS="indexterm"NAME="AUTOID-11378"></A>But if you use a windowing system like X, you can try the followingto see how it works:</P><OLCLASS="orderedlist"><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11383"></A>Create two terminal windows (e.g., <EMCLASS="emphasis">xterm</EM>s).</P></LI><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11388"></A>In one of them, type <BCLASS="emphasis.bold">who am i</B> to find out the name of thewindow's &quot;pseudo-device.&quot;  This will be the second word in theoutput.</P></LI><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11394"></A>In the other, type <BCLASS="emphasis.bold">cat &lt;&gt; /dev/</B><EMCLASS="emphasis">pty</EM>, where <EMCLASS="emphasis">pty</EM> isthe name you found in the last step.</P></LI><LICLASS="listitem"><PCLASS="para">Back in the first window, type some characters. You will seethem appear in <EMCLASS="emphasis">alternate</EM> windows.</P></LI><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11406"></A>Type <KBDCLASS="keycap">[CTRL-C]</KBD> in both windows to end the process.</P></LI></OL><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="KSH-CH-7-SECT-1.1">7.1.1 Here-documents</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="KSH-CH-7-IX-HERE-DOCUMENTS"></A>The <BCLASS="emphasis.bold">&lt;&lt;</B> <EMCLASS="emphasis">label</EM> redirector essentially forces the input to acommand to be the shell's standard input, which is read until there isa line that contains only <EMCLASS="emphasis">label</EM>. The input in between is calleda <EMCLASS="emphasis">here-document</EM>.Here-documents aren't very interesting when used from the command prompt.In fact, it's the same as the normal use of standard input exceptfor the label.  <ACLASS="indexterm"NAME="AUTOID-11418"></A>We could have used a here-document in the previous exampleof <BCLASS="emphasis.bold">&gt;&gt;</B>, like this (EOF, for &quot;end of file,&quot;is an often-used label):</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"><BCLASS="emphasis.bold">cat &gt;&gt; .mailrc &lt;&lt; EOFalias fred frederick@longmachinename.longcompanyname.comEOF</B></PRE></BLOCKQUOTE></P><PCLASS="para">Here-documents are meant to be used from within shell scripts;they let you specify &quot;batch&quot; input to programs.  <ACLASS="indexterm"NAME="KSH-CH-7-IX-ED"></A>A common use of here-documents is with simple text editors like <EMCLASS="emphasis">ed(1)</EM>.Here is a programming task that uses a here-document in this way:</P><DIVCLASS="task"><H4>Task 7.1</H4><BLOCKQUOTECLASS="taskinfo"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11433"></A>The <BCLASS="emphasis.bold">s</B> <EMCLASS="emphasis">file</EM> command in <EMCLASS="emphasis">mail(1)</EM> saves the currentmessage in <EMCLASS="emphasis">file</EM>.  <ACLASS="indexterm"NAME="AUTOID-11439"></A>If the message came over a network (suchas the Internet), then it has several header lines prependedthat give information about network routing.Write a shell script that deletes the header lines from the file.</P></BLOCKQUOTE><PCLASS="para">We can use <EMCLASS="emphasis">ed</EM> to delete the header lines.To do this, we need to know something about the syntax of mail messages;specifically, that there is always a blank line between the header linesand the message text.The <EMCLASS="emphasis">ed</EM> command <BCLASS="emphasis.bold">1,/^[]</B><CODECLASS="literal">*</CODE><BCLASS="emphasis.bold">$/d</B> does the trick: it means,&quot;Delete from line 1 until the first blank line.&quot;We also need the <EMCLASS="emphasis">ed</EM> commands <BCLASS="emphasis.bold">w</B> (write the changed file)and <BCLASS="emphasis.bold">q</B> (quit).Here is the code that solves the task:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">ed $1 &lt;&lt; EOF1,/^[]*$/dwqEOF</PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11453"></A></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11455"></A>The shell does parameter (variable) substitutionand command substitution on text in ahere-document, meaning that you can use shell variables and commands to customize the text. Here is a simple task for system administratorsthat shows how this works:</P></DIV><DIVCLASS="task"><H4>Task 7.2</H4><BLOCKQUOTECLASS="taskinfo"><PCLASS="para">Write a script that sends a mail message to a set of users sayingthat a new version of a certain program has been installed ina certain directory.</P></BLOCKQUOTE><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11462"></A><ACLASS="indexterm"NAME="AUTOID-11464"></A>You can get a list of all users on the system in various ways;perhaps the easiest is to use <EMCLASS="emphasis">cut</EM> toextract the first field of <EMCLASS="emphasis">/etc/passwd</EM>,the file that contains all user account information.  Fields inthis file are separated by colons (<CODECLASS="literal">:</CODE>).[1]</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[1] <ACLASS="indexterm"NAME="AUTOID-11471"></A><ACLASS="indexterm"NAME="AUTOID-11473"></A>There are a few possible problems with this; for example, <EMCLASS="emphasis">/etc/passwd</EM>usually contains information on &quot;accounts&quot; that aren't associated withpeople, like <BCLASS="emphasis.bold">uucp</B>, <BCLASS="emphasis.bold">lp</B>, and <BCLASS="emphasis.bold">daemon</B>. We'llignore such problems for the purpose of this example.</P></BLOCKQUOTE><PCLASS="para">Given such a list of users, the following code does the trick:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">pgmname=$1for user in $(cut -f1 -d: /etc/passwd); do    mail $user &lt;&lt; EOFDear $user,A new version of $pgmname has been installed in $(whence pgmname).Regards,Your friendly neighborhood sysadmin.EOFdone</PRE></BLOCKQUOTE></P><PCLASS="para">The shell will substitute the appropriate values for the name ofthe program and its directory.</P><PCLASS="para">The redirector <BCLASS="emphasis.bold">&lt;&lt;</B> has two variations. First, you canprevent the shell from doing parameter and command substitution by surroundingthe <EMCLASS="emphasis">label</EM> in single or double quotes. In the above example, if youused the line <BCLASS="emphasis.bold">mail $</B>user <BCLASS="emphasis.bold">&lt;&lt;</B> <CODECLASS="literal">'</CODE><BCLASS="emphasis.bold">EOF</B><CODECLASS="literal">'</CODE>, then <BCLASS="emphasis.bold">$pgmname</B>and <BCLASS="emphasis.bold">$(whence pgmname)</B> would remain untouched.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11494"></A>The second variation is <BCLASS="emphasis.bold">&lt;&lt;-</B>, which deletes leading TABs(but not blanks) from the here-document and the label line.This allows you to indent the here-document's text, making theshell script more readable:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">pgmname=$1for user in $(cut -f1 -d: /etc/passwd); do    mail $user &lt;&lt;- EOF        Dear user,        A new version of $pgmname has been installed in $(whence pgmname).        Regards,        Your friendly neighborhood sysadmin.EOFdone</PRE></BLOCKQUOTE></P><PCLASS="para">Of course, you need to choose your <EMCLASS="emphasis">label</EM> so that itdoesn't appear as an actual input line. <ACLASS="indexterm"NAME="AUTOID-11502"></A></P></DIV></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="KSH-CH-7-SECT-1.2">7.1.2 File Descriptors</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="KSH-CH-7-IX-FILE-DESCRIPTORS"></A>The next few redirectors in <ACLASS="xref"HREF="ch07_01.htm#KSH-CH-7-TAB-0"TITLE="I/O Redirectors">Table 7.1</A>depend on the notion of a<EMCLASS="emphasis">file descriptor</EM>.  <ACLASS="indexterm"NAME="AUTOID-11510"></A>Like the device files used with <BCLASS="emphasis.bold">&lt;&gt;</B>,this is a low-level UNIX I/O concept that is of interest only tosystems programmers&nbsp;- and then only occasionally. File descriptors arehistorical relics that really should be banished from therealm of shell use.[2]You can get by with a few basic facts about them; forthe whole bloody story, look at the entries for <EMCLASS="emphasis">read</EM>(),<EMCLASS="emphasis">write</EM>(), <EMCLASS="emphasis">fcntl</EM>(), and others in Section 2 of the UNIXmanual.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[2] <ACLASS="indexterm"NAME="AUTOID-11517"></A><ACLASS="indexterm"NAME="AUTOID-11519"></A>The C shell's set of redirectors contains no mention of filedescriptors whatsoever.  </P></BLOCKQUOTE><PCLASS="para">File descriptors are integers starting at 0 that indexan array of file information within a process. When aprocess starts, it usually has three file descriptors open.  <ACLASS="indexterm"NAME="AUTOID-11525"></A>These correspond to the three <EMCLASS="emphasis">standards</EM>: standard input (file descriptor0), standard output (1), and standard error (2). If a processopens UNIX files for input or output, they are assigned to thenext available file descriptors, starting with 3.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11530"></A>By far the most common use of file descriptors with the Korn shellis in saving standard error in a file. For example, if you wantto save the error messages from a long job in a file so that theydon't scroll off the screen, append <BCLASS="emphasis.bold">2&gt;</B> <EMCLASS="emphasis">file</EM> to your command.If you also want to save standard output, append<BCLASS="emphasis.bold">&gt;</B> <EMCLASS="emphasis">file1</EM><BCLASS="emphasis.bold"> 2&gt;</B> <EMCLASS="emphasis">file2</EM>.</P><PCLASS="para">This leads to another programming task.</P><DIVCLASS="task"><H4>Task 7.3</H4><BLOCKQUOTECLASS="taskinfo"><PCLASS="para">You want to start a long job in the background (so that your terminalis freed up) and saveboth standard output and standard error in a single log file.Write a script that does this.</P></BLOCKQUOTE><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11545"></A></P><PCLASS="para">We'll call this script <EMCLASS="emphasis">start</EM>. The code is very terse:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">&quot;$@&quot; &gt; logfile 2&gt;&amp;1 &amp;</PRE></BLOCKQUOTE></P><PCLASS="para">This line executes whatever command and parameters follow <BCLASS="emphasis.bold">start</B>.(The command cannot contain pipes or output redirectors.)It sends the command's standard output to <EMCLASS="emphasis">logfile</EM>.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11556"></A><ACLASS="indexterm"NAME="AUTOID-11560"></A>Then, the redirector <BCLASS="emphasis.bold">2&gt;&amp;1</B> says, &quot;send standard error (file descriptor2) to the same place as standard output (file descriptor 1).&quot;<BCLASS="emphasis.bold">2&gt;&amp;1</B> is actually a combination of two redirectors in<ACLASS="xref"HREF="ch07_01.htm#KSH-CH-7-TAB-0"TITLE="I/O Redirectors">Table 7.1</A>:<EMCLASS="emphasis">n</EM><BCLASS="emphasis.bold">&gt;</B> <EMCLASS="emphasis">file</EM> and <BCLASS="emphasis.bold">&gt;&amp;</B><EMCLASS="emphasis">n</EM>.Since standard output is redirected to <EMCLASS="emphasis">logfile</EM>, standard errorwill go there too.The final <BCLASS="emphasis.bold">&amp;</B> puts the job in the background so that you getyour shell prompt back.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11574"></A>As a small variation on this theme, we can sendboth standard output and standard error into a <EMCLASS="emphasis">pipe</EM> insteadof a file: <EMCLASS="emphasis">command</EM> <BCLASS="emphasis.bold">2&gt;&amp;1 | ...</B> does this.(Make sure you understand why.)Here is a script that sends both standard output andstandard error to the logfile (as above) and to the terminal:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">&quot;$@&quot; 2&gt;&amp;1 | tee logfile &amp;</PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11584"></A>The command <EMCLASS="emphasis">tee</EM>(1) takes its standard input and copies itto standard output <EMCLASS="emphasis">and</EM> the file given as argument.</P><PCLASS="para">These scripts have one shortcoming: you must remain logged in untilthe job completes.  <ACLASS="indexterm"NAME="AUTOID-11589"></A>Although you can always type <BCLASS="emphasis.bold">jobs</B> (see<ACLASS="xref"HREF="ch01_01.htm"TITLE="Korn Shell Basics">Chapter 1</A>) to check on progress, you can't leave your office for the dayunless you want to risk a breachof security or waste electricity. We'll see how to solve this problem in the next chapter.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11594"></A><ACLASS="indexterm"NAME="AUTOID-11598"></A>The other file-descriptor-oriented redirectors (e.g., <BCLASS="emphasis.bold">&lt;&amp;</B><EMCLASS="emphasis">n</EM>)are usually used for reading input from (or writing output to)more than one file at the same time. We'll see an example later in this chapter. Otherwise, they'remainly meant for systems programmers, as are <BCLASS="emphasis.bold">&lt;&amp;-</B> (force standard input to close) and <BCLASS="emphasis.bold">&gt;&amp;-</B>(force standard output to close).  </P><PCLASS="para">Before we leave this topic,we should just note that <BCLASS="emphasis.bold">1&gt;</B> is the same as <BCLASS="emphasis.bold">&gt;</B>, and<BCLASS="emphasis.bold">0&lt;</B> is the same as <BCLASS="emphasis.bold">&lt;</B>. If you understand this, then youprobably know all you need to know about file descriptors.<ACLASS="indexterm"NAME="AUTOID-11611"></A><ACLASS="indexterm"NAME="AUTOID-11612"></A></P></DIV></DIV></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch06_03.htm"TITLE="6.3 Arrays"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 6.3 Arrays"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="Learning the Korn Shell"><IMGSRC="../gifs/txthome.gif"ALT="Learning the Korn Shell"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch07_02.htm"TITLE="7.2 String I/O"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 7.2 String I/O"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">6.3 Arrays</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">7.2 String I/O</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="../upt/index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>