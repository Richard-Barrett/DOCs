<HTML><HEAD><TITLE>[Chapter 8] Process Handling</TITLE><METANAME="DC.title"CONTENT="Learning the Korn Shell"><METANAME="DC.creator"CONTENT="Bill Rosenblatt"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-03T21:14:41Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-054-6"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="index.htm"TITLE="Learning the Korn Shell"><LINKREL="prev"HREF="ch07_03.htm"TITLE="7.3 Command-line Processing"><LINKREL="next"HREF="ch08_02.htm"TITLE="8.2 Job Control"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="Learning the Korn Shell"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,66"HREF="index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/ksrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch07_03.htm"TITLE="7.3 Command-line Processing"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 7.3 Command-line Processing"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 8</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch08_02.htm"TITLE="8.2 Job Control"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 8.2 Job Control"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="CHAPTER"><H1CLASS="chapter"><ACLASS="title"NAME="KSH-CH8-PROCHAND">8. Process Handling</A></H1><DIVCLASS="htmltoc"><P><B>Contents:</B><BR><ACLASS="sect1"HREF="#KSH-CH-8-SECT-1"TITLE="8.1 Process IDs and Job Numbers">Process IDs and Job Numbers</A><BR><ACLASS="sect1"HREF="ch08_02.htm"TITLE="8.2 Job Control">Job Control</A><BR><ACLASS="sect1"HREF="ch08_03.htm"TITLE="8.3 Signals">Signals</A><BR><ACLASS="sect1"HREF="ch08_04.htm"TITLE="8.4 trap">trap</A><BR><ACLASS="sect1"HREF="ch08_05.htm"TITLE="8.5 Coroutines">Coroutines</A><BR><ACLASS="sect1"HREF="ch08_06.htm"TITLE="8.6 Subshells">Subshells</A></P><P></P></DIV><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-13195"></A><ACLASS="indexterm"NAME="AUTOID-13198"></A>The UNIX operating system built its reputation on a small number ofconcepts, all of which are simple yet powerful. We've seen most of them by now: standard input/output, pipes, text-filteringutilities, the tree-structured file system, and so on. UNIX alsogained notoriety as the first small-computer operating system to give each user control over more than one process.  <ACLASS="indexterm"NAME="KSH-CH-8-IX-USER-CONTROLLED-MULTITASKING"></A>We call this capability <EMCLASS="emphasis">user-controlled multitasking</EM>.</P><PCLASS="para">If UNIX is the only operating system that you're familiar with,you might be surprised to learn that several other major operating systems have been sadly lacking in this area.  <ACLASS="indexterm"NAME="AUTOID-13205"></A><ACLASS="indexterm"NAME="AUTOID-13207"></A><ACLASS="indexterm"NAME="AUTOID-13209"></A>For example,Microsoft's MS-DOS, for IBM PC compatibles, has no multitasking at all,let alone user-controlled multitasking.IBM's own VM/CMS system for large mainframes handles multipleusers but gives them only one process each.DEC's VAX/VMS has user-controlled multitasking, but it is limited and difficult to use. <ACLASS="indexterm"NAME="AUTOID-13211"></A><ACLASS="indexterm"NAME="AUTOID-13214"></A><ACLASS="indexterm"NAME="AUTOID-13216"></A>The latest generation ofsmall-computer operating systems, such as Apple's Macintosh OS System 7, IBM'sOS/2 Version 2, and Microsoft's Windows NT, finally include user-controlled multitasking at the operating system level.[1]<ACLASS="indexterm"NAME="AUTOID-13232"></A></P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[1] <ACLASS="indexterm"NAME="AUTOID-13221"></A><ACLASS="indexterm"NAME="AUTOID-13224"></A><ACLASS="indexterm"NAME="AUTOID-13226"></A><ACLASS="indexterm"NAME="AUTOID-13229"></A>Programs like Apple's Multifinder and Microsoft Windows work <EMCLASS="emphasis">on top of</EM>the operating system (Mac OS Version 6 and MS-DOS, respectively)to give the user limited multitasking.</P></BLOCKQUOTE><PCLASS="para">But if you've gotten this far in this book, you probably don't thinkthat multitasking is a big deal.  <ACLASS="indexterm"NAME="AUTOID-13234"></A>You're probably used to the ideaof running a process in the background by putting an ampersand (<BCLASS="emphasis.bold">&amp;</B>) at the endof the command line.  <ACLASS="indexterm"NAME="AUTOID-13237"></A>You have also seen the idea of a <EMCLASS="emphasis">subshell</EM>in <ACLASS="xref"HREF="ch04_01.htm"TITLE="Basic Shell Programming">Chapter 4, Basic Shell Programming</A> when we showed how shell scripts run.</P><PCLASS="para">In this chapter, we will cover most of the Korn shell's features thatrelate to multitasking and process handling in general. We say &quot;most&quot;because some of these features are,like the file descriptors we sawin the previous chapter, of interest only to low-level systems programmers.  </P><PCLASS="para">We'll start out by looking at certain important primitives for identifying processes and for controlling them during login sessions and within shell scripts. Then we will move out to a higher-level perspective, looking at ways to get processes to communicate with each other.  <ACLASS="indexterm"NAME="AUTOID-13243"></A><ACLASS="indexterm"NAME="AUTOID-13245"></A>The Korn shell's <EMCLASS="emphasis">coroutine</EM> facility is the most sophisticated interprocess communication scheme that we'll examine; we'll also look in more detail at concepts we've already seen, like pipes and subshells.  </P><PCLASS="para">Don't worry about getting bogged down in low-level technical details about UNIX. We will provide only the technical information that is necessary to explain higher-level features, plus a few other tidbits designed to pique your curiosity. <ACLASS="indexterm"NAME="AUTOID-13249"></A>If you are interested in finding out more about these areas, refer to your UNIX Programmer's Manual ora book on UNIX internals that pertains to your version of UNIX.</P><PCLASS="para">We strongly recommend that you try out the examples in this chapter.The behavior of code that involves multiple processes is not as easyto understand on paper as most of the other examples in this book.</P><DIVCLASS="sect1"><H2CLASS="sect1"><ACLASS="title"NAME="KSH-CH-8-SECT-1">8.1 Process IDs and Job Numbers</A></H2><PCLASS="para"><ACLASS="indexterm"NAME="KSH-CH-8-IX-PROCESS-IDS"></A>UNIX gives all processes numbers, called <EMCLASS="emphasis">process IDs</EM>, when they are created.  <ACLASS="indexterm"NAME="AUTOID-13259"></A>You will notice that, when you run a command in the backgroundby appending &amp; to it, the shell responds with a line that looks like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <BCLASS="emphasis.bold">fred &amp;</B> [1]     2349</PRE></BLOCKQUOTE></P><PCLASS="para">In this example, 2349 is the process ID for the <BCLASS="emphasis.bold">fred</B> process.<ACLASS="indexterm"NAME="KSH-CH-8-IX-JOB-NUMBERS"></A>The <BCLASS="emphasis.bold">[1]</B> is a <EMCLASS="emphasis">job number</EM> assigned by the shell (not the operating system).  <ACLASS="indexterm"NAME="AUTOID-13270"></A><ACLASS="indexterm"NAME="AUTOID-13273"></A>What's the difference? Job numbers refer to background processes that are currently running under your shell, while process IDs refer to all processes currently running on the entire system, for all users.  <ACLASS="indexterm"NAME="AUTOID-13276"></A>The term <EMCLASS="emphasis">job</EM> basically refers to a command line that was invoked from your login shell.</P><PCLASS="para">If you start up additional background jobs while the first oneis still running, the shell will number them 2, 3, etc. For example:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <BCLASS="emphasis.bold">bob &amp;</B> [2]     2367$ <BCLASS="emphasis.bold">dave &amp;</B> [3]     2382</PRE></BLOCKQUOTE></P><PCLASS="para">Clearly, 1, 2, and 3 are easier to remember than 2349, 2367, and 2382!<ACLASS="indexterm"NAME="AUTOID-13286"></A></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-13288"></A><ACLASS="indexterm"NAME="AUTOID-13291"></A>The shell includes job numbers in messages it prints when a background job completes, like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">[1] +  Done                     fred &amp;</PRE></BLOCKQUOTE></P><PCLASS="para">We'll explain what the plus sign means soon.<ACLASS="indexterm"NAME="AUTOID-13297"></A>If the job exits with non-zero status (see <ACLASS="xref"HREF="ch05_01.htm"TITLE="Flow Control">Chapter 5, Flow Control</A>), the shellwill include the exit status in parentheses:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">[1] +  Done(1)                  fred &amp;</PRE></BLOCKQUOTE></P><PCLASS="para">The shell prints other types of messages when certain abnormal thingshappen to background jobs; we'll see these later in this chapter.</P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch07_03.htm"TITLE="7.3 Command-line Processing"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 7.3 Command-line Processing"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="Learning the Korn Shell"><IMGSRC="../gifs/txthome.gif"ALT="Learning the Korn Shell"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch08_02.htm"TITLE="8.2 Job Control"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 8.2 Job Control"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">7.3 Command-line Processing</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">8.2 Job Control</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="../upt/index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>