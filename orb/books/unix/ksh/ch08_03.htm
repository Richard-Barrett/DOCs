<HTML><HEAD><TITLE>[Chapter 8] 8.3 Signals</TITLE><METANAME="DC.title"CONTENT="Learning the Korn Shell"><METANAME="DC.creator"CONTENT="Bill Rosenblatt"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-03T21:15:02Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-054-6"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch08_01.htm"TITLE="8. Process Handling"><LINKREL="prev"HREF="ch08_02.htm"TITLE="8.2 Job Control"><LINKREL="next"HREF="ch08_04.htm"TITLE="8.4 trap"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="Learning the Korn Shell"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,66"HREF="index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/ksrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch08_02.htm"TITLE="8.2 Job Control"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 8.2 Job Control"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 8<BR>Process Handling</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch08_04.htm"TITLE="8.4 trap"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 8.4 trap"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="KSH-CH-8-SECT-3">8.3 Signals</A></H2><PCLASS="para"><ACLASS="indexterm"NAME="KSH-CH-8-IX-SIGNALS"></A><ACLASS="indexterm"NAME="AUTOID-13653"></A><ACLASS="indexterm"NAME="AUTOID-13655"></A>We mentioned earlier that typing <SPANCLASS="acronym">CTRL-Z</SPAN> to suspend a job is similar to typing <SPANCLASS="acronym">CTRL-C</SPAN> to stop a job, except that you can resume the job later.  They are actually similar in a deeper way: both are particular casesof the act of sending a <EMCLASS="emphasis">signal</EM> to a process.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-13663"></A>A signal is a message that one processsends to another when some abnormalevent takes place or when it wants the other process to do something.Most of the time, a process send a signal to a subprocess it created.You're undoubtedly already comfortable with the idea that one processcan communicate with another through an I/O pipeline; think of a signalas another way for processes to communicate with each other.  <ACLASS="indexterm"NAME="AUTOID-13666"></A>(In fact, any textbook on operating systems will tell you that bothare examples of the general concept of <EMCLASS="emphasis">interprocess communication</EM>,or IPC.)[6]</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[6] <ACLASS="indexterm"NAME="AUTOID-13671"></A><ACLASS="indexterm"NAME="AUTOID-13674"></A><ACLASS="indexterm"NAME="AUTOID-13678"></A>Pipes and signals were the only IPC mechanisms in early versions ofUNIX. More modern versions like System V and 4.x BSD have additionalmechanisms, such as sockets, named pipes, and shared memory.<ACLASS="indexterm"NAME="AUTOID-13682"></A>Named pipes are accessible to shell programmers through the <EMCLASS="emphasis">mknod(1)</EM>command, which is beyond the scope of this book.</P></BLOCKQUOTE><PCLASS="para">Depending on the version of UNIX, there are two or three dozentypes of signals, including a few that can be used for whatever purposea programmer wishes. Signals have numbers (from 1 to the number of signals the system supports) and names; we'll use the latter.  <ACLASS="indexterm"NAME="AUTOID-13686"></A><ACLASS="indexterm"NAME="AUTOID-13689"></A>You can geta list of all the signals on your system, by name and number,by typing <BCLASS="emphasis.bold">kill -l</B>. Bear in mind, when you write shell codeinvolving signals, that signal names are more portable to otherversions of UNIX than signal numbers.</P><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="KSH-CH-8-SECT-3.1">8.3.1 Control-key Signals</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="KSH-CH-8-IX-SIGNALS-SENDING-CTRL-KEYS"></A><ACLASS="indexterm"NAME="AUTOID-13699"></A><ACLASS="indexterm"NAME="AUTOID-13702"></A><ACLASS="indexterm"NAME="AUTOID-13705"></A><ACLASS="indexterm"NAME="AUTOID-13708"></A><ACLASS="indexterm"NAME="AUTOID-13710"></A><ACLASS="indexterm"NAME="AUTOID-13712"></A>When you type <SPANCLASS="acronym">CTRL-C</SPAN>, you tell the shell to send the INT (for &quot;interrupt&quot;)signal to the current job; <KBDCLASS="keycap">[CTRL-Z]</KBD> sends TSTP (on most systems, for &quot;terminal stop&quot;). You can also send the current job a QUIT signal by typing <BCLASS="emphasis.bold">CTRL-\</B> (control-backslash);this is sort of like a &quot;stronger&quot; version of <KBDCLASS="keycap">[CTRL-C]</KBD>.[7]You would normallyuse <KBDCLASS="keycap">[CTRL-]</KBD>&nbsp;when (and <EMCLASS="emphasis">only</EM> when) <KBDCLASS="keycap">[CTRL-C]</KBD> doesn't work.  </P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[7] <ACLASS="indexterm"NAME="AUTOID-13721"></A><KBDCLASS="keycap">[CTRL-]</KBD>\&nbsp;can also cause the shell to leave a file called <EMCLASS="emphasis">core</EM> in yourcurrent directory. This file contains an image of the process to whichyou sent the signal; a programmer could use it to help debugthe program that was running. The file's name is a (very) old-fashionedterm for a computer's memory. Other signals leave these &quot;core dumps&quot;as well; you should feel free to delete them unless a systems programmertells you otherwise.</P></BLOCKQUOTE><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-13729"></A><ACLASS="indexterm"NAME="AUTOID-13732"></A>As we'll see soon,there is also a &quot;panic&quot; signal called KILL that you can send to a processwhen even <KBDCLASS="keycap">[CTRL-]</KBD>&nbsp;doesn't work. But it isn't attached to any control key, which means that you can't use it to stop the currently running process.<ACLASS="indexterm"NAME="AUTOID-13735"></A><ACLASS="indexterm"NAME="AUTOID-13738"></A><ACLASS="indexterm"NAME="AUTOID-13741"></A>INT, TSTP, and QUIT are the only signals you can use with control keys.[8]</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[8] Some BSD-derived systems have additional control-key signals.</P></BLOCKQUOTE><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-13747"></A>You can customize the control keys used to send signals with optionsof the <EMCLASS="emphasis">stty</EM>(1) command. These vary from system to system-consultyour man page for the command-but the usual syntax is <BCLASS="emphasis.bold">stty</B> <EMCLASS="emphasis">signame char</EM>. <EMCLASS="emphasis">signame</EM> is a name for the signalthat, unfortunately, is often not the same as the names we use here. <ACLASS="xref"HREF="ch01_09.htm#KSH-CH-1-TAB-6"TITLE="Control Keys">Table 1.7</A> in <ACLASS="xref"HREF="ch01_01.htm"TITLE="Korn Shell Basics">Chapter 1, Korn Shell Basics</A> lists <EMCLASS="emphasis">stty</EM> names for signalsfound on all versions of UNIX. <EMCLASS="emphasis">char</EM> is the control character,which you can give in the same notation we use. For example,to set your INT key to <KBDCLASS="keycap">[CTRL-X]</KBD> on most systems, use:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">stty intr ^X</PRE></BLOCKQUOTE></P><PCLASS="para">Now that we've told you how to do this, we should add that we don'trecommend it. Changing your signal keys could lead to trouble ifsomeone else has to stop a runaway process on your machine.<ACLASS="indexterm"NAME="AUTOID-13762"></A></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-13764"></A>Most of the other signals are used by the operating system to advise processes of error conditions, like a bad machine code instruction, bad memory address, or division by zero, or &quot;interesting&quot; events such as a user logging out or a timer (&quot;alarm&quot;) going off.The remaining signals are used for esoteric error conditions that areof interest only to low-level systems programmers;newer versions of UNIX have more and more arcane signal types.</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="KSH-CH-8-SECT-3.2">8.3.2 kill</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="KSH-CH-8-IX-KILL"></A>You can use the built-in shell command <BCLASS="emphasis.bold">kill</B> to send asignal to any process you created-not just the currently running job.<ACLASS="indexterm"NAME="AUTOID-13773"></A><BCLASS="emphasis.bold">kill</B> takes as argument the process ID, job number, or command nameof the process to which you want to send the signal.  <ACLASS="indexterm"NAME="AUTOID-13777"></A><ACLASS="indexterm"NAME="AUTOID-13780"></A><ACLASS="indexterm"NAME="AUTOID-13783"></A><ACLASS="indexterm"NAME="AUTOID-13786"></A>By default, <BCLASS="emphasis.bold">kill</B> sends the TERM (&quot;terminate&quot;) signal,which usually has the same effect as the INT signal that you send with <KBDCLASS="keycap">[CTRL-C]</KBD>. But you can specify a different signal by usingthe signal name (or number) as an option, preceded by a dash.</P><PCLASS="para"><BCLASS="emphasis.bold">kill</B> is so-named because of the nature of the default TERM signal,but there is another reason, which has to do with the way UNIX handlessignals in general. The full details are too complex to go into here,but the following explanation should suffice.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-13793"></A>Most signals cause a process that receives them to roll over and die;therefore if you send any one of these signals, you &quot;kill&quot; the processthat receives it.However, programs can be set up to &quot;trap&quot; specific signals and takesome other action.<ACLASS="indexterm"NAME="AUTOID-13796"></A><ACLASS="indexterm"NAME="AUTOID-13799"></A><ACLASS="indexterm"NAME="AUTOID-13802"></A>For example, a text editor would do well to save the file beingedited before terminating when it receives a signal such as INT, TERM, or QUIT. Determiningwhat to do when various signals come in is part of the fun of UNIXsystems programming.</P><PCLASS="para"><ACLASS="indexterm"NAME="KSH-CH-8-IX-JOBS-WAYS-REFER-BY-JOB-NUMBER"></A><ACLASS="indexterm"NAME="KSH-CH-8-IX-PERCENT-SPECIFYING-JOBS-2"></A>Here is an example of <BCLASS="emphasis.bold">kill</B>. Say you have a <BCLASS="emphasis.bold">fred</B>process in the background, with process ID 480 andjob number 1, that needs to be stopped.You would start with this command:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <BCLASS="emphasis.bold">kill %1</B></PRE></BLOCKQUOTE></P><PCLASS="para">If you were successful, you would see a message like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">[1] + Terminated                fred &amp;</PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-13822"></A><ACLASS="indexterm"NAME="AUTOID-13825"></A>If you don't see this, then the TERM signal failed to terminate the job.The next step would be to try QUIT:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <BCLASS="emphasis.bold">kill -QUIT %1</B></PRE></BLOCKQUOTE></P><PCLASS="para">If that worked, you would see these messages:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">fred[1]: 480 Quit(coredump)[1] +  Done(131)                fred &amp;</PRE></BLOCKQUOTE></P><PCLASS="para">The 131 is the exit status returned by <BCLASS="emphasis.bold">fred</B>.[9]<ACLASS="indexterm"NAME="AUTOID-13844"></A>But if even QUIT doesn't work, the &quot;last-ditch&quot; method would be to use KILL:</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[9] <ACLASS="indexterm"NAME="AUTOID-13838"></A>When a shell script is sent a signal, it exits with status 128+<EMCLASS="emphasis">N</EM>,where <EMCLASS="emphasis">N</EM> is the number of the signal it received(128 changes to 256 in future releases). In this case,<BCLASS="emphasis.bold">fred</B> is a shell script, and QUIT happens to be signal number 3.</P></BLOCKQUOTE><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <BCLASS="emphasis.bold">kill -KILL %1</B></PRE></BLOCKQUOTE></P><PCLASS="para">(Notice how this has the flavor of &quot;yelling&quot; at the runaway process.)This produces the message:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">[1] + Killed                    fred &amp;</PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-13854"></A><ACLASS="indexterm"NAME="AUTOID-13855"></A>It is impossible for a process to &quot;trap&quot; a KILL signal-the operatingsystem should terminate the process immediately andunconditionally. If it doesn't,then either your process is in one of the &quot;funny states&quot; we'llsee later in this chapter, or (far less likely) there's a bugin your version of UNIX.</P><PCLASS="para">Here's another example.</P><DIVCLASS="task"><H4>Task 8.1</H4><BLOCKQUOTECLASS="taskinfo"><PCLASS="para">Write a script called <BCLASS="emphasis.bold">killalljobs</B> that kills all backgroundjobs.</P></BLOCKQUOTE><PCLASS="para">The solution to this task is simple, relying on <BCLASS="emphasis.bold">jobs -p</B>:<ACLASS="indexterm"NAME="AUTOID-13863"></A></P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">kill &quot;$@&quot; $(jobs -p)</PRE></BLOCKQUOTE></P></DIV><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-13870"></A><ACLASS="indexterm"NAME="AUTOID-13873"></A><ACLASS="indexterm"NAME="AUTOID-13876"></A>You may be tempted to use the KILL signal immediately, instead of trying TERM(the default) and QUITfirst. Don't do this. TERM and QUIT are designed to give a processthe chance to &quot;clean up&quot; before exiting, whereas KILL will stop theprocess, wherever it may be in its computation. <EMCLASS="emphasis">Use KILL only as a last resort!</EM></P><PCLASS="para">You can use the <BCLASS="emphasis.bold">kill</B> command with any process you create, not just jobs in the background of your current shell. For example, if you usea windowing system, then you may have several terminal windows, each ofwhich runs its own shell. If one shell is running a process that you wantto stop, you can <BCLASS="emphasis.bold">kill</B> it from another window-but you can't referto it with a job number because it's running under a different shell.  You must instead use its process ID.<ACLASS="indexterm"NAME="AUTOID-13883"></A></P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="KSH-CH-8-SECT-3.3">8.3.3 ps</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="KSH-CH-8-IX-PS"></A>This is probably the only situation in which a casual user would needto know the ID of a process. The command <EMCLASS="emphasis">ps</EM>(1) gives you thisinformation; however, it can give you lots of extra informationthat you must wade through as well.</P><PCLASS="para"><EMCLASS="emphasis">ps</EM> is a complex command. It takes several options, some of whichdiffer from one version of UNIX to another. To add to the confusion,you may need different options on different UNIX versions to get the same information!  <ACLASS="indexterm"NAME="AUTOID-13892"></A><ACLASS="indexterm"NAME="AUTOID-13896"></A><ACLASS="indexterm"NAME="AUTOID-13900"></A><ACLASS="indexterm"NAME="AUTOID-13904"></A><ACLASS="indexterm"NAME="AUTOID-13908"></A><ACLASS="indexterm"NAME="AUTOID-13912"></A>We will use options available on the two major typesof UNIX systems, those derived from System V (such as most of the versions for Intel 386/486 PCs, as well as IBM's AIX and Hewlett-Packard's HP/UX) and BSD (DEC's Ultrix, SunOS). If you aren't sure which kind of UNIXversion you have, try the System V options first.</P><PCLASS="para">You can invoke <EMCLASS="emphasis">ps</EM> in its simplest form without any options.In this case, it will print a line of information about the current login shell and any processes running under it (i.e., background jobs).<ACLASS="indexterm"NAME="AUTOID-13918"></A>For example, if you invoked three background jobs, as we saw earlier inthe chapter, <EMCLASS="emphasis">ps</EM> on System V-derived versions of UNIXwould produce output that looks something like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">   PID TTY      TIME COMD   146 pts/10   0:03 ksh  2349 pts/10   0:03 fred  2367 pts/10   0:17 bob  2389 pts/10   0:09 dave  2390 pts/10   0:00 ps</PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-13925"></A>The output on BSD-derived systems looks like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">   PID TT STAT  TIME COMMAND   146 10 S     0:03 /bin/ksh -i  2349 10 R     0:03 fred  2367 10 D     0:17 bob -f /dev/rmt0  2389 10 R     0:09 dave  2390 10 R     0:00 ps</PRE></BLOCKQUOTE></P><PCLASS="para">(You can ignore the STAT column.)   <ACLASS="indexterm"NAME="AUTOID-13931"></A><ACLASS="indexterm"NAME="AUTOID-13935"></A>This is a bit like the <BCLASS="emphasis.bold">jobs</B> command. PID is the process ID;TTY (or TT) is the terminal (or pseudo-terminal, if you are using a windowingsystem) the process was invoked from; TIME is the amount of processor time(not real or &quot;wall clock&quot; time) the process has used so far; COMD(or COMMAND) is the command. Notice that the BSD version includesthe command's arguments, if any;also notice that the first line reports on theparent shell process, and in the last line, <EMCLASS="emphasis">ps</EM> reports on itself.</P><PCLASS="para"><EMCLASS="emphasis">ps</EM> without arguments lists all processes started from the current terminal or pseudo-terminal. But since <EMCLASS="emphasis">ps</EM> is not a shellcommand, it doesn'tcorrelate process IDs with the shell's job numbers. It also doesn't help you find the ID of the runaway process in another shell window.  </P><PCLASS="para">To get this information, use <EMCLASS="emphasis">ps</EM> <BCLASS="emphasis.bold">-a</B> (for &quot;all&quot;);this lists information on a different set of processes, depending onyour UNIX version.</P><PCLASS="para"><ACLASS="indexterm"NAME="KSH-CH-8-IX-PS-A-SYSTEM-V-VERSION"></A><ACLASS="indexterm"NAME="AUTOID-13950"></A></P><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="KSH-CH-8-SECT-3.3.1">8.3.3.1 System V</A></H4><PCLASS="para">Instead of listing all of those that were started under a specificterminal, <EMCLASS="emphasis">ps</EM> <BCLASS="emphasis.bold">-a</B> on System V-derived systemslists all processes associated with any terminalthat aren't group leaders. <ACLASS="indexterm"NAME="AUTOID-13959"></A>For our purposes, a &quot;group leader&quot;is the parent shell of a terminal or window. Therefore, if you areusing a windowing system, <EMCLASS="emphasis">ps</EM> <BCLASS="emphasis.bold">-a</B> lists all jobs started in all windows (by all users), but not their parent shells.</P><PCLASS="para">Assume that, in the above example, you have only one terminal orwindow. Then <EMCLASS="emphasis">ps</EM> <BCLASS="emphasis.bold">-a</B> will print the same output as plain <EMCLASS="emphasis">ps</EM>except for the first line, since that's the parent shell.This doesn't seem to be very useful.  </P><PCLASS="para">But consider whathappens when you have multiple windows open.  <ACLASS="indexterm"NAME="AUTOID-13969"></A><ACLASS="indexterm"NAME="AUTOID-13971"></A>Let's say you havethree windows, all running terminal emulators like <EMCLASS="emphasis">xterm</EM>for the X Window System.  You start background jobs <BCLASS="emphasis.bold">fred</B>, <BCLASS="emphasis.bold">dave</B>, and <BCLASS="emphasis.bold">bob</B> in windowswith pseudo-terminal numbers 1, 2, and 3, respectively. This situationis shown in <ACLASS="xref"HREF="ch08_03.htm#KSH-CH-8-FIG-0"TITLE="Background jobs in multiple windows">Figure 8.1</A>.</P><H4CLASS="figure"><ACLASS="title"NAME="KSH-CH-8-FIG-0">Figure 8.1: Background jobs in multiple windows</A></H4><IMGCLASS="graphic"SRC="figs/korn0801.gif"ALT="Figure 8.1"><PCLASS="para">Assume you are in the uppermost window. If you type <BCLASS="emphasis.bold">ps</B>, you will seesomething like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">   PID TTY      TIME COMD   146 pts/1    0:03 ksh  2349 pts/1    0:03 fred  2390 pts/1    0:00 ps</PRE></BLOCKQUOTE></P><PCLASS="para">But if you type <BCLASS="emphasis.bold">ps -a</B>, you will see this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">   PID TTY      TIME COMD  2349 pts/1    0:03 fred  2367 pts/2    0:17 bob  2389 pts/3    0:09 dave  2390 pts/1    0:00 ps</PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-13990"></A><ACLASS="indexterm"NAME="KSH-CH-8-IX-KILL-KILLING-RUNAWAY-PROCESSES"></A><ACLASS="indexterm"NAME="AUTOID-13996"></A><ACLASS="indexterm"NAME="AUTOID-13999"></A><ACLASS="indexterm"NAME="AUTOID-14002"></A>Now you should see how <BCLASS="emphasis.bold">ps -a</B> can help you track down a runawayprocess. If it's <BCLASS="emphasis.bold">dave</B>, you can type <BCLASS="emphasis.bold">kill 2389</B>.If that doesn't work, try <BCLASS="emphasis.bold">kill -QUIT 2389</B>, or in the worst case,<BCLASS="emphasis.bold">kill -KILL 2389</B>.<ACLASS="indexterm"NAME="AUTOID-14008"></A></P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="KSH-CH-8-SECT-3.3.2">8.3.3.2 BSD</A></H4><PCLASS="para"><ACLASS="indexterm"NAME="KSH-CH-8-IX-PS-A-BSD-VERSION"></A><ACLASS="indexterm"NAME="AUTOID-14016"></A>On BSD-derived systems, <EMCLASS="emphasis">ps</EM> <BCLASS="emphasis.bold">-a</B> lists all jobs that were startedon any terminal; in other words, it's a bit like concatenating thethe results of plain <EMCLASS="emphasis">ps</EM> for every user on the system.<ACLASS="indexterm"NAME="AUTOID-14023"></A>Given the above scenario, <EMCLASS="emphasis">ps</EM> <BCLASS="emphasis.bold">-a</B> will show you all processesthat the System V version shows, plus the group leaders (parent shells).<ACLASS="indexterm"NAME="AUTOID-14028"></A></P><PCLASS="para">Unfortunately, <EMCLASS="emphasis">ps</EM> <BCLASS="emphasis.bold">-a</B> (on any version of UNIX)will not report processes that are incertain pathological conditions where they &quot;forget&quot; thingslike what shell invoked them and what terminal they belong to.<ACLASS="indexterm"NAME="AUTOID-14032"></A><ACLASS="indexterm"NAME="AUTOID-14035"></A><ACLASS="indexterm"NAME="AUTOID-14038"></A>Such processes have colorful names (&quot;zombies,&quot; &quot;orphans&quot;) thatare actually used in UNIX technical literature, not just informallyby systems hackers. If you have a serious runaway process problem,it's possible that the process has entered one of these states.</P><PCLASS="para">Let's not worry about why or how a process gets this way.All you need to understand is that the process doesn't show up whenyou type <BCLASS="emphasis.bold">ps -a</B>.  <ACLASS="indexterm"NAME="KSH-CH-8-IX-PS-LISTING-ALL-PROCESSES"></A><ACLASS="indexterm"NAME="KSH-CH-8-IX-PS-E-SYSTEM-V"></A><ACLASS="indexterm"NAME="KSH-CH-8-IX-PS-AX-BSD"></A>You need another option to <EMCLASS="emphasis">ps</EM> to see it:on System V, it's <EMCLASS="emphasis">ps</EM> <BCLASS="emphasis.bold">-e</B> (&quot;everything&quot;), whereas on BSD, it's<EMCLASS="emphasis">ps</EM> <BCLASS="emphasis.bold">-ax</B>.</P><PCLASS="para">These options tell <EMCLASS="emphasis">ps</EM> to list processes that either weren'tstarted from terminals or &quot;forgot&quot; what terminal they werestarted from. <ACLASS="indexterm"NAME="AUTOID-14059"></A>The former category includes lots ofprocesses that you probably didn't even know existed: theseinclude basic processes that run the system and so-called<EMCLASS="emphasis">daemons</EM> (pronounced &quot;demons&quot;) that handle system serviceslike mail, printing, network file systems, etc.  </P><PCLASS="para">In fact, the output of <EMCLASS="emphasis">ps</EM> <BCLASS="emphasis.bold">-e</B> or <EMCLASS="emphasis">ps</EM> <BCLASS="emphasis.bold">-ax</B> is an excellentsource of education about UNIX system internals, if you're curiousabout them.  <ACLASS="indexterm"NAME="AUTOID-14068"></A><ACLASS="indexterm"NAME="AUTOID-14071"></A>Run the command on your system and, for each line ofthe listing that looks interesting,invoke <EMCLASS="emphasis">man</EM> on the process name or look it up in theUnix Programmer's Manual for your system.</P><PCLASS="para">User shells and processes are listed at the very bottom of <EMCLASS="emphasis">ps</EM> <BCLASS="emphasis.bold">-e</B> or <EMCLASS="emphasis">ps</EM> <BCLASS="emphasis.bold">-ax</B> output;this is where you should look for runaway processes. Noticethat many processes in the listing have <CODECLASS="literal">?</CODE> instead ofa terminal. Either these aren't supposed to have one (such as thebasic daemons) or they're runaways.Therefore it's likely that if <EMCLASS="emphasis">ps</EM> <BCLASS="emphasis.bold">-a</B> doesn't find a processyou're trying to kill, <EMCLASS="emphasis">ps</EM> <BCLASS="emphasis.bold">-e</B> (or <EMCLASS="emphasis">ps</EM> <BCLASS="emphasis.bold">-ax</B>)will list it with <CODECLASS="literal">?</CODE> in the TTY (or TT) column. You can determinewhich process you want by looking at the COMD (or COMMAND) column.<ACLASS="indexterm"NAME="AUTOID-14087"></A><ACLASS="indexterm"NAME="AUTOID-14088"></A><ACLASS="indexterm"NAME="AUTOID-14089"></A><ACLASS="indexterm"NAME="AUTOID-14090"></A><ACLASS="indexterm"NAME="AUTOID-14091"></A></P></DIV></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch08_02.htm"TITLE="8.2 Job Control"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 8.2 Job Control"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="Learning the Korn Shell"><IMGSRC="../gifs/txthome.gif"ALT="Learning the Korn Shell"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch08_04.htm"TITLE="8.4 trap"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 8.4 trap"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">8.2 Job Control</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">8.4 trap</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="../upt/index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>