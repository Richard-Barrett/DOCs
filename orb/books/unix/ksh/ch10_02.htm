<HTML><HEAD><TITLE>[Chapter 10] 10.2 Environment Customization</TITLE><METANAME="DC.title"CONTENT="Learning the Korn Shell"><METANAME="DC.creator"CONTENT="Bill Rosenblatt"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-03T21:17:05Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-054-6"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch10_01.htm"TITLE="10. Korn Shell Administration"><LINKREL="prev"HREF="ch10_01.htm"TITLE="10.1 Installing the Korn Shell as the Standard Shell"><LINKREL="next"HREF="ch10_03.htm"TITLE="10.3 System Security Features"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="Learning the Korn Shell"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,66"HREF="index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/ksrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch10_01.htm"TITLE="10.1 Installing the Korn Shell as the Standard Shell"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 10.1 Installing the Korn Shell as the Standard Shell"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 10<BR>Korn Shell Administration</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch10_03.htm"TITLE="10.3 System Security Features"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 10.3 System Security Features"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="KSH-CH-10-SECT-2">10.2 Environment Customization</A></H2><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-16220"></A>Like the Bourne shell, the Korn shell uses the file <EMCLASS="emphasis">/etc/profile</EM> for system-wide customization.  When a user logs in, the shell reads and runs <EMCLASS="emphasis">/etc/profile</EM>before running the user's <EMCLASS="emphasis">.profile</EM>.</P><PCLASS="para">We won't cover all the possible commands you mightwant to put in <EMCLASS="emphasis">/etc/profile</EM>. But the Korn shellhas a few unique features that are particularly relevantto system-wide customization; we'll discuss them here. </P><PCLASS="para">We'll start with two built-in commands that you can usein <EMCLASS="emphasis">/etc/profile</EM>to tailor your users' environments and constrain their useof system resources. Users can also use these commandsin their <EMCLASS="emphasis">.profile</EM>, or at any other time, to overridethe default settings.</P><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="KSH-CH-10-SECT-2.1">10.2.1 umask</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="KSH-CH-10-IX-UMASK"></A><BCLASS="emphasis.bold">umask</B>, like the same command in most other shells,lets you specify the default permissions that files havewhen users create them.  <ACLASS="indexterm"NAME="AUTOID-16236"></A><ACLASS="indexterm"NAME="KSH-CH-10-IX-FILES-PERMISSIONS"></A>It takes the same types ofarguments that the <EMCLASS="emphasis">chmod</EM> command does, i.e.,absolute (octal numbers) or symbolic permission values.</P><PCLASS="para">The <BCLASS="emphasis.bold">umask</B> contains the permissions that are turned off by default whenever a process createsa file, regardless of what permission the processspecifies.[4]</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[4] <ACLASS="indexterm"NAME="AUTOID-16246"></A>If you are comfortable with Boolean logic, think of the<BCLASS="emphasis.bold">umask</B> as a number that the operating systemlogically XORs with the permission given by thecreating process.</P></BLOCKQUOTE><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-16251"></A>We'll use octal notation to show how this works.As you should know, the digits in a permission numberstand (left to right) forthe permissions of the owner, owner's group, and allother users, respectively. Each digit, in turn, consistsof three bits, which specify read, write, and executepermissions from left to right. (If a file is adirectory, the &quot;execute&quot; permission becomes &quot;search&quot;permission, i.e., permission to <BCLASS="emphasis.bold">cd</B> to it, listits files, etc.)</P><PCLASS="para">For example, the octal number 640 equals the binary number110 100 000. If a file has this permission, then its ownercan read and write it; users in the owner's group canonly read it; everyone else has no permission on it.A file with permission 755 gives its owner the rightto read, write, and execute it and everyone else the rightto read and execute (but not write).<ACLASS="indexterm"NAME="AUTOID-16257"></A></P><PCLASS="para">022 is a common <BCLASS="emphasis.bold">umask</B> value.This implies that when a file is created, the &quot;most&quot;permission it could possibly have is 755-which isthe usual permission of an executable that a compilermight create. A text editor, on the other hand, mightcreate a file with 666 permission (read and write foreveryone), but the <BCLASS="emphasis.bold">umask</B> forces it to be 644 instead.<ACLASS="indexterm"NAME="AUTOID-16261"></A></P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="KSH-CH-10-SECT-2.2">10.2.2 ulimit</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="KSH-CH-10-IX-ULIMIT"></A>The <BCLASS="emphasis.bold">ulimit</B> command was originally used to specify thelimit on file creation size. But the Korn shell versionhas options that let you put limits on several differentsystem resources.  <ACLASS="xref"HREF="ch10_02.htm#KSH-CH-10-TAB-0"TITLE="ulimit Resource Options">Table 10.1</A> lists the options.  <ACLASS="indexterm"NAME="AUTOID-16269"></A><ACLASS="indexterm"NAME="AUTOID-16273"></A><ACLASS="indexterm"NAME="AUTOID-16277"></A><ACLASS="indexterm"NAME="AUTOID-16281"></A><ACLASS="indexterm"NAME="AUTOID-16285"></A><ACLASS="indexterm"NAME="AUTOID-16289"></A><ACLASS="indexterm"NAME="AUTOID-16293"></A><ACLASS="indexterm"NAME="AUTOID-16297"></A></P><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="KSH-CH-10-TAB-0">Table 10.1: ulimit Resource Options</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Option</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Resource Limited</TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">-a</B></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">All (for printing values only)</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">-c</B></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Core file size (&#189; kb blocks)</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">-d</B></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Process data segment (kb)</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">-f</B></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">File size (&#189; kb blocks)</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">-n</B></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">File descriptors</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">-s</B></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Process stack segment (kb)</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">-t</B></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Process CPU time (seconds)</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><BCLASS="emphasis.bold">-v</B></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Virtual memory (kb)</TD></TR></TBODY></TABLE><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-16342"></A>Each takes a numerical argument that specifies the limit inunits shown in the table. You can also give the argument&quot;unlimited&quot; (which may actually mean some physical limit),or you can omit the argument, in which caseit will print the current limit.  <ACLASS="indexterm"NAME="AUTOID-16345"></A><BCLASS="emphasis.bold">ulimit -a</B> printslimits (or &quot;unlimited&quot;) of all types. You can onlyspecify one type of resource at a time.If you don't specify any option, <BCLASS="emphasis.bold">-f</B> is assumed.</P><PCLASS="para">Some of these options depend on operating system capabilitiesthat don't exist in older UNIX versions. In particular,some older versions have a fixed limit of 20 file descriptorsper process (making <BCLASS="emphasis.bold">-n</B> irrelevant), and some don't support virtual memory (making <BCLASS="emphasis.bold">-v</B> irrelevant).</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-16355"></A><ACLASS="indexterm"NAME="AUTOID-16359"></A>The <BCLASS="emphasis.bold">-d</B> and <BCLASS="emphasis.bold">-s</B> options have to do with <EMCLASS="emphasis">dynamic memory allocation</EM>, i.e., memory for whicha process asks the operating system at runtime.It's not necessary for casual users to limit these,though software developers may want to do soto prevent buggy programs fromtrying to allocate endless amounts of memory due toinfinite loops.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-16367"></A>The <BCLASS="emphasis.bold">-v</B> option is similar; it puts a limit on all uses of memory. You don't need thisunless your system has severe memory constraints or you want to limit process size to avoid thrashing. </P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-16373"></A><ACLASS="indexterm"NAME="AUTOID-16377"></A>You may want to specify limits on file size (<BCLASS="emphasis.bold">-f</B>and <BCLASS="emphasis.bold">-c</B>) if you have constraints on disk space.Sometimes users actually mean to create huge files,but more often than not, a huge file is the result ofa buggy program that goes into an infinite loop.<ACLASS="indexterm"NAME="AUTOID-16383"></A><ACLASS="indexterm"NAME="AUTOID-16385"></A><ACLASS="indexterm"NAME="AUTOID-16388"></A><ACLASS="indexterm"NAME="AUTOID-16391"></A>Software developers who use debuggers like <EMCLASS="emphasis">sdb</EM>and <EMCLASS="emphasis">dbx</EM> should not limit core file size, becausecore dumps are necessary for debugging.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-16397"></A>The <BCLASS="emphasis.bold">-t</B> option is another possible guard againstinfinite loops. But we would argue that a programthat is in an infinite loop but isn't allocating memoryor writing files is not particularly dangerous; it'sbetter to leave this unlimited and just let the userkill the offending program.  </P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-16403"></A>In addition to the types of resources you can limit,<BCLASS="emphasis.bold">ulimit</B> lets you specify hard or softlimits.  <ACLASS="indexterm"NAME="AUTOID-16407"></A>Hard limits can be lowered by any user butonly raised by the superuser (<BCLASS="emphasis.bold">root</B>); userscan lower soft limits and raise them-but only as highas the hard limit for that resource.</P><PCLASS="para">If you give <BCLASS="emphasis.bold">-H</B> along with one (or more)of the options above, <BCLASS="emphasis.bold">ulimit</B> will set hard limits;<BCLASS="emphasis.bold">-S</B> sets soft limits. Without either of these,<BCLASS="emphasis.bold">ulimit</B> sets both. For example, the followingcommands set the soft limit on file descriptors to 64and the hard limit to unlimited:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">ulimit -Sn 64ulimit -Hn unlimited</PRE></BLOCKQUOTE></P><PCLASS="para">When <BCLASS="emphasis.bold">ulimit</B> prints current limits, it prints softlimits unless you specify <BCLASS="emphasis.bold">-H</B>.<ACLASS="indexterm"NAME="AUTOID-16421"></A></P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="KSH-CH-10-SECT-2.3">10.2.3 Types of Global Customization</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-16425"></A>The best possible approach to globally-availablecustomization would be a system-wide environment filethat is separate from each user's environment file-justlike <EMCLASS="emphasis">/etc/profile</EM> is separate from each user's<EMCLASS="emphasis">.profile</EM>.  </P><PCLASS="para">Unfortunately, the Korn shell doesn'thave this feature.  <ACLASS="indexterm"NAME="AUTOID-16430"></A><ACLASS="indexterm"NAME="AUTOID-16433"></A><ACLASS="indexterm"NAME="AUTOID-16435"></A>If you assign a filename to the<BCLASS="emphasis.bold">ENV</B> environment variable, it could be overriddenin a user's <EMCLASS="emphasis">.profile</EM>. This allows you to makea default environment file available for userswho don't have their own, but it doesn't let you havea system-wide environment file that runs in additionto the users'.</P><PCLASS="para">Nevertheless, the shell gives you a few ways to set up customizations that are available to all users atall times.  <ACLASS="indexterm"NAME="AUTOID-16441"></A><ACLASS="indexterm"NAME="AUTOID-16443"></A><ACLASS="indexterm"NAME="AUTOID-16445"></A><ACLASS="indexterm"NAME="AUTOID-16447"></A><ACLASS="indexterm"NAME="AUTOID-16450"></A>Environment variables arethe most obvious; your <EMCLASS="emphasis">/etc/profile</EM> filewill undoubtedly contain definitions for several ofthem, including <BCLASS="emphasis.bold">PATH</B> and <BCLASS="emphasis.bold">TERM</B>.  </P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-16457"></A><ACLASS="indexterm"NAME="AUTOID-16460"></A>The variable <BCLASS="emphasis.bold">TMOUT</B> is useful when your systemsupports dialup lines. Set it to a number <EMCLASS="emphasis">N</EM>, andif a user doesn't enter a command within <EMCLASS="emphasis">N</EM> secondsafter the shell last issued a prompt, the shell willterminate. This feature is helpful in preventing peoplefrom &quot;hogging&quot; the dialup lines. </P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-16466"></A><ACLASS="indexterm"NAME="AUTOID-16468"></A>You may want to include some more complex customizationsinvolving environment variables, such as the promptstring <BCLASS="emphasis.bold">PS1</B> containing the current directory(as seen in <ACLASS="xref"HREF="ch04_01.htm"TITLE="Basic Shell Programming">Chapter 4, Basic Shell Programming</A>).</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-16474"></A><ACLASS="indexterm"NAME="AUTOID-16476"></A><ACLASS="indexterm"NAME="AUTOID-16478"></A><ACLASS="indexterm"NAME="AUTOID-16481"></A><ACLASS="indexterm"NAME="AUTOID-16484"></A>You can also turn on options, such as emacs-or vi- editing modes, <BCLASS="emphasis.bold">trackall</B> to make aliasexpansion more efficient and system security tighter,and <BCLASS="emphasis.bold">noclobber</B> to protectagainst inadvertent file overwriting. Any shellscripts you have written for general use also contribute tocustomization.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-16490"></A>Unfortunately, it's not possible to create a globalalias.  <ACLASS="indexterm"NAME="AUTOID-16493"></A>You can define aliases in <EMCLASS="emphasis">/etc/profile</EM>,but there is no way to make them part of the environmentso that their definitions will propagate to subshells.(In contrast, users can define global aliases by puttingtheir definitions in environment files.)</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-16497"></A><ACLASS="indexterm"NAME="AUTOID-16500"></A>However, you can set up global functions.These are an excellent way to customizeyour system's environment, because functions are partof the shell, not separate processes.  <ACLASS="indexterm"NAME="AUTOID-16504"></A><ACLASS="indexterm"NAME="AUTOID-16506"></A><ACLASS="indexterm"NAME="AUTOID-16508"></A>For example,if you define <EMCLASS="emphasis">pushd</EM> and <EMCLASS="emphasis">popd</EM> (seeChapters <ACLASS="xref"HREF="ch04_01.htm"TITLE="Basic Shell Programming">Chapter 4</A> through <ACLASS="xref"HREF="ch06_01.htm"TITLE="Command-line Options and Typed Variables">Chapter 6, Command-line Options and Typed Variables</A>) as exported functions, the shellwill run them almost as if they were built-in commands,as they are in the C shell.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-16515"></A><ACLASS="indexterm"NAME="AUTOID-16517"></A><ACLASS="indexterm"NAME="AUTOID-16520"></A><ACLASS="indexterm"NAME="AUTOID-16523"></A>The best way to create global functions is to use the built-in variable <BCLASS="emphasis.bold">FPATH</B> and the <BCLASS="emphasis.bold">autoload</B>feature that we introduced in <ACLASS="xref"HREF="ch04_01.htm"TITLE="Basic Shell Programming">Chapter 4</A>.  <ACLASS="indexterm"NAME="AUTOID-16528"></A>Just define<BCLASS="emphasis.bold">FPATH</B> as a function library directory, perhaps <EMCLASS="emphasis">/usr/local/functions</EM>, and make it an environmentvariable by <BCLASS="emphasis.bold">export</B>ing it. In other words, putthis or similar code in <EMCLASS="emphasis">/etc/profile</EM>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">FPATH=/usr/local/functionsexport FPATH</PRE></BLOCKQUOTE></P><PCLASS="para">Then put each global function's definition ina file in that directory with the same name as the function,and put <BCLASS="emphasis.bold">autoload</B> <EMCLASS="emphasis">fname</EM> for each of these functionsin <EMCLASS="emphasis">/etc/profile</EM>.</P><PCLASS="para">In either case, we suggest using exported functions forglobal customization instead of shell scripts. Givenhow cheap memory is nowadays, there is no reason whyyou shouldn't make generally useful functions part of your users' environment.</P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch10_01.htm"TITLE="10.1 Installing the Korn Shell as the Standard Shell"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 10.1 Installing the Korn Shell as the Standard Shell"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="Learning the Korn Shell"><IMGSRC="../gifs/txthome.gif"ALT="Learning the Korn Shell"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch10_03.htm"TITLE="10.3 System Security Features"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 10.3 System Security Features"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">10.1 Installing the Korn Shell as the Standard Shell</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">10.3 System Security Features</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="../upt/index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>