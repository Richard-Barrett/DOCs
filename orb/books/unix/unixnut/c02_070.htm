<HTML><HEAD><TITLE>Reference: expr</TITLE><METANAME="DC.title"CONTENT="UNIX in a Nutshell: System V Edition"><METANAME="DC.creator"CONTENT="Daniel Gilly &amp; the Staff of O'Reilly &amp; Associates"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-06T21:52:47Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-001-5"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch02_01.htm"TITLE="2. UNIX Commands"><LINKREL="prev"HREF="c02_069.htm"TITLE="Reference: ex"><LINKREL="next"HREF="c02_071.htm"TITLE="Reference: exstr"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX in a Nutshell: System V Edition"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,71"HREF="index.htm"ALT="UNIX in a Nutshell: System V Edition"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/usrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="NUTENTRY"HREF="c02_069.htm"TITLE="Reference: ex"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: Reference: ex"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 2<BR>UNIX Commands</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="NUTENTRY"HREF="c02_071.htm"TITLE="Reference: exstr"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: Reference: exstr"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="NUTENTRY"><H2CLASS="nutentry"><ACLASS="term"NAME="AUTOID-5638">expr</A></H2><PRECLASS="nutsynopsis"><CODECLASS="userinput"><B>expr</B></CODE> <CODECLASS="replaceable"><I>arg1 operator arg2</I></CODE> [ <CODECLASS="replaceable"><I>operator arg3</I></CODE> ... ]</PRE><DLCLASS="nutentrybody"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-5646"></A><ACLASS="indexterm"NAME="AUTOID-5648"></A><ACLASS="indexterm"NAME="AUTOID-5650"></A>Evaluate arguments as expressions and print the result.Strings can be compared and searched.Arguments and operators must be separated by spaces.In most cases, an argument is an integer, typed literally orrepresented by a shell variable.There are three types of operators:  arithmetic, relational, and logical.Exit status for <BCLASS="emphasis.bold">expr</B> is 0 (expression is nonzero and nonnull),1 (expression is 0 or null), or 2 (expression is invalid).</P><DIVCLASS="refsect2"><H3CLASS="refsect2"><ACLASS="title"NAME="AUTOID-5653">Arithmetic operators</A></H3><PCLASS="para">Use these to produce mathematical expressions whose results are printed.</P><DLCLASS="variablelist"><DTCLASS="term">+</DT><DDCLASS="listitem"><PCLASS="para">Add <CODECLASS="replaceable"><I>arg2</I></CODE> to <CODECLASS="replaceable"><I>arg1</I></CODE>.</P></DD><DTCLASS="term">-</DT><DDCLASS="listitem"><PCLASS="para">Subtract <CODECLASS="replaceable"><I>arg2</I></CODE> from <CODECLASS="replaceable"><I>arg1</I></CODE>.</P></DD><DTCLASS="term">*</DT><DDCLASS="listitem"><PCLASS="para">Multiply the arguments.</P></DD><DTCLASS="term">/</DT><DDCLASS="listitem"><PCLASS="para">Divide <CODECLASS="replaceable"><I>arg1</I></CODE> by <CODECLASS="replaceable"><I>arg2</I></CODE>.</P></DD><DTCLASS="term">%</DT><DDCLASS="listitem"><PCLASS="para">Take the remainder when <CODECLASS="replaceable"><I>arg1</I></CODE> is divided by <CODECLASS="replaceable"><I>arg2</I></CODE>.</P></DD></DL><PCLASS="para">Addition and subtraction are evaluated last, unless they are grouped insideparentheses.  The symbols <BCLASS="emphasis.bold">*</B>, <BCLASS="emphasis.bold">(</B>, and <BCLASS="emphasis.bold">)</B> have meaning to the shell,so they must be escaped (preceded by a backslash or enclosed in singlequotes).</P></DIV><DIVCLASS="refsect2"><H3CLASS="refsect2"><ACLASS="title"NAME="AUTOID-5689">Relational operators</A></H3><PCLASS="para">Use these to compare two arguments.  Arguments can also be words, in whichcase comparisons assume <BCLASS="emphasis.bold">a &lt; z</B> and <BCLASS="emphasis.bold">A &lt; Z</B>.If the comparison statement is true, the result is 1; if false, the result is 0.  Symbols <BCLASS="emphasis.bold">&gt;</B> and <BCLASS="emphasis.bold">&lt;</B> must be escaped.</P><DLCLASS="variablelist"><DTCLASS="term">=</DT><DDCLASS="listitem"><PCLASS="para">Are the arguments equal?</P></DD><DTCLASS="term">!=</DT><DDCLASS="listitem"><PCLASS="para">Are the arguments different?</P></DD><DTCLASS="term">&gt;</DT><DDCLASS="listitem"><PCLASS="para">Is <CODECLASS="replaceable"><I>arg1</I></CODE> greater than <CODECLASS="replaceable"><I>arg2</I></CODE>?</P></DD><DTCLASS="term">&gt;=</DT><DDCLASS="listitem"><PCLASS="para">Is <CODECLASS="replaceable"><I>arg1</I></CODE> greater than or equal to <CODECLASS="replaceable"><I>arg2</I></CODE>?</P></DD><DTCLASS="term">&lt;</DT><DDCLASS="listitem"><PCLASS="para">Is <CODECLASS="replaceable"><I>arg1</I></CODE> less than <CODECLASS="replaceable"><I>arg2</I></CODE>?</P></DD><DTCLASS="term">&lt;=</DT><DDCLASS="listitem"><PCLASS="para">Is <CODECLASS="replaceable"><I>arg1</I></CODE> less than or equal to <CODECLASS="replaceable"><I>arg2</I></CODE>?</P></DD></DL></DIV><DIVCLASS="refsect2"><H3CLASS="refsect2"><ACLASS="title"NAME="AUTOID-5729">Logical operators</A></H3><PCLASS="para">Use these to compare two arguments.  Depending on the values,the result can be <CODECLASS="replaceable"><I>arg1</I></CODE> (or some portion of it), <CODECLASS="replaceable"><I>arg2</I></CODE>, or 0.Symbols <BCLASS="emphasis.bold">|</B> and <BCLASS="emphasis.bold">&amp;</B> must be escaped.</P><DLCLASS="variablelist"><DTCLASS="term">|</DT><DDCLASS="listitem"><PCLASS="para">Logical OR; if <CODECLASS="replaceable"><I>arg1</I></CODE> has a non-zero (and non-null) value,the result is <CODECLASS="replaceable"><I>arg1</I></CODE>; otherwise, the result is <CODECLASS="replaceable"><I>arg2</I></CODE>.</P></DD><DTCLASS="term">&amp;</DT><DDCLASS="listitem"><PCLASS="para">Logical AND; if both <CODECLASS="replaceable"><I>arg1</I></CODE> and <CODECLASS="replaceable"><I>arg2</I></CODE> have a non-zero (and non-null) value, the result is <CODECLASS="replaceable"><I>arg1</I></CODE>; otherwise, the result is 0.</P></DD><DTCLASS="term">:</DT><DDCLASS="listitem"><PCLASS="para">Sort of like <BCLASS="emphasis.bold">grep</B>; <CODECLASS="replaceable"><I>arg2</I></CODE> is a pattern to search for in <CODECLASS="replaceable"><I>arg1</I></CODE>.<CODECLASS="replaceable"><I>arg2</I></CODE> must be a regular expression in this case.  If the <CODECLASS="replaceable"><I>arg2</I></CODE> patternis enclosed in \(  \), the result is the portion of <CODECLASS="replaceable"><I>arg1</I></CODE> that matches;otherwise, the result is simply the number of characters that match.  Bydefault, a pattern match always applies to the beginning of the first argument (the searchstring implicitly begins with a ^).  To match other parts of the string,start the search string with .* .</P></DD></DL></DIV><DIVCLASS="refsect2"><H3CLASS="refsect2"><ACLASS="title"NAME="AUTOID-5761">Examples</A></H3><PCLASS="para">Division happens first; result is 10:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"><CODECLASS="userinput"><B>expr 5 + 10 / 2</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Addition happens first; result is 7 (truncated from 7.5):</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"><CODECLASS="userinput"><B>expr \( 5 + 10 \) / 2</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Add 1 to variable <BCLASS="emphasis.bold">i</B>; this is how variables are incremented inshell scripts:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"><CODECLASS="userinput"><B>i=`expr $i + 1`</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Print 1 (true) if variable <BCLASS="emphasis.bold">a</B> is the string &quot;hello&quot;:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"><CODECLASS="userinput"><B>expr $a = hello</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Print 1 (true) if <BCLASS="emphasis.bold">b</B> plus 5 equals 10 or more:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"><CODECLASS="userinput"><B>expr $b + 5 \&gt;= 10</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">In the examples below, variable <BCLASS="emphasis.bold">p</B> is the string &quot;version.100&quot;.  This command prints the number of characters in <BCLASS="emphasis.bold">p</B>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"><CODECLASS="userinput"><B>expr $p : '.*'</B></CODE>			<ICLASS="lineannotation">Result is 11</I></PRE></BLOCKQUOTE></P><PCLASS="para">Match all characters and print them:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"><CODECLASS="userinput"><B>expr $p : '\(.*\)'</B></CODE>		<ICLASS="lineannotation">Result is &quot;version.100&quot;</I></PRE></BLOCKQUOTE></P><PCLASS="para">Print the number of lowercase letters at the beginning of <BCLASS="emphasis.bold">p</B>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"><CODECLASS="userinput"><B>expr $p : '[a-z]*'</B></CODE>		<ICLASS="lineannotation">Result is 7</I></PRE></BLOCKQUOTE></P><PCLASS="para">Match the lowercase letters at the beginning of <BCLASS="emphasis.bold">p</B>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"><CODECLASS="userinput"><B>expr $p : '\([a-z]*\)'</B></CODE>	<ICLASS="lineannotation">Result is &quot;version&quot;</I></PRE></BLOCKQUOTE></P><PCLASS="para">Truncate <BCLASS="emphasis.bold">$x</B> if it contains five or more characters; if not, just print <BCLASS="emphasis.bold">$x</B>.  (Logical OR uses the second argument whenthe first one is 0 or null; i.e., when the match fails.)</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"><CODECLASS="userinput"><B>expr $x : '\(.....\)' \| $x</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">In a shell script, rename files to their first five letters:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"><CODECLASS="userinput"><B>mv $x `expr $x : '\(.....\)' \| $x</B></CODE>`</PRE></BLOCKQUOTE></P><PCLASS="para">(To avoid overwriting files with similar names, use <BCLASS="emphasis.bold">mv  -i.)</B></P></DIV></DL></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="NUTENTRY"HREF="c02_069.htm"TITLE="Reference: ex"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: Reference: ex"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX in a Nutshell: System V Edition"><IMGSRC="../gifs/txthome.gif"ALT="UNIX in a Nutshell: System V Edition"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="NUTENTRY"HREF="c02_071.htm"TITLE="Reference: exstr"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: Reference: exstr"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">Reference: ex</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">Reference: exstr</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="../upt/index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>