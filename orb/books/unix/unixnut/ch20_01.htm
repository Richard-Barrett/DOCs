<HTML><HEAD><TITLE>[Chapter 20] Program Debugging</TITLE><METANAME="DC.title"CONTENT="UNIX in a Nutshell: System V Edition"><METANAME="DC.creator"CONTENT="Daniel Gilly &amp; the Staff of O'Reilly &amp; Associates"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-06T22:02:08Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-001-5"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="index.htm"TITLE="UNIX in a Nutshell: System V Edition"><LINKREL="prev"HREF="ch19_05.htm"TITLE="19.5 Sample Default Macros, Suffixes, and Rules"><LINKREL="next"HREF="ch20_02.htm"TITLE="20.2 The Dbx Debugger"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX in a Nutshell: System V Edition"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,71"HREF="index.htm"ALT="UNIX in a Nutshell: System V Edition"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/usrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch19_05.htm"TITLE="19.5 Sample Default Macros, Suffixes, and Rules"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 19.5 Sample Default Macros, Suffixes, and Rules"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 20</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch20_02.htm"TITLE="20.2 The Dbx Debugger"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 20.2 The Dbx Debugger"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="CHAPTER"><H1CLASS="chapter"><ACLASS="title"NAME="UNUT-CH-20">20. Program Debugging</A></H1><DIVCLASS="htmltoc"><P><B>Contents:</B><BR><ACLASS="sect1"HREF="#UNUT-CH-20-SECT-1"TITLE="20.1 The Sdb Debugger">The Sdb Debugger</A><BR><ACLASS="sect1"HREF="ch20_02.htm"TITLE="20.2 The Dbx Debugger">The Dbx Debugger</A></P><P></P></DIV><PCLASS="para"><ACLASS="indexterm"NAME="UNUT-CH-20-IX-DEBUGGING-UTILITIES"></A><ACLASS="indexterm"NAME="UNUT-CH-20-IX-PROGRAMS-DEBUGGING"></A>This section presents the debugging utilities for the UNIX environment:  </P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">Sdb (available in SVR4 but not Solaris 2.0)</P></LI><LICLASS="listitem"><PCLASS="para">Dbx (Solaris 2.0 only)</P></LI></UL><PCLASS="para">These debuggers take an executable object file and its corefile-the core image file produced when <CODECLASS="replaceable"><I>objfile</I></CODE> is executed.  The debuggers then provide a controlled environment for the execution of the program.</P><PCLASS="para">If <CODECLASS="replaceable"><I>objfile</I></CODE> and <CODECLASS="replaceable"><I>corefile</I></CODE> are not specified, <BCLASS="emphasis.bold">a.out</B> is taken as the default object file and <BCLASS="emphasis.bold">core</B>as the default core image file.  </P><PCLASS="para">Each debugging utility is listed among the UNIX commands in Section 2of this guide.</P><DIVCLASS="sect1"><H2CLASS="sect1"><ACLASS="title"NAME="UNUT-CH-20-SECT-1">20.1 The Sdb Debugger</A></H2><PCLASS="para"><ACLASS="indexterm"NAME="UNUT-CH-20-IX-SDB-DEBUGGER"></A>Sdb, the symbolic debugger, is used for checkingassembly programs, executable C and FORTRAN programs, and core filesresulting from aborted programs.  It has the following command-linesyntax:</P><BLOCKQUOTECLASS="blockquote"><PCLASS="para"><BCLASS="emphasis.bold">sdb</B>  [<CODECLASS="replaceable"><I>options</I></CODE>]  [<CODECLASS="replaceable"><I>objfile</I></CODE>  [<CODECLASS="replaceable"><I>corefile</I></CODE>  [<CODECLASS="replaceable"><I>dir</I></CODE>]]]</P></BLOCKQUOTE><PCLASS="para">A <BCLASS="emphasis.bold">-</B> in place of <CODECLASS="replaceable"><I>corefile</I></CODE> will force sdb to ignore anycore image file.</P><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="UNUT-CH-20-SECT-1.0.1">20.1.1 Options</A></H3><DLCLASS="variablelist"><DTCLASS="term">-e</DT><DDCLASS="listitem"><PCLASS="para">Ignore symbolic data; treat addresses as file offsets.</P></DD><DTCLASS="term">-s <CODECLASS="replaceable"><I>n</I></CODE></DT><DDCLASS="listitem"><PCLASS="para">Don't stop processes that receive signal number <CODECLASS="replaceable"><I>n</I></CODE>.See the <BCLASS="emphasis.bold">signal</B> system call for values of <CODECLASS="replaceable"><I>n</I></CODE>.<BCLASS="emphasis.bold">-s</B> may be used more than once.</P></DD><DTCLASS="term">-V</DT><DDCLASS="listitem"><PCLASS="para">Print version information (and exit if no <CODECLASS="replaceable"><I>objfile</I></CODE> is given).</P></DD><DTCLASS="term">-w</DT><DDCLASS="listitem"><PCLASS="para">Make <CODECLASS="replaceable"><I>objfile</I></CODE> and <CODECLASS="replaceable"><I>corefile</I></CODE> writable.</P></DD><DTCLASS="term">-W</DT><DDCLASS="listitem"><PCLASS="para">Suppress warning messages about older files.</P></DD></DL></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="UNUT-CH-20-SECT-1.1">20.1.2 Command Specifiers</A></H3><PCLASS="para">In the &quot;Commands&quot; section below, commands use the specifiers <CODECLASS="replaceable"><I>m</I></CODE>, <CODECLASS="replaceable"><I>l</I></CODE>, and<CODECLASS="replaceable"><I>n</I></CODE>.  <CODECLASS="replaceable"><I>m</I></CODE> is the display format of anaddress.  (Addresses are specified by a variable or a line number.)<CODECLASS="replaceable"><I>l</I></CODE> is the address length.  <CODECLASS="replaceable"><I>n</I></CODE> stands for the line number.</P><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="UNUT-CH-20-SECT-1.1.1">20.1.2.1 Values for m</A></H4><DLCLASS="variablelist"><DTCLASS="term">a</DT><DDCLASS="listitem"><PCLASS="para">Characters starting at variable's address.</P></DD><DTCLASS="term">c</DT><DDCLASS="listitem"><PCLASS="para">Character.</P></DD><DTCLASS="term">d</DT><DDCLASS="listitem"><PCLASS="para">Decimal.</P></DD><DTCLASS="term">f</DT><DDCLASS="listitem"><PCLASS="para">32-bit floating.</P></DD><DTCLASS="term">g</DT><DDCLASS="listitem"><PCLASS="para">64-bit double precision floating.</P></DD><DTCLASS="term">i</DT><DDCLASS="listitem"><PCLASS="para">Disassemble machine-language instructions;print address using numbers and symbols.</P></DD><DTCLASS="term">I</DT><DDCLASS="listitem"><PCLASS="para">Same as <BCLASS="emphasis.bold">i</B>, but print address using numbers only.</P></DD><DTCLASS="term">o</DT><DDCLASS="listitem"><PCLASS="para">Octal.</P></DD><DTCLASS="term">p</DT><DDCLASS="listitem"><PCLASS="para">Pointer to procedure.</P></DD><DTCLASS="term">s</DT><DDCLASS="listitem"><PCLASS="para">Print character(s) at address pointed to by (string pointer) variable.</P></DD><DTCLASS="term">u</DT><DDCLASS="listitem"><PCLASS="para">Unsigned decimal.</P></DD><DTCLASS="term">x</DT><DDCLASS="listitem"><PCLASS="para">Hexadecimal.</P></DD></DL></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="UNUT-CH-20-SECT-1.1.2">20.1.2.2 Values for l</A></H4><PCLASS="para">Length specifiers are meaningful only with <CODECLASS="replaceable"><I>m</I></CODE> values of <BCLASS="emphasis.bold">c</B>, <BCLASS="emphasis.bold">d</B>, <BCLASS="emphasis.bold">o</B>, <BCLASS="emphasis.bold">u</B>, or <BCLASS="emphasis.bold">x</B>.</P><DLCLASS="variablelist"><DTCLASS="term">b</DT><DDCLASS="listitem"><PCLASS="para">One byte.</P></DD><DTCLASS="term">h</DT><DDCLASS="listitem"><PCLASS="para">Two bytes (half word).</P></DD><DTCLASS="term">l</DT><DDCLASS="listitem"><PCLASS="para">Four bytes (long word).</P><PCLASS="para"></P></DD></DL></DIV></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="UNUT-CH-20-SECT-1.2">20.1.3 Commands</A></H3><PCLASS="para">Refer to the previous specifiers when reviewing the sdb commands,which are grouped below:</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="UNUT-CH-20-SECT-1.2.1">20.1.4 Formatted Printing</A></H3><TABLECLASS="informaltable"><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="userinput"><B>t</B></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Print a stack trace.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="userinput"><B>T</B></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Print the top line of the stack trace.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="replaceable"><I>variable</I></CODE><CODECLASS="userinput"><B>/</B></CODE><CODECLASS="replaceable"><I>clm</I></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Print variable according to length <CODECLASS="replaceable"><I>l</I></CODE> and format <CODECLASS="replaceable"><I>m</I></CODE>.  Number <CODECLASS="replaceable"><I>c</I></CODE>  specifies how much memory (in units of <CODECLASS="replaceable"><I>l</I></CODE>) to display.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="replaceable"><I>n</I></CODE><CODECLASS="userinput"><B>?</B></CODE><CODECLASS="replaceable"><I>lm</I></CODE> <CODECLASS="replaceable"><I>variable</I></CODE><CODECLASS="userinput"><B>:?</B></CODE><CODECLASS="replaceable"><I>lm</I></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Print from <BCLASS="emphasis.bold">a.out</B> and procedure <CODECLASS="replaceable"><I>variable</I></CODE> according to length <CODECLASS="replaceable"><I>l</I></CODE> and format <CODECLASS="replaceable"><I>m</I></CODE>.  Default <CODECLASS="replaceable"><I>lm</I></CODE> is <BCLASS="emphasis.bold">i</B>.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="replaceable"><I>variable</I></CODE><CODECLASS="userinput"><B>=</B></CODE><CODECLASS="replaceable"><I>lm</I></CODE><CODECLASS="replaceable"><I>n</I></CODE><CODECLASS="userinput"><B>=</B></CODE><CODECLASS="replaceable"><I>lm</I></CODE><CODECLASS="replaceable"><I>number</I></CODE><CODECLASS="userinput"><B>=</B></CODE><CODECLASS="replaceable"><I>lm</I></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Print the address of <CODECLASS="replaceable"><I>variable</I></CODE> or line number <CODECLASS="replaceable"><I>n</I></CODE>, in the formatspecified by <CODECLASS="replaceable"><I>l</I></CODE> and <CODECLASS="replaceable"><I>m</I></CODE>.  Use the last form to convert <CODECLASS="replaceable"><I>number</I></CODE>to the format specified by <CODECLASS="replaceable"><I>l</I></CODE> and <CODECLASS="replaceable"><I>m</I></CODE>.  Default <CODECLASS="replaceable"><I>lm</I></CODE> is <BCLASS="emphasis.bold">lx</B>.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="replaceable"><I>variable</I></CODE><CODECLASS="userinput"><B>!</B></CODE><CODECLASS="replaceable"><I>value</I></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Assign <CODECLASS="replaceable"><I>value</I></CODE> to <CODECLASS="replaceable"><I>variable</I></CODE>.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="userinput"><B>x</B></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Display the machine registers and the machine instructions.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="userinput"><B>X</B></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Display the machine instructions.</TD></TR></TBODY></TABLE></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="UNUT-CH-20-SECT-1.2.2">20.1.5 Examining the Source</A></H3><TABLECLASS="informaltable"><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="userinput"><B>e</B></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Print name of current file.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="userinput"><B>e</B></CODE><CODECLASS="replaceable"><I>proc</I></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Set current file to file containing procedure <CODECLASS="replaceable"><I>proc</I></CODE>.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="userinput"><B>e</B></CODE><CODECLASS="replaceable"><I>file</I></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Set current file to <CODECLASS="replaceable"><I>file</I></CODE>.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="userinput"><B>e</B></CODE><CODECLASS="replaceable"><I>dir</I></CODE><CODECLASS="userinput"><B>/</B></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Append directory <CODECLASS="replaceable"><I>dir</I></CODE> to directory list. </TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="userinput"><B>p</B></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Print current line.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="userinput"><B>w</B></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Print ten lines surrounding the current line.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="userinput"><B>z</B></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Print ten lines (starting at current); reset current lineto last line.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="userinput"><B>/</B></CODE><CODECLASS="replaceable"><I>regexp</I></CODE><CODECLASS="userinput"><B>/</B></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Search ahead for regular expression <CODECLASS="replaceable"><I>regexp</I></CODE>.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="userinput"><B>?</B></CODE><CODECLASS="replaceable"><I>regexp</I></CODE><CODECLASS="userinput"><B>?</B></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Search back for regular expression <CODECLASS="replaceable"><I>regexp</I></CODE>.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="replaceable"><I>n</I></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Set current line to <CODECLASS="replaceable"><I>n</I></CODE> and print it.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="replaceable"><I>count</I></CODE><CODECLASS="userinput"><B>+</B></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Advance <CODECLASS="replaceable"><I>count</I></CODE> lines; print new current line.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="replaceable"><I>count</I></CODE><CODECLASS="userinput"><B>-</B></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Go back <CODECLASS="replaceable"><I>count</I></CODE> lines; print new current line.</TD></TR></TBODY></TABLE></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="UNUT-CH-20-SECT-1.2.3">20.1.6 Executing the Source</A></H3><TABLECLASS="informaltable"><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="replaceable"><I>n</I></CODE><CODECLASS="userinput"><B> a</B></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Set a breakpoint at line number <CODECLASS="replaceable"><I>n</I></CODE> and inform the user.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">[<CODECLASS="replaceable"><I>n</I></CODE>]<CODECLASS="userinput"><B> b </B></CODE><CODECLASS="replaceable"><I>commands</I></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Set breakpoint at line number <CODECLASS="replaceable"><I>n</I></CODE> and optionally execute sdb <CODECLASS="replaceable"><I>commands</I></CODE> (separated by ;) at breakpoint.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">[<CODECLASS="replaceable"><I>n</I></CODE>]<CODECLASS="userinput"><B> c </B></CODE><CODECLASS="replaceable"><I>count</I></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Continue after a breakpoint or, if <CODECLASS="replaceable"><I>count</I></CODE> isgiven, stop after <CODECLASS="replaceable"><I>count</I></CODE> breakpoints.  If <CODECLASS="replaceable"><I>n</I></CODE>is specified, set a temporary breakpoint at line number <CODECLASS="replaceable"><I>n</I></CODE>.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">[<CODECLASS="replaceable"><I>n</I></CODE>]<CODECLASS="userinput"><B> C </B></CODE><CODECLASS="replaceable"><I>count</I></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Same as <BCLASS="emphasis.bold">c</B>, but reactivate any signal that stopped program.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="replaceable"><I>n</I></CODE><CODECLASS="userinput"><B> g </B></CODE><CODECLASS="replaceable"><I>count</I></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Continue at line number <CODECLASS="replaceable"><I>n</I></CODE> after a breakpoint.If <CODECLASS="replaceable"><I>count</I></CODE> is given, ignore <CODECLASS="replaceable"><I>count</I></CODE> breakpoints.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">[<CODECLASS="replaceable"><I>count</I></CODE>] <CODECLASS="userinput"><B>r </B></CODE><CODECLASS="replaceable"><I>args</I></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Run the program with the specified arguments.  Ignore <CODECLASS="replaceable"><I>count</I></CODE> breakpoints.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">[<CODECLASS="replaceable"><I>count</I></CODE>] <CODECLASS="userinput"><B>r</B></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Rerun the program with the previously specified arguments.  Ignore <CODECLASS="replaceable"><I>count</I></CODE> breakpoints.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">[<CODECLASS="replaceable"><I>count</I></CODE>] <CODECLASS="userinput"><B>R</B></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Run the program with the no arguments.  Ignore <CODECLASS="replaceable"><I>count</I></CODE> breakpoints.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">[<CODECLASS="replaceable"><I>level</I></CODE>] [<CODECLASS="userinput"><B>v</B></CODE>]</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">This command is used when single-stepping via <BCLASS="emphasis.bold">s</B>, <BCLASS="emphasis.bold">S</B>, or <BCLASS="emphasis.bold">m</B>.<BCLASS="emphasis.bold">v</B> turns off verbose mode; omit <BCLASS="emphasis.bold">v</B> to turn on verbose mode.If <CODECLASS="replaceable"><I>level</I></CODE> is omitted, print only source file or function name when either changes; otherwise, set<CODECLASS="replaceable"><I>level</I></CODE> to 1 (print C source lines before execution)or 2 or higher (print C source lines and assembler statements).</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="replaceable"><I>proc</I></CODE>(<CODECLASS="replaceable"><I>a1</I></CODE>,<CODECLASS="replaceable"><I>a2</I></CODE>,...)</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Execute procedure <CODECLASS="replaceable"><I>proc</I></CODE> with arguments <CODECLASS="replaceable"><I>a1</I></CODE>, <CODECLASS="replaceable"><I>a2</I></CODE>, etc.  Arguments can be constants, local variable names, or register names.  Append <BCLASS="emphasis.bold">/m</B> in order to print the returned value in format <CODECLASS="replaceable"><I>m</I></CODE> (default is <BCLASS="emphasis.bold">d</B>).</P></TD></TR></TBODY></TABLE></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="UNUT-CH-20-SECT-1.2.4">20.1.7 Breakpoint and Program Control</A></H3><TABLECLASS="informaltable"><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="userinput"><B>B</B></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Print active breakpoints.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">[<CODECLASS="replaceable"><I>n</I></CODE>]<CODECLASS="userinput"><B> d</B></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Delete breakpoint at line number <CODECLASS="replaceable"><I>n</I></CODE>.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="userinput"><B>D</B></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Remove all breakpoints.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="userinput"><B>i </B></CODE><CODECLASS="replaceable"><I>count</I></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Single-step <CODECLASS="replaceable"><I>count</I></CODE> machine-language instructions.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="userinput"><B>I </B></CODE><CODECLASS="replaceable"><I>count</I></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Same as <BCLASS="emphasis.bold">i</B>, but reactivate any signal that stopped program.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="userinput"><B>k</B></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Kill the program you're debugging.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="userinput"><B>l</B></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Print the previous line executed. </TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="userinput"><B>M</B></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Print the address maps.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="replaceable"><I>var</I></CODE><CODECLASS="userinput"><B>$m </B></CODE><CODECLASS="replaceable"><I>count</I></CODE><CODECLASS="replaceable"><I>addr</I></CODE><CODECLASS="userinput"><B>:m </B></CODE><CODECLASS="replaceable"><I>count</I></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Single-step <CODECLASS="replaceable"><I>count</I></CODE> lines until the specified variable or addressis modified.  Omitting <CODECLASS="replaceable"><I>count</I></CODE> specifies an infinite count.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="userinput"><B>q</B></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Exit sdb.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="userinput"><B>s</B></CODE> [<CODECLASS="replaceable"><I>count</I></CODE>]</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Single-step <CODECLASS="replaceable"><I>count</I></CODE> lines.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="userinput"><B>S</B></CODE> [<CODECLASS="replaceable"><I>count</I></CODE>]</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Same as <BCLASS="emphasis.bold">s</B>, but skip called functions.</TD></TR></TBODY></TABLE></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="UNUT-CH-20-SECT-1.2.5">20.1.8 Miscellaneous Commands</A></H3><TABLECLASS="informaltable"><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="userinput"><B>#</B></CODE><CODECLASS="replaceable"><I>text</I></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Supply a text comment ignored by sdb.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="userinput"><B>!</B></CODE><CODECLASS="replaceable"><I>cmd</I></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Execute <CODECLASS="replaceable"><I>cmd</I></CODE> with <BCLASS="emphasis.bold">sh</B>.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="userinput"><B>newline</B></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Display the next line or memory location, or disassemble the nextinstruction.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="replaceable"><I>EOF</I></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Scroll the display ten lines.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="userinput"><B>&lt; </B></CODE><CODECLASS="replaceable"><I>file</I></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Execute commands contained in <CODECLASS="replaceable"><I>file</I></CODE>.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="replaceable"><I>string</I></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Print a quoted <CODECLASS="replaceable"><I>string</I></CODE>.  C escape charactersare recognized.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><CODECLASS="userinput"><B>V</B></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Print the sdb version number.</TD></TR></TBODY></TABLE><ACLASS="indexterm"NAME="AUTOID-42310"></A></DIV></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch19_05.htm"TITLE="19.5 Sample Default Macros, Suffixes, and Rules"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 19.5 Sample Default Macros, Suffixes, and Rules"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX in a Nutshell: System V Edition"><IMGSRC="../gifs/txthome.gif"ALT="UNIX in a Nutshell: System V Edition"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch20_02.htm"TITLE="20.2 The Dbx Debugger"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 20.2 The Dbx Debugger"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">19.5 Sample Default Macros, Suffixes, and Rules</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">20.2 The Dbx Debugger</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="../upt/index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>