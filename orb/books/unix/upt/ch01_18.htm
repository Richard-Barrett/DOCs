<HTML><HEAD><TITLE>[Chapter 1] 1.18 Who Handles Wildcards? </TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:31:22Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch01_01.htm"TITLE="1. Introduction"><LINKREL="prev"HREF="ch01_17.htm"TITLE="1.17 Filename Extensions "><LINKREL="next"HREF="ch01_19.htm"TITLE="1.19 The Tree Structure of the Filesystem "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch01_17.htm"TITLE="1.17 Filename Extensions "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 1.17 Filename Extensions "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 1<BR>Introduction</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch01_19.htm"TITLE="1.19 The Tree Structure of the Filesystem "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 1.19 The Tree Structure of the Filesystem "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-1013">1.18 Who Handles Wildcards? </A></H2><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-1782"></A><SPANCLASS="link">Wildcards (<ACLASS="linkend"HREF="ch01_16.htm"TITLE="Wildcards ">1.16</A>)</SPAN>are actually defined by the UNIX shells, rather than theUNIX filesystem. In theory, a new shell could define newwildcards, and consequently, we should discuss wildcarding when wediscuss the shell. In practice, all UNIX shells (including<SPANCLASS="link"><EMCLASS="emphasis">ksh</EM>, <EMCLASS="emphasis">bash</EM>, and other variants (<ACLASS="linkend"HREF="ch01_08.htm"TITLE="There Are Many Shells ">1.8</A>)</SPAN>)honor the same wildcard conventions, and we don't expect to see anyonechange the rules. (But different shells do different things<SPANCLASS="link">when a wildcard doesn't match (<ACLASS="linkend"HREF="ch15_04.htm"TITLE="What if a Wildcard Doesn't Match? ">15.4</A>)</SPAN>.)</P><PCLASS="para">You may see different wildcarding if you buy a special-purposeshell that emulates another operating system (for example, a shellthat looks like DEC's DCL)-in this case, your shell will obey theother operating system's wildcard rules. But even in this case,operating system designers stick to a reasonably similar set ofwildcard rules.</P><PCLASS="para">The fact that the shell defines wildcards, rather than the filesystemitself or the program you're running, has some important implicationsfor a few commands.Most of the time, a program never sees wildcards.For example, typing:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>lpr *</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">is exactly the same as typing:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>lpr </B></CODE><CODECLASS="replaceable"><I>file1 file2 file3 file4 file5</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">In this case everything works as expected.But there are other situations in whichwildcards don't work at all.Assume you want to read some files from a tape, which requiresthe command<SPANCLASS="link"><EMCLASS="emphasis">tar&nbsp;x</EM> (<ACLASS="linkend"HREF="ch20_04.htm"TITLE="Restoring Files from Tape with tar ">20.4</A>)</SPAN>,so you type the command<CODECLASS="literal">tar&nbsp;x&nbsp;*.txt</CODE>.Will you be happy or disappointed?</P><PCLASS="para">You'll be disappointed&nbsp;- unless older versions of the files you wantare already in your<SPANCLASS="link">current directory (<ACLASS="linkend"HREF="ch01_21.htm"TITLE="Making Pathnames ">1.21</A>)</SPAN>.The shell expands the wildcard<CODECLASS="literal">*.txt</CODE>, according to what's in the current directory,<EMCLASS="emphasis">before it hands the completed command line over to tar forexecution</EM>. All<EMCLASS="emphasis">tar</EM> gets is a list of files. But you're probably not interestedin the current directory; you probably want the wildcard <CODECLASS="literal">*</CODE> tobe expanded on the tape, retrieving any <CODECLASS="literal">*.txt</CODE> files that thetape has.</P><PCLASS="para">There's a way to pass wildcards to programs, without having them interpretedby the shell.Simply put <CODECLASS="literal">*.txt</CODE> in<SPANCLASS="link">quotes (<ACLASS="linkend"HREF="ch08_14.htm"TITLE="Bourne Shell Quoting ">8.14</A>)</SPAN>.<ACLASS="indexterm"NAME="AUTOID-1814"></A><ACLASS="indexterm"NAME="AUTOID-1817"></A>The quotes prevent the UNIX shell from expanding the wildcard, passingit to the command unchanged. Programs that can beused in this way (like<SPANCLASS="link"><EMCLASS="emphasis">uucp</EM> and <EMCLASS="emphasis">rcp</EM> (<ACLASS="linkend"HREF="ch01_33.htm"TITLE="UNIX Networking and Communications ">1.33</A>)</SPAN>)know how to handlewildcards, obeying the same rules as the shell (in fact, these programsusually start a shell to interpret their arguments). You only need tomake sure that the programs see the wildcards, that they aren't stripped bythe shell before it passes the command line to the program.As a more generalrule, you should be aware of when and why a wildcard gets expanded,and you should know how to make sure that wildcards are expanded at anappropriate time.</P><BLOCKQUOTECLASS="note"><PCLASS="para"><STRONG>NOTE:</STRONG> <ACLASS="indexterm"NAME="AUTOID-1825"></A><ACLASS="indexterm"NAME="AUTOID-1828"></A>If your shell understands the<SPANCLASS="link"><CODECLASS="literal">{}</CODE> characters (<ACLASS="linkend"HREF="ch09_05.htm"TITLE="Build Strings with {&nbsp;} ">9.5</A>)</SPAN>,you can use them because they can generate any string&nbsp;- not just filenamesthat already exist.You have to type the unique part of each name, but you only have totype the common part once.For example, to extract the files called <EMCLASS="emphasis">project/wk9/summary</EM>,<EMCLASS="emphasis">project/wk14/summary</EM>, and <EMCLASS="emphasis">project/wk15/summary</EM> from a<EMCLASS="emphasis">tar</EM> tape, you might use:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>tar xv project/wk{9,14,15}/summary</B></CODE>x project/wk9/summary, 3161 bytes, 7 tape blocksx project/wk14/summary, 878 bytes, 2 tape blocksx project/wk15/summary, 2268 bytes, 5 tape blocks</PRE></BLOCKQUOTE></P></BLOCKQUOTE><PCLASS="para">Some versions of <EMCLASS="emphasis">tar</EM> understand wildcards, but many don't. There is a<SPANCLASS="link">clever workaround (<ACLASS="linkend"HREF="ch20_09.htm"TITLE="When a Program Doesn't Understand Wildcards ">20.9</A>)</SPAN>.</P><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">ML</SPAN></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch01_17.htm"TITLE="1.17 Filename Extensions "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 1.17 Filename Extensions "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch01_19.htm"TITLE="1.19 The Tree Structure of the Filesystem "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 1.19 The Tree Structure of the Filesystem "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">1.17 Filename Extensions </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">1.19 The Tree Structure of the Filesystem </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>