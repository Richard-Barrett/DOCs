<HTML><HEAD><TITLE>[Chapter 1] 1.28 Some Gotchas with Background Processing </TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:31:37Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch01_01.htm"TITLE="1. Introduction"><LINKREL="prev"HREF="ch01_27.htm"TITLE="1.27 How Background Processing Works "><LINKREL="next"HREF="ch01_29.htm"TITLE="1.29 When Is a File Not a File? "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch01_27.htm"TITLE="1.27 How Background Processing Works "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 1.27 How Background Processing Works "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 1<BR>Introduction</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch01_29.htm"TITLE="1.29 When Is a File Not a File? "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 1.29 When Is a File Not a File? "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-7730">1.28 Some Gotchas with Background Processing </A></H2><OLCLASS="orderedlist"><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-2378"></A>If you're using the Bourne shell, you have to watch out forputting a series of commands separated by<SPANCLASS="link">semicolons (<ACLASS="linkend"HREF="ch08_05.htm"TITLE="Command-Line Evaluation ">8.5</A>)</SPAN>into thebackground. The Bourne shell puts only the last command on theline into the background, but waits for the first.</P><PCLASS="para">An easy way to test this is with the following command line, whichwaits for 15 seconds, then does an <EMCLASS="emphasis">ls</EM>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <CODECLASS="userinput"><B>sleep 15; ls &amp;</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">In the Bourne shell, you won't get your prompt back until the<SPANCLASS="link"><EMCLASS="emphasis">sleep</EM> (<ACLASS="linkend"HREF="ch40_02.htm"TITLE="Waiting a Little While: sleep ">40.2</A>)</SPAN>command has finished.</P><PCLASS="para">The proper way to put a series of Bourne shell commands intothe background is to group them with parentheses:</P><PCLASS="para"><TABLECLASS="screen.co"BORDER="1"><TR><THVALIGN="TOP"><PRECLASS="calloutlist"><ACLASS="co"HREF="ch13_07.htm"TITLE="13.7 The () Subshell Operators ">( )</A> </PRE></TH><TDVALIGN="TOP"><PRECLASS="screen">$ <CODECLASS="userinput"><B>(sleep 15; ls)&amp;</B></CODE></PRE></TD></TR></TABLE></P><PCLASS="para">This may strike you as a defect, but in fact, it's a sign ofthe greater precision of Bourne shell syntax, which makes itsomewhat exasperating for interactive use, but much better forprogramming.</P></LI><LICLASS="listitem"><PCLASS="para">It doesn't make any sense to run an interactive program such asan editor in the background. For example, if you type this from the C shell:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>vi &amp;</B></CODE>[1] 3071</PRE></BLOCKQUOTE></P><PCLASS="para">you'll get a message like the following:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">[1]  + Stopped (tty output) vi</PRE></BLOCKQUOTE></P><PCLASS="para"><EMCLASS="emphasis">vi</EM> can be active only in the foreground. However, it does makesense to have <EMCLASS="emphasis">vi</EM><SPANCLASS="link">stopped (<ACLASS="linkend"HREF="ch12_08.htm"TITLE="Job Control in a Nutshell ">12.8</A>)</SPAN>in the background.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-2409"></A>If you are running <EMCLASS="emphasis">vi</EM> or any other interactive program, you can quickly getback to the shell by typing CTRL-z to stop the program.The shell will take control of your terminal and print another shell prompt.</P><PCLASS="para"><SPANCLASS="link">Stopping <EMCLASS="emphasis">vi</EM> (<ACLASS="linkend"HREF="ch12_04.htm"TITLE="Job Control and autowrite: Real Time Savers! ">12.4</A>)</SPAN>is more efficient than using its<SPANCLASS="link">shell escape mechanism (<ACLASS="linkend"HREF="ch30_26.htm"TITLE="Shell Escapes: Running One UNIX Command While Using Another">30.26</A>)</SPAN>,since it lets you go back to your original shell rather thanstarting a new one. Simply type <CODECLASS="literal">fg</CODE> to get back to where youwere in editing.</P></LI><LICLASS="listitem"><PCLASS="para">We have shared a system with new users who were overenthusiasticusers of background processes, rather like the man who loved lovingso much he sought many lovers. Because each background process iscompeting for the same resources, running many of themcan be a drain on the system. This means that everything takes longerfor everyone. We used to have people who thought that if they ranthree<SPANCLASS="link"><EMCLASS="emphasis">troff</EM> (<ACLASS="linkend"HREF="ch43_13.htm"TITLE="The Text Formatters nroff, troff, ditroff, ... ">43.13</A>)</SPAN>processes at once, they'd get their three files formatted faster thanif they did them one after another. Boy, were they mistaken.[4]</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[4] In the old days, UNIX systems gave all processes to a singleCPU. Modern UNIX systems can have multiple CPUs. On thesesystems, you may do several jobs almost as quickly as one.</P></BLOCKQUOTE></LI><LICLASS="listitem"><PCLASS="para">If you use the Bourne shell,any background processes you have running will normallybe terminated when you log out. To avoid this, use the<SPANCLASS="link"><EMCLASS="emphasis">nohup</EM> (<ACLASS="linkend"HREF="ch38_18.htm"TITLE="nohup ">38.18</A>)</SPAN><ACLASS="indexterm"NAME="AUTOID-2427"></A>command.</P></LI><LICLASS="listitem"><PCLASS="para">Not all processes are created equal. UNIX maintains a queueof processes ordered by priority. Foreground processes, suchas a user typing a command at a prompt, often receive higher priority thanbackground processes. However, youmay want to run background processes at an even lower priority, byusing<ACLASS="indexterm"NAME="AUTOID-2432"></A><SPANCLASS="link"><EMCLASS="emphasis">nice</EM> (<ACLASS="linkend"HREF="ch39_09.htm"TITLE='Know When to Be "nice&quot; to OTher Users...and WhenNot to'>39.9</A>)</SPAN>.This is a relatively painless way of being kind to other users&nbsp;- and makingyour foreground job run faster&nbsp;- though it will make your background tasks takea little longer.</P></LI></OL><ACLASS="indexterm"NAME="AUTOID-2437"></A><ACLASS="indexterm"NAME="AUTOID-2438"></A><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">TOR</SPAN>, <SPANCLASS="authorinitials">DD</SPAN></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch01_27.htm"TITLE="1.27 How Background Processing Works "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 1.27 How Background Processing Works "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch01_29.htm"TITLE="1.29 When Is a File Not a File? "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 1.29 When Is a File Not a File? "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">1.27 How Background Processing Works </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">1.29 When Is a File Not a File? </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>