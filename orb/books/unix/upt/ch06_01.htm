<HTML><HEAD><TITLE>[Chapter 6] Shell and Environment Variables</TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-10-23T15:37:54Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="part01.htm"TITLE="I. Making Yourself at Home "><LINKREL="prev"HREF="ch05_12.htm"TITLE="5.12 Initializing the Terminal with tput "><LINKREL="next"HREF="ch06_02.htm"TITLE="6.2 Parent-Child Relationships "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch05_12.htm"TITLE="5.12 Initializing the Terminal with tput "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 5.12 Initializing the Terminal with tput "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 6</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch06_02.htm"TITLE="6.2 Parent-Child Relationships "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 6.2 Parent-Child Relationships "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="CHAPTER"><H1CLASS="chapter"><ACLASS="title"NAME="UPT-CHP-6">6. Shell and Environment Variables</A></H1><DIVCLASS="htmltoc"><P><B>Contents:</B><BR><ACLASS="sect1"HREF="#UPT-ART-1170"TITLE="6.1 What Environment Variables Are Good For ">What Environment Variables Are Good For </A><BR><ACLASS="sect1"HREF="ch06_02.htm"TITLE="6.2 Parent-Child Relationships ">Parent-Child Relationships </A><BR><ACLASS="sect1"HREF="ch06_03.htm"TITLE="6.3 Predefined Environment Variables ">Predefined Environment Variables </A><BR><ACLASS="sect1"HREF="ch06_04.htm"TITLE="6.4 The PATH Environment Variable ">The PATH Environment Variable </A><BR><ACLASS="sect1"HREF="ch06_05.htm"TITLE="6.5 PATH and path ">PATH and path </A><BR><ACLASS="sect1"HREF="ch06_06.htm"TITLE="6.6 The TZ Environment Variable ">The TZ Environment Variable </A><BR><ACLASS="sect1"HREF="ch06_07.htm"TITLE="6.7 What Time Is It in Japan? ">What Time Is It in Japan? </A><BR><ACLASS="sect1"HREF="ch06_08.htm"TITLE="6.8 Shell Variables ">Shell Variables </A><BR><ACLASS="sect1"HREF="ch06_09.htm"TITLE="6.9 Special C Shell Variables ">Special C Shell Variables </A><BR><ACLASS="sect1"HREF="ch06_10.htm"TITLE="6.10 Running a Command with a Temporarily Different Environment ">Running a Command with a Temporarily Different Environment </A></P><P></P></DIV><DIVCLASS="sect1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-1170">6.1 What Environment Variables Are Good For </A></H2><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-5707"></A>Many UNIX utilities, including the shell, need information about you and what you're doing in order to do a reasonable job.</P><PCLASS="para">What kinds of information?Well, to start with, a lot of programs (particularly editors)need to know what kind of terminal you're using. The shell needs toknow where any commands you want to use are likely to be found. Lotsof UNIX programs (like mail programs)include a command to start an editor as a subprocess;they like to know your favorite editor. And so on.</P><PCLASS="para">Of course, one could always write programs that made you put all thisinformation on the command line. For example, you might have to typecommands like:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>mail -editor vi -term aardvark48 -favoritecolor blue_no_red</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">But your favorite editor probably doesn't change every day. (Nor willyour favorite color.) The terminal you use may change frequently, butit certainly won't change from the time you log in until the time youlog out. And you certainly wouldn't want to type something like thiswhenever you want to send mail.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-5717"></A>Rather than forcing you to type this information with every command,UNIX uses <EMCLASS="emphasis">environment variables</EM> to store information that you'drather not worry about.For example, the <SPANCLASS="link"><EMCLASS="emphasis">TERM</EM> (<ACLASS="linkend"HREF="ch05_10.htm"TITLE="Finding What Terminal Names You Can Use ">5.10</A>)</SPAN>environment variable tells programs what kind ofterminal you're using. Any programs that care about your terminaltype know (or ought to know) that they can read this variable, find out your terminaltype, and act accordingly.</P><PCLASS="para">Similarly, the directories that store the commands you wantto execute are listed in the <SPANCLASS="link"><EMCLASS="emphasis">PATH</EM> (<ACLASS="linkend"HREF="ch06_04.htm"TITLE="The PATH Environment Variable ">6.4</A>)</SPAN><ACLASS="indexterm"NAME="AUTOID-5725"></A>variable. When you type a command,your shell looks through each directory in your <EMCLASS="emphasis">PATH</EM> variable to findthat command. Presumably, UNIX wouldn't need a <EMCLASS="emphasis">PATH</EM> variable if all commands were located in the same directory; but you'll soon bewriting your own commands (if you aren't already), and storing them inyour own<SPANCLASS="link">&quot;private&quot; command directories (<ACLASS="linkend"HREF="ch04_02.htm"TITLE="A bin Directory for Your Programs and Scripts ">4.2</A>)</SPAN>,and you'll need to tell the shell<SPANCLASS="link">how to find them (<ACLASS="linkend"HREF="ch08_07.htm"TITLE="Setting Your Search Path ">8.7</A>)</SPAN>.</P><TABLECLASS="para.programreference"BORDER="1"><TR><THVALIGN="TOP"><ACLASS="xref.warning"HREF="ch06_02.htm"TITLE="6.2 Parent-Child Relationships ">Warning!</A> </TH><TDVALIGN="TOP">Environment variables are managed by your shell. The differencebetween environment variables and regular <SPANCLASS="link">shell variables (<ACLASS="linkend"HREF="ch06_08.htm"TITLE="Shell Variables ">6.8</A>)</SPAN>is that a shell variable is local to a particular instance of the shell(such as a shell script), while environment variables are &quot;inherited&quot;by any program you start, including<SPANCLASS="link">another shell (<ACLASS="linkend"HREF="ch38_04.htm"TITLE="Subshells ">38.4</A>)</SPAN>.That is, the newprocess gets its own copy of these variables, which it can read,modify, and pass on in turn to its own children.In fact, every UNIX process (not just the shell) passes its environmentvariables to its child processes.</TD></TR></TABLE><PCLASS="para">You can set environment variables with a command like this:</P><PCLASS="para"><TABLECLASS="screen.co"BORDER="1"><TR><THVALIGN="TOP"><PRECLASS="calloutlist">&#13;<ACLASS="co"HREF="ch08_05.htm"TITLE="8.5 Command-Line Evaluation ">;</A> &#13;</PRE></TH><TDVALIGN="TOP"><PRECLASS="screen">% <CODECLASS="userinput"><B>setenv </B></CODE><CODECLASS="replaceable"><I>NAME value   </I></CODE><EMCLASS="emphasis">C shell</EM>$ <CODECLASS="replaceable"><I>NAME</I></CODE><CODECLASS="userinput"><B>=</B></CODE><CODECLASS="replaceable"><I>value</I></CODE><CODECLASS="userinput"><B>; export </B></CODE><CODECLASS="replaceable"><I>NAME   </I></CODE><EMCLASS="emphasis">Bourne or Korn shell</EM>&#13;</PRE></TD></TR></TABLE></P><PCLASS="para">There's nothing particularly special about the <EMCLASS="emphasis">NAME</EM>; you can createenvironment variables with any names you want. Of course, thesedon't necessarily do anything for you; variables like <EMCLASS="emphasis">PATH</EM> and <EMCLASS="emphasis">TERM</EM>are important because lots of programs have<SPANCLASS="link">&quot;agreed&quot; (<ACLASS="linkend"HREF="ch06_03.htm"TITLE="Predefined Environment Variables ">6.3</A>)</SPAN>that these namesare important. But if you want to create an environment variable thatholds the name of your lover, that's your business:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>setenv LOVER Judy</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">If you're so inclined, you could write a program called<EMCLASS="emphasis">valentine</EM> that reads the <EMCLASS="emphasis">LOVER</EM> environment variable and generates anappropriate message. If you like short-term relationships or tend toforget names, this might even be convenient!</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-5761"></A>By convention, the names of environment variables use all uppercase letters. There's nothing to enforce this convention&nbsp;- if you're makingyour own names, you can use any capitalization you please. Butthere's no advantage to violating the convention, either. Theenvironment variables that are used by standard UNIX programs all haveuppercase names.[I usually make my shell variable names lowercase so it's easy totell the difference. <EMCLASS="emphasis">-JP</EM>&nbsp;]</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-5766"></A><ACLASS="indexterm"NAME="AUTOID-5768"></A><ACLASS="indexterm"NAME="AUTOID-5770"></A>If you want the C shell to forget that an environment variable everexisted, use the command <EMCLASS="emphasis">unsetenv&nbsp;NAME</EM>.(Some Bourne shells, but not all, have a similar command:<EMCLASS="emphasis">unset&nbsp;NAME</EM>.)</P><TABLECLASS="para.programreference"BORDER="1"><TR><THVALIGN="TOP"><ACLASS="programreference"HREF="examples/index.htm"TITLE="printenv">printenv</A><BR><ACLASS="programreference"HREF="examples/index.htm"TITLE="env">env</A><BR></TH><TDVALIGN="TOP">&#13;If you want to list all of your environment variables, use<EMCLASS="emphasis">printenv</EM> or <EMCLASS="emphasis">env</EM>.(Both are on the CD-ROM.)The <EMCLASS="emphasis">printenv</EM> command also lets you ask about a particular variable.Here's a typical report:</TD></TR></TABLE><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>printenv EDITOR</B></CODE>EDITOR=/usr/local/bin/emacs% <CODECLASS="userinput"><B>printenv</B></CODE>HOME=/home/los/mikelSHELL=/bin/cshTERM=sunUSER=mikelPATH=/usr/local/bin:/usr/ucb:/bin:/usr/bin:.:/home/los/mikel/binLOGNAME=mikelPWD=/home/los/mikel/power/articlesPRINTER=psEDITOR=/usr/local/bin/emacs</PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-5785"></A>The <SPANCLASS="link"><EMCLASS="emphasis">set</EM> (<ACLASS="linkend"HREF="ch06_08.htm"TITLE="Shell Variables ">6.8</A>)</SPAN>command provides a similar listing of shell variables.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-5791"></A>You can also use the<SPANCLASS="link"><EMCLASS="emphasis">echo</EM> (<ACLASS="linkend"HREF="ch08_06.htm"TITLE="Output Command-Line Arguments ">8.6</A>)</SPAN>command to show the value of a particularvariable, preceding the variable name with a dollar sign (which tellsthe shell to substitute the value of the variable):</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>echo $TERM</B></CODE>xterm</PRE></BLOCKQUOTE></P><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">ML</SPAN></P></DIV></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch05_12.htm"TITLE="5.12 Initializing the Terminal with tput "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 5.12 Initializing the Terminal with tput "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch06_02.htm"TITLE="6.2 Parent-Child Relationships "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 6.2 Parent-Child Relationships "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">5.12 Initializing the Terminal with tput </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">6.2 Parent-Child Relationships </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>