<HTML><HEAD><TITLE>[Chapter 8] 8.5 Command-Line Evaluation </TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:34:11Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch08_01.htm"TITLE="8. How the Shell Interprets What You Type"><LINKREL="prev"HREF="ch08_04.htm"TITLE="8.4 Command Evaluation and Accidentally Overwriting Files"><LINKREL="next"HREF="ch08_06.htm"TITLE="8.6 Output Command-Line Arguments "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch08_04.htm"TITLE="8.4 Command Evaluation and Accidentally Overwriting Files"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 8.4 Command Evaluation and Accidentally Overwriting Files"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 8<BR>How the Shell Interprets What You Type</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch08_06.htm"TITLE="8.6 Output Command-Line Arguments "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 8.6 Output Command-Line Arguments "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-1850">8.5 Command-Line Evaluation </A></H2><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-7596"></A><ACLASS="indexterm"NAME="AUTOID-7599"></A>With all the different substitution mechanisms available in theC shell, it's important to know which take precedence.Here's the order in which the C shell interprets the command line:</P><OLCLASS="orderedlist"><LICLASS="listitem"><PCLASS="para">History substitution</P></LI><LICLASS="listitem"><PCLASS="para">Splitting words (including special characters)</P></LI><LICLASS="listitem"><PCLASS="para">Updating the history list</P></LI><LICLASS="listitem"><PCLASS="para">Interpreting single quotes (<CODECLASS="literal">'</CODE>) and double quotes (<CODECLASS="literal">&quot;</CODE>)</P></LI><LICLASS="listitem"><PCLASS="para">Alias substitution</P></LI><LICLASS="listitem"><PCLASS="para">Redirection of input and output ( e.g., <CODECLASS="literal">&gt;</CODE>, <CODECLASS="literal">&lt;</CODE>, and <CODECLASS="literal">|</CODE>)</P></LI><LICLASS="listitem"><PCLASS="para">Variable substitution</P></LI><LICLASS="listitem"><PCLASS="para">Command substitution</P></LI><LICLASS="listitem"><PCLASS="para">Filename expansion</P></LI></OL><PCLASS="para">(The Bourne shell is essentially the same, except that it doesn'tperform history substitution or alias substitution.)</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-7628"></A>History substitutions are always done first. That'swhy quotes won't protect a <CODECLASS="literal">!</CODE> from the shell; the shell sees theexclamation point and substitutes a command from the history beforeit's even thought about the quotation marks.To prevent history substitution, you need to<ACLASS="indexterm"NAME="AUTOID-7631"></A><SPANCLASS="link">use a backslash (<ACLASS="linkend"HREF="ch08_15.htm"TITLE="Differences Between Bourne and C Shell Quoting ">8.15</A>)</SPAN>.</P><PCLASS="para">Let's work through a simple command line that uses several of thesefeatures.Nothing in this command line will be difficult, but it willgive you a feeling for what we mean by saying that &quot;the shell performsvariable substitution after alias substitution.&quot;Here's the command line; it has both space and TAB characters:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>ls -l    $HOME/* |     grep &quot;Mar  7&quot;</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">And here's what happens:</P><OLCLASS="orderedlist"><LICLASS="listitem"><PCLASS="para">There are no history operators, so<SPANCLASS="link">history substitution (<ACLASS="linkend"HREF="ch11_02.htm"TITLE="History in a Nutshell ">11.2</A>)</SPAN>doesn't happen.(The Bourne shell wouldn't perform this step.)</P></LI><LICLASS="listitem"><PCLASS="para">The command line is split into separate &quot;words&quot; at the whitespace characters.The words are <CODECLASS="literal">ls</CODE>, <CODECLASS="literal">-l</CODE>,<CODECLASS="literal">$HOME/*</CODE>, <CODECLASS="literal">|</CODE>, <CODECLASS="literal">grep</CODE>, and <CODECLASS="literal">&quot;Mar&nbsp;&nbsp;7&quot;</CODE>.The shell ignores the amount of whitespace (spaces and TABs)between different wordsin a command line.Any unquoted whitespace creates a new word.The shell doesn't do anything special with options (like <CODECLASS="literal">-l</CODE>).Options are passed to the command being run, just like any other word;[2]the command decides how to interpret them.Also, notethat<SPANCLASS="link">quotes (<ACLASS="linkend"HREF="ch08_14.htm"TITLE="Bourne Shell Quoting ">8.14</A>)</SPAN>prevent the shell from splitting <CODECLASS="literal">&quot;Mar&nbsp;&nbsp;7&quot;</CODE> into two wordsor eating the two spaces&nbsp;- even though quote interpretation comes later.[3]At this point, thecommand line looks like this:</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[2] The convention of starting options with a dash (<CODECLASS="literal">-</CODE>) is justthat: a convention.Although option handling is being<SPANCLASS="link">standardized (<ACLASS="linkend"HREF="ch44_18.htm"TITLE="Standard Command-Line Parsing ">44.18</A>)</SPAN>,each command can interpret its options any way it wants to.</P><PCLASS="para">[3] In an <EMCLASS="emphasis">ls -l</EM> listing, dates less than 10 have two spaces beforethem (they're printed in a field 2 characters wide).</P></BLOCKQUOTE><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">ls -l $HOME/* | grep &quot;Mar  7&quot;</PRE></BLOCKQUOTE></P><PCLASS="para"></P></LI><LICLASS="listitem"><PCLASS="para">The shell sticks the command line onto the history list.The Bourne shellwouldn't perform this step, either.</P></LI><LICLASS="listitem"><PCLASS="para">The shell recognizes the double quotes around <CODECLASS="literal">&quot;Mar&nbsp;&nbsp;7&quot;</CODE> and notes thatwildcard expansion (yet to come) shouldn't take place inside the quotes.</P></LI><LICLASS="listitem"><PCLASS="para">The shell checks whether or not <CODECLASS="literal">ls</CODE> or <CODECLASS="literal">grep</CODE> are<SPANCLASS="link">aliases (<ACLASS="linkend"HREF="ch10_02.htm"TITLE="Aliases for Common Commands ">10.2</A>)</SPAN>.They could be, but we're assuming they aren't.</P></LI><LICLASS="listitem"><PCLASS="para">The shell notices the <CODECLASS="literal">|</CODE>, and does<SPANCLASS="link">whatever's required (<ACLASS="linkend"HREF="ch13_01.htm#UPT-ART-1023"TITLE="Using Standard Input and Output">13.1</A>)</SPAN>to set up apipeline.</P></LI><LICLASS="listitem"><PCLASS="para">The shell notices the<SPANCLASS="link">environment variable (<ACLASS="linkend"HREF="ch06_01.htm#UPT-ART-1170"TITLE="What Environment Variables Are Good For ">6.1</A>)</SPAN><CODECLASS="literal">$HOME</CODE>,and replaces thisvariable with its value (<CODECLASS="literal">/home/mikel</CODE>).At this point, thecommand line looks like:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">ls -l /home/mikel/* | grep &quot;Mar  7&quot;</PRE></BLOCKQUOTE></P><PCLASS="para"></P></LI><LICLASS="listitem"><PCLASS="para">The shell looks for<SPANCLASS="link">backquotes (<ACLASS="linkend"HREF="ch09_16.htm"TITLE="Command Substitution ">9.16</A>)</SPAN>,executes any command inside thebackquotes, and inserts its output on the command line. In this case,there's nothing to do.(If there are wildcards or variables inside the backquotes, they aren'tinterpreted before the shell runs the command inside the backquotes.)</P></LI><LICLASS="listitem"><PCLASS="para">The shell looks for<SPANCLASS="link">wildcards (<ACLASS="linkend"HREF="ch01_16.htm"TITLE="Wildcards ">1.16</A>)</SPAN>.In this case, it sees the <CODECLASS="literal">*</CODE> andexpands the filename accordingly, leaving something like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">ls -l /home/mikel/ax ... /home/mikel/zip | grep &quot;Mar  7&quot;</PRE></BLOCKQUOTE></P><PCLASS="para"></P></LI><LICLASS="listitem"><PCLASS="para">The shell executes the <EMCLASS="emphasis">ls</EM> command, executes the <EMCLASS="emphasis">grep</EM>command, with the aforementioned pipe sending the <EMCLASS="emphasis">ls</EM> outputinto <EMCLASS="emphasis">grep</EM>'s input.</P></LI></OL><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-7704"></A><ACLASS="indexterm"NAME="AUTOID-7707"></A>One character you'll see often on command lines is <CODECLASS="literal">;</CODE>(semicolon).It's used as a command separator:type one complete command line&nbsp;- then, instead of pressing RETURN, typea semicolon and another complete command line.Chaining commands with semicolons is especially useful in<SPANCLASS="link">subshells (<ACLASS="linkend"HREF="ch13_07.htm"TITLE="The () Subshell Operators ">13.7</A>)</SPAN>,aliases,and<SPANCLASS="link">lists (<ACLASS="linkend"HREF="ch13_08.htm"TITLE="Using {list} to Group Bourne Shell Commands ">13.8</A>)</SPAN>-this book has lots of examples&nbsp;- in articles<ACLASS="xref"HREF="ch40_02.htm"TITLE="Waiting a Little While: sleep ">40.2</A>and<ACLASS="xref"HREF="ch10_02.htm"TITLE="Aliases for Common Commands ">10.2</A>,for instance.There's more about command-line interpretation in the articles on<SPANCLASS="link">wildcards inside aliases (<ACLASS="linkend"HREF="ch08_09.htm"TITLE="Wildcards Inside of Aliases ">8.9</A>)</SPAN>,<SPANCLASS="link"><EMCLASS="emphasis">eval</EM> (<ACLASS="linkend"HREF="ch08_10.htm"TITLE="eval: When You Need Another Chance ">8.10</A>)</SPAN>,<SPANCLASS="link">conditional execution (<ACLASS="linkend"HREF="ch44_09.htm"TITLE="Testing Your Success ">44.9</A>)</SPAN>,and many others.[For some nitty-gritty details about the C shell that are fun, too,I recommend Chris Torek's article<ACLASS="xref"HREF="ch08_12.htm"TITLE="Which One Will the C Shell Use? ">8.12</A>.-<EMCLASS="emphasis">JP</EM>&nbsp;]</P><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">DG</SPAN>, <SPANCLASS="authorinitials">ML</SPAN></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch08_04.htm"TITLE="8.4 Command Evaluation and Accidentally Overwriting Files"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 8.4 Command Evaluation and Accidentally Overwriting Files"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch08_06.htm"TITLE="8.6 Output Command-Line Arguments "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 8.6 Output Command-Line Arguments "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">8.4 Command Evaluation and Accidentally Overwriting Files</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">8.6 Output Command-Line Arguments </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>