<HTML><HEAD><TITLE>[Chapter 8] 8.6 Output Command-Line Arguments </TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:34:14Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch08_01.htm"TITLE="8. How the Shell Interprets What You Type"><LINKREL="prev"HREF="ch08_05.htm"TITLE="8.5 Command-Line Evaluation "><LINKREL="next"HREF="ch08_07.htm"TITLE="8.7 Setting Your Search Path "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch08_05.htm"TITLE="8.5 Command-Line Evaluation "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 8.5 Command-Line Evaluation "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 8<BR>How the Shell Interprets What You Type</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch08_07.htm"TITLE="8.7 Setting Your Search Path "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 8.7 Setting Your Search Path "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-7911">8.6 Output Command-Line Arguments </A></H2><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-7726"></A><ACLASS="indexterm"NAME="AUTOID-7729"></A>The <EMCLASS="emphasis">echo</EM> command writes its command-line arguments and a newlineto the standard output.Shell scripts use <EMCLASS="emphasis">echo</EM> for sending text to the terminal, downa pipe, and into a file.You can use <EMCLASS="emphasis">echo</EM> on the command line to show the value of a<SPANCLASS="link">variable (<ACLASS="linkend"HREF="ch06_01.htm#UPT-ART-1170"TITLE="What Environment Variables Are Good For ">6.1</A>, <ACLASS="linkend"HREF="ch06_08.htm"TITLE="Shell Variables ">6.8</A>)</SPAN>,to see how filename wildcards will expand without doing anything else tothose files, or<SPANCLASS="link">to check quoting (<ACLASS="linkend"HREF="ch46_02.htm"TITLE="Quoting Trouble?  Think, Then Use echo ">46.2</A>)</SPAN>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>echo &quot;USER is $USER.&quot;</B></CODE>USER is jerry.% <CODECLASS="userinput"><B>echo &quot;All 'a' files are:    &quot; a*</B></CODE>All 'a' files are:     abacus apple axes</PRE></BLOCKQUOTE></P><PCLASS="para">The <EMCLASS="emphasis">printf</EM> command gives you more formatting control.</P><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="UPT-ART-7911-SECT-1.1">8.6.1 Portability </A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-7746"></A>The C shell and most other newer shells have aversion of <EMCLASS="emphasis">echo</EM> that's<SPANCLASS="link">built in (<ACLASS="linkend"HREF="ch01_10.htm"TITLE="Internal and External Commands ">1.10</A>)</SPAN>so it's faster.</P><PCLASS="para">The original <EMCLASS="emphasis">echo</EM>, and the <EMCLASS="emphasis">csh</EM> echo which acts like it,have just one option.The <EMCLASS="emphasis">-n</EM> option tells<EMCLASS="emphasis">echo</EM> not to print a newline after the message.Shell scripts use <EMCLASS="emphasis">-n</EM> to send a question to a user and leave thecursor at the end of the message:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">echo -n &quot;Enter your name: &quot;</PRE></BLOCKQUOTE></P><PCLASS="para">(The space at the end makes the prompt look better.The quotes make the shell pass that space on to <EMCLASS="emphasis">echo</EM>.)</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-7762"></A><ACLASS="indexterm"NAME="AUTOID-7765"></A><ACLASS="indexterm"NAME="AUTOID-7768"></A>Newer versions of <EMCLASS="emphasis">echo</EM> check their arguments for a backslash (<CODECLASS="literal">\</CODE>).This marks the start of an <EMCLASS="emphasis">escape sequence</EM>, a characterthat the backslash and the next letter stand for.For example, when these newer <EMCLASS="emphasis">echo</EM>s see <CODECLASS="literal">\n</CODE>, they printa newline character:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <CODECLASS="userinput"><B>echo &quot;1.\n2.\n3.&quot;</B></CODE>1.2.3.$</PRE></BLOCKQUOTE></P><PCLASS="para">In this version of <EMCLASS="emphasis">echo</EM>, a <CODECLASS="literal">\c</CODE> at the end of the last argument suppressesthe newline&nbsp;- like the <EMCLASS="emphasis">-n</EM> option does in the other <EMCLASS="emphasis">echo</EM>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">echo &quot;Enter your name: \c&quot;</PRE></BLOCKQUOTE></P><PCLASS="para">Your online <EMCLASS="emphasis">echo</EM> (or <EMCLASS="emphasis">csh</EM>) manual pageshould tell you which version you haveand list any escape sequences.</P><PCLASS="para">The problem with this newer <EMCLASS="emphasis">echo</EM> is thatit's tough to <EMCLASS="emphasis">echo</EM> an arbitrary string that might have a backslashin it.<ACLASS="indexterm"NAME="AUTOID-7792"></A>Chris Torek has a workaround: use a<SPANCLASS="link">here-document (<ACLASS="linkend"HREF="ch08_18.htm"TITLE="Here Documents ">8.18</A>)</SPAN>and<SPANCLASS="link"><EMCLASS="emphasis">cat</EM> (<ACLASS="linkend"HREF="ch25_02.htm"TITLE="Four Ways to Skin a cat ">25.2</A>)</SPAN>instead of <EMCLASS="emphasis">echo</EM>.  For example:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">cat &lt;&lt; ENDThe answer is: $<CODECLASS="replaceable"><I>variable-whose-value-might-contain-backslashes</I></CODE>END</PRE></BLOCKQUOTE></P><PCLASS="para">&#13;<EMCLASS="emphasis">bash</EM> users are lucky:That shell's <EMCLASS="emphasis">echo</EM> has a <EMCLASS="emphasis">-e</EM> option that enables backslashinterpretation, and a <EMCLASS="emphasis">-E</EM> option that disables it.</P><TABLECLASS="para.programreference"BORDER="1"><TR><THVALIGN="TOP"><ACLASS="programreference"HREF="examples/index.htm"TITLE="printf">printf</A><BR></TH><TDVALIGN="TOP">&#13;Another utility called <EMCLASS="emphasis">printf</EM> works like the <EMCLASS="emphasis">printf(3)</EM>routine in the C language; it handles escape sequences, lets you setfield widths, and more.(The GNU version is on the CD-ROM.)Here's an example.<ACLASS="indexterm"NAME="AUTOID-7810"></A><ACLASS="indexterm"NAME="AUTOID-7812"></A>The <EMCLASS="emphasis">wc</EM>command gives the number of lines, words, and characters in a file,followed by the filename.We pass those four fields in the <EMCLASS="emphasis">wc</EM> output to the <EMCLASS="emphasis">printf</EM>command line with<SPANCLASS="link">backquotes (<ACLASS="linkend"HREF="ch09_16.htm"TITLE="Command Substitution ">9.16</A>)</SPAN>.(If you need a reminder of <EMCLASS="emphasis">wc</EM>'s output, see article<ACLASS="xref"HREF="ch29_06.htm"TITLE="Counting Lines, Words, and Characters: wc ">29.6</A>.)<EMCLASS="emphasis">printf</EM> takes a formatting command from its first argument.It outputs the fourth argument after that (<CODECLASS="literal">%4$s</CODE>, the filename);the number of words from the second argument, in a field five wide withleading zeroes (<CODECLASS="literal">%2$05s</CODE>); and the number of lines from the firstargument (<CODECLASS="literal">%1$s</CODE>); with a newline (<CODECLASS="literal">\n</CODE>) to finish the line:</TD></TR></TABLE><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <CODECLASS="userinput"><B>printf 'The %4$s file has %2$05s words on %1$s lines.\n' `wc count`</B></CODE>The count file has 00235 words on 42 lines.</PRE></BLOCKQUOTE></P><PCLASS="para">Because <EMCLASS="emphasis">printf</EM> isn't built into any shells I know of, it's moreportable than the crazy set of <EMCLASS="emphasis">echo</EM>s.If we had <EMCLASS="emphasis">printf</EM> and the old <EMCLASS="emphasis">echo</EM>, life would be easier.Article<ACLASS="xref"HREF="ch46_10.htm"TITLE="A Portable echo Command ">46.10</A>shows a way to make <EMCLASS="emphasis">echo</EM> portable.</P><PCLASS="para">The C shell <EMCLASS="emphasis">echo</EM> works differently from other versions.For example, to make an empty line with the standard <EMCLASS="emphasis">echo</EM>, don't give<ACLASS="indexterm"NAME="AUTOID-7838"></A><ACLASS="indexterm"NAME="AUTOID-7841"></A><ACLASS="indexterm"NAME="AUTOID-7844"></A>any arguments. (This is usually done for readability&nbsp;- to put blank lines between other output.)Standard <EMCLASS="emphasis">echo</EM> will just print a newline:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <CODECLASS="userinput"><B>echo</B></CODE>$</PRE></BLOCKQUOTE></P><PCLASS="para">Without arguments, the C shell <EMCLASS="emphasis">echo</EM> doesn't print the newline.To get a newline, you have to give an empty argument:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>echo &quot;&quot;</B></CODE>%</PRE></BLOCKQUOTE></P><PCLASS="para">To use the standard <EMCLASS="emphasis">echo</EM> from the C shell, type <EMCLASS="emphasis">/bin/echo</EM> instead.</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="UPT-ART-7911-SECT-1.2">8.6.2 Making Error Messages </A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-7862"></A><ACLASS="indexterm"NAME="AUTOID-7865"></A><EMCLASS="emphasis">echo</EM> writes to standard output.Error messages in shell scripts should be written to the standard errorso that<SPANCLASS="link">redirection (<ACLASS="linkend"HREF="ch13_01.htm#UPT-ART-1023"TITLE="Using Standard Input and Output">13.1</A>)</SPAN>of standard output doesn't accidentally capture the message.The Bourne shell<SPANCLASS="link"><CODECLASS="literal">1&gt;&amp;2</CODE> operator (<ACLASS="linkend"HREF="ch45_21.htm"TITLE="n&gt;&amp;m: Swap Standard Output and Standard Error ">45.21</A>)</SPAN>will move <EMCLASS="emphasis">echo</EM>'s output to standard error:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">echo &quot;progname: choke wheeze complain&quot; 1&gt;&amp;2</PRE></BLOCKQUOTE></P><PCLASS="para">The C shell can't do that&nbsp;- which is another reason<SPANCLASS="link">not to write shell scripts with <EMCLASS="emphasis">csh</EM> (<ACLASS="linkend"HREF="ch47_02.htm"TITLE="C Shell Programming Considered Harmful ">47.2</A>)</SPAN>.</P></DIV><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">JP</SPAN></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch08_05.htm"TITLE="8.5 Command-Line Evaluation "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 8.5 Command-Line Evaluation "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch08_07.htm"TITLE="8.7 Setting Your Search Path "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 8.7 Setting Your Search Path "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">8.5 Command-Line Evaluation </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">8.7 Setting Your Search Path </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>