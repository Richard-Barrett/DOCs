<HTML><HEAD><TITLE>[Chapter 8] 8.10 eval: When You Need Another Chance </TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:34:24Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch08_01.htm"TITLE="8. How the Shell Interprets What You Type"><LINKREL="prev"HREF="ch08_09.htm"TITLE="8.9 Wildcards Inside of Aliases "><LINKREL="next"HREF="ch08_11.htm"TITLE="8.11 Which One Will bash Use? "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch08_09.htm"TITLE="8.9 Wildcards Inside of Aliases "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 8.9 Wildcards Inside of Aliases "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 8<BR>How the Shell Interprets What You Type</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch08_11.htm"TITLE="8.11 Which One Will bash Use? "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 8.11 Which One Will bash Use? "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-6840">8.10 eval: When You Need Another Chance </A></H2><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-8088"></A><ACLASS="indexterm"NAME="AUTOID-8091"></A>If you read the<SPANCLASS="link">previous article (<ACLASS="linkend"HREF="ch08_09.htm"TITLE="Wildcards Inside of Aliases ">8.9</A>)</SPAN>,you saw that, most of the time, theshell evaluates the command line &quot;in the right order.&quot; But what aboutwhen it doesn't? Here's a situation that the shell can't handle.It's admittedly contrived, but not too different from what you mightfind in a<SPANCLASS="link">shell program (<ACLASS="linkend"HREF="ch01_05.htm"TITLE="Anyone Can Program the Shell ">1.5</A>)</SPAN>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>set b=\$a</B></CODE>% <CODECLASS="userinput"><B>set a=foo</B></CODE>% <CODECLASS="userinput"><B>echo $b</B></CODE>$a</PRE></BLOCKQUOTE></P><PCLASS="para">When we use the variable <CODECLASS="literal">$b</CODE>, we'd like to get the variable<CODECLASS="literal">$a</CODE>, read it, and use its value. But that doesn't happen.Variable substitution happens once, and it isn't recursive. The valueof <CODECLASS="literal">$b</CODE> is <CODECLASS="literal">$a</CODE>, and that's it. You don't go any further.</P><PCLASS="para">But there's a loophole. The <EMCLASS="emphasis">eval</EM> command says, in essence,&quot;Give me another chance. Re-evaluate this line and execute it.&quot;Here's what happens if we stick <EMCLASS="emphasis">eval</EM> before the <EMCLASS="emphasis">echo</EM>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>eval echo $b</B></CODE>foo</PRE></BLOCKQUOTE></P><PCLASS="para">The shell converts <CODECLASS="literal">$b</CODE> into <CODECLASS="literal">$a</CODE>; then <EMCLASS="emphasis">eval</EM> runs through thecommand-line evaluation process again, converting <CODECLASS="literal">echo</CODE>&nbsp;<CODECLASS="literal">$a</CODE> into <CODECLASS="literal">echo</CODE>&nbsp;<CODECLASS="literal">foo</CODE>-which is what we wanted in the first place!</P><PCLASS="para">Here's a more realistic example; you see code like this fairly oftenin Bourne shell scripts:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">...command='grep $grepopts $searchstring $file'for optdo   case &quot;$opt&quot; in      file) output=' &gt; $ofile' ;;      read) output=' | more'   ;;      sort) postproc=' | sort $sortopts';;   esacdone...eval $command $postproc $output</PRE></BLOCKQUOTE></P><PCLASS="para">Do you see what's happening? We're constructing a command that willlook something like:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">grep $grepopts $searchstring $file | sort $sortopts &gt; $ofile</PRE></BLOCKQUOTE></P><PCLASS="para">But the entire command is &quot;hidden&quot; in shell variables, including theI/O redirectors and various options. If the <EMCLASS="emphasis">eval</EM> isn't there,this command will blow up in all sorts of bizarre ways. You'll seemessages like <CODECLASS="literal">| not found</CODE>, because variable expansion occurs afteroutput redirection. The &quot;nested&quot; variables (like <CODECLASS="literal">$ofile</CODE>, which isused inside of <CODECLASS="literal">$output</CODE>) won't be expanded either, so you'll also see<CODECLASS="literal">$ofile not found</CODE>.Putting an <EMCLASS="emphasis">eval</EM> in front of the command forces the shell toprocess the line again, guaranteeing that the variables will beexpanded properly and that I/O redirection will take place.</P><PCLASS="para"><EMCLASS="emphasis">eval</EM> is incredibly useful if you have shell variables thatinclude other shell variables, shell variables that include aliases,shell variables that include I/O redirectors, or all sorts of perversities. It's commonly used within shellscripts to &quot;evaluate&quot; commands that are built during execution.There are more examples of <EMCLASS="emphasis">eval</EM> in articles<ACLASS="xref"HREF="ch05_04.htm"TITLE="Setting the TERMCAP Variable with tset ">5.4</A>,<ACLASS="xref"HREF="ch10_07.htm"TITLE="How to Put if-then-else in a C Shell Alias ">10.7</A>,<ACLASS="xref"HREF="ch10_10.htm"TITLE="Simulated Bourne Shell Functions and Aliases ">10.10</A>,<ACLASS="xref"HREF="ch45_17.htm"TITLE="Making a for Loop with Multiple Variables ">45.17</A>,<ACLASS="xref"HREF="ch45_34.htm"TITLE="Arrays in the Bourne Shell ">45.34</A>,<ACLASS="xref"HREF="ch46_03.htm"TITLE="Bourne Shell Debugger Shows a Shell Variable ">46.3</A>,and others.</P><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">ML</SPAN></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch08_09.htm"TITLE="8.9 Wildcards Inside of Aliases "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 8.9 Wildcards Inside of Aliases "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch08_11.htm"TITLE="8.11 Which One Will bash Use? "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 8.11 Which One Will bash Use? "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">8.9 Wildcards Inside of Aliases </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">8.11 Which One Will bash Use? </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>