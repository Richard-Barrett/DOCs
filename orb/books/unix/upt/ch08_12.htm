<HTML><HEAD><TITLE>[Chapter 8] 8.12 Which One Will the C Shell Use? </TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:34:26Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch08_01.htm"TITLE="8. How the Shell Interprets What You Type"><LINKREL="prev"HREF="ch08_11.htm"TITLE="8.11 Which One Will bash Use? "><LINKREL="next"HREF="ch08_13.htm"TITLE='8.13 Is It "2&gt;&amp;1 file&quot; or "&gt; file 2&gt;&amp;1&quot;? Why?'></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch08_11.htm"TITLE="8.11 Which One Will bash Use? "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 8.11 Which One Will bash Use? "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 8<BR>How the Shell Interprets What You Type</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch08_13.htm"TITLE='8.13 Is It "2&gt;&amp;1 file&quot; or "&gt; file 2&gt;&amp;1&quot;? Why?'><IMGSRC="../gifs/txtnexta.gif"ALT='Next: 8.13 Is It "2&gt;&amp;1 file&quot; or "&gt; file 2&gt;&amp;1&quot;? Why?'BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-6060">8.12 Which One Will the C Shell Use? </A></H2><PCLASS="para">[Article<ACLASS="xref"HREF="ch08_11.htm"TITLE="Which One Will bash Use? ">8.11</A><ACLASS="indexterm"NAME="AUTOID-8254"></A>shows how to control whether <ICLASS="filename">bash</I> uses a built-incommand, a shell function, or an external command.The way you do that in the C shell is a little, errr, different.<ACLASS="indexterm"NAME="AUTOID-8258"></A>Chris Torek explains why, for example, <CODECLASS="literal">\rm</CODE> disables an aliasfor <ICLASS="filename">rm</I> and <CODECLASS="literal">\cd</CODE> disables the built-in <ICLASS="filename">cd</I> command.He starts with a fairly complex explanation, then gives some practicalguidelines.At the end is a &quot;review&quot; that's easy to follow and fun too. -JP]</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-8265"></A><ACLASS="indexterm"NAME="AUTOID-8267"></A>The C shell first breaks each input line into a <EMCLASS="emphasis">word vector</EM>.It then matches against aliases.Since <CODECLASS="literal">\rm</CODE> does not match <CODECLASS="literal">rm</CODE>, any alias is ignored.Eventually the C shell fully applies any quoting(since an alias can include quotes, some of this work must be deferred;since an alias can include multiple words, more word vector work mustbe done as well; it all gets rather hairy).</P><PCLASS="para">The C shell implements quoting by setting the 8th bit (bit 7) of eachbyte of a quoted character.Since <CODECLASS="literal">'*'|0x80</CODE> [a character <EMCLASS="emphasis">OR</EM>ed with 80 hex a.k.a.10000000 binary-<EMCLASS="emphasis">JP</EM>&nbsp;] is not the same character as <CODECLASS="literal">'*'</CODE>,this prevents file name expansion, further word breaking, and so on.</P><PCLASS="para">Eventually, the shell has a fully &quot;parsed&quot; line.It then compares <CODECLASS="literal">word[0]</CODE> [the first word on the commandline-<EMCLASS="emphasis">JP</EM>&nbsp;] against all the built-ins.If there is a match, it runs the corresponding built-in command(and it is up to that command to expand any remaining words;for instance, <CODECLASS="literal">ls&nbsp;*</CODE> in a directory containingonly the file <EMCLASS="emphasis">-l</EM> produces a long listing, but <CODECLASS="literal">jobs&nbsp;*</CODE>produces a usage message).If not, the shell performs globbing [filename wildcard expansion-<EMCLASS="emphasis">JP</EM>&nbsp;]on the current word list, producing a new word list, and then:</P><OLCLASS="orderedlist"><LICLASS="listitem"><PCLASS="para">strips the 8th bit of each byte of each word</P></LI><LICLASS="listitem"><PCLASS="para"><EMCLASS="emphasis">exec</EM>()s the resulting command.</P></LI></OL><PCLASS="para">This means that:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">\cd</PRE></BLOCKQUOTE></P><PCLASS="para">not only bypasses any alias, but also reaches the built-in scanner as:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">'c'|0x80, 'd', '\0'</PRE></BLOCKQUOTE></P><PCLASS="para">which does not match the built-in command:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">'c', 'd', '\0'</PRE></BLOCKQUOTE></P><PCLASS="para">and so does not run the <EMCLASS="emphasis">cd</EM> builtin.It is later stripped and the shell looks for an external program called<EMCLASS="emphasis">cd</EM>.</P><PCLASS="para">If you want to avoid alias substitution, but not built-in matching,you can replace:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">\cd foo   <EMCLASS="emphasis">or</EM>   \rm foo</PRE></BLOCKQUOTE></P><PCLASS="para">with:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">''cd foo   <EMCLASS="emphasis">or</EM>   &quot;&quot;rm foo</PRE></BLOCKQUOTE></P><PCLASS="para">These do not match the aliases&nbsp;- during alias scanning theyhave quote pairs in front of them&nbsp;- but do match any builtinsince the quotes have by then been stripped (setting bit&nbsp;7 ofall the characters contained between the two quotes, here none).</P><PCLASS="para">Incidentally, since alias expansion occurs early, you can dosome peculiar things with it:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>[</B></CODE>Missing ].% <CODECLASS="userinput"><B>alias [ echo foo</B></CODE>% <CODECLASS="userinput"><B>[</B></CODE>foo</PRE></BLOCKQUOTE></P><PCLASS="para">(alias expansion occurs before globbing)</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>unalias [</B></CODE>unalias: Missing ].</PRE></BLOCKQUOTE></P><PCLASS="para">(unalias globs its arguments!)</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>unalias \[</B></CODE>% <CODECLASS="userinput"><B>alias unalias echo foo</B></CODE>unalias: Too dangerous to alias that.</PRE></BLOCKQUOTE></P><PCLASS="para">(the C shell attempts caution...)</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>alias \unalias echo foo</B></CODE>% <CODECLASS="userinput"><B>alias</B></CODE>unalias   (echo foo)% <CODECLASS="userinput"><B>unalias unalias</B></CODE>foo unalias</PRE></BLOCKQUOTE></P><PCLASS="para">(but fails!)</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>''unalias unalias</B></CODE>% <CODECLASS="userinput"><B>alias</B></CODE>%</PRE></BLOCKQUOTE></P><PCLASS="para">(Fortunately, there is an exit.)</P><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">CT</SPAN> <SPANCLASS="bibliomisc">on Usenet, 14 November 1990</SPAN></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch08_11.htm"TITLE="8.11 Which One Will bash Use? "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 8.11 Which One Will bash Use? "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch08_13.htm"TITLE='8.13 Is It "2&gt;&amp;1 file&quot; or "&gt; file 2&gt;&amp;1&quot;? Why?'><IMGSRC="../gifs/txtnexta.gif"ALT='Next: 8.13 Is It "2&gt;&amp;1 file&quot; or "&gt; file 2&gt;&amp;1&quot;? Why?'BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">8.11 Which One Will bash Use? </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">8.13 Is It "2&gt;&amp;1 file&quot; or "&gt; file 2&gt;&amp;1&quot;? Why?</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>