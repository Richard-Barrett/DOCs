<HTML><HEAD><TITLE>[Chapter 8] 8.14 Bourne Shell Quoting </TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:34:28Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch08_01.htm"TITLE="8. How the Shell Interprets What You Type"><LINKREL="prev"HREF="ch08_13.htm"TITLE='8.13 Is It "2&gt;&amp;1 file&quot; or "&gt; file 2&gt;&amp;1&quot;? Why?'><LINKREL="next"HREF="ch08_15.htm"TITLE="8.15 Differences Between Bourne and C Shell Quoting "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch08_13.htm"TITLE='8.13 Is It "2&gt;&amp;1 file&quot; or "&gt; file 2&gt;&amp;1&quot;? Why?'><IMGSRC="../gifs/txtpreva.gif"ALT='Previous: 8.13 Is It "2&gt;&amp;1 file&quot; or "&gt; file 2&gt;&amp;1&quot;? Why?'BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 8<BR>How the Shell Interprets What You Type</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch08_15.htm"TITLE="8.15 Differences Between Bourne and C Shell Quoting "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 8.15 Differences Between Bourne and C Shell Quoting "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-0012">8.14 Bourne Shell Quoting </A></H2><PCLASS="para"><ACLASS="indexterm"NAME="UPT-ART-12-IX-SH-BOURNE-SHELL-QUOTING"></A><ACLASS="indexterm"NAME="UPT-ART-12-IX-QUOTING-IN-BOURNE-SHELL-SH-BOURNE"></A>I can't understand why some people see Bourne shell quoting as a scary,mysterious set of many rules.Bourne shell quoting is simple.(C shell quoting is slightly more complicated.See article<ACLASS="xref"HREF="ch08_15.htm"TITLE="Differences Between Bourne and C Shell Quoting ">8.15</A>.)</P><PCLASS="para">The overall idea is: <EMCLASS="emphasis">quoting turns off (disables) the special meaning ofcharacters</EM>.There are three quoting characters: a single quote (<CODECLASS="literal">'</CODE>),a double quote (<CODECLASS="literal">&quot;</CODE>), and a backslash (<CODECLASS="literal">\</CODE>).Note that a backquote (<CODECLASS="literal">`</CODE>) is <EMCLASS="emphasis">not</EM> a quoting character&nbsp;- it does<SPANCLASS="link">command substitution (<ACLASS="linkend"HREF="ch09_16.htm"TITLE="Command Substitution ">9.16</A>)</SPAN>.</P><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="UPT-ART-12-SECT-1.1">8.14.1 Special Characters </A></H3><PCLASS="para"><ACLASS="indexterm"NAME="UPT-ART-12-IX-SPECIAL-CHARACTERS-IN-BOURNE-SHELL-SH-BOURNE-SHELL"></A>Below are the characters that are special to the Bourne shell.You've probably already used some of them.Quoting these characters turns off their special meaning.(Yes, the last three characters are quote marks.You can quote quote marks; more on that later.)</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"># &amp; * ? [ ] ( ) = | ^ ; &lt; &gt; ` $ &quot; ' \</PRE></BLOCKQUOTE></P><PCLASS="para">Space, tab, and newline also have special meaning: as argument separators.A slash (<CODECLASS="literal">/</CODE>) has special meaning to UNIX itself, but not theshell&nbsp;- so quoting doesn't change the meaning of slashes.</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="UPT-ART-12-SECT-1.2">8.14.2 How Quoting Works </A></H3><PCLASS="para"><ACLASS="xref"HREF="ch08_14.htm#UPT-ART-12-TAB-0"TITLE="Bourne Shell Quoting Characters">Table 8.1</A>summarizes the rules; you might want to look back at it while you read theexamples.</P><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="UPT-ART-12-TAB-0">Table 8.1: Bourne Shell Quoting Characters</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Quoting Character</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Explanation</TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">'<CODECLASS="replaceable"><I>xxx</I></CODE>'</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Disable all special characters in <CODECLASS="replaceable"><I>xxx</I></CODE>.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">&quot;<CODECLASS="replaceable"><I>xxx</I></CODE>&quot;</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Disable all special characters in <CODECLASS="replaceable"><I>xxx</I></CODE> except <CODECLASS="literal">$</CODE>,<CODECLASS="literal">`</CODE>, and <CODECLASS="literal">\</CODE>.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">\<CODECLASS="replaceable"><I>x</I></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Disable special meaning of character <CODECLASS="replaceable"><I>x</I></CODE>.At end of line, a <CODECLASS="literal">\</CODE> removes the newline character (continues line).</P></TD></TR></TBODY></TABLE><PCLASS="para">To understand which characters will be quoted, imagine this:the Bourne shell reads what you type at a prompt, or the lines in a shellscript, character by character from first to last.(It's actually more complicated than that, but not for the purposes of quoting.)</P><PCLASS="para">When the shell reads one of the three quoting characters, it:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">Strips away that quoting character.</P></LI><LICLASS="listitem"><PCLASS="para">Turns off (disables) special meaning of some or all other character(s) until theend of the quoted section, by the rules in<ACLASS="xref"HREF="ch08_14.htm#UPT-ART-12-TAB-0"TITLE="Bourne Shell Quoting Characters">Table 8.1</A>.</P></LI></UL><PCLASS="para">You also need to know how many characters will be quoted.The next few sections have examples to demonstrate those rules.Try typing the examples at a Bourne shell prompt, if you'd like.(Don't use C shell;<SPANCLASS="link">it's different (<ACLASS="linkend"HREF="ch08_15.htm"TITLE="Differences Between Bourne and C Shell Quoting ">8.15</A>)</SPAN>.)If you need to start a Bourne-type shell, type <EMCLASS="emphasis">sh</EM>; use CTRL-dwhen you're done.</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-8459"></A>A <BCLASS="emphasis.bold">backslash</B> (<CODECLASS="literal">\</CODE>) turns off special meaning (if any)of the next character.For example, <CODECLASS="literal">\*</CODE> is a literal asterisk, not a filename wildcard.So, the first<SPANCLASS="link"><EMCLASS="emphasis">expr</EM> (<ACLASS="linkend"HREF="ch45_28.htm"TITLE="Quick Reference: expr ">45.28</A>)</SPAN>command gets the three arguments<CODECLASS="literal">79&nbsp;*&nbsp;45</CODE> and multiplies those two numbers:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <CODECLASS="userinput"><B>expr 79 \* 45</B></CODE>3555$ <CODECLASS="userinput"><B>expr 79 * 45</B></CODE>expr: syntax error</PRE></BLOCKQUOTE></P><PCLASS="para">In the second example, without the backslash, the shell expanded <CODECLASS="literal">*</CODE>into a list of filenames&nbsp;- which confused <EMCLASS="emphasis">expr</EM>.(If you want to see what I mean, repeat those two examples using<SPANCLASS="link"><EMCLASS="emphasis">echo</EM> (<ACLASS="linkend"HREF="ch08_06.htm"TITLE="Output Command-Line Arguments ">8.6</A>)</SPAN>instead of <EMCLASS="emphasis">expr</EM>.)</P></LI><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-8480"></A><ACLASS="indexterm"NAME="AUTOID-8483"></A><ACLASS="indexterm"NAME="AUTOID-8486"></A><ACLASS="indexterm"NAME="AUTOID-8489"></A><ACLASS="indexterm"NAME="AUTOID-8492"></A><ACLASS="indexterm"NAME="AUTOID-8495"></A><ACLASS="indexterm"NAME="AUTOID-8498"></A>A <BCLASS="emphasis.bold">single quote</B> (<CODECLASS="literal">'</CODE>) turns off special meaning of allcharacters until the next single quote is found.So, in the command line below, the words between the twosingle quotes are quoted.The quotes themselves are removed by the shell.Although this mess is probably not what you want, it's a gooddemonstration of what quoting does:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <CODECLASS="userinput"><B>echo Hey!       What's next?  Mike's #1 friend has $$.</B></CODE>Hey! Whats next?  Mikes</PRE></BLOCKQUOTE></P><PCLASS="para">Let's take a close look at what happened.Spaces outside the quotes are treated as argument separators; the shellignores the multiple spaces.As article<ACLASS="xref"HREF="ch08_06.htm"TITLE="Output Command-Line Arguments ">8.6</A>explains, <EMCLASS="emphasis">echo</EM> prints a single space between each argument it gets.Spaces inside the quotes are passed on to <EMCLASS="emphasis">echo</EM> literally.The question mark (<CODECLASS="literal">?</CODE>) is quoted; it's given to <EMCLASS="emphasis">echo</EM> as is,not used as a wildcard.</P><PCLASS="para">So, <EMCLASS="emphasis">echo</EM> printed its first argument <CODECLASS="literal">Hey!</CODE> and a single space.The second argument to <EMCLASS="emphasis">echo</EM> is <CODECLASS="literal">Whats&nbsp;next?&nbsp;&nbsp;Mikes</CODE>;it's all a single argument because the single quotes surrounded the spaces(notice that <EMCLASS="emphasis">echo</EM> prints the two spaces after the question mark:<CODECLASS="literal">?&nbsp;&nbsp;</CODE>).The next argument, <CODECLASS="literal">#1</CODE>, starts with a hash mark, which is a<SPANCLASS="link">comment character (<ACLASS="linkend"HREF="ch44_02.htm"TITLE="Writing a Simple Shell Program ">44.2</A>)</SPAN>.That means the shell will ignore the rest of the string; it isn't passedto <EMCLASS="emphasis">echo</EM>.</P></LI><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-8524"></A><BCLASS="emphasis.bold">Double quotes</B> (<CODECLASS="literal">&quot;</CODE>) work almost like single quotes.The difference is that double quoting allows the characters <CODECLASS="literal">$</CODE>(dollar sign), <CODECLASS="literal">`</CODE> (backquote), and <CODECLASS="literal">\</CODE> (backslash)to keep their special meanings.That lets you do<SPANCLASS="link">variable substitution (<ACLASS="linkend"HREF="ch06_08.htm"TITLE="Shell Variables ">6.8</A>, <ACLASS="linkend"HREF="ch06_01.htm#UPT-ART-1170"TITLE="What Environment Variables Are Good For ">6.1</A>)</SPAN>and<SPANCLASS="link">command substitution (<ACLASS="linkend"HREF="ch09_16.htm"TITLE="Command Substitution ">9.16</A>)</SPAN>inside double quotes&nbsp;- and also to stop that substitution where you need to.</P><PCLASS="para">&#13;For now, let's repeat the example above.This time, put double quotes around the single quotes (actually, aroundthe whole string):</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <CODECLASS="userinput"><B>echo &quot;Hey!       What's next?  Mike's #1 friend has $$.&quot;</B></CODE>Hey!       What's next?  Mike's #1 friend has 18437.</PRE></BLOCKQUOTE></P><PCLASS="para">The opening double quote isn't matched until the end of the string.So, all the spaces between the double quotes lose their special meaning&nbsp;- and theshell passes the whole string to <EMCLASS="emphasis">echo</EM> as one argument.The single quotes also lose their special meaning&nbsp;- because double quotesturn off the special meaning of single quotes!So, the single quotes aren't stripped off as they were in the previousexample; <EMCLASS="emphasis">echo</EM> prints them.</P><PCLASS="para">What else lost its special meaning?The hash mark (<CODECLASS="literal">#</CODE>) did; notice that the rest of the string waspassed to <EMCLASS="emphasis">echo</EM> this time&nbsp;- because it wasn't &quot;commented out.&quot;<ACLASS="indexterm"NAME="AUTOID-8544"></A>But the dollar sign (<CODECLASS="literal">$</CODE>) didn't lose its meaning;the <CODECLASS="literal">$$</CODE> was expandedinto the shell's<SPANCLASS="link">process ID number (<ACLASS="linkend"HREF="ch38_03.htm"TITLE="Managing Processes: Overall Concepts ">38.3</A>)</SPAN>(in this shell, <CODECLASS="literal">18437</CODE>).</P></LI></UL><PCLASS="para">In the previous example, what would happen if you put the <CODECLASS="literal">$</CODE> insidethe single quotes?(Single quotes turn off the meaning of <CODECLASS="literal">$</CODE>, remember.)Would the shell still expand <CODECLASS="literal">$$</CODE> to its value?Yes, it would: the single quotes have lost their special meaning,so they don't affect any characters between themselves:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <CODECLASS="userinput"><B>echo &quot;What's next?  How many $$ did Mike's friend bring?&quot;</B></CODE>What's next?  How many 18437 did Mike's friend bring?</PRE></BLOCKQUOTE></P><PCLASS="para">How can you make both the <CODECLASS="literal">$$</CODE> and the single quotes print literally?The easiest way is with a backslash, which still works inside doublequotes:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <CODECLASS="userinput"><B>echo &quot;What's next?  How many \$\$ did Mike's friend bring?&quot;</B></CODE>What's next?  How many $$ did Mike's friend bring?</PRE></BLOCKQUOTE></P><PCLASS="para">Here's another way to solve the problem.A careful look at this will show a lot about shell quoting:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <CODECLASS="userinput"><B>echo &quot;What's next?  How many &quot;'$$'&quot; did Mike's friend bring?&quot;</B></CODE>What's next?  How many $$ did Mike's friend bring?</PRE></BLOCKQUOTE></P><PCLASS="para">To read that example, remember that a double quote quotes charactersuntil the next double quote is found.The same is true for single quotes.So, the string <CODECLASS="literal">What's next?&nbsp;&nbsp;How many&nbsp;</CODE>(including the space at the end) is inside a pair of double quotes.The <CODECLASS="literal">$$</CODE> is inside a pair of single quotes.The rest of the line is inside another pair of double quotes.Both of the double-quoted strings contain a single quote; the doublequotes turn off its special meaning and the single quote is printed literally.</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="UPT-ART-12-SECT-1.3">8.14.3 Single Quotes Inside Single Quotes? </A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-8573"></A>You can't put single quotes inside single quotes.A single quote turns off <EMCLASS="emphasis">all</EM> special meaning until the nextsingle quote.Use double quotes and backslashes.<ACLASS="indexterm"NAME="AUTOID-8576"></A></P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="UPT-ART-12-SECT-1.4">8.14.4 Multiline Quoting </A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-8580"></A>Once you type a single quote or double quote, everything is quoted.The quoting can stretch across many lines.(The C shell doesn't work this way.)</P><PCLASS="para">For example, in the short script shown in<ACLASS="xref"HREF="ch08_14.htm#UPT-ART-12-FIG-0"TITLE="Matching Quotes">Figure 8.1</A>,you might think that the <CODECLASS="literal">$1</CODE> isinside quotes... but it isn't.</P><H4CLASS="figure"><ACLASS="title"NAME="UPT-ART-12-FIG-0">Figure 8.1: Matching Quotes</A></H4><IMGCLASS="graphic"SRC="figs/0012.gif"ALT="Figure 8.1"><PCLASS="para">Actually, everything <EMCLASS="emphasis">but</EM> <CODECLASS="literal">$1</CODE> is in quotes.The gray shaded area shows the quoted parts.So <CODECLASS="literal">$1</CODE> is expanded by the Bourne shell, and not by <EMCLASS="emphasis">awk</EM>.</P><PCLASS="para">Here's another example.Let's store a<SPANCLASS="link">shell variable (<ACLASS="linkend"HREF="ch06_08.htm"TITLE="Shell Variables ">6.8</A>)</SPAN>with a multiline message, the kind that might be used in a shell program.<ACLASS="indexterm"NAME="AUTOID-8596"></A>A shell variable must be stored as a single argument; any argumentseparators (spaces, etc.) must be quoted.Inside double quotes, <CODECLASS="literal">$</CODE> and <CODECLASS="literal">`</CODE> are interpreted(<EMCLASS="emphasis">before</EM> the variable is stored, by the way).The opening double quote isn't closed by the end of the first line;the Bourne shell prints<SPANCLASS="link">secondary prompts (<ACLASS="linkend"HREF="ch09_13.htm"TITLE="Multiline Commands, Secondary Prompts ">9.13</A>)</SPAN>(<CODECLASS="literal">&gt;</CODE>) until all quotesare closed:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <CODECLASS="userinput"><B>greeting=&quot;Hi, $USER.&gt; The date and time now&gt; are:  `date`.&quot;</B></CODE>$ <CODECLASS="userinput"><B>echo &quot;$greeting&quot;</B></CODE>Hi, jerry.The date and time noware:  Tue Sep  1 13:48:12 EDT 1992.$ <CODECLASS="userinput"><B>echo $greeting</B></CODE>Hi, jerry. The date and time now are: Tue Sep 1 13:48:12 EDT 1992.$</PRE></BLOCKQUOTE></P><PCLASS="para">The first <EMCLASS="emphasis">echo</EM> command line uses double quotes.So, the shell variable is expanded,but the shell doesn't use the spaces and newlines in the variableas argument separators.(Look at the extra spaces after the word <CODECLASS="literal">are:</CODE>.)The second <EMCLASS="emphasis">echo</EM> doesn't use double quotes.The spaces and newlines are treated as argument separators; the shellpasses 14 arguments to <EMCLASS="emphasis">echo</EM>, which prints them with singlespaces between.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-8615"></A>A backslash has a quirk you should know about.If you use it outside quotes, at the end of a line (just before thenewline), the newline will be <EMCLASS="emphasis">deleted</EM>.Inside single quotes, though, a backslash at the end of a line iscopiedas is.Here are examples.I've numbered the prompts (<CODECLASS="literal">1$</CODE>, <CODECLASS="literal">2$</CODE>, and so on):</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">1$ <CODECLASS="userinput"><B>echo &quot;a long long long long long long</B></CODE>&gt; <CODECLASS="userinput"><B>line or two&quot;</B></CODE>a long long long long long longline or two2$ <CODECLASS="userinput"><B>echo a long long long long long long\</B></CODE>&gt; <CODECLASS="userinput"><B>line</B></CODE>a long long long long long longline3$ <CODECLASS="userinput"><B>echo a long long long long long long \</B></CODE>&gt; <CODECLASS="userinput"><B>line</B></CODE>a long long long long long long line4$ <CODECLASS="userinput"><B>echo &quot;a long long long long long long\</B></CODE>&gt; <CODECLASS="userinput"><B>line&quot;</B></CODE>a long long long long long longline5$ <CODECLASS="userinput"><B>echo 'a long long long long long long\</B></CODE>&gt; <CODECLASS="userinput"><B>line'</B></CODE>a long long long long long long\line</PRE></BLOCKQUOTE></P><PCLASS="para">You've seen an example like <BCLASS="emphasis.bold">example 1</B> before.The newline is in quotes, so it isn't an argument separator;<EMCLASS="emphasis">echo</EM> prints it with the rest of the (single two-line) argument.In <BCLASS="emphasis.bold">example 2</B>, the backslash before the newline tells the shell to deletethe newline; the words <CODECLASS="literal">long</CODE> and <CODECLASS="literal">line</CODE> are passed to<EMCLASS="emphasis">echo</EM> as one argument.<BCLASS="emphasis.bold">Example 3</B> is usually what you want when you're typing long lists ofcommand-line arguments: Type a space (an argument separator) before thebackslash and newline.In <BCLASS="emphasis.bold">example 4</B>, the backslash inside the double quotes is ignored(compare to example 1).Inside single quotes, as in <BCLASS="emphasis.bold">example 5</B>, the backslash has nospecial meaning; it's passed on to <EMCLASS="emphasis">echo</EM>.</P><ACLASS="indexterm"NAME="AUTOID-8644"></A><ACLASS="indexterm"NAME="AUTOID-8645"></A></DIV><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">JP</SPAN></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch08_13.htm"TITLE='8.13 Is It "2&gt;&amp;1 file&quot; or "&gt; file 2&gt;&amp;1&quot;? Why?'><IMGSRC="../gifs/txtpreva.gif"ALT='Previous: 8.13 Is It "2&gt;&amp;1 file&quot; or "&gt; file 2&gt;&amp;1&quot;? Why?'BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch08_15.htm"TITLE="8.15 Differences Between Bourne and C Shell Quoting "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 8.15 Differences Between Bourne and C Shell Quoting "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">8.13 Is It "2&gt;&amp;1 file&quot; or "&gt; file 2&gt;&amp;1&quot;? Why?</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">8.15 Differences Between Bourne and C Shell Quoting </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>