<HTML><HEAD><TITLE>[Chapter 9] 9.6 String Editing (Colon) Operators </TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:34:57Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch09_01.htm"TITLE="9. Saving Time on the Command Line"><LINKREL="prev"HREF="ch09_05.htm"TITLE="9.5 Build Strings with {&nbsp;} "><LINKREL="next"HREF="ch09_07.htm"TITLE="9.7 String Editing in ksh and bash "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch09_05.htm"TITLE="9.5 Build Strings with {&nbsp;} "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 9.5 Build Strings with {&nbsp;} "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 9<BR>Saving Time on the Command Line</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch09_07.htm"TITLE="9.7 String Editing in ksh and bash "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 9.7 String Editing in ksh and bash "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-7670">9.6 String Editing (Colon) Operators </A></H2><PCLASS="para"><ACLASS="indexterm"NAME="UPT-ART-7670-IX-COLON1-STRING-EDITING-OPERATOR"></A><ACLASS="indexterm"NAME="AUTOID-9938"></A><ACLASS="indexterm"NAME="UPT-ART-7670-IX-HISTORY-OF-COMMAND-EDITING-SUBSTITUTIONS"></A><ACLASS="indexterm"NAME="UPT-ART-7670-IX-C-SHELL-CSH-EDITING-HISTORY-SUBSTITUTIONS"></A><ACLASS="indexterm"NAME="UPT-ART-7670-IX-STRINGS-EDITING-CSH"></A>When the C shell and <EMCLASS="emphasis">bash</EM> do<SPANCLASS="link">history substitutions (<ACLASS="linkend"HREF="ch11_07.htm"TITLE="History Substitutions ">11.7</A>)</SPAN>they can also edit the substitution.The C shell&nbsp;- but not <EMCLASS="emphasis">bash</EM>&nbsp;- can also edit<SPANCLASS="link">variable substitutions (<ACLASS="linkend"HREF="ch06_08.htm"TITLE="Shell Variables ">6.8</A>)</SPAN>.For instance, in the first example below, when <CODECLASS="literal">!$</CODE> contains<CODECLASS="literal">/a/b/c</CODE>, adding the &quot;head&quot; operator <CODECLASS="literal">:h</CODE> will give just the head ofthe pathname, <CODECLASS="literal">/a/b</CODE>.</P><PCLASS="para">For a complete but very terse list of these operators, see the <EMCLASS="emphasis">csh</EM> manualpage.We hope the examples below will help you understand these useful operators.</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para"><CODECLASS="userinput"><B>:h</B></CODE> gives the head of a<SPANCLASS="link">pathname (<ACLASS="linkend"HREF="ch14_02.htm"TITLE="Using Relative and Absolute Pathnames ">14.2</A>)</SPAN>,as follows:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>echo /a/b/c</B></CODE>/a/b/c% <CODECLASS="userinput"><B>echo !$:h</B></CODE>echo /a/b/a/b</PRE></BLOCKQUOTE></P><PCLASS="para">&#13;That took off the filename and left the header.This also could be used with C shell<SPANCLASS="link">variables (<ACLASS="linkend"HREF="ch47_05.htm"TITLE="Using C Shell Arrays ">47.5</A>)</SPAN>as:&#13;</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>set x = /a/b/c</B></CODE>% <CODECLASS="userinput"><B>echo $x</B></CODE>/a/b/c% <CODECLASS="userinput"><B>echo $x:h</B></CODE>/a/b</PRE></BLOCKQUOTE></P><PCLASS="para"></P></LI><LICLASS="listitem"><PCLASS="para"><CODECLASS="userinput"><B>:r</B></CODE> returns the root of a filename:&#13;</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>echo xyz.c abc.c</B></CODE>xyz.c abc.c% <CODECLASS="userinput"><B>echo !$:r</B></CODE>echo abcabc</PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="literal">:r</CODE> removed the <CODECLASS="literal">.c</CODE> from the last argument,leaving the root name.This could also be used in C shell variable names:&#13;</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>set x = abc.c</B></CODE>% <CODECLASS="userinput"><B>echo $x:r</B></CODE>abc</PRE></BLOCKQUOTE></P><PCLASS="para"></P></LI><LICLASS="listitem"><PCLASS="para"><CODECLASS="userinput"><B>:g</B></CODE>For more than one name, you can add the <EMCLASS="emphasis">g</EM> operator to makethe operation global. For example:&#13;</P><PCLASS="para"><TABLECLASS="screen.co"BORDER="1"><TR><THVALIGN="TOP"><PRECLASS="calloutlist"><ACLASS="co"HREF="ch47_05.htm"TITLE="47.5 Using C Shell Arrays ">(...)</A> &#13;</PRE></TH><TDVALIGN="TOP"><PRECLASS="screen">% <CODECLASS="userinput"><B>set x = (a.a b.b c.c)</B></CODE>% <CODECLASS="userinput"><B>echo $x:gr</B></CODE>a b c</PRE></TD></TR></TABLE></P><PCLASS="para">The <CODECLASS="literal">:gr</CODE> operator stripped off all dot(<CODECLASS="literal">.</CODE>) suffixes.By the way, this use of <EMCLASS="emphasis">g</EM> does not work with the history commands.</P><PCLASS="para">This is the C shell's answer to the<SPANCLASS="link"><EMCLASS="emphasis">basename</EM> (<ACLASS="linkend"HREF="ch45_18.htm"TITLE="Using basename and dirname ">45.18</A>)</SPAN>command.</P></LI><LICLASS="listitem"><PCLASS="para"><CODECLASS="userinput"><B>:e</B></CODE> returns the extension (the part of the name after a dot).Using <EMCLASS="emphasis">csh</EM> variables:&#13;</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>set x=(abc.c)</B></CODE>% <CODECLASS="userinput"><B>echo $x:e</B></CODE>c</PRE></BLOCKQUOTE></P><PCLASS="para">No luck using that within history, either.</P></LI><LICLASS="listitem"><PCLASS="para"><CODECLASS="userinput"><B>:t</B></CODE> gives the tail of a pathname&nbsp;- the actual filename without the path:&#13;</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>echo /a/b/c</B></CODE>/a/b/c% <CODECLASS="userinput"><B>echo !$:t</B></CODE>c</PRE></BLOCKQUOTE></P><PCLASS="para">With <EMCLASS="emphasis">csh</EM> variables:&#13;</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>set x=(/a/b/c)</B></CODE>% <CODECLASS="userinput"><B>echo $x:t</B></CODE>c</PRE></BLOCKQUOTE></P><PCLASS="para">&#13;And with multiple pathnames, you can do it globally with:&#13;</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>set x=(/a/b/c /d/e/f /g/h/i)</B></CODE>% <CODECLASS="userinput"><B>echo $x:gt</B></CODE>c f i</PRE></BLOCKQUOTE></P><PCLASS="para">While the corresponding heads would be:&#13;</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>set x=(/a/b/c /d/e/f /g/h/i)</B></CODE>% <CODECLASS="userinput"><B>echo $x:gh</B></CODE>/a/b /d/e /g/h</PRE></BLOCKQUOTE></P><PCLASS="para"></P></LI><LICLASS="listitem"><PCLASS="para"><CODECLASS="userinput"><B>:p</B></CODE><SPANCLASS="link">prints the command, but does not execute it (<ACLASS="linkend"HREF="ch11_10.htm"TITLE="Check Your History First with :p ">11.10</A>)</SPAN>:&#13;</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>echo *</B></CODE>fn1 fn2 fn3% <CODECLASS="userinput"><B>!:p</B></CODE>echo fn1 fn2 fn3</PRE></BLOCKQUOTE></P><PCLASS="para"></P></LI><LICLASS="listitem"><PCLASS="para"><CODECLASS="userinput"><B>:q</B></CODE> prevents further filename expansion, or prints the command as is:&#13;</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>echo *</B></CODE>fn1 fn2 fn3% <CODECLASS="userinput"><B>!:q</B></CODE>echo **</PRE></BLOCKQUOTE></P><PCLASS="para">The first command echoed the files in the directory, and when the <CODECLASS="literal">:q</CODE>was applied, it echoed only the special character.</P></LI><LICLASS="listitem"><PCLASS="para"><CODECLASS="userinput"><B>:x</B></CODE> is like <CODECLASS="literal">:q</CODE>, but it breaks the line into words.That is, when using <CODECLASS="literal">:q</CODE>, it is all one word, while <CODECLASS="literal">:x</CODE>will break it up into multiple words.[<CODECLASS="literal">:q</CODE> and <CODECLASS="literal">:x</CODE> are more often used with<SPANCLASS="link">C shell arrays (<ACLASS="linkend"HREF="ch47_05.htm"TITLE="Using C Shell Arrays ">47.5</A>)</SPAN>.-<EMCLASS="emphasis">JP</EM>&nbsp;]</P></LI></UL><ACLASS="indexterm"NAME="AUTOID-10071"></A><ACLASS="indexterm"NAME="AUTOID-10072"></A><ACLASS="indexterm"NAME="AUTOID-10073"></A><ACLASS="indexterm"NAME="AUTOID-10074"></A><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">DR</SPAN></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch09_05.htm"TITLE="9.5 Build Strings with {&nbsp;} "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 9.5 Build Strings with {&nbsp;} "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch09_07.htm"TITLE="9.7 String Editing in ksh and bash "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 9.7 String Editing in ksh and bash "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">9.5 Build Strings with {&nbsp;} </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">9.7 String Editing in ksh and bash </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>