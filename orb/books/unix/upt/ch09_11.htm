<HTML><HEAD><TITLE>[Chapter 9] 9.11 Repeating a Command with a foreach Loop </TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:35:03Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch09_01.htm"TITLE="9. Saving Time on the Command Line"><LINKREL="prev"HREF="ch09_10.htm"TITLE="9.10 Filename Completion Isn't Always the Answer "><LINKREL="next"HREF="ch09_12.htm"TITLE="9.12 The Bourne Shell for Loop "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch09_10.htm"TITLE="9.10 Filename Completion Isn't Always the Answer "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 9.10 Filename Completion Isn't Always the Answer "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 9<BR>Saving Time on the Command Line</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch09_12.htm"TITLE="9.12 The Bourne Shell for Loop "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 9.12 The Bourne Shell for Loop "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-7020">9.11 Repeating a Command with a foreach Loop </A></H2><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-10290"></A><ACLASS="indexterm"NAME="AUTOID-10293"></A><ACLASS="indexterm"NAME="AUTOID-10295"></A>When some people need to repeat a command on several files, the first thingthey think of is C shell<SPANCLASS="link">history (<ACLASS="linkend"HREF="ch11_05.htm"TITLE="My Favorite Is ^^ ">11.5</A>)</SPAN>:</P><PCLASS="para"><TABLECLASS="screen.co"BORDER="1"><TR><THVALIGN="TOP"><PRECLASS="calloutlist"><ACLASS="co"HREF="ch25_07.htm"TITLE="25.7 Show Non-Printing Characters with cat -v or od -c ">-v</A> &#13;</PRE></TH><TDVALIGN="TOP"><PRECLASS="screen">% <CODECLASS="userinput"><B>cat -t -v /usr/fran/report | pg</B></CODE>   ...% <CODECLASS="userinput"><B>^fran/report^rob/file3</B></CODE>cat -t -v /usr/rob/file3 | pg   ...% <CODECLASS="userinput"><B>^3^21</B></CODE>cat -t -v /usr/rob/file21 | pg   ...%</PRE></TD></TR></TABLE></P><PCLASS="para">That kind of thing can be easier with the C shell's <EMCLASS="emphasis">foreach</EM> loop.(In the Bourne and Korn shells, use a<SPANCLASS="link"><EMCLASS="emphasis">for</EM> (<ACLASS="linkend"HREF="ch09_12.htm"TITLE="The Bourne Shell for Loop ">9.12</A>)</SPAN>loop.)You give the loop a list of the words that will change each time the commandline is run.In this example, it's a list of filenames.The loop will step through the words, one by one, storing a word into a<SPANCLASS="link">shell variable (<ACLASS="linkend"HREF="ch06_08.htm"TITLE="Shell Variables ">6.8</A>)</SPAN>,then running the command(s).The loop goes on until it has read all the words.For example:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>foreach file (/usr/fran/report /usr/rob/file3 /usr/rob/file21)</B></CODE>? <CODECLASS="userinput"><B>cat -t -v $file | pg</B></CODE>? <CODECLASS="userinput"><B>end</B></CODE>   ...<EMCLASS="emphasis">Shell runs cat -t -v /usr/fran/report | pg</EM>...   ...<EMCLASS="emphasis">Shell runs cat -t -v /usr/rob/file3 | pg</EM>...   ...<EMCLASS="emphasis">Shell runs cat -t -v /usr/rob/file21 | pg</EM>...%</PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-10319"></A>The question marks (<CODECLASS="literal">?</CODE>) are<SPANCLASS="link">secondary prompts (<ACLASS="linkend"HREF="ch09_13.htm"TITLE="Multiline Commands, Secondary Prompts ">9.13</A>)</SPAN>;the C shell will keep printing them until you type the command <EMCLASS="emphasis">end</EM>.Then the loop runs.</P><PCLASS="para">The list between the parentheses doesn't have to be filenames.Among other things, you can use<SPANCLASS="link">wildcards (<ACLASS="linkend"HREF="ch01_16.htm"TITLE="Wildcards ">1.16</A>)</SPAN>,<SPANCLASS="link">backquotes (<ACLASS="linkend"HREF="ch09_16.htm"TITLE="Command Substitution ">9.16</A>)</SPAN>(command substitution),<SPANCLASS="link">variables (<ACLASS="linkend"HREF="ch06_08.htm"TITLE="Shell Variables ">6.8</A>, <ACLASS="linkend"HREF="ch06_01.htm#UPT-ART-1170"TITLE="What Environment Variables Are Good For ">6.1</A>)</SPAN>,and the C shell's handy<ACLASS="indexterm"NAME="AUTOID-10329"></A><SPANCLASS="link">curly brace (<CODECLASS="literal">{}</CODE>) operators (<ACLASS="linkend"HREF="ch09_05.htm"TITLE="Build Strings with {&nbsp;} ">9.5</A>)</SPAN>.For example, you could have typed the above loop this way:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>foreach file (/usr/fran/report /usr/rob/file{3,21})</B></CODE>? <CODECLASS="userinput"><B>cat -t -v $file | pg</B></CODE>? <CODECLASS="userinput"><B>end</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">If you want the loop to stop before or after running each command, add the Cshell operator <CODECLASS="literal">$&lt;</CODE>.It reads keyboard input and waits for a RETURN.In this case, you can probably ignorethe input; you'll use <CODECLASS="literal">$&lt;</CODE> tomake the loop wait.For example, to make the loop above prompt before each command line:</P><PCLASS="para"><TABLECLASS="screen.co"BORDER="1"><TR><THVALIGN="TOP"><PRECLASS="calloutlist">&#13;<ACLASS="co"HREF="ch06_08.htm"TITLE="6.8 Shell Variables ">set</A> &#13;</PRE></TH><TDVALIGN="TOP"><PRECLASS="screen">% <CODECLASS="userinput"><B>foreach file (/usr/fran/report /usr/rob/file{3,21})</B></CODE>? <CODECLASS="userinput"><B>echo -n &quot;Press RETURN to see $file-&quot;</B></CODE>? <CODECLASS="userinput"><B>set x=&quot;$&lt;&quot;</B></CODE>? <CODECLASS="userinput"><B>cat -t -v $file | pg</B></CODE>? <CODECLASS="userinput"><B>end</B></CODE>Press RETURN to see /usr/fran/report- <KBDCLASS="keycap">[RETURN]</KBD>   <EMCLASS="emphasis">Shell runs cat -t -v /usr/fran/report | pg</EM>...Press RETURN to see /usr/rob/file3- <KBDCLASS="keycap">[RETURN]</KBD>   <EMCLASS="emphasis">Shell runs cat -t -v /usr/rob/file3 | pg</EM>...Press RETURN to see /usr/rob/file21- <KBDCLASS="keycap">[RETURN]</KBD>   <EMCLASS="emphasis">Shell runs cat -t -v /usr/rob/file21 | pg</EM>...</PRE></TD></TR></TABLE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-10357"></A><ACLASS="indexterm"NAME="AUTOID-10361"></A>The loop parameters don't need to be filenames.For instance, you could send a personalized<SPANCLASS="link">mail (<ACLASS="linkend"HREF="ch01_33.htm"TITLE="UNIX Networking and Communications ">1.33</A>)</SPAN>message to five peoplethis way:[1]</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[1] If you're sending lots of mail messages with a loop, your system mailermay get overloaded.In that case, it's a good idea to put a command like<SPANCLASS="link"><CODECLASS="literal">sleep</CODE>&nbsp;<CODECLASS="literal">5</CODE> (<ACLASS="linkend"HREF="ch40_02.htm"TITLE="Waiting a Little While: sleep ">40.2</A>)</SPAN>on a separate line before the <CODECLASS="literal">end</CODE>.That will give the mailer five seconds to send each message.</P></BLOCKQUOTE><PCLASS="para"><TABLECLASS="screen.co"BORDER="1"><TR><THVALIGN="TOP"><PRECLASS="calloutlist">&#13;<ACLASS="co"HREF="ch13_13.htm"TITLE='13.13 The "Filename&quot; - '>cat -</A> &#13;</PRE></TH><TDVALIGN="TOP"><PRECLASS="screen">% <CODECLASS="userinput"><B>foreach person (John Cathy Agnes Brett Elma)</B></CODE>? <CODECLASS="userinput"><B>echo &quot;Dear $person,&quot; | cat - formletter | mail $person</B></CODE>? <CODECLASS="userinput"><B>end</B></CODE></PRE></TD></TR></TABLE></P><PCLASS="para">The first line of the first letter will be &quot;Dear John,&quot;; the secondletter &quot;Dear Cathy,&quot;; and so on.</P><PCLASS="para">Want to take this idea further?It's a part of<SPANCLASS="link">shell programming (<ACLASS="linkend"HREF="ch44_01.htm#UPT-ART-0065"TITLE="Everyone Should Learn Some Shell Programming ">44.1</A>)</SPAN>.I usually<SPANCLASS="link">don't recommend (<ACLASS="linkend"HREF="ch47_02.htm"TITLE="C Shell Programming Considered Harmful ">47.2</A>)</SPAN>shell programming with the C shell,but this is a handy technique to use interactively.</P><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">JP</SPAN></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch09_10.htm"TITLE="9.10 Filename Completion Isn't Always the Answer "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 9.10 Filename Completion Isn't Always the Answer "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch09_12.htm"TITLE="9.12 The Bourne Shell for Loop "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 9.12 The Bourne Shell for Loop "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">9.10 Filename Completion Isn't Always the Answer </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">9.12 The Bourne Shell for Loop </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>