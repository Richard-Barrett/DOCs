<HTML><HEAD><TITLE>[Chapter 9] 9.12 The Bourne Shell for Loop </TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:35:05Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch09_01.htm"TITLE="9. Saving Time on the Command Line"><LINKREL="prev"HREF="ch09_11.htm"TITLE="9.11 Repeating a Command with a foreach Loop "><LINKREL="next"HREF="ch09_13.htm"TITLE="9.13 Multiline Commands, Secondary Prompts "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch09_11.htm"TITLE="9.11 Repeating a Command with a foreach Loop "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 9.11 Repeating a Command with a foreach Loop "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 9<BR>Saving Time on the Command Line</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch09_13.htm"TITLE="9.13 Multiline Commands, Secondary Prompts "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 9.13 Multiline Commands, Secondary Prompts "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-7690">9.12 The Bourne Shell for Loop </A></H2><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-10386"></A><ACLASS="indexterm"NAME="AUTOID-10389"></A><ACLASS="indexterm"NAME="AUTOID-10391"></A>The Bourne shell <EMCLASS="emphasis">for</EM> loop is like the C shell<SPANCLASS="link"><EMCLASS="emphasis">foreach</EM> loop (<ACLASS="linkend"HREF="ch09_11.htm"TITLE="Repeating a Command with a foreach Loop ">9.11</A>)</SPAN>:it loops through a list of words, running one or more commands for eachword in the list.This saves time when you want to run the same series of commands,separately, on several files.</P><PCLASS="para">Let's use the example from the article about <EMCLASS="emphasis">foreach</EM>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <CODECLASS="userinput"><B>for file in /usr/fran/report /usr/rob/file2 /usr/rob/file3</B></CODE>&gt; <CODECLASS="userinput"><B>do</B></CODE>&gt; <CODECLASS="userinput"><B>cat -t -v $file | pg</B></CODE>&gt; <CODECLASS="userinput"><B>done</B></CODE>   ...<EMCLASS="emphasis">Shell runs cat -t -v /usr/fran/report | pg</EM>...   ...<EMCLASS="emphasis">Shell runs cat -t -v /usr/rob/file2 | pg</EM>...   ...<EMCLASS="emphasis">Shell runs cat -t -v /usr/rob/file3 | pg</EM>...$</PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-10410"></A><ACLASS="indexterm"NAME="AUTOID-10413"></A>The right angle brackets (<CODECLASS="literal">&gt;</CODE>) are<SPANCLASS="link">secondary prompts (<ACLASS="linkend"HREF="ch09_13.htm"TITLE="Multiline Commands, Secondary Prompts ">9.13</A>)</SPAN>;the Bourne shell will keep printing them until you type the command <EMCLASS="emphasis">done</EM>.Then it runs the loop.You don't have to press RETURN after the <CODECLASS="literal">do</CODE>; you can type thefirst command on the same line after it.</P><PCLASS="para">In a shell script,  the loop body (the lines between <CODECLASS="literal">do</CODE> and<CODECLASS="literal">done</CODE>) are usually indented for clarity.</P><PCLASS="para">The list after the <CODECLASS="literal">in</CODE> doesn't have to be filenames.Among other things, you can use<SPANCLASS="link">backquotes (<ACLASS="linkend"HREF="ch09_16.htm"TITLE="Command Substitution ">9.16</A>)</SPAN>(command substitution),<SPANCLASS="link">variables (<ACLASS="linkend"HREF="ch06_08.htm"TITLE="Shell Variables ">6.8</A>, <ACLASS="linkend"HREF="ch06_01.htm#UPT-ART-1170"TITLE="What Environment Variables Are Good For ">6.1</A>)</SPAN>,or<SPANCLASS="link">wildcards (<ACLASS="linkend"HREF="ch15_01.htm#UPT-ART-1480"TITLE="File Naming Wildcards ">15.1</A>)</SPAN>.For example, you could have typed the above loop this way:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <CODECLASS="userinput"><B>for file in /usr/fran/report /usr/rob/file[23]</B></CODE>&gt; <CODECLASS="userinput"><B>do cat -t -v $file | pg</B></CODE>&gt; <CODECLASS="userinput"><B>done</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">If you want the loop to stop before or after running each command, add theBourne shell<ACLASS="indexterm"NAME="AUTOID-10434"></A><SPANCLASS="link"><EMCLASS="emphasis">read</EM> command (<ACLASS="linkend"HREF="ch44_13.htm"TITLE="read: Reading from the Keyboard ">44.13</A>)</SPAN>.It reads keyboard input and waits for a RETURN.In this case, you can probably ignore the input; you'll use <EMCLASS="emphasis">read</EM> tomake the loop wait.For example, to make the above loop prompt before each command line:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <CODECLASS="userinput"><B>for file in /usr/fran/report /usr/rob/file[23]</B></CODE>&gt; <CODECLASS="userinput"><B>do</B></CODE>&gt; <CODECLASS="userinput"><B>echo -n &quot;Press RETURN to see $file-&quot;</B></CODE>&gt; <CODECLASS="userinput"><B>read x</B></CODE>&gt; <CODECLASS="userinput"><B>cat -t -v $file | pg</B></CODE>&gt; <CODECLASS="userinput"><B>done</B></CODE>Press RETURN to see /usr/fran/report-<CODECLASS="userinput"><B><KBDCLASS="keycap">[RETURN]</KBD></B></CODE>   <EMCLASS="emphasis">Shell runs cat -t -v /usr/fran/report | pg</EM>...Press RETURN to see /usr/rob/file2-<CODECLASS="userinput"><B><KBDCLASS="keycap">[RETURN]</KBD></B></CODE>   <EMCLASS="emphasis">Shell runs cat -t -v /usr/rob/file2 | pg</EM>...Press RETURN to see /usr/rob/file3-<CODECLASS="userinput"><B><KBDCLASS="keycap">[RETURN]</KBD></B></CODE>   <EMCLASS="emphasis">Shell runs cat -t -v /usr/rob/file3 | pg</EM>...</PRE></BLOCKQUOTE></P><PCLASS="para">&#13;Article<ACLASS="xref"HREF="ch44_16.htm"TITLE="Handling Command-Line Arguments with a for Loop ">44.16</A>has more information about the <EMCLASS="emphasis">for</EM> loop.Article<ACLASS="xref"HREF="ch45_16.htm"TITLE="Standard Input to a for Loop ">45.16</A>shows how to make a <EMCLASS="emphasis">for</EM> loop read the standard input instead of alist of arguments.</P><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">JP</SPAN></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch09_11.htm"TITLE="9.11 Repeating a Command with a foreach Loop "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 9.11 Repeating a Command with a foreach Loop "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch09_13.htm"TITLE="9.13 Multiline Commands, Secondary Prompts "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 9.13 Multiline Commands, Secondary Prompts "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">9.11 Repeating a Command with a foreach Loop </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">9.13 Multiline Commands, Secondary Prompts </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>