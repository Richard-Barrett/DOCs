<HTML><HEAD><TITLE>[Chapter 9] 9.18 Process Substitution </TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:35:17Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch09_01.htm"TITLE="9. Saving Time on the Command Line"><LINKREL="prev"HREF="ch09_17.htm"TITLE="9.17 Handling Lots of Text with Temporary Files "><LINKREL="next"HREF="ch09_19.htm"TITLE="9.19 For the Impatient: Type-Ahead "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch09_17.htm"TITLE="9.17 Handling Lots of Text with Temporary Files "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 9.17 Handling Lots of Text with Temporary Files "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 9<BR>Saving Time on the Command Line</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch09_19.htm"TITLE="9.19 For the Impatient: Type-Ahead "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 9.19 For the Impatient: Type-Ahead "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-0109">9.18 Process Substitution </A></H2><PCLASS="para"><ACLASS="indexterm"NAME="UPT-ART-109-IX-PROCESS-SUBSTITUTION"></A>Do you find yourself making temporary files, then giving those files to somecommands to read?For example, maybe you want to compare two files with<SPANCLASS="link"><EMCLASS="emphasis">comm</EM> (<ACLASS="linkend"HREF="ch28_12.htm"TITLE="Comparing Two Files with comm ">28.12</A>)</SPAN>-but <EMCLASS="emphasis">comm</EM>needs sorted files, and these files aren't sorted.So you have to type:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">bash$ <CODECLASS="userinput"><B>sort file1 &gt; /tmp/file1.sort</B></CODE>bash$ <CODECLASS="userinput"><B>sort file2 &gt; /tmp/file2.sort</B></CODE>bash$ <CODECLASS="userinput"><B>comm /tmp/file1.sort /tmp/file2.sort</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">There are easier ways to do that.</P><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="UPT-ART-109-SECT-1.1">9.18.1 bash Process Substitution </A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-10740"></A><EMCLASS="emphasis">bash</EM> has the operator <CODECLASS="literal">&lt;(</CODE><CODECLASS="replaceable"><I>process</I></CODE><CODECLASS="literal">)</CODE>.It runs a <CODECLASS="replaceable"><I>process</I></CODE> and gives the output to a named pipe.Then the filename of the named pipe becomes a command-lineargument.Here's an example that shows two unsorted files and the result:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">bash$ <CODECLASS="userinput"><B>cat file1</B></CODE>rcsdiff.logrunsedrunsed.newecho.wherefoobash$ <CODECLASS="userinput"><B>cat file2</B></CODE>newprogramrunsedecho.wherefoobash$ <CODECLASS="userinput"><B>comm &lt;(sort file1) &lt;(sort file2)</B></CODE>                echo.where                foo        newprogramrcsdiff.log                runsedrunsed.new</PRE></BLOCKQUOTE></P><PCLASS="para">(In the first column, <EMCLASS="emphasis">comm</EM> shows lines only in <EMCLASS="emphasis">file1</EM>.The second column shows lines only in <EMCLASS="emphasis">file2</EM>.The third column shows lines that were in both files.)</P><PCLASS="para">Let's take a closer look at how that works.By setting the<SPANCLASS="link"><EMCLASS="emphasis">-x</EM> option (<ACLASS="linkend"HREF="ch08_17.htm"TITLE="verbose and echo Variables Show Quoting ">8.17</A>)</SPAN>,the shellwill display the processes it runs with a <CODECLASS="literal">+</CODE> before each top-levelprocess and <CODECLASS="literal">++</CODE> before second-level processes:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">bash$ <CODECLASS="userinput"><B>set -x</B></CODE>bash$ <CODECLASS="userinput"><B>comm &lt;(sort file1) &lt;(sort file2)</B></CODE>+ comm /tmp/sh-np-a11167 /tmp/sh-np-b11167++ sort file1++ sort file2                echo.where                foo        newprogramrcsdiff.log                runsedrunsed.new</PRE></BLOCKQUOTE></P><PCLASS="para">The script made its named pipes in <EMCLASS="emphasis">/tmp</EM>.<EMCLASS="emphasis">bash</EM> ran each <EMCLASS="emphasis">sort</EM> command, sent its output to a named pipe,and put the pipe's filename on the command line.When the <EMCLASS="emphasis">comm</EM> program finished, the named pipes were deleted.</P><PCLASS="para">I've run into problems with this operator in some cases:when the process reading from a named pipe &quot;hung&quot; and never made anyoutput.For example, that happened when I replaced <EMCLASS="emphasis">comm</EM> with <EMCLASS="emphasis">diff</EM>:I'd get no output from <EMCLASS="emphasis">diff</EM>.I worked around the problem byclosing the standard output of each process with the<SPANCLASS="link"><CODECLASS="literal">&gt;&amp;-</CODE> operator (<ACLASS="linkend"HREF="ch45_21.htm"TITLE="n&gt;&amp;m: Swap Standard Output and Standard Error ">45.21</A>)</SPAN>,like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">bash$ <CODECLASS="userinput"><B>diff &lt;(sort file1; exec &gt;&amp;-) &lt;(sort file2; exec &gt;&amp;-)</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">That made <EMCLASS="emphasis">diff</EM> happy; it showed me the differences between thetwo sorted files.</P><PCLASS="para"><EMCLASS="emphasis">bash</EM> also has a similar operator, <CODECLASS="literal">&gt;(&nbsp;)</CODE>, which takes theinput of a process from a named pipe.</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="UPT-ART-109-SECT-1.2">9.18.2 Automatic Temporary Files with ! </A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-10788"></A><ACLASS="indexterm"NAME="AUTOID-10791"></A>If you don't have <EMCLASS="emphasis">bash</EM>, you can use the shell script named <CODECLASS="replaceable"><I>!</I></CODE> (an exclamationpoint)[2]that runs a command, stores its output in a temporary file,then puts the temporary filename on its standard output.You use it with<SPANCLASS="link">backquotes (<ACLASS="linkend"HREF="ch09_16.htm"TITLE="Command Substitution ">9.16</A>)</SPAN>(<CODECLASS="literal">``</CODE>).Here's how to write the example from the previous section:</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[2] The C shell also uses an exclamation point as its<SPANCLASS="link">history character (<ACLASS="linkend"HREF="ch11_01.htm#UPT-ART-4920"TITLE="The Lessons of History ">11.1</A>, <ACLASS="linkend"HREF="ch11_15.htm"TITLE="Changing C Shell History Characters with histchars ">11.15</A>)</SPAN>,but not if there's a space after the exclamation point.This script doesn't conflict with <EMCLASS="emphasis">csh</EM> history.<EMCLASS="emphasis">bash</EM> uses the exclamation point to reverse the exit status of acommand&nbsp;- but then, if you're using <EMCLASS="emphasis">bash</EM>, you don't need our <EMCLASS="emphasis">!</EM>script.</P></BLOCKQUOTE><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>comm `! sort file1` `! sort file2`</B></CODE>                echo.where                foo        newprogramrcsdiff.log                runsedrunsed.new</PRE></BLOCKQUOTE></P><PCLASS="para">Why didn't I use the command line below, without the <CODECLASS="replaceable"><I>!</I></CODE> script?</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>comm `sort file1` `sort file2`</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">That's because the <EMCLASS="emphasis">comm</EM> program (like most UNIX programs)needs filename arguments.Using backquotes by themselves would place the list of names (the sortedcontents of the files <EMCLASS="emphasis">file1</EM> and <EMCLASS="emphasis">file2</EM>) on the<EMCLASS="emphasis">comm</EM> command line.</P><PCLASS="para">To see what's happening, you can usea Bourne shell and set its<SPANCLASS="link"><EMCLASS="emphasis">-x</EM> option (<ACLASS="linkend"HREF="ch08_17.htm"TITLE="verbose and echo Variables Show Quoting ">8.17</A>)</SPAN>;the shellwill display the commands it runs with a <CODECLASS="literal">+</CODE> before each one:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <CODECLASS="userinput"><B>set -x</B></CODE>$ <CODECLASS="userinput"><B>comm `! sort file1` `! sort file2`</B></CODE>+ ! sort file1 + ! sort file2 + comm /tmp/bang3969 /tmp/bang3971                 echo.where                foo        newprogramrcsdiff.log                runsedrunsed.new</PRE></BLOCKQUOTE></P><PCLASS="para">The script made its<SPANCLASS="link">temporary files (<ACLASS="linkend"HREF="ch21_03.htm"TITLE="Unique Names for Temporary Files ">21.3</A>)</SPAN>in <EMCLASS="emphasis">/tmp</EM>.You should probably remove them.If you're the only one using this script, you might be able to get awaywith a command like:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>rm /tmp/bang[1-9]*</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">If your system has more than one user, it's safer to use<SPANCLASS="link"><EMCLASS="emphasis">find</EM> (<ACLASS="linkend"HREF="ch17_01.htm#UPT-ART-7410"TITLE="The find Command Is Great; The Problem Is Finding How to Use It">17.1</A>)</SPAN>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>find /tmp -name 'bang*' -user</B></CODE> <CODECLASS="replaceable"><I>myname</I></CODE> <CODECLASS="userinput"><B>-exec rm {} \;</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">If you use this script much, you might make that cleanup command into an<SPANCLASS="link">alias (<ACLASS="linkend"HREF="ch10_02.htm"TITLE="Aliases for Common Commands ">10.2</A>)</SPAN>or a shell script&nbsp;- or start it<SPANCLASS="link">in the background (<ACLASS="linkend"HREF="ch01_26.htm"TITLE="What a Multiuser System Can Do for You ">1.26</A>)</SPAN>from your<SPANCLASS="link"><EMCLASS="emphasis">.logout</EM> file (<ACLASS="linkend"HREF="ch03_01.htm#UPT-ART-4800"TITLE="Running Commands When You Log Out ">3.1</A>, <ACLASS="linkend"HREF="ch03_02.htm"TITLE="Running Commands at Bourne/Korn Shell Logout ">3.2</A>)</SPAN>.</P><PCLASS="para">Here's the <EMCLASS="emphasis">!</EM> script.Of course, you can change the name to something besides <EMCLASS="emphasis">!</EM> if you want.</P><PCLASS="para"><TABLECLASS="screen.co"BORDER="1"><TR><THVALIGN="TOP"><PRECLASS="calloutlist">&#13;<ACLASS="co"HREF="ch44_15.htm"TITLE="44.15 Handling Command-Line Arguments in Shell Scripts ">$@</A> &#13;</PRE></TH><TDVALIGN="TOP"><PRECLASS="screen">&#13;#! /bin/shtemp=/tmp/bang$$case $# in0)  echo &quot;Usage: `basename $0` command [args]&quot; 1&gt;&amp;2    echo $temp    exit 1    ;;*)  &quot;$@&quot; &gt; $temp    echo $temp    ;;esac</PRE></TD></TR></TABLE></P><ACLASS="indexterm"NAME="AUTOID-10852"></A></DIV><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">JP</SPAN></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch09_17.htm"TITLE="9.17 Handling Lots of Text with Temporary Files "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 9.17 Handling Lots of Text with Temporary Files "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch09_19.htm"TITLE="9.19 For the Impatient: Type-Ahead "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 9.19 For the Impatient: Type-Ahead "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">9.17 Handling Lots of Text with Temporary Files </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">9.19 For the Impatient: Type-Ahead </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>