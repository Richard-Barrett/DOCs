<HTML><HEAD><TITLE>[Chapter 9] 9.21 Handle Too-Long Command Lines with xargs </TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:35:27Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch09_01.htm"TITLE="9. Saving Time on the Command Line"><LINKREL="prev"HREF="ch09_20.htm"TITLE="9.20 Too Many Files for the Command Line "><LINKREL="next"HREF="ch09_22.htm"TITLE="9.22 xargs: Problems with Spaces and Newlines "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch09_20.htm"TITLE="9.20 Too Many Files for the Command Line "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 9.20 Too Many Files for the Command Line "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 9<BR>Saving Time on the Command Line</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch09_22.htm"TITLE="9.22 xargs: Problems with Spaces and Newlines "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 9.22 xargs: Problems with Spaces and Newlines "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-5490">9.21 Handle Too-Long Command Lines with xargs </A></H2><PCLASS="para"><EMCLASS="emphasis">xargs</EM> is one of those UNIX utilities that seems pretty useless whenyou first hear about it&nbsp;- but turns into one of the handiest tools youcan have.</P><TABLECLASS="para.programreference"BORDER="1"><TR><THVALIGN="TOP"><ACLASS="programreference"HREF="examples/index.htm"TITLE="xargs">xargs</A><BR></TH><TDVALIGN="TOP">&#13;If your system doesn't already have <EMCLASS="emphasis">xargs</EM>, be sure to installit from the CD-ROM.</TD></TR></TABLE><PCLASS="para"><EMCLASS="emphasis">xargs</EM> reads a group of arguments from its standard input, then runs a UNIX command with that group of arguments.It keeps reading arguments and running the command until it runs out ofarguments.The shell's<SPANCLASS="link">backquotes (<ACLASS="linkend"HREF="ch09_16.htm"TITLE="Command Substitution ">9.16</A>)</SPAN>do the same kind of thing, but they give all the arguments to the commandat once.This can give you a<SPANCLASS="link"><CODECLASS="literal">Too many arguments</CODE> (<ACLASS="linkend"HREF="ch09_20.htm"TITLE="Too Many Files for the Command Line ">9.20</A>)</SPAN>error.</P><PCLASS="para">Here are a couple of examples:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">If you want to print most of the files in a large directory,put the output of <EMCLASS="emphasis">ls</EM> into a file.Edit the file to leave just the filenames you want printed.Give the file to <EMCLASS="emphasis">xargs</EM>' standard input:</P><PCLASS="para"><TABLECLASS="screen.co"BORDER="1"><TR><THVALIGN="TOP"><PRECLASS="calloutlist">&#13;<ACLASS="co"HREF="ch13_01.htm"TITLE="13.1 Using Standard Input and Output">&lt;</A> </PRE></TH><TDVALIGN="TOP"><PRECLASS="screen">% <CODECLASS="userinput"><B>ls &gt; allfiles.tmp</B></CODE>% <CODECLASS="userinput"><B>vi allfiles.tmp</B></CODE>% <CODECLASS="userinput"><B>xargs lpr &lt; allfiles.tmp</B></CODE></PRE></TD></TR></TABLE></P><PCLASS="para">What did that do?With lines like these in <EMCLASS="emphasis">allfiles.tmp</EM>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>cat allfiles.tmp</B></CODE>afileapplication   ...yoyotestzapme</PRE></BLOCKQUOTE></P><PCLASS="para"><EMCLASS="emphasis">xargs</EM> ran one or more <EMCLASS="emphasis">lpr</EM> commands, each with a group ofarguments, until it had read every word in the file:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">lpr afile application ...   ...lpr ... yoyotest zapme</PRE></BLOCKQUOTE></P><PCLASS="para"></P></LI><LICLASS="listitem"><PCLASS="para">The standard output of <EMCLASS="emphasis">xargs</EM> is the standard output of thecommands it runs.So, if you'd created <EMCLASS="emphasis">allfiles.tmp</EM> above but you wanted to formatthe files with<SPANCLASS="link"><EMCLASS="emphasis">pr</EM> (<ACLASS="linkend"HREF="ch43_07.htm"TITLE="Quick-and-Dirty Formatting Before Printing ">43.7</A>)</SPAN>first, you could type:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>xargs pr &lt; allfiles.tmp | lpr</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Then <EMCLASS="emphasis">xargs</EM> would run all of these <EMCLASS="emphasis">pr</EM> commands.The shell would pipe their standard outputs[4]to a single <EMCLASS="emphasis">lpr</EM> command:</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[4] Actually, the shell is piping the standard output of <EMCLASS="emphasis">xargs</EM>.As I said above, <EMCLASS="emphasis">xargs</EM> sends the standard output of commands it runsto its own standard output.</P></BLOCKQUOTE><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">pr afile application ...   ...pr ... yoyotest zapme</PRE></BLOCKQUOTE></P><PCLASS="para">In this next example,<SPANCLASS="link"><EMCLASS="emphasis">find</EM> (<ACLASS="linkend"HREF="ch17_01.htm#UPT-ART-7410"TITLE="The find Command Is Great; The Problem Is Finding How to Use It">17.1</A>)</SPAN>gets a list of all files in the directory tree.Next, we use <EMCLASS="emphasis">xargs</EM> to read those filenames and run<SPANCLASS="link"><EMCLASS="emphasis">grep -l</EM> (<ACLASS="linkend"HREF="ch15_07.htm"TITLE="Getting a List of Matching Files with grep -l ">15.7</A>)</SPAN>to find which files contain the word &quot;WARNING.&quot;Next, we pipe that to a setup with <EMCLASS="emphasis">pr</EM> and <EMCLASS="emphasis">lpr</EM>, like the onein the previous example:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>find . -type f -print | xargs grep -l WARNING | xargs pr | lpr</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">&quot;Huh?&quot; you might say.Just take that step by step.The output of <EMCLASS="emphasis">find</EM> is a list of filenames, like <CODECLASS="literal">./afile ./bfile ... ./adir/zfile</CODE> and so on.The first <EMCLASS="emphasis">xargs</EM> gives those filenames to one or more <EMCLASS="emphasis">grep -l</EM>commands:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">&#13;grep -l WARNING ./afile ./bfile ...   ...grep -l WARNING ./adir/zfile ...</PRE></BLOCKQUOTE></P><PCLASS="para">&#13;The standard output of all those <EMCLASS="emphasis">grep</EM>s is a (shortened) list offilenames that match.That's piped to another <EMCLASS="emphasis">xargs</EM>-it runs <EMCLASS="emphasis">pr</EM> commands with thefilenames that <EMCLASS="emphasis">grep</EM> found.</P><PCLASS="para">UNIX is weird and wonderful!</P></LI><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11115"></A>Sometimes you don't want <EMCLASS="emphasis">xargs</EM> to run its command with as manyarguments as it can fit on the command line.The <EMCLASS="emphasis">-n</EM> option sets the maximum number of arguments <EMCLASS="emphasis">xargs</EM>will give to each command.Another handy option, <EMCLASS="emphasis">-p</EM>, prompts you before running each command.</P><PCLASS="para">Here's a directory full of files with errors (whose names end with<EMCLASS="emphasis">.bad</EM>) and corrected versions (named <EMCLASS="emphasis">.fixed</EM>).I use <EMCLASS="emphasis">ls</EM> to give the list of files to <EMCLASS="emphasis">xargs</EM>; it reads twofilenames at once, then asks whether I want to run <EMCLASS="emphasis">diff -c</EM> to comparethose two files.It keeps prompting me and running <EMCLASS="emphasis">diff -c</EM>until it runs out of file pairs:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>ls</B></CODE>chap1.badchap1.fixedchap2.badchap2.fixed    ...chap9.badchap9.fixed% <CODECLASS="userinput"><B>ls | xargs -p -n2 diff -c</B></CODE>diff -c chap1.bad chap1.fixed ?...<CODECLASS="userinput"><B>y</B></CODE>   ...<EMCLASS="emphasis">Output of diff command for chap1</EM>...diff -c chap2.bad chap2.fixed ?...<CODECLASS="userinput"><B>n</B></CODE>diff -c chap3.bad chap3.fixed ?...<CODECLASS="userinput"><B>y</B></CODE>   ...<EMCLASS="emphasis">Output of diff command for chap3</EM>...    ...</PRE></BLOCKQUOTE></P></LI></UL><PCLASS="para">As the<SPANCLASS="link">next article (<ACLASS="linkend"HREF="ch09_22.htm"TITLE="xargs: Problems with Spaces and Newlines ">9.22</A>)</SPAN>explains, <EMCLASS="emphasis">xargs</EM> can have trouble if an argument has white spaceinside a word.Luckily, the GNU <EMCLASS="emphasis">xargs</EM> (read about it there) solves the problem.</P><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">JP</SPAN></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch09_20.htm"TITLE="9.20 Too Many Files for the Command Line "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 9.20 Too Many Files for the Command Line "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch09_22.htm"TITLE="9.22 xargs: Problems with Spaces and Newlines "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 9.22 xargs: Problems with Spaces and Newlines "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">9.20 Too Many Files for the Command Line </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">9.22 xargs: Problems with Spaces and Newlines </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>