<HTML><HEAD><TITLE>[Chapter 10] 10.2 Aliases for Common Commands </TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:35:43Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch10_01.htm"TITLE="10. Aliases"><LINKREL="prev"HREF="ch10_01.htm"TITLE="10.1 Creating Custom Commands "><LINKREL="next"HREF="ch10_03.htm"TITLE="10.3 C Shell Aliases with Command-Line Arguments "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch10_01.htm"TITLE="10.1 Creating Custom Commands "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 10.1 Creating Custom Commands "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 10<BR>Aliases</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch10_03.htm"TITLE="10.3 C Shell Aliases with Command-Line Arguments "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 10.3 C Shell Aliases with Command-Line Arguments "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-2340">10.2 Aliases for Common Commands </A></H2><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11624"></A><ACLASS="indexterm"NAME="AUTOID-11627"></A><ACLASS="indexterm"NAME="AUTOID-11630"></A>The C shells, <EMCLASS="emphasis">ksh</EM> and <EMCLASS="emphasis">bash</EM> have an &quot;alias&quot; facility that lets youdefine abbreviations for commonly used commands. Aliases can get verycomplicated, so we'll give just an introduction here. We'll usethe <EMCLASS="emphasis">csh</EM> alias syntax here;article<ACLASS="xref"HREF="ch10_04.htm"TITLE="Aliases in ksh and bash ">10.4</A>shows <EMCLASS="emphasis">bash</EM> and <EMCLASS="emphasis">ksh</EM>.</P><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="UPT-ART-2340-SECT-1.1">10.2.1 Simple Aliases </A></H3><PCLASS="para">The simplest kind of alias is simply a new name for an oldcommand. For example, you might want to rename the <EMCLASS="emphasis">ls</EM> commandas <EMCLASS="emphasis">dir</EM> because you're used to DOS or VMS systems. That's easilydone:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">alias dir ls</PRE></BLOCKQUOTE></P><PCLASS="para">&#13;<EMCLASS="emphasis">dir</EM> is the new name; from now on, typing <CODECLASS="literal">dir</CODE> as a commandis equivalent to typing <CODECLASS="literal">ls</CODE>. Some other commonly used aliasesare:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">alias la ls -a         # include &quot;hidden&quot; files in listingsalias lf ls -F         # show whether files are directories, etc.alias lr ls -R         # list recursively-show directory contentsalias ri rm -i         # ask before deletingalias mi mv -i         # ask before moving over an existing file</PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11653"></A><ACLASS="indexterm"NAME="AUTOID-11656"></A>In a <EMCLASS="emphasis">.cshrc</EM> file, the hash mark (<CODECLASS="literal">#</CODE>) means thatthe rest of the line is a comment.Describing your aliases can help you remember what they're for.That's an especially good idea for complicated aliases you write&nbsp;- like thealiases in the next section.</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="UPT-ART-2340-SECT-1.2">10.2.2 Using More Complex Aliases </A></H3><PCLASS="para">Here are a few aliases that Ifind useful; you'll have to adapt them to your own circumstances:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">alias emacs /home/src/emacs/bin/emacs                       alias clean &quot;rm *~ .*~ core *.bak&quot;                          alias vtext 'setenv EXINIT &quot;source $HOME/.exrc.text&quot; ; vi'  alias vprog 'setenv EXINIT &quot;source $HOME/.exrc.prog&quot; ; vi'</PRE></BLOCKQUOTE></P><PCLASS="para">Let's look at these aliases more closely.The <EMCLASS="emphasis">emacs</EM> alias isn't anything fancy; it's just a way ofremembering a long command name, without having to<SPANCLASS="link">add another directory to your search path (<ACLASS="linkend"HREF="ch08_07.htm"TITLE="Setting Your Search Path ">8.7</A>)</SPAN>for a single command.(I find longsearch paths aesthetically unappealing.They can also slow your system down, although the C shell uses a<SPANCLASS="link">hash table (<ACLASS="linkend"HREF="glossary.htm#UPT-ART-1010"TITLE="Glossary">52.9</A>)</SPAN>to speed up searching.On the other hand, it takes time to read aliases like <EMCLASS="emphasis">emacs</EM>from your <EMCLASS="emphasis">.cshrc</EM> file into the shell.Defining lots of aliases, instead of simply changing your search path, candelay logins and<SPANCLASS="link">subshells (<ACLASS="linkend"HREF="ch38_04.htm"TITLE="Subshells ">38.4</A>)</SPAN>.If you have a fast computer, it may not matter whether you use lots ofaliases or have a long search path.)</P><PCLASS="para">The <EMCLASS="emphasis">clean</EM> alias is great; it deletes GNU Emacs backup files and <SPANCLASS="link"><EMCLASS="emphasis">core</EM> (<ACLASS="linkend"HREF="glossary.htm#UPT-ART-1010"TITLE="Glossary">52.9</A>)</SPAN>files (which I usually don't keep around) and other miscellany.Rather than have some complex &quot;auto-cleaning&quot; system that runs from<EMCLASS="emphasis">cron</EM>, I just occasionally type <CODECLASS="literal">clean</CODE> in my current directory.Everyone should have an alias like this and doctorit so that it gets rid of as much junk as possible.(A lot of people, though, would tell you not to be so quick to deleteyour editor's backup files. Use your own judgment.)</P><PCLASS="para">The third and fourth aliases are a bit clever, in a primitive sort of way. You type the command <CODECLASS="literal">vtext&nbsp;afile</CODE>; the shell separates the commands atthe semicolon and executes one after the other:</P><PCLASS="para"><TABLECLASS="screen.co"BORDER="1"><TR><THVALIGN="TOP"><PRECLASS="calloutlist"><ACLASS="co"HREF="ch14_11.htm"TITLE="14.11 Finding (Anyone's) Home Directory, Quickly ">$HOME</A> &#13;</PRE></TH><TDVALIGN="TOP"><PRECLASS="screen">setenv EXINIT &quot;source $HOME/.exrc.text&quot;vi afile</PRE></TD></TR></TABLE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11685"></A>The first command sets the<EMCLASS="emphasis">EXINIT</EM><SPANCLASS="link">environment variable (<ACLASS="linkend"HREF="ch06_01.htm#UPT-ART-1170"TITLE="What Environment Variables Are Good For ">6.1</A>)</SPAN>;this makes <EMCLASS="emphasis">vi</EM> read a particular<SPANCLASS="link">setup file (<ACLASS="linkend"HREF="ch04_09.htm"TITLE="Setting Up vi with the .exrc File ">4.9</A>)</SPAN>named <EMCLASS="emphasis">.exrc.text</EM>in the home directory.The second command starts <EMCLASS="emphasis">vi</EM> with whatever arguments you type.You aren't limited to just one filename.You can type whatever arguments you want, including more filenamesand <EMCLASS="emphasis">vi</EM> options; they're all tacked on after <CODECLASS="literal">vi</CODE>. There aremore graceful ways to<ACLASS="indexterm"NAME="AUTOID-11695"></A><ACLASS="indexterm"NAME="AUTOID-11698"></A><SPANCLASS="link">get command-line arguments into aliases (<ACLASS="linkend"HREF="ch10_03.htm"TITLE="C Shell Aliases with Command-Line Arguments ">10.3</A>)</SPAN>,but this does the trick when the arguments go on the end of an alias.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11703"></A>Note that we put this alias in quotes.Why? Because it's a compoundcommand (<EMCLASS="emphasis">setenv</EM>, then <EMCLASS="emphasis">vi</EM>).We want the alias toinclude both stages of the command. Think about what this means if wedon't put quotes around the alias definition when defining the alias:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">alias vtext setenv EXINIT &quot;source $HOME/.exrc.text&quot; ; vi    <EMCLASS="emphasis">Wrong!</EM></PRE></BLOCKQUOTE></P><PCLASS="para">The shell sees the<SPANCLASS="link">semicolon (<ACLASS="linkend"HREF="ch08_05.htm"TITLE="Command-Line Evaluation ">8.5</A>)</SPAN>(a command separator) outside of quotes,so it separates the command line into two commands.The first command defines the <EMCLASS="emphasis">vtext</EM> alias to run <EMCLASS="emphasis">setenv</EM>,not <EMCLASS="emphasis">vi</EM>.After the alias is defined, the shell runs the second command:<EMCLASS="emphasis">vi</EM> with no filename.In any case, the results have nothing to do with what you want.</P><PCLASS="para">The way we originally defined the <EMCLASS="emphasis">vtext</EM> alias, with quotesaround the whole definition, is what we want.The outer quotes tell the shell to put everything into the aliasdefinition.The semicolon in the alias will be interpreted, and separate the two commands,any time you use the alias.</P><PCLASS="para">Next, look at the <EMCLASS="emphasis">clean</EM> alias.As with the <EMCLASS="emphasis">vtext</EM> alias, this one needs to be quoted.Thereason now is a bit different; the quotes prevent the shellfrom expanding the <CODECLASS="literal">*</CODE> wildcard immediately. That is, if you just typed:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>alias clean rm *~</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">the shell would expand the wildcard immediately.So if a file named <EMCLASS="emphasis">foo~</EM> is in your current directory, the<EMCLASS="emphasis">clean</EM> alias will be <CODECLASS="literal">rm</CODE>&nbsp;<CODECLASS="literal">foo~</CODE>.That (most likely) isn't what you want; a<EMCLASS="emphasis">clean</EM> alias that will only delete one particular file isn't veryinteresting.</P><PCLASS="para">So you need a way to prevent the shell from interpreting the <CODECLASS="literal">*</CODE> rightnow (when you define the alias); you want the shell to interpret <CODECLASS="literal">*</CODE>later, when you use the alias.There are plenty of articles in this book about <SPANCLASS="link">quoting (<ACLASS="linkend"HREF="ch08_14.htm"TITLE="Bourne Shell Quoting ">8.14</A>, <ACLASS="linkend"HREF="ch08_15.htm"TITLE="Differences Between Bourne and C Shell Quoting ">8.15</A>)</SPAN>,but thesimplest way to write an alias that uses wildcards (or other specialcharacters) is to put it inside of quotation marks.</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="UPT-ART-2340-SECT-1.3">10.2.3 Setting Aliases Automatically, Unsetting Aliases </A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11739"></A><ACLASS="indexterm"NAME="AUTOID-11742"></A>Any aliases you define can be placed in your <EMCLASS="emphasis">.cshrc</EM> file, sothat they'll be available whenever you're using the C shell.(Note: aliases are<SPANCLASS="link"><EMCLASS="emphasis">not</EM> passed to subprocesses (<ACLASS="linkend"HREF="ch02_02.htm"TITLE="Shell Setup Files-Which, Where, and Why ">2.2</A>)</SPAN>,so putting themin your <EMCLASS="emphasis">.login</EM> file probably isn't wise.)</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11750"></A>Some people like to use aliases to redefine UNIX commands.For instance, you could make an alias named <EMCLASS="emphasis">rm</EM> that actuallyruns <EMCLASS="emphasis">mv</EM>, moving a file to a &quot;trashcan&quot; directory instead ofactually removing it.[1]Redefining commands can be<SPANCLASS="link">confusing or dangerous (<ACLASS="linkend"HREF="ch10_06.htm"TITLE="Avoiding C Shell Alias Loops ">10.6</A>)</SPAN>.Still, in some cases, aliases that redefine commands can be useful.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[1] Article<ACLASS="xref"HREF="ch23_09.htm"TITLE="delete: Protecting Files from Accidental Deletion ">23.9</A>shows the <EMCLASS="emphasis">delete</EM> programs, a better way to do this.</P></BLOCKQUOTE><PCLASS="para">To temporarily use the default <EMCLASS="emphasis">rm</EM> (not your alias named <EMCLASS="emphasis">rm</EM>),type <SPANCLASS="link">a backslash (<CODECLASS="literal">\</CODE>) before the name (<ACLASS="linkend"HREF="ch08_12.htm"TITLE="Which One Will the C Shell Use? ">8.12</A>)</SPAN>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>\rm</B></CODE> <CODECLASS="replaceable"><I>filename</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">To use the default <EMCLASS="emphasis">rm</EM> for the rest of your login session:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>unalias rm</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Unless you remove the definition from <EMCLASS="emphasis">.cshrc</EM>, the alias is restored the next time you log in(or the next time you create any new C shell).</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11777"></A>A final piece of trivia: the C shell manual page tells us that aliasescan be nested; that is, they can refer to other aliases. Personally,I think this would get too complicated too quickly to be very useful,so I don't do it and can't recommend it. But you can try.</P></DIV><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">ML</SPAN>, <SPANCLASS="authorinitials">JP</SPAN>, <SPANCLASS="authorinitials">DG</SPAN></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch10_01.htm"TITLE="10.1 Creating Custom Commands "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 10.1 Creating Custom Commands "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch10_03.htm"TITLE="10.3 C Shell Aliases with Command-Line Arguments "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 10.3 C Shell Aliases with Command-Line Arguments "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">10.1 Creating Custom Commands </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">10.3 C Shell Aliases with Command-Line Arguments </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>