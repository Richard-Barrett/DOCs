<HTML><HEAD><TITLE>[Chapter 10] 10.3 C Shell Aliases with Command-Line Arguments </TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:35:46Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch10_01.htm"TITLE="10. Aliases"><LINKREL="prev"HREF="ch10_02.htm"TITLE="10.2 Aliases for Common Commands "><LINKREL="next"HREF="ch10_04.htm"TITLE="10.4 Aliases in ksh and bash "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch10_02.htm"TITLE="10.2 Aliases for Common Commands "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 10.2 Aliases for Common Commands "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 10<BR>Aliases</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch10_04.htm"TITLE="10.4 Aliases in ksh and bash "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 10.4 Aliases in ksh and bash "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-2341">10.3 C Shell Aliases with Command-Line Arguments </A></H2><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11786"></A><ACLASS="indexterm"NAME="AUTOID-11789"></A><ACLASS="indexterm"NAME="AUTOID-11792"></A>It's convenient for your aliases to use command-line arguments. Forexample, let's think about an alias named <EMCLASS="emphasis">phone</EM>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">alias phone 'cat ~/phonelist | grep -i'</PRE></BLOCKQUOTE></P><PCLASS="para">After you define that alias, you could type <EMCLASS="emphasis">phone smith</EM>.The shell would find the <EMCLASS="emphasis">phone</EM> alias and execute it<SPANCLASS="link">with the argument (<EMCLASS="emphasis">smith</EM>) at the end (<ACLASS="linkend"HREF="ch10_02.htm"TITLE="Aliases for Common Commands ">10.2</A>)</SPAN>this way:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">cat ~/phonelist | grep -i smith</PRE></BLOCKQUOTE></P><PCLASS="para">Using <EMCLASS="emphasis">cat</EM> and a pipe that way is<SPANCLASS="link">inefficient (<ACLASS="linkend"HREF="ch13_02.htm"TITLE="One Argument with a cat Isn't Enough ">13.2</A>)</SPAN>.It might be more sensible to have an alias that worked likethis:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">grep -i <CODECLASS="replaceable"><I>name</I></CODE> ~/phonelist</PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11812"></A><ACLASS="indexterm"NAME="AUTOID-11815"></A>How do we do this?The C shell's<SPANCLASS="link">history (<ACLASS="linkend"HREF="ch11_07.htm"TITLE="History Substitutions ">11.7</A>)</SPAN>facility lets us use thenotation <CODECLASS="literal">!$</CODE> to refer to the last word in the previous command;the notation <CODECLASS="literal">!*</CODE> refers to all the arguments of the previous command.Assuming that we only want to look up aliases one at a time, we canuse <CODECLASS="literal">!$</CODE> and write our alias like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">alias phone grep -i \!$ ~/phonelist</PRE></BLOCKQUOTE></P><PCLASS="para">When we use the <EMCLASS="emphasis">phone</EM> command, its final argument will be substitutedinto the alias. That is, when we type <CODECLASS="literal">phone&nbsp;bill</CODE>, the shellexecutes the command <CODECLASS="literal">grep&nbsp;-i&nbsp;bill&nbsp;~/phonelist</CODE>.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11830"></A>In this example, we needed another kind of quoting. We had to put abackslash before the exclamation point to prevent the shell fromreplacing <CODECLASS="literal">!$</CODE> with the previous command's last argument. That is, wedon't want the shell to expand <CODECLASS="literal">!$</CODE> when we define the alias&nbsp;- that'snonsense. We want the shell to insert the previous argument when weuse the alias (in which case, the previous argument is just theargument for the alias itself&nbsp;- clear?).</P><PCLASS="para">But why couldn't we just use <SPANCLASS="link">single quotes or double quotes (<ACLASS="linkend"HREF="ch08_14.htm"TITLE="Bourne Shell Quoting ">8.14</A>)</SPAN>?This isn't the right place for a full explanation, but neither single quotes nordouble quotes protect the exclamation point.<SPANCLASS="link"> The backslash does . (<ACLASS="linkend"HREF="ch08_15.htm"TITLE="Differences Between Bourne and C Shell Quoting ">8.15</A>)</SPAN>If you want to be convinced, experiment withsome commands like:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>echo '!!'   </B></CODE><EMCLASS="emphasis">Print your last command</EM>% <CODECLASS="userinput"><B>echo '\!!'   </B></CODE><EMCLASS="emphasis">Print !!</EM></PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11845"></A>The first <EMCLASS="emphasis">echo</EM> command shows that the shell performs historysubstitution (i.e., replaces <CODECLASS="literal">!!</CODE> with your previous command) in spiteof the single quotes. The second example shows that the backslash canprevent the shell from interpreting <CODECLASS="literal">!</CODE> as a special character.</P><PCLASS="para">Let's look at another alias. We want to pipe the output of <EMCLASS="emphasis">ls -l</EM> into<SPANCLASS="link"><EMCLASS="emphasis">more</EM> (<ACLASS="linkend"HREF="ch25_03.htm"TITLE="Using more to Page Through Files ">25.3</A>)</SPAN>.In this case, we would want all the argumentsfrom the command line instead of merely the last argument (or theonly argument). Here's the alias:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">alias lm 'ls -l \!* | more'</PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-11857"></A><ACLASS="indexterm"NAME="AUTOID-11860"></A>This time, we needed both kinds of quoting:A backslash prevents the shell from interpreting the exclamation pointimmediately.Single quotes protect the pipe symbol and the asterisk (<CODECLASS="literal">*</CODE>).If you don't protect them both, and only protect the pipe (with abackslash), look what happens:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>alias lm ls -l \!*  more</B></CODE>alias: No match.</PRE></BLOCKQUOTE></P><PCLASS="para">Because the backslash temporarily stops the special meaning of the <CODECLASS="literal">!</CODE>,the shell next tries to find filenames that match the<SPANCLASS="link">wildcard (<ACLASS="linkend"HREF="ch01_16.htm"TITLE="Wildcards ">1.16</A>)</SPAN>pattern <CODECLASS="literal">!*</CODE>.That fails (except in the unusual case when you have a file in thecurrent directory whose name starts with a <CODECLASS="replaceable"><I>!</I></CODE>).</P><BLOCKQUOTECLASS="note"><PCLASS="para"><STRONG>NOTE:</STRONG> <ACLASS="indexterm"NAME="AUTOID-11874"></A><ACLASS="indexterm"NAME="AUTOID-11877"></A>Here's a good general rule for quoting aliases.Unless you're trying to do something specialwith an alias and you understand quoting well, put single quotes(<CODECLASS="literal">'</CODE>) around the whole definition and put a backslash beforeevery exclamation point (<CODECLASS="literal">/!</CODE>).</P></BLOCKQUOTE><PCLASS="para">Finally, if you want to pick one argument from the command line, use<CODECLASS="literal">/!:</CODE><CODECLASS="replaceable"><I>n</I></CODE>, where <CODECLASS="replaceable"><I>n</I></CODE> is the number of the argument. Here's one finalalias.It uses<SPANCLASS="link"><EMCLASS="emphasis">cat</EM> (<ACLASS="linkend"HREF="ch25_02.htm"TITLE="Four Ways to Skin a cat ">25.2</A>)</SPAN>to add a header file to the file named in the first argument, thenwrites them both into the file named in the second argument:</P><PCLASS="para"><TABLECLASS="screen.co"BORDER="1"><TR><THVALIGN="TOP"><PRECLASS="calloutlist"><ACLASS="co"HREF="ch14_11.htm"TITLE="14.11 Finding (Anyone's) Home Directory, Quickly ">~</A> </PRE></TH><TDVALIGN="TOP"><PRECLASS="screen">alias addhead 'cat ~/txt/header \!:1 &gt; \!:2'</PRE></TD></TR></TABLE></P><PCLASS="para">This alias has two arguments: the file to which you want to add aheader and the output file. When you type:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>addhead foo bar</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">&#13;the C shell substitutes the filename <CODECLASS="literal">foo</CODE> for <CODECLASS="literal">/!:1</CODE>, and thefilename <CODECLASS="literal">bar</CODE> for <CODECLASS="literal">/!:2</CODE>, executing the command:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">cat ~/txt/header foo &gt; bar</PRE></BLOCKQUOTE></P><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">ML</SPAN>, <SPANCLASS="authorinitials">JP</SPAN></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch10_02.htm"TITLE="10.2 Aliases for Common Commands "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 10.2 Aliases for Common Commands "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch10_04.htm"TITLE="10.4 Aliases in ksh and bash "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 10.4 Aliases in ksh and bash "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">10.2 Aliases for Common Commands </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">10.4 Aliases in ksh and bash </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>