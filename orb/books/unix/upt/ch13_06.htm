<HTML><HEAD><TITLE>[Chapter 13] 13.6 Safe I/O Redirection with noclobber </TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:36:44Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch13_01.htm"TITLE="13. Redirecting Input and Output"><LINKREL="prev"HREF="ch13_05.htm"TITLE="13.5 Redirection in C Shell: Capture Errors, Too? "><LINKREL="next"HREF="ch13_07.htm"TITLE="13.7 The () Subshell Operators "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch13_05.htm"TITLE="13.5 Redirection in C Shell: Capture Errors, Too? "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 13.5 Redirection in C Shell: Capture Errors, Too? "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 13<BR>Redirecting Input and Output</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch13_07.htm"TITLE="13.7 The () Subshell Operators "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 13.7 The () Subshell Operators "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-1190">13.6 Safe I/O Redirection with noclobber </A></H2><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-14353"></A><ACLASS="indexterm"NAME="AUTOID-14355"></A>Have you ever destroyed a file accidentally?If you set the <EMCLASS="emphasis">noclobber</EM> C shell variable,or the <EMCLASS="emphasis">noclobber</EM> option in <EMCLASS="emphasis">bash</EM> and <EMCLASS="emphasis">ksh</EM>,it can help you avoid these mistakes.Setting <EMCLASS="emphasis">noclobber</EM> preventsyou from destroying a file when you are<SPANCLASS="link">redirecting standard output (<ACLASS="linkend"HREF="ch13_01.htm#UPT-ART-1023"TITLE="Using Standard Input and Output">13.1</A>)</SPAN>.</P><PCLASS="para">Consider the following situation:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="replaceable"><I>anycommand </I></CODE><CODECLASS="userinput"><B>&gt; outputfile</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">The command above destroys the old <EMCLASS="emphasis">outputfile</EM> and creates a newone. If you have misspelled the name of your output file, or if youhave forgotten that the file already exists and contains importantdata, or (most common) if you really meant to type <CODECLASS="literal">&gt;&gt;</CODE> instead of <CODECLASS="literal">&gt;</CODE>(i.e., if you really meant to append to the end of <EMCLASS="emphasis">outputfile</EM>,rather than start a new one), tough luck; your old data is gone.</P><PCLASS="para">Setting the variable <EMCLASS="emphasis">noclobber</EM> prevents this problem. If<EMCLASS="emphasis">noclobber</EM> exists, the C shell will not allow I/O redirection todestroy an existing file, unless you explicitly tell it to by adding anexclamation point (<CODECLASS="literal">!</CODE>) after the C shell redirect symbol&nbsp;- or a<ACLASS="indexterm"NAME="AUTOID-14378"></A>vertical bar (<CODECLASS="literal">|</CODE>) in <EMCLASS="emphasis">ksh</EM> and <EMCLASS="emphasis">bash</EM>.Here are examples.The left column shows <EMCLASS="emphasis">csh</EM> and <EMCLASS="emphasis">tcsh</EM>;the right column is for <EMCLASS="emphasis">bash</EM> (<EMCLASS="emphasis">ksh</EM> is similar):</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>set noclobber</B></CODE>             $ <CODECLASS="userinput"><B>set -o noclobber</B></CODE>% <CODECLASS="userinput"><B>ls</B></CODE>                         $ <CODECLASS="userinput"><B>ls</B></CODE>filea fileb                filea fileb% <CODECLASS="userinput"><B>anyprogram &gt; fileb</B></CODE>       $ <CODECLASS="userinput"><B>anyprogram &gt; fileb</B></CODE>fileb: File exists.        bash: fileb: Cannot clobber existing file% <CODECLASS="userinput"><B>anyprogram &gt;! fileb</B></CODE>      $ <CODECLASS="userinput"><B>anyprogram &gt;| fileb</B></CODE>%                            $</PRE></BLOCKQUOTE></P><PCLASS="para">Be sure to put space after the <CODECLASS="literal">!</CODE>.If you don't, the C shell thinks you're making a history reference and it(usually) prints an error like <CODECLASS="literal">fileb: Event not found.</CODE></P><PCLASS="para">Remember that <EMCLASS="emphasis">noclobber</EM> is not an environment variable,so any new shells you create<SPANCLASS="link">won't inherit it (<ACLASS="linkend"HREF="ch06_08.htm"TITLE="Shell Variables ">6.8</A>)</SPAN>.Therefore, if you want this feature, put the <EMCLASS="emphasis">set</EM> command (above) inyour shell's<SPANCLASS="link">setup file (<ACLASS="linkend"HREF="ch02_02.htm"TITLE="Shell Setup Files-Which, Where, and Why ">2.2</A>)</SPAN>.</P><BLOCKQUOTECLASS="note"><PCLASS="para"><STRONG>NOTE:</STRONG> In some C shells, <EMCLASS="emphasis">noclobber</EM> will prevent you from redirecting standardoutput to<SPANCLASS="link"><EMCLASS="emphasis">/dev/null</EM> (<ACLASS="linkend"HREF="ch13_14.htm"TITLE="What Can You Do with an Empty File? ">13.14</A>)</SPAN>or to a terminal unless you add the <CODECLASS="literal">!</CODE>.</P></BLOCKQUOTE><PCLASS="para">The C shell <EMCLASS="emphasis">noclobber</EM> variable has one other feature that's worth noting.Normally, the C shell lets you append to a file that doesn't exist.If <EMCLASS="emphasis">noclobber</EM> is set under <EMCLASS="emphasis">csh</EM> and <EMCLASS="emphasis">tcsh</EM>,it won't; you can only append to files thatalready exist unless you use an exclamation point:&#13;</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>ls</B></CODE>filea fileb% <CODECLASS="replaceable"><I>anyprogram </I></CODE><CODECLASS="userinput"><B>&gt;&gt; filec</B></CODE>filec: No such file or directory% <CODECLASS="replaceable"><I>anyprogram </I></CODE><CODECLASS="userinput"><B>&gt;&gt;! filec</B></CODE>%</PRE></BLOCKQUOTE></P><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">ML</SPAN>, <SPANCLASS="authorinitials">JP</SPAN></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch13_05.htm"TITLE="13.5 Redirection in C Shell: Capture Errors, Too? "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 13.5 Redirection in C Shell: Capture Errors, Too? "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch13_07.htm"TITLE="13.7 The () Subshell Operators "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 13.7 The () Subshell Operators "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">13.5 Redirection in C Shell: Capture Errors, Too? </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">13.7 The () Subshell Operators </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>