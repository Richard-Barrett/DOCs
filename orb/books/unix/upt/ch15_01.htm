<HTML><HEAD><TITLE>[Chapter 15] Wildcards</TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:37:19Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="part03.htm"TITLE="III. Working with the Filesystem "><LINKREL="prev"HREF="ch14_14.htm"TITLE="14.14 Automatic Setup When You Enter/Exit a Directory "><LINKREL="next"HREF="ch15_02.htm"TITLE="15.2 Filename Wildcards in a Nutshell "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch14_14.htm"TITLE="14.14 Automatic Setup When You Enter/Exit a Directory "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 14.14 Automatic Setup When You Enter/Exit a Directory "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 15</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch15_02.htm"TITLE="15.2 Filename Wildcards in a Nutshell "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 15.2 Filename Wildcards in a Nutshell "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="CHAPTER"><H1CLASS="chapter"><ACLASS="title"NAME="UPT-CHP-15">15. Wildcards</A></H1><DIVCLASS="htmltoc"><P><B>Contents:</B><BR><ACLASS="sect1"HREF="#UPT-ART-1480"TITLE="15.1 File Naming Wildcards ">File Naming Wildcards </A><BR><ACLASS="sect1"HREF="ch15_02.htm"TITLE="15.2 Filename Wildcards in a Nutshell ">Filename Wildcards in a Nutshell </A><BR><ACLASS="sect1"HREF="ch15_03.htm"TITLE="15.3 Adding { } Operators to Korn (and Bourne) Shells ">Adding { } Operators to Korn (and Bourne) Shells </A><BR><ACLASS="sect1"HREF="ch15_04.htm"TITLE="15.4 What if a Wildcard Doesn't Match? ">What if a Wildcard Doesn't Match? </A><BR><ACLASS="sect1"HREF="ch15_05.htm"TITLE='15.5 Matching All "Dot Files&quot; with Wildcards'>Matching All &quot;Dot Files&quot; with Wildcards</A><BR><ACLASS="sect1"HREF="ch15_06.htm"TITLE="15.6 Maybe You Shouldn't Use Wildcards in Pathnames ">Maybe You Shouldn't Use Wildcards in Pathnames </A><BR><ACLASS="sect1"HREF="ch15_07.htm"TITLE="15.7 Getting a List of Matching Files with grep -l ">Getting a List of Matching Files with grep -l </A><BR><ACLASS="sect1"HREF="ch15_08.htm"TITLE="15.8 Getting a List of Non-Matching Files with grep -c ">Getting a List of Non-Matching Files with grep -c </A><BR><ACLASS="sect1"HREF="ch15_09.htm"TITLE="15.9 nom: List Files that Don't Match a Wildcard ">nom: List Files that Don't Match a Wildcard </A><BR><ACLASS="sect1"HREF="ch15_10.htm"TITLE="15.10 Wildcards that Match Only Directories ">Wildcards that Match Only Directories </A></P><P></P></DIV><DIVCLASS="sect1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-1480">15.1 File Naming Wildcards </A></H2><PCLASS="para"><SPANCLASS="link">Wildcards (<ACLASS="linkend"HREF="ch01_16.htm"TITLE="Wildcards ">1.16</A>)</SPAN><ACLASS="indexterm"NAME="UPT-ART-1480-IX-WILDCARDS-FILE-NAMING"></A><ACLASS="indexterm"NAME="UPT-ART-1480-IX-FILENAMES-WILDCARDS-AND"></A><ACLASS="indexterm"NAME="AUTOID-15986"></A>are the shell's way of abbreviating filenames.Just as in poker,where a wildcard is a special card that can match any card in the deck, filename wildcards are capable ofmatching letters, or groups of letters, in the alphabet. Rather thantyping a long filename, or a long chain of filenames, a wildcard letsyou provide parts of names, and then use some &quot;wildcard characters&quot; forthe rest. For example, if you want to delete all files whose namesend in <EMCLASS="emphasis">.o</EM>, you can give the command:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>rm *.o</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">You don't have to list every filename.</P><PCLASS="para">I'm sure you already know that wildcards are useful in manysituations. If not, they are summarized in article<ACLASS="xref"HREF="ch15_02.htm"TITLE="Filename Wildcards in a Nutshell ">15.2</A>.Here are a few of my favorite wildcard applications:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">If you remember part of a filename, but not the whole name, you canuse wildcards to help you find it. If I have a file on genetics savedin a directory with several hundred other files, a command like: </P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>ls *gene*</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">will often find what I want. It's quicker and easier than<SPANCLASS="link"><EMCLASS="emphasis">find</EM> (<ACLASS="linkend"HREF="ch17_01.htm#UPT-ART-7410"TITLE="The find Command Is Great; The Problem Is Finding How to Use It">17.1</A>)</SPAN>.</P></LI><LICLASS="listitem"><PCLASS="para">Wildcards are a natural when you want to work with groups of files.If I have a general purpose directory that's full of filenames endingin <EMCLASS="emphasis">.c</EM> and <EMCLASS="emphasis">.h</EM>, I can make new subdirectories and usewildcards to move the files easily:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>mkdir c h</B></CODE>% <CODECLASS="userinput"><B>mv *.c c</B></CODE>% <CODECLASS="userinput"><B>mv *.h h</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para"></P></LI><LICLASS="listitem"><PCLASS="para">Wildcards often help you to work with files with inconvenient characters intheir names. Let's say you have a file named <CODECLASS="literal">abc</CODE><CODECLASS="replaceable"><I>x</I></CODE><CODECLASS="literal">e</CODE>, where<CODECLASS="replaceable"><I>x</I></CODE> is some unknown control character. You can delete orrename that file by using the wildcarded name <CODECLASS="literal">abc?e</CODE>. (When youdo this, be careful that your wildcard doesn't match more than you intend.)</P></LI><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-16025"></A><ACLASS="indexterm"NAME="AUTOID-16028"></A>Wildcards can appear in any component of a pathname. This can oftenbe used to your advantage. For example, let's say that you have adirectory named <EMCLASS="emphasis">/work</EM>, split into subdirectories for a dozendifferent projects. For each project, you have a schedule, in a filecalled (obviously enough) <EMCLASS="emphasis">schedule.txt</EM>. You can print all theschedules with the command:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>lpr /work/*/schedule.txt   </B></CODE><EMCLASS="emphasis">BSD UNIX</EM>% <CODECLASS="userinput"><B>lp  /work/*/schedule.txt   </B></CODE><EMCLASS="emphasis">System V UNIX</EM></PRE></BLOCKQUOTE></P><PCLASS="para">(However, you can occasionally<SPANCLASS="link">run into problems (<ACLASS="linkend"HREF="ch15_06.htm"TITLE="Maybe You Shouldn't Use Wildcards in Pathnames ">15.6</A>)</SPAN>.)</P></LI></UL><PCLASS="para">It's a common misconception, particularly among new users, thatapplication programs and utilities have something to do withwildcards.Given a command like <CODECLASS="literal">grep&nbsp;ident&nbsp;*.c</CODE>, many users thinkthat <EMCLASS="emphasis">grep</EM> handles the <CODECLASS="literal">*</CODE> and looks to see which files have namesthat end in <EMCLASS="emphasis">.c</EM>. If you're at all familiar with UNIX'sworkings, you'll realize that this is the wrong picture. The shellinterprets wildcards.That is, the shell figures out which files havenames ending in <EMCLASS="emphasis">.c</EM>, puts them in a list, puts that list on thecommand line, and then hands that command line to <EMCLASS="emphasis">grep</EM>. As itprocesses the command line, the shell turns <CODECLASS="literal">grep&nbsp;ident&nbsp;*.c</CODE> into <CODECLASS="literal">grep&nbsp;ident&nbsp;file1.c&nbsp;file2.c&nbsp;...</CODE>.</P><PCLASS="para">Since there are several shells, one might think (or fear!) that thereshould be several different sets of wildcards. Fortunately, therearen't. The C shell has made onesignificant extension (the<SPANCLASS="link">curly brace operators (<ACLASS="linkend"HREF="ch09_05.htm"TITLE="Build Strings with {&nbsp;} ">9.5</A>)</SPAN>),and the Korn shell has made a few more, but thebasic wildcards work the same for all shells.</P><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">ML</SPAN></P></DIV></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch14_14.htm"TITLE="14.14 Automatic Setup When You Enter/Exit a Directory "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 14.14 Automatic Setup When You Enter/Exit a Directory "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch15_02.htm"TITLE="15.2 Filename Wildcards in a Nutshell "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 15.2 Filename Wildcards in a Nutshell "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">14.14 Automatic Setup When You Enter/Exit a Directory </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">15.2 Filename Wildcards in a Nutshell </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>