<HTML><HEAD><TITLE>[Chapter 17] 17.6 Be an Expert on find Search Operators </TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:38:19Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch17_01.htm"TITLE="17. Finding Files with find"><LINKREL="prev"HREF="ch17_05.htm"TITLE="17.5 Searching for Old Files "><LINKREL="next"HREF="ch17_07.htm"TITLE="17.7 The Times that find Finds "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch17_05.htm"TITLE="17.5 Searching for Old Files "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 17.5 Searching for Old Files "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 17<BR>Finding Files with find</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch17_07.htm"TITLE="17.7 The Times that find Finds "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 17.7 The Times that find Finds "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-1580">17.6 Be an Expert on find Search Operators </A></H2><PCLASS="para"><EMCLASS="emphasis">find</EM> is admittedly tricky. Once you get a handle on itsabilities, you'll learn to appreciate its trickiness. But before thinking about anything remotely tricky, let's look at asimple <EMCLASS="emphasis">find</EM> command:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>find . -name &quot;*.c&quot; -print</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">The <CODECLASS="literal">.</CODE> tells <EMCLASS="emphasis">find</EM> to start its search in<SPANCLASS="link">the current directory (<CODECLASS="literal">.</CODE>) (<ACLASS="linkend"HREF="ch01_21.htm"TITLE="Making Pathnames ">1.21</A>)</SPAN>,and to search all subdirectories of the currentdirectory.The<SPANCLASS="link"><CODECLASS="literal">-name&nbsp;&quot;*.c&quot;</CODE> (<ACLASS="linkend"HREF="ch17_04.htm"TITLE="Looking for Files with Particular Names ">17.4</A>)</SPAN>tells <EMCLASS="emphasis">find</EM> to findfiles whose names end in <EMCLASS="emphasis">.c</EM>.The <EMCLASS="emphasis">-print</EM> operator tells <EMCLASS="emphasis">find</EM> how to handlewhat it finds: print the names on standard output.</P><PCLASS="para">All <EMCLASS="emphasis">find</EM> commands, no matter how complicated, are really justvariations on the one above.You can specify many different names, look forold files, and so on; no matter how complex, you're really onlyspecifying a starting point, some search parameters, and what to dowith the files (or directories or links or...) you find.</P><PCLASS="para">The key to using <EMCLASS="emphasis">find</EM> in a more sophisticated way is realizingthat search parameters are really &quot;logical expressions&quot; that <EMCLASS="emphasis">find</EM>evaluates.That is, <EMCLASS="emphasis">find</EM>:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">Looks at every file, one at a time.</P></LI><LICLASS="listitem"><PCLASS="para">Uses the information in the file's<SPANCLASS="link">inode (<ACLASS="linkend"HREF="ch01_22.htm"TITLE="How UNIX Keeps Track of Files: Inodes ">1.22</A>)</SPAN>to evaluate an expression given by the command-line operators.</P></LI><LICLASS="listitem"><PCLASS="para">Takes the specified action (e.g., printing the file's name) if theexpression's value is &quot;true.&quot;</P></LI></UL><PCLASS="para">So, something like <CODECLASS="literal">-name&nbsp;&lt;&quot;&gt;*.c&lt;&quot;&gt;</CODE> is really a logical expressionthat evaluates to true if the file's name ends in <EMCLASS="emphasis">.c</EM>.</P><PCLASS="para">Once you've gotten used to thinking this way, it's easy to use theAND, OR, NOT, and grouping operators. So let's think about amore complicated <EMCLASS="emphasis">find</EM> command. Let's look for files that end in <EMCLASS="emphasis">.o</EM> or <EMCLASS="emphasis">.tmp</EM> AND that are more than five days old,AND print their pathnames. We want an expression that evaluates true for fileswhose names match either <EMCLASS="emphasis">*.o</EM> OR <EMCLASS="emphasis">*.tmp</EM>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">-name &quot;*.o&quot; -o -name &quot;*.tmp&quot;</PRE></BLOCKQUOTE></P><PCLASS="para">If either condition is true, we want to check the access time.So we put the expression above within parentheses(<SPANCLASS="link">quoted (<ACLASS="linkend"HREF="ch08_14.htm"TITLE="Bourne Shell Quoting ">8.14</A>)</SPAN>with backslashes so the shell doesn't treat the parentheses as<SPANCLASS="link">subshell operators (<ACLASS="linkend"HREF="ch13_07.htm"TITLE="The () Subshell Operators ">13.7</A>)</SPAN>).We also add a<SPANCLASS="link"><EMCLASS="emphasis">-atime</EM> operator (<ACLASS="linkend"HREF="ch17_05.htm"TITLE="Searching for Old Files ">17.5</A>)</SPAN>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">-atime +5 \( -name &quot;*.o&quot; -o -name &quot;*.tmp&quot; \)</PRE></BLOCKQUOTE></P><PCLASS="para">The parentheses force <EMCLASS="emphasis">find</EM> to evaluate what's inside as a unit.The expression is true if &quot;the access time is more than 5 daysago and \( either the name ends with <EMCLASS="emphasis">.o</EM> or the name ends with<EMCLASS="emphasis">.tmp</EM> \).&quot;If you didn't use parentheses, the expression would mean something different:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">-atime +5 -name &quot;*.o&quot; -o -name &quot;*.tmp&quot;   <EMCLASS="emphasis">Wrong!</EM></PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-18666"></A>When <EMCLASS="emphasis">find</EM> sees two operators next to each other with no <EMCLASS="emphasis">-o</EM> between,that means AND.So the &quot;wrong&quot; expression is true if &quot;either \( the access time is morethan 5&nbsp;days ago and the name ends with <EMCLASS="emphasis">.o</EM> \) or the name ends with<EMCLASS="emphasis">.tmp</EM>.&quot;This incorrect expression would be true for any name ending with<EMCLASS="emphasis">.tmp</EM>, no matter how recently the file was accessed&nbsp;- the<CODECLASS="literal">-atime</CODE> doesn't apply.(There's nothing really &quot;wrong&quot; or illegal in this secondexpression&nbsp;- except that it's not what we want.<EMCLASS="emphasis">find</EM> will accept the expression and do what we asked&nbsp;- it just won'tdo what we want.)</P><PCLASS="para">The following command, which is what we want, lists files in the currentdirectory and subdirectories that match our criteria:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>find . -atime +5 \( -name &quot;*.o&quot; -o -name &quot;*.tmp&quot; \) -print</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">What if we wanted to list all files that do <EMCLASS="emphasis">not</EM> match thesecriteria? All we want is the logical inverse of this expression. The<ACLASS="indexterm"NAME="AUTOID-18682"></A><ACLASS="indexterm"NAME="AUTOID-18685"></A>NOT operator is <CODECLASS="literal">!</CODE> (exclamation point). The <CODECLASS="literal">!</CODE> operatorapplies to the expression on its right. Since we want it to apply to the entire expression, and not just the <EMCLASS="emphasis">-atime</EM> operator,we'll have to group everything from <CODECLASS="literal">-atime</CODE> to <CODECLASS="literal">&quot;*.tmp&quot;</CODE>within another set of parentheses.</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>find . ! \( -atime +5 \( -name &quot;*.o&quot; -o -name &quot;*.tmp&quot; \) \) -print</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">For that matter, even <EMCLASS="emphasis">-print</EM> is an expression; it always evaluatesto true.So are<SPANCLASS="link"><EMCLASS="emphasis">-exec</EM> and <EMCLASS="emphasis">-ok</EM> (<ACLASS="linkend"HREF="ch17_10.htm"TITLE="Running Commands on What You Find ">17.10</A>)</SPAN>;they evaluate to truewhen the command they execute returns a zero status. (There are afew situations in which this can be used to good effect; see article<ACLASS="xref"HREF="ch17_11.htm"TITLE="Using -exec to Create Custom Tests ">17.11</A>for some of those.)Article<ACLASS="xref"HREF="ch17_12.htm"TITLE="Finding Many Things with One Command ">17.12</A>has more about <EMCLASS="emphasis">find</EM> expressions.</P><PCLASS="para">But before you try anything too complicated, you need to realize onething.<EMCLASS="emphasis">find</EM> isn't as sophisticated as you might like it to be.You can't squeeze all the spaces out of expressions, as if it were a<ACLASS="indexterm"NAME="AUTOID-18706"></A>real programming language. You need spaces before and after operatorslike <CODECLASS="literal">!</CODE>, <CODECLASS="literal">\(</CODE>, <CODECLASS="literal">\)</CODE>, and <CODECLASS="literal">{}</CODE>, in addition tospaces before and after every other operator.Therefore, a command linelike the following won't work:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>find . !\(-atime +5 \(-name &quot;*.o&quot; -o -name &quot;*.tmp&quot;\)\) -print</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">A true power user will realize that <EMCLASS="emphasis">find</EM> is relying on theshell to<SPANCLASS="link">separate the command line into meaningful chunks (<ACLASS="linkend"HREF="ch08_05.htm"TITLE="Command-Line Evaluation ">8.5</A>)</SPAN>,<ACLASS="indexterm"NAME="AUTOID-18719"></A><ACLASS="indexterm"NAME="AUTOID-18721"></A>or <EMCLASS="emphasis">tokens</EM>.And the shell, inturn, is assuming that tokens are separated by spaces. Whenthe shell gives <EMCLASS="emphasis">find</EM> a chunk of characters like<CODECLASS="literal">*.tmp))</CODE> (without the double quotes or backslashes&nbsp;- the shell took themaway), <EMCLASS="emphasis">find</EM> getsconfused; it thinks you're talking about a weird filename pattern thatincludes a couple of parentheses.</P><PCLASS="para">Once you start thinking about expressions, <EMCLASS="emphasis">find</EM>'s syntax ceasesto be obscure&nbsp;- in some ways, it's even elegant. It certainly allowsyou to say what you need to say with reasonable efficiency.</P><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">ML</SPAN>, <SPANCLASS="authorinitials">JP</SPAN></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch17_05.htm"TITLE="17.5 Searching for Old Files "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 17.5 Searching for Old Files "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch17_07.htm"TITLE="17.7 The Times that find Finds "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 17.7 The Times that find Finds "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">17.5 Searching for Old Files </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">17.7 The Times that find Finds </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>