<HTML><HEAD><TITLE>[Chapter 17] 17.10 Running Commands on What You Find </TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:38:23Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch17_01.htm"TITLE="17. Finding Files with find"><LINKREL="prev"HREF="ch17_09.htm"TITLE="17.9 Problems with -newer "><LINKREL="next"HREF="ch17_11.htm"TITLE="17.11 Using -exec to Create Custom Tests "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch17_09.htm"TITLE="17.9 Problems with -newer "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 17.9 Problems with -newer "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 17<BR>Finding Files with find</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch17_11.htm"TITLE="17.11 Using -exec to Create Custom Tests "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 17.11 Using -exec to Create Custom Tests "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-1590">17.10 Running Commands on What You Find </A></H2><PCLASS="para"><EMCLASS="emphasis">[Often, when you find a file, you don't just want to see its name; youwant to do something, like </EM>grep<EMCLASS="emphasis"> for a text string. To do this,use the </EM>-exec<EMCLASS="emphasis"> operator. Thisallows you to specify a command that is executedupon each file that is found. -TOR&nbsp;]</EM></P><PCLASS="para"><ACLASS="indexterm"NAME="UPT-ART-1590-IX-FIND-COMMAND-EXEC-OPTION-EXEC"></A>The syntax is peculiar and in many cases, it is simpler just to<SPANCLASS="link">pipe the output of <EMCLASS="emphasis">find</EM> to <EMCLASS="emphasis">xargs</EM> (<ACLASS="linkend"HREF="ch17_02.htm"TITLE="Delving Through a Deep Directory Tree ">17.2</A>)</SPAN>.However, there are cases where <EMCLASS="emphasis">-exec</EM> is just the thing, so let's plungein and explain its peculiarities.</P><PCLASS="para">The<EMCLASS="emphasis">-exec</EM>operator allows you to execute any command, includinganother <EMCLASS="emphasis">find</EM> command.If you consider that for a moment, you realize that<EMCLASS="emphasis">find</EM>needs some way to distinguish the command it's executing from itsown arguments.The obvious choice is to use the same end-of-command character as theshell (i.e., the semicolon).Since the shell<SPANCLASS="link">uses the semicolon (<ACLASS="linkend"HREF="ch08_05.htm"TITLE="Command-Line Evaluation ">8.5</A>)</SPAN>itself, it is necessary toescape the character with a backslash or quotes.</P><PCLASS="para">Therefore, every <EMCLASS="emphasis">-exec</EM> operator ends with the characters <CODECLASS="literal">\;</CODE>.There is one more special argument that<EMCLASS="emphasis">find</EM>treats differently:<ACLASS="indexterm"NAME="AUTOID-18870"></A><CODECLASS="literal">{}</CODE>.These two characters are used as the variable whose name is the file<EMCLASS="emphasis">find</EM>found.Don't bother rereading that last line.An example will clarify the usage.The following is a trivial case, and uses the<EMCLASS="emphasis">-exec</EM>operator with<SPANCLASS="link"><EMCLASS="emphasis">echo</EM> (<ACLASS="linkend"HREF="ch08_06.htm"TITLE="Output Command-Line Arguments ">8.6</A>)</SPAN>to mimic the<EMCLASS="emphasis">-print</EM>operator:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>find . -exec echo {} \;</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">The C shelluses the characters<SPANCLASS="link"><CODECLASS="literal">{</CODE> and <CODECLASS="literal">}</CODE> (<ACLASS="linkend"HREF="ch09_05.htm"TITLE="Build Strings with {&nbsp;} ">9.5</A>)</SPAN>,but doesn't change<CODECLASS="literal">{}</CODE> together,which is why it is not necessary to quote these characters.The semicolon must be quoted, however.Quotes can be used instead of a backslash:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>find . -exec echo {} ';'</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">as both will sneak the semicolon past the shell and get it to the<EMCLASS="emphasis">find</EM>command.As I said before,<EMCLASS="emphasis">find</EM>can even call<EMCLASS="emphasis">find</EM>.If you wanted to list every symbolic link in every directory owned by a group<EMCLASS="emphasis">staff</EM>,you could execute:</P><PCLASS="para"><TABLECLASS="screen.co"BORDER="1"><TR><THVALIGN="TOP"><PRECLASS="calloutlist"><ACLASS="co"HREF="ch09_16.htm"TITLE="9.16 Command Substitution ">`...`</A> </PRE></TH><TDVALIGN="TOP"><PRECLASS="screen">% <CODECLASS="userinput"><B>find `pwd` -type d -group staff -exec find {} -type l -print \;</B></CODE></PRE></TD></TR></TABLE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-18900"></A><ACLASS="indexterm"NAME="AUTOID-18903"></A><ACLASS="indexterm"NAME="AUTOID-18906"></A>To search for all files with group-write permission and remove thepermission,you can use:</P><PCLASS="para"><TABLECLASS="screen.co"BORDER="1"><TR><THVALIGN="TOP"><PRECLASS="calloutlist"><ACLASS="co"HREF="ch17_15.htm"TITLE="17.15 Searching for Files by Permission ">-perm</A> </PRE></TH><TDVALIGN="TOP"><PRECLASS="screen">% <CODECLASS="userinput"><B>find . -perm -20 -exec chmod g-w {} \;</B></CODE></PRE></TD></TR></TABLE></P><PCLASS="para">or:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>find . -perm -20 -print | xargs chmod g-w </B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">The difference between<EMCLASS="emphasis">-exec</EM>and<EMCLASS="emphasis">xargs</EM>is subtle.The first one will execute the program once per file, while<EMCLASS="emphasis">xargs</EM>can handle several files with each process.However,<EMCLASS="emphasis">xargs</EM>may have<SPANCLASS="link">problems (<ACLASS="linkend"HREF="ch09_22.htm"TITLE="xargs: Problems with Spaces and Newlines ">9.22</A>)</SPAN>with filenames that contain embedded spaces.</P><PCLASS="para">Occasionally people create a strange file that they can't delete.This could be caused by accidentally creating a file with a spaceor some control character in the name.<EMCLASS="emphasis">find</EM>and<EMCLASS="emphasis">-exec</EM>can delete this file, while<EMCLASS="emphasis">xargs</EM>could not.In this case, use<EMCLASS="emphasis">ls -il</EM>to list the files and<SPANCLASS="link">i-numbers (<ACLASS="linkend"HREF="ch01_22.htm"TITLE="How UNIX Keeps Track of Files: Inodes ">1.22</A>)</SPAN>,and use the<ACLASS="indexterm"NAME="AUTOID-18930"></A><SPANCLASS="link"><EMCLASS="emphasis">-inum</EM> operator with <EMCLASS="emphasis">-exec</EM> (<ACLASS="linkend"HREF="ch23_16.htm"TITLE="Removing a Strange File by its I-number ">23.16</A>)</SPAN>to delete the file:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>find . -inum 31246 -exec rm {} ';'</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-18940"></A>If you wish, you can use<EMCLASS="emphasis">-ok</EM>which does the same as<EMCLASS="emphasis">-exec</EM>,except the program asks you first to confirm the actionbefore executing the command.It is a good idea to be cautious when using<EMCLASS="emphasis">find</EM>,because the program can make a mistake into a disaster.When in doubt, use<EMCLASS="emphasis">echo</EM>as the command.Or send the output to a file and examine the filebefore using the file as input to<EMCLASS="emphasis">xargs</EM>.This is how I discovered that<EMCLASS="emphasis">find</EM>requires<CODECLASS="literal">{}</CODE>to stand alonein the arguments to<EMCLASS="emphasis">-exec</EM>.I wanted to rename some files using<CODECLASS="literal">-exec&nbsp;mv&nbsp;{}&nbsp;{}.orig</CODE>but <EMCLASS="emphasis">find</EM> wouldn't replace the <CODECLASS="literal">{}</CODE> in <CODECLASS="literal">{}.orig</CODE>.I learned that I have to<SPANCLASS="link">write a shell script (<ACLASS="linkend"HREF="ch17_11.htm"TITLE="Using -exec to Create Custom Tests ">17.11</A>)</SPAN>that I tell<EMCLASS="emphasis">find</EM>to execute.[A little Bourne shell<SPANCLASS="link"><EMCLASS="emphasis">while</EM> loop (<ACLASS="linkend"HREF="ch44_10.htm"TITLE="Loops That Test Exit Status ">44.10</A>)</SPAN>with<SPANCLASS="link">redirected input (<ACLASS="linkend"HREF="ch45_23.htm"TITLE="The Ins and Outs of Redirected I/O Loops ">45.23</A>)</SPAN>can handle that too:&#13;</P><PCLASS="para"><TABLECLASS="screen.co"BORDER="1"><TR><THVALIGN="TOP"><PRECLASS="calloutlist">&#13;<ACLASS="co"HREF="ch17_15.htm"TITLE="17.15 Searching for Files by Permission ">&gt;</A> &#13;</PRE></TH><TDVALIGN="TOP"><PRECLASS="screen">$ <CODECLASS="userinput"><B>find ... -print |</B></CODE>&gt; <CODECLASS="userinput"><B>while read file</B></CODE>&gt; <CODECLASS="userinput"><B>do mv &quot;$file&quot; &quot;$file.orig&quot;</B></CODE>&gt; <CODECLASS="userinput"><B>done</B></CODE></PRE></TD></TR></TABLE></P><PCLASS="para"><EMCLASS="emphasis">find</EM> writes the filenames to its standard output.The <EMCLASS="emphasis">while</EM> loop and its<SPANCLASS="link"><EMCLASS="emphasis">read</EM> command (<ACLASS="linkend"HREF="ch44_13.htm"TITLE="read: Reading from the Keyboard ">44.13</A>)</SPAN>read the filenames from standard input, then make themavailable as <CODECLASS="literal">$file</CODE>, one by one. <EMCLASS="emphasis">-JP</EM>&nbsp;]</P><PCLASS="para">Articles<ACLASS="xref"HREF="ch17_12.htm"TITLE="Finding Many Things with One Command ">17.12</A>and<ACLASS="xref"HREF="ch17_24.htm"TITLE="Skipping Some Parts of a Tree in find (A More Selective -prune)">17.24</A>have more examples of <EMCLASS="emphasis">-exec</EM>.</P><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">BB</SPAN></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch17_09.htm"TITLE="17.9 Problems with -newer "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 17.9 Problems with -newer "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch17_11.htm"TITLE="17.11 Using -exec to Create Custom Tests "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 17.11 Using -exec to Create Custom Tests "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">17.9 Problems with -newer </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">17.11 Using -exec to Create Custom Tests </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>