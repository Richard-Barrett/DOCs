<HTML><HEAD><TITLE>[Chapter 18] 18.3 Files with Two or More Names</TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:38:54Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch18_01.htm"TITLE="18. Linking, Renaming, and Copying Files"><LINKREL="prev"HREF="ch18_02.htm"TITLE="18.2 What's Really in a Directory "><LINKREL="next"HREF="ch18_04.htm"TITLE="18.4 More About Links "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch18_02.htm"TITLE="18.2 What's Really in a Directory "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 18.2 What's Really in a Directory "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 18<BR>Linking, Renaming, and Copying Files</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch18_04.htm"TITLE="18.4 More About Links "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 18.4 More About Links "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-1470">18.3 Files with Two or More Names</A></H2><PCLASS="para"><ACLASS="indexterm"NAME="UPT-ART-1470-IX-FILES-NAMING"></A><ACLASS="indexterm"NAME="UPT-ART-1470-IX-NAMING-MULTIPLE-NAMES-FOR-ONE-FILE"></A><ACLASS="indexterm"NAME="UPT-ART-1470-IX-MULTIPLE-NAMES-FOR-ONE-FILE"></A><ACLASS="indexterm"NAME="UPT-ART-1470-IX-SYMBOLIC-LINKS-ADVANTAGES"></A>We talk about hard links and symbolic links in<SPANCLASS="link">a number of places (<ACLASS="linkend"HREF="ch18_04.htm"TITLE="More About Links ">18.4</A>, <ACLASS="linkend"HREF="ch18_05.htm"TITLE="Creating and Removing Links ">18.5</A>, <ACLASS="linkend"HREF="ch24_04.htm"TITLE="Save Space with a Link ">24.4</A>)</SPAN>.However, we've never really said <EMCLASS="emphasis">why</EM> you'd want a file withseveral names. When I was learning UNIX, this was a big stumblingblock. It was easy to understand what a link would <EMCLASS="emphasis">do</EM>, but whywould you want one?</P><PCLASS="para">With time, I acquired wisdom. There are many situations that links(and only links) are able to handle. Once you've seen a few of theproblems that a link can solve, you'll start seeing even moresituations in which they are appropriate.</P><PCLASS="para">Consider a companyphone list on a system that is shared by several users. Every usermight want a copy of the phone list in his or her home directory.However, you wouldn't want to give each user a different phone list.In addition to wasting disk space, it would be a pain to modify all ofthe individual lists whenever you made a change. Giving each user a&quot;link&quot; to a master phone list is one way to solve the problem.</P><PCLASS="para">Similarly, assumethat you use several different systems that share files via<SPANCLASS="link">NFS (<ACLASS="linkend"HREF="ch01_33.htm"TITLE="UNIX Networking and Communications ">1.33</A>)</SPAN>.Eventually, you get tired of editing five or six different <SPANCLASS="link"><EMCLASS="emphasis">.login</EM> and <EMCLASS="emphasis">.cshrc</EM> (<ACLASS="linkend"HREF="ch02_02.htm"TITLE="Shell Setup Files-Which, Where, and Why ">2.2</A>)</SPAN>files whenever you decide to add a newalias or change some element in your startup file; you'd like to havethe exact same file appear in eachof your home directories. You might also want to give severalsystems access to the same master database files.</P><PCLASS="para">How about this: you have a program or script that performs severalrelated functions.Why not perform them all with the sameexecutable?All the script or program needs to do is check thename it's called by, and act accordingly.Article<ACLASS="xref"HREF="ch45_13.htm"TITLE="Save Disk Space and Programming: Multiple Names for a Program">45.13</A>explains how this works;articles<ACLASS="xref"HREF="ch08_08.htm"TITLE="A Directory for Commands You Shouldn't Run ">8.8</A>,<ACLASS="xref"HREF="ch16_07.htm"TITLE="ls Shortcuts: ll, lf, lg, etc. ">16.7</A>,and <ACLASS="xref"HREF="ch22_10.htm"TITLE="cx, cw, c-w: Quick File Permission Changes ">22.10</A>show scripts that act differently depending on their (current) name.</P><PCLASS="para">Yet another example.Assume that you have two versions of a file: a current version,which changes from time to time, and one or more older versions. Onegood convention would be to name the files <CODECLASS="literal">data.</CODE><CODECLASS="replaceable"><I>date</I></CODE>, where<CODECLASS="replaceable"><I>date</I></CODE> shows when the file was created. Forexample, you might have the files <EMCLASS="emphasis">data.jul1</EM>, <EMCLASS="emphasis">data.jul2</EM>,<EMCLASS="emphasis">data.jul5</EM>, and so on. However, when you access these files, youdon't necessarily want to figure out the date&nbsp;- not unless youhave a better chronological sense than I do. To make it easier onyourself, create a link (either symbolic or hard) named <EMCLASS="emphasis">data.cur</EM>that always refers to your most recent file.The following script runs the program <EMCLASS="emphasis">output</EM>, puts thedata into a dated file, and resets <EMCLASS="emphasis">data.cur</EM>:</P><PCLASS="para"><TABLECLASS="screen.co"BORDER="1"><TR><THVALIGN="TOP"><PRECLASS="calloutlist">&#13;<ACLASS="co"HREF="ch51_10.htm"TITLE="51.10 The date Command ">+%h%d</A> &#13;</PRE></TH><TDVALIGN="TOP"><PRECLASS="screen">#!/bin/shcurfile=data.`date +%h%d`linkname=data.curoutput &gt; $curfilerm -f $linknameln -s $curfile $linkname</PRE></TD></TR></TABLE></P><PCLASS="para">Here's an analogous problem. When writing technical manuals at onecompany, I had two classes of readers: some insisted on referring tothe manuals by name, and the others by (believe it or not) part number.Rather than looking up part numbers all the time, I created a set oflinks so that I could look up a manual online either via its name orvia its part number. For example, if the manual was named&quot;Programming&quot; and had the part number 046-56-3343, I would createthe file <EMCLASS="emphasis">/manuals/byname/programming</EM>. I would then create the link<EMCLASS="emphasis">/manuals/bynumber/046-56-3343</EM>:</P><PCLASS="para"><TABLECLASS="screen.co"BORDER="1"><TR><THVALIGN="TOP"><PRECLASS="calloutlist">&#13;<ACLASS="co"HREF="ch01_21.htm"TITLE="1.21 Making Pathnames ">..</A> </PRE></TH><TDVALIGN="TOP"><PRECLASS="screen">% <CODECLASS="userinput"><B>cd /manuals/bynumber</B></CODE>% <CODECLASS="userinput"><B>ln -s ../byname/programming 046-56-3343</B></CODE></PRE></TD></TR></TABLE></P><PCLASS="para">Sometimes you simply want to collect an assortment of files in onedirectory. These files may really belong in other places, but youwant to collect them for some temporary purpose: for example, to makea tape.Let's say that you want to make a tape thatincludes manual pages from <EMCLASS="emphasis">/development/doc/man/man1</EM>, a manualfrom <EMCLASS="emphasis">/development/doc/product</EM>, source files from<EMCLASS="emphasis">/src/ccode</EM>, and a set of executables from<EMCLASS="emphasis">/release/68000/execs</EM>.The shell script below creates links for all of thesedirectories within the <EMCLASS="emphasis">/tmp/tape</EM> directory, and then creates a<SPANCLASS="link"><EMCLASS="emphasis">tar</EM> (<ACLASS="linkend"HREF="ch20_01.htm#UPT-ART-8024"TITLE="tar in a Nutshell ">20.1</A>)</SPAN>tape that can be sent to a customer or friend.Note that the <EMCLASS="emphasis">tar&nbsp;h</EM> option tells <EMCLASS="emphasis">tar</EM> to follow symbolic links andarchive whatever is at the end of the link; otherwise, <EMCLASS="emphasis">tar</EM>makes a copy of just the symbolic link:</P><PCLASS="para"><TABLECLASS="screen.co"BORDER="1"><TR><THVALIGN="TOP"><PRECLASS="calloutlist">&#13;<ACLASS="co"HREF="ch21_02.htm"TITLE="21.2 A Better Place for Temporary Files: /tmp ">/tmp</A> &#13;</PRE></TH><TDVALIGN="TOP"><PRECLASS="screen">#!/bin/shmkdir /tmp/tapecd /tmp/taperm -f man1 product ccode execsln -s /development/doc/man/man1ln -s /development/doc/productln -s /src/ccodeln -s /release/68000/execstar ch ./man1 ./product ./ccode ./execs</PRE></TD></TR></TABLE></P><PCLASS="para">This really only scrapes the surface.Links provide neat solutions tomany problems, including source control, filesystem layout, etc.<ACLASS="indexterm"NAME="AUTOID-20219"></A><ACLASS="indexterm"NAME="AUTOID-20220"></A><ACLASS="indexterm"NAME="AUTOID-20221"></A><ACLASS="indexterm"NAME="AUTOID-20222"></A></P><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">ML</SPAN></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch18_02.htm"TITLE="18.2 What's Really in a Directory "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 18.2 What's Really in a Directory "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch18_04.htm"TITLE="18.4 More About Links "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 18.4 More About Links "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">18.2 What's Really in a Directory </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">18.4 More About Links </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>