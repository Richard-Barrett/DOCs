<HTML><HEAD><TITLE>[Chapter 20] 20.6 Writing a Tape Drive on a Remote Machine </TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-10-23T15:44:55Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch20_01.htm"TITLE="20. Backing Up Files"><LINKREL="prev"HREF="ch20_05.htm"TITLE="20.5 Using tar to a Remote Tape Drive "><LINKREL="next"HREF="ch20_07.htm"TITLE="20.7 Creating a Timestamp File for Selective Backups "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch20_05.htm"TITLE="20.5 Using tar to a Remote Tape Drive "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 20.5 Using tar to a Remote Tape Drive "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 20<BR>Backing Up Files</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch20_07.htm"TITLE="20.7 Creating a Timestamp File for Selective Backups "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 20.7 Creating a Timestamp File for Selective Backups "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-6050">20.6 Writing a Tape Drive on a Remote Machine </A></H2><PCLASS="para">[Bruce Barnett introduces this topic in article<ACLASS="xref"HREF="ch20_05.htm"TITLE="Using tar to a Remote Tape Drive ">20.5</A>.-JP]</P><PCLASS="para">In news posting <EMCLASS="emphasis">&lt;5932@tahoe.unr.edu&gt; malc@equinox.unr.edu</EM> (Malcolm Carlock) asked how to make <EMCLASS="emphasis">tar</EM> write a remote tape drive via<SPANCLASS="link"><EMCLASS="emphasis">rsh</EM> (<ACLASS="linkend"HREF="ch01_33.htm"TITLE="UNIX Networking and Communications ">1.33</A>)</SPAN>and<SPANCLASS="link"><EMCLASS="emphasis">dd</EM> (<ACLASS="linkend"HREF="ch35_06.htm"TITLE="Low-Level File Butchery with dd ">35.6</A>)</SPAN>.Here's the answer:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>tar cf - . | rsh foo dd of=/dev/</B></CODE><CODECLASS="replaceable"><I>device</I></CODE> <CODECLASS="userinput"><B>obs=20b</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-22135"></A><ACLASS="indexterm"NAME="AUTOID-22138"></A><ACLASS="indexterm"NAME="AUTOID-22141"></A><ACLASS="indexterm"NAME="AUTOID-22143"></A><ACLASS="indexterm"NAME="AUTOID-22146"></A>Be forewarned that most incarnations of <EMCLASS="emphasis">dd</EM> are extremely slow at handling this.</P><PCLASS="para">What is going on? This answer requires some background:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-22154"></A><ACLASS="indexterm"NAME="AUTOID-22156"></A><ACLASS="indexterm"NAME="AUTOID-22158"></A><ACLASS="indexterm"NAME="AUTOID-22160"></A>Tapes have &quot;block sizes.&quot; Not all tapes, mind you&nbsp;- most SCSItapes have a fixed block size that can, for the most part, beignored. Nine-track tapes, however, typically record data in&quot;records&quot; separated by &quot;gaps,&quot; and only whole records can bereread later.</P></LI><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-22164"></A><ACLASS="indexterm"NAME="AUTOID-22166"></A>In order to accommodate this, UNIX tape drivers generally translateeach <EMCLASS="emphasis">read(&nbsp;)</EM> or <EMCLASS="emphasis">write(&nbsp;)</EM> system call into a single record transfer.The size of a written record is the number of bytes passed to<EMCLASS="emphasis">write(&nbsp;)</EM>. (There may be some additional constraints, such as&quot;the size must be even&quot; or &quot;the size must be no more than 32768&nbsp;bytes.&quot; Note that phase-encoded (1600-bpi) blocks should be nolonger than 10240 bytes, and GCR (6250-bpi) blocks should be nolonger than 32768 bytes, to reduce the chance of an unrecoverableerror.) Each <EMCLASS="emphasis">read(&nbsp;)</EM> call must ask for at least one whole record(many drivers get this wrong and silently drop trailing portionsof a record that was longer than the byte count given to <EMCLASS="emphasis">read(&nbsp;)</EM>);each <EMCLASS="emphasis">read(&nbsp;)</EM> returns the actual number of bytes in the record.</P></LI><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-22176"></A>Network connections are generally &quot;byte streams&quot;: the two host&quot;peers&quot; (above, the machine running <EMCLASS="emphasis">tar</EM>, and the machine with thetape drive) will exchange data but will drop any &quot;record boundary&quot;notion at the protocol-interface level. If record boundaries areto be preserved, this must be done in a layer above the networkprotocol itself. (Not all network protocols are stream-oriented,not even flow-controlled, error-recovering protocols. Internet RDPand XNS SPP are two examples of reliable record-oriented protocols.Many of these, however, impose fairly small record sizes.)</P></LI><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-22182"></A><EMCLASS="emphasis">rsh</EM> simply opens a stream protocol, and does no work to preserve&quot;packet boundaries.&quot;</P></LI><LICLASS="listitem"><PCLASS="para"><EMCLASS="emphasis">dd</EM> works in mysterious ways:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">dd if=x of=y</PRE></BLOCKQUOTE></P><PCLASS="para">is the same as:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">dd if=x of=y ibs=512 obs=512</PRE></BLOCKQUOTE></P><PCLASS="para">which means: open files <EMCLASS="emphasis">x</EM> and <EMCLASS="emphasis">y</EM>, then loop doing <EMCLASS="emphasis">read(fd_x)</EM> with a byte count of 512, take whatever you got, copy it into an outputbuffer for file <EMCLASS="emphasis">y</EM>, and each time that buffer reaches 512&nbsp;bytes,do a single <EMCLASS="emphasis">write(fd_y)</EM> with 512&nbsp;bytes.</P><PCLASS="para">On the other hand:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">dd if=x of=y bs=512</PRE></BLOCKQUOTE></P><PCLASS="para">means something completely different: open files <EMCLASS="emphasis">x</EM> and <EMCLASS="emphasis">y</EM>, thenloop doing <EMCLASS="emphasis">read(fd_x)</EM> with a byte count of 512, take whateveryou got, and do a single <EMCLASS="emphasis">write(fd_y)</EM> with that count.All of this means that:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>tar cf - . | rsh otherhost dd of=/dev/</B></CODE><CODECLASS="replaceable"><I>device</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">will write 512-byte blocks (not what you wanted), while:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>tar cf - . | rsh otherhost dd of=/dev/</B></CODE><CODECLASS="replaceable"><I>device</I></CODE> <CODECLASS="userinput"><B>bs=20b</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">will be even worse: it will take whatever it gets from <EMCLASS="emphasis">stdin</EM>-which,being a TCP connection, will be arbitrarily lumpy depending on theunderlying network parameters and the particular TCP implementation&nbsp;- and write essentially random-sized records.On purely &quot;local&quot; (Ethernet) connections, with typical implementations, you will wind up with 1024-byte blocks (a <EMCLASS="emphasis">tar</EM> &quot;block factor&quot; of 2).</P></LI></UL><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-22221"></A>If a blocking factor of 2 is acceptable, and if <EMCLASS="emphasis">cat</EM>forces 1024-byte blocks (both true in some cases), you can use:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>tar cf - . | rsh otherhost &quot;cat &gt;/dev/</B></CODE><CODECLASS="replaceable"><I>device</I></CODE><CODECLASS="userinput"><B>&quot;</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">but this depends on undocumented features in <EMCLASS="emphasis">cat</EM>. In any case, on<ACLASS="indexterm"NAME="AUTOID-22231"></A><ACLASS="indexterm"NAME="AUTOID-22233"></A><ACLASS="indexterm"NAME="AUTOID-22235"></A>nine-track tapes, since each gap occupies approximately 0.7&nbsp;inches ofotherwise useful tape space, a block size of 1024 has ten times as manygaps as a block size of 10240, wasting 9x1600x0.7&nbsp;=&nbsp;10&nbsp;kbytes oftape at 1600&nbsp;bpi, or 32 times as many as a size of 32768, wasting31x6250x0.7&nbsp;=&nbsp;136&nbsp;kbytes of tape at 6250&nbsp;bpi.</P><PCLASS="para">I say &quot;approximately&quot; becauseactual gap sizes vary. In particular, certain &quot;streaming&quot; drives(all too often called streaming because they do not&nbsp;- in some casesthe controller is too &quot;smart&quot; to be able to keep up with the requireddata rate, even when fed back-to-back DMA requests) have been knownto stretch the gaps to 0.9 inches.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-22239"></A>In general, because of tape gaps, you should use the largest record sizethat permits error recovery. Note, however, that some olid [2]hardware (suchas that found on certain AT&amp;T 3B systems) puts a ridiculous upper limit(5K) on tape blocks.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[2] Go ahead, look it up... it is a perfectly good crossword puzzle word. <CODECLASS="literal">:-)</CODE></P></BLOCKQUOTE><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">CT</SPAN> <SPANCLASS="bibliomisc">in <ACLASS="systemitem.newsgroup"HREF="news:comp.unix.questions">comp.unix.questions</A> on Usenet, 3 April 1991</SPAN></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch20_05.htm"TITLE="20.5 Using tar to a Remote Tape Drive "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 20.5 Using tar to a Remote Tape Drive "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch20_07.htm"TITLE="20.7 Creating a Timestamp File for Selective Backups "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 20.7 Creating a Timestamp File for Selective Backups "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">20.5 Using tar to a Remote Tape Drive </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">20.7 Creating a Timestamp File for Selective Backups </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>