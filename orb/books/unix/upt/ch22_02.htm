<HTML><HEAD><TITLE>[Chapter 22] 22.2 Tutorial on File and Directory Permissions </TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:40:20Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch22_01.htm"TITLE="22. File Security, Ownership, and Sharing"><LINKREL="prev"HREF="ch22_01.htm"TITLE="22.1 Introduction to File Ownership and Security "><LINKREL="next"HREF="ch22_03.htm"TITLE="22.3 Who Will Own a New File? "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch22_01.htm"TITLE="22.1 Introduction to File Ownership and Security "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 22.1 Introduction to File Ownership and Security "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 22<BR>File Security, Ownership, and Sharing</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch22_03.htm"TITLE="22.3 Who Will Own a New File? "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 22.3 Who Will Own a New File? "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-0417">22.2 Tutorial on File and Directory Permissions </A></H2><PCLASS="para">[Think you know all about permissions?Even if you do, skim through this article.Bruce has some good tips. -JP]</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-23757"></A><ACLASS="indexterm"NAME="AUTOID-23760"></A>There are three basic attributes for plain file permissions: read,write, and execute.  Read and write permission obviously let you readthe data from a file or write new data to the file.  When you haveexecute permission, you can use the file as a program or shell script.The characters used to describe these permissions are <CODECLASS="literal">r</CODE>,<CODECLASS="literal">w</CODE>, and <CODECLASS="literal">x</CODE>, for e<EMCLASS="emphasis">x</EM>ecute.</P><PCLASS="para">Directories use these same permissions, but they have a different meaning.<ACLASS="indexterm"NAME="AUTOID-23769"></A><ACLASS="indexterm"NAME="AUTOID-23771"></A><ACLASS="indexterm"NAME="AUTOID-23773"></A>If a directory has read permission, you can see what files are in the directory.Write permission means you can add, remove, or rename files in the directory.Execute allows you to use the directory name when accessing files inside that directory.(Article<ACLASS="xref"HREF="ch18_02.htm"TITLE="What's Really in a Directory ">18.2</A>has more information about what's in a directory.)Let's examine this more closely.</P><PCLASS="para">Suppose you have read access to a directory,but you do not have execute access to the filesin the directory. You can still read thedirectory, or<SPANCLASS="link"><EMCLASS="emphasis">inode</EM> (<ACLASS="linkend"HREF="ch01_22.htm"TITLE="How UNIX Keeps Track of Files: Inodes ">1.22</A>)</SPAN>information for that file, as returned by the <EMCLASS="emphasis">stat</EM>(2)system call. That is, you can see the file's name, permissions, size, access times, owner and group,and number of links.You cannot read the contents of the file.</P><PCLASS="para">Write permission in a directory allows you to change the contents of a directory.Because the name of the file is stored in the directory, and not the file,<EMCLASS="emphasis">write permission in a directory allows creation, renaming, ordeletion of files</EM>.To be specific, if someone has write permission to your home directory, theycan rename or delete your <EMCLASS="emphasis">.login</EM>file and put a new file in its place.The permissions of your <EMCLASS="emphasis">.login</EM>file do not matter.Someone can rename a file even if they can't read the contents of a file.(See article<ACLASS="xref"HREF="ch22_11.htm"TITLE="A Loophole: Modifying Files Without Write Access">22.11</A>.)</P><PCLASS="para">Execute permission on a directory is sometimes called searchpermission.  If you found a directory that gave you executepermission, but not read permission, you could use any file in thatdirectory. However, you <EMCLASS="emphasis">must</EM> know the name. You cannot lookinside the directory to find out the names of the files.  Think ofthis type of directory as a black box.  You can throw filenames atthis directory, and sometimes you find a file, sometimes you don't.(See article<ACLASS="xref"HREF="ch22_12.htm"TITLE="A Directory that People Can Access but Can't List ">22.12</A>.)</P><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="UPT-ART-417-SECT-1.1">22.2.1 User, Group, and World </A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-23791"></A><ACLASS="indexterm"NAME="UPT-ART-417-IX-DIRECTORIES-OWNERSHIP"></A><ACLASS="indexterm"NAME="UPT-ART-417-IX-OWNERSHIP-FILE"></A><ACLASS="indexterm"NAME="AUTOID-23800"></A>All files have an owner and group associated with them. There are three sets of read/write/execute permissions: one set for the user or owner of the file,one set for the group <SPANCLASS="link">group (<ACLASS="linkend"HREF="ch22_13.htm"TITLE="Groups and Group Ownership ">22.13</A>)</SPAN>of the file, and one set for everyone else.These permissions are determined by nine bits in theinodeinformation, and are represented by the characters <CODECLASS="literal">rwxrwxrwx</CODE> in an <EMCLASS="emphasis">ls -l</EM> listing:[1]</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[1] On some UNIX systems, <EMCLASS="emphasis">ls -l</EM> producesan eight-column listing without the group name (here, <CODECLASS="literal">books</CODE>).Use <EMCLASS="emphasis">ls -lg</EM> to get the listing format shown here.</P></BLOCKQUOTE><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>ls -l</B></CODE>drwxr-xr-x  3 jerry   books      512 Feb 14 11:31 manpages-rw-r--r--  1 jerry   books    17233 Dec 10  1990 misc.Z-rwxr-xr-x  1 tim     books      195 Mar 29 18:55 myhead</PRE></BLOCKQUOTE></P><PCLASS="para">&#13;The first character in the <EMCLASS="emphasis">ls -l</EM> listing<SPANCLASS="link">specifies the type of file (<ACLASS="linkend"HREF="ch17_13.htm"TITLE="Searching for Files by Type ">17.13</A>)</SPAN>.The first three of the nine permissions characters that follow specify the user, the middle three the group, and the last three the world. If the permission is not true, a dashis used to indicate lack of privilege. If you wanted to have a data file that you could read or write,but don't want anyone else to access, the permissions would be <CODECLASS="literal">rw-------</CODE>.</P><PCLASS="para">An easier way to specify these nine bits is with three octal digits instead of nine characters.(Article<ACLASS="xref"HREF="ch01_23.htm"TITLE="File Access Permissions ">1.23</A>has diagrams of permission bits and explains how to write permissions as anoctal number.)The order is the same, so the above permissions can be describedby the octal number 600.The first number specifies the owner's permission.The second number specifies thepermission.The last number specifies permission to everyone who isnot the owner or not in the group of the file [although permissionsdon't apply to the<SPANCLASS="link">superuser (<ACLASS="linkend"HREF="ch01_24.htm"TITLE="The Superuser (Root) ">1.24</A>)</SPAN>,who can do anything to any file or directory. <EMCLASS="emphasis">-JP</EM>&nbsp;].</P><PCLASS="para">This last point is subtle. When testing for permissions, thesystem looks at the groups in order. If you are denied permission, UNIX does not examine the next group. Consider the case of a file that is owned by user<EMCLASS="emphasis">jo</EM>,is in the group<EMCLASS="emphasis">guests</EM>,and has the permissions<CODECLASS="literal">-----xrwx</CODE>,or017in octal.This has the result that user<EMCLASS="emphasis">jo</EM>cannot use the file, anyone in group<EMCLASS="emphasis">guests</EM>can execute the program, andeveryone else besides<EMCLASS="emphasis">jo</EM>and <EMCLASS="emphasis">guests</EM>can read, write, and execute the program.This is not a very common set of permissions.But some people use a<SPANCLASS="link">similar mechanism (<ACLASS="linkend"HREF="ch22_14.htm"TITLE="Add Users to a Group to Deny Permission ">22.14</A>)</SPAN>to denyone group of users from accessing or using a file.In the above case, <EMCLASS="emphasis">jo</EM>cannot read or writethe file she owns.She could use the<SPANCLASS="link"><EMCLASS="emphasis">chmod</EM> (<ACLASS="linkend"HREF="ch22_07.htm"TITLE="Using chmod to Change File Permission ">22.7</A>)</SPAN>command to grant herself permission to read the file.However, if the file was in a directory owned by someone else, and the directorydid not give <EMCLASS="emphasis">jo</EM> read or search permission, she would not be able to find the file to change its permission.</P><PCLASS="para">The above example is an extreme case.Most of the time permissions fall into fourcases:</P><OLCLASS="orderedlist"><LICLASS="listitem"><PCLASS="para">The information is personal. Many people have a directory or two in which they store information they do not wish to be public. Mail should probably be confidential, and all of your mailbox files should bein a directory with permissions of 700, denying everyone but yourself and the superuser read access to your letters. (See article<ACLASS="xref"HREF="ch04_05.htm"TITLE="Private (Personal) Directories ">4.5</A>.)</P></LI><LICLASS="listitem"><PCLASS="para">The information is not personal, yet no one should be able to modifythe information. Most of my directories are set up this way, with the permissionsof 755.</P></LI><LICLASS="listitem"><PCLASS="para">The files are managed by a team of people. This means group-write permission,or directories with the mode 775.</P></LI><LICLASS="listitem"><PCLASS="para">In the previous case, for confidential projects, you may want to denyaccess to people outside the group.In this case, make directories with mode 770.</P></LI></OL><PCLASS="para">You could just create a directory with the proper permissions,and put the files inside the directory, hoping the permissions of the directory will &quot;protect&quot;the files in the directory.This is not adequate. Suppose you had a directory with permissions755 and a file with permissions 666 inside the directory.Anyone could change the contents of this file because the world has search access on the directory andwrite access to the file.</P><PCLASS="para">What is needed is a mechanism to prevent any new file from having world-write access.This mechanism exists with the<ACLASS="indexterm"NAME="AUTOID-23848"></A><ACLASS="indexterm"NAME="AUTOID-23850"></A><SPANCLASS="link"><EMCLASS="emphasis">umask</EM> command (<ACLASS="linkend"HREF="ch22_04.htm"TITLE="Setting an Exact umask ">22.4</A>)</SPAN>.If you consider that a new directory would get permissions of 777, and that new files would get permissions of 666, the<EMCLASS="emphasis">umask</EM>command specifies permissions to &quot;take away&quot;from all new files.To &quot;subtract&quot;world-write permission from a file, 666 must have 002 &quot;subtracted&quot;from the default value to get 664.To subtract group and world write, 666 must have 022 removed to leave644 as the permissions of the file.These two values of<EMCLASS="emphasis">umask</EM>are so common that it is useful to have some<SPANCLASS="link">aliases (<ACLASS="linkend"HREF="ch10_02.htm"TITLE="Aliases for Common Commands ">10.2</A>)</SPAN>defined:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">&#13;alias open umask 002alias shut umask 022</PRE></BLOCKQUOTE></P><PCLASS="para">With these two values of <EMCLASS="emphasis">umask</EM>,new directories will have permissions of 775 or 755.Most people have a<EMCLASS="emphasis">umask</EM>value of one of these two values.</P><PCLASS="para">In a friendly work group, people tend to use the <EMCLASS="emphasis">umask</EM>of 002, which allows others in your group to make changes to your files.Someone who uses the mask of 022 will cause grief to others working on a project.Trying to compile a program is frustrating when someone else owns files that you must delete but can't. You can rename files if this is the case or ask the system administrator for help.</P><PCLASS="para">Members of a team who normally use a default umask of 022 should find a means to change the mask value when working on the project.(Or else risk flames from your fellow workers!)Besides the<EMCLASS="emphasis">open</EM>alias above, some people have an alias that changes directories andsets the mask to group-write permission:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">alias proj &quot;cd /usr/projects/proj;umask 002&quot;</PRE></BLOCKQUOTE></P><PCLASS="para">This isn't perfect, because people forget to use aliases.You could have a special <EMCLASS="emphasis">cd</EM> alias and a private shell file in eachproject directory that sets the <EMCLASS="emphasis">umask</EM> when you <EMCLASS="emphasis">cd</EM> there.Other people could have similar files in the project directorywith different names.Article<ACLASS="xref"HREF="ch14_14.htm"TITLE="Automatic Setup When You Enter/Exit a Directory ">14.14</A>shows how.</P><PCLASS="para">Still another method is to run <SPANCLASS="link"><EMCLASS="emphasis">find</EM> (<ACLASS="linkend"HREF="ch17_01.htm#UPT-ART-7410"TITLE="The find Command Is Great; The Problem Is Finding How to Use It">17.1</A>)</SPAN>three times a dayand search for files owned by you in the project directory thathave the wrong permission:</P><PCLASS="para"><TABLECLASS="screen.co"BORDER="1"><TR><THVALIGN="TOP"><PRECLASS="calloutlist"><ACLASS="co"HREF="ch06_03.htm"TITLE="6.3 Predefined Environment Variables ">$USER</A> <ACLASS="co"HREF="ch09_21.htm"TITLE="9.21 Handle Too-Long Command Lines with xargs ">xargs</A> <ACLASS="co"HREF="ch22_07.htm"TITLE="22.7 Using chmod to Change File Permission ">chmod</A> </PRE></TH><TDVALIGN="TOP"><PRECLASS="screen">% <CODECLASS="userinput"><B>find /usr/projects -user $USER ! -perm -020 -print | \</B></CODE><CODECLASS="userinput"><B>xargs chmod g+w</B></CODE></PRE></TD></TR></TABLE></P><PCLASS="para">You can use the command<SPANCLASS="link"><EMCLASS="emphasis">crontab -e</EM> (<ACLASS="linkend"HREF="ch40_15.htm"TITLE="crontab Script Makes crontab Editing Easier/Safer ">40.15</A>, <ACLASS="linkend"HREF="ch40_12.htm"TITLE="Periodic Program Execution: The cron Facility ">40.12</A>)</SPAN>to define when to run this command.<ACLASS="indexterm"NAME="AUTOID-23889"></A><ACLASS="indexterm"NAME="AUTOID-23890"></A>[If your system doesn't have personal <EMCLASS="emphasis">crontab</EM>s, use a<SPANCLASS="link">self-restarting <EMCLASS="emphasis">at</EM> job (<ACLASS="linkend"HREF="ch40_08.htm"TITLE="Automatically Restarting at Jobs ">40.8</A>)</SPAN>.<EMCLASS="emphasis">-JP</EM>&nbsp;]</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="UPT-ART-417-SECT-1.2">22.2.2 Which Group is Which? </A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-23898"></A>Since group-write permission is so important in a team project, you might be wondering how the group of a new file is determined?The answer depends on several factors.Before I cover these, you should note that Berkeley and AT&amp;T-based systems would use different mechanisms to determine the default group.</P><PCLASS="para">Originally UNIX required you to specify a new groupwith the<EMCLASS="emphasis">newgrp</EM>command.If there was a password for this group in the<EMCLASS="emphasis">/etc/group</EM>file, and you were not listed as one of the members of the group,you had to type the password to change your group.</P><PCLASS="para">Berkeley-based versions of UNIX would use the current directory to determinethe group of the new file. That is, if the current directory has <EMCLASS="emphasis">cad</EM>as the group of the directory,any file created in that directory would be in the same group.To change the default group, just change to a different directory.</P><PCLASS="para">Both mechanisms had their good points and bad points.The Berkeley-based mechanismmade it convenient to change groups automatically.However, there is a fixed limit of groups one could belong to.SunOS 4 has a limit of 16 groups. Earlier versions had a limit of eight groups.</P><PCLASS="para">SunOS and System V Release 4 support both mechanisms.The entire disk can be mounted with eitherthe AT&amp;T or the Berkeley mechanism. If it is necessary to control thison a directory-by-directory basis, a<SPANCLASS="link">special bit (<ACLASS="linkend"HREF="ch22_05.htm"TITLE="Group Permissions in a Directory with the setgid Bit ">22.5</A>)</SPAN>in the file permissions is used.If a disk partition is mounted without the Berkeley group mechanism, then a directory with this special bit will make new files have the same groupas the directory.Without the special bit, the group of all new files depends on thecurrent group of the user.</P></DIV><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">BB</SPAN></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch22_01.htm"TITLE="22.1 Introduction to File Ownership and Security "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 22.1 Introduction to File Ownership and Security "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch22_03.htm"TITLE="22.3 Who Will Own a New File? "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 22.3 Who Will Own a New File? "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">22.1 Introduction to File Ownership and Security </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">22.3 Who Will Own a New File? </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>