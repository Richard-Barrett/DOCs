<HTML><HEAD><TITLE>[Chapter 26] 26.3 Understanding Expressions </TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:43:59Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch26_01.htm"TITLE="26. Regular Expressions (Pattern Matching)"><LINKREL="prev"HREF="ch26_02.htm"TITLE="26.2 Don't Confuse Regular Expressions with Wildcards "><LINKREL="next"HREF="ch26_04.htm"TITLE="26.4 Using Metacharacters in Regular Expressions "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch26_02.htm"TITLE="26.2 Don't Confuse Regular Expressions with Wildcards "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 26.2 Don't Confuse Regular Expressions with Wildcards "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 26<BR>Regular Expressions (Pattern Matching)</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch26_04.htm"TITLE="26.4 Using Metacharacters in Regular Expressions "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 26.4 Using Metacharacters in Regular Expressions "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-7972">26.3 Understanding Expressions </A></H2><PCLASS="para"><ACLASS="indexterm"NAME="UPT-ART-7972-IX-REGULAR-EXPRESSIONS-DESCRIBED"></A>You are probably familiar with the kinds of expressionsthat a calculator interprets.Look at the following arithmetic expression:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">2 + 4</PRE></BLOCKQUOTE></P><PCLASS="para">&quot;Two plus four&quot; consists of several constants orliteral values and an operator.A calculator program mustrecognize, for instance, that 2 is a numeric constant andthat the plus sign represents an operator, not tobe interpreted as the <CODECLASS="literal">+</CODE>&nbsp;character.</P><PCLASS="para">An expression tells the computer how to produce a result.Although itis the sum of &quot;two plus four&quot; that we really want,we don't simply tell the computer to return a six.We instruct the computer to evaluate the expression andreturn a value.</P><PCLASS="para">An expression can be more complicated than 2+4; in fact, itmight consist of multiple simple expressions, such asthe following:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">2 + 3 * 4</PRE></BLOCKQUOTE></P><PCLASS="para">A calculator normally evaluates an expression from left to right.However, certainoperators have precedence over others: that is, they will be performedfirst.Thus, the above expression will evaluate to 14 and not 20 becausemultiplication takes precedence over addition.Precedence can be overridden by placing the simple expression inparentheses.Thus, (2+3)*4 or &quot;the sum of two plus three times four&quot;will evaluate to 20.The parentheses are symbols that instruct the calculator to changethe order in which the expression is evaluated.</P><PCLASS="para">A regular expression, by contrast, is descriptive of a pattern or sequence ofcharacters.Concatenation is the basic operation implied in every regularexpression.That is, a pattern matches adjacent characters.Look at the following example of a regular expression:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">ABE</PRE></BLOCKQUOTE></P><PCLASS="para">Each literal character is a regular expression thatmatches only that single character.This expression describes an &quot;<CODECLASS="literal">A</CODE> followed by a <CODECLASS="literal">B</CODE> then followed by an <CODECLASS="literal">E</CODE>&quot;or simply the string <CODECLASS="literal">ABE</CODE>.The term &quot;string&quot; means each character concatenated to the onepreceding it.That a regular expression describes a <EMCLASS="emphasis">sequence</EM> of characterscan't be emphasized enough.(Novice users are inclined to thinkin higher-level units such as words, and not individual characters.)Regular expressions are case-sensitive; <CODECLASS="literal">A</CODE> does not match <CODECLASS="literal">a</CODE>.</P><PCLASS="para">Programs such as<SPANCLASS="link"><EMCLASS="emphasis">grep</EM> (<ACLASS="linkend"HREF="ch27_02.htm"TITLE="Searching for Text with grep ">27.2</A>)</SPAN>that accept regular expressionsmust first evaluatethe syntax of the regular expression to produce a pattern.They then read the input line by line trying to match the pattern.An input line is a string, and to see if a string matches the pattern, a program compares the first character in the string to the first character of the pattern.If there is a match, it compares the second character inthe string to the second character of the pattern.Whenever it fails to make a match, it compares the next characterin the string to the first character of the pattern.<ACLASS="xref"HREF="ch26_03.htm#UPT-ART-7972-FIG-0"TITLE="Interpreting a Regular Expression">Figure 26.1</A>illustrates this process, trying to match the pattern <CODECLASS="literal">abe</CODE>on an input line.</P><H4CLASS="figure"><ACLASS="title"NAME="UPT-ART-7972-FIG-0">Figure 26.1: Interpreting a Regular Expression</A></H4><IMGCLASS="graphic"SRC="figs/7972.gif"ALT="Figure 26.1"><PCLASS="para">A regular expression is not limited to literal characters.There is, for<ACLASS="indexterm"NAME="AUTOID-28377"></A><ACLASS="indexterm"NAME="AUTOID-28380"></A>instance, a metacharacter&nbsp;- the dot (<CODECLASS="literal">.</CODE>)&nbsp;- that can be used as a&quot;wildcard&quot; to match any single character.You can think of this wildcard as analogous to a blank tilein Scrabble(TM) where it means any letter.Thus, we can specify the regular expression <CODECLASS="literal">A.E</CODE> and it willmatch <CODECLASS="literal">ACE</CODE>, <CODECLASS="literal">ABE</CODE>, and <CODECLASS="literal">ALE</CODE>.It will match any characterin the position following <CODECLASS="literal">A</CODE>.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-28390"></A><ACLASS="indexterm"NAME="AUTOID-28393"></A><ACLASS="indexterm"NAME="AUTOID-28396"></A>The metacharacter <CODECLASS="literal">*</CODE> (the asterisk) is used to match zero or moreoccurrences of the <EMCLASS="emphasis">preceding</EM> regular expression, which typicallyis a single character.You may be familiar with <CODECLASS="literal">*</CODE> as a <EMCLASS="emphasis">shell</EM>metacharacter, where it also means &quot;zero or more characters.&quot;But that meaningis very different from <CODECLASS="literal">*</CODE> in a regular expression.By itself, themetacharacter <CODECLASS="literal">*</CODE> does not match anything in a regular expression; it modifies what goes before it.The regular expression <CODECLASS="literal">.*</CODE> matches any number ofcharacters.The regular expression <CODECLASS="literal">A.*E</CODE> matches any string that matches <CODECLASS="literal">A.E</CODE> but it will alsomatch any number of characters between <CODECLASS="literal">A</CODE> and <CODECLASS="literal">E</CODE>:<CODECLASS="literal">AIRPLANE</CODE>, <CODECLASS="literal">A</CODE> <CODECLASS="literal">FINE</CODE>, <CODECLASS="literal">AE</CODE>,<CODECLASS="literal">A</CODE> <CODECLASS="literal">32-cent</CODE> <CODECLASS="literal">S.A.S.E</CODE>,or <CODECLASS="literal">A</CODE> <CODECLASS="literal">LONG</CODE> <CODECLASS="literal">WAY</CODE> <CODECLASS="literal">HOME</CODE>, for example.</P><PCLASS="para">If you understand the difference between <CODECLASS="literal">.</CODE> and <CODECLASS="literal">*</CODE> in regularexpressions, you already know about the two basic types of metacharacters: thosethat can be evaluated to a single character, and those that modify howcharacters that precede it are evaluated.</P><PCLASS="para">It should also be apparent thatby use of metacharacters you can expand or limit the possible matches.You have more control over what is matched and what is not.In article<ACLASS="xref"HREF="ch26_04.htm"TITLE="Using Metacharacters in Regular Expressions ">26.4</A>,Bruce Barnett explains in detail how to use regular expression metacharacters.<ACLASS="indexterm"NAME="AUTOID-28426"></A></P><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">DD</SPAN> <SPANCLASS="bibliomisc">from O'Reilly &amp; Associates' <CITECLASS="citetitle">sed &amp; awk</CITE></SPAN></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch26_02.htm"TITLE="26.2 Don't Confuse Regular Expressions with Wildcards "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 26.2 Don't Confuse Regular Expressions with Wildcards "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch26_04.htm"TITLE="26.4 Using Metacharacters in Regular Expressions "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 26.4 Using Metacharacters in Regular Expressions "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">26.2 Don't Confuse Regular Expressions with Wildcards </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">26.4 Using Metacharacters in Regular Expressions </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>