<HTML><HEAD><TITLE>[Chapter 26] 26.6 Just What Does a Regular Expression Match? </TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:44:08Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch26_01.htm"TITLE="26. Regular Expressions (Pattern Matching)"><LINKREL="prev"HREF="ch26_05.htm"TITLE="26.5 Getting Regular Expressions Right "><LINKREL="next"HREF="ch26_07.htm"TITLE="26.7 Limiting the Extent of a Match "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch26_05.htm"TITLE="26.5 Getting Regular Expressions Right "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 26.5 Getting Regular Expressions Right "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 26<BR>Regular Expressions (Pattern Matching)</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch26_07.htm"TITLE="26.7 Limiting the Extent of a Match "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 26.7 Limiting the Extent of a Match "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-7835">26.6 Just What Does a Regular Expression Match? </A></H2><PCLASS="para">One of the toughest things to learn about regular expressionsis just what they do match.The problem is that a regular expression tends to find the longestpossible match&nbsp;- which can be more than you want.</P><TABLECLASS="para.programreference"BORDER="1"><TR><THVALIGN="TOP"><ACLASS="programreference"HREF="examples/index.htm"TITLE="showmatch">showmatch</A><BR></TH><TDVALIGN="TOP">Here's a simple script called <EMCLASS="emphasis">showmatch</EM> that is<ACLASS="indexterm"NAME="AUTOID-29042"></A><ACLASS="indexterm"NAME="AUTOID-29045"></A>useful for testing regular expressions, when writing<EMCLASS="emphasis">sed</EM> scripts, etc. Given a regular expression and a filename, itfinds lines in the file matching that expression, just like <EMCLASS="emphasis">grep</EM>, butit uses a row of carets (<CODECLASS="literal">^^^^</CODE>) to highlight the portion of the linethat was actually matched.</TD></TR></TABLE><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">#! /bin/sh# showmatch - mark string that matches patternpattern=$1; shiftnawk 'match($0,pattern) &gt; 0 {    s = substr($0,1,RSTART-1)    m = substr($0,1,RLENGTH)    gsub (/[^\b- ]/, &quot; &quot;, s)    gsub (/./,       &quot;^&quot;, m)    printf &quot;%s\n%s%s\n&quot;, $0, s, m}' pattern=&quot;$pattern&quot; $*</PRE></BLOCKQUOTE></P><PCLASS="para">For example:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>showmatch 'CD-...' mbox</B></CODE>and CD-ROM publishing. We have recognized     ^^^^^^that documentation will be shipped on CD-ROM; however,                                      ^^^^^^</PRE></BLOCKQUOTE></P><TABLECLASS="para.programreference"BORDER="1"><TR><THVALIGN="TOP"><ACLASS="programreference"HREF="examples/index.htm"TITLE="xgrep">xgrep</A><BR></TH><TDVALIGN="TOP"><ACLASS="indexterm"NAME="AUTOID-29057"></A><EMCLASS="emphasis">xgrep</EM> is a related script that simply retrieves only the matched text.This allows you to extract patterned data from a file.For example, you could extract only the numbers from a tablecontaining both text and numbers.It's also great for counting the number of occurrences of some patternin your file, as shown below.Just be sure that your expression only matches what you want.If you aren't sure, leave off the <EMCLASS="emphasis">wc</EM> command and glance at theoutput.For example, the regular expression <CODECLASS="literal">[0-9]*</CODE> will match numberslike <CODECLASS="literal">3.2</CODE> <EMCLASS="emphasis">twice</EM>: once for the <CODECLASS="literal">3</CODE> and again for the<CODECLASS="literal">2</CODE>!You want to include a dot (<CODECLASS="literal">.</CODE>) and/or comma (<CODECLASS="literal">,</CODE>),depending on how your numbers are written.For example: <CODECLASS="literal">[0-9][.0-9]*</CODE> matches a leading digit, possiblyfollowed by more dots and digits.</TD></TR></TABLE><BLOCKQUOTECLASS="note"><PCLASS="para"><STRONG>NOTE:</STRONG> Remember that an expression like <CODECLASS="literal">[0-9]*</CODE> will match <EMCLASS="emphasis">zero</EM> numbers(because <CODECLASS="literal">*</CODE> means &quot;zero or more of the preceding character&quot;).That expression can make <EMCLASS="emphasis">xgrep</EM> run for a very long time!The following expression, which matches <EMCLASS="emphasis">one</EM> or more digits,is probably what you want instead:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"><CODECLASS="userinput"><B>xgrep &quot;[0-9][0-9]*&quot; </B></CODE><CODECLASS="replaceable"><I>files</I></CODE><CODECLASS="userinput"><B> | wc -l</B></CODE></PRE></BLOCKQUOTE></P></BLOCKQUOTE><PCLASS="para">The <EMCLASS="emphasis">xgrep</EM> shell script runs the <EMCLASS="emphasis">sed</EM> commands below,replacing <CODECLASS="literal">$re</CODE> with the regular expression from the command lineand <CODECLASS="literal">$x</CODE> with a CTRL-b character (which is used as a delimiter).We've shown the <EMCLASS="emphasis">sed</EM> commands numbered, like <CODECLASS="replaceable"><I>5&gt;</I></CODE>;these are only for reference and aren't part of the script:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"><CODECLASS="replaceable"><I>1&gt;</I></CODE> \$x$re$x!d<CODECLASS="replaceable"><I>2&gt;</I></CODE> s//$x&amp;$x/g<CODECLASS="replaceable"><I>3&gt;</I></CODE> s/[^$x]*$x//<CODECLASS="replaceable"><I>4&gt;</I></CODE> s/$x[^$x]*$x/\<CODECLASS="replaceable"><I>  </I></CODE> /g<CODECLASS="replaceable"><I>5&gt;</I></CODE> s/$x.*//</PRE></BLOCKQUOTE></P><PCLASS="para"><BCLASS="emphasis.bold">Command 1</B> deletes all input lines that don't contain a match.On the remaining lines (which do match), <BCLASS="emphasis.bold">command 2</B> surrounds thematching text with CTRL-b delimiter characters.<BCLASS="emphasis.bold">Command 3</B> removes all characters (including the first delimiter)before the first match on a line.When there's more than one match on a line, <BCLASS="emphasis.bold">command 4</B> breaks themultiple matches onto separate lines.<BCLASS="emphasis.bold">Command 5</B> removes the last delimiter, and any text after it, fromevery output line.</P><PCLASS="para">Greg Ubben revised <EMCLASS="emphasis">showmatch</EM> and wrote <EMCLASS="emphasis">xgrep</EM>.</P><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">JP</SPAN>, <SPANCLASS="authorinitials">DD,&nbsp;TOR</SPAN></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch26_05.htm"TITLE="26.5 Getting Regular Expressions Right "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 26.5 Getting Regular Expressions Right "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch26_07.htm"TITLE="26.7 Limiting the Extent of a Match "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 26.7 Limiting the Extent of a Match "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">26.5 Getting Regular Expressions Right </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">26.7 Limiting the Extent of a Match </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>