<HTML><HEAD><TITLE>[Chapter 27] 27.14 Compound Searches </TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:44:31Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch27_01.htm"TITLE="27. Searching Through Files"><LINKREL="prev"HREF="ch27_13.htm"TITLE="27.13 More grep-like Programs Written in Perl "><LINKREL="next"HREF="ch27_15.htm"TITLE="27.15 Narrowing a Search Quickly "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch27_13.htm"TITLE="27.13 More grep-like Programs Written in Perl "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 27.13 More grep-like Programs Written in Perl "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 27<BR>Searching Through Files</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch27_15.htm"TITLE="27.15 Narrowing a Search Quickly "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 27.15 Narrowing a Search Quickly "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-8003">27.14 Compound Searches </A></H2><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-30632"></A><ACLASS="indexterm"NAME="AUTOID-30636"></A><ACLASS="indexterm"NAME="AUTOID-30638"></A><ACLASS="indexterm"NAME="AUTOID-30642"></A>You may recall that you can search for lines containing &quot;this&quot;<EMCLASS="emphasis">or</EM> &quot;that&quot; using the<SPANCLASS="link"><EMCLASS="emphasis">egrep</EM> (<ACLASS="linkend"HREF="ch27_05.htm"TITLE="Extended Searching for Text with egrep ">27.5</A>)</SPAN><CODECLASS="literal">|</CODE> metacharacter:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">egrep 'this|that' <CODECLASS="replaceable"><I>files</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">But how do you grep for &quot;this&quot; <EMCLASS="emphasis">and</EM> &quot;that&quot;?Conventional regular expressions don't support an <EMCLASS="emphasis">and</EM> operatorbecause it breaks the rule that patterns match one consecutive stringof text.Well,<SPANCLASS="link"><EMCLASS="emphasis">agrep</EM> (<ACLASS="linkend"HREF="ch28_09.htm"TITLE="ex Scripts Built by diff ">28.9</A>)</SPAN>is one version of <EMCLASS="emphasis">grep</EM> that breaks allthe rules.If you're lucky enough to have it installed, just use:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">agrep 'cat;dog;bird' <CODECLASS="replaceable"><I>files</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">If you don't have <EMCLASS="emphasis">agrep</EM>, a common technique is to filter the textthrough several <EMCLASS="emphasis">grep</EM>s so that only lines containing all thekeywords make it through the pipeline intact:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">grep cat <CODECLASS="replaceable"><I>files</I></CODE> | grep dog | grep bird</PRE></BLOCKQUOTE></P><PCLASS="para">But can it be done in one command?The closest you can come with <EMCLASS="emphasis">grep</EM> is this idea:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">grep 'cat.*dog.*bird' <CODECLASS="replaceable"><I>files</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">which has two limitations&nbsp;- thewords must appear in the given order, and they cannot overlap.(The first limitation can be overcome using <CODECLASS="literal">egrep 'cat.*dog|dog.*cat'</CODE>,but this trick is not really scalable to more than two terms.)</P><PCLASS="para">As usual, the problem can also be solved by moving beyond the grep familyto the more powerful tools.Here is how to do a line-by-line <EMCLASS="emphasis">and</EM>search using <EMCLASS="emphasis">sed</EM>, <EMCLASS="emphasis">awk</EM>, or <EMCLASS="emphasis">perl</EM>:[2]</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[2] Some versions of <EMCLASS="emphasis">nawk</EM> require an explicit <CODECLASS="literal">$0~</CODE>in front of each pattern.</P></BLOCKQUOTE><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">sed '/cat/!d; /dog/!d; /bird/!d' <CODECLASS="replaceable"><I>files</I></CODE>awk '/cat/ &amp;&amp; /dog/ &amp;&amp; /bird/' <CODECLASS="replaceable"><I>files</I></CODE>perl -ne 'print if /cat/ &amp;&amp; /dog/ &amp;&amp; /bird/' <CODECLASS="replaceable"><I>files</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Okay, but what if you want to find where all the words occur in the same<EMCLASS="emphasis">paragraph</EM>?Just turn on paragraph mode by setting <CODECLASS="literal">RS=&quot;&quot;</CODE> in <EMCLASS="emphasis">awk</EM>or by giving the <EMCLASS="emphasis">-00</EM> option to <EMCLASS="emphasis">perl</EM>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">awk '/cat/ &amp;&amp; /dog/ &amp;&amp; /bird/ {print $0 ORS}' RS= <CODECLASS="replaceable"><I>files</I></CODE>perl -n00e 'print &quot;$_\n&quot; if /cat/ &amp;&amp; /dog/ &amp;&amp; /bird/' <CODECLASS="replaceable"><I>files</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">And if you just want a list of the <CODECLASS="replaceable"><I>files</I></CODE> that contain all thewords anywhere in them?Well, <EMCLASS="emphasis">perl</EM> can easily slurp in entire filesif you have the memory and you use the <EMCLASS="emphasis">-0</EM> option to set the recordseparator to something that won't occur in the file (like <EMCLASS="emphasis">NUL</EM>):</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">perl -ln0e 'print $ARGV if /cat/ &amp;&amp; /dog/ &amp;&amp; /bird/' <CODECLASS="replaceable"><I>files</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">(Notice that as the problem gets harder, the less powerful commands dropout.)</P><PCLASS="para">The grep filter technique shown above also works on this problem.Just add a<SPANCLASS="link"><EMCLASS="emphasis">-l</EM> option (<ACLASS="linkend"HREF="ch15_07.htm"TITLE="Getting a List of Matching Files with grep -l ">15.7</A>)</SPAN>and the<SPANCLASS="link"><EMCLASS="emphasis">xargs</EM> command (<ACLASS="linkend"HREF="ch09_21.htm"TITLE="Handle Too-Long Command Lines with xargs ">9.21</A>)</SPAN>to make itpass filenames through the pipeline rather than text lines:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">grep -l cat <CODECLASS="replaceable"><I>files</I></CODE> | xargs grep -l dog | xargs grep -l bird</PRE></BLOCKQUOTE></P><PCLASS="para">(<EMCLASS="emphasis">xargs</EM> is basically glue used when one program produces outputthat's needed by another program as command-line arguments.)</P><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">GU</SPAN></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch27_13.htm"TITLE="27.13 More grep-like Programs Written in Perl "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 27.13 More grep-like Programs Written in Perl "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch27_15.htm"TITLE="27.15 Narrowing a Search Quickly "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 27.15 Narrowing a Search Quickly "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">27.13 More grep-like Programs Written in Perl </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">27.15 Narrowing a Search Quickly </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>