<HTML><HEAD><TITLE>[Chapter 29] 29.9 Looking for Closure </TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:45:11Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch29_01.htm"TITLE="29. Spell Checking, Word Counting, and Textual Analysis"><LINKREL="prev"HREF="ch29_08.htm"TITLE="29.8 Find a a Doubled Word "><LINKREL="next"HREF="ch29_10.htm"TITLE="29.10 Just the Words, Please "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch29_08.htm"TITLE="29.8 Find a a Doubled Word "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 29.8 Find a a Doubled Word "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 29<BR>Spell Checking, Word Counting, and Textual Analysis</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch29_10.htm"TITLE="29.10 Just the Words, Please "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 29.10 Just the Words, Please "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-0038">29.9 Looking for Closure </A></H2><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-32394"></A><ACLASS="indexterm"NAME="AUTOID-32396"></A>A common problem in text processing is making sure that itemsthat need to occur in pairs actually do so.</P><PCLASS="para">Most UNIX text editors include support for making sure that elementsof C syntax such as parentheses and braces are closed properly.There's much less support for making sure that textual documents,such as<SPANCLASS="link"><EMCLASS="emphasis">troff</EM> (<ACLASS="linkend"HREF="ch43_13.htm"TITLE="The Text Formatters nroff, troff, ditroff, ... ">43.13</A>)</SPAN>source files, have the proper structure.For example, tables must start with a <CODECLASS="literal">.TS</CODE> macro, and end with <CODECLASS="literal">.TE</CODE>. HTML documents that start a list with <CODECLASS="literal">&lt;UL&gt;</CODE> need a closing<CODECLASS="literal">&lt;/UL&gt;</CODE>.</P><PCLASS="para">UNIX provides a number of tools that might help you to tackle thisproblem.Here's a shell script written by Dale Dougherty thatuses <EMCLASS="emphasis">awk</EM> to make sure that <CODECLASS="literal">.TS</CODE>and <CODECLASS="literal">.TE</CODE> macros come in pairs:<ACLASS="indexterm"NAME="AUTOID-32410"></A></P><PCLASS="para"><TABLECLASS="screen.co"BORDER="1"><TR><THVALIGN="TOP"><PRECLASS="calloutlist">&#13;<ACLASS="co"HREF="ch33_12.htm"TITLE="33.12 Versions of awk ">gawk</A> &#13;</PRE></TH><TDVALIGN="TOP"><PRECLASS="screen">&#13;#! /usr/local/bin/<CODECLASS="literal">gawk</CODE> -fBEGIN {    inTable = 0    TSlineno = 0    TElineno = 0    prevFile = &quot;&quot;}# check for unclosed table in first file, when more than one fileFILENAME != prevFile {    if (inTable)     printf (&quot;%s: found .TS at File %s: %d without .TE before end of file\n&quot;,            $0, prevFile, TSlineno)    inTable = 0    prevFile = FILENAME}# match TS and see if we are in Table/^/.TS/ {    if (inTable) {        printf(&quot;%s: nested starts, File %s: line %d and %d\n&quot;,            $0, FILENAME, TSlineno, FNR)        }    inTable = 1    TSlineno = FNR}/^/.TE/ {    if (! inTable)        printf(&quot;%s: too many ends, File %s: line %d and %d\n&quot;,             $0, FILENAME, TElineno, FNR)    else        inTable = 0    TElineno = FNR}# this catches end of inputEND {    if (inTable)        printf (&quot;found .TS at File %s: %d without .TE before end of file\n&quot;,            FILENAME, TSlineno)}</PRE></TD></TR></TABLE></P><PCLASS="para">You can adapt this type of script for any place you need to check for something that has a start and finish.</P><PCLASS="para">A more complete syntax checking program could be written with thehelp of a lexical analyzer like <EMCLASS="emphasis">lex</EM>.<EMCLASS="emphasis">lex</EM> is normallyused by experienced C programmers, but it can be used profitably bysomeone who has mastered <EMCLASS="emphasis">awk</EM> and is just beginning with C,since it combines an <EMCLASS="emphasis">awk</EM>-like pattern-matching process usingregular expression syntax, with actions written in the more powerfuland flexible C language.(See O'Reilly &amp; Associates' <EMCLASS="emphasis">lex&nbsp;&amp; yacc</EM>.)</P><PCLASS="para">And of course, this kind of problem could be very easily tackledin <SPANCLASS="link"><EMCLASS="emphasis">perl</EM> (<ACLASS="linkend"HREF="ch37_01.htm#UPT-ART-5560"TITLE="What We Do and Don't Tell You About Perl ">37.1</A>)</SPAN>.</P><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">TOR</SPAN></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch29_08.htm"TITLE="29.8 Find a a Doubled Word "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 29.8 Find a a Doubled Word "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch29_10.htm"TITLE="29.10 Just the Words, Please "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 29.10 Just the Words, Please "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">29.8 Find a a Doubled Word </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">29.10 Just the Words, Please </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>