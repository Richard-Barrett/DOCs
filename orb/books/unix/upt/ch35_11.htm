<HTML><HEAD><TITLE>[Chapter 35] 35.11 Hacking on Characters with tr </TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:48:11Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch35_01.htm"TITLE="35. You Can't Quite Call This Editing"><LINKREL="prev"HREF="ch35_10.htm"TITLE="35.10 Splitting Files by Context: csplit "><LINKREL="next"HREF="ch35_12.htm"TITLE="35.12 Converting Between ASCII and EBCDIC "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch35_10.htm"TITLE="35.10 Splitting Files by Context: csplit "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 35.10 Splitting Files by Context: csplit "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 35<BR>You Can't Quite Call This Editing</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch35_12.htm"TITLE="35.12 Converting Between ASCII and EBCDIC "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 35.12 Converting Between ASCII and EBCDIC "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-3780">35.11 Hacking on Characters with tr </A></H2><PCLASS="para">The <EMCLASS="emphasis">tr</EM> command is a character translation filter,reading<SPANCLASS="link">standard input (<ACLASS="linkend"HREF="ch13_01.htm#UPT-ART-1023"TITLE="Using Standard Input and Output">13.1</A>)</SPAN>and either deleting specificcharacters or substituting one character for another.</P><PCLASS="para">The most common use of <EMCLASS="emphasis">tr</EM> is to change each character in onestring to the corresponding character in a second string.(A string ofconsecutive<SPANCLASS="link">ASCII (<ACLASS="linkend"HREF="ch51_03.htm"TITLE="ASCII Characters: Listing and Getting Values ">51.3</A>)</SPAN>characters can be represented as a hyphen-separated range.)<ACLASS="indexterm"NAME="AUTOID-40678"></A></P><PCLASS="para">For example, the command:</P><PCLASS="para"><TABLECLASS="screen.co"BORDER="1"><TR><THVALIGN="TOP"><PRECLASS="calloutlist"><ACLASS="co"HREF="ch13_01.htm"TITLE="13.1 Using Standard Input and Output">&lt;</A> </PRE></TH><TDVALIGN="TOP"><PRECLASS="screen">$ <CODECLASS="userinput"><B>tr 'A-Z' 'a-z' &lt;</B></CODE><CODECLASS="replaceable"><I> file</I></CODE>   <EMCLASS="emphasis">Berkeley version</EM></PRE></TD></TR></TABLE></P><PCLASS="para">will convert all uppercase characters in <EMCLASS="emphasis">file</EM> to the equivalentlowercase characters.The result is printed onstandard output.</P><PCLASS="para">In the System V version of <EMCLASS="emphasis">tr</EM>, square brackets must surround anyrange of characters.That is, you have to say: <CODECLASS="literal">[a-z]</CODE> instead ofsimply <CODECLASS="literal">a-z</CODE>.And of course, because square brackets are meaningful tothe shell, you must protect them from interpretation by putting thestring in quotes.</P><PCLASS="para">If you aren't sure which version you have, here's a test.The Berkeley version converts the input <CODECLASS="literal">[]</CODE> to <CODECLASS="literal">A</CODE>characters because <CODECLASS="literal">[]</CODE> aren't treated as range operators:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>echo '[]' | tr '[a-z]' A</B></CODE>AA <ICLASS="lineannotation">Berkeley version</I>% <CODECLASS="userinput"><B>echo '[]' | tr '[a-z]' A</B></CODE>[] <ICLASS="lineannotation">System V version</I></PRE></BLOCKQUOTE></P><PCLASS="para">There's one place you don't have to worry about the differencebetween the two versions: when you're converting one range toanother range, and both ranges have the same number of characters.For example, this command works in both versions:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <CODECLASS="userinput"><B>tr '[A-Z]' '[a-z]' &lt; </B></CODE><CODECLASS="replaceable"><I>file</I></CODE> <ICLASS="lineannotation">both versions</I></PRE></BLOCKQUOTE></P><PCLASS="para">The Berkeley <EMCLASS="emphasis">tr</EM> will convert a <CODECLASS="literal">[</CODE> from the first stringinto the same character <CODECLASS="literal">[</CODE> in the second string, and the samefor the <CODECLASS="literal">]</CODE> characters.The System V version uses the <CODECLASS="literal">[]</CODE> characters as rangeoperators.In both versions, you get what you want: the range <CODECLASS="literal">A-Z</CODE> isconverted to the corresponding range <CODECLASS="literal">a-z</CODE>.Again, this trick works only when both ranges have the same number ofcharacters.</P><PCLASS="para">The System V version also has a nice feature: the syntax<CODECLASS="literal">[a*n]</CODE>, where <EMCLASS="emphasis">n</EM> is some digit,means that the string should consist of <EMCLASS="emphasis">n</EM>repetitions of character &quot;a.&quot;If <EMCLASS="emphasis">n</EM> isn't specified, or is 0, it istaken to be some indefinitely large number.This is useful if youdon't know how many characters might be included in the first string.</P><PCLASS="para">As described in article<ACLASS="xref"HREF="ch30_22.htm"TITLE="Filtering Text Through a UNIX Command ">30.22</A>,this translation (and the reverse)can be useful from within<EMCLASS="emphasis">vi</EM> for translating a string.You can also delete specific characters.The <EMCLASS="emphasis">-d</EM> option deletes from the input each occurrenceof one or more characters specified in a string (special charactersshould be placed within quotation marks to protect them from the shell).For instance, thefollowing command passes to standard output thecontents of <EMCLASS="emphasis">file</EM> with all punctuationdeleted (and is a great exercise in<SPANCLASS="link">shell quoting (<ACLASS="linkend"HREF="ch08_14.htm"TITLE="Bourne Shell Quoting ">8.14</A>)</SPAN>):<ACLASS="indexterm"NAME="AUTOID-40729"></A></P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <CODECLASS="userinput"><B>tr -d &quot;,.!?;:'&quot;'&quot;`' &lt; </B></CODE><CODECLASS="replaceable"><I>file</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">&#13;The <EMCLASS="emphasis">-s</EM> (<EMCLASS="emphasis">squeeze</EM>) option of <EMCLASS="emphasis">tr</EM> removes multipleconsecutive occurrences of the same character in the second argument.For example, thecommand:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <CODECLASS="userinput"><B>tr -s &quot; &quot; &quot; &quot; &lt;</B></CODE> <CODECLASS="replaceable"><I>file</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">will print on standard output a copy of <EMCLASS="emphasis">file</EM> in whichmultiple spaces in sequence have been replaced with a singlespace.</P><PCLASS="para">We've also found<EMCLASS="emphasis">tr</EM> useful when converting documents created on other systemsfor use under UNIX.For example, as described in article<ACLASS="xref"HREF="ch01_05.htm"TITLE="Anyone Can Program the Shell ">1.5</A>,<EMCLASS="emphasis">tr</EM> can be used to change the carriage returns at the end ofeach line in a Macintosh text file into the newline UNIX expects.<EMCLASS="emphasis">tr</EM> allows you to specify characters as octal values bypreceding the value with a backslash, so the command:<ACLASS="indexterm"NAME="AUTOID-40751"></A></P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <CODECLASS="userinput"><B>tr '\015' '\012' &lt; file.mac &gt; file.unix</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">does the trick.</P><PCLASS="para">The command:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <CODECLASS="userinput"><B> tr -d '\015' &lt; pc.file</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">will remove the carriage return from the carriage return/newline pairthat a PC file uses as a line terminator.(This command is also handyfor removing the excess carriage returns from a file created with<SPANCLASS="link"><EMCLASS="emphasis">script</EM> (<ACLASS="linkend"HREF="ch51_05.htm"TITLE="Copy What You Do with script ">51.5</A>)</SPAN>.)</P><PCLASS="para">Article<ACLASS="xref"HREF="ch29_10.htm"TITLE="Just the Words, Please ">29.10</A>uses <EMCLASS="emphasis">tr</EM> to split sentences into words.<ACLASS="indexterm"NAME="AUTOID-40767"></A></P><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">TOR</SPAN>, <SPANCLASS="authorinitials">JP</SPAN></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch35_10.htm"TITLE="35.10 Splitting Files by Context: csplit "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 35.10 Splitting Files by Context: csplit "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch35_12.htm"TITLE="35.12 Converting Between ASCII and EBCDIC "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 35.12 Converting Between ASCII and EBCDIC "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">35.10 Splitting Files by Context: csplit </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">35.12 Converting Between ASCII and EBCDIC </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>