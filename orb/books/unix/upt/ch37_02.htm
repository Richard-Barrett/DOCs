<HTML><HEAD><TITLE>[Chapter 37] 37.2 Why Learn Perl? #1 </TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:48:50Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch37_01.htm"TITLE="37. Perl, a Pathologically Eclectic Rubbish Lister"><LINKREL="prev"HREF="ch37_01.htm"TITLE="37.1 What We Do and Don't Tell You About Perl "><LINKREL="next"HREF="ch37_03.htm"TITLE="37.3 Three Great Virtues of a Programmer "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch37_01.htm"TITLE="37.1 What We Do and Don't Tell You About Perl "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 37.1 What We Do and Don't Tell You About Perl "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 37<BR>Perl, a Pathologically Eclectic Rubbish Lister</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch37_03.htm"TITLE="37.3 Three Great Virtues of a Programmer "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 37.3 Three Great Virtues of a Programmer "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-5561">37.2 Why Learn Perl? #1 </A></H2><PCLASS="para"><ACLASS="indexterm"NAME="UPT-ART-5561-IX-PERL-ADVANTAGES"></A>Perl is a language for easily manipulating text, files, and processes.Perl provides a more concise and readable way to do many jobs that wereformerly accomplished (with difficulty) by programming in the Clanguage or one of the shells.While this book is primarily intendedfor users of the UNIX operating system, Perl runs on severalother operating systems, and provides a portable model of computingacross diverse architectures.</P><PCLASS="para">In the beginning, Perl was intended to be a data reduction language: alanguage for navigating among various files in an arbitrary fashion,scanning large amounts of text efficiently, invoking commands toobtain dynamic data, and printing easily formatted reports based onthe information gleaned.And it does these things quite well&nbsp;- thepattern matching and textual manipulation capabilities of Perl oftenoutperform dedicated C programs.But as Perl developed, it alsobecame a convenient file manipulation language&nbsp;- that is, a language inwhich you can deal with the files themselves apart from theircontents, moving them, renaming them, changing their permissions, andso on.And it also became a convenient process manipulation language,allowing you to create and destroy processes, to control the flow ofdata between them, to preprocess their input and postprocess theiroutput, and to clean up after them when they blow up.And it became anetworking language, with the ability to communicate to otherprocesses on other machines via sockets.</P><PCLASS="para">These things can be done in other languages, such as C or one of theshells.But the solutions are difficult and ugly, because C can'teasily do many of the things that a shell can do, and a shell can't domany of the things that C lets you do.Perl fills a rather largeniche between them&nbsp;- providing you with those things that are easy todo in both languages (all in one convenient place), thus bridging thegap between shell programming and C programming.</P><PCLASS="para">On the other hand, knowledge of Perl can actually help you in learningthe C language, if that is your goal.And if you already know C, thenlearning Perl will be easy, since the languages are structured quitesimilarly.Perl also shares features with many of the UNIXutilities that a shell would invoke, and this can ease your learning ofboth Perl and UNIX.</P><PCLASS="para">It has been stated that a language is not worth knowing unless itteaches you to think differently.  Perl is the exception to that rule(for those who know UNIX), because much of Perl is derived inspirit from other portions of UNIX.  To those who merely likePerl, it is the Practical Extraction and Report Language.  To thosewho love it, it's the Pathologically Eclectic Rubbish Lister.  And tothe minimalists in the crowd who think there should only be one way todo something, Perl looks hopelessly redundant and derivative.  Butsomehow, by a grave violation of the minimalistic UNIX toolboxphilosophy, Perl has become the UNIX tool of choice for manytasks of small-to-medium complexity, and ends up fitting quite happilyback into the toolbox.  Perl can be said to be the toolsmith'sworkbench from which new tools are derived.</P><PCLASS="para">Perl is in many ways a simple language.  The types and structures usedby Perl are easy to use and understand, and you can often tell what awell-written piece of Perl code is doing just by glancing at it.  Youdon't have to know any special incantations to compile a Perlprogram&nbsp;- you can just<SPANCLASS="link">execute it like a shell script (<ACLASS="linkend"HREF="ch45_03.htm"TITLE="Don't Need a Shell for Your Script?  Don't Use One ">45.3</A>)</SPAN>.You don't have to know everything there is to know about Perl beforeyou can write useful programs.</P><PCLASS="para">Though simple in many ways, Perl is also a rich language, and there ismuch to be learned about it.  Although it will take some time for youto absorb all that Perl can do, you will be glad that you have accessto the extensive capabilities of Perl when the time comes that youneed them.  We noted above that Perl borrows many capabilities fromthe shells and C, but Perl also possesses a strict superset of<EMCLASS="emphasis">sed</EM> and <EMCLASS="emphasis">awk</EM> capabilities.  There are, in fact, translatorssupplied with Perl to turn your old <EMCLASS="emphasis">sed</EM> and <EMCLASS="emphasis">awk</EM> (and<EMCLASS="emphasis">nawk</EM>, and <EMCLASS="emphasis">gawk</EM>) scripts into Perl scripts, so you cansee how the features you may already be familiar with correspond tothose of Perl.</P><PCLASS="para">There are other more mundane reasons why people like Perl.  ManyUNIX utilities have undocumented limitations: they don't likelines longer than <EMCLASS="emphasis">n</EM>, where <EMCLASS="emphasis">n</EM> is some mysterious power oftwo, or they blow up if you feed them binary data.  These limitationsare to some extent encouraged by the C language in which they arewritten.  Perl, however, does not have these limitations.  Your lines(and arrays) may grow as long as you like.  Your subroutine recursionmay go as deep as you like.  Variable names can be as long as youlike.  Binary data will not cause problems.  The hashed tables used byassociative arrays expand as necessary to avoid degradation ofperformance.  And you can keep them in database files called DBMfiles.</P><PCLASS="para">You might also like to learn Perl because it will allow you to writeprograms more securely.  Through a dataflow tracing mechanism, Perlcan determine which data is derived from insecure sources, and preventdangerous operations before they happen.  System administrators willparticularly love this feature.</P><PCLASS="para">You might like Perl because it lets you develop programs quickly.  Asan interpreted script language, you get instant feedback whensomething isn't right.  And there's a built-in symbolic debugger thatunderstands any Perl expression because it's written in Perl (andbecause a running Perl script is itself good at executing random bitsof Perl code).</P><PCLASS="para">People have been callingPerl a &quot;system administration language&quot; primarily because systemadministrators have been talking about it, but we think it has amuch broader appeal.  </P><PCLASS="para">[Perl is too complex (or should we say &quot;complete&quot;) a language todescribe in this chapter.  There is an extensive manual page on thedisc along with the software, but if what we've said here intriguesyou, you should probably get Larry and Randal's book <EMCLASS="emphasis">ProgrammingPerl</EM>.  As they say in the preface of the book (from which thisarticle was taken): &quot;Whether you are learning Perl because you arecurious, or because your boss told you to, this handbook will lead youthrough both the basics and the intricacies.  And although we don'tintend to teach you how to program, the perceptive reader will be ableto absorb some of the art, and a little of the science, ofprogramming.  You will also learn much about UNIX, and how tobalance the benefits of the integrated-tool approach with the benefitsof the toolbox approach.  We will encourage you to develop the threegreat virtues of a programmer: laziness, impatience, and hubris.Along the way, we hope you find the book mildly amusing in some spots(and wildly amusing in others).  And while we're at it, we firmlybelieve that learning Perl will increase the value of yourresume.&quot;-<EMCLASS="emphasis">TOR</EM>&nbsp;]</P><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">LW, RS</SPAN> <SPANCLASS="bibliomisc">from O'Reilly &amp; Associates' <CITECLASS="citetitle">Programming Perl</CITE></SPAN></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch37_01.htm"TITLE="37.1 What We Do and Don't Tell You About Perl "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 37.1 What We Do and Don't Tell You About Perl "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch37_03.htm"TITLE="37.3 Three Great Virtues of a Programmer "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 37.3 Three Great Virtues of a Programmer "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">37.1 What We Do and Don't Tell You About Perl </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">37.3 Three Great Virtues of a Programmer </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>