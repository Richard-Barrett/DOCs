<HTML><HEAD><TITLE>[Chapter 38] 38.3 Managing Processes: Overall Concepts </TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:49:30Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch38_01.htm"TITLE="38. Starting, Stopping, and Killing Processes"><LINKREL="prev"HREF="ch38_02.htm"TITLE="38.2 fork and exec "><LINKREL="next"HREF="ch38_04.htm"TITLE="38.4 Subshells "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch38_02.htm"TITLE="38.2 fork and exec "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 38.2 fork and exec "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 38<BR>Starting, Stopping, and Killing Processes</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch38_04.htm"TITLE="38.4 Subshells "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 38.4 Subshells "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-1870">38.3 Managing Processes: Overall Concepts </A></H2><PCLASS="para"><ACLASS="indexterm"NAME="UPT-ART-1870-IX-PROCESSES-MANAGING"></A><ACLASS="indexterm"NAME="AUTOID-42234"></A><ACLASS="indexterm"NAME="AUTOID-42237"></A><ACLASS="indexterm"NAME="AUTOID-42239"></A>As you know, when you log into your UNIX account andstart typing, you're talking to the<SPANCLASS="link"><BCLASS="emphasis.bold">shell</B> (<ACLASS="linkend"HREF="ch08_01.htm#UPT-ART-1810"TITLE="What the Shell Does ">8.1</A>)</SPAN>.The shell you use may be a variant of theBourne shell (such as a standard <EMCLASS="emphasis">sh</EM>, or <EMCLASS="emphasis">ksh</EM> or the GNUshell <EMCLASS="emphasis">bash</EM>), or perhaps it is a variant of the C shell,<EMCLASS="emphasis">csh</EM> (such as, perhaps, the <EMCLASS="emphasis">tcsh</EM> shell that includesline- and history-editing features). Alternatively, you may be usinga somewhat less common shell such as <EMCLASS="emphasis">rc</EM>.</P><PCLASS="para">Your shell is a <BCLASS="emphasis.bold">process</B>, one of many individual programs runningat the same time on the machine. Every process has certain pieces ofinformation associated with it, including:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-42254"></A>The <BCLASS="emphasis.bold">process ID</B> (PID) is a number assigned to the process when it isstarted up. Process IDs are unique (that is, they cycle and areeventually re-used, but no two processes have the same process ID atthe same time).</P></LI><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-42259"></A><ACLASS="indexterm"NAME="AUTOID-42261"></A><ACLASS="indexterm"NAME="AUTOID-42264"></A>The <BCLASS="emphasis.bold">user ID</B> (UID) tells who the process belongs to. This determines<SPANCLASS="link"> what files and directories the process is allowed to read from or write to, (<ACLASS="linkend"HREF="ch22_01.htm#UPT-ART-5010"TITLE="Introduction to File Ownership and Security ">22.1</A>)</SPAN>as well as who is allowed to<SPANCLASS="link"><EMCLASS="emphasis">kill</EM> the process (<ACLASS="linkend"HREF="ch38_10.htm"TITLE="Destroying Processes with kill ">38.10</A>)</SPAN>(tell it to stop running).</P></LI><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-42273"></A>The <BCLASS="emphasis.bold">group ID</B> (GID) is similar to the user ID, but tells whichgroup the process belongs to.On some systems, this controls the groupassigned to files created by the process.See articles<ACLASS="xref"HREF="ch22_05.htm"TITLE="Group Permissions in a Directory with the setgid Bit ">22.5</A>,<ACLASS="xref"HREF="ch22_13.htm"TITLE="Groups and Group Ownership ">22.13</A>,and<ACLASS="xref"HREF="ch22_02.htm"TITLE="Tutorial on File and Directory Permissions ">22.2</A>.</P></LI><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-42281"></A>The <BCLASS="emphasis.bold">environment</B> contains a list of variables and associatedvalues. For example, when you type <CODECLASS="literal">echo</CODE> <CODECLASS="literal">$HOME</CODE>at the shell and it prints out the name of your<SPANCLASS="link">home directory (<ACLASS="linkend"HREF="ch01_20.htm"TITLE="Your Home Directory ">1.20</A>)</SPAN>,it hastold you the contents of the<SPANCLASS="link"><BCLASS="emphasis.bold">environment variable</B> (<ACLASS="linkend"HREF="ch06_01.htm#UPT-ART-1170"TITLE="What Environment Variables Are Good For ">6.1</A>)</SPAN>called <EMCLASS="emphasis">HOME</EM>.</P></LI><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-42292"></A><ACLASS="indexterm"NAME="AUTOID-42294"></A>The<SPANCLASS="link"><BCLASS="emphasis.bold">current working directory</B> (<ACLASS="linkend"HREF="ch14_03.htm"TITLE="What Good Is a Current Directory? ">14.3</A>)</SPAN>is the directorythat is currently the default. When you specify afilename to a program but do not say explicitly where to look forit [with a<SPANCLASS="link">pathname (<ACLASS="linkend"HREF="ch14_02.htm"TITLE="Using Relative and Absolute Pathnames ">14.2</A>)</SPAN><EMCLASS="emphasis">-JP</EM> ], the program will look in the current workingdirectory-if the <EMCLASS="emphasis">PATH</EM> variable contains the current directory(article<ACLASS="xref"HREF="ch06_04.htm"TITLE="The PATH Environment Variable ">6.4</A>explains).</P></LI><LICLASS="listitem"><PCLASS="para"><BCLASS="emphasis.bold">File descriptors</B> are a record of which files a process hasopened for reading or writing, as well as the current position ineach file.<ACLASS="indexterm"NAME="AUTOID-42306"></A>Articles<ACLASS="xref"HREF="ch45_20.htm"TITLE="Overview: Open Files and File Descriptors ">45.20</A>through<ACLASS="xref"HREF="ch45_23.htm"TITLE="The Ins and Outs of Redirected I/O Loops ">45.23</A>explain file descriptor use in the Bourne shell.</P></LI><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-42312"></A><ACLASS="indexterm"NAME="AUTOID-42314"></A>Versions of UNIX with<SPANCLASS="link">job control (<ACLASS="linkend"HREF="ch12_08.htm"TITLE="Job Control in a Nutshell ">12.8</A>)</SPAN>have <BCLASS="emphasis.bold">process groups</B>.A process group is used for<SPANCLASS="link">distribution of signals (<ACLASS="linkend"HREF="ch38_08.htm"TITLE="What Are Signals? ">38.8</A>, <ACLASS="linkend"HREF="ch38_09.htm"TITLE="Killing Foreground Jobs ">38.9</A>, <ACLASS="linkend"HREF="ch38_12.htm"TITLE="Killing All Your Processes ">38.12</A>)</SPAN>.It's also used to control which process can read from a terminal.A process that has the same process group as the terminal is&quot;in the foreground&quot; and can read from the terminal.Other processes are stopped when they try to read from the terminal.</P></LI></UL><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-42321"></A><ACLASS="indexterm"NAME="AUTOID-42323"></A>When you're typing commands at the shell, it is the <BCLASS="emphasis.bold">controllingprocess</B> of your terminal, meaning that it (the shell) is the process thatgets the input you type.See article<ACLASS="xref"HREF="ch38_06.htm"TITLE="The Controlling Terminal ">38.6</A>.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-42329"></A><ACLASS="indexterm"NAME="AUTOID-42332"></A><ACLASS="indexterm"NAME="AUTOID-42335"></A><ACLASS="indexterm"NAME="AUTOID-42338"></A><ACLASS="indexterm"NAME="AUTOID-42340"></A>Normally, when you type a command at the shell prompt, that command runs andis allowed by the shell to take over the terminal for its lifetime.For example, if you type <CODECLASS="literal">more</CODE> <CODECLASS="literal">.login</CODE> to view your <EMCLASS="emphasis">.login</EM>file, the shell starts up the<SPANCLASS="link"><EMCLASS="emphasis">more</EM> (<ACLASS="linkend"HREF="ch25_03.htm"TITLE="Using more to Page Through Files ">25.3</A>)</SPAN>program and then sits around waitingfor it to finish; while <EMCLASS="emphasis">more</EM> is running, you can type commands topage through the file and <EMCLASS="emphasis">more</EM> (not the shell) will see them.The command you run is called a <BCLASS="emphasis.bold">child</B> or <BCLASS="emphasis.bold">subprocess</B> of theshell process, which is its <BCLASS="emphasis.bold">parent</B>.All process information (user ID, group ID, etc.) is inherited by the childfrom its parent, except for the process ID, since the child is assigned anew one.[<SPANCLASS="link">Built-in shell commands (<ACLASS="linkend"HREF="ch01_10.htm"TITLE="Internal and External Commands ">1.10</A>)</SPAN>like <EMCLASS="emphasis">cd</EM> don't start a child process. <EMCLASS="emphasis">-JP</EM> ]</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-42357"></A>Although the normal behavior is for the shell to wait until anycommand you run has finished before it becomes active again, there aresome situations in which you don't want this to occur. For example,if you're using a window system such as<SPANCLASS="link">X (<ACLASS="linkend"HREF="ch01_31.htm"TITLE="The X Window System ">1.31</A>)</SPAN>andwant to start up a new <EMCLASS="emphasis">xterm</EM> window from your shell, you don'twant to type just <CODECLASS="literal">xterm</CODE>, because then your original shell willwait until the <EMCLASS="emphasis">xterm</EM> finishes before allowing you to type any morecommands. This would mean that you still have only one shell to workin, thus defeating the purpose of starting the new <EMCLASS="emphasis">xterm</EM>.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-42366"></A><ACLASS="indexterm"NAME="AUTOID-42368"></A><ACLASS="indexterm"NAME="AUTOID-42371"></A><ACLASS="indexterm"NAME="AUTOID-42374"></A><ACLASS="indexterm"NAME="AUTOID-42377"></A><ACLASS="indexterm"NAME="AUTOID-42379"></A>When you don't want a process to finish before getting back to theshell, you can run it in the<SPANCLASS="link"><BCLASS="emphasis.bold">background</B> (<ACLASS="linkend"HREF="ch01_26.htm"TITLE="What a Multiuser System Can Do for You ">1.26</A>)</SPAN>.You do this by puttingan ampersand (<CODECLASS="literal">&amp;</CODE>) character at the end of the command, for example,<CODECLASS="literal">xterm</CODE> <CODECLASS="literal">&amp;</CODE>. The shell will start the child process and thenimmediatelyprompt you for another command. Note that in this situation, theshell retains control of the terminal and the newly created backgroundprocess cannot read input. Some shells have additional<SPANCLASS="link"><BCLASS="emphasis.bold">job control</B> (<ACLASS="linkend"HREF="ch12_08.htm"TITLE="Job Control in a Nutshell ">12.8</A>)</SPAN>features (processes that are running in the background areoften described as <BCLASS="emphasis.bold">background jobs</B> or just jobs) that enableyou to do things such as kill jobs or bring a job from the backgroundinto the <BCLASS="emphasis.bold">foreground</B> so that it becomes the controlling process ofthe terminal and you can type input at it.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-42391"></A>An important thing to remember is that although process information isinherited by children <EMCLASS="emphasis">when they are started</EM>, it is impossible forthe parent to affect its child's process information (or vice versa)after that point. For example, if you<SPANCLASS="link">start up the editor <EMCLASS="emphasis">vi</EM>, suspend it (<ACLASS="linkend"HREF="ch12_04.htm"TITLE="Job Control and autowrite: Real Time Savers! ">12.4</A>)</SPAN>,and then use the <EMCLASS="emphasis">cd</EM> command in the shell to change directories,<EMCLASS="emphasis">vi</EM> will still have the old working directory when you bring itback into the foreground.  Similarly, if you write a shell script thatchanges some environment variables, those variables will contain theirold values in the shell when the shell script exits. This sometimesconfuses MS-DOS users, since information such as the currentdirectory is stored in a global area which is referenced by allprograms. If it is necessary to communicate information from a childback to a parent shell,<SPANCLASS="link"> other methods are needed . (<ACLASS="linkend"HREF="ch38_08.htm"TITLE="What Are Signals? ">38.8</A>, <ACLASS="linkend"HREF="ch44_23.htm"TITLE="Reading Files with the . and source Commands ">44.23</A>)</SPAN></P><PCLASS="para">[One more concept that I think is useful: When a process exits, itreturns a numeric<SPANCLASS="link">exit status (<ACLASS="linkend"HREF="ch44_07.htm"TITLE="Exit Status of UNIX Processes ">44.7</A>)</SPAN><ACLASS="indexterm"NAME="AUTOID-42402"></A><ACLASS="indexterm"NAME="AUTOID-42404"></A><ACLASS="indexterm"NAME="AUTOID-42407"></A><ACLASS="indexterm"NAME="AUTOID-42410"></A><ACLASS="indexterm"NAME="AUTOID-42413"></A>to its parent process.By convention, a zero status means success; non-zero means some kindof failure. <EMCLASS="emphasis">-JP</EM>]</P><PCLASS="para">Just as there are ways to modify the environment and the currentworking directory of the shell, there are also useful ways to<SPANCLASS="link">manipulate file descriptors (<ACLASS="linkend"HREF="ch45_20.htm"TITLE="Overview: Open Files and File Descriptors ">45.20</A>, <ACLASS="linkend"HREF="ch45_21.htm"TITLE="n&gt;&amp;m: Swap Standard Output and Standard Error ">45.21</A>, <ACLASS="linkend"HREF="ch45_22.htm"TITLE="Handling Files Line-by-Line ">45.22</A>)</SPAN>.<ACLASS="indexterm"NAME="AUTOID-42419"></A></P><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">JIK</SPAN></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch38_02.htm"TITLE="38.2 fork and exec "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 38.2 fork and exec "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch38_04.htm"TITLE="38.4 Subshells "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 38.4 Subshells "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">38.2 fork and exec </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">38.4 Subshells </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>