<HTML><HEAD><TITLE>[Chapter 41] 41.4 How UNIX Handles TAB Characters </TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:51:56Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch41_01.htm"TITLE="41. Terminal and Serial Line Settings"><LINKREL="prev"HREF="ch41_03.htm"TITLE="41.3 Find Out Terminal Settings with stty "><LINKREL="next"HREF="ch41_05.htm"TITLE="41.5 Why Some Systems Backspace over Prompts "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch41_03.htm"TITLE="41.3 Find Out Terminal Settings with stty "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 41.3 Find Out Terminal Settings with stty "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 41<BR>Terminal and Serial Line Settings</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch41_05.htm"TITLE="41.5 Why Some Systems Backspace over Prompts "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 41.5 Why Some Systems Backspace over Prompts "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-5260">41.4 How UNIX Handles TAB Characters </A></H2><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-45679"></A><ACLASS="indexterm"NAME="AUTOID-45681"></A>TAB characters are used in a lot of places: tables, indented paragraphs,source code for programs, the output of many programs, and so on.UNIX handles TABs in a flexible way that's different from some othercomputer systems.</P><PCLASS="para">Most UNIX programs, printers, and terminals are set up to assume tabstopsevery 8 columns.That is, if the terminal or printer gets a TAB character on its input,it moves to the next tabstop position: column 9, 17, 25, etc.The UNIX system(<SPANCLASS="link">kernel, device driver (<ACLASS="linkend"HREF="ch42_01.htm#UPT-ART-1142"TITLE="Making Sense Out of the Terminal Mess ">42.1</A>)</SPAN>)usually doesn't interpret TABcharacters or settabstops; it treats the TABs like any other character, passing them onto utilities or hardware like terminals.</P><PCLASS="para">You might want to use tabstop intervals other than 8.When I write programs, for example, an 8-character indent wastes space,so I use a 4-character indent. If you want to use different tabstops, too, you need to understand how TABsare handled.</P><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="UPT-ART-5260-SECT-1.1">41.4.1 TAB Is Just Another Character to UNIX </A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-45690"></A>Typing TABsends a single TAB character to the UNIXsystem.<ACLASS="indexterm"NAME="AUTOID-45692"></A>If you're editing a file, the editor probably puts that single TABcharacter into the file.Later, when you use<SPANCLASS="link"><EMCLASS="emphasis">cat</EM> (<ACLASS="linkend"HREF="ch25_02.htm"TITLE="Four Ways to Skin a cat ">25.2</A>)</SPAN>,<SPANCLASS="link"><EMCLASS="emphasis">pr</EM> (<ACLASS="linkend"HREF="ch43_07.htm"TITLE="Quick-and-Dirty Formatting Before Printing ">43.7</A>)</SPAN>,<SPANCLASS="link"><EMCLASS="emphasis">lp</EM> (<ACLASS="linkend"HREF="ch43_02.htm"TITLE="Introduction to Printing on UNIX ">43.2</A>)</SPAN>,and so on, they readeach TAB and send out that single character to your terminal, printer, orwhatever.The TAB is usually interpreted by the hardware device itself.Before that, it's a single character like any other.(But see the <EMCLASS="emphasis">stty -tabs</EM> command below.)</P><PCLASS="para">If your terminal has a setup mode, enter setup modeand look at the tabstop settings.They're probably set at columns 9, 17, 25, and so on.When your terminal receives a TAB from the UNIX system, the terminal movesthe cursor to the terminal's next tabstop.</P><PCLASS="para">For example, your terminal might have different tabstops&nbsp;- maybe 11, 21, 31,and so on.Let's say that you're <EMCLASS="emphasis">cat</EM>ting a file.The programmer who made the file had her terminal tabstops set at thedefault 8-column intervals.When she typed it, she used TABs (shown as <CODECLASS="literal"><IMGSRC="../chars/rtri.gif"ALT="&gt;"></CODE> in this example) to indentthe lines.Her terminal showed the file this way:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>cat prog</B></CODE>while read line; do<IMGSRC="../chars/rtri.gif"ALT="&gt;">       set $line<IMGSRC="../chars/rtri.gif"ALT="&gt;">       for word in line; do<IMGSRC="../chars/rtri.gif"ALT="&gt;">       <IMGSRC="../chars/rtri.gif"ALT="&gt;">       case &quot;$1&quot; in...</PRE></BLOCKQUOTE></P><PCLASS="para">If your terminal has tabstops set at 12 characters, the same file wouldlook like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>cat prog</B></CODE>while read line; do<IMGSRC="../chars/rtri.gif"ALT="&gt;">           set $line<IMGSRC="../chars/rtri.gif"ALT="&gt;">           for word in line; do<IMGSRC="../chars/rtri.gif"ALT="&gt;">           <IMGSRC="../chars/rtri.gif"ALT="&gt;">           case &quot;$1&quot; in...</PRE></BLOCKQUOTE></P><PCLASS="para">Neither the UNIX kernel nor the <EMCLASS="emphasis">cat</EM> program did anything different to the <EMCLASS="emphasis">prog</EM> file.The terminal interprets the TABs.</P><PCLASS="para">If you want to display or edit a file that has different tabstops thanyour terminal, what can you do?</P><ULCLASS="itemizedlist"><LICLASS="listitem"><TABLECLASS="para.programreference"BORDER="1"><TR><THVALIGN="TOP"><ACLASS="programreference"HREF="examples/index.htm"TITLE="expand">expand</A><BR></TH><TDVALIGN="TOP"><ACLASS="indexterm"NAME="AUTOID-45720"></A><ACLASS="indexterm"NAME="AUTOID-45723"></A>Use a UNIX utility that &quot;expands&quot; (converts) TABs into spaces.On BSD systems, <EMCLASS="emphasis">expand</EM> does the job.The terminal never sees the TABs in this case, so its tabstop settingsare never used:</TD></TR></TABLE><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>expand prog</B></CODE>while read line; do        set $line        for word in line; do                case &quot;$1&quot; in...</PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-45731"></A>On System V, use <EMCLASS="emphasis">pr</EM> with its <EMCLASS="emphasis">-t -e</EM> options:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>pr -t -e prog</B></CODE>while read line; do        set $line        for word in line; do                case &quot;$1&quot; in...</PRE></BLOCKQUOTE></P><PCLASS="para">So, no matter what your terminal tabstops are, the file will look normal.</P><PCLASS="para">If you want to use other tabstops, use an option.For instance, get 4-character tabstops with <EMCLASS="emphasis">expand -4</EM> or<EMCLASS="emphasis">pr -t -e4</EM>.</P></LI><LICLASS="listitem"><PCLASS="para">Tell your text editor to use different tabstops.The editor will probably &quot;expand&quot; the TABs into spaces before it sendsthem to your terminal.For instance, in <EMCLASS="emphasis">vi</EM>, type:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">:set tabstop=4</PRE></BLOCKQUOTE></P><PCLASS="para">to edit programs with 4-character tabstops.The <EMCLASS="emphasis">prog</EM> file from above would look like:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>vi prog</B></CODE>while read line; do<IMGSRC="../chars/rtri.gif"ALT="&gt;">   set $line<IMGSRC="../chars/rtri.gif"ALT="&gt;">   for word in line; do<IMGSRC="../chars/rtri.gif"ALT="&gt;">   <IMGSRC="../chars/rtri.gif"ALT="&gt;">   case &quot;$1&quot; in...</PRE></BLOCKQUOTE></P><PCLASS="para">although it has TAB characters in exactly the same places.If you have a text editor handy, try changing its tabstops while youdisplay a file.</P></LI></UL><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-45754"></A>If you make a file with non-standard tabstops, it's a good ideato put a comment in the file so people will know.Or, before you save the file for the last time, expand the TABs intospaces.With <EMCLASS="emphasis">vi</EM> on a system that has <EMCLASS="emphasis">expand</EM>, for example, this commandwould convert TABs to spaces at 4-column tabstops:</P><PCLASS="para"><TABLECLASS="screen.co"BORDER="1"><TR><THVALIGN="TOP"><PRECLASS="calloutlist"><ACLASS="co"HREF="ch30_22.htm"TITLE="30.22 Filtering Text Through a UNIX Command ">:%!</A> </PRE></TH><TDVALIGN="TOP"><PRECLASS="screen">:%!expand -4</PRE></TD></TR></TABLE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-45763"></A>The opposite of <EMCLASS="emphasis">expand</EM> is, naturally enough,<SPANCLASS="link"><EMCLASS="emphasis">unexpand</EM> (<ACLASS="linkend"HREF="ch24_06.htm"TITLE="Save Space with Tab Characters ">24.6</A>)</SPAN>.It converts spaces back to TABs at 8-column tabstops.</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="UPT-ART-5260-SECT-1.2">41.4.2 Telling UNIX to Expand TABs </A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-45771"></A>I said above that the UNIX kernel and device drivers don't usuallyexpand TABs into spaces.Sometimes, if you're having a lot of trouble with funny-looking tabstopsettings, you might ask the device driver to expand the TABs into spaces.The command is:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>stty -tabs</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Now in most cases, UNIX will not send TABs to your terminal.It's better to fix your terminal's tabstops, if you can.</P></DIV><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">JP</SPAN></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch41_03.htm"TITLE="41.3 Find Out Terminal Settings with stty "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 41.3 Find Out Terminal Settings with stty "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch41_05.htm"TITLE="41.5 Why Some Systems Backspace over Prompts "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 41.5 Why Some Systems Backspace over Prompts "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">41.3 Find Out Terminal Settings with stty </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">41.5 Why Some Systems Backspace over Prompts </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>