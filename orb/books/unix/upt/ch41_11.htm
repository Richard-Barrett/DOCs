<HTML><HEAD><TITLE>[Chapter 41] 41.11 How termcap and terminfo Describe Terminals </TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:52:08Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch41_01.htm"TITLE="41. Terminal and Serial Line Settings"><LINKREL="prev"HREF="ch41_10.htm"TITLE="41.10 Using terminfo Capabilities in Shell Programs "><LINKREL="next"HREF="ch41_12.htm"TITLE="41.12 Finding Out What Characters Your Terminal's Special Keys Send"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch41_10.htm"TITLE="41.10 Using terminfo Capabilities in Shell Programs "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 41.10 Using terminfo Capabilities in Shell Programs "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 41<BR>Terminal and Serial Line Settings</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch41_12.htm"TITLE="41.12 Finding Out What Characters Your Terminal's Special Keys Send"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 41.12 Finding Out What Characters Your Terminal's Special Keys Send"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-7967">41.11 How termcap and terminfo Describe Terminals </A></H2><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-46050"></A><ACLASS="indexterm"NAME="AUTOID-46053"></A><ACLASS="indexterm"NAME="AUTOID-46056"></A>The<SPANCLASS="link"><EMCLASS="emphasis">termcap</EM> and <EMCLASS="emphasis">terminfo</EM> databases (<ACLASS="linkend"HREF="ch05_02.htm"TITLE="The Idea of a Terminal Database ">5.2</A>)</SPAN>describe thecapabilities of terminals using a rather obscure and compactlanguage.At this point, the ASCII terminal market has slowed downand standardized, so it is not as essential as it used to be to write new terminal entries.However, there are still times when it's useful to know how to read an entry.For example, you may want to use particular capabilities <SPANCLASS="link">in a shell program (<ACLASS="linkend"HREF="ch41_10.htm"TITLE="Using terminfo Capabilities in Shell Programs ">41.10</A>)</SPAN>or<SPANCLASS="link">in a function key map (<ACLASS="linkend"HREF="ch41_12.htm"TITLE="Finding Out What Characters Your Terminal's Special Keys Send">41.12</A>)</SPAN>.</P><PCLASS="para">We won't give you a detailed list of all of the possiblecapabilities&nbsp;- that you can get from the <EMCLASS="emphasis">termcap</EM> or<EMCLASS="emphasis">terminfo</EM> manual page on your system.However, we do want togive you an introduction to the language of <EMCLASS="emphasis">termcap</EM> and<EMCLASS="emphasis">terminfo</EM>.</P><PCLASS="para">Here's a simplifiedentry for the Wyse Technology Wyse-50 terminal.The capabilities described here are only a subset sufficient to introduce the basic syntax of the language: </P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"># incomplete termcap entry for the Wyse WY-50 n9|wy50|WY50| Wyse Technology WY-50:\    :bs:am:co#80:li#24:\    :up=^K:cl=^Z:ho=^^:nd=^L:cm=\E=%+ %+ :</PRE></BLOCKQUOTE></P><PCLASS="para">And here is the corresponding <EMCLASS="emphasis">terminfo</EM> source file:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"># incomplete terminfo entry for Wyse WY-50wy50|WY50|Wyse Technology WY-50,    am, cols#80, lines#24, cuu1=^K, clear=^Z,     home=^^, cuf1=^L, cup=\E=%p1%'\s'%+%c%p2%'\s'%+%c,</PRE></BLOCKQUOTE></P><PCLASS="para">The backslash (<CODECLASS="literal">\</CODE>) character is used to suppress the newline in <EMCLASS="emphasis">termcap</EM>.<EMCLASS="emphasis">termcap</EM> entries must be defined on asingle logical line, with colons (<CODECLASS="literal">:</CODE>) separating each field.<EMCLASS="emphasis">terminfo</EM> does not require the entry to be on a single line, sobackslashes are not necessary.In <EMCLASS="emphasis">terminfo</EM>, commas are used asthe field separator.</P><PCLASS="para">The language certainly is not verbose!However, if we work through it methodically, it might begin to make sense.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-46085"></A><ACLASS="indexterm"NAME="AUTOID-46088"></A>There are three types of lines in a <EMCLASS="emphasis">termcap</EM> or <EMCLASS="emphasis">terminfo</EM> file: comment lines, lines that list alias names for the terminal, and lines that specify terminal capabilities. </P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para"><EMCLASS="emphasis">Comment lines:</EM>The first line in both the <EMCLASS="emphasis">termcap</EM> and <EMCLASS="emphasis">terminfo</EM> entriesshown above is a comment line.</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"># incomplete termcap entry for the Wyse WY-50# incomplete terminfo entry for the Wyse WY-50</PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-46102"></A><ACLASS="indexterm"NAME="AUTOID-46105"></A><ACLASS="indexterm"NAME="AUTOID-46108"></A>All comment lines begin with a hash mark (<CODECLASS="literal">#</CODE>).Embedded comments are not allowed: a line is either a comment or part of an entry.In <EMCLASS="emphasis">termcap</EM> and <EMCLASS="emphasis">terminfo</EM>, the convention is thatcomments precede the terminal they describe.&#13;</P></LI><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-46116"></A><ACLASS="indexterm"NAME="AUTOID-46118"></A><ACLASS="indexterm"NAME="AUTOID-46121"></A><EMCLASS="emphasis">Name lines:</EM> The second line is a list of alias names for the terminal,separated by the vertical bar character.</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">n9|wy50|WY50| Wyse Technology WY-50:\   <ICLASS="lineannotation">...termcap</I>wy50|WY50|Wyse Technology WY-50,   <ICLASS="lineannotation">...terminfo</I></PRE></BLOCKQUOTE></P><PCLASS="para">Multiple aliases are provided as a convenience to the user.The environment variable<SPANCLASS="link">TERM (<ACLASS="linkend"HREF="ch05_10.htm"TITLE="Finding What Terminal Names You Can Use ">5.10</A>)</SPAN>can be set to any one of thealiases.By convention, the last alias is the full name of the terminal.</P><PCLASS="para">The alias list is the first field of the terminal description, with a colon (<EMCLASS="emphasis">termcap</EM>) or comma (<EMCLASS="emphasis">terminfo</EM>) marking the end of the alias list and the start of the capabilities list.You could begin listing the capabilities immediately after this field, but it makes reading much easier if all the aliases are on oneline and the capabilities start on the next.</P><PCLASS="para">When a <EMCLASS="emphasis">terminfo</EM> source file is compiled with <EMCLASS="emphasis">tic</EM>, thecompiled data is placed in a file corresponding to the first alias (inthis case, <EMCLASS="emphasis">/usr/lib/terminfo/w/wy50</EM>), and a link iscreated for all other aliases but the last.In this example,TERM could be set to either <EMCLASS="emphasis">wy50</EM> or <EMCLASS="emphasis">WY50</EM> to access the compiled terminal description.</P></LI><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-46142"></A><EMCLASS="emphasis">Capability lines:</EM>The remaining lines are the list of the actual terminal capabilities.These lines are indented (using a tab or blank spaces) to distinguish them from the line of terminal aliases.Note that theindentation of continued capability lines is not just cosmeticbut is a required part of the syntax.</P><PCLASS="para">In <EMCLASS="emphasis">termcap</EM>, capabilities are identified by a two-character name; in<EMCLASS="emphasis">terminfo</EM>, the capability names may have anywhere between two andfive characters.The capability name is the first thing in eachcapability field and describes a feature of the terminal.</P></LI></UL><PCLASS="para">There are three types of capability:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-46152"></A><BCLASS="emphasis.bold">Boolean capabilities</B> consist of a capability name with no arguments.For example, <EMCLASS="emphasis">am</EM> (both <EMCLASS="emphasis">termcap</EM> and <EMCLASS="emphasis">terminfo</EM>)specifies that the terminal performs automatic right margins, wrapping the cursor to the start of the next line whenthe cursor reaches the last position on the current line.If <EMCLASS="emphasis">am</EM> is not specified, programs will assume that your terminaldoes not have this feature.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-46161"></A><ACLASS="indexterm"NAME="AUTOID-46163"></A><ACLASS="indexterm"NAME="AUTOID-46165"></A><ACLASS="indexterm"NAME="AUTOID-46167"></A><EMCLASS="emphasis">am</EM> is an example of a Booleanfeature that is advantageous, but Booleans are also used to specifynegative features of your terminal&nbsp;- for example, if your terminaldoes not perform newlines in the expected way, you might have what iscalled the &quot;newline glitch,&quot; and the entry may need to specify <EMCLASS="emphasis">xn</EM> (<EMCLASS="emphasis">termcap</EM>) or <CODECLASS="userinput"><B>xenl</B></CODE> (<EMCLASS="emphasis">terminfo</EM>) to tell programs to adjust for the terminal's peculiarity.</P></LI><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-46176"></A><BCLASS="emphasis.bold">Numeric capabilities</B> consist of a capability name, asharp sign, and a number.For example, <CODECLASS="literal">co#80</CODE> (<EMCLASS="emphasis">termcap</EM>) and <CODECLASS="literal">cols#80</CODE> (<EMCLASS="emphasis">terminfo</EM>)says that the terminal has 80 columns.All numeric values are non-negative.</P></LI><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-46185"></A><ACLASS="indexterm"NAME="AUTOID-46187"></A><ACLASS="indexterm"NAME="AUTOID-46190"></A><BCLASS="emphasis.bold">String capabilities</B> tell how to issue a command to the terminal.The format of a string capability is the capability name, followed by anequal sign, followed by the command sequence.For example,<CODECLASS="literal">up=^K</CODE> (<EMCLASS="emphasis">termcap</EM>) or <CODECLASS="literal">cuu1=^K</CODE> (<EMCLASS="emphasis">terminfo</EM>)specifies that the sequence CTRL-k will move the cursor up one line. </P></LI></UL><PCLASS="para">Now the Wyse-50 example should make more sense.First <EMCLASS="emphasis">termcap</EM>:</P><H4CLASS="figure"><ACLASS="title"NAME="UPT-ART-7967-FIG-0">Figure 41.1: A Simplified termcap Entry</A></H4><IMGCLASS="graphic"SRC="figs/7967a.gif"ALT="Figure 41.1"><PCLASS="para">Now <EMCLASS="emphasis">terminfo</EM>:</P><H4CLASS="figure"><ACLASS="title"NAME="UPT-ART-7967-FIG-1">Figure 41.2: A Simplified terminfo Entry</A></H4><IMGCLASS="graphic"SRC="figs/7967b.gif"ALT="Figure 41.2"><PCLASS="para">The examples demonstrate all three kinds of capabilities: Boolean,numeric, and string.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-46210"></A>The first two capabilities in the <EMCLASS="emphasis">termcap</EM> entry, andthe first capability in the <EMCLASS="emphasis">terminfo</EM> entry, are Boolean.</P><DLCLASS="variablelist"><DTCLASS="term"><EMCLASS="emphasis">bs</EM></DT><DDCLASS="listitem"><PCLASS="para">is the <EMCLASS="emphasis">termcap</EM> backspace capability, which means that the terminal willbackspace when sent the CTRL-h (<CODECLASS="literal">^H</CODE>) character.There is no <EMCLASS="emphasis">terminfo</EM> capability directly equivalent to <EMCLASS="emphasis">bs</EM>, so itis considered obsolete by <EMCLASS="emphasis">terminfo</EM> and by BSD 4.3 <EMCLASS="emphasis">termcap</EM>.In place of the <EMCLASS="emphasis">bs</EM> capability, <EMCLASS="emphasis">terminfo</EM> would explicitlydefine CTRL-h as the string to send the cursor left <CODECLASS="userinput"><B>cul1=</B></CODE><CODECLASS="literal">^H</CODE>).</P></DD><DTCLASS="term"><EMCLASS="emphasis">am</EM></DT><DDCLASS="listitem"><PCLASS="para">&#13;<EMCLASS="emphasis">am</EM><ACLASS="indexterm"NAME="AUTOID-46236"></A><ACLASS="indexterm"NAME="AUTOID-46238"></A>is the automargin capability, also known as wraparound.  It means thatwhen a line reaches the right edge of the screen, the terminalautomatically continues on the next line.</P></DD></DL><PCLASS="para">The next two capabilities are numeric.</P><DLCLASS="variablelist"><DTCLASS="term"><EMCLASS="emphasis">co#80</EM></DT><DTCLASS="term"><EMCLASS="emphasis">cols#80</EM></DT><DDCLASS="listitem"><PCLASS="para">says that the terminal has 80 columns.</P></DD><DTCLASS="term"><EMCLASS="emphasis">li#24</EM></DT><DTCLASS="term"><EMCLASS="emphasis">lines#24</EM></DT><DDCLASS="listitem"><PCLASS="para">&#13;says that the terminal has 24 lines.&#13;</P></DD></DL><PCLASS="para">You will find that 80 characters and 24 linesis the most common screen size but that there are exceptions.Eighty characters was originally chosen because it is the width of a punch card, and 24 lines was chosen to take advantage of cheap televisionscreen technology.</P><PCLASS="para">The remainder of the fields in the Wyse-50 entry contain string capabilities.The first four of these are fairly simple:</P><DLCLASS="variablelist"><DTCLASS="term"><EMCLASS="emphasis">up=^K</EM></DT><DTCLASS="term"><EMCLASS="emphasis">cuu1=^K</EM></DT><DDCLASS="listitem"><PCLASS="para">is the up capability; it says that to move the cursor up one line,send the <CODECLASS="literal">^K</CODE> character to the terminal.</P></DD><DTCLASS="term"><EMCLASS="emphasis">cl=^Z</EM></DT><DTCLASS="term"><EMCLASS="emphasis">clear=^Z</EM></DT><DDCLASS="listitem"><PCLASS="para">is the clear capability; it says that to clear the screen,send the <CODECLASS="literal">^Z</CODE> character to the terminal.</P></DD><DTCLASS="term"><EMCLASS="emphasis">ho=^^</EM></DT><DTCLASS="term"><EMCLASS="emphasis">home=^^</EM></DT><DDCLASS="listitem"><PCLASS="para">is the home capability;  it says that to move the cursor Home (upper-left corner), send the <CODECLASS="literal">^^</CODE> character (CTRL-<CODECLASS="literal">^</CODE>) to the terminal.</P></DD><DTCLASS="term"><EMCLASS="emphasis">nd=^L</EM></DT><DTCLASS="term"><EMCLASS="emphasis">cuf1=^L</EM></DT><DDCLASS="listitem"><PCLASS="para">&#13;is the non-destructive space capability; it says that to move the cursor onespace to the right without changing the text, send the <CODECLASS="literal">^L</CODE> character to the terminal.</P></DD></DL><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="UPT-ART-7967-SECT-1.0.1">41.11.1 Special Character Codes </A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-46295"></A><ACLASS="indexterm"NAME="AUTOID-46297"></A>No doubt the symbols <CODECLASS="literal">^K</CODE>, <CODECLASS="literal">^Z</CODE>, <CODECLASS="literal">^^</CODE>, and <CODECLASS="literal">^L</CODE> shown above are familiar to you.A caret (<CODECLASS="literal">^</CODE>) followed by a letter is a convention for representing an unprintable control character generated by holding down the CONTROL(CTRL) key on the keyboard while typing another.Note that control charactersare entered into a terminal description as two characters by typingthe caret character (<CODECLASS="literal">^</CODE>) followed by a letter, rather than by inserting the actual control character.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-46307"></A>Both <EMCLASS="emphasis">termcap</EM> and <EMCLASS="emphasis">terminfo</EM> use other codes to write other unprintable characters, as well as characters that have special meaningin <EMCLASS="emphasis">termcap</EM> or <EMCLASS="emphasis">terminfo</EM> syntax.The other<ACLASS="indexterm"NAME="AUTOID-46314"></A>codes, most of which should be familiar to C programmers, are listed in<ACLASS="xref"HREF="ch41_11.htm#UPT-ART-7967-TAB-0"TITLE="Termcap and Terminfo Special Character Codes">Table 41.1</A>.&#13;</P><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="UPT-ART-7967-TAB-0">Table 41.1: Termcap and Terminfo Special Character Codes</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Code</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Description</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Comment</TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">\E</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">escape</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">termcap and terminfo</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">\e</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">escape</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">terminfo only</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">^<CODECLASS="userinput"><B>x</B></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">control-<CODECLASS="userinput"><B>x</B></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">where <CODECLASS="userinput"><B>x</B></CODE> is any letter</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">\n</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">newline</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">\r</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">return</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">\t</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">tab</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">\b</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">backspace</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">\f</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">formfeed</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">\s</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">space</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">terminfo only</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">\l</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">linefeed</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">terminfo only</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">\<CODECLASS="userinput"><B>xxx</B></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">octal value of <CODECLASS="userinput"><B>xxx</B></CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">must be three characters</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">\041</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">exclamation point <CODECLASS="literal">!</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">C shell history uses <CODECLASS="literal">!</CODE></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">\072</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">the character <CODECLASS="literal">:</CODE></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">termcap uses ordinary : as separator</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">\200</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">null</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">\\000 for null does not work</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">\0</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">null</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">terminfo only</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">\^</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">caret</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">terminfo only</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">\\</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">backslash</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">terminfo only</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">\,</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">comma</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">terminfo only</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">\:</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">colon</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">terminfo only</TD></TR></TBODY></TABLE></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="UPT-ART-7967-SECT-1.0.2">41.11.2 Encoding Arguments </A></H3><PCLASS="para">The last capability in the Wyse-50 example is the most complicated.<EMCLASS="emphasis">cm=</EM> (<EMCLASS="emphasis">termcap</EM>) and <EMCLASS="emphasis">cup=</EM> (<EMCLASS="emphasis">terminfo</EM>) specify the cursor motion capability, which describes how to move the cursor directly to a specific location.Since the desired location is specified by theprogram at run-time, the capability must providesome mechanism for encoding arguments.The program uses thisdescription to figure out what string it needs to send to move thecursor to the desired location.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-46418"></A>Because we aren't telling you how to write <EMCLASS="emphasis">termcap</EM> or <EMCLASS="emphasis">terminfo</EM> entries, but just to read them, all you need to knowis that the percent sign (<CODECLASS="literal">%</CODE>) is used forencoding, and when it appears in a terminal entry, the capability isusing run-time parameters.</P><PCLASS="para">If you need to write an entry, see O'Reilly &amp; Associates' <EMCLASS="emphasis">termcap&amp; terminfo</EM>.</P></DIV><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">JS</SPAN>, <SPANCLASS="authorinitials">TOR</SPAN></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch41_10.htm"TITLE="41.10 Using terminfo Capabilities in Shell Programs "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 41.10 Using terminfo Capabilities in Shell Programs "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch41_12.htm"TITLE="41.12 Finding Out What Characters Your Terminal's Special Keys Send"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 41.12 Finding Out What Characters Your Terminal's Special Keys Send"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">41.10 Using terminfo Capabilities in Shell Programs </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">41.12 Finding Out What Characters Your Terminal's Special Keys Send</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>