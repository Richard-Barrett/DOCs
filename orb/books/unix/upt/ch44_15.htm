<HTML><HEAD><TITLE>[Chapter 44] 44.15 Handling Command-Line Arguments in Shell Scripts </TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:53:51Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch44_01.htm"TITLE="44. Shell Programming for the Uninitiated"><LINKREL="prev"HREF="ch44_14.htm"TITLE="44.14 Putting awk, sed, etc., Inside Shell Scripts "><LINKREL="next"HREF="ch44_16.htm"TITLE="44.16 Handling Command-Line Arguments with a for Loop "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch44_14.htm"TITLE="44.14 Putting awk, sed, etc., Inside Shell Scripts "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 44.14 Putting awk, sed, etc., Inside Shell Scripts "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 44<BR>Shell Programming for the Uninitiated</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch44_16.htm"TITLE="44.16 Handling Command-Line Arguments with a for Loop "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 44.16 Handling Command-Line Arguments with a for Loop "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-7130">44.15 Handling Command-Line Arguments in Shell Scripts </A></H2><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-51264"></A><ACLASS="indexterm"NAME="AUTOID-51267"></A><ACLASS="indexterm"NAME="AUTOID-51270"></A><ACLASS="indexterm"NAME="AUTOID-51273"></A><ACLASS="indexterm"NAME="AUTOID-51276"></A>To write flexible shell scripts, you usually want to give themcommand-line arguments.As you've seen in<SPANCLASS="link">other articles (<ACLASS="linkend"HREF="ch44_11.htm"TITLE="Set Exit Status of a Shell (Script) ">44.11</A>, <ACLASS="linkend"HREF="ch44_12.htm"TITLE="Trapping Exits Caused by Interrupts ">44.12</A>)</SPAN>,<CODECLASS="literal">$1</CODE> holds the first command-line argument.The Bourne shell can give you arguments through the ninth, <CODECLASS="literal">$9</CODE>.The Korn Shell and some other newer Bourne-type shells understand<CODECLASS="literal">${10}</CODE> for the tenth argument, and so on.(Article<ACLASS="xref"HREF="ch08_05.htm"TITLE="Command-Line Evaluation ">8.5</A>has an overview of the shell's command-line handling.)</P><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="UPT-ART-7130-SECT-1.1">44.15.1 With the  $@&quot;</A></H3><PCLASS="para">If you've been reading this<SPANCLASS="link">series (<ACLASS="linkend"HREF="ch44_01.htm#UPT-ART-0065"TITLE="Everyone Should Learn Some Shell Programming ">44.1</A>)</SPAN>of articles in order, you saw the<SPANCLASS="link"><EMCLASS="emphasis">zpg</EM> (<ACLASS="linkend"HREF="ch44_12.htm"TITLE="Trapping Exits Caused by Interrupts ">44.12</A>)</SPAN>script that accepted just one command-line argument.<ACLASS="indexterm"NAME="AUTOID-51290"></A>If you put <CODECLASS="literal">&quot;$@&quot;</CODE> in a script, the shell will replace that stringwith a<SPANCLASS="link">quoted (<ACLASS="linkend"HREF="ch08_14.htm"TITLE="Bourne Shell Quoting ">8.14</A>)</SPAN>set of the script's command-line arguments.Then you can pass as many arguments as you want, including pathnameswith<SPANCLASS="link">unusual characters (<ACLASS="linkend"HREF="ch23_11.htm"TITLE="Deleting Files with Odd Names ">23.11</A>)</SPAN>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>zpg report memo &quot;savearts/What's next?&quot;</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-51300"></A><ACLASS="indexterm"NAME="AUTOID-51303"></A><ACLASS="indexterm"NAME="AUTOID-51306"></A><ACLASS="indexterm"NAME="AUTOID-51309"></A>The third argument has a perfectly legal filename; we see more and more of themon our system&nbsp;- especially filesystems that are networked to computerslike the Macintosh, where spaces and other &quot;special&quot; characters infilenames are common.Double-quoting all arguments through the script helps to be sure thatthe script can handle these unusual (but legal!) pathnames.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-51313"></A><ACLASS="indexterm"NAME="AUTOID-51316"></A><ACLASS="indexterm"NAME="AUTOID-51319"></A><ACLASS="indexterm"NAME="AUTOID-51322"></A>In this case, we want the arguments to be passed to the <EMCLASS="emphasis">gzcat</EM> command.Let's change the <EMCLASS="emphasis">zpg</EM> script to read:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">gzcat &quot;$@&quot; &gt;$temp</PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-51330"></A><ACLASS="indexterm"NAME="AUTOID-51334"></A>When the shell runs the script with the arguments shown above,the command line will become:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">gzcat &quot;report&quot; &quot;memo&quot; &quot;savearts/What's next?&quot; &gt;/tmp/zpg12345</PRE></BLOCKQUOTE></P><BLOCKQUOTECLASS="note"><PCLASS="para"><STRONG>NOTE:</STRONG> <ACLASS="indexterm"NAME="AUTOID-51341"></A>On some Bourne shells, if there are no command-line arguments,the <CODECLASS="literal">&quot;$@&quot;</CODE><SPANCLASS="link">becomes a single empty argument (<ACLASS="linkend"HREF="ch46_07.htm"TITLE="Quoting and Command-Line Parameters ">46.7</A>)</SPAN>,as if you'd typed this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">gzcat &quot;&quot; &gt;/tmp/zpg12345</PRE></BLOCKQUOTE></P><PCLASS="para">In this case, the <EMCLASS="emphasis">gzcat</EM> command would complain that it can't find a file.(Of course, in this script, the <EMCLASS="emphasis">case</EM> would prevent this problem.But not all scripts test the number of arguments.)</P><PCLASS="para">On those shells, you can replace <CODECLASS="literal">&quot;$@&quot;</CODE> with<SPANCLASS="link"><CODECLASS="literal">${1+&quot;$@&quot;}</CODE> (<ACLASS="linkend"HREF="ch45_12.htm"TITLE="Parameter Substitution ">45.12</A>)</SPAN>.That means that if <CODECLASS="literal">$1</CODE> is defined, <CODECLASS="literal">&quot;$@&quot;</CODE> should be used.A less-good fix is to replace <CODECLASS="literal">&quot;$@&quot;</CODE> with <CODECLASS="literal">$*</CODE>.It gives you an unquoted list of command-line arguments; that's usually finebut can cause trouble on pathnames with special characters in them.</P></BLOCKQUOTE></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="UPT-ART-7130-SECT-1.2">44.15.2 With a Loop </A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-51362"></A><ACLASS="indexterm"NAME="AUTOID-51365"></A><ACLASS="indexterm"NAME="AUTOID-51368"></A><ACLASS="indexterm"NAME="AUTOID-51371"></A><ACLASS="indexterm"NAME="AUTOID-51374"></A><ACLASS="indexterm"NAME="AUTOID-51377"></A><ACLASS="indexterm"NAME="AUTOID-51379"></A>A<SPANCLASS="link"><EMCLASS="emphasis">for</EM> loop (<ACLASS="linkend"HREF="ch44_16.htm"TITLE="Handling Command-Line Arguments with a for Loop ">44.16</A>)</SPAN>can step through all command-line arguments, one by one.You can also use a<SPANCLASS="link"><EMCLASS="emphasis">while</EM> loop (<ACLASS="linkend"HREF="ch44_10.htm"TITLE="Loops That Test Exit Status ">44.10</A>)</SPAN>that tests <CODECLASS="literal">$#</CODE> (see later in this chapter)and removes the arguments one by one with the<SPANCLASS="link"><EMCLASS="emphasis">shift</EM> command (<ACLASS="linkend"HREF="ch44_17.htm"TITLE="Handling Arguments with while and shift ">44.17</A>)</SPAN>.The<SPANCLASS="link"><EMCLASS="emphasis">getopt</EM> and <EMCLASS="emphasis">getopts</EM> (<ACLASS="linkend"HREF="ch44_18.htm"TITLE="Standard Command-Line Parsing ">44.18</A>)</SPAN>commands handle arguments in a more standard way.</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="UPT-ART-7130-SECT-1.3">44.15.3 Counting Arguments with $# </A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-51395"></A>The <CODECLASS="literal">$#</CODE> parameter counts the number of command-line arguments.For instance, if there are three arguments, <CODECLASS="literal">$#</CODE> will contain <CODECLASS="literal">3</CODE>.This is usually used for error-checking(as in the <EMCLASS="emphasis">zpg</EM> script in article<ACLASS="xref"HREF="ch44_12.htm"TITLE="Trapping Exits Caused by Interrupts ">44.12</A>)with<SPANCLASS="link"><EMCLASS="emphasis">case</EM> (<ACLASS="linkend"HREF="ch44_05.htm"TITLE="Test String Values with Bourne Shell case ">44.5</A>)</SPAN>or<SPANCLASS="link"><EMCLASS="emphasis">test</EM> (<ACLASS="linkend"HREF="ch44_20.htm"TITLE="test: Testing Files and Strings ">44.20</A>)</SPAN>.</P></DIV><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">JP</SPAN></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch44_14.htm"TITLE="44.14 Putting awk, sed, etc., Inside Shell Scripts "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 44.14 Putting awk, sed, etc., Inside Shell Scripts "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch44_16.htm"TITLE="44.16 Handling Command-Line Arguments with a for Loop "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 44.16 Handling Command-Line Arguments with a for Loop "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">44.14 Putting awk, sed, etc., Inside Shell Scripts </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">44.16 Handling Command-Line Arguments with a for Loop </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>