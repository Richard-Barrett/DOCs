<HTML><HEAD><TITLE>[Chapter 44] 44.16 Handling Command-Line Arguments with a for Loop </TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:53:54Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch44_01.htm"TITLE="44. Shell Programming for the Uninitiated"><LINKREL="prev"HREF="ch44_15.htm"TITLE="44.15 Handling Command-Line Arguments in Shell Scripts "><LINKREL="next"HREF="ch44_17.htm"TITLE="44.17 Handling Arguments with while and shift "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch44_15.htm"TITLE="44.15 Handling Command-Line Arguments in Shell Scripts "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 44.15 Handling Command-Line Arguments in Shell Scripts "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 44<BR>Shell Programming for the Uninitiated</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch44_17.htm"TITLE="44.17 Handling Arguments with while and shift "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 44.17 Handling Arguments with while and shift "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-4940">44.16 Handling Command-Line Arguments with a for Loop </A></H2><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-51412"></A><ACLASS="indexterm"NAME="AUTOID-51415"></A>Sometimes you want a script that will step through the command-line argumentsone by one.(The<SPANCLASS="link"><CODECLASS="literal">&quot;$@&quot;</CODE> parameter (<ACLASS="linkend"HREF="ch44_15.htm"TITLE="Handling Command-Line Arguments in Shell Scripts ">44.15</A>)</SPAN> gives you all of them at once.)The Bourne shell <EMCLASS="emphasis">for</EM> loop can do this.The <EMCLASS="emphasis">for</EM> loop looks like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">for arg in <CODECLASS="replaceable"><I>list</I></CODE>do    ...<EMCLASS="emphasis">handle $arg</EM>...done</PRE></BLOCKQUOTE></P><PCLASS="para">If you omit the <CODECLASS="literal">in</CODE><CODECLASS="replaceable"><I>&nbsp;list</I></CODE>, the loop steps through the command-line arguments.It puts the first command-line argument in <EMCLASS="emphasis">arg</EM> (or whateverelse you choose to call the <SPANCLASS="link">shell variable (<ACLASS="linkend"HREF="ch06_08.htm"TITLE="Shell Variables ">6.8</A>)</SPAN>),then executes the commands from <CODECLASS="literal">do</CODE> to <CODECLASS="literal">done</CODE>.Then it puts the next command-line argument in <EMCLASS="emphasis">arg</EM>, does the loop...and so on... ending the loop after handling all the arguments.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-51435"></A><ACLASS="indexterm"NAME="AUTOID-51438"></A><ACLASS="indexterm"NAME="AUTOID-51440"></A>For an example of a <EMCLASS="emphasis">for</EM> loop, let's hack on the<SPANCLASS="link"><EMCLASS="emphasis">zpg</EM> (<ACLASS="linkend"HREF="ch44_12.htm"TITLE="Trapping Exits Caused by Interrupts ">44.12</A>)</SPAN>script.</P><PCLASS="para"><TABLECLASS="screen.co"BORDER="1"><TR><THVALIGN="TOP"><PRECLASS="calloutlist">&#13;<ACLASS="co"HREF="ch44_06.htm"TITLE="44.6 Pattern Matching in case Statements ">case</A> &#13;</PRE></TH><TDVALIGN="TOP"><PRECLASS="screen">#!/bin/sh# zpg - UNCOMPRESS FILE(S), DISPLAY WITH pg# Usage: zpg [pg options] file [...files]stat=1  # DEFAULT EXIT STATUS; RESET TO 0 BEFORE NORMAL EXITtemp=/tmp/zpg$$trap 'rm -f $temp; exit $stat' 0trap 'echo &quot;`basename $0`: Ouch! Quitting early...&quot; 1&gt;&amp;2' 1 2 15files=  switches=for arg<ACLASS="indexterm"NAME="AUTOID-51448"></A>do    case &quot;$arg&quot; in    -*) switches=&quot;$switches $arg&quot; ;;    *)  files=&quot;$files $arg&quot; ;;    esacdonecase &quot;$files&quot; in&quot;&quot;) echo &quot;Usage: `basename $0` [pg options] file [files]&quot; 1&gt;&amp;2 ;;*)  for file in $files    do gzcat &quot;$file&quot; | pg $switches    done    stat=0    ;;esac</PRE></TD></TR></TABLE></P><PCLASS="para">We added a <EMCLASS="emphasis">for</EM> loop to get and check each command-line argument.For example, let's say that a user typed:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>zpg -n afile ../bfile</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-51458"></A><ACLASS="indexterm"NAME="AUTOID-51461"></A>The first pass through the <EMCLASS="emphasis">for</EM> loop, <CODECLASS="literal">$arg</CODE> is <CODECLASS="literal">-n</CODE>.Because the argument starts with a minus sign (<CODECLASS="literal">-</CODE>),the <EMCLASS="emphasis">case</EM> treats it as an option.Now the <CODECLASS="literal">switches</CODE> variable is replaced by its previous contents(an empty string), a space, and <CODECLASS="literal">-n</CODE>.Control goes to the <CODECLASS="literal">esac</CODE> and the loop repeatswith the next argument.</P><PCLASS="para">The next argument, <CODECLASS="literal">afile</CODE>, doesn't look like an option.So now the <CODECLASS="literal">files</CODE> variable will contain a space and <CODECLASS="literal">afile</CODE>.</P><PCLASS="para">The loop starts over once more, with <CODECLASS="literal">../bfile</CODE> in <CODECLASS="literal">$arg</CODE>.Again, this looks like a file, so now <CODECLASS="literal">$files</CODE> has<CODECLASS="literal">&nbsp;afile ../bfile</CODE>.Because <CODECLASS="literal">../bfile</CODE> was the last argument, the loop ends;<CODECLASS="literal">$switches</CODE>has the options and <CODECLASS="literal">$files</CODE> has all the other arguments.</P><PCLASS="para">Next, we added another <EMCLASS="emphasis">for</EM> loop.This one has the word <CODECLASS="literal">in</CODE> followed by <CODECLASS="literal">$files</CODE>,so the loop steps through the contents of <CODECLASS="literal">$files</CODE>.The loop runs <EMCLASS="emphasis">gzcat</EM> on each file, piping it to <EMCLASS="emphasis">pg</EM> with any switchesyou gave.</P><PCLASS="para">Note that <CODECLASS="literal">$switches</CODE> isn't<SPANCLASS="link">quoted (<ACLASS="linkend"HREF="ch08_14.htm"TITLE="Bourne Shell Quoting ">8.14</A>)</SPAN>.This way, if <CODECLASS="literal">$switches</CODE> is empty, the shell won't pass an emptyargument to <EMCLASS="emphasis">pg</EM>.Also, if <CODECLASS="literal">$switches</CODE> has more than one switch, the shell will break theswitches into separate arguments at the spaces and pass them individually to<EMCLASS="emphasis">pg</EM>.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-51499"></A><ACLASS="indexterm"NAME="AUTOID-51502"></A><ACLASS="indexterm"NAME="AUTOID-51505"></A><ACLASS="indexterm"NAME="AUTOID-51508"></A>You can use a <EMCLASS="emphasis">for</EM> loop with any space-separated (actually,<SPANCLASS="link">IFS (<ACLASS="linkend"HREF="ch35_21.htm"TITLE="Using IFS to Split Strings ">35.21</A>)</SPAN>-separated)list of words&nbsp;- not just filenames.You don't have to use a shell variable as the list;you can use<SPANCLASS="link">command substitution (<ACLASS="linkend"HREF="ch09_16.htm"TITLE="Command Substitution ">9.16</A>)</SPAN>(backquotes),<SPANCLASS="link">shell wildcards (<ACLASS="linkend"HREF="ch15_02.htm"TITLE="Filename Wildcards in a Nutshell ">15.2</A>)</SPAN>,or just &quot;hardcode&quot; the list of words:</P><PCLASS="para"><TABLECLASS="screen.co"BORDER="1"><TR><THVALIGN="TOP"><PRECLASS="calloutlist">&#13;<ACLASS="co"HREF="ch13_13.htm"TITLE='13.13 The "Filename&quot; - '>-</A> <ACLASS="co"HREF="ch43_02.htm"TITLE="43.2 Introduction to Printing on UNIX ">lpr</A> &#13;</PRE></TH><TDVALIGN="TOP"><PRECLASS="screen">for person in Joe Leslie Edie Allan<ACLASS="indexterm"NAME="AUTOID-51517"></A>do   echo &quot;Dear $person,&quot; | cat - form_letter | lprdone</PRE></TD></TR></TABLE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-51523"></A><ACLASS="indexterm"NAME="UPT-ART-4940-IX-GETOPTS-COMMAND"></A>The<SPANCLASS="link"><EMCLASS="emphasis">getopt</EM> and <EMCLASS="emphasis">getopts</EM> (<ACLASS="linkend"HREF="ch44_18.htm"TITLE="Standard Command-Line Parsing ">44.18</A>)</SPAN>commands handle command-line arguments in a more standard way than<EMCLASS="emphasis">for</EM> loops.</P><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">JP</SPAN></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch44_15.htm"TITLE="44.15 Handling Command-Line Arguments in Shell Scripts "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 44.15 Handling Command-Line Arguments in Shell Scripts "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch44_17.htm"TITLE="44.17 Handling Arguments with while and shift "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 44.17 Handling Arguments with while and shift "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">44.15 Handling Command-Line Arguments in Shell Scripts </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">44.17 Handling Arguments with while and shift </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>