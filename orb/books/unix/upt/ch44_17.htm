<HTML><HEAD><TITLE>[Chapter 44] 44.17 Handling Arguments with while and shift </TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:53:56Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch44_01.htm"TITLE="44. Shell Programming for the Uninitiated"><LINKREL="prev"HREF="ch44_16.htm"TITLE="44.16 Handling Command-Line Arguments with a for Loop "><LINKREL="next"HREF="ch44_18.htm"TITLE="44.18 Standard Command-Line Parsing "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch44_16.htm"TITLE="44.16 Handling Command-Line Arguments with a for Loop "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 44.16 Handling Command-Line Arguments with a for Loop "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 44<BR>Shell Programming for the Uninitiated</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch44_18.htm"TITLE="44.18 Standard Command-Line Parsing "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 44.18 Standard Command-Line Parsing "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-8008">44.17 Handling Arguments with while and shift </A></H2><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-51536"></A><ACLASS="indexterm"NAME="AUTOID-51539"></A><ACLASS="indexterm"NAME="AUTOID-51542"></A><ACLASS="indexterm"NAME="AUTOID-51545"></A><ACLASS="indexterm"NAME="AUTOID-51548"></A><ACLASS="indexterm"NAME="AUTOID-51551"></A><ACLASS="indexterm"NAME="AUTOID-51554"></A><ACLASS="indexterm"NAME="AUTOID-51557"></A><ACLASS="indexterm"NAME="AUTOID-51560"></A><ACLASS="indexterm"NAME="AUTOID-51563"></A><ACLASS="indexterm"NAME="AUTOID-51566"></A><ACLASS="indexterm"NAME="AUTOID-51569"></A><ACLASS="indexterm"NAME="AUTOID-51572"></A><ACLASS="indexterm"NAME="AUTOID-51575"></A><ACLASS="indexterm"NAME="AUTOID-51578"></A>A <SPANCLASS="link"><EMCLASS="emphasis">for</EM> loop (<ACLASS="linkend"HREF="ch44_16.htm"TITLE="Handling Command-Line Arguments with a for Loop ">44.16</A>)</SPAN>is great if you want to handle all of the command-line arguments to ascript, one by one.  But, as is often the case, some arguments areoptions that have their own arguments.  For example, in the command<CODECLASS="literal">grep&nbsp;-f&nbsp;</CODE><CODECLASS="replaceable"><I>filename</I></CODE>, <EMCLASS="emphasis">filename</EM> is an argument to<EMCLASS="emphasis">-f</EM>; the option and its argument need to be processedtogether.  One good way to handle this is with a combination of<SPANCLASS="link"><EMCLASS="emphasis">while</EM> (<ACLASS="linkend"HREF="ch44_10.htm"TITLE="Loops That Test Exit Status ">44.10</A>)</SPAN>,<SPANCLASS="link"><EMCLASS="emphasis">test</EM> (<ACLASS="linkend"HREF="ch44_20.htm"TITLE="test: Testing Files and Strings ">44.20</A>)</SPAN>,<SPANCLASS="link"><EMCLASS="emphasis">case</EM> (<ACLASS="linkend"HREF="ch44_05.htm"TITLE="Test String Values with Bourne Shell case ">44.5</A>)</SPAN>,and <EMCLASS="emphasis">shift</EM>.Here's the basic construct:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">while [ $# -gt 0 ]do    case &quot;$1&quot; in        -a) options=&quot;$options $1&quot;;;            ...        -f) options=&quot;$options $1&quot;            argfile=&quot;$2&quot;            shift            ;;         *) files=&quot;$files $1&quot;;;    esac    shiftdone</PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-51597"></A>The trick is this: <EMCLASS="emphasis">shift</EM> removes an argument from the script'sargument list, shifting all the others over by one (<CODECLASS="literal">$1</CODE> disappears,<CODECLASS="literal">$2</CODE> becomes <CODECLASS="literal">$1</CODE>, <CODECLASS="literal">$3</CODE> becomes <CODECLASS="literal">$2</CODE> and so on).To handle an option with its own argument, do another <EMCLASS="emphasis">shift</EM>.The <EMCLASS="emphasis">while</EM> loop uses<SPANCLASS="link"><EMCLASS="emphasis">test</EM> (<ACLASS="linkend"HREF="ch44_20.htm"TITLE="test: Testing Files and Strings ">44.20</A>)</SPAN>to checkthat <CODECLASS="literal">$#</CODE>&nbsp;- the number of arguments&nbsp;- is greater than zero, andkeeps going until this is no longer true, which only happens whenthey have all been used up.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-51611"></A>Meanwhile, all the <EMCLASS="emphasis">case</EM> has to do is to test <CODECLASS="literal">$1</CODE> against thedesired option strings.In the simple example shown above, we simplyassume that anything beginning with a minus sign is an option, whichwe (presumably) want to pass on to some program that is being invokedby the script.So all we do is build up a shell variable that willeventually contain all of the options.It would be quite possible todo anything else instead, perhaps setting other shell variablesor executing commands.</P><PCLASS="para">We assume that anything without a minus sign is a file.This lastcase could be written more robustly with a <EMCLASS="emphasis">test</EM> to be sure theargument is a file.Here's an example of a simple script that uses this construct topass an option and some files to <EMCLASS="emphasis">pr</EM> and from there to a programthat converts text to PostScript and on to the print spooler:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">while [ $# -ne 0 ]do   case $1 in        +*) pages=&quot;$1&quot; ;;         *) if [ -f &quot;$1&quot; ]; then              files=&quot;$files $1&quot;            else               echo &quot;$0: file $1 not found&quot; 1&gt;&amp;2            fi;;   esac   shiftdonepr $pages $files | psprint | lpr</PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-51622"></A>This approach is perhaps obsolete if you have<SPANCLASS="link"><EMCLASS="emphasis">getopts</EM> (<ACLASS="linkend"HREF="ch44_18.htm"TITLE="Standard Command-Line Parsing ">44.18</A>)</SPAN>,since <EMCLASS="emphasis">getopts</EM> lets you recognize option strings like<CODECLASS="literal">-abc</CODE>as being equivalent to <CODECLASS="literal">-a&nbsp;-b&nbsp;-c</CODE>but I still find it handy.[In this example, it's essential.The <EMCLASS="emphasis">pr</EM> option <CODECLASS="literal">+</CODE><CODECLASS="replaceable"><I>page-list</I></CODE> starts with a plus sign.<EMCLASS="emphasis">getopt</EM> and <EMCLASS="emphasis">getopts</EM> don't support those old-styleoptions. -<EMCLASS="emphasis">JP</EM>&nbsp;]</P><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">TOR</SPAN></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch44_16.htm"TITLE="44.16 Handling Command-Line Arguments with a for Loop "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 44.16 Handling Command-Line Arguments with a for Loop "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch44_18.htm"TITLE="44.18 Standard Command-Line Parsing "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 44.18 Standard Command-Line Parsing "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">44.16 Handling Command-Line Arguments with a for Loop </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">44.18 Standard Command-Line Parsing </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>