<HTML><HEAD><TITLE>[Chapter 44] 44.18 Standard Command-Line Parsing </TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:53:57Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch44_01.htm"TITLE="44. Shell Programming for the Uninitiated"><LINKREL="prev"HREF="ch44_17.htm"TITLE="44.17 Handling Arguments with while and shift "><LINKREL="next"HREF="ch44_19.htm"TITLE="44.19 The Bourne Shell set Command "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch44_17.htm"TITLE="44.17 Handling Arguments with while and shift "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 44.17 Handling Arguments with while and shift "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 44<BR>Shell Programming for the Uninitiated</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch44_19.htm"TITLE="44.19 The Bourne Shell set Command "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 44.19 The Bourne Shell set Command "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-8009">44.18 Standard Command-Line Parsing </A></H2><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-51642"></A><ACLASS="indexterm"NAME="AUTOID-51645"></A>Most shell scripts need to handle command-line arguments&nbsp;- options, filenames,and so on.Articles<ACLASS="xref"HREF="ch44_15.htm"TITLE="Handling Command-Line Arguments in Shell Scripts ">44.15</A>,<ACLASS="xref"HREF="ch44_16.htm"TITLE="Handling Command-Line Arguments with a for Loop ">44.16</A>,and<ACLASS="xref"HREF="ch44_17.htm"TITLE="Handling Arguments with while and shift ">44.17</A>show how to parse command lines with any Bourne shell.Those methods have two problems.You can't combine arguments with a single dash, e.g., <CODECLASS="literal">-abc</CODE> instead of <CODECLASS="literal">-a&nbsp;-b&nbsp;-c</CODE>.You also can't specify arguments to optionswithout a space in between, e.g., <CODECLASS="literal">-b</CODE><CODECLASS="replaceable"><I>arg</I></CODE> in addition to<CODECLASS="literal">-b&nbsp;</CODE><CODECLASS="replaceable"><I>arg</I></CODE>.[6]</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[6] Although most UNIX commands allow this, it is actually contrary to theCommand Syntax Standard Rules in <EMCLASS="emphasis">intro</EM> of the User's Manual.The version of <EMCLASS="emphasis">getopt</EM> on the CD-ROM supports this syntax.The <EMCLASS="emphasis">getopts</EM> we've seen also support this, but may not in future releases.</P></BLOCKQUOTE><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-51663"></A>Your Bourne shell may have a built-in command named <EMCLASS="emphasis">getopts</EM>.constraints.[7]<EMCLASS="emphasis">getopts</EM> lets you deal with multiple complex options without theseTo find out whether your shell has <EMCLASS="emphasis">getopts</EM>,see your on-line <EMCLASS="emphasis">sh</EM> or <EMCLASS="emphasis">getopts</EM>(1) manual page.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[7] Both <EMCLASS="emphasis">bash</EM> and <EMCLASS="emphasis">ksh</EM> have it.<EMCLASS="emphasis">getopts</EM> replaces the old command <EMCLASS="emphasis">getopt</EM>; itis better integrated into the shell's syntax and runs moreefficiently.C programmers will recognize <EMCLASS="emphasis">getopts</EM> as very similarto the standard library routine <EMCLASS="emphasis">getopt</EM>(3).</P></BLOCKQUOTE><TABLECLASS="para.programreference"BORDER="1"><TR><THVALIGN="TOP"><ACLASS="programreference"HREF="examples/index.htm"TITLE="getopt">getopt</A><BR></TH><TDVALIGN="TOP">If your shell doesn't have <EMCLASS="emphasis">getopts</EM>, you can use the command named<EMCLASS="emphasis">getopt</EM> on the CD-ROM.<EMCLASS="emphasis">getopts</EM> works differently from <EMCLASS="emphasis">getopt</EM>; we won't cover it here.</TD></TR></TABLE><PCLASS="para"><EMCLASS="emphasis">getopt</EM> takes two or more arguments.<ACLASS="indexterm"NAME="AUTOID-51685"></A><ACLASS="indexterm"NAME="AUTOID-51687"></A><ACLASS="indexterm"NAME="AUTOID-51690"></A>The firstis a string that can contain lettersand colons (<CODECLASS="literal">:</CODE>).Each letter names a valid option; if a letter is followedby a colon, the option requires an argument.The second and following arguments are the original command-lineoptions; you'll usually give<SPANCLASS="link"><CODECLASS="literal">&quot;$@&quot;</CODE> (<ACLASS="linkend"HREF="ch44_15.htm"TITLE="Handling Command-Line Arguments in Shell Scripts ">44.15</A>)</SPAN>to pass all the arguments to <EMCLASS="emphasis">getopt</EM>.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-51699"></A><ACLASS="indexterm"NAME="AUTOID-51702"></A><EMCLASS="emphasis">getopt</EM> picks eachoption off the command line, checks to see if the option is valid,and writes the correct option to its standard output.If an option has an argument, <EMCLASS="emphasis">getopt</EM> writes the argument after itsoption.When <EMCLASS="emphasis">getopt</EM> finds the first non-option argument (the firstargument that doesn't start with a <CODECLASS="literal">-</CODE> character), it outputstwo dashes (<CODECLASS="literal">-</CODE>) and the rest of the arguments.If <EMCLASS="emphasis">getopt</EM> finds an invalid option, or an option that should havean argument but doesn't, it prints an error message and returns a non-zero<SPANCLASS="link">status (<ACLASS="linkend"HREF="ch44_07.htm"TITLE="Exit Status of UNIX Processes ">44.7</A>)</SPAN>.</P><PCLASS="para">Your script can use a loop to parse the <EMCLASS="emphasis">getopt</EM> output.Here's an example script named <EMCLASS="emphasis">opttest</EM> that shows how<EMCLASS="emphasis">getopt</EM> works.</P><PCLASS="para"><TABLECLASS="screen.co"BORDER="1"><TR><THVALIGN="TOP"><PRECLASS="calloutlist">&#13;<ACLASS="co"HREF="ch44_09.htm"TITLE="44.9 Testing Your Success ">||</A> <ACLASS="co"HREF="ch13_08.htm"TITLE="13.8 Using {list} to Group Bourne Shell Commands ">{</A> <ACLASS="co"HREF="ch45_09.htm"TITLE='45.9 The Unappreciated Bourne Shell  ":&quot; Operator'>:</A> &#13;</PRE></TH><TDVALIGN="TOP"><PRECLASS="screen"><ACLASS="indexterm"NAME="AUTOID-51719"></A><ACLASS="indexterm"NAME="AUTOID-51722"></A><ACLASS="indexterm"NAME="AUTOID-51724"></A><ACLASS="indexterm"NAME="AUTOID-51727"></A><ACLASS="indexterm"NAME="AUTOID-51730"></A>#!/bin/shset -- `getopt &quot;ab:&quot; &quot;$@&quot;` || {    echo &quot;Usage: `basename $0` [-a] [-b name] [files]&quot; 1&gt;&amp;2    exit 1}echo &quot;Before loop, command line has: $*&quot;aflag=0  name=NONEwhile :do    case &quot;$1&quot; in    -a) aflag=1 ;;    -b) shift; name=&quot;$1&quot; ;;    --) break ;;    esac    shiftdoneshift    # REMOVE THE TRAILING --echo &quot;aflag=$aflag / name=$name / Files are $*&quot;</PRE></TD></TR></TABLE></P><PCLASS="para">The script has two legal options.The <EMCLASS="emphasis">-a</EM> option sets the variable named <EMCLASS="emphasis">aflag</EM> to <CODECLASS="literal">1</CODE>.The <EMCLASS="emphasis">-b</EM> option takes a single argument; the argument is storedin the variable named <EMCLASS="emphasis">name</EM>.Any other arguments are filenames.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-51743"></A><ACLASS="indexterm"NAME="AUTOID-51746"></A><ACLASS="indexterm"NAME="AUTOID-51749"></A>The script starts by running <EMCLASS="emphasis">getopt</EM> inside<SPANCLASS="link">backquotes (<ACLASS="linkend"HREF="ch09_16.htm"TITLE="Command Substitution ">9.16</A>)</SPAN>-and using the<SPANCLASS="link"><EMCLASS="emphasis">set</EM> (<ACLASS="linkend"HREF="ch44_19.htm"TITLE="The Bourne Shell set Command ">44.19</A>)</SPAN>command to replace the command-line arguments with the <EMCLASS="emphasis">getopt</EM> output.The first argument to <EMCLASS="emphasis">set</EM>,<SPANCLASS="link"><CODECLASS="literal">-</CODE> (two dashes) (<ACLASS="linkend"HREF="ch44_19.htm"TITLE="The Bourne Shell set Command ">44.19</A>)</SPAN>,is important:it makes sure that <EMCLASS="emphasis">set</EM> passes the script's options to <EMCLASS="emphasis">getopt</EM>instead of treating them as options to the shell itself.An <EMCLASS="emphasis">echo</EM> command shows the output of <EMCLASS="emphasis">getopt</EM>.Then the loop parses the <EMCLASS="emphasis">getopt</EM> output, setting shell variablesas it goes.When the loop finds the <CODECLASS="literal">-</CODE> argument from <EMCLASS="emphasis">getopt</EM>, it quits andleaves the remaining filenames (if any) in the command-line arguments.A second <EMCLASS="emphasis">echo</EM> shows what's in the shell variables and on thecommand line after the loop.Here are a few examples:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>opttest</B></CODE>Before loop, command line has: -- aflag=0 / name=NONE / Files are % <CODECLASS="userinput"><B>opttest -b file1 -a file2 file3</B></CODE>Before loop, command line has: -b file1 -a -- file2 file3aflag=1 / name=file1 / Files are file2 file3% <CODECLASS="userinput"><B>opttest -q -b file1</B></CODE>getopt: illegal option -- qUsage: opttest [-a] [-b name] [files]% <CODECLASS="userinput"><B>opttest -bfile1</B></CODE>Before loop, command line has: -b file1 --aflag=0 / name=file1 / Files are % <CODECLASS="userinput"><B>opttest -ab</B></CODE>getopt: option requires an argument -- bUsage: opttest [-a] [-b name] [files]</PRE></BLOCKQUOTE></P><PCLASS="para">The advantages of <EMCLASS="emphasis">getopt</EM> are that it minimizes extra codenecessary to process options and fully supports the standard UNIX optionsyntax (as specified in <EMCLASS="emphasis">intro</EM> of the User's Manual).</P><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">JP</SPAN>, <SPANCLASS="authorinitials">BR</SPAN></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch44_17.htm"TITLE="44.17 Handling Arguments with while and shift "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 44.17 Handling Arguments with while and shift "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch44_19.htm"TITLE="44.19 The Bourne Shell set Command "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 44.19 The Bourne Shell set Command "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">44.17 Handling Arguments with while and shift </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">44.19 The Bourne Shell set Command </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>