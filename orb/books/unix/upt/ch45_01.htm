<HTML><HEAD><TITLE>[Chapter 45] Shell Programming for the Initiated</TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:54:15Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="part08.htm"TITLE="VIII. Shell Programming "><LINKREL="prev"HREF="ch44_23.htm"TITLE="44.23 Reading Files with the . and source Commands "><LINKREL="next"HREF="ch45_02.htm"TITLE="45.2 The Story of  : #  #! "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch44_23.htm"TITLE="44.23 Reading Files with the . and source Commands "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 44.23 Reading Files with the . and source Commands "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 45</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch45_02.htm"TITLE="45.2 The Story of  : #  #! "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 45.2 The Story of  : #  #! "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="CHAPTER"><H1CLASS="chapter"><ACLASS="title"NAME="UPT-CHP-45">45. Shell Programming for the Initiated</A></H1><DIVCLASS="htmltoc"><P><B>Contents:</B><BR><ACLASS="sect1"HREF="#UPT-ART-7970"TITLE="45.1 Beyond the Basics ">Beyond the Basics </A><BR><ACLASS="sect1"HREF="ch45_02.htm"TITLE="45.2 The Story of  : #  #! ">The Story of  : #  #! </A><BR><ACLASS="sect1"HREF="ch45_03.htm"TITLE="45.3 Don't Need a Shell for Your Script?  Don't Use One ">Don't Need a Shell for Your Script?  Don't Use One </A><BR><ACLASS="sect1"HREF="ch45_04.htm"TITLE="45.4 Fun with #! ">Fun with #! </A><BR><ACLASS="sect1"HREF="ch45_05.htm"TITLE="45.5 A File That Shows Itself... and What #! Does ">A File That Shows Itself... and What #! Does </A><BR><ACLASS="sect1"HREF="ch45_06.htm"TITLE="45.6 Making Sure Your Script Runs with Bourne Shell, Without #! ">Making Sure Your Script Runs with Bourne Shell, Without #! </A><BR><ACLASS="sect1"HREF="ch45_07.htm"TITLE="45.7 The exec Command ">The exec Command </A><BR><ACLASS="sect1"HREF="ch45_08.htm"TITLE="45.8 Handling Signals to Child Processes ">Handling Signals to Child Processes </A><BR><ACLASS="sect1"HREF="ch45_09.htm"TITLE='45.9 The Unappreciated Bourne Shell  ":&quot; Operator'>The Unappreciated Bourne Shell  &quot;:&quot; Operator</A><BR><ACLASS="sect1"HREF="ch45_10.htm"TITLE="45.10 Removing a File Once It's Opened&nbsp;- for Security and Easy Cleanup">Removing a File Once It's Opened&nbsp;- for Security and Easy Cleanup</A><BR><ACLASS="sect1"HREF="ch45_11.htm"TITLE="45.11 The Multipurpose jot Command ">The Multipurpose jot Command </A><BR><ACLASS="sect1"HREF="ch45_12.htm"TITLE="45.12 Parameter Substitution ">Parameter Substitution </A><BR><ACLASS="sect1"HREF="ch45_13.htm"TITLE="45.13 Save Disk Space and Programming: Multiple Names for a Program">Save Disk Space and Programming: Multiple Names for a Program</A><BR><ACLASS="sect1"HREF="ch45_14.htm"TITLE="45.14 Finding the Last Command-Line Argument ">Finding the Last Command-Line Argument </A><BR><ACLASS="sect1"HREF="ch45_15.htm"TITLE="45.15 How to Unset all Command-Line Parameters ">How to Unset all Command-Line Parameters </A><BR><ACLASS="sect1"HREF="ch45_16.htm"TITLE="45.16 Standard Input to a for Loop ">Standard Input to a for Loop </A><BR><ACLASS="sect1"HREF="ch45_17.htm"TITLE="45.17 Making a for Loop with Multiple Variables ">Making a for Loop with Multiple Variables </A><BR><ACLASS="sect1"HREF="ch45_18.htm"TITLE="45.18 Using basename and dirname ">Using basename and dirname </A><BR><ACLASS="sect1"HREF="ch45_19.htm"TITLE="45.19 A while Loop with Several Loop Control Commands ">A while Loop with Several Loop Control Commands </A><BR><ACLASS="sect1"HREF="ch45_20.htm"TITLE="45.20 Overview: Open Files and File Descriptors ">Overview: Open Files and File Descriptors </A><BR><ACLASS="sect1"HREF="ch45_21.htm"TITLE="45.21 n&gt;&amp;m: Swap Standard Output and Standard Error ">n&gt;&amp;m: Swap Standard Output and Standard Error </A><BR><ACLASS="sect1"HREF="ch45_22.htm"TITLE="45.22 Handling Files Line-by-Line ">Handling Files Line-by-Line </A><BR><ACLASS="sect1"HREF="ch45_23.htm"TITLE="45.23 The Ins and Outs of Redirected I/O Loops ">The Ins and Outs of Redirected I/O Loops </A><BR><ACLASS="sect1"HREF="ch45_24.htm"TITLE="45.24 A Shell Can Read a Script from its Standard Input, But...">A Shell Can Read a Script from its Standard Input, But...</A><BR><ACLASS="sect1"HREF="ch45_25.htm"TITLE="45.25 Shell Scripts On-the-Fly from Standard Input ">Shell Scripts On-the-Fly from Standard Input </A><BR><ACLASS="sect1"HREF="ch45_26.htm"TITLE="45.26 Quoted hereis Document Terminators: sh vs. csh ">Quoted hereis Document Terminators: sh vs. csh </A><BR><ACLASS="sect1"HREF="ch45_27.htm"TITLE='45.27 Turn Off echo for "Secret&quot; Answers'>Turn Off echo for &quot;Secret&quot; Answers</A><BR><ACLASS="sect1"HREF="ch45_28.htm"TITLE="45.28 Quick Reference: expr ">Quick Reference: expr </A><BR><ACLASS="sect1"HREF="ch45_29.htm"TITLE="45.29 Testing Characters in a String with expr ">Testing Characters in a String with expr </A><BR><ACLASS="sect1"HREF="ch45_30.htm"TITLE="45.30 Grabbing Parts of a String ">Grabbing Parts of a String </A><BR><ACLASS="sect1"HREF="ch45_31.htm"TITLE="45.31 Nested Command Substitution ">Nested Command Substitution </A><BR><ACLASS="sect1"HREF="ch45_32.htm"TITLE="45.32 A Better read Command: grabchars ">A Better read Command: grabchars </A><BR><ACLASS="sect1"HREF="ch45_33.htm"TITLE="45.33 Testing Two Strings with One case Statement ">Testing Two Strings with One case Statement </A><BR><ACLASS="sect1"HREF="ch45_34.htm"TITLE="45.34 Arrays in the Bourne Shell ">Arrays in the Bourne Shell </A><BR><ACLASS="sect1"HREF="ch45_35.htm"TITLE="45.35 Using a Control Character in a Script ">Using a Control Character in a Script </A><BR><ACLASS="sect1"HREF="ch45_36.htm"TITLE="45.36 Shell Lockfile ">Shell Lockfile </A></P><P></P></DIV><DIVCLASS="sect1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-7970">45.1 Beyond the Basics </A></H2><PCLASS="para">This chapter has a bunch of tricks and techniques for programmingwith the Bourne shell.Some of them are documented but hard to find; others aren't documentedat all.Here is a summary of this chapter's articles:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">The first group of articles is about <BCLASS="emphasis.bold">making a file directly executablewith </B><CODECLASS="userinput"><B>#!</B></CODE> on the first line.On many versions of UNIX (see article<ACLASS="xref"HREF="ch44_04.htm"TITLE="Testing How Your System Executes Files ">44.4</A>),anexecutable filecan start with a first line like this:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">#!<CODECLASS="replaceable"><I>/path/to/interpreter</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">The kernel will start the program named in that line and give it thefile to read.Chris Torek's Usenet classic, article<ACLASS="xref"HREF="ch45_02.htm"TITLE="The Story of  : #  #! ">45.2</A>,explains how <CODECLASS="literal">#!</CODE> started.Article<ACLASS="xref"HREF="ch45_03.htm"TITLE="Don't Need a Shell for Your Script?  Don't Use One ">45.3</A>explains that your &quot;shell scripts&quot; may not need a shell at all.Article<ACLASS="xref"HREF="ch45_04.htm"TITLE="Fun with #! ">45.4</A>will give you a few grins as it shows unusual examples of <CODECLASS="literal">#!</CODE>-andarticle<ACLASS="xref"HREF="ch45_05.htm"TITLE="A File That Shows Itself... and What #! Does ">45.5</A>has experiments to help you understand what <CODECLASS="literal">#!</CODE> does.If your UNIX doesn't have <CODECLASS="literal">#!</CODE>, the trick in article<ACLASS="xref"HREF="ch45_06.htm"TITLE="Making Sure Your Script Runs with Bourne Shell, Without #! ">45.6</A>will let you be sure your scripts run with the Bourne shell.</P><PCLASS="para">Scripts using an interpreter that isn't a shell are in articles<ACLASS="xref"HREF="ch25_11.htm"TITLE="crush: A cat that Skips all Blank Lines ">25.11</A>,<ACLASS="xref"HREF="ch25_12.htm"TITLE="Double Space, Triple Space ... ">25.12</A>,and<ACLASS="xref"HREF="ch35_08.htm"TITLE="Centering Lines in a File ">35.8</A>.</P></LI><LICLASS="listitem"><PCLASS="para">The next five articles are about <BCLASS="emphasis.bold">processes and commands</B>.The <EMCLASS="emphasis">exec</EM> command, article<ACLASS="xref"HREF="ch45_07.htm"TITLE="The exec Command ">45.7</A>,replaces the shell with another process; it can also be used to changeinput/output redirection (see below).The <EMCLASS="emphasis">trap</EM> command can control how signals are passed to child processes;see article<ACLASS="xref"HREF="ch45_08.htm"TITLE="Handling Signals to Child Processes ">45.8</A>.The <CODECLASS="literal">:</CODE> (colon) operator evaluates its arguments and returns azero status&nbsp;- article<ACLASS="xref"HREF="ch45_09.htm"TITLE='The Unappreciated Bourne Shell  ":&quot; Operator'>45.9</A>explains why you should care.UNIX keeps a file on-disk once it's been opened; as article<ACLASS="xref"HREF="ch45_10.htm"TITLE="Removing a File Once It's Opened&nbsp;- for Security and Easy Cleanup">45.10</A>explains, this has its ups and downs.The <EMCLASS="emphasis">jot</EM> command, article<ACLASS="xref"HREF="ch45_11.htm"TITLE="The Multipurpose jot Command ">45.11</A>,is useful for all kinds of operations with lists of numbers and characters.</P></LI><LICLASS="listitem"><PCLASS="para">Next are techniques for handling variables and parameters.Parameter substitution, explained in article<ACLASS="xref"HREF="ch45_12.htm"TITLE="Parameter Substitution ">45.12</A>,is a compact way to test, set, and give default values for variables.You can use the <CODECLASS="literal">$0</CODE> parameter and UNIX links to make the same scripthave multiple names and do multiple things; see article<ACLASS="xref"HREF="ch45_13.htm"TITLE="Save Disk Space and Programming: Multiple Names for a Program">45.13</A>.Article<ACLASS="xref"HREF="ch45_14.htm"TITLE="Finding the Last Command-Line Argument ">45.14</A>shows the easy way to get the last command-line argument.Article<ACLASS="xref"HREF="ch45_15.htm"TITLE="How to Unset all Command-Line Parameters ">45.15</A>has an easy way to remove all the command-line arguments.</P></LI><LICLASS="listitem"><PCLASS="para">Four articles cover <EMCLASS="emphasis">sh</EM> loops.A <EMCLASS="emphasis">for</EM> loop usually reads a list of single arguments into a singleshell variable.Article<ACLASS="xref"HREF="ch45_16.htm"TITLE="Standard Input to a for Loop ">45.16</A>shows how to make the <EMCLASS="emphasis">for</EM> loop read from standard input.Article<ACLASS="xref"HREF="ch45_17.htm"TITLE="Making a for Loop with Multiple Variables ">45.17</A>has techniques for making a <EMCLASS="emphasis">for</EM> loop set more than one variable.The <EMCLASS="emphasis">dirname</EM> and <EMCLASS="emphasis">basename</EM> commands can be used to split pathnameswith a loop; see article<ACLASS="xref"HREF="ch45_18.htm"TITLE="Using basename and dirname ">45.18</A>.A <EMCLASS="emphasis">while</EM> loop can have more than one command line at the start;see article<ACLASS="xref"HREF="ch45_19.htm"TITLE="A while Loop with Several Loop Control Commands ">45.19</A>.</P></LI><LICLASS="listitem"><PCLASS="para">Next is an assortment of articles about input/output.Article<ACLASS="xref"HREF="ch45_20.htm"TITLE="Overview: Open Files and File Descriptors ">45.20</A>introduces open files and file descriptors&nbsp;- there's more to know aboutstandard input/output/error than you might have realized!Article<ACLASS="xref"HREF="ch45_21.htm"TITLE="n&gt;&amp;m: Swap Standard Output and Standard Error ">45.21</A>has a look at file descriptor handling in the Bourne shell, swappingstandard output and standard error.The shell can redirect the I/O from all commands in a loop at once;article<ACLASS="xref"HREF="ch45_22.htm"TITLE="Handling Files Line-by-Line ">45.22</A>explains one use for this techniqueand article<ACLASS="xref"HREF="ch45_23.htm"TITLE="The Ins and Outs of Redirected I/O Loops ">45.23</A>explains good and bad points of doing this.</P></LI><LICLASS="listitem"><PCLASS="para">The shell can read commands directly from a shell script file.As article<ACLASS="xref"HREF="ch45_24.htm"TITLE="A Shell Can Read a Script from its Standard Input, But...">45.24</A>points out, a shell can also read commands from its standard input, butthat can cause some problems.Article<ACLASS="xref"HREF="ch45_25.htm"TITLE="Shell Scripts On-the-Fly from Standard Input ">45.25</A>shows one place scripts from <EMCLASS="emphasis">stdin</EM> are useful:writing a script that createsanother script as it goes.</P><PCLASS="para">Next are two articles about miscellaneous I/O.One gotcha with the here-document operator (for redirecting input from ascript file) is that the terminators are different in the Bourne and C shells;article<ACLASS="xref"HREF="ch45_26.htm"TITLE="Quoted hereis Document Terminators: sh vs. csh ">45.26</A>explains.Article<ACLASS="xref"HREF="ch45_27.htm"TITLE='Turn Off echo for "Secret&quot; Answers'>45.27</A>shows how to turn off echoing while your script reads a &quot;secret&quot;answer such as a password.</P></LI><LICLASS="listitem"><PCLASS="para">Three articles-<ACLASS="xref"HREF="ch45_28.htm"TITLE="Quick Reference: expr ">45.28</A>,<ACLASS="xref"HREF="ch45_29.htm"TITLE="Testing Characters in a String with expr ">45.29</A>,and<ACLASS="xref"HREF="ch45_30.htm"TITLE="Grabbing Parts of a String ">45.30</A>-show uses for the versatile <EMCLASS="emphasis">expr</EM> expression-handling command.Article<ACLASS="xref"HREF="ch45_31.htm"TITLE="Nested Command Substitution ">45.31</A>.covers multiple <SPANCLASS="link">command substitution (<ACLASS="linkend"HREF="ch09_16.htm"TITLE="Command Substitution ">9.16</A>)</SPAN>.The <EMCLASS="emphasis">grabchars</EM> programin article<ACLASS="xref"HREF="ch45_32.htm"TITLE="A Better read Command: grabchars ">45.32</A>is similar to<SPANCLASS="link"><EMCLASS="emphasis">read</EM> (<ACLASS="linkend"HREF="ch44_13.htm"TITLE="read: Reading from the Keyboard ">44.13</A>)</SPAN>-but <EMCLASS="emphasis">grabchars</EM> doesn't need a RETURN after the answer;<EMCLASS="emphasis">grabchars</EM> also can prompt and do basic tests on the answer.</P><PCLASS="para">Article <ACLASS="xref"HREF="ch45_33.htm"TITLE="Testing Two Strings with One case Statement ">45.33</A>shows a trick for making one<SPANCLASS="link"><EMCLASS="emphasis">case</EM> statement (<ACLASS="linkend"HREF="ch44_05.htm"TITLE="Test String Values with Bourne Shell case ">44.5</A>)</SPAN>test two things at once.Article<ACLASS="xref"HREF="ch45_34.htm"TITLE="Arrays in the Bourne Shell ">45.34</A>has a trick for simulating arrays in the Bourne Shell.Article<ACLASS="xref"HREF="ch45_35.htm"TITLE="Using a Control Character in a Script ">45.35</A>uses <EMCLASS="emphasis">echo</EM> and <EMCLASS="emphasis">tr</EM> to get a control character in a scriptwithout typing the literal character into the file. Finally, article<ACLASS="xref"HREF="ch45_36.htm"TITLE="Shell Lockfile ">45.36</A>has a simple technique for getting exclusive access to a file or othersystem resource.</P></LI></UL><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">JP</SPAN></P></DIV></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch44_23.htm"TITLE="44.23 Reading Files with the . and source Commands "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 44.23 Reading Files with the . and source Commands "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch45_02.htm"TITLE="45.2 The Story of  : #  #! "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 45.2 The Story of  : #  #! "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">44.23 Reading Files with the . and source Commands </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">45.2 The Story of  : #  #! </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>