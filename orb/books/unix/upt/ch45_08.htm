<HTML><HEAD><TITLE>[Chapter 45] 45.8 Handling Signals to Child Processes </TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:54:27Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch45_01.htm"TITLE="45. Shell Programming for the Initiated"><LINKREL="prev"HREF="ch45_07.htm"TITLE="45.7 The exec Command "><LINKREL="next"HREF="ch45_09.htm"TITLE='45.9 The Unappreciated Bourne Shell  ":&quot; Operator'></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch45_07.htm"TITLE="45.7 The exec Command "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 45.7 The exec Command "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 45<BR>Shell Programming for the Initiated</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch45_09.htm"TITLE='45.9 The Unappreciated Bourne Shell  ":&quot; Operator'><IMGSRC="../gifs/txtnexta.gif"ALT='Next: 45.9 The Unappreciated Bourne Shell  ":&quot; Operator'BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-0198">45.8 Handling Signals to Child Processes </A></H2><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-52609"></A><ACLASS="indexterm"NAME="AUTOID-52612"></A><ACLASS="indexterm"NAME="AUTOID-52615"></A><ACLASS="indexterm"NAME="UPT-ART-198-IX-SIGNAL-HANDLING-IN-BOURNE-SHELLS"></A><ACLASS="indexterm"NAME="UPT-ART-198-IX-SIGNAL-HANDLING-OF-SUBPROCESSES"></A><ACLASS="indexterm"NAME="UPT-ART-198-IX-SUBPROCESSES"></A>The Bourne shell<SPANCLASS="link"><EMCLASS="emphasis">trap</EM> command (<ACLASS="linkend"HREF="ch44_12.htm"TITLE="Trapping Exits Caused by Interrupts ">44.12</A>)</SPAN>controls what the shell does when it gets an interrupt or signal (from the<SPANCLASS="link"><EMCLASS="emphasis">kill</EM> (<ACLASS="linkend"HREF="ch38_10.htm"TITLE="Destroying Processes with kill ">38.10</A>)</SPAN>command, from a keyboard character like CTRL-c, and so on).To run an<SPANCLASS="link">external command (<ACLASS="linkend"HREF="ch01_10.htm"TITLE="Internal and External Commands ">1.10</A>)</SPAN>-like an editor or a simple command such as <EMCLASS="emphasis">sort</EM>-the shell starts a<SPANCLASS="link">child process (<ACLASS="linkend"HREF="ch38_03.htm"TITLE="Managing Processes: Overall Concepts ">38.3</A>)</SPAN>(subprocess).  If the program running in the child process wantsto handle its own signals, the parent shell should probably passsignals on to the child process.  For example, you might run<EMCLASS="emphasis">vi</EM> as a child process and want to send a CTRL-c to stop<EMCLASS="emphasis">vi</EM> from what it's doing, but not want the CTRL-c to killthe parent shell script.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-52636"></A><ACLASS="indexterm"NAME="AUTOID-52639"></A><ACLASS="indexterm"NAME="AUTOID-52642"></A>When the parent process gets a signal, should it die or keep running?Should the child get the signal or not?  The Bourne shell gives you afair amount of flexibility in signal handling.  The bad news is thatmost <EMCLASS="emphasis">sh</EM> manual pages don't say much about this.  And no manualpage I've seen explains a useful choice: using the<SPANCLASS="link"><CODECLASS="literal">:</CODE> (colon) operator (<ACLASS="linkend"HREF="ch45_09.htm"TITLE='The Unappreciated Bourne Shell  ":&quot; Operator'>45.9</A>)</SPAN>with <EMCLASS="emphasis">trap</EM>.<ACLASS="xref"HREF="ch45_08.htm#UPT-ART-198-TAB-0"TITLE="trap Arguments (for Most Bourne Shells)">Table 45.1</A>shows your choices.<ACLASS="indexterm"NAME="AUTOID-52649"></A></P><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="UPT-ART-198-TAB-0">Table 45.1: trap Arguments (for Most Bourne Shells)</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Argument</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Effect</TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">&quot;&quot;</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">Ignore signal, don't pass signal to child.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">:</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">(undocumented) Ignore signal, pass signal to child.</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">&quot;<CODECLASS="replaceable"><I>command-line</I></CODE>&quot;</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Run <EMCLASS="emphasis">command-line</EM> with variable and command substitution done when <EMCLASS="emphasis">trap</EM> set; don't pass signal to child.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">'<CODECLASS="replaceable"><I>command-line</I></CODE>'</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Run <EMCLASS="emphasis">command-line</EM> with variable and command substitution donewhen <EMCLASS="emphasis">trap</EM> executed; don't pass signal to child.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">No argument</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Reset signal handling to default (usually, parent terminates).Pass signal to child.</P></TD></TR></TBODY></TABLE><PCLASS="para">Because so much of this is undocumented, I won't try to give you &quot;theanswers&quot; for how it should work with your shell.Instead, here are two shell scripts that let you experiment with yourshell's signal handling.One script, named <EMCLASS="emphasis">parent</EM>, starts the second script, <EMCLASS="emphasis">child</EM>.The <EMCLASS="emphasis">child</EM> script sets some traps, then starts<SPANCLASS="link"><EMCLASS="emphasis">sleep</EM> (<ACLASS="linkend"HREF="ch40_02.htm"TITLE="Waiting a Little While: sleep ">40.2</A>)</SPAN>so it'll be there when you send a signal.This lets you use CTRL-c or other interrupts,if <EMCLASS="emphasis">parent</EM> is running inthe foreground&nbsp;- or the <EMCLASS="emphasis">kill</EM> command with signal numbers, if you'veput <EMCLASS="emphasis">parent</EM> in the background.You can edit the <EMCLASS="emphasis">trap</EM> lines in the two scripts to test the setupyou want to use.</P><PCLASS="para">Here's an example.I'll start <EMCLASS="emphasis">parent</EM> in the background from the C shell, then send it asignal 1 (&quot;hangup&quot; signal):</P><PCLASS="para"><TABLECLASS="screen.co"BORDER="1"><TR><THVALIGN="TOP"><PRECLASS="calloutlist">&#13;<ACLASS="co"HREF="ch12_01.htm"TITLE="12.1 Job Control: Work Faster, Stop Runaway Jobs ">%1</A> &#13;</PRE></TH><TDVALIGN="TOP"><PRECLASS="screen">% <CODECLASS="userinput"><B>parent &amp;</B></CODE>[1] 8669parent startedchild started. pid is 8671% <CODECLASS="userinput"><B>kill -1 %1</B></CODE>./child: % 8671 Hangupchild got a signal 1child exitingparent still running after child exited	<ICLASS="lineannotation">...1000 seconds later...</I>parent exiting[1]  + Done                 parent</PRE></TD></TR></TABLE></P><PCLASS="para">Now, the scripts:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>cat parent</B></CODE>#!/bin/shecho parent startedtrap &quot;echo parent exiting; exit&quot; 0trap : 1                              # pass signal 1 to child but don't dietrap &quot;&quot; 2                             # ignore signal 2, block from childtrap &quot;echo parent got signal 15&quot; 15   # ignore signal 15, send to child                                      # die on other signals, send to child<ACLASS="indexterm"NAME="AUTOID-52706"></A>childecho parent still running after child exitedsleep 1000% <CODECLASS="userinput"><B>cat child</B></CODE>#! /bin/shecho child started. pid is $$.trap 'echo child exiting; exit' 0trap 'echo child got a signal 1' 1trap '' 2       # ignore signal 2trap 'echo child got a signal 3' 3sleep 1000      # wait a long time for a signal</PRE></BLOCKQUOTE></P><PCLASS="para">Even with this help, the way signal handling works might not be too clear.For more on signal handling, see a book that coversUNIX internals on your system.</P><ACLASS="indexterm"NAME="AUTOID-52711"></A><ACLASS="indexterm"NAME="AUTOID-52712"></A><ACLASS="indexterm"NAME="AUTOID-52713"></A><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">JP</SPAN></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch45_07.htm"TITLE="45.7 The exec Command "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 45.7 The exec Command "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch45_09.htm"TITLE='45.9 The Unappreciated Bourne Shell  ":&quot; Operator'><IMGSRC="../gifs/txtnexta.gif"ALT='Next: 45.9 The Unappreciated Bourne Shell  ":&quot; Operator'BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">45.7 The exec Command </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">45.9 The Unappreciated Bourne Shell  ":&quot; Operator</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>