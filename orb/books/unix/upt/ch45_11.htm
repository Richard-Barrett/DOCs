<HTML><HEAD><TITLE>[Chapter 45] 45.11 The Multipurpose jot Command </TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:54:32Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch45_01.htm"TITLE="45. Shell Programming for the Initiated"><LINKREL="prev"HREF="ch45_10.htm"TITLE="45.10 Removing a File Once It's Opened&nbsp;- for Security and Easy Cleanup"><LINKREL="next"HREF="ch45_12.htm"TITLE="45.12 Parameter Substitution "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch45_10.htm"TITLE="45.10 Removing a File Once It's Opened&nbsp;- for Security and Easy Cleanup"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 45.10 Removing a File Once It's Opened&nbsp;- for Security and Easy Cleanup"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 45<BR>Shell Programming for the Initiated</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch45_12.htm"TITLE="45.12 Parameter Substitution "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 45.12 Parameter Substitution "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-9040">45.11 The Multipurpose jot Command </A></H2><PCLASS="para"><ACLASS="indexterm"NAME="UPT-ART-9040-IX-BOURNE-SHELL-SH-JOT-COMMAND-USED-IN"></A><ACLASS="indexterm"NAME="UPT-ART-9040-IX-JOT-COMMAND"></A>The <EMCLASS="emphasis">jot</EM> commandis an extremely powerful tool for shell programming.People who have used<EMCLASS="emphasis">jot</EM> end up using it all the time, but those who haven't beenexposed to it may be perplexed by its function.For that reason,I think the best way to learn <EMCLASS="emphasis">jot</EM> is by example.(If you'veread many of my other articles, then you might notice that I think that exampleis the best way to learn anything; but for <EMCLASS="emphasis">jot</EM>, it's doublytrue!)</P><TABLECLASS="para.programreference"BORDER="1"><TR><THVALIGN="TOP"><ACLASS="programreference"HREF="examples/index.htm"TITLE="jot">jot</A><BR></TH><TDVALIGN="TOP">In its most basic use, <EMCLASS="emphasis">jot</EM> produces a series of numbers.With only one integer as a command-line argument, it producesthe sequential integers from 1 to that number.&#13;</TD></TR></TABLE><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>jot 4</B></CODE>1234</PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-52873"></A><ACLASS="indexterm"NAME="AUTOID-52876"></A><ACLASS="indexterm"NAME="AUTOID-52879"></A>Big deal, you might say.Well, itmay not be earth-shattering on thesurface, but it can make your life much easier if you program inthe Bourne shell.Take the instancewhen you want to increment a number in a loop.The usual way of doing this is:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">counter=1while [ $counter -le 10 ]do   ...   counter=`expr $counter + 1`done</PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-52885"></A><ACLASS="indexterm"NAME="AUTOID-52888"></A><ACLASS="indexterm"NAME="AUTOID-52891"></A><ACLASS="indexterm"NAME="AUTOID-52894"></A><ACLASS="indexterm"NAME="AUTOID-52897"></A>This is laborious and quite slow.Because the Bourne shelldoesn't have any<SPANCLASS="link">built-in (<ACLASS="linkend"HREF="ch01_10.htm"TITLE="Internal and External Commands ">1.10</A>)</SPAN>number crunching, the only way to incrementthe counter is to use the <EMCLASS="emphasis">expr</EM> command in each iteration of theloop.But if you have <EMCLASS="emphasis">jot</EM>, the same loop can be writtenin a simple <EMCLASS="emphasis">for</EM> loop:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">for counter in `jot 10`do   ...done</PRE></BLOCKQUOTE></P><PCLASS="para">&#13;You can also use <EMCLASS="emphasis">jot</EM> to show any other sequence of numbers.For example, to show the integers between 24 and 28 (inclusive), try:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>jot 5 24</B></CODE>2425262728</PRE></BLOCKQUOTE></P><PCLASS="para">The first argument (<EMCLASS="emphasis">5</EM>) is taken to be how many values shouldbe shown.  The second number (<EMCLASS="emphasis">24</EM>) is the number to startcounting with.  This may seem frustrating&nbsp;- why not just let us say&quot;jot 24 28&quot; to specify the beginning and end of the sequence, ratherthan make us figure out how many numbers will be in the sequencefirst?  Well, the reason is that you might not always want to becounting by whole numbers.</P><PCLASS="para">If supplied with a third argument, <EMCLASS="emphasis">jot</EM> takes it as the number to endthe sequence with.  And if you specify either the beginning or endboundary with a decimal point, it will produce fractional numbers inits output:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>jot 5 24 28.0</B></CODE>24.025.026.027.028.0% <CODECLASS="userinput"><B>jot 4 24 28.0</B></CODE>24.025.326.728.0</PRE></BLOCKQUOTE></P><PCLASS="para">You can also use the <EMCLASS="emphasis">-p</EM> option to specify a given precision:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>jot -p4 4 24 28</B></CODE>24.000025.333326.666728.0000</PRE></BLOCKQUOTE></P><PCLASS="para">By default, the values shown are evenly spaced across the interval.You can change this by usinga fourth numerical argument, which becomes thesize of each step in the iteration.For example:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>jot 4 24 28.0 .5</B></CODE>24.024.525.025.5</PRE></BLOCKQUOTE></P><PCLASS="para">Notice in this example that only the first four iterations are shown, because we asked for only four values in the firstargument.This is because any three values determine the fourth automatically,so when the values conflict, <EMCLASS="emphasis">jot</EM> takes the lower value.<EMCLASS="emphasis">jot</EM> stopped after four values regardless of the factthat it would need nine iterations to complete the sequence.However, <EMCLASS="emphasis">jot</EM> will also stopif the sequence is completed <EMCLASS="emphasis">before</EM> the specifiednumber of values are shown.</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>jot 4 24 28 2</B></CODE>242628</PRE></BLOCKQUOTE></P><PCLASS="para">To omit any of these values, replace them with a single dash(<CODECLASS="literal">-</CODE>).For example, if you know that you just want thedigits from 24 to 28, you can omit the field specifying the number ofvalues as long as you tell it to use a step of 1:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>jot - 24 28 1</B></CODE>242526 2728</PRE></BLOCKQUOTE></P><PCLASS="para">And of course, you can use negative numbers and negative steps:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>jot - 1 -3 -2</B></CODE>1-1-3</PRE></BLOCKQUOTE></P><PCLASS="para">If you want the output separated by a string other than a newline,use the <EMCLASS="emphasis">-s</EM> option.For example, to have the output of theprevious command separated by spaces, enter:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>jot -s &quot; &quot; - 1 -3 -2</B></CODE>1 -1 -3</PRE></BLOCKQUOTE></P><PCLASS="para">That's <EMCLASS="emphasis">jot</EM> in its no-frills form, already potentially useful forany writer of shell scripts.However, <EMCLASS="emphasis">jot</EM> does quitea lot more.The <EMCLASS="emphasis">-c</EM> option can be used to show<SPANCLASS="link">ASCII (<ACLASS="linkend"HREF="ch51_03.htm"TITLE="ASCII Characters: Listing and Getting Values ">51.3</A>)</SPAN>characters instead ofintegers.To print out the character for ASCII 65 (decimal), for example, try:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>jot -c 1 65</B></CODE>A</PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-52960"></A><ACLASS="indexterm"NAME="AUTOID-52963"></A>You can also do the ASCII-to-decimal conversion in reverse, by justspecifying a character in place of the lower bound:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>jot 1 A</B></CODE>65</PRE></BLOCKQUOTE></P><PCLASS="para">This can be handy if you want an automatic listing of all 26 letters:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>jot -c 26 A</B></CODE>ABC   ...</PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-52973"></A><ACLASS="indexterm"NAME="AUTOID-52976"></A><ACLASS="indexterm"NAME="AUTOID-52979"></A><ACLASS="indexterm"NAME="AUTOID-52982"></A><ACLASS="indexterm"NAME="AUTOID-52985"></A>The <EMCLASS="emphasis">-r</EM> option produces random numbers, which is very useful inshells with no random number generator (such as the Bourne or Cshells).  To create a 6-digit random number, try:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>jot -r 1 100000 999999</B></CODE>523467</PRE></BLOCKQUOTE></P><PCLASS="para">&#13;(Using <EMCLASS="emphasis">-r</EM>, the fourth numerical argument, if specified, istaken to be a seed for the random number.)</P><PCLASS="para">The <EMCLASS="emphasis">-b</EM> option can be used to repeat a given word, much like the<SPANCLASS="link"><EMCLASS="emphasis">yes</EM> (<ACLASS="linkend"HREF="ch23_04.htm"TITLE='Answer "Yes&quot; or "No&quot; Forever with yes'>23.4</A>)</SPAN>command:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>jot -b lunchtime! 3</B></CODE>lunchtime!lunchtime!lunchtime!</PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-53002"></A><ACLASS="indexterm"NAME="AUTOID-53005"></A><ACLASS="indexterm"NAME="AUTOID-53008"></A>The <EMCLASS="emphasis">jot</EM> manual page suggests a clever way of using this feature:if you want to search for lines in files that have 40 or morecharacters, you could do this using regular expressions, but you'dhave to count out all those dots.</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">grep &quot;........................................&quot; <CODECLASS="replaceable"><I>file</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Using <EMCLASS="emphasis">jot</EM>, you can pat yourself on the back for beingingenious (or for just reading the manpage!):</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">grep `jot -s &quot;&quot; -b . 40` <CODECLASS="replaceable"><I>file</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-53021"></A>But the most powerful feature of <EMCLASS="emphasis">jot</EM> comes with its <EMCLASS="emphasis">-w</EM>option.The <EMCLASS="emphasis">-w</EM> option accepts a word containing formatconversion characters as used by the <EMCLASS="emphasis">printf(&nbsp;)</EM> function.(For example, <CODECLASS="literal">%d</CODE> prints a decimal argument; <CODECLASS="literal">%h</CODE> printshexadecimal.)If you aren't familiar with the <EMCLASS="emphasis">printf(&nbsp;)</EM> format conversions,read your <EMCLASS="emphasis">printf</EM>(3) manual page or check any C programming book.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-53032"></A><ACLASS="indexterm"NAME="AUTOID-53033"></A>This allows you to combine strings with <EMCLASS="emphasis">jot</EM> output, a usefulfeature for manipulating temporary files within scripts. For example, suppose you have a shell script that creates multipletemporary files that you want to remove at the end of the script.You might have even created the files using <EMCLASS="emphasis">jot</EM> earlier in thescript, as shown previously:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">for counter in `jot 10 1`do   <CODECLASS="replaceable"><I>whatever commands</I></CODE> &gt; tmp$counterdone</PRE></BLOCKQUOTE></P><PCLASS="para">Then later on you want to remove the files.You could doanother loop, but it's more efficient to just enter:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">rm `jot -w tmp%d 10 1`</PRE></BLOCKQUOTE></P><PCLASS="para">The <EMCLASS="emphasis">jot</EM> command expands to the strings <EMCLASS="emphasis">tmp1</EM> through<EMCLASS="emphasis">tmp10</EM>, which are the names of the temporary files createdearlier in the script.<ACLASS="indexterm"NAME="AUTOID-53048"></A><ACLASS="indexterm"NAME="AUTOID-53049"></A></P><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">LM</SPAN></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch45_10.htm"TITLE="45.10 Removing a File Once It's Opened&nbsp;- for Security and Easy Cleanup"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 45.10 Removing a File Once It's Opened&nbsp;- for Security and Easy Cleanup"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch45_12.htm"TITLE="45.12 Parameter Substitution "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 45.12 Parameter Substitution "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">45.10 Removing a File Once It's Opened&nbsp;- for Security and Easy Cleanup</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">45.12 Parameter Substitution </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>