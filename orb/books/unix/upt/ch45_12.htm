<HTML><HEAD><TITLE>[Chapter 45] 45.12 Parameter Substitution </TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:54:34Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch45_01.htm"TITLE="45. Shell Programming for the Initiated"><LINKREL="prev"HREF="ch45_11.htm"TITLE="45.11 The Multipurpose jot Command "><LINKREL="next"HREF="ch45_13.htm"TITLE="45.13 Save Disk Space and Programming: Multiple Names for a Program"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch45_11.htm"TITLE="45.11 The Multipurpose jot Command "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 45.11 The Multipurpose jot Command "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 45<BR>Shell Programming for the Initiated</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch45_13.htm"TITLE="45.13 Save Disk Space and Programming: Multiple Names for a Program"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 45.13 Save Disk Space and Programming: Multiple Names for a Program"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-7968">45.12 Parameter Substitution </A></H2><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-53057"></A><ACLASS="indexterm"NAME="AUTOID-53060"></A>The Bourne shell has a handy set of operators for testing and settingshell variables.They're listed in</P><TABLECLASS="table"><CAPTIONCLASS="table"><ACLASS="title"NAME="UPT-ART-7968-TAB-0">Table 45.2: Bourne Shell Parameter Substitution Operators</A></CAPTION><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Operator</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Explanation</TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">${<CODECLASS="replaceable"><I>var</I></CODE>:-<CODECLASS="replaceable"><I>default</I></CODE>}</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">If <EMCLASS="emphasis">var</EM> is not set or is empty, use <EMCLASS="emphasis">default</EM> instead.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">${<CODECLASS="replaceable"><I>var</I></CODE>:=<CODECLASS="replaceable"><I>default</I></CODE>}</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">If <EMCLASS="emphasis">var</EM> is not set or is empty, set it to <EMCLASS="emphasis">default</EM> and use that value.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">${<CODECLASS="replaceable"><I>var</I></CODE>:+<CODECLASS="replaceable"><I>instead</I></CODE>}</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">If <EMCLASS="emphasis">var</EM> is set and is not empty, use<EMCLASS="emphasis">instead</EM>.  Otherwise, use nothing (null string).</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">${<CODECLASS="replaceable"><I>var</I></CODE>:?<CODECLASS="replaceable"><I>message</I></CODE>}</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">If <EMCLASS="emphasis">var</EM> is set and is not empty, use its value.Otherwise, print <EMCLASS="emphasis">message</EM>, if any, and exit from theshell.  If <EMCLASS="emphasis">message</EM> is missing, print a default message (which depends on your shell).</P></TD></TR></TBODY></TABLE><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-53105"></A><ACLASS="indexterm"NAME="AUTOID-53108"></A>If you omit the colon (<CODECLASS="literal">:</CODE>) from the expressions in Table 45-2, theshell doesn't check for an empty parameter.In other words, the substitution will happen whenever the parameter is set.(That's how some early Bourne shells work:they don't understand a colon in parameter substitution.)</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-53113"></A>To see how parameter substitution works, here's another version of the<SPANCLASS="link"><EMCLASS="emphasis">bkedit</EM> script (<ACLASS="linkend"HREF="ch44_08.htm"TITLE="Test Exit Status with the if Statement ">44.8</A>, <ACLASS="linkend"HREF="ch44_11.htm"TITLE="Set Exit Status of a Shell (Script) ">44.11</A>)</SPAN>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">#!/bin/shif cp &quot;$1&quot; &quot;$1.bak&quot;then    ${VISUAL:-/usr/ucb/vi} &quot;$1&quot;    exit   # USE STATUS FROM EDITORelse    echo &quot;`basename $0` quitting: can't make backup?&quot; 1&gt;&amp;2    exit 1fi</PRE></BLOCKQUOTE></P><PCLASS="para">If the<SPANCLASS="link"><EMCLASS="emphasis">VISUAL</EM> (<ACLASS="linkend"HREF="ch06_03.htm"TITLE="Predefined Environment Variables ">6.3</A>)</SPAN>environment variableis set and is not empty, its value(like <EMCLASS="emphasis">/usr/local/bin/emacs</EM>) is used and thecommand line becomes <CODECLASS="literal">/usr/local/bin/emacs&nbsp;&quot;$1&quot;</CODE>.If <EMCLASS="emphasis">VISUAL</EM> isn't set, the command line will default to<CODECLASS="literal">/usr/ucb/vi&nbsp;&quot;$1&quot;</CODE>.</P><PCLASS="para">You can use parameter substitution operators in any command line.You'll see them used with the<SPANCLASS="link">colon (<CODECLASS="literal">:</CODE>) operator (<ACLASS="linkend"HREF="ch45_09.htm"TITLE='The Unappreciated Bourne Shell  ":&quot; Operator'>45.9</A>)</SPAN>,checking or setting default values.There's an example below.The first substitution (<CODECLASS="literal">${nothing=default}</CODE>) will leave<CODECLASS="literal">$nothing</CODE> empty because the variable has been set.The second substitution will set <CODECLASS="literal">$nothing</CODE>to <EMCLASS="emphasis">default</EM> because the variable has been set but is empty.The third substitution will leave <CODECLASS="literal">$something</CODE>set to <EMCLASS="emphasis">stuff</EM>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">nothing=something=stuff: ${nothing=default}: ${nothing:=default}: ${something:=default}</PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-53139"></A><ACLASS="indexterm"NAME="AUTOID-53142"></A><ACLASS="indexterm"NAME="AUTOID-53145"></A><ACLASS="indexterm"NAME="AUTOID-53148"></A><ACLASS="indexterm"NAME="AUTOID-53151"></A>The Korn shell and <EMCLASS="emphasis">bash</EM> have similar<SPANCLASS="link">string editing operators (<ACLASS="linkend"HREF="ch09_07.htm"TITLE="String Editing in ksh and bash ">9.7</A>)</SPAN>like <CODECLASS="literal">${</CODE><CODECLASS="replaceable"><I>var</I></CODE>##<CODECLASS="replaceable"><I>pattern</I></CODE><CODECLASS="literal">}</CODE>.They're useful in shell programs,as well as on the command line and in shell setup files.</P><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">JP</SPAN></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch45_11.htm"TITLE="45.11 The Multipurpose jot Command "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 45.11 The Multipurpose jot Command "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch45_13.htm"TITLE="45.13 Save Disk Space and Programming: Multiple Names for a Program"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 45.13 Save Disk Space and Programming: Multiple Names for a Program"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">45.11 The Multipurpose jot Command </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">45.13 Save Disk Space and Programming: Multiple Names for a Program</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>