<HTML><HEAD><TITLE>[Chapter 45] 45.18 Using basename and dirname </TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:54:42Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch45_01.htm"TITLE="45. Shell Programming for the Initiated"><LINKREL="prev"HREF="ch45_17.htm"TITLE="45.17 Making a for Loop with Multiple Variables "><LINKREL="next"HREF="ch45_19.htm"TITLE="45.19 A while Loop with Several Loop Control Commands "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch45_17.htm"TITLE="45.17 Making a for Loop with Multiple Variables "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 45.17 Making a for Loop with Multiple Variables "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 45<BR>Shell Programming for the Initiated</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch45_19.htm"TITLE="45.19 A while Loop with Several Loop Control Commands "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 45.19 A while Loop with Several Loop Control Commands "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-2260">45.18 Using basename and dirname </A></H2><TABLECLASS="para.programreference"BORDER="1"><TR><THVALIGN="TOP"><ACLASS="programreference"HREF="examples/index.htm"TITLE="basename">basename</A><BR><ACLASS="programreference"HREF="examples/index.htm"TITLE="dirname">dirname</A><BR></TH><TDVALIGN="TOP"><ACLASS="indexterm"NAME="AUTOID-53389"></A><ACLASS="indexterm"NAME="AUTOID-53391"></A><ACLASS="indexterm"NAME="AUTOID-53393"></A><ACLASS="indexterm"NAME="AUTOID-53396"></A>Almost every UNIX command can use<SPANCLASS="link">relative and absolute pathnames (<ACLASS="linkend"HREF="ch14_02.htm"TITLE="Using Relative and Absolute Pathnames ">14.2</A>)</SPAN>tofind a file or directory.There are times you'll need part of a pathname&nbsp;- the head (everythingbefore the last slash) or the tail (the name after the last slash).The utilities <EMCLASS="emphasis">basename</EM> and <EMCLASS="emphasis">dirname</EM>, available on mostUNIX systems (and on the CD-ROM) handle that.</TD></TR></TABLE><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="UPT-ART-2260-SECT-1.1">45.18.1 Introduction to basename and dirname </A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-53407"></A>The <EMCLASS="emphasis">basename</EM> command strips any &quot;path&quot; name components from afilename, leaving you with a &quot;pure&quot; filename.For example:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>basename /usr/bin/gigiplot</B></CODE>gigiplot% <CODECLASS="userinput"><B>basename /home/mikel/bin/bvurns.sh</B></CODE>bvurns.sh</PRE></BLOCKQUOTE></P><PCLASS="para"><EMCLASS="emphasis">basename</EM> can also strip a suffix from a filename.For example:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>basename /home/mikel/bin/bvurns.sh .sh</B></CODE>bvurns</PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-53421"></A><ACLASS="indexterm"NAME="AUTOID-53424"></A>The <EMCLASS="emphasis">dirname</EM> command strips the filename itself, giving you the&quot;directory&quot; part of the pathname:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>dirname /usr/bin/screenblank</B></CODE>/usr/bin% <CODECLASS="userinput"><B>dirname local</B></CODE>.</PRE></BLOCKQUOTE></P><PCLASS="para">If you give <EMCLASS="emphasis">dirname</EM> a &quot;pure&quot; filename (i.e., a filename with nopath, as in the second example), it tells you that the directory is<CODECLASS="literal">.</CODE> (the current directory).</P><BLOCKQUOTECLASS="note"><PCLASS="para"><STRONG>NOTE:</STRONG> <ACLASS="indexterm"NAME="AUTOID-53437"></A><ACLASS="indexterm"NAME="AUTOID-53440"></A><EMCLASS="emphasis">dirname</EM> and <EMCLASS="emphasis">basename</EM> have a bug in many System V implementations.They don't recognize the second argument as a filename suffix to strip.Here's a good test:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>basename 0.foo .foo</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">If the answer is <CODECLASS="literal">0</CODE>, your <EMCLASS="emphasis">basename</EM> implementation is good.If the answer is <CODECLASS="literal">0.foo</CODE>, the implementation is bad.If <EMCLASS="emphasis">basename</EM> doesn't work, <EMCLASS="emphasis">dirname</EM> won't, either.</P></BLOCKQUOTE></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="UPT-ART-2260-SECT-1.2">45.18.2 Use with Loops </A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-53457"></A><ACLASS="indexterm"NAME="AUTOID-53460"></A><ACLASS="indexterm"NAME="AUTOID-53463"></A><ACLASS="indexterm"NAME="AUTOID-53466"></A><ACLASS="indexterm"NAME="AUTOID-53469"></A><ACLASS="indexterm"NAME="AUTOID-53472"></A><ACLASS="indexterm"NAME="AUTOID-53475"></A>Here's an example of <EMCLASS="emphasis">basename</EM> and <EMCLASS="emphasis">dirname</EM>.There's a directory tree with some very large files&nbsp;- over 100,000characters.You want to find those files, run<SPANCLASS="link"><EMCLASS="emphasis">split</EM> (<ACLASS="linkend"HREF="ch35_09.htm"TITLE="Splitting Files at Fixed Points: split ">35.9</A>)</SPAN>on them, and add <EMCLASS="emphasis">huge.</EM> to the start of the original filename.By default, <EMCLASS="emphasis">split</EM> names the file chunks <EMCLASS="emphasis">xaa</EM>, <EMCLASS="emphasis">xab</EM>,<EMCLASS="emphasis">xac</EM>, andso on; you want to use the original filename and a dot (<CODECLASS="literal">.</CODE>)instead of <EMCLASS="emphasis">x</EM>:</P><PCLASS="para"><TABLECLASS="screen.co"BORDER="1"><TR><THVALIGN="TOP"><PRECLASS="calloutlist">&#13;<ACLASS="co"HREF="ch44_09.htm"TITLE="44.9 Testing Your Success ">||</A> <ACLASS="co"HREF="ch44_11.htm"TITLE="44.11 Set Exit Status of a Shell (Script) ">exit</A> &#13;</PRE></TH><TDVALIGN="TOP"><PRECLASS="screen">for path in `find /home/you -type f -size +100000c -print`do    cd `dirname $path` || exit    filename=`basename $path`    split $filename $filename.    mv -i $filename huge.$filenamedone</PRE></TD></TR></TABLE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-53493"></A>The <EMCLASS="emphasis">find</EM> command will output pathnames like these:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">/home/you/somefile/home/you/subdir/anotherfile</PRE></BLOCKQUOTE></P><PCLASS="para">(The absolute pathnames are important here.The <EMCLASS="emphasis">cd</EM> would fail on the second pass of the loop if youuse relative pathnames.)In the loop, the <EMCLASS="emphasis">cd</EM> command uses <EMCLASS="emphasis">dirname</EM> to go to thedirectory where the file is.The <EMCLASS="emphasis">filename</EM> variable, with the output of <EMCLASS="emphasis">basename</EM>, is usedseveral places&nbsp;- twice on the <EMCLASS="emphasis">split</EM> command line.</P><PCLASS="para">If that gives the error <CODECLASS="literal">command line too long</CODE>, replace the firstlines with the two lines below.This makes a<SPANCLASS="link">redirected-input loop (<ACLASS="linkend"HREF="ch45_22.htm"TITLE="Handling Files Line-by-Line ">45.22</A>)</SPAN>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">find /home/you -type f -size +100000c -print |while read path</PRE></BLOCKQUOTE></P></DIV><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">JP</SPAN>, <SPANCLASS="authorinitials">ML</SPAN></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch45_17.htm"TITLE="45.17 Making a for Loop with Multiple Variables "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 45.17 Making a for Loop with Multiple Variables "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch45_19.htm"TITLE="45.19 A while Loop with Several Loop Control Commands "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 45.19 A while Loop with Several Loop Control Commands "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">45.17 Making a for Loop with Multiple Variables </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">45.19 A while Loop with Several Loop Control Commands </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>