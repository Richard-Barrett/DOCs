<HTML><HEAD><TITLE>[Chapter 45] 45.20 Overview: Open Files and File Descriptors </TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:54:45Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch45_01.htm"TITLE="45. Shell Programming for the Initiated"><LINKREL="prev"HREF="ch45_19.htm"TITLE="45.19 A while Loop with Several Loop Control Commands "><LINKREL="next"HREF="ch45_21.htm"TITLE="45.21 n&gt;&amp;m: Swap Standard Output and Standard Error "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch45_19.htm"TITLE="45.19 A while Loop with Several Loop Control Commands "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 45.19 A while Loop with Several Loop Control Commands "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 45<BR>Shell Programming for the Initiated</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch45_21.htm"TITLE="45.21 n&gt;&amp;m: Swap Standard Output and Standard Error "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 45.21 n&gt;&amp;m: Swap Standard Output and Standard Error "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-2050">45.20 Overview: Open Files and File Descriptors </A></H2><PCLASS="para">[This introduction is general and simplified.If you're a technical person who needs a complete and exact description,read a book on UNIX programming. -JP]</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-53556"></A>UNIX shells let you redirect the input and output of programswith operators like <CODECLASS="literal">&gt;</CODE> and <CODECLASS="literal">|</CODE>.How does that work?How can you use it better?Here's an overview.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-53561"></A>When the UNIX kernel starts any<SPANCLASS="link">process (<ACLASS="linkend"HREF="ch38_03.htm"TITLE="Managing Processes: Overall Concepts ">38.3</A>)</SPAN>-for example, <EMCLASS="emphasis">grep</EM>, <EMCLASS="emphasis">ls</EM>, or a shell&nbsp;- it sets up several places for thatprocess to read from and write to.<ACLASS="xref"HREF="ch45_20.htm#UPT-ART-2050-FIG-0"TITLE="Open Standard I/O Files with No Command-Line Redirection">Figure 45.1</A>shows that.</P><H4CLASS="figure"><ACLASS="title"NAME="UPT-ART-2050-FIG-0">Figure 45.1: Open Standard I/O Files with No Command-Line Redirection</A></H4><IMGCLASS="graphic"SRC="figs/2050a.gif"ALT="Figure 45.1"><PCLASS="para">These places are called <EMCLASS="emphasis">open files</EM>.The kernel gives each file a number called a <EMCLASS="emphasis">file descriptor</EM>.But people usually use names for these places instead of the numbers:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-53577"></A>The <EMCLASS="emphasis">standard input</EM> or <EMCLASS="emphasis">stdin</EM> (File Descriptor (F.D.) number 0) is the place wherethe process can read text.This might be text from other programs or from your keyboard.</P></LI><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-53583"></A>The <EMCLASS="emphasis">standard output</EM> or <EMCLASS="emphasis">stdout</EM> (F.D. 1) is a place for the processto write its &quot;answers.&quot;</P></LI><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-53589"></A>The <EMCLASS="emphasis">standard error</EM> or <EMCLASS="emphasis">stderr</EM> (F.D. 2) is where the process can senderror messages.</P></LI></UL><PCLASS="para">By default, as<ACLASS="xref"HREF="ch45_20.htm#UPT-ART-2050-FIG-0"TITLE="Open Standard I/O Files with No Command-Line Redirection">Figure 45.1</A>shows, the file that's opened for <EMCLASS="emphasis">stdin</EM>, <EMCLASS="emphasis">stdout</EM>, and<EMCLASS="emphasis">stderr</EM> is <EMCLASS="emphasis">/dev/tty</EM>-a name for your terminal.This makes life easier for users&nbsp;- and programmers, too.The user doesn't have to tell a program where to read or writebecause the default is your terminal.A programmer doesn't have to open files to read or write from (in manycases); the programs can just read from <EMCLASS="emphasis">stdin</EM>, write to<EMCLASS="emphasis">stdout</EM>, and send errors to <EMCLASS="emphasis">stderr</EM>.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-53603"></A>This gets better.When the shell starts a process (when you type a command at a prompt),you can tell the shell what file to &quot;connect to&quot; any of those file descriptors.For example, <ACLASS="xref"HREF="ch45_20.htm#UPT-ART-2050-FIG-1"TITLE="Standard Output Redirected to a File">Figure 45.2</A>shows what happens when yourun <EMCLASS="emphasis">grep</EM> and make the shell redirect <EMCLASS="emphasis">grep</EM>'sstandard output away from the terminal to a file named <EMCLASS="emphasis">grepout</EM>.</P><H4CLASS="figure"><ACLASS="title"NAME="UPT-ART-2050-FIG-1">Figure 45.2: Standard Output Redirected to a File</A></H4><IMGCLASS="graphic"SRC="figs/2050b.gif"ALT="Figure 45.2"><ACLASS="indexterm"NAME="AUTOID-53613"></A><ACLASS="indexterm"NAME="AUTOID-53615"></A><PCLASS="para">Programs can read and write files besides the ones on <EMCLASS="emphasis">stdin</EM>,<EMCLASS="emphasis">stdout</EM>, and <EMCLASS="emphasis">stderr</EM>.For instance, in <ACLASS="xref"HREF="ch45_20.htm#UPT-ART-2050-FIG-1"TITLE="Standard Output Redirected to a File">Figure 45.2</A>,<EMCLASS="emphasis">grep</EM> opened the file<EMCLASS="emphasis">somefile</EM> itself&nbsp;- it didn't use any of the standard file descriptorsfor <EMCLASS="emphasis">somefile</EM>.A UNIX convention is that if you don't name any files on the commandline, a program will read from its standard input.Programs that work that way are called<SPANCLASS="link"><EMCLASS="emphasis">filters</EM> (<ACLASS="linkend"HREF="ch01_30.htm"TITLE="Redirecting Input and Output ">1.30</A>)</SPAN>.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-53629"></A><ACLASS="indexterm"NAME="AUTOID-53632"></A><ACLASS="indexterm"NAME="AUTOID-53635"></A><ACLASS="indexterm"NAME="AUTOID-53638"></A><ACLASS="indexterm"NAME="AUTOID-53641"></A><ACLASS="indexterm"NAME="AUTOID-53644"></A>All shells can do basic redirection with <EMCLASS="emphasis">stdin</EM>, <EMCLASS="emphasis">stdout</EM>, and<EMCLASS="emphasis">stderr</EM>.But, as you'll see in article<ACLASS="xref"HREF="ch45_21.htm"TITLE="n&gt;&amp;m: Swap Standard Output and Standard Error ">45.21</A>,the Bourne shell also handles file descriptors 3 through 9.That's useful sometimes:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para">Maybe you have a few data files that you want to keep reading from orwriting to.Instead of giving their names, you can use the file descriptor numbers.</P></LI><LICLASS="listitem"><PCLASS="para">Once you open a file, the kernel remembers what place in the file youlast read from or wrote to.Each time you use that file descriptor number while the file is open,you'll be at the sameplace in the file.That's especially nice when you want to read from or write to the same filewith more than one program.For example, the <EMCLASS="emphasis">line</EM> command on some UNIX systems reads one linefrom a file&nbsp;- you can call <EMCLASS="emphasis">line</EM> overand over, whenever you want to read the next line from a file.Once the file has been opened, you can<SPANCLASS="link">remove its link (name) from the directory (<ACLASS="linkend"HREF="ch45_10.htm"TITLE="Removing a File Once It's Opened&nbsp;- for Security and Easy Cleanup">45.10</A>)</SPAN>;the process can access the file through its descriptor without using the name.</P></LI><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-53661"></A>When UNIX starts a new<SPANCLASS="link">subprocess (<ACLASS="linkend"HREF="ch38_03.htm"TITLE="Managing Processes: Overall Concepts ">38.3</A>)</SPAN>,the open file descriptors are given tothat process.A subprocess can read or write from file descriptors opened by its parentprocess.A redirected-I/O loop, as in articles<ACLASS="xref"HREF="ch45_22.htm"TITLE="Handling Files Line-by-Line ">45.22</A>and<ACLASS="xref"HREF="ch45_23.htm"TITLE="The Ins and Outs of Redirected I/O Loops ">45.23</A>,takes advantage of this.</P></LI></UL><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">JP</SPAN></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch45_19.htm"TITLE="45.19 A while Loop with Several Loop Control Commands "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 45.19 A while Loop with Several Loop Control Commands "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch45_21.htm"TITLE="45.21 n&gt;&amp;m: Swap Standard Output and Standard Error "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 45.21 n&gt;&amp;m: Swap Standard Output and Standard Error "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">45.19 A while Loop with Several Loop Control Commands </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">45.21 n&gt;&amp;m: Swap Standard Output and Standard Error </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>