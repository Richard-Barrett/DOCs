<HTML><HEAD><TITLE>[Chapter 45] 45.28 Quick Reference: expr </TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:55:00Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch45_01.htm"TITLE="45. Shell Programming for the Initiated"><LINKREL="prev"HREF="ch45_27.htm"TITLE='45.27 Turn Off echo for "Secret&quot; Answers'><LINKREL="next"HREF="ch45_29.htm"TITLE="45.29 Testing Characters in a String with expr "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch45_27.htm"TITLE='45.27 Turn Off echo for "Secret&quot; Answers'><IMGSRC="../gifs/txtpreva.gif"ALT='Previous: 45.27 Turn Off echo for "Secret&quot; Answers'BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 45<BR>Shell Programming for the Initiated</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch45_29.htm"TITLE="45.29 Testing Characters in a String with expr "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 45.29 Testing Characters in a String with expr "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-4030">45.28 Quick Reference: expr </A></H2><TABLECLASS="para.programreference"BORDER="1"><TR><THVALIGN="TOP"><ACLASS="programreference"HREF="examples/index.htm"TITLE="expr">expr</A><BR></TH><TDVALIGN="TOP"><ACLASS="indexterm"NAME="AUTOID-54267"></A><ACLASS="indexterm"NAME="AUTOID-54269"></A><ACLASS="indexterm"NAME="AUTOID-54272"></A><EMCLASS="emphasis">expr</EM> is a very handy tool in shell programming, since itprovides the ability to evaluate a wide range of arithmetic, logical,and relational expressions.It evaluates its arguments as expressions and prints the result.<EMCLASS="emphasis">expr</EM> is a standard UNIX utility; the GNU versionis on the CD-ROM.</TD></TR></TABLE><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-54279"></A>Here's the syntax.The [brackets] mean &quot;optional&quot;; don't type the brackets:</P><BLOCKQUOTECLASS="blockquote"><PCLASS="para"><CODECLASS="literal">expr</CODE> <CODECLASS="replaceable"><I>arg1 operator arg2 </I></CODE><CODECLASS="literal">[</CODE> <CODECLASS="replaceable"><I>operator arg3 </I></CODE><CODECLASS="literal">... ]</CODE> </P></BLOCKQUOTE><PCLASS="para">Arguments and operators must be separated by spaces.In many cases, an argument is an integer, typed literally orrepresented by a shell variable.There are three types of operators: arithmetic, relational, and logical.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-54291"></A><ACLASS="indexterm"NAME="AUTOID-54294"></A><SPANCLASS="link">Exit status (<ACLASS="linkend"HREF="ch44_07.htm"TITLE="Exit Status of UNIX Processes ">44.7</A>)</SPAN>values for <EMCLASS="emphasis">expr</EM> are 0 if the expression evaluates non-zero and non-null,1 if the expression evaluates to 0 or null, or 2 if the expression is invalid.<ACLASS="indexterm"NAME="AUTOID-54299"></A><ACLASS="indexterm"NAME="AUTOID-54302"></A></P><DLCLASS="variablelist"><DTCLASS="term">Arithmetic operators</DT><DDCLASS="listitem"><PCLASS="para">Use these to produce mathematical expressions whose results are printed.</P><DLCLASS="variablelist"><DTCLASS="term"><CODECLASS="literal">+</CODE></DT><DDCLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-54316"></A>Add <CODECLASS="replaceable"><I>arg2</I></CODE> to <CODECLASS="replaceable"><I>arg1</I></CODE>.</P></DD><DTCLASS="term"><CODECLASS="literal">-</CODE></DT><DDCLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-54326"></A>Subtract <CODECLASS="replaceable"><I>arg2</I></CODE> from <CODECLASS="replaceable"><I>arg1</I></CODE>.</P></DD><DTCLASS="term"><CODECLASS="literal">*</CODE></DT><DDCLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-54336"></A>Multiply the arguments.</P></DD><DTCLASS="term"><CODECLASS="literal">/</CODE></DT><DDCLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-54344"></A>Divide <CODECLASS="replaceable"><I>arg1</I></CODE> by <CODECLASS="replaceable"><I>arg2</I></CODE>.</P></DD><DTCLASS="term"><CODECLASS="literal">%</CODE></DT><DDCLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-54354"></A>Take the remainder when <CODECLASS="replaceable"><I>arg1</I></CODE> is divided by <CODECLASS="replaceable"><I>arg2</I></CODE>.</P></DD></DL><PCLASS="para">Addition and subtraction are evaluated last, unless they are grouped insideparentheses. The symbols <CODECLASS="literal">*</CODE>, <CODECLASS="literal">(</CODE>, and <CODECLASS="literal">)</CODE> have meaning to the shell,so they must be escaped (preceded by a backslash or enclosed inquotes).<ACLASS="indexterm"NAME="AUTOID-54363"></A><ACLASS="indexterm"NAME="AUTOID-54366"></A></P></DD><DTCLASS="term">Relational operators</DT><DDCLASS="listitem"><PCLASS="para">Use these to compare two arguments. Arguments can also be words, in whichcase comparisons assume a<CODECLASS="literal">&lt;</CODE>z and A<CODECLASS="literal">&lt;</CODE>Z.If the comparison statement is true, <EMCLASS="emphasis">expr</EM> writes 1 to<SPANCLASS="link">standard output (<ACLASS="linkend"HREF="ch13_01.htm#UPT-ART-1023"TITLE="Using Standard Input and Output">13.1</A>)</SPAN>;if false, it writes 0.The symbols <CODECLASS="literal">&gt;</CODE> and <CODECLASS="literal">&lt;</CODE> must be escaped.</P><DLCLASS="variablelist"><DTCLASS="term"><CODECLASS="literal">=</CODE></DT><DDCLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-54385"></A>Are the arguments equal?</P></DD><DTCLASS="term"><CODECLASS="literal">!=</CODE></DT><DDCLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-54393"></A>Are the arguments different?</P></DD><DTCLASS="term"><CODECLASS="literal">&gt;</CODE></DT><DDCLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-54401"></A>Is <CODECLASS="replaceable"><I>arg1</I></CODE> greater than <CODECLASS="replaceable"><I>arg2</I></CODE>?</P></DD><DTCLASS="term"><CODECLASS="literal">&gt;=</CODE></DT><DDCLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-54411"></A>Is <CODECLASS="replaceable"><I>arg1</I></CODE> greater than or equal to <CODECLASS="replaceable"><I>arg2</I></CODE>?</P></DD><DTCLASS="term"><CODECLASS="literal">&lt;</CODE></DT><DDCLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-54421"></A>Is <CODECLASS="replaceable"><I>arg1</I></CODE> less than <CODECLASS="replaceable"><I>arg2</I></CODE>?</P></DD><DTCLASS="term"><CODECLASS="literal">&lt;=</CODE></DT><DDCLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-54431"></A>Is <CODECLASS="replaceable"><I>arg1</I></CODE> less than or equal to <CODECLASS="replaceable"><I>arg2</I></CODE>?<ACLASS="indexterm"NAME="AUTOID-54436"></A><ACLASS="indexterm"NAME="AUTOID-54439"></A></P></DD></DL></DD><DTCLASS="term">Logical operators</DT><DDCLASS="listitem"><PCLASS="para">Use these to compare two arguments. Depending on the values,the result written to standard outputcan be <CODECLASS="replaceable"><I>arg1</I></CODE> (or some portion of it), <CODECLASS="replaceable"><I>arg2</I></CODE>, or 0.The symbols <CODECLASS="literal">|</CODE> and <CODECLASS="literal">&amp;</CODE> must be escaped.</P><DLCLASS="variablelist"><DTCLASS="term"><CODECLASS="literal">|</CODE></DT><DDCLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-54456"></A>Logical OR; if <CODECLASS="replaceable"><I>arg1</I></CODE> has a non-zero (and non-null) value,the output is <CODECLASS="replaceable"><I>arg1</I></CODE>; otherwise, the output is <CODECLASS="replaceable"><I>arg2</I></CODE>.</P></DD><DTCLASS="term"><CODECLASS="literal">&amp;</CODE></DT><DDCLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-54467"></A>Logical AND; if both <CODECLASS="replaceable"><I>arg1</I></CODE> and <CODECLASS="replaceable"><I>arg2</I></CODE> have a non-zero (and non-null) value, the output is <CODECLASS="replaceable"><I>arg1</I></CODE>; otherwise, the output is 0.</P></DD><DTCLASS="term"><CODECLASS="literal">:</CODE></DT><DDCLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-54478"></A>Sort of like<SPANCLASS="link"><EMCLASS="emphasis">grep</EM> (<ACLASS="linkend"HREF="ch27_01.htm#UPT-ART-7420"TITLE="Different Versions of grep ">27.1</A>)</SPAN>;<CODECLASS="replaceable"><I>arg2</I></CODE> is a pattern to search for in <CODECLASS="replaceable"><I>arg1</I></CODE>.<CODECLASS="replaceable"><I>arg2</I></CODE> must be a regular expression in this case. If the <CODECLASS="replaceable"><I>arg2</I></CODE> patternis enclosed in <CODECLASS="literal">\(&nbsp;\)</CODE>, the output is the portion of <CODECLASS="replaceable"><I>arg1</I></CODE> that matches;otherwise, the output is simply the number of characters that match. A pattern match always applies to the beginning of the argument (the <CODECLASS="literal">^</CODE> symbol is assumed by default).</P></DD></DL></DD></DL><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="UPT-ART-4030-SECT-1.0.1">45.28.1 Examples </A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-54493"></A><ACLASS="indexterm"NAME="AUTOID-54496"></A><ACLASS="indexterm"NAME="AUTOID-54499"></A><ACLASS="indexterm"NAME="AUTOID-54502"></A><ACLASS="indexterm"NAME="AUTOID-54505"></A>Division happens first; output is 10:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <CODECLASS="userinput"><B>expr 5 + 10 / 2</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Addition happens first; output is 7 (truncated from 7.5):</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <CODECLASS="userinput"><B>expr \( 5 + 10 \) / 2</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Add 1 to variable <EMCLASS="emphasis">i</EM>; this is how variables are incremented inBourne shell scripts:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"><CODECLASS="userinput"><B>i=`expr &quot;$i&quot; + 1`</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-54521"></A><ACLASS="indexterm"NAME="AUTOID-54524"></A>Output 1 (true) if variable <EMCLASS="emphasis">a</EM> is the string &quot;hello&quot;:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <CODECLASS="userinput"><B>expr &quot;$a&quot; = hello</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Output 1 (true) if variable <EMCLASS="emphasis">b</EM> plus 5 equals 10 or more:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <CODECLASS="userinput"><B>expr &quot;$b&quot; + 5 \&gt;= 10</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">&#13;In the examples below, variable <EMCLASS="emphasis">p</EM> is the string &quot;version.100&quot;. This command returns the number of characters in <EMCLASS="emphasis">p</EM>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"><ACLASS="indexterm"NAME="AUTOID-54541"></A>$ <CODECLASS="userinput"><B>expr &quot;$p&quot; : '.*'</B></CODE>   <ICLASS="lineannotation">Output is 11</I></PRE></BLOCKQUOTE></P><PCLASS="para">Match all characters and print them:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <CODECLASS="userinput"><B>expr &quot;$p&quot; : '\(.*\)'</B></CODE>   <ICLASS="lineannotation">Output is &quot;version.100&quot;</I></PRE></BLOCKQUOTE></P><PCLASS="para">Output the number of lowercase letters matched:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <CODECLASS="userinput"><B>expr &quot;$p&quot; : '[a-z]*'</B></CODE>   <ICLASS="lineannotation">Output is 7</I></PRE></BLOCKQUOTE></P><PCLASS="para">Match a string of lowercase letters:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <CODECLASS="userinput"><B>expr &quot;$p&quot; : '\([a-z]*\)'</B></CODE>   <ICLASS="lineannotation">Output is \&quot;version&quot;</I></PRE></BLOCKQUOTE></P><PCLASS="para">Truncate <CODECLASS="literal">$x</CODE> if it contains five or more characters; if not, just output <CODECLASS="literal">$x</CODE>. (Logical OR uses the second argument whenthe first one is 0 or null; i.e., when the match fails.)</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <CODECLASS="userinput"><B>expr &quot;$x&quot; : '\(.....\)'  &quot;$x&quot;</B></CODE></PRE></BLOCKQUOTE></P></DIV><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">DG</SPAN> <SPANCLASS="bibliomisc">from O'Reilly &amp; Associates' <CITECLASS="citetitle">UNIX in a Nutshell (SVR4/Solaris)</CITE></SPAN></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch45_27.htm"TITLE='45.27 Turn Off echo for "Secret&quot; Answers'><IMGSRC="../gifs/txtpreva.gif"ALT='Previous: 45.27 Turn Off echo for "Secret&quot; Answers'BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch45_29.htm"TITLE="45.29 Testing Characters in a String with expr "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 45.29 Testing Characters in a String with expr "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">45.27 Turn Off echo for "Secret&quot; Answers</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">45.29 Testing Characters in a String with expr </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>