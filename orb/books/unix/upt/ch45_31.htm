<HTML><HEAD><TITLE>[Chapter 45] 45.31 Nested Command Substitution </TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:55:09Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch45_01.htm"TITLE="45. Shell Programming for the Initiated"><LINKREL="prev"HREF="ch45_30.htm"TITLE="45.30 Grabbing Parts of a String "><LINKREL="next"HREF="ch45_32.htm"TITLE="45.32 A Better read Command: grabchars "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch45_30.htm"TITLE="45.30 Grabbing Parts of a String "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 45.30 Grabbing Parts of a String "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 45<BR>Shell Programming for the Initiated</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch45_32.htm"TITLE="45.32 A Better read Command: grabchars "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 45.32 A Better read Command: grabchars "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-9903">45.31 Nested Command Substitution </A></H2><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-54842"></A><ACLASS="indexterm"NAME="AUTOID-54845"></A>Article<ACLASS="xref"HREF="ch09_16.htm"TITLE="Command Substitution ">9.16</A>introduces command substitution with a pair of backquotes (<CODECLASS="literal">``</CODE>).Let's review.The shell runs a backquoted string as a command, then replaces thestring with its output.Sometimes&nbsp;- though not as often&nbsp;- you'll want to use the results fromone backquoted string as arguments to another command, itself alsoinside backquotes.To do that, you need to nest the backquotes, to tell the shell whichcommand (which set of backquotes) should be done first, with its outputgiven to the second command.This is tricky with backquotes; the Korn Shell introduced an easierway that you'll see below.Here's a simple example&nbsp;- the first command line uses nested backquotes,and the next two commands show its parts:[5]</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[5] True, this won't give the right answer after 1998.True, the Korn shell has built-in arithmetic.But this <EMCLASS="emphasis">is</EM> a simple example!</P></BLOCKQUOTE><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <CODECLASS="userinput"><B>echo &quot;Next year will be 19`expr \`date +%y\` + 1`.&quot;</B></CODE>Next year will be 1997.$ <CODECLASS="userinput"><B>date +%y</B></CODE>96$ <CODECLASS="userinput"><B>expr 96 + 1</B></CODE>97</PRE></BLOCKQUOTE></P><PCLASS="para">The command to run first has escaped backquotes (<CODECLASS="literal">\`\`</CODE>)around it.In the example above, that's the <CODECLASS="literal">date&nbsp;+%y</CODE> command.<CODECLASS="literal">date&nbsp;+%y</CODE> outputs the year&nbsp;- in this case, <CODECLASS="literal">96</CODE>&nbsp;- and thatvalue is passed to the <EMCLASS="emphasis">expr</EM> command.<EMCLASS="emphasis">expr</EM> adds 96 and 1 to get 97.Then that result (from the outer backquotes) is passed to <EMCLASS="emphasis">echo</EM>,on its command line, and <EMCLASS="emphasis">echo</EM> prints the message.</P><PCLASS="para">Why does the inner command, inside the escaped backquotes(<CODECLASS="literal">\`\`</CODE>), run first?It's because the backslash before the backquote<SPANCLASS="link">turns off the special meaning (<ACLASS="linkend"HREF="ch08_14.htm"TITLE="Bourne Shell Quoting ">8.14</A>)</SPAN>of the backquote.So, when the shell first<SPANCLASS="link">evaluates the command line (<ACLASS="linkend"HREF="ch08_05.htm"TITLE="Command-Line Evaluation ">8.5</A>)</SPAN>,which backquotes does it see?It sees the unescaped backquotes, the ones around the <CODECLASS="literal">expr</CODE>command, and the shell runs the command:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">expr `date +%y` + 1</PRE></BLOCKQUOTE></P><PCLASS="para">But when the shell evaluates that command line, it sees the backquotesin it (now unescaped) and runs <EMCLASS="emphasis">that</EM> command-<CODECLASS="literal">date&nbsp;+%y</CODE>.The <CODECLASS="literal">date&nbsp;+%y</CODE> command outputs <CODECLASS="literal">96</CODE>.Next, the shell can finish the command <CODECLASS="literal">expr&nbsp;96&nbsp;+&nbsp;1</CODE>.It outputs 97.Then the <EMCLASS="emphasis">echo</EM> command can print its message.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-54882"></A>Whew.If you use the Korn shell or <EMCLASS="emphasis">bash</EM>, there's an easier way:the <CODECLASS="literal">$(</CODE><CODECLASS="replaceable"><I>command</I></CODE><CODECLASS="literal">)</CODE> operators.Use <CODECLASS="literal">$(</CODE> before the command, where you would use an openingbackquote.Put the <CODECLASS="literal">)</CODE> after the command, in place of a closing backquote.You don't have to escape these operators when you nest them.</P><PCLASS="para">Here's the previous example with <CODECLASS="literal">$(&nbsp;)</CODE>, then a morereal-life example:</P><PCLASS="para"><TABLECLASS="screen.co"BORDER="1"><TR><THVALIGN="TOP"><PRECLASS="calloutlist">&#13;<ACLASS="co"HREF="ch45_21.htm"TITLE="45.21 n&gt;&amp;m: Swap Standard Output and Standard Error ">2&gt;&amp;1</A> &#13;</PRE></TH><TDVALIGN="TOP"><PRECLASS="screen">$ <CODECLASS="userinput"><B>echo &quot;Next year will be 19$(expr $(date +%y) + 1).&quot;</B></CODE>Next year will be 1997.<ACLASS="indexterm"NAME="AUTOID-54896"></A>$ <CODECLASS="userinput"><B>tarout=$(tar cf /dev/rst1 $(find . -type f -mtime -1 -print) 2&gt;&amp;1)</B></CODE>    <ICLASS="lineannotation">time passes...</I>$ echo &quot;$tarout&quot;tar: ./files/145923: Permission denied</PRE></TD></TR></TABLE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-54903"></A>The inner command&nbsp;- in this case, the<SPANCLASS="link"><EMCLASS="emphasis">find</EM> (<ACLASS="linkend"HREF="ch17_01.htm#UPT-ART-7410"TITLE="The find Command Is Great; The Problem Is Finding How to Use It">17.1</A>)</SPAN>-is run first.Its output, a list of filenames, is put on the command line of the<SPANCLASS="link"><EMCLASS="emphasis">tar</EM> (<ACLASS="linkend"HREF="ch20_01.htm#UPT-ART-8024"TITLE="tar in a Nutshell ">20.1</A>)</SPAN>command.Finally, the output of <EMCLASS="emphasis">tar</EM> (in this case, an error message)is stored in the <EMCLASS="emphasis">tarout</EM> shell variable.</P><PCLASS="para">Beginners (and some long-time programmers too) might argue that youshould never nest command substitution because it's too confusing.I think there are times nesting is clearer.It's more compact and doesn't need temporary storage.And it's not that hard to understand once you see what's happening.There's another nice example in article<ACLASS="xref"HREF="ch38_13.htm"TITLE="Interactively Kill Processes Matching a Pattern ">38.13</A>.</P><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">JP</SPAN></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch45_30.htm"TITLE="45.30 Grabbing Parts of a String "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 45.30 Grabbing Parts of a String "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch45_32.htm"TITLE="45.32 A Better read Command: grabchars "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 45.32 A Better read Command: grabchars "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">45.30 Grabbing Parts of a String </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">45.32 A Better read Command: grabchars </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>