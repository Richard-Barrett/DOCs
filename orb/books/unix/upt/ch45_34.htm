<HTML><HEAD><TITLE>[Chapter 45] 45.34 Arrays in the Bourne Shell </TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:55:17Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch45_01.htm"TITLE="45. Shell Programming for the Initiated"><LINKREL="prev"HREF="ch45_33.htm"TITLE="45.33 Testing Two Strings with One case Statement "><LINKREL="next"HREF="ch45_35.htm"TITLE="45.35 Using a Control Character in a Script "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch45_33.htm"TITLE="45.33 Testing Two Strings with One case Statement "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 45.33 Testing Two Strings with One case Statement "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 45<BR>Shell Programming for the Initiated</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch45_35.htm"TITLE="45.35 Using a Control Character in a Script "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 45.35 Using a Control Character in a Script "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-0217">45.34 Arrays in the Bourne Shell </A></H2><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-55082"></A><ACLASS="indexterm"NAME="AUTOID-55085"></A><ACLASS="indexterm"NAME="AUTOID-55088"></A><ACLASS="indexterm"NAME="AUTOID-55091"></A><ACLASS="indexterm"NAME="AUTOID-55094"></A>The<SPANCLASS="link">C shell (<ACLASS="linkend"HREF="ch47_05.htm"TITLE="Using C Shell Arrays ">47.5</A>)</SPAN>,<SPANCLASS="link"><EMCLASS="emphasis">awk</EM> (<ACLASS="linkend"HREF="ch33_11.htm"TITLE="Quick Reference: awk ">33.11</A>)</SPAN>,the Korn shell, and some other UNIX commandinterpreters have built-in array support.The standard Bourne shell doesn't, though itscommand line is a sort-of array that you can store with the<SPANCLASS="link"><EMCLASS="emphasis">set</EM> (<ACLASS="linkend"HREF="ch44_19.htm"TITLE="The Bourne Shell set Command ">44.19</A>)</SPAN>command&nbsp;- and get stored values through <CODECLASS="literal">$1</CODE>, <CODECLASS="literal">$2</CODE>, etc.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-55105"></A><ACLASS="indexterm"NAME="AUTOID-55108"></A><ACLASS="indexterm"NAME="AUTOID-55111"></A>You can store and use Bourne shell variables&nbsp;- with names like <EMCLASS="emphasis">array1</EM>,<EMCLASS="emphasis">array2</EM>, and so on&nbsp;- to simulate an array with elements 1, 2, and so on.The<SPANCLASS="link"><EMCLASS="emphasis">eval</EM> (<ACLASS="linkend"HREF="ch08_10.htm"TITLE="eval: When You Need Another Chance ">8.10</A>)</SPAN>command does the trick.As an example, if the <EMCLASS="emphasis">n</EM> shell variable stores the array index(<CODECLASS="literal">1</CODE>, <CODECLASS="literal">2</CODE>, etc.), you can store an element of the array named<EMCLASS="emphasis">part</EM> with:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">eval part$n=&quot;<CODECLASS="replaceable"><I>value</I></CODE>&quot;</PRE></BLOCKQUOTE></P><PCLASS="para">and use its value with:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">eval echo &quot;The part is \$part$n.&quot;</PRE></BLOCKQUOTE></P><PCLASS="para">You need the extra quoting in that last command because <EMCLASS="emphasis">eval</EM> scans thecommand line twice.The really important part is <CODECLASS="literal">\$part$n</CODE>-on the first pass, the shellinterprets <CODECLASS="literal">$n</CODE>, strips off the backslash, and leaves a line like:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">echo &quot;The part is $part5.&quot;</PRE></BLOCKQUOTE></P><PCLASS="para">The next pass gives the value of the <EMCLASS="emphasis">part5</EM> variable.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-55137"></A>To store a line of text with multiple words into these fake array elements, the<EMCLASS="emphasis">set</EM> command won't work.A<SPANCLASS="link"><EMCLASS="emphasis">for</EM> loop (<ACLASS="linkend"HREF="ch44_16.htm"TITLE="Handling Command-Line Arguments with a for Loop ">44.16</A>)</SPAN>usually will.For example, to read a line of text into the <EMCLASS="emphasis">temp</EM> variable and storeit in an &quot;array&quot; named <EMCLASS="emphasis">part</EM>:</P><PCLASS="para"><TABLECLASS="screen.co"BORDER="1"><TR><THVALIGN="TOP"><PRECLASS="calloutlist">&#13;<ACLASS="co"HREF="ch45_28.htm"TITLE="45.28 Quick Reference: expr ">expr</A> &#13;</PRE></TH><TDVALIGN="TOP"><PRECLASS="screen">echo &quot;Enter the line: \c&quot;read tempn=0for word in $tempdon=`expr $n + 1`   eval part$n=&quot;$word&quot;done</PRE></TD></TR></TABLE></P><PCLASS="para">The first word from <CODECLASS="literal">$temp</CODE> goes into the variable <EMCLASS="emphasis">part1</EM>, thesecond into <EMCLASS="emphasis">part2</EM>, and so on.</P><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">JP</SPAN></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch45_33.htm"TITLE="45.33 Testing Two Strings with One case Statement "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 45.33 Testing Two Strings with One case Statement "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch45_35.htm"TITLE="45.35 Using a Control Character in a Script "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 45.35 Using a Control Character in a Script "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">45.33 Testing Two Strings with One case Statement </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">45.35 Using a Control Character in a Script </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>