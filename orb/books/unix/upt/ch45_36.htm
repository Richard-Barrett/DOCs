<HTML><HEAD><TITLE>[Chapter 45] 45.36 Shell Lockfile </TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:55:24Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch45_01.htm"TITLE="45. Shell Programming for the Initiated"><LINKREL="prev"HREF="ch45_35.htm"TITLE="45.35 Using a Control Character in a Script "><LINKREL="next"HREF="ch46_01.htm"TITLE="46. Shell Script Debugging and Gotchas"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch45_35.htm"TITLE="45.35 Using a Control Character in a Script "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 45.35 Using a Control Character in a Script "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 45<BR>Shell Programming for the Initiated</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="CHAPTER"HREF="ch46_01.htm"TITLE="46. Shell Script Debugging and Gotchas"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 46. Shell Script Debugging and Gotchas"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-9914">45.36 Shell Lockfile </A></H2><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-55238"></A><ACLASS="indexterm"NAME="AUTOID-55241"></A><ACLASS="indexterm"NAME="AUTOID-55243"></A><ACLASS="indexterm"NAME="AUTOID-55246"></A>Here's an efficient and portable way to create a lockfile from a shellscript.[6]It's also an interesting demonstration of the way that UNIX<SPANCLASS="link">umasks (<ACLASS="linkend"HREF="ch22_04.htm"TITLE="Setting an Exact umask ">22.4</A>)</SPAN>and<SPANCLASS="link">file permissions (<ACLASS="linkend"HREF="ch22_02.htm"TITLE="Tutorial on File and Directory Permissions ">22.2</A>)</SPAN>are handled.</P><BLOCKQUOTECLASS="footnote"><PCLASS="para">[6] Greg Ubben sent this idea.</P></BLOCKQUOTE><PCLASS="para">A <EMCLASS="emphasis">lockfile</EM> can be used if a particular program might be run morethan once at the same time&nbsp;- and you need to be sure that only oneinstance of the program can do something (like modify some file,access a printer, etc.).  Let's say you have a script called<EMCLASS="emphasis">edmaster</EM>; it edits a master configuration file named<EMCLASS="emphasis">config</EM>.  To be sure that two users can't modify the <EMCLASS="emphasis">config</EM>file at the same time, the first <EMCLASS="emphasis">edmaster</EM> would check whetherthe lockfile exists.  If the lockfile doesn't exist, <EMCLASS="emphasis">edmaster</EM>will create it and modify the <EMCLASS="emphasis">config</EM> file.  When it's doneediting, it removes the lockfile.  If someone tries to run a second<EMCLASS="emphasis">edmaster</EM> process, it will see the lockfile from the first<EMCLASS="emphasis">edmaster</EM>, wait and check every few seconds to see if thelockfile is gone.  Once the first <EMCLASS="emphasis">edmaster</EM> removes the lockfile,the second <EMCLASS="emphasis">edmaster</EM> can create the lockfile and do its editingof <EMCLASS="emphasis">config</EM>.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-55267"></A><ACLASS="indexterm"NAME="AUTOID-55270"></A>Here are pieces of a script that check the lock, create it, and(later) remove it:</P><PCLASS="para"><TABLECLASS="screen.co"BORDER="1"><TR><THVALIGN="TOP"><PRECLASS="calloutlist">&#13;<ACLASS="co"HREF="ch45_21.htm"TITLE="45.21 n&gt;&amp;m: Swap Standard Output and Standard Error ">2&gt;</A> <ACLASS="co"HREF="ch13_14.htm"TITLE="13.14 What Can You Do with an Empty File? ">/dev/null</A> <ACLASS="co"HREF="ch44_19.htm"TITLE="44.19 The Bourne Shell set Command ">set</A> &#13;</PRE></TH><TDVALIGN="TOP"><PRECLASS="screen"># set name of this program's lockfile:myname=`basename $0`LOCKFILE=/tmp/lock.$myname   ...# Loop until we get a lock:until (umask 222; echo $$ &gt;$LOCKFILE) 2&gt;/dev/null   # test &amp; set<ACLASS="indexterm"NAME="AUTOID-55277"></A><ACLASS="indexterm"NAME="AUTOID-55281"></A>do   # Optional message - show lockfile owner and creation time:   set x `ls -l $LOCKFILE`   echo &quot;Waiting for user $4 (working since $7 $8 $9)...&quot;   sleep 5done# Do whatever we need exclusive access to do...   ...rm -f $LOCKFILE            # unlock</PRE></TD></TR></TABLE></P><PCLASS="para">So if another user tried to run <EMCLASS="emphasis">edconfig</EM>, and <EMCLASS="emphasis">jpeek</EM>had run <EMCLASS="emphasis">edconfig</EM> first, she might see:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>edconfig</B></CODE>Waiting for user jpeek (working since Aug 23 14:05)...   <ICLASS="lineannotation">...a 5-second pause</I>Waiting for user jpeek (working since Aug 23 14:05)...   <EMCLASS="emphasis">another 5-second pause...</EM>   <ICLASS="lineannotation">...then jpeek finishes and she can edit the file.</I></PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-55296"></A>How does it work?Almost all of the action is in the first line of the loop.A umask of 222 creates files that are read-only(mode <CODECLASS="literal">r--r--r--</CODE>).Because the <EMCLASS="emphasis">umask&nbsp;222</EM> command is run in a<SPANCLASS="link">subshell (<ACLASS="linkend"HREF="ch38_04.htm"TITLE="Subshells ">38.4</A>)</SPAN>,it only affects the lockfile that's created in the subshell at the topof the loop.The rest of the shell script keeps its normal umask.</P><PCLASS="para">If the lockfile already exists (because another process has created it),the loop executes <CODECLASS="literal">sleep&nbsp;5</CODE>; five seconds later, it tries to createthe lock.If the lockfile exists, it will be read-only&nbsp;- so, the command<CODECLASS="literal">echo&nbsp;$$&nbsp;&gt;$LOCKFILE</CODE> will return a nonzero status.A nonzero status is what keeps an<SPANCLASS="link"><EMCLASS="emphasis">until</EM> loop (<ACLASS="linkend"HREF="ch44_10.htm"TITLE="Loops That Test Exit Status ">44.10</A>)</SPAN>running.Once the other process (which has the lock) removes the lockfile,the <EMCLASS="emphasis">echo</EM> command in the subshell will write the shell's processID number into the lockfile and the <EMCLASS="emphasis">until</EM> loop will terminate.</P><PCLASS="para">But, if the lockfile is read-only, how can it ever be created?That's the other interesting part of this technique.The umask only applies to the file <EMCLASS="emphasis">as</EM> it's created; if the filedoesn't exist, the umask doesn't apply to it (yet) and the file can becreated.In fact, you can create a file with mode 000 by typing:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <CODECLASS="userinput"><B>(umask 666; echo hi &gt; afile)</B></CODE>$ <CODECLASS="userinput"><B>ls -l afile</B></CODE>----------  1 jpeek   wheel   3 Aug 23 14:08 afile</PRE></BLOCKQUOTE></P><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">JP</SPAN></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch45_35.htm"TITLE="45.35 Using a Control Character in a Script "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 45.35 Using a Control Character in a Script "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="CHAPTER"HREF="ch46_01.htm"TITLE="46. Shell Script Debugging and Gotchas"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 46. Shell Script Debugging and Gotchas"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">45.35 Using a Control Character in a Script </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">46. Shell Script Debugging and Gotchas</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>