<HTML><HEAD><TITLE>[Chapter 46] 46.7 Quoting and Command-Line Parameters </TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:55:41Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch46_01.htm"TITLE="46. Shell Script Debugging and Gotchas"><LINKREL="prev"HREF="ch46_06.htm"TITLE="46.6 Watch Out for Bourne Shell -e Bug "><LINKREL="next"HREF="ch46_08.htm"TITLE="46.8 Test Built-In Commands for Failure "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch46_06.htm"TITLE="46.6 Watch Out for Bourne Shell -e Bug "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 46.6 Watch Out for Bourne Shell -e Bug "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 46<BR>Shell Script Debugging and Gotchas</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch46_08.htm"TITLE="46.8 Test Built-In Commands for Failure "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 46.8 Test Built-In Commands for Failure "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-0386">46.7 Quoting and Command-Line Parameters </A></H2><DIVCLASS="msgset"><DIVCLASS="msgentry"><DIVCLASS="msg"><DIVCLASS="msgtext"><PCLASS="para"><BCLASS="msgentry.role">Q:</B> <ACLASS="indexterm"NAME="UPT-ART-386-IX-COMMAND-LINE-ARGUMENTS-QUOTING"></A><ACLASS="indexterm"NAME="UPT-ART-386-IX-QUOTING-COMMAND-LINE-PARAMETERS"></A> I need to pass a shell script some arguments with multiple words.I thought that putting<SPANCLASS="link">quotes (<ACLASS="linkend"HREF="ch08_14.htm"TITLE="Bourne Shell Quoting ">8.14</A>)</SPAN>around command-line arguments wouldgroup them.The shell script seems to ignore the quoting, somehow.Here's a simple example:<ACLASS="indexterm"NAME="AUTOID-55708"></A></P><PCLASS="para"><BCLASS="msgentry.role">Q:</B> <BLOCKQUOTECLASS="screen"><PRECLASS="screen">$ <CODECLASS="userinput"><B>cat script</B></CODE>   ...for arg in $*do    echo &quot;Argument is $arg&quot;done$ <CODECLASS="userinput"><B>script '1 2 3' 4</B></CODE>   ...Argument is 1Argument is 2Argument is 3Argument is 4</PRE></BLOCKQUOTE></P></DIV></DIV></DIV><DIVCLASS="msgentry"><DIVCLASS="msg"><DIVCLASS="msgtext"><PCLASS="para"><BCLASS="msgentry.role">A:</B> <ACLASS="indexterm"NAME="AUTOID-55720"></A> This is the way <CODECLASS="literal">$*</CODE> is defined to work. <CODECLASS="literal">$*</CODE> expands to:</P><PCLASS="para"><BCLASS="msgentry.role">A:</B> <BLOCKQUOTECLASS="screen"><PRECLASS="screen">$1 $2</PRE></BLOCKQUOTE></P><PCLASS="para"><BCLASS="msgentry.role">A:</B> [not <CODECLASS="literal">&lt;&quot;&gt;$1&lt;&quot;&gt; &lt;&quot;&gt;$2&lt;&quot;&gt;</CODE><EMCLASS="emphasis">-JP</EM>&nbsp;] if there are two arguments. Hence the <EMCLASS="emphasis">for</EM> loop reads:</P><PCLASS="para"><BCLASS="msgentry.role">A:</B> <BLOCKQUOTECLASS="screen"><PRECLASS="screen">for arg in 1 2 3 4</PRE></BLOCKQUOTE></P><PCLASS="para"><BCLASS="msgentry.role">A:</B> Note that the quotes are gone. What you wanted the shellto see was:</P><PCLASS="para"><BCLASS="msgentry.role">A:</B> <BLOCKQUOTECLASS="screen"><PRECLASS="screen">for arg in '1 2 3' 4</PRE></BLOCKQUOTE></P><PCLASS="para"><BCLASS="msgentry.role">A:</B> You cannot get that, but you can get something that is Good Enough:</P><PCLASS="para"><BCLASS="msgentry.role">A:</B> <TABLECLASS="screen.co"BORDER="1"><TR><THVALIGN="TOP"><PRECLASS="calloutlist"><ACLASS="co"HREF="ch44_15.htm"TITLE="44.15 Handling Command-Line Arguments in Shell Scripts ">&quot;$@&quot;</A> </PRE></TH><TDVALIGN="TOP"><PRECLASS="screen">for arg in &quot;$@&quot;</PRE></TD></TR></TABLE></P><PCLASS="para"><BCLASS="msgentry.role">A:</B> In effect, <CODECLASS="literal">$@</CODE> expands to:</P><PCLASS="para"><BCLASS="msgentry.role">A:</B> <BLOCKQUOTECLASS="screen"><PRECLASS="screen">$1&quot; &quot;$2</PRE></BLOCKQUOTE></P><PCLASS="para"><BCLASS="msgentry.role">A:</B> Putting <CODECLASS="literal">&quot;&quot;</CODE>s around <CODECLASS="literal">$@</CODE>, the effect is:</P><PCLASS="para"><BCLASS="msgentry.role">A:</B> <BLOCKQUOTECLASS="screen"><PRECLASS="screen">for arg in &quot;$1&quot; &quot;$2&quot;</PRE></BLOCKQUOTE></P><PCLASS="para"><BCLASS="msgentry.role">A:</B> <ACLASS="indexterm"NAME="AUTOID-55750"></A><ACLASS="indexterm"NAME="AUTOID-55753"></A><ACLASS="indexterm"NAME="AUTOID-55756"></A><ACLASS="indexterm"NAME="AUTOID-55759"></A><ACLASS="indexterm"NAME="AUTOID-55762"></A><ACLASS="indexterm"NAME="AUTOID-55764"></A><ACLASS="indexterm"NAME="AUTOID-55767"></A>Shell quoting is unnecessarily complex. The C shell actually hasthe right idea (variables can be set to<SPANCLASS="link">&quot;word lists&quot; (<ACLASS="linkend"HREF="ch47_05.htm"TITLE="Using C Shell Arrays ">47.5</A>)</SPAN>;<EMCLASS="emphasis">argv</EM> is sucha list), but its defaults and syntax for suppressing them make foran artless programming language:</P><PCLASS="para"><BCLASS="msgentry.role">A:</B> <BLOCKQUOTECLASS="screen"><PRECLASS="screen"><ACLASS="indexterm"NAME="AUTOID-55774"></A><ACLASS="indexterm"NAME="AUTOID-55777"></A>foreach arg ($argv:q)      # colon q ?!?</PRE></BLOCKQUOTE></P><PCLASS="para"><BCLASS="msgentry.role">A:</B> For the special case of iterating a shell variable over the argumentlist as it stands at the beginning of the iteration, the Bourne shellprovides the construct <CODECLASS="literal">for arg do</CODE>[i.e., no <CODECLASS="literal">in </CODE><CODECLASS="replaceable"><I>list</I></CODE><EMCLASS="emphasis">-JP</EM>&nbsp;]:</P><PCLASS="para"><BCLASS="msgentry.role">A:</B> <BLOCKQUOTECLASS="screen"><PRECLASS="screen">for argdo echo &quot;Argument is $arg&quot;done</PRE></BLOCKQUOTE></P><PCLASS="para"><BCLASS="msgentry.role">A:</B> produces:</P><PCLASS="para"><BCLASS="msgentry.role">A:</B> <BLOCKQUOTECLASS="screen"><PRECLASS="screen">Argument is 1 2 3Argument is 4</PRE></BLOCKQUOTE></P><PCLASS="para"><BCLASS="msgentry.role">A:</B> <ACLASS="indexterm"NAME="AUTOID-55791"></A><ACLASS="indexterm"NAME="AUTOID-55794"></A><ACLASS="indexterm"NAME="AUTOID-55797"></A><CODECLASS="literal">&quot;$@&quot;</CODE> is still needed for passing argument lists to other programs.Unfortunately, since <CODECLASS="literal">$@</CODE> is defined as expanding to:</P><PCLASS="para"><BCLASS="msgentry.role">A:</B> <BLOCKQUOTECLASS="screen"><PRECLASS="screen">$1&quot; &quot;$2...$<CODECLASS="replaceable"><I>n-1</I></CODE>&quot; &quot;$<CODECLASS="replaceable"><I>n</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para"><BCLASS="msgentry.role">A:</B> (where <CODECLASS="replaceable"><I>n</I></CODE> is the number of arguments), when there are no arguments:</P><PCLASS="para"><BCLASS="msgentry.role">A:</B> <BLOCKQUOTECLASS="screen"><PRECLASS="screen">&quot;$@&quot;</PRE></BLOCKQUOTE></P><PCLASS="para"><BCLASS="msgentry.role">A:</B> expands to:</P><PCLASS="para"><BCLASS="msgentry.role">A:</B> <BLOCKQUOTECLASS="screen"><PRECLASS="screen">&quot;&quot;</PRE></BLOCKQUOTE></P><PCLASS="para"><BCLASS="msgentry.role">A:</B> and <CODECLASS="literal">&quot;&quot;</CODE> produces a single argument. [Many UNIX vendorsconsidered this a bug and changed it so that it produces <EMCLASS="emphasis">no</EM>arguments. <EMCLASS="emphasis">-JP</EM>&nbsp;]The best solution for this is to use, for example: </P><PCLASS="para"><BCLASS="msgentry.role">A:</B> <BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>cat bin/okeeffe</B></CODE>#! /bin/shexec rsh okeeffe.berkeley.edu -l torek ${1+&quot;$@&quot;}%</PRE></BLOCKQUOTE></P><PCLASS="para"><BCLASS="msgentry.role">A:</B> The construct <CODECLASS="literal">${1+&quot;$@&quot;}</CODE> means &quot;expand <CODECLASS="literal">$1</CODE>, but if <CODECLASS="literal">$1</CODE>is defined, use <CODECLASS="literal">&quot;$@&quot;</CODE> instead.&quot; [You don't need this onBourne shells with the &quot;bug fix&quot; I mentioned. <EMCLASS="emphasis">-JP</EM>&nbsp;]Hence, if there are no arguments, we get <CODECLASS="literal">$1</CODE> (which isnothing and produces no arguments), otherwise we get <CODECLASS="literal">&quot;$@&quot;</CODE> (whichexpands as above). <CODECLASS="literal">${</CODE><CODECLASS="replaceable"><I>var</I></CODE><CODECLASS="literal">+</CODE><CODECLASS="replaceable"><I>instead</I></CODE><CODECLASS="literal">}</CODE>is one of several <EMCLASS="emphasis">sh</EM><SPANCLASS="link">\*(lqexpansion shortcuts\*(rq (<ACLASS="linkend"HREF="ch45_12.htm"TITLE="Parameter Substitution ">45.12</A>)</SPAN>.Another more generally useful one is<CODECLASS="literal">${</CODE><CODECLASS="replaceable"><I>var-default</I></CODE><CODECLASS="literal">}</CODE>,which expands to <CODECLASS="literal">$</CODE><CODECLASS="replaceable"><I>var</I></CODE>, but if <EMCLASS="emphasis">var</EM> is not set, to<CODECLASS="replaceable"><I>default</I></CODE> instead.All of these can be found in the manual for <EMCLASS="emphasis">sh</EM>, which is worthreading several times, experimenting as you go.</P></DIV></DIV></DIV></DIV><ACLASS="indexterm"NAME="AUTOID-55843"></A><ACLASS="indexterm"NAME="AUTOID-55844"></A><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">CT</SPAN> <SPANCLASS="bibliomisc">in <ACLASS="systemitem.newsgroup"HREF="news:comp.unix.questions">comp.unix.questions</A> on Usenet, 18 March 1988</SPAN></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch46_06.htm"TITLE="46.6 Watch Out for Bourne Shell -e Bug "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 46.6 Watch Out for Bourne Shell -e Bug "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch46_08.htm"TITLE="46.8 Test Built-In Commands for Failure "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 46.8 Test Built-In Commands for Failure "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">46.6 Watch Out for Bourne Shell -e Bug </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">46.8 Test Built-In Commands for Failure </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>