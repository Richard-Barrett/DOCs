<HTML><HEAD><TITLE>[Chapter 46] 46.10 A Portable echo Command </TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:55:48Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch46_01.htm"TITLE="46. Shell Script Debugging and Gotchas"><LINKREL="prev"HREF="ch46_09.htm"TITLE="46.9 If Command Doesn't Return a Status, Test the Error Messages"><LINKREL="next"HREF="ch47_01.htm"TITLE="47. C Shell Programming...NOT"></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch46_09.htm"TITLE="46.9 If Command Doesn't Return a Status, Test the Error Messages"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 46.9 If Command Doesn't Return a Status, Test the Error Messages"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 46<BR>Shell Script Debugging and Gotchas</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="CHAPTER"HREF="ch47_01.htm"TITLE="47. C Shell Programming...NOT"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 47. C Shell Programming...NOT"BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-0016">46.10 A Portable echo Command </A></H2><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-55917"></A><ACLASS="indexterm"NAME="AUTOID-55920"></A><ACLASS="indexterm"NAME="AUTOID-55923"></A><ACLASS="indexterm"NAME="AUTOID-55926"></A><ACLASS="indexterm"NAME="AUTOID-55929"></A>One of the frustrating changes to UNIX (for me, at least) is thenewer versions of<SPANCLASS="link"><EMCLASS="emphasis">echo</EM> (<ACLASS="linkend"HREF="ch08_06.htm"TITLE="Output Command-Line Arguments ">8.6</A>)</SPAN>that interpret escape sequences like<CODECLASS="literal">\c</CODE> and <CODECLASS="literal">\007</CODE>.That feature is actually nice to have&nbsp;- usually, at least.But if the shell script has to work on both Berkeley and System V UNIX,it's a headache to write an <EMCLASS="emphasis">echo</EM> command that prompts a user foran answer&nbsp;- with no newline at the end of the line.(<EMCLASS="emphasis">bash</EM> users have a better&nbsp;- though less portable&nbsp;- answer:the <EMCLASS="emphasis">-e</EM> and <EMCLASS="emphasis">-E</EM> options explained at the end of the article.)With the original UNIX <EMCLASS="emphasis">echo</EM> command, you write:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">echo -n &quot;Answer y for yes or n for no: &quot;</PRE></BLOCKQUOTE></P><PCLASS="para">but the newer <EMCLASS="emphasis">echo</EM> needs:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">echo &quot;Answer y for yes or n for no: \c&quot;</PRE></BLOCKQUOTE></P><PCLASS="para">and giving the wrong command to the wrong <EMCLASS="emphasis">echo</EM> makes messy output.</P><PCLASS="para">I've seen workarounds byBruce Barnett and Liam R. E. Quin.I've turned them into this version.It sets shell variables that you use this way:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">$echo &quot;Answer y for yes or n for no: ${nnl}&quot;</PRE></BLOCKQUOTE></P><PCLASS="para">Can your shell script be set up for a particular UNIX version ahead oftime?If it can, write your no&nbsp;- newline <EMCLASS="emphasis">echo</EM> commands like the example above&nbsp;- andput the lines below at the top of your script:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"># UN-COMMENT THE LINE FOR YOUR SYSTEM:echo=&quot;echo -n&quot;   nnl= ;;                                     # BSD #echo=&quot;echo&quot;      nnl=&quot;\c&quot; ;;                                # Sys V#echo=&quot;echo -n&quot;   nnl=     PATH=/usr/bin:$PATH; export PATH  # SunOS</PRE></BLOCKQUOTE></P><PCLASS="para">Lines similar to those let the person who installs the script set theright <EMCLASS="emphasis">echo</EM> version.</P><PCLASS="para">But if your script is shared between many UNIX systems (across anetworked filesystem) or runs on a system where users can choose BSD orSystem V features (like SunOS), your script will need to configure<EMCLASS="emphasis">echo</EM> each time it runs.To do that, put the following code at the top of your script:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">case &quot;`echo 'x\c'`&quot; in'x\c')  echo=&quot;echo -n&quot;   nnl= ;;       # BSD x)      echo=&quot;echo&quot;      nnl=&quot;\c&quot; ;;   # Sys V*)      echo &quot;$0 quitting: Can't set up echo.&quot; 1&gt;&amp;2; exit 1 ;;esac</PRE></BLOCKQUOTE></P><PCLASS="para">In that code, the shell runs the current <EMCLASS="emphasis">echo</EM> commandand tests its output.Newer <EMCLASS="emphasis">echo</EM> commands will interpret the <CODECLASS="literal">\c</CODE> and print<CODECLASS="literal">x</CODE> (with no newline after it; that doesn't matter here).Berkeley <EMCLASS="emphasis">echo</EM> commands willecho the <CODECLASS="literal">\c</CODE> literally;this is matched by the first pattern instead.</P><PCLASS="para">You can handle other escape sequences and unprintablecharacters in the same way.For example, to make the code set <CODECLASS="literal">$esc</CODE>, a shell variable that makesan ESCape character, you can add lines like one of the two below:</P><PCLASS="para"><TABLECLASS="screen.co"BORDER="1"><TR><THVALIGN="TOP"><PRECLASS="calloutlist"><ACLASS="co"HREF="ch45_35.htm"TITLE="45.35 Using a Control Character in a Script ">`echo...\033`</A> </PRE></TH><TDVALIGN="TOP"><PRECLASS="screen"><ACLASS="indexterm"NAME="AUTOID-55973"></A><ACLASS="indexterm"NAME="AUTOID-55976"></A><ACLASS="indexterm"NAME="AUTOID-55979"></A>esc=<CODECLASS="literal">`echo -n d | tr &quot;d&quot; &quot;\033&quot;`     </CODE><EMCLASS="emphasis"># BSD</EM><CODECLASS="literal">esc=&quot;\033&quot;                          </CODE><EMCLASS="emphasis"># Sys V</EM></PRE></TD></TR></TABLE></P><PCLASS="para">If you use <EMCLASS="emphasis">bash</EM>, you can tell its <EMCLASS="emphasis">echo</EM> command which way toact.The <EMCLASS="emphasis">echo&nbsp;-e</EM> command always does backslash-escape interpretation.The <EMCLASS="emphasis">echo&nbsp;-E</EM> command never interprets backslashes.And the option <EMCLASS="emphasis">-n</EM> (no newline) works in both cases.<ACLASS="indexterm"NAME="AUTOID-55993"></A><ACLASS="indexterm"NAME="AUTOID-55994"></A></P><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">JP</SPAN></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch46_09.htm"TITLE="46.9 If Command Doesn't Return a Status, Test the Error Messages"><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 46.9 If Command Doesn't Return a Status, Test the Error Messages"BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="CHAPTER"HREF="ch47_01.htm"TITLE="47. C Shell Programming...NOT"><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 47. C Shell Programming...NOT"BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">46.9 If Command Doesn't Return a Status, Test the Error Messages</TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">47. C Shell Programming...NOT</TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>