<HTML><HEAD><TITLE>[Chapter 47] 47.4 C Shell Variable Operators and Expressions </TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:55:59Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch47_01.htm"TITLE="47. C Shell Programming...NOT"><LINKREL="prev"HREF="ch47_03.htm"TITLE="47.3 Conditional Statements with if "><LINKREL="next"HREF="ch47_05.htm"TITLE="47.5 Using C Shell Arrays "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch47_03.htm"TITLE="47.3 Conditional Statements with if "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 47.3 Conditional Statements with if "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 47<BR>C Shell Programming...NOT</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch47_05.htm"TITLE="47.5 Using C Shell Arrays "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 47.5 Using C Shell Arrays "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-7650">47.4 C Shell Variable Operators and Expressions </A></H2><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="UPT-ART-7650-SECT-1.1">47.4.1 Variables </A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-56681"></A><ACLASS="indexterm"NAME="AUTOID-56684"></A><ACLASS="indexterm"NAME="AUTOID-56687"></A>In the following substitutions, braces (<CODECLASS="literal">{}</CODE>) are optional,except when needed to separate a variable name from following characters that would otherwise be a part of it.The array <EMCLASS="emphasis">argv</EM> (the command-line arguments) is used as an example,but any <EMCLASS="emphasis">csh</EM> array name may be used.<TABLECLASS="informaltable"><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">${<CODECLASS="replaceable"><I>var</I></CODE>}</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">The value of variable <EMCLASS="emphasis">var</EM>.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">${<CODECLASS="replaceable"><I>var</I></CODE>[<CODECLASS="replaceable"><I>i</I></CODE>]}</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Select word or words in position <EMCLASS="emphasis">i</EM> of<EMCLASS="emphasis">var</EM>. <EMCLASS="emphasis">i</EM> can be a single number,a range <CODECLASS="replaceable"><I>m</I></CODE><CODECLASS="literal">-</CODE><CODECLASS="replaceable"><I>n</I></CODE>,a range <CODECLASS="literal">-</CODE><CODECLASS="replaceable"><I>n</I></CODE> (missing <CODECLASS="replaceable"><I>m</I></CODE> implies 1),a range <CODECLASS="replaceable"><I>m</I></CODE><CODECLASS="literal">-</CODE> (missing <CODECLASS="replaceable"><I>n</I></CODE> implies allremaining words), or <CODECLASS="literal">*</CODE> (select all words). <EMCLASS="emphasis">i</EM> can alsobe a variable that expands to one of these values.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">${#<CODECLASS="replaceable"><I>var</I></CODE>}</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">The number of words in <EMCLASS="emphasis">var</EM>.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">${#argv}</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">The number of command-line arguments.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">${argv[<CODECLASS="replaceable"><I>n</I></CODE>]}</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Individual arguments on command line (positional parameters).<EMCLASS="emphasis">n</EM> is a number (1, 12, etc.).</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">${<CODECLASS="replaceable"><I>n</I></CODE>}</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Same as <CODECLASS="literal">${argv[</CODE><CODECLASS="replaceable"><I>n</I></CODE><CODECLASS="literal">]}</CODE>.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">${argv[*]}</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">All arguments on command line.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">$*</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Same as <CODECLASS="literal">$argv[*]</CODE>.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">${argv[$#argv]}</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">The last argument.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">${?<CODECLASS="replaceable"><I>var</I></CODE>}</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Return 1 if <EMCLASS="emphasis">var</EM> is set; 0 if <EMCLASS="emphasis">var</EM> is not set.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">! ${?<CODECLASS="replaceable"><I>var</I></CODE>}</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Return 0 if <EMCLASS="emphasis">var</EM> is set; 1 if <EMCLASS="emphasis">var</EM> is not set.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">$$</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Process number of current shell; useful as part of a filenamefor creating temporary files with unique names.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">$&lt;</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Read a line from standard input.</P></TD></TR></TBODY></TABLE></P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="UPT-ART-7650-SECT-1.2">47.4.2 Expressions </A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-56797"></A><ACLASS="indexterm"NAME="AUTOID-56800"></A><ACLASS="indexterm"NAME="AUTOID-56803"></A><ACLASS="indexterm"NAME="AUTOID-56806"></A><ACLASS="indexterm"NAME="AUTOID-56809"></A><ACLASS="indexterm"NAME="AUTOID-56811"></A><ACLASS="indexterm"NAME="AUTOID-56814"></A>Expressions are used in C shell <CODECLASS="replaceable"><I>@</I></CODE>, <EMCLASS="emphasis">if</EM>, and <EMCLASS="emphasis">while</EM> statements to perform arithmetic, string comparisons, file testing,and so on.<EMCLASS="emphasis">exit</EM> and <EMCLASS="emphasis">set</EM> can also specify expressions.Expressions are formed by combining variables and constants withoperators that resemble those in the C programming language.Operator precedence is the same as in C but can be remembered asfollows:</P><OLCLASS="orderedlist"><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-56825"></A><ACLASS="indexterm"NAME="AUTOID-56828"></A><ACLASS="indexterm"NAME="AUTOID-56831"></A><CODECLASS="literal">* / %</CODE></P></LI><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-56837"></A><ACLASS="indexterm"NAME="AUTOID-56840"></A><CODECLASS="literal">+ -</CODE></P></LI></OL><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-56845"></A><ACLASS="indexterm"NAME="AUTOID-56848"></A><ACLASS="indexterm"NAME="AUTOID-56851"></A><ACLASS="indexterm"NAME="AUTOID-56854"></A><ACLASS="indexterm"NAME="AUTOID-56857"></A>Group all other expressions inside (&nbsp;).Parentheses are required if the expression contains<CODECLASS="literal">&lt;</CODE>, <CODECLASS="literal">&gt;</CODE>, <CODECLASS="literal">&amp;</CODE>, or <CODECLASS="literal">|</CODE>.</P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="UPT-ART-7650-SECT-1.3">47.4.3 Operators </A></H3><PCLASS="para">Operators can be one of the following types:</P><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="UPT-ART-7650-SECT-1.3.1">47.4.3.1 Assignment Operators </A></H4><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-56870"></A><ACLASS="indexterm"NAME="AUTOID-56873"></A><ACLASS="indexterm"NAME="AUTOID-56876"></A><ACLASS="indexterm"NAME="AUTOID-56879"></A><ACLASS="indexterm"NAME="AUTOID-56882"></A><ACLASS="indexterm"NAME="AUTOID-56885"></A><ACLASS="indexterm"NAME="AUTOID-56888"></A><ACLASS="indexterm"NAME="AUTOID-56891"></A><ACLASS="indexterm"NAME="AUTOID-56894"></A><ACLASS="indexterm"NAME="AUTOID-56897"></A><ACLASS="indexterm"NAME="AUTOID-56900"></A><ACLASS="indexterm"NAME="AUTOID-56903"></A><TABLECLASS="informaltable"><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">=</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Assign value.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">+=  -=</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Reassign after addition/subtraction.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">*=  /=  %=</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Reassign after multiplication/division/remainder.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">&amp;= ^= |=</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Reassign after bitwise AND/XOR/OR.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">++</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Increment.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">-</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Decrement.</P></TD></TR></TBODY></TABLE></P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="UPT-ART-7650-SECT-1.3.2">47.4.3.2 Arithmetic Operators </A></H4><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-56942"></A><ACLASS="indexterm"NAME="AUTOID-56945"></A><ACLASS="indexterm"NAME="AUTOID-56948"></A><ACLASS="indexterm"NAME="AUTOID-56951"></A><ACLASS="indexterm"NAME="AUTOID-56954"></A><ACLASS="indexterm"NAME="AUTOID-56957"></A><TABLECLASS="informaltable"><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">*  /  %</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Multiplication; integer division; modulus (remainder).</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">c+  -</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Addition; subtraction.</P></TD></TR></TBODY></TABLE></P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="UPT-ART-7650-SECT-1.3.3">47.4.3.3 Bitwise and Logical Operators </A></H4><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-56976"></A><ACLASS="indexterm"NAME="AUTOID-56979"></A><ACLASS="indexterm"NAME="AUTOID-56982"></A><ACLASS="indexterm"NAME="AUTOID-56985"></A><ACLASS="indexterm"NAME="AUTOID-56988"></A><ACLASS="indexterm"NAME="AUTOID-56991"></A><ACLASS="indexterm"NAME="AUTOID-56994"></A><ACLASS="indexterm"NAME="AUTOID-56997"></A><ACLASS="indexterm"NAME="AUTOID-57000"></A><ACLASS="indexterm"NAME="AUTOID-57003"></A><ACLASS="indexterm"NAME="AUTOID-57006"></A><ACLASS="indexterm"NAME="AUTOID-57009"></A><TABLECLASS="informaltable"><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">~</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Binary inversion (one's complement).</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">!</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Logical negation.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">&lt;&lt;  &gt;&gt;</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Bitwise left shift; bitwise right shift.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">&amp;</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Bitwise AND.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">^</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Bitwise exclusive OR.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">|</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Bitwise OR.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">&amp;&amp;</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Logical AND.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">||</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Logical OR.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">{ <CODECLASS="replaceable"><I>cmd</I></CODE> }</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Return 1 if command <EMCLASS="emphasis">cmd</EM> is successful; 0 otherwise.Note that this is the opposite of <EMCLASS="emphasis">cmd</EM>'s normal return code.The <EMCLASS="emphasis">status</EM> variable may be more practical.</P></TD></TR></TBODY></TABLE></P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="UPT-ART-7650-SECT-1.3.4">47.4.3.4 Comparison Operators </A></H4><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-57067"></A><ACLASS="indexterm"NAME="AUTOID-57070"></A><ACLASS="indexterm"NAME="AUTOID-57073"></A><ACLASS="indexterm"NAME="AUTOID-57076"></A><ACLASS="indexterm"NAME="AUTOID-57079"></A><ACLASS="indexterm"NAME="AUTOID-57082"></A><ACLASS="indexterm"NAME="AUTOID-57085"></A><ACLASS="indexterm"NAME="AUTOID-57088"></A><ACLASS="indexterm"NAME="AUTOID-57091"></A><TABLECLASS="informaltable"><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">==  !=</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Equality; inequality.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">&lt;=  &gt;=</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Less than or equal to; greater than or equal to.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">&lt;  &gt;</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Less than; greater than.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">=~</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">String on left matches a filename pattern on the rightcontaining <CODECLASS="literal">*</CODE>, <CODECLASS="literal">?</CODE>, or <CODECLASS="literal">[</CODE>...<CODECLASS="literal">]</CODE>.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">!~</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">String on left does not match a filename patterncontaining <CODECLASS="literal">*</CODE>, <CODECLASS="literal">?</CODE>, or <CODECLASS="literal">[</CODE>...<CODECLASS="literal">]</CODE>.</P></TD></TR></TBODY></TABLE></P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="UPT-ART-7650-SECT-1.3.5">47.4.3.5 File Inquiry Operators </A></H4><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-57133"></A>Command substitution and filename expansion are performed on<EMCLASS="emphasis">file</EM> before the test is performed.<ACLASS="indexterm"NAME="AUTOID-57137"></A><TABLECLASS="informaltable"><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">-d <CODECLASS="replaceable"><I>file</I></CODE></P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">The file is a directory.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">-e <CODECLASS="replaceable"><I>file</I></CODE></P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">The file exists.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">-f <CODECLASS="replaceable"><I>file</I></CODE></P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">The file is a plain file.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">-o <CODECLASS="replaceable"><I>file</I></CODE></P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">The user owns the file.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">-r <CODECLASS="replaceable"><I>file</I></CODE></P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">The user has read permission.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">-w <CODECLASS="replaceable"><I>file</I></CODE></P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">The user has write permission.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">-x <CODECLASS="replaceable"><I>file</I></CODE></P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">The user has execute permission.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">-z <CODECLASS="replaceable"><I>file</I></CODE></P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">The file has zero size.</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">!</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Reverse the sense of any of the above inquiries.</P></TD></TR></TBODY></TABLE></P></DIV></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="UPT-ART-7650-SECT-1.4">47.4.4 Examples</A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-57198"></A><ACLASS="indexterm"NAME="AUTOID-57200"></A><ACLASS="indexterm"NAME="AUTOID-57203"></A>The following examples show <CODECLASS="literal">@</CODE> commands and assume<EMCLASS="emphasis">n</EM> = 4:<TABLECLASS="informaltable"><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Expression</TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1">Value of $x</TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">@ x = ($n &gt; 10 || $n &lt; 5)</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">1</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">@ x = ($n &gt;= 0 &amp;&amp; $n &lt; 3)</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">@ x = ($n &lt;&lt; 2)</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">16</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">@ x = ($n &gt;&gt; 2)</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">1</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">@ x = $n % 2</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">0</TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">@ x = $n % 3</TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1">1</TD></TR></TBODY></TABLE></P><PCLASS="para">The following examples show the first line of <EMCLASS="emphasis">if</EM> or<EMCLASS="emphasis">while</EM> statements:<TABLECLASS="informaltable"><THEADCLASS="thead"><TRCLASS="row"VALIGN="TOP"><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Expression</P></TH><THCLASS="entry"ALIGN="LEFT"ROWSPAN="1"COLSPAN="1"><PCLASS="para">Meaning</P></TH></TR></THEAD><TBODYCLASS="tbody"><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">while ($#argv != 0)</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">While there are command-line (<EMCLASS="emphasis">argv</EM>) arguments ...</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">if ($today[1] == Fri)</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">If the first word is <EMCLASS="emphasis">Fri</EM>...</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">if ($file !~ *.[zZ])</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">If the file doesn't end with <EMCLASS="emphasis">.z</EM> or <EMCLASS="emphasis">.Z</EM> ...</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">if ($argv[1] =~ chap?)</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">If the first argument is <EMCLASS="emphasis">chap</EM> followed by a single character...</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">if (-f $argv[1])</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">If the first argument is a plain file...</P></TD></TR><TRCLASS="row"VALIGN="TOP"><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">if (! -d $tmpdir)</P></TD><TDCLASS="entry"ROWSPAN="1"COLSPAN="1"><PCLASS="para">If <EMCLASS="emphasis">tmpdir</EM> is not a directory...</P></TD></TR></TBODY></TABLE><ACLASS="indexterm"NAME="AUTOID-57281"></A><ACLASS="indexterm"NAME="AUTOID-57284"></A><ACLASS="indexterm"NAME="AUTOID-57287"></A><ACLASS="indexterm"NAME="AUTOID-57290"></A><ACLASS="indexterm"NAME="AUTOID-57293"></A><ACLASS="indexterm"NAME="AUTOID-57296"></A><ACLASS="indexterm"NAME="AUTOID-57299"></A><ACLASS="indexterm"NAME="AUTOID-57302"></A><ACLASS="indexterm"NAME="AUTOID-57305"></A><ACLASS="indexterm"NAME="AUTOID-57308"></A><ACLASS="indexterm"NAME="AUTOID-57311"></A><ACLASS="indexterm"NAME="AUTOID-57314"></A><ACLASS="indexterm"NAME="AUTOID-57317"></A><ACLASS="indexterm"NAME="AUTOID-57320"></A><ACLASS="indexterm"NAME="AUTOID-57323"></A><ACLASS="indexterm"NAME="AUTOID-57326"></A><ACLASS="indexterm"NAME="AUTOID-57329"></A><ACLASS="indexterm"NAME="AUTOID-57332"></A><ACLASS="indexterm"NAME="AUTOID-57335"></A><ACLASS="indexterm"NAME="AUTOID-57338"></A><ACLASS="indexterm"NAME="AUTOID-57341"></A><ACLASS="indexterm"NAME="AUTOID-57344"></A><ACLASS="indexterm"NAME="AUTOID-57347"></A><ACLASS="indexterm"NAME="AUTOID-57350"></A></P></DIV><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">DG</SPAN> <SPANCLASS="bibliomisc">from O'Reilly &amp; Associates' <CITECLASS="citetitle">UNIX in a Nutshell (SVR4/Solaris)</CITE></SPAN></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch47_03.htm"TITLE="47.3 Conditional Statements with if "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 47.3 Conditional Statements with if "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch47_05.htm"TITLE="47.5 Using C Shell Arrays "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 47.5 Using C Shell Arrays "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">47.3 Conditional Statements with if </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">47.5 Using C Shell Arrays </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>