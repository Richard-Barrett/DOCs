<HTML><HEAD><TITLE>[Chapter 52] 52.8 Building Programs from Source Code </TITLE><METANAME="DC.title"CONTENT="UNIX Power Tools"><METANAME="DC.creator"CONTENT="Jerry Peek, Tim O'Reilly &amp; Mike Loukides"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-04T21:58:49Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="1-56592-260-3"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch52_01.htm"TITLE="52. What's on the Disc"><LINKREL="prev"HREF="ch52_07.htm"TITLE="52.7 Other Ways to Get the Software "><LINKREL="next"HREF="ch52_09.htm"TITLE="52.9 Software Support from RTR "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="UNIX Power Tools"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,58"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/psrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch52_07.htm"TITLE="52.7 Other Ways to Get the Software "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 52.7 Other Ways to Get the Software "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 52<BR>What's on the Disc</FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch52_09.htm"TITLE="52.9 Software Support from RTR "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 52.9 Software Support from RTR "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="UPT-ART-3840">52.8 Building Programs from Source Code </A></H2><PCLASS="para"><ACLASS="indexterm"NAME="UPT-ART-3840-IX-C-LANGUAGE-SOURCE-CODE"></A><ACLASS="indexterm"NAME="UPT-ART-3840-IX-SOFTWARE-SOURCE-CODE"></A>The programs on the disc are supplied in binary form for the mostpopular UNIX platforms, as listed in article<ACLASS="xref"HREF="ch52_03.htm"TITLE="Shrink-Wrapped Software for UNIX ">52.3</A>.But we also supply C source code for those of you who are on unsupportedplatforms.</P><PCLASS="para">Now, don't run away.You don't have to be a C programmer to compile these sources.I've never written a C program in mylife, and I compile public domain software all the time.The CD-ROM provides build scripts for each of the packages,so many of you can just run the script and have everything installedautomatically.  </P><PCLASS="para">If the build scripts don't work, the CD-ROM also hasa script to copy the sources to your local hard disk.Although we can't promise that you'll be able to build thesources on your own without a hitch, this article includes someexplanation of how to build sources without needing to learn howto program in C.</P><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="UPT-ART-3840-SECT-1.1">52.8.1 Running the Build Scripts </A></H3><PCLASS="para">Before you do anything, try out the <EMCLASS="emphasis">build</EM> scripts.You might be able to get away without knowing anything at all about the build process.</P><PCLASS="para">To build programs from source code, first mount the CD-ROM asdescribed in article<ACLASS="xref"HREF="ch52_05.htm"TITLE="Using the Power Tools CD-ROM ">52.5</A>.</P><PCLASS="para">Each package on the CD-ROM that has source code can be compiled with the&quot;build&quot; script.The build script will copy the files off the CD into your currentdirectory, compile, and install them.</P><PCLASS="para">As the CD-ROM is read-only, you must use a directory on some otherdisk for the build.For example, if you wanted to build the &quot;compress&quot;package, a directorycalled <EMCLASS="emphasis">compress</EM> will be created in the current directory when thebuild script is run.The build script has defaultsettings for the directory to which the source code will be copied, the directory in which the package will be installed, the directoryin which the &quot;shareable&quot; portion of the package will be installed, anda &quot;prefix&quot; for the shareable directories.These settings canbe overridden by the following <SPANCLASS="link">environment variables (<ACLASS="linkend"HREF="ch06_01.htm#UPT-ART-1170"TITLE="What Environment Variables Are Good For ">6.1</A>)</SPAN>:<ACLASS="indexterm"NAME="AUTOID-63240"></A></P><DLCLASS="variablelist"><DTCLASS="term">SOURCEDIR</DT><DDCLASS="listitem"><PCLASS="para">This is where the source code for the package resides on the CD-ROM.The build script tries to determine this automatically, so youshould not have set <EMCLASS="emphasis">SOURCEDIR</EM> unless you are using thebuild script somewhere other than the CD-ROM.<ACLASS="indexterm"NAME="AUTOID-63248"></A></P></DD><DTCLASS="term">INSTALLDIR</DT><DDCLASS="listitem"><PCLASS="para">This is the directory where the package will be installed.It is set to<EMCLASS="emphasis">/usr/local</EM> by default.For example, to change <EMCLASS="emphasis">INSTALLDIR</EM> to <EMCLASS="emphasis">/opt</EM>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>setenv INSTALLDIR /opt</B></CODE>   <ICLASS="lineannotation">csh</I>$ <CODECLASS="userinput"><B>INSTALLDIR=/opt ; export INSTALLDIR</B></CODE>   <ICLASS="lineannotation">sh</I></PRE></BLOCKQUOTE></P><PCLASS="para"></P></DD><DTCLASS="term">INSTALLSHAREDIR</DT><DDCLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-63268"></A>This is the directory where &quot;shareable&quot; portions of the package will beinstalled (<EMCLASS="emphasis">/usr/local/share</EM> by default).You can set it to the same value as <EMCLASS="emphasis">INSTALLDIR</EM> if you want them in the same location.<ACLASS="indexterm"NAME="AUTOID-63272"></A></P></DD><DTCLASS="term">SHAREPREFIX</DT><DDCLASS="listitem"><PCLASS="para">This &quot;prefix&quot; will be prepended to the directory names for <EMCLASS="emphasis">lib</EM>, <EMCLASS="emphasis">include</EM>, <EMCLASS="emphasis">spool</EM>, and <EMCLASS="emphasis">bin</EM>.There is nodefault setting, but you could use <EMCLASS="emphasis">s</EM> if you wanted to conformto the same scheme used by the &quot;install&quot; program to name shareabledirectories <EMCLASS="emphasis">slib</EM>, <EMCLASS="emphasis">sinclude</EM>, <EMCLASS="emphasis">sspool</EM>, and <EMCLASS="emphasis">sbin</EM>.</P></DD></DL><PCLASS="para">By default, the files generated by the build process will not be removed.If you set the <EMCLASS="emphasis">RM</EM> variable before running the build, the entire builddirectory will be removed once the build finishes:&#13;</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>setenv RM true</B></CODE>   <ICLASS="lineannotation">csh</I>$ <CODECLASS="userinput"><B>RM=true ; export RM</B></CODE>   <ICLASS="lineannotation">sh</I></PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-63296"></A>For a list of the available packages, run the <EMCLASS="emphasis">build.pt</EM> script in the CD-ROM mount directory.The actual name of the script dependson your operating system (as described in article<ACLASS="xref"HREF="ch52_05.htm"TITLE="Using the Power Tools CD-ROM ">52.5</A>),but assuming that the CD-ROM is mounted on <EMCLASS="emphasis">/cdrom</EM>, it is likelyto be one of the following commands:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>/cdrom/BUILD.PT\;1</B></CODE>% <CODECLASS="userinput"><B>/cdrom/BUILD.PT</B></CODE>% <CODECLASS="userinput"><B>/cdrom/build.pt\;1</B></CODE>% <CODECLASS="userinput"><B>/cdrom/build.pt</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">The command will print a list similar to the following:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">bash         bsdtar       bsplit       calen        cpmod        cvtbasedelete       diff         ediff        emacs        fgrep        fileutilsfind         gawk         getopt       glimpse      grabchars    grep   ...</PRE></BLOCKQUOTE></P><PCLASS="para">To build one of these packages, run the same command followedby the package name.For example:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>/cdrom/build.pt bash</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">The build script will copy the package to the current directory,compile, and install the package according to the values of theenvironment variables.  For this example, the shareable andnon-shareable portions of the package are combined.</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% /archive/cdrom/BUILD.PT jotBUILD script provided by Ready-to-Run Software, Inc.Copyright 1997 Ready-to-Run Software, Inc. All Rights Reserved.Assuming CDROM   is mounted at /archive/cdromAssuming MACHINE is ALPHAAssuming SOURCEDIR is /archive/cdrom/SOURCESIgnore any errors about directories already existingtools/tools/BUGStools/Makefiletools/jot.ctools/lam.ctools/rs.ccc -O -o jot jot.c</PRE></BLOCKQUOTE></P><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="UPT-ART-3840-SECT-1.1.1">52.8.1.1 Missing Programs </A></H4><PCLASS="para">Some of the build scripts expect non-standard programs to be installed.Some of these come on the CD-ROM:</P><DLCLASS="variablelist"><DTCLASS="term"><EMCLASS="emphasis">patch</EM></DT><DDCLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-63326"></A>Several packages depend on the<SPANCLASS="link"><EMCLASS="emphasis">patch</EM> (<ACLASS="linkend"HREF="ch33_09.htm"TITLE="patch: Generalized Updating of Files that Differ ">33.9</A>)</SPAN>program to apply &quot;patches&quot; or &quot;diffs&quot; to sourcecode.This is the primary method of updating source code without replacingthe entire file.</P></DD><DTCLASS="term"><EMCLASS="emphasis">perl</EM></DT><DDCLASS="listitem"><PCLASS="para"><SPANCLASS="link">Perl (<ACLASS="linkend"HREF="ch37_01.htm#UPT-ART-5560"TITLE="What We Do and Don't Tell You About Perl ">37.1</A>)</SPAN><ACLASS="indexterm"NAME="AUTOID-63336"></A>is a scripting language used by several packages, including the installand build scripts.</P></DD><DTCLASS="term"><EMCLASS="emphasis">unshar</EM></DT><DDCLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-63343"></A>The <EMCLASS="emphasis">unshar</EM> program is needed to unpack<SPANCLASS="link">shell archive files (<ACLASS="linkend"HREF="ch19_03.htm"TITLE="unshar: Unarchive a Shell Archive ">19.3</A>)</SPAN>.</P></DD><DTCLASS="term"><EMCLASS="emphasis">uncompress</EM></DT><DDCLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-63352"></A>The <EMCLASS="emphasis">uncompress</EM> program is needed to unpack files thathave been compressed with the<SPANCLASS="link"><EMCLASS="emphasis">compress</EM> (<ACLASS="linkend"HREF="ch24_07.htm"TITLE="Compressing Files to Save Space ">24.7</A>)</SPAN>command.</P></DD></DL><PCLASS="para">Some other utilities are not included: </P><DLCLASS="variablelist"><DTCLASS="term"><EMCLASS="emphasis">gcc</EM></DT><DDCLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-63364"></A>The<SPANCLASS="link">GNU (<ACLASS="linkend"HREF="glossary.htm#UPT-ART-1010"TITLE="Glossary">52.9</A>)</SPAN>C compiler was used to compile most of the packages.You can tryyour system's default C compiler, but it may not work for every package.</P></DD><DTCLASS="term"><EMCLASS="emphasis">GNU make</EM></DT><DDCLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-63372"></A>GNU<SPANCLASS="link"><EMCLASS="emphasis">make</EM> (<ACLASS="linkend"HREF="ch28_13.htm"TITLE="make Isn't Just for Programmers! ">28.13</A>)</SPAN>was used to compile most of the packages.If you don't have it,try using your system's version.</P></DD></DL></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="UPT-ART-3840-SECT-1.1.2">52.8.1.2 Problems </A></H4><PCLASS="para">Any number of things can go wrong with your build.You might nothave the right libraries or include files installed.Your compiler may not work the way the program expects it to.You might not have the right permissions.You might run out of disk space.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-63380"></A><ACLASS="indexterm"NAME="AUTOID-63383"></A>These problems are so varied that there's no way we can listany generalized solutions.Try asking an administrator or programmeron your site, or try calling <SPANCLASS="link">Ready-to-Run Software's CD support line (<ACLASS="linkend"HREF="ch52_09.htm"TITLE="Software Support from RTR ">52.9</A>)</SPAN>.But we have a few tips that might help:&#13;</P><ULCLASS="itemizedlist"><LICLASS="listitem"><TABLECLASS="para.programreference"BORDER="1"><TR><THVALIGN="TOP"><ACLASS="programreference"HREF="examples/index.htm"TITLE="bsdtar">bsdtar</A><BR></TH><TDVALIGN="TOP">If your system has problems with filenames longer than 14 characters, youmay have to install <EMCLASS="emphasis">bsdtar</EM>to be able to &quot;untar&quot; the source code.<EMCLASS="emphasis">bsdtar</EM> creates unique 14-character filenames as it unpacks anarchive.&#13;</TD></TR></TABLE></LI><LICLASS="listitem"><PCLASS="para">If your system lacks the<SPANCLASS="link"><EMCLASS="emphasis">-p</EM> option (<ACLASS="linkend"HREF="ch04_08.htm"TITLE="Making Directories Made Easier ">4.8</A>)</SPAN>to the <EMCLASS="emphasis">mkdir</EM> command, youmay need to install a new version from the GNU <EMCLASS="emphasis">fileutils</EM> package.The <EMCLASS="emphasis">-p</EM> option is used by the installation and build scripts.</P></LI></UL><PCLASS="para">And if all else fails, you can try to delve into the source codeitself.That brings us to our next section ...</P></DIV></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="UPT-ART-3840-SECT-1.2">52.8.2 Compiling Source Code </A></H3><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-63404"></A>Compiling programs from source doesn't require you to be a C programmer, just that you understandthe general procedure and that you have some common sense and luck.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-63407"></A><ACLASS="indexterm"NAME="AUTOID-63410"></A>Almost all UNIX binary programs are written in the C language.These programs are written in text files&nbsp;- the text files are referredto as the <EMCLASS="emphasis">source code</EM>-and then converted tobinary files using a <EMCLASS="emphasis">compiler</EM>.The typical compiler on a UNIX system is called <EMCLASS="emphasis">cc</EM>.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-63416"></A>Although most people call <EMCLASS="emphasis">cc</EM> a &quot;compiler,&quot; it's reallya front-end program.Unless you tell it not to, <EMCLASS="emphasis">cc</EM> first runs a <EMCLASS="emphasis">preprocessor</EM>.Next it runs the compiler.Then it runs the <EMCLASS="emphasis">linker/loader</EM>to make the actual executable file.We'll gloss over that in this article and just say that &quot;<EMCLASS="emphasis">cc</EM> does it.&quot;</P><PCLASS="para">On top of <EMCLASS="emphasis">cc</EM>, there's usually another front-end: almost all programs are designed to be compiled using the <EMCLASS="emphasis">make</EM> program.</P><PCLASS="para">Although we can't prepare you for everything you might need toknow to compile programs from the CD-ROM for your platform, this section should at least give you an idea of how it's<EMCLASS="emphasis">supposed</EM> to work.</P><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="UPT-ART-3840-SECT-1.2.1">52.8.2.1 Copying the Sources </A></H4><PCLASS="para">Before you can actually compile the sources, youneed to copy the sources to your local hard disk.You can't just compile the sources directly from the CD-ROM becausethe CD-ROM is read-only.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-63432"></A>The first thing you need to do is to decide where you want toinstall the sources, and then <EMCLASS="emphasis">cd</EM> to that directory. Forexample, I like to build sources in a subdirectory of my home directory.Let's suppose I want to install the <EMCLASS="emphasis">pcal</EM> program.I create the new directory and then <EMCLASS="emphasis">cd</EM> there:</P><PCLASS="para"><TABLECLASS="screen.co"BORDER="1"><TR><THVALIGN="TOP"><PRECLASS="calloutlist"><ACLASS="co"HREF="ch14_11.htm"TITLE="14.11 Finding (Anyone's) Home Directory, Quickly ">~</A> &#13;</PRE></TH><TDVALIGN="TOP"><PRECLASS="screen">% <CODECLASS="userinput"><B>mkdir ~/pcal_src</B></CODE>% <CODECLASS="userinput"><B>cd ~/pcal_src</B></CODE></PRE></TD></TR></TABLE></P><PCLASS="para">&#13;For installing the sources onto your local hard disk, the CD-ROMhas a script called <EMCLASS="emphasis">source.pt</EM>.Assuming that the CD-ROM is mounted on <EMCLASS="emphasis">/cdrom</EM>, the scriptcan be called using one of the following commands:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>/cdrom/SOURCE.PT\;1 </B></CODE><CODECLASS="replaceable"><I>package-name</I></CODE>% <CODECLASS="userinput"><B>/cdrom/SOURCE.PT </B></CODE><CODECLASS="replaceable"><I>package-name</I></CODE>% <CODECLASS="userinput"><B>/cdrom/source.pt\;1 </B></CODE><CODECLASS="replaceable"><I>package-name</I></CODE>% <CODECLASS="userinput"><B>/cdrom/source.pt </B></CODE><CODECLASS="replaceable"><I>package-name</I></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Where <EMCLASS="emphasis">package-name</EM> is the name of the package that youwant to install sources for. To get a listing of the files,call <EMCLASS="emphasis">source.pt</EM> without any arguments:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% source.pt<ACLASS="indexterm"NAME="AUTOID-63460"></A>SOURCE script provided by Ready-to-Run Software, Inc.Copyright 1997 Ready-to-Run Software, Inc. All Rights Reserved.Assuming CDROM is mounted at /archive/cdrom/Usage: /archive/cdrom/SOURCE.PT &lt;packageAvailable packages are:     !              80cols         Clear          _emacs_ml      _enter_csh     _enter_sh      _exit_csh      _exit_sh       addup          age_files     ascii          awf            bash           behead         bkedit     bsdtar         bsplit         cal_today      calen          catsaway     center         cgrep          cgrep_sed      checksed       chmod_edit     chunksort      cleanup        cleanup_sed    cls            cols     count_it       count_types    cpmod          crontab        crush     csh_init       csh_logout     cvtbase        date-month     del     delete         diff           dir_path       dirtop         doublespace     ediff          elookfor       emacs          exrc           fgrep     fileutils      find           findcmd        findtext       flip     fmt_sh         formprog       ftpfile        gawk           getmac     getopt         glimpse        grabchars      grep           groff     gzip           head           hey            hgrep          index     ipl            ispell         jot            lensort        less     lf             lndir          logerrs        longlines      look     lookfor        ls_today       make_print     manindex       motd_diff     namesort       netpbm         nextday        no_run         nom     offset         oldlinks       opttest        paircheck      patch     pcal           perl5          phone          pipegrep       pstext     psutils        pushin         qcsh           qsubst         qterm     rcs            rcsegrep_fast  rcsgrep        rcsrevs        recomment     redo           relink         ren            rename         rot     runsed         runtime        sc             screen         screensize     script_tidy    search_el      sedman         sh_init        sh_logout     sharutils      shellutils     showmatch      sl             sls     smiley         squoze         stat           stree          stripper     su             tar            tcap           tcsh           termtest     textutils      tgrep          tknew          tm             tpipe     tputinit       triplespace    twin           vgrep          vis     vtree          watchq         whereiz        which          wordfreq     xgrep          xtail          zap            zloop          zmore     zvi</PRE></BLOCKQUOTE></P><PCLASS="para">(Note that all the packages on the CD-ROM are listed here,shell scripts as well as C sources.)</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-63464"></A>In my case, I want to install <EMCLASS="emphasis">pcal</EM>, so I run the following command:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>/cdrom/source.pt pcal</B></CODE>SOURCE script provided by Ready-to-Run Software, Inc.Copyright 1993 Ready-to-Run Software, Inc. All Rights Reserved.Copied /POWER_TOOLS/SOURCES/PCAL/PCAL_43.Z to pcal-4.3.tar.ZCopied /POWER_TOOLS/SOURCES/PCAL/RS6000/PCAL to RS6000patch.pcalCopied /POWER_TOOLS/SOURCES/PCAL/RTR/PCAL to rtrpatch.pcal3 files copied successfully.</PRE></BLOCKQUOTE></P><PCLASS="para">The <EMCLASS="emphasis">source.pt</EM> script copies all the relevant files into your current directory.</P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="UPT-ART-3840-SECT-1.2.2">52.8.2.2 Uncompressing the Sources </A></H4><PCLASS="para">If you now list the directory, you'll find the files that werejust copied there.  </P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>ls</B></CODE>RS6000patch.pcal        pcal-4.3.tar.Z          rtrpatch.pcal</PRE></BLOCKQUOTE></P><PCLASS="para">The file called <EMCLASS="emphasis">pcal-4.3.tar.Z</EM> is the <EMCLASS="emphasis">pcal</EM>source package, in a tarred and compressed form.The <EMCLASS="emphasis">.Z</EM>suffix tells you that the file was compressed using the <SPANCLASS="link"><EMCLASS="emphasis">compress</EM> (<ACLASS="linkend"HREF="ch24_07.htm"TITLE="Compressing Files to Save Space ">24.7</A>)</SPAN>command.You need to run <EMCLASS="emphasis">uncompress</EM> first:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>uncompress pcal-4.3.tar.Z</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-63490"></A>If you don't have the <EMCLASS="emphasis">uncompress</EM> command, use <EMCLASS="emphasis">gunzip</EM>.</P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="UPT-ART-3840-SECT-1.2.3">52.8.2.3 Untarring the Sources </A></H4><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-63497"></A>After you have uncompressed the file, you'll see the file withoutthe <EMCLASS="emphasis">.Z</EM> suffix. </P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>ls</B></CODE>RS6000patch.pcal        pcal-4.3.tar            rtrpatch.pcal</PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-63504"></A>The <EMCLASS="emphasis">.tar</EM> suffix to the <EMCLASS="emphasis">pcal-4.3.tar</EM> file meansthat the file was packed using the <SPANCLASS="link"><EMCLASS="emphasis">tar</EM> command (<ACLASS="linkend"HREF="ch19_05.htm"TITLE="Using tar to Create and Unpack Archives ">19.5</A>)</SPAN>.Again, if you don't have <EMCLASS="emphasis">tar</EM>, it's on the CD-ROM.</P><PCLASS="para">To unpack the file, use <EMCLASS="emphasis">tar</EM> with the <EMCLASS="emphasis">-x</EM> optionfor &quot;extract&quot; and the <EMCLASS="emphasis">-f</EM> option to specify a filename.(I also like to use <EMCLASS="emphasis">-v</EM> for verbose output.)My command linemight read:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>tar xvf pcal-4.3.tar</B></CODE>x pcal-4.3/ReadMe, 7673 bytes, 15 tape blocksx pcal-4.3/Descrip.mms, 3713 bytes, 8 tape blocksx pcal-4.3/Make_Pcal.com, 3090 bytes, 7 tape blocksx pcal-4.3/Makefile, 1159 bytes, 3 tape blocksx pcal-4.3/Makefile.Amiga, 1010 bytes, 2 tape blocksx pcal-4.3/Makefile.DOS, 1023 bytes, 2 tape blocksx pcal-4.3/Makefile.VMS, 2505 bytes, 5 tape blocksx pcal-4.3/Orig.ReadMe, 984 bytes, 2 tape blocksx pcal-4.3/Pcal.TEX, 28199 bytes, 56 tape blocksx pcal-4.3/Pcal.hlp, 29099 bytes, 57 tape blocksx pcal-4.3/SetUp.com, 670 bytes, 2 tape blocksx pcal-4.3/VaxCrtl.opt, 31 bytes, 1 tape blocksx pcal-4.3/calendar, 12101 bytes, 24 tape blocksx pcal-4.3/exprpars.c, 8538 bytes, 17 tape blocksx pcal-4.3/moon91, 2828 bytes, 6 tape blocksx pcal-4.3/moon92, 2887 bytes, 6 tape blocksx pcal-4.3/pcal.c, 46440 bytes, 91 tape blocksx pcal-4.3/noprotos.h, 2530 bytes, 5 tape blocksx pcal-4.3/pcalglob.h, 4551 bytes, 9 tape blocksx pcal-4.3/pcalinit.c, 4071 bytes, 8 tape blocksx pcal-4.3/protos.h, 4341 bytes, 9 tape blocksx pcal-4.3/moonphas.c, 17817 bytes, 35 tape blocksx pcal-4.3/troffman.sty, 4894 bytes, 10 tape blocksx pcal-4.3/writefil.c, 24597 bytes, 49 tape blocksx pcal-4.3/pcal.man, 25296 bytes, 50 tape blocksx pcal-4.3/pcaldefs.h, 17643 bytes, 35 tape blocksx pcal-4.3/pcalinit.ps, 14297 bytes, 28 tape blocksx pcal-4.3/pcalutil.c, 21238 bytes, 42 tape blocksx pcal-4.3/pcallang.h, 35465 bytes, 70 tape blocksx pcal-4.3/readfile.c, 32888 bytes, 65 tape blocks</PRE></BLOCKQUOTE></P><PCLASS="para"><EMCLASS="emphasis">tar</EM> creates a subdirectory called <EMCLASS="emphasis">pcal-4.3</EM>.<EMCLASS="emphasis">cd</EM>to this directory to continue your build.</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>cd pcal-4.3</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Note that if you have the <EMCLASS="emphasis">zcat</EM> command, you might have combined the steps for uncompressing anduntarring the files into a single command line, as shownin article<ACLASS="xref"HREF="ch19_07.htm"TITLE="Extracting Files from a Compressed Archive ">19.7</A>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>zcat pcal-4.3.tar.Z | tar xvf -</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">If you are on a System V-based system, you may have to use <EMCLASS="emphasis">tar</EM>with the<SPANCLASS="link"><EMCLASS="emphasis">-o</EM> option (<ACLASS="linkend"HREF="ch19_07.htm"TITLE="Extracting Files from a Compressed Archive ">19.7</A>)</SPAN>to make sure that you get ownership of the files.</P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="UPT-ART-3840-SECT-1.2.4">52.8.2.4 Unsharring the Sources </A></H4><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-63539"></A><ACLASS="indexterm"NAME="AUTOID-63541"></A><ACLASS="indexterm"NAME="AUTOID-63543"></A>Before we go on, let's back up a bit.Some packages aren'tstored as <EMCLASS="emphasis">tar</EM> archives, but as <SPANCLASS="link"><EMCLASS="emphasis">shar</EM> archives (<ACLASS="linkend"HREF="ch19_02.htm"TITLE="Introduction to Shell Archives ">19.2</A>)</SPAN>.<EMCLASS="emphasis">shar</EM> archives are generally distributed in multiplefiles, under names such as <EMCLASS="emphasis">part01.Z</EM>, <EMCLASS="emphasis">part02.Z</EM>, etc.The <EMCLASS="emphasis">qterm</EM> source package is an example of a packagethat is distributed as <EMCLASS="emphasis">shar</EM> files.     </P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>mkdir ~/qterm_src</B></CODE>% <CODECLASS="userinput"><B>cd ~/qterm_src</B></CODE>% <CODECLASS="userinput"><B>/cdrom/source.pt qterm</B></CODE>% /archive/cdrom/SOURCE.PT qtermSOURCE script provided by Ready-to-Run Software, Inc.Copyright 1997 Ready-to-Run Software, Inc. All Rights Reserved.Assuming CDROM is mounted at /archive/cdrom/Copied /archive/cdrom//SOURCES/QTERM/PART01.Z to part01.ZCopied /archive/cdrom//SOURCES/QTERM/PART02.Z to part02.ZCopied /archive/cdrom//SOURCES/QTERM/RS6000/QTERM to RS6000patch.qtermCopied /archive/cdrom//SOURCES/QTERM/I386/QTERM to i386patch.qtermCopied /archive/cdrom//SOURCES/QTERM/SUN4C/QTERM to sun4cpatch.qtermCopied /archive/cdrom//SOURCES/QTERM/HP700/QTERM to hp700patch.qtermCopied /archive/cdrom//SOURCES/QTERM/LINUX/QTERM to linuxpatch.qtermCopied /archive/cdrom//SOURCES/QTERM/SSOL2/QTERM to SSol2patch.qtermCopied /archive/cdrom//SOURCES/QTERM/RTR/QTERM to rtrpatch.qterm9 file(s) copied successfully.</PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-63559"></A>To extract the <EMCLASS="emphasis">qterm</EM> sources, uncompress the &quot;part&quot; filesand then use the <EMCLASS="emphasis">unshar</EM> program to unpack them.  </P><PCLASS="para"><TABLECLASS="screen.co"BORDER="1"><TR><THVALIGN="TOP"><PRECLASS="calloutlist"><ACLASS="co"HREF="ch01_16.htm"TITLE="1.16 Wildcards ">?</A> &#13;</PRE></TH><TDVALIGN="TOP"><PRECLASS="screen">% <CODECLASS="userinput"><B>uncompress part0?.Z</B></CODE>% <CODECLASS="userinput"><B>unshar part0?</B></CODE>unshar:  Sending header to part01.hdr.unshar:  Doing part01:If this archive is complete, you will see the following message:          &quot;shar: End of archive 1 (of 2).&quot;shar: Extracting &quot;README&quot; (2200 characters)shar: Extracting &quot;options.3&quot; (7383 characters)shar: Extracting &quot;options.c&quot; (10901 characters)shar: Extracting &quot;options.h&quot; (2592 characters)shar: Extracting &quot;qterm.c&quot; (24777 characters)shar: End of archive 1 (of 2).You still must unpack the following archives:         2unshar:  Sending header to part02.hdr.unshar:  Doing part02:If this archive is complete, you will see the following message:          &quot;shar: End of archive 2 (of 2).&quot;shar: Extracting &quot;Makefile&quot; (1908 characters)shar: Extracting &quot;qterm.1&quot; (5805 characters)shar: Extracting &quot;qterm.h&quot; (3281 characters)shar: Extracting &quot;qtermtab&quot; (3311 characters)shar: End of archive 2 (of 2).You have unpacked both archives.</PRE></TD></TR></TABLE></P><PCLASS="para">If youdon't have <EMCLASS="emphasis">shar</EM> and <EMCLASS="emphasis">unshar</EM>, it's on the CD-ROM; butthe true beauty of <EMCLASS="emphasis">shar</EM> archives is that you can always remove any headers and footers from the file and usethe Bourne shell (<EMCLASS="emphasis">sh</EM>) to unpack the files.  </P><PCLASS="para">To edit out the header, remove any lines at the top of thefile that don't resemble Bourne shell syntax.Since many <EMCLASS="emphasis">shar</EM>archives are distributed in email or in newsgroups, the filesmight include the header of a mail message or news posting.The author might also precede the actual <EMCLASS="emphasis">shar</EM> archive with some explanation of what the program does.A good bet is to look for a linereading <CODECLASS="literal">#!/bin/sh</CODE> and remove all lines preceding it.Even better, most shell archives contain directions right in the file:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"><ICLASS="lineannotation">(text .... )</I>#! /bin/sh# This is a shell archive.  Remove anything before this line,# then feed it into a shell via &quot;sh file&quot; or similar.# To overwrite existing files, type &quot;sh file -c&quot;.</PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-63581"></A>To remove the footer, look for anything resembling a user's mailsignature.  (<EMCLASS="emphasis">shar</EM> archives usually have an <EMCLASS="emphasis">exit</EM> messageat the end, so editing out the footer isn't always needed ... but it doesn't hurt.)</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-63586"></A>After editing out the header and footer, just run the files through<EMCLASS="emphasis">sh</EM> individually:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>vi part0?</B></CODE>   <ICLASS="lineannotation">edit out headers</I>% <CODECLASS="userinput"><B>sh part01; sh part02</B></CODE>   ...</PRE></BLOCKQUOTE></P><PCLASS="para">&#13;Note that it's especially important to install and unpack <EMCLASS="emphasis">shar</EM> archives in discrete, well-named directories (such as <EMCLASS="emphasis">qterm_src</EM>, in this case).Since <EMCLASS="emphasis">shar</EM> files are almost always given generic names of<EMCLASS="emphasis">part01</EM>, <EMCLASS="emphasis">part02</EM>, etc.,it's easy to overwrite files or to get confused if youaccidentally unpack more than one package in the same directory.&#13;</P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="UPT-ART-3840-SECT-1.2.5">52.8.2.5 Applying Patches </A></H4><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-63603"></A>When I copied the <EMCLASS="emphasis">pcal</EM> sources using the <EMCLASS="emphasis">source.pt</EM>shell script, I also got two<SPANCLASS="link"><EMCLASS="emphasis">patch</EM> files (<ACLASS="linkend"HREF="ch33_09.htm"TITLE="patch: Generalized Updating of Files that Differ ">33.9</A>)</SPAN>:<EMCLASS="emphasis">rtrpatch.pcal</EM> and <EMCLASS="emphasis">RS6000patch.pcal</EM>.These are patches prepared by Ready-to-Run Software for compiling the <EMCLASS="emphasis">pcal</EM> package. </P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-63614"></A>The <EMCLASS="emphasis">RS6000patch.pcal</EM> file is a patch for compilng on IBM'sRS6000 platform.  If you aren't on a RS6000, then you probably don'tneed this file.  When building other packages, you might see otherplatform-specific patch files, with prefixes like <EMCLASS="emphasis">i386</EM>,<EMCLASS="emphasis">xenix</EM>, <EMCLASS="emphasis">hp700</EM>, <EMCLASS="emphasis">sun3</EM>, <EMCLASS="emphasis">sun4</EM>, etc.  Naturally, youshouldn't use these packages if you aren't on one of these platforms.</P><PCLASS="para">The <EMCLASS="emphasis">rtrpatch.pcal</EM> file isa general-purpose patch for all platforms.You should apply this patch for all platforms.</P><PCLASS="para">Before you apply any of Ready-to-Run's patches, you should firstmake sure that there aren't any patch files in the untarred sourcedirectory.If the sources did come with patch files, they wouldhave to be applied before Ready-to-Run's.In the <EMCLASS="emphasis">pcal-4.3</EM> directory, list the directory contents:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>ls -aF</B></CODE>./              Makefile.VMS    calendar        pcal.man        protos.h../             Orig.ReadMe     exprpars.c      pcaldefs.h      readfile.cDescrip.mms     Pcal.TEX        moon91          pcalglob.h      troffman.styMake_Pcal.com   Pcal.hlp        moon92          pcalinit.c      writefil.cMakefile        ReadMe          moonphas.c      pcalinit.psMakefile.Amiga  SetUp.com       noprotos.h      pcallang.hMakefile.DOS    VaxCrtl.opt     pcal.c          pcalutil.c</PRE></BLOCKQUOTE></P><PCLASS="para">A <EMCLASS="emphasis">patch</EM> file generally has the string <EMCLASS="emphasis">patch</EM> or <EMCLASS="emphasis">pch</EM>in it.  There are no patch files in this directory. Now that I'm surethat there aren't any other patches, I run the <EMCLASS="emphasis">patch</EM>command. (Naturally, if you don't already have <EMCLASS="emphasis">patch</EM>, you canget its sources off the CD-ROM.)  To run <EMCLASS="emphasis">patch</EM>, makesure you're in the source directory (in this case, the <EMCLASS="emphasis">pcal-4.3</EM>subdirectory created when I ran <EMCLASS="emphasis">tar</EM>).  Then run <EMCLASS="emphasis">patch</EM>,taking input from the patch file in the parent directory:</P><PCLASS="para"><TABLECLASS="screen.co"BORDER="1"><TR><THVALIGN="TOP"><PRECLASS="calloutlist"><ACLASS="co"HREF="ch13_01.htm"TITLE="13.1 Using Standard Input and Output">&lt;</A> <ACLASS="co"HREF="ch01_21.htm"TITLE="1.21 Making Pathnames ">../</A> &#13;</PRE></TH><TDVALIGN="TOP"><PRECLASS="screen">% <CODECLASS="userinput"><B>patch &lt; ../rtrpatch.pcal</B></CODE>Hmm...  Looks like a new-style context diff to me...The text leading up to this was:--------------------------------|*** Makefile.orig      Tue Dec 17 05:34:19 1991|-- Makefile   Mon Nov 23 05:59:49 1992--------------------------------Patching file Makefile using Plan A...Hunk #1 succeeded at 5.Hunk #2 succeeded at 46.done</PRE></TD></TR></TABLE></P><PCLASS="para">&#13;The patch is now applied.&#13;</P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="UPT-ART-3840-SECT-1.2.6">52.8.2.6 An Easy Build </A></H4><PCLASS="para">Up to now, all we've been doing is just getting the source treetogether. Now we're up to the part where we actually buildthe package. </P><PCLASS="para">First of all, if there's any universal rule about compilingsources, it's:<ACLASS="indexterm"NAME="AUTOID-63649"></A><BLOCKQUOTECLASS="blockquote"><PCLASS="para"><BCLASS="emphasis.bold">If there's a file called README, read it!</B></P></BLOCKQUOTE></P><PCLASS="para"><EMCLASS="emphasis">README</EM> files often contain esoteric details about the historyof the program and what improvements could be made, etc.But theymight also contain details about how to build the package.Reading a<EMCLASS="emphasis">README</EM> can save you hours of frustration trying to figure out what to tweak to make the program build on your platform.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-63658"></A>Another file to look for is one called <EMCLASS="emphasis">Configure</EM>.<EMCLASS="emphasis">Configure</EM> is a shell script that tries to figureout what sort of platform you're on and how to build thepackage for you, and it's remarkably effective.The sourcesfor <EMCLASS="emphasis">perl</EM> and <EMCLASS="emphasis">patch</EM> both come with <EMCLASS="emphasis">Configure</EM> scripts.</P><PCLASS="para"><EMCLASS="emphasis">pcal</EM> doesn't come with a <EMCLASS="emphasis">README</EM> or with a <EMCLASS="emphasis">Configure</EM>script.But it doescome with a file called <EMCLASS="emphasis">Makefile</EM>.(Actually, it comes with several <EMCLASS="emphasis">Makefiles</EM>, for differentplatforms&nbsp;- but the default <EMCLASS="emphasis">Makefile</EM> is the one for UNIXsystems, which is what you want.)The <EMCLASS="emphasis">Makefile</EM> is used by <SPANCLASS="link">the <EMCLASS="emphasis">make</EM> program (<ACLASS="linkend"HREF="ch28_13.htm"TITLE="make Isn't Just for Programmers! ">28.13</A>)</SPAN>.There have been entire books written about <EMCLASS="emphasis">make</EM>, but ifyou're lucky, all you need to know about it is that if you seea <EMCLASS="emphasis">Makefile</EM>, then all you need to compile a program is totype <EMCLASS="emphasis">make</EM>.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-63679"></A>First, though, scan through the <EMCLASS="emphasis">Makefile</EM> to see if thereare any comments there.You might have to make some changesin the <EMCLASS="emphasis">Makefile</EM> to configure it for your system.Forexample, the <EMCLASS="emphasis">qterm</EM> <EMCLASS="emphasis">Makefile</EM> has the following very helpful lines:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">## Add &quot;-DUSG5&quot; to DEFS below, if your system is UNIX System V.# Add &quot;-DHAS_VARARGS&quot; if your system supports varargs.# Add &quot;-DOPT_COMPAT&quot; to support old command line options.#DEFS    = -DTABFILE=\&quot;$(TABFILE)\&quot; -DOPT_COMPAT</PRE></BLOCKQUOTE></P><PCLASS="para">You probably know whether your system is System V-based or not.If you never used this program before, you probably don't care aboutold command line options.And if you don't know what <EMCLASS="emphasis">varargs</EM>are or whether your system supports it ... try seeing if there'sa<SPANCLASS="link">manpage (<ACLASS="linkend"HREF="ch50_01.htm#UPT-ART-4910"TITLE="UNIX Online Documentation ">50.1</A>)</SPAN>for it.(You might even find out what it is!)</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>man varargs</B></CODE>VARARGS(3)             C LIBRARY FUNCTIONS             VARARGS(3)NAME     varargs - handle variable argument listSYNOPSIS     #include &lt;varargs.h&gt;   ...</PRE></BLOCKQUOTE></P><PCLASS="para">What do you know, I have <EMCLASS="emphasis">varargs</EM>.So I add the <CODECLASS="literal">-DHAS_VARARGS</CODE>command-line option to the <CODECLASS="literal">DEFS=</CODE> line:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">DEFS    = -DTABFILE=\&quot;$(TABFILE)\&quot; -DOPT_COMPAT -DHAS_VARARGS</PRE></BLOCKQUOTE></P><PCLASS="para">The <EMCLASS="emphasis">pcal</EM> <EMCLASS="emphasis">Makefile</EM>, on the other hand, only includes asingle line of instruction towards the top: </P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"># Set the configuration variables below to taste.</PRE></BLOCKQUOTE></P><PCLASS="para">This isn't particularly helpful, but scan the <EMCLASS="emphasis">Makefile</EM>anyway for anything obviously wrong.When you're satisfied, just cross your fingers and run <EMCLASS="emphasis">make</EM>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>make</B></CODE>/bin/cc   -c pcal.c/bin/cc   -c exprpars.c/bin/cc   -c moonphas.c/bin/cc   -c pcalutil.c/bin/cc   -c readfile.c/bin/cc    -o pcalinit pcalinit.cpcalinit pcalinit.ps pcalinit.h/bin/cc   -c writefil.c/bin/cc  -o pcal pcal.o exprpars.o moonphas.o pcalutil.o readfile.owritefil.o -lm</PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-63711"></A>There were no error or warning messages, so you're fine.Errors mean that the program package probably didn't build completely;you'll have to find the cause and fix them.If there were warnings, the programs may not work right or havea subtle flaw.For a program like a spreadsheet, where hidden flawscan be a disaster, you'd better find out what the warnings mean andfix them.Otherwise, just cross your fingers some more and see if the program works.</P><PCLASS="para">When you list the <EMCLASS="emphasis">pcal</EM> source directory now, you shouldsee several new files with a <EMCLASS="emphasis">.o</EM> suffix, but the mostimportant thing is that the <EMCLASS="emphasis">pcal</EM> executable is now builtand ready to be installed on your system.</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>ls -aF</B></CODE>./              Orig.ReadMe     moon91          pcaldefs.h      protos.h../             Pcal.TEX        moon92          pcalglob.h      readfile.cDescrip.mms     Pcal.hlp        moonphas.c      pcalinit*       readfile.oMake_Pcal.com   ReadMe          moonphas.o      pcalinit.c      troffman.styMakefile        SetUp.com       noprotos.h      pcalinit.h      writefil.cMakefile.Amiga  VaxCrtl.opt     pcal*           pcalinit.ps     writefil.oMakefile.DOS    calendar        pcal.c          pcallang.hMakefile.VMS    exprpars.c      pcal.man        pcalutil.cMakefile.orig   exprpars.o      pcal.o          pcalutil.o</PRE></BLOCKQUOTE></P><PCLASS="para">You can now try out the program, and once you're sure it works, install it.To install the program, many <EMCLASS="emphasis">Makefiles</EM> providean <EMCLASS="emphasis">install</EM> target.  </P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>make install</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-63728"></A>On many machines, you'll need to be logged in as<EMCLASS="emphasis">root</EM> to be able to install the binary and manpage system-wide.If so, it might be a good idea to run <EMCLASS="emphasis">make</EM> with the <EMCLASS="emphasis">-n</EM>option first.The <EMCLASS="emphasis">-n</EM> option says to just show what commandswould be executed without actually executing them.</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>make -n install</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Or if you prefer to just install the program by hand, just move the executable and the manpage to the rightdirectories (be sure to rename the manpage as appropriate):</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>mv pcal /usr/local/bin</B></CODE>% <CODECLASS="userinput"><B>mv pcal.man /usr/local/man/man1/pcal.1</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Note, however, that some programs may have extra steps in installingthe executable.If all this worked as advertised, you can bail out now.Otherwise,you might need to know more about what goes on behind the scenesbefore you can figure out what went wrong.</P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="UPT-ART-3840-SECT-1.2.7">52.8.2.7 Functions, Libraries, and Header Files </A></H4><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-63747"></A>To understand the compilation process, it helps to understand a little about libraries and header files.  </P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-63750"></A>C programs are written almost entirely using <EMCLASS="emphasis">functions</EM>.Article<ACLASS="xref"HREF="ch15_03.htm"TITLE="Adding { } Operators to Korn (and Bourne) Shells ">15.3</A>shows an example of a function defined in the Bourne shell programming language.C language functions are basically the same idea:group together a series of commands, give them a name, and then you can execute those commands using that name whenever you want andas many times as you want.Functions are also sometimes referred toas <EMCLASS="emphasis">subroutines</EM>, <EMCLASS="emphasis">library functions</EM>, or just <EMCLASS="emphasis">routines</EM>. </P><PCLASS="para">Now, you can define C functions in the same source file.But the operating system also provides a vast collection of function definitions&nbsp;- which is very nice, because otherwiseyou'd be building every program from scratch.The functiondefinitions are kept in <EMCLASS="emphasis">libraries</EM>, which are generally installed on your system in <EMCLASS="emphasis">/usr/lib/</EM> with a <EMCLASS="emphasis">lib</EM> prefixand a <EMCLASS="emphasis">.a</EM> suffix (for example, <EMCLASS="emphasis">/usr/lib/libc.a</EM>).</P><PCLASS="para">Functions also have to be <EMCLASS="emphasis">declared</EM> in theprogram.Function declarations are kept in <EMCLASS="emphasis">header</EM> or<EMCLASS="emphasis">include</EM> files, which are generally installed on your system in<EMCLASS="emphasis">/usr/include/</EM> with <EMCLASS="emphasis">.h</EM> suffixes (for example,<EMCLASS="emphasis">/usr/include/stdio.h</EM>).</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-63772"></A>If you use functions that are defined in libraries (and you mostdefinitely will), you need to make sure that when the program iscompiled, it is <EMCLASS="emphasis">linked</EM> to the libraries it needs.You also haveto make sure that the proper header files are read by your program,since the program won't compile unless all functions have beendeclared.  </P><PCLASS="para">For example, if you need to take the square root of a number in yourprogram, you need to use the <EMCLASS="emphasis">sqrt()</EM> function.This functionresides in the Math library.This means thatyou need to link the program with <EMCLASS="emphasis">libm.a</EM> and you need to read inthe <EMCLASS="emphasis">math.h</EM> header file (which declares <EMCLASS="emphasis">sqrt()</EM>).Soin the program, you need to have the following line near the top of thesource file:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">#include &lt;math.h&gt;</PRE></BLOCKQUOTE></P><PCLASS="para">and when you compile the program, you need to use the <EMCLASS="emphasis">-l</EM>(lowercase L) command-line option to link with <EMCLASS="emphasis">libm</EM>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>cc -o </B></CODE><CODECLASS="replaceable"><I>file file</I></CODE><CODECLASS="userinput"><B>.c -lm</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">&#13;Note the following facts:</P><ULCLASS="itemizedlist"><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-63795"></A>Unless you name the executable file with <CODECLASS="literal">-o&nbsp;</CODE><CODECLASS="replaceable"><I>file</I></CODE>,<EMCLASS="emphasis">cc</EM> will name it <EMCLASS="emphasis">a.out</EM>.</P></LI><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-63803"></A>The source filename must end with a <EMCLASS="emphasis">.c</EM> suffix.</P></LI><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-63808"></A><ACLASS="indexterm"NAME="AUTOID-63811"></A>Since <EMCLASS="emphasis">math.h</EM> lives in <EMCLASS="emphasis">/usr/include</EM>, you don't need to giveits absolute pathname on the <CODECLASS="literal">#include</CODE> line, just put the nameof the header file between angle brackets as shown.<SPANCLASS="link">Relative pathnames (<ACLASS="linkend"HREF="ch14_02.htm"TITLE="Using Relative and Absolute Pathnames ">14.2</A>)</SPAN>starting at <EMCLASS="emphasis">/usr/include</EM> can be used in angle brackets.For instance, <CODECLASS="literal">&lt;sys/foo.h&gt;</CODE> means <EMCLASS="emphasis">/usr/include/sys/foo.h</EM>.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-63822"></A><ACLASS="indexterm"NAME="AUTOID-63824"></A>By default,<EMCLASS="emphasis">cc</EM> looks for header files in <EMCLASS="emphasis">/usr/include</EM>, and you canhave it look automatically in other directories by specifyingthem with the <EMCLASS="emphasis">-I</EM> command-line option.If you want to use a header file in directory that isn'tsearched by default, supply itsabsolute or relative pathname in double quotes instead.</P></LI><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-63832"></A>When linking with a library on the command line, you should putthe <EMCLASS="emphasis">-l</EM> options at the end. If you use more than one library, you'll need more than one<EMCLASS="emphasis">-l</EM> option.The order of the <EMCLASS="emphasis">-l</EM> options is important; check thedocumentation or look for a comment in the source code.</P></LI><LICLASS="listitem"><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-63840"></A>The compiler found <EMCLASS="emphasis">libm.a</EM> because it was in <EMCLASS="emphasis">/usr/lib</EM>,which it searches by default.If you want it to use a libraryin another directory, you may need to supply the directory using the <EMCLASS="emphasis">-L</EM>command-line option.</P></LI></UL><PCLASS="para">As you can imagine, there's much more to know.But that's thegeneral idea of compiling C programs on UNIX systems, and it'sabout as much as we can tell you without starting to teach you C.</P></DIV><DIVCLASS="sect3"><H4CLASS="sect3"><ACLASS="title"NAME="UPT-ART-3840-SECT-1.2.8">52.8.2.8 The make Program </A></H4><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-63850"></A>When you're writing a simple C program, you can simply compile theprogram using <EMCLASS="emphasis">cc</EM>:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>cc test.c</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">But more complicated programs (like many of the programs on the CD-ROM) require a bit more work.More complicatedprograms are easier to handle if you write them in <EMCLASS="emphasis">modules</EM>.So, for example, the <EMCLASS="emphasis">pcal</EM> source tree on the CD-ROMcontains several <EMCLASS="emphasis">.c</EM> files: <EMCLASS="emphasis">exprpars.c</EM>, <EMCLASS="emphasis">moonphas.c</EM>, <EMCLASS="emphasis">pcalinit.c</EM>, <EMCLASS="emphasis">pcalutil.c</EM>, <EMCLASS="emphasis">readfile.c</EM>,<EMCLASS="emphasis">writefil.c</EM>, and, of course, <EMCLASS="emphasis">pcal.c</EM>.Each of thesesource files needs to be compiled separately into <EMCLASS="emphasis">object files</EM>(with <EMCLASS="emphasis">.o</EM> suffixes).If you give the <EMCLASS="emphasis">-c</EM> option, <EMCLASS="emphasis">cc</EM> will compile&quot;<EMCLASS="emphasis">.c</EM> files&quot; into &quot;<EMCLASS="emphasis">.o</EM> files&quot; and stop without making thefinished executable.When you run <EMCLASS="emphasis">cc</EM> again&nbsp;- but give it the <EMCLASS="emphasis">.o</EM> filenames(<EMCLASS="emphasis">exprpars.o</EM>, <EMCLASS="emphasis">moonphas.o</EM>, and so on)it will link all those object files with the libraries and make theexecutable file.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-63879"></A>This makes compilation a bit harder to keep track of.There are a lotmore steps.Furthermore, it means that whenever a file is changed, you have to remember not only to recompile it but also to relinkthe entire program.  </P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-63882"></A><ACLASS="indexterm"NAME="AUTOID-63884"></A>This is a job for the <EMCLASS="emphasis">make</EM> program.We showed uses for <EMCLASS="emphasis">make</EM>in articles <ACLASS="xref"HREF="ch21_09.htm"TITLE="Keep File Printouts Up-to-Date Automatically with make">21.9</A>and <ACLASS="xref"HREF="ch28_13.htm"TITLE="make Isn't Just for Programmers! ">28.13</A>,but this is what it was really meant for.The <EMCLASS="emphasis">pcal</EM> source tree comes with a file called <EMCLASS="emphasis">Makefile</EM>.(Actually, it comes with several different <EMCLASS="emphasis">Makefile</EM>s fordifferent platforms, but that's another issue.)The <EMCLASS="emphasis">Makefile</EM>keeps track of each of the programs and each of their dependencies.It also keeps track of any command-line options you might want passedto <EMCLASS="emphasis">cc</EM>, including libraries to link to.The result is that when you want to make the <EMCLASS="emphasis">pcal</EM> program,all you need to do is type:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>make pcal</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">Or, even better, just:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">% <CODECLASS="userinput"><B>make</B></CODE></PRE></BLOCKQUOTE></P><PCLASS="para">This is a lot easier than trying to keep track of all the modules andcommand-line options yourself.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-63906"></A>So if you can't compile a program because the header file it needs isinstalled in a non-standard place, you'd specify that in the<EMCLASS="emphasis">Makefile</EM>.You could add the appropriate <EMCLASS="emphasis">-I</EM>option to the <CODECLASS="literal">COPTS</CODE> declaration line:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">COPTS    = -I/usr/include/sys</PRE></BLOCKQUOTE></P><PCLASS="para">Or if you want to use a different compiler than <EMCLASS="emphasis">cc</EM>, you couldredefine that variable:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">CC       = /usr/local/bin/gcc</PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-63919"></A><ACLASS="indexterm"NAME="AUTOID-63921"></A><ACLASS="indexterm"NAME="AUTOID-63922"></A>Again, this is only the tip of the iceberg.But a basic understandingof libraries, header files, and<EMCLASS="emphasis">make</EM> has helped me build many programs that wouldn't compilethe first time.For help with <EMCLASS="emphasis">make</EM>, see O'Reilly &amp; Associates' <EMCLASS="emphasis">Managing Projectswith make</EM> by Andrew Oram and Steve Talbott.</P></DIV></DIV><DIVCLASS="sect1info"><PCLASS="SECT1INFO">- <SPANCLASS="authorinitials">LM</SPAN>, <SPANCLASS="authorinitials">EP</SPAN></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch52_07.htm"TITLE="52.7 Other Ways to Get the Software "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 52.7 Other Ways to Get the Software "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="UNIX Power Tools"><IMGSRC="../gifs/txthome.gif"ALT="UNIX Power Tools"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch52_09.htm"TITLE="52.9 Software Support from RTR "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: 52.9 Software Support from RTR "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">52.7 Other Ways to Get the Software </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_0.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">52.9 Software Support from RTR </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="../vi/index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>