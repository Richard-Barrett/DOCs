<HTML><HEAD><TITLE>[Chapter 7] 7.5 Editing Program Source Code </TITLE><METANAME="DC.title"CONTENT="Learning the vi Editor"><METANAME="DC.creator"CONTENT="Linda Lamb"><METANAME="DC.publisher"CONTENT="O'Reilly &amp; Associates, Inc."><METANAME="DC.date"CONTENT="1998-08-03T20:54:17Z"><METANAME="DC.type"CONTENT="Text.Monograph"><METANAME="DC.format"CONTENT="text/html"SCHEME="MIME"><METANAME="DC.source"CONTENT="0-937175-67-6"SCHEME="ISBN"><METANAME="DC.language"CONTENT="en-US"><METANAME="generator"CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINKREV="made"HREF="mailto:online-books@oreilly.com"TITLE="Online Books Comments"><LINKREL="up"HREF="ch07_01.htm"TITLE="7. Advanced Editing "><LINKREL="prev"HREF="ch07_04.htm"TITLE="7.4 Using ex Scripts "><LINKREL="next"HREF="appa_01.htm"TITLE="A. Quick Reference "></HEAD><BODYBGCOLOR="#FFFFFF"TEXT="#000000"><DIVCLASS="htmlnav"><H1><IMGSRC="gifs/smbanner.gif"ALT="Learning the vi Editor"USEMAP="#srchmap"BORDER="0"></H1><MAPNAME="srchmap"><AREASHAPE="RECT"COORDS="0,0,466,65"HREF="index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="467,0,514,18"HREF="../search/vsrch.htm"ALT="Search this book"></MAP><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch07_04.htm"TITLE="7.4 Using ex Scripts "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 7.4 Using ex Scripts "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><B><FONTFACE="ARIEL,HELVETICA,HELV,SANSERIF"SIZE="-1">Chapter 7<BR>Advanced Editing </FONT></B></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="APPENDIX"HREF="appa_01.htm"TITLE="A. Quick Reference "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: A. Quick Reference "BORDER="0"></A></TD></TR></TABLE>&nbsp;<HRALIGN="LEFT"WIDTH="515"TITLE="footer"></DIV><DIVCLASS="SECT1"><H2CLASS="sect1"><ACLASS="title"NAME="VI6-CH-7-SECT-5">7.5 Editing Program Source Code </A></H2><PCLASS="para">All of the features discussed so far in this book are of interestwhether you are editing English text or program source code.  However,there are a number of additional features that are of interest chieflyto programmers.  These include indentation control, searching for thebeginning and end of procedures, and using <CODECLASS="literal">ctags</CODE>.</P><PCLASS="para">The following discussion is adapted from documentation provided byMortice Kern Systems with their excellent implementation of <EMCLASS="emphasis">vi</EM>for DOS-based systems, available as a part of the MKS Toolkit orseparately as MKS Vi.  It isreprinted by permission of Mortice Kern Systems.</P><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="VI6-CH-7-SECT-5.1">7.5.1 Indentation Control </A></H3><PCLASS="para"><ACLASS="indexterm"NAME="VI6-CH-7-IX-INDENT-AUTO-INSERT"></A>The source code for a program differs from ordinary text ina number of ways.  One of the most important of these is the wayin which source code uses indentation.  Indentation shows thelogical structure of the program:  the way in which statements aregrouped into blocks.</P><PCLASS="para"><EMCLASS="emphasis">vi</EM> provides automatic indentation control.  To use it,issue the command:<ACLASS="indexterm"NAME="AUTOID-8063"></A><ACLASS="indexterm"NAME="AUTOID-8066"></A></P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">:set autoindent</PRE></BLOCKQUOTE></P><PCLASS="para">Now, when you indent a line with spaces or tabs, thefollowing lines will automatically be indented by the sameamount.  When you press <KBDCLASS="keycap">[RETURN]</KBD>after typing the first indentedline, the cursor goes to the next line and automaticallyindents the same distance as the previous line.</P><PCLASS="para">As a programmer, you will find this saves you quite a bit of workgetting the indentation right, especially when you have severallevels of indentation.</P><PCLASS="para">When you are entering code with autoindent enabled, typing<KBDCLASS="keycap">[CTRL-T]</KBD>at the start of a line gives you another level of indentation and typing <KBDCLASS="keycap">[CTRL-D]</KBD>takes one away. </P><PCLASS="para">We should point out that <KBDCLASS="keycap">[CTRL-T]</KBD>and <KBDCLASS="keycap">[CTRL-D]</KBD>are typed while you are in insert mode, unlike most other commands, which are typed in command mode.  </P><PCLASS="para">The amount of indentation provided by <KBDCLASS="keycap">[CTRL-T]</KBD>or <CODECLASS="literal">&gt;&gt;</CODE> is one tabcharacter.  Tab stops are set every eightspaces by default.  A command like:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">:set tabstop=4</PRE></BLOCKQUOTE></P><PCLASS="para">will change the tab settings for a file.</P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-8087"></A><ACLASS="indexterm"NAME="AUTOID-8090"></A>Try using the autoindent option when you are enteringsource code.  It simplifies the job of getting indentationcorrect.  It can even sometimes help you avoid bugs (e.g., in Csource code, where you usually need one closing curly brace (}) for everylevel of indentation you go backwards).</P><PCLASS="para">The <CODECLASS="literal">&lt;&lt;</CODE> and <CODECLASS="literal">&gt;&gt;</CODE> commands are also helpful when indentingsource code.  By default, <CODECLASS="literal">&gt;&gt;</CODE> shifts a line right eight spaces(i.e., adds eight spaces of indentation) and <CODECLASS="literal">&lt;&lt;</CODE> shifts a line left eight spaces.For example, move the cursor to the beginning of this line andpress the &gt; key twice (<CODECLASS="literal">&gt;&gt;</CODE>).  You will see the line move right.  If you now press the &lt; key twice (<CODECLASS="literal">&lt;&lt;</CODE>), the line will move back again.</P><PCLASS="para">You can shift a number of lines by typing the number followedby <CODECLASS="literal">&gt;&gt;</CODE> or <CODECLASS="literal">&lt;&lt;</CODE>.  For example, move the cursor to the first line ofthis paragraph and type <CODECLASS="literal">5&gt;&gt;</CODE>.  You will shift all five lines inthe paragraph.  </P><PCLASS="para">The default shift is eight spaces (right or left).  This defaultcan be changed with a command like:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"><CODECLASS="literal">:set shiftwidth=4</CODE></PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-8109"></A><ACLASS="indexterm"NAME="AUTOID-8112"></A>You will find it convenient to have a shiftwidth that is thesame size as the width between tab stops.</P><PCLASS="para">Sometimes indentation won't work the way you expect, becausewhat you believe to be a tab character is actually one or morespaces.Normally, your screen displays both a tab and a space as white space, making the two indistinguishable.You can, however, issue the command:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">:set list</PRE></BLOCKQUOTE></P><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-8119"></A><ACLASS="indexterm"NAME="AUTOID-8122"></A>This alters your display so that a tab appears as the controlcharacter <CODECLASS="literal">^I</CODE> and an end-of-line appears as a <CODECLASS="literal">$</CODE>.This way, you can spot a true space, and you can see extra spacesat the end of a line.  A temporary equivalent is the<CODECLASS="literal">:l</CODE> command.For example, the command:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">:5,20 l</PRE></BLOCKQUOTE></P><PCLASS="para">displays lines 5 through 20,showing tab characters and end-of-line characters.<ACLASS="indexterm"NAME="AUTOID-8131"></A></P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="VI6-CH-7-SECT-5.2">7.5.2 A Special Search Command </A></H3><PCLASS="para"><ACLASS="indexterm"NAME="VI6-CH-7-IX-SEARCH-MTCH-BRACKETS"></A><ACLASS="indexterm"NAME="AUTOID-8138"></A><ACLASS="indexterm"NAME="AUTOID-8140"></A>The characters (, [, {, and &lt; can all be calledopening brackets.  When the cursor is resting on one of thesecharacters, pressing the <CODECLASS="literal">%</CODE> key moves the cursor from the openingbracket forward to the corresponding closing bracket&nbsp;- ), ], }, or &gt;&nbsp;- keeping in mind the usual rules for nesting brackets.For example, if you were to move the cursor to the first ( in:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">if ( cos(a[i]) &gt; sin(b[i]+c[i]) ){printf(&quot;cos and sin equal!&quot;);}</PRE></BLOCKQUOTE></P><PCLASS="para">and press <CODECLASS="literal">%</CODE>, you would see that the cursor jumps to theparenthesis at the end of the line.  This is the closingparenthesis that matches the opening one.</P><PCLASS="para">Similarly if the cursor is on one of the closing bracketcharacters, pressing <CODECLASS="literal">%</CODE> will move the cursor backwards to thecorresponding opening bracket character.  For example, move thecursor to the closing brace bracket after the <CODECLASS="literal">printf</CODE> line aboveand press <CODECLASS="literal">%</CODE>.</P><PCLASS="para">Not only does this search character help you move forward andbackward through a program in long jumps, it lets you check thenesting of brackets and parentheses in source code.  For example, if you putthe cursor on the first { at the beginning of a C function,pressing <CODECLASS="literal">%</CODE> should move you to the } that (you think) ends thefunction.  If it doesn't, something has gone wrong somewhere.</P><PCLASS="para">Another technique for searching matching brackets is to turn onthe following option:<ACLASS="indexterm"NAME="AUTOID-8154"></A><ACLASS="indexterm"NAME="AUTOID-8157"></A></P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">:set showmatch</PRE></BLOCKQUOTE></P><PCLASS="para">Unlike <CODECLASS="literal">%</CODE>, setting <CODECLASS="literal">showmatch</CODE> (or its abbreviation <CODECLASS="literal">sm</CODE>) helps you while you're in insert mode.  When you type a <CODECLASS="literal">)</CODE> or a <CODECLASS="literal">}</CODE>, the cursor will briefly move back to the matching <CODECLASS="literal">(</CODE> or <CODECLASS="literal">{</CODE> before returning to your current position.If the match is off-screen or doesn't exist, the terminal beeps.<ACLASS="indexterm"NAME="AUTOID-8170"></A></P></DIV><DIVCLASS="sect2"><H3CLASS="sect2"><ACLASS="title"NAME="VI6-CH-7-SECT-5.3">7.5.3 Using Tags </A></H3><PCLASS="para"><ACLASS="indexterm"NAME="VI6-CH-7-IX-TAGS-FOR-C-CODE"></A>The source code for a large C program will usually be spreadover several files.  Sometimes, it is difficult to keep track ofwhich file contains which function definitions.  To simplifymatters, a UNIX command called <CODECLASS="literal">ctags</CODE> can be used togetherwith the <CODECLASS="literal">:tag</CODE> command of <EMCLASS="emphasis">vi</EM>.</P><BLOCKQUOTECLASS="note"><PCLASS="para"><STRONG>NOTE:</STRONG> This section is of interestto C programmers, but not to those working in other languages.  </P></BLOCKQUOTE><PCLASS="para">The <CODECLASS="literal">ctags</CODE> command is issued at the UNIX command line. Its purpose is to create an information filethat <EMCLASS="emphasis">vi</EM> can use later to determine which files define whichfunctions.  By default, this file is called <EMCLASS="emphasis">tags</EM>.From within <EMCLASS="emphasis">vi</EM>, a command of the form:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"><CODECLASS="literal">:!ctags file.c</CODE></PRE></BLOCKQUOTE></P><PCLASS="para">will create a file named <EMCLASS="emphasis">tags</EM> under your current directorythat contains information on the functions defined in <EMCLASS="emphasis">file.c</EM>.  A command like:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen"><CODECLASS="literal">:!ctags *.c</CODE></PRE></BLOCKQUOTE></P><PCLASS="para">will create a <EMCLASS="emphasis">tags</EM> file describing all the C source files under thedirectory.</P><PCLASS="para">Now suppose your <EMCLASS="emphasis">tags</EM> file contains information on all thesource files that make up a C program.  Also suppose that you wantto look at or edit a function in the program but do not know wherethe function is. From within <EMCLASS="emphasis">vi</EM>, the command:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">:tag <EMCLASS="emphasis">name</EM></PRE></BLOCKQUOTE></P><PCLASS="para">will look at the <EMCLASS="emphasis">tags</EM> file to find out which file contains thedefinition of the function <EMCLASS="emphasis">name</EM>.  It will then read in the file and positionthe cursor on the line where the name is defined.  In this way,you don't have to know which file you have to edit; you only haveto decide which function you want to edit.</P><BLOCKQUOTECLASS="note"><PCLASS="para"><STRONG>NOTE:</STRONG> If you try to use the <CODECLASS="literal">:tag</CODE> command toread in a new file and you haven't saved your current text sincethe last time you changed it, <EMCLASS="emphasis">vi</EM> will not let you go to the newfile.  You must either write out your current file with the <CODECLASS="literal">:w</CODE>command and then issue <CODECLASS="literal">:tag</CODE>, or else type:</P><PCLASS="para"><BLOCKQUOTECLASS="screen"><PRECLASS="screen">:tag! <EMCLASS="emphasis">name</EM></PRE></BLOCKQUOTE></P><PCLASS="para">to override <EMCLASS="emphasis">vi</EM>'s reluctance to discard edits.</P></BLOCKQUOTE><PCLASS="para"><ACLASS="indexterm"NAME="AUTOID-8218"></A></P></DIV></DIV><DIVCLASS="htmlnav"><P></P><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><TABLEWIDTH="515"BORDER="0"CELLSPACING="0"CELLPADDING="0"><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172"><ACLASS="SECT1"HREF="ch07_04.htm"TITLE="7.4 Using ex Scripts "><IMGSRC="../gifs/txtpreva.gif"ALT="Previous: 7.4 Using ex Scripts "BORDER="0"></A></TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="book"HREF="index.htm"TITLE="Learning the vi Editor"><IMGSRC="../gifs/txthome.gif"ALT="Learning the vi Editor"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172"><ACLASS="APPENDIX"HREF="appa_01.htm"TITLE="A. Quick Reference "><IMGSRC="../gifs/txtnexta.gif"ALT="Next: A. Quick Reference "BORDER="0"></A></TD></TR><TR><TDALIGN="LEFT"VALIGN="TOP"WIDTH="172">7.4 Using ex Scripts </TD><TDALIGN="CENTER"VALIGN="TOP"WIDTH="171"><ACLASS="index"HREF="index/idx_a.htm"TITLE="Book Index"><IMGSRC="../gifs/index.gif"ALT="Book Index"BORDER="0"></A></TD><TDALIGN="RIGHT"VALIGN="TOP"WIDTH="172">A. Quick Reference </TD></TR></TABLE><HRALIGN="LEFT"WIDTH="515"TITLE="footer"><IMGSRC="../gifs/smnavbar.gif"USEMAP="#map"BORDER="0"ALT="The UNIX CD Bookshelf Navigation"><MAPNAME="map"><AREASHAPE="RECT"COORDS="0,0,73,21"HREF="../index.htm"ALT="The UNIX CD Bookshelf"><AREASHAPE="RECT"COORDS="74,0,163,21"HREF="../upt/index.htm"ALT="UNIX Power Tools"><AREASHAPE="RECT"COORDS="164,0,257,21"HREF="../unixnut/index.htm"ALT="UNIX in a Nutshell"><AREASHAPE="RECT"COORDS="258,0,321,21"HREF="index.htm"ALT="Learning the vi Editor"><AREASHAPE="RECT"COORDS="322,0,378,21"HREF="../sedawk/index.htm"ALT="sed &amp; awk"><AREASHAPE="RECT"COORDS="379,0,438,21"HREF="../ksh/index.htm"ALT="Learning the Korn Shell"><AREASHAPE="RECT"COORDS="439,0,514,21"HREF="../lrnunix/index.htm"ALT="Learning the UNIX Operating System"></MAP></DIV></BODY></HTML>