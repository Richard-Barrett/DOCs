<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Appendix A] A.4 Specific Programming Questions</TITLE><META NAME="author" CONTENT="Shishir Gundavaram"><META NAME="date" CONTENT="Mon Mar 17 13:37:51 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="cgi programming"><META NAME="title" CONTENT="CGI Programming on the World Wide Web"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif" ALT="CGI Programming on the World Wide Web"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="appa_03.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Appendix A</b></td><td width=172 align=right valign=top><A HREF="appa_05.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="CGI-APP-A-SECT-4">A.4 Specific Programming Questions</A></h2><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="appa-SECT2-AUTOID.17">I want the user to fill in a form and mail it to me. How can I do this? Are there any examples to show me how?</A></h3><P CLASS=para>It is actually a fairly simple process. Your CGIscript must be able to perform two tasks:<P CLASS=para>Decode the form data. Remember, all data in theform will be URL encoded (let's ignore Netscape 2.0 multipart MIMEmessages).<P CLASS=para>Open a pipe to <I CLASS=emphasis>mail</I> (or <I CLASS=emphasis>sendmail</I>),and write the form data to the file.<P CLASS=para>Let's assume you have an associative array called <I CLASS=emphasis>$in</I>(for those of you using Steven Brenner's <I CLASS=emphasis>cgi-lib.pl</I>library, this should be familiar) that contains the form data. Hereis how you would deal with <I CLASS=emphasis>sendmail</I>:<DIV CLASS=screen><P><PRE>open (SENDMAIL, "| /usr/bin/sendmail -f$in{'from'} -t -n -oi");print SENDMAIL &lt;&lt;End_of_Mail;From: $in{'from'} &lt;$in{'name'}&gt;To: $in{'to'}Reply-To: $in{'from'}Subject: $in{'subject'}$in{'message'}End_of_Mail</PRE></DIV><P CLASS=para>One thing you should note is the "Reply-To:"header. Since the server is running as user "nobody," the mail headersmight be messed up (especially when people are trying to reply toit). The "Reply-To:" field fixes that.<P CLASS=para>There are a lot of mail gateways in operation that use <I CLASS=emphasis>mail</I>in the following format:<DIV CLASS=screen><P><PRE>open (MAIL, "| mail -s 'Subject' $in{'to'}");                                     ^                                     |                                     +-- Possible security hole!!!!</PRE></DIV><P CLASS=para>If you don't check the <I CLASS=emphasis>$in{'to'}</I> variablefor shell metacharacters, you're in for a major headache! For example,if some malicious user enters the following:<DIV CLASS=screen><P><PRE>; rm -fr / ;  </PRE></DIV><P CLASS=para>you'll have a major problem on your hands.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="appa-SECT2-AUTOID.18">The formmail script looks complicated. Why can't I use a mailto: URL so that it just mails me the info the user filled in?</A></h3><P CLASS=para>Unfortunately, the <I CLASS=emphasis>mailto:</I>command is not supported by all browsers. If you have this commandin your document, it is a limiting factor, as people who use browsersthat do not support this do not have the ability to send you mail.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="appa-SECT2-AUTOID.19">How do I do Perl CGI programming from non-UNIX platforms like the Mac, MS-DOS, Windows, and NT? Will my Perl CGI program port amongst all these environments? Can it be transparent? I have an account on a UNIX server, but work on a Windows/Mac system. How can I test my CGI script on my own system?</A></h3><P CLASS=para>Perl has been ported to all the platforms that arementioned above. As a result, your Perl CGI program should be reasonablyportable. If you're are interfacing with various external programson the UNIX side, then it probably will not beportable, but if you're just manipulating data, opening and readingfiles, etc., you should have no problem.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="appa-SECT2-AUTOID.20">What are STDERR, STDIN, and STDOUT connected to in a Perl CGI program?</A></h3><P CLASS=para>In a CGI environment, STDERRpoints to the server error log file. You can use this to your advantageby outputting debug messages, and then checking the log file lateron.<P CLASS=para>Both STDIN and STDOUTpoint to the browser. Actually, STDIN pointsto the server that interprets the client (or browser's) requestand information, and sends that data to the script.<P CLASS=para>In order to catch errors, you can "dupe" STDERRto STDOUT early on in your script (after outputtingthe valid HTTP headers):<DIV CLASS=screen><P><PRE>    open (STDERR, "&gt;&amp;STDOUT");</PRE></DIV><P CLASS=para>This redirects all of the error messages to STDOUT(or the browser).</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="appa-SECT2-AUTOID.21">How do I write an access counter script?</A></h3><P CLASS=para>Counter scripts tend to be very popular. The ideabehind a counter is very simple:<P><OL CLASS=orderedlist><li CLASS=listitem>Use a file to store the data<P><li CLASS=listitem>Whenever someone visits the site, increment thenumber in the file<P></OL><P CLASS=para>Here is a simple counter script:<DIV CLASS=screen><P><PRE>#!/usr/local/bin/perl$counter = "/home/shishir/counter.dat";print "Content-type: text/plain", "\n\n";open (FILE, $counter) || die "Cannot read from the counter file.\n";flock (FILE, 2);$visitors = &lt;FILE&gt;;flock (FILE, 8);close (FILE);$VISITORS++;open (FILE, "&gt;" . $counter) || die "Cannot write to counter file.\n";flock (FILE, 2);print FILE $visitors;flock (FILE, 8);close (FILE);</PRE></DIV><P CLASS=para>You can now use SSI (Server Side Includes) to display a counterin your HTML document:<DIV CLASS=screen><P><PRE>You are visitor number: &lt;!--#exec cgi="/cgi-bin/counter.pl--&gt;  </PRE></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="appa-SECT2-AUTOID.22">How can I strip all the HTML tags from a document with a Perl substitute?</A></h3><P CLASS=para>Here is a simple regular expression that will stripHTML tags:<DIV CLASS=screen><P><PRE>$line =~ s/&lt;(([^&gt;]|\n)*)&gt;//g;</PRE></DIV><P CLASS=para>Or you can "escape" certain characters in an HTMLtag so that it can be displayed:<DIV CLASS=screen><P><PRE>$line =~ s/&lt;(([^&gt;]|\n)*)&gt;/&amp;lt;$1&amp;gt;/g;</PRE></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="appa-SECT2-AUTOID.23">How can I tell what user/host/browser called my program?</A></h3><P CLASS=para>You can use the environment variable HTTP_USER_AGENTto determine the user's browser.<P CLASS=para><I CLASS=emphasis>[ From WWW FAQ ] </I><P CLASS=para>Five important environment variables are available to yourCGI script to help in identifying the end user.<P><DL CLASS=variablelist><DT CLASS=varlistentry>HTTP_FROM<DD><P CLASS=para>This environment variable is, theoretically, set to the emailaddress of the user. However, many browsers do not set it at all,and most browsers that do support it allow the user to set any valuefor this variable. As such, it is recommended that it be used onlyas a default for the reply email address in an email form.<p><DT CLASS=varlistentry>REMOTE_USER<DD><P CLASS=para>This variable is only set if secure authentication was usedto access the script. The AUTH_TYPE variablecan be checked to determine what form of secure authentication wasused. REMOTE_USER will then contain the namethe user authenticated under. Note that REMOTE_USERis only set if authentication was actually used, and is not supportedby all web servers. Authentication may unexpectedly fail to happenunder the NCSA server if the method used forthe transaction is not listed in the <I CLASS=emphasis>access.conf</I>file (i.e., <TT>&lt;Limit GET POST&gt;</TT>should be set rather than the default, <TT>&lt;Limit GET&gt;</TT>).<p><DT CLASS=varlistentry>REMOTE_IDENT<DD><P CLASS=para>This variable is set if the server has contacted an IDENTDserver on the client machine. This is a slow operation, usuallyturned off in most servers, and there is no way to ensure that theclient machine will respond honestly to the query, if it respondsat all.<p><DT CLASS=varlistentry>REMOTE_HOST<DD><P CLASS=para>This variable will not identify the user specifically, butdoes provide information about the site the user has connected from,if the hostname was retrieved by the server. In the absence of anycertainty regarding the user's precise identity, making decisionsbased on a list of trusted addresses is sometimes an adequate workaround.This variable is not set if the server failed to look up the hostnameor skipped the lookup in the interest of speed; see REMOTE_ADDRbelow. Also keep in mind that you may see all users of a particularproxy server listed under one hostname.<p><DT CLASS=varlistentry>REMOTE_ADDR<DD><P CLASS=para>This variable will not identify the user specifically, butdoes provide information about the site the user has connected from.REMOTE_ADDR will contain the dotted-decimal IPaddress of the client. In the absence of any certainty regardingthe user's precise identity, making decisions based on a list oftrusted addresses is sometimes an adequate workaround. This variableis always set, unlike REMOTE_HOST, above. Alsokeep in mind that you may see all users of a particular proxy serverlisted under one address.</DL><P CLASS=para><I CLASS=emphasis>[ End of info from WWW FAQ ] </I></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="appa-SECT2-AUTOID.24">Can people read my Perl CGI program? If they do, is it a security problem that they know how my code works? How can I hide it?</A></h3><P CLASS=para>If you configure your server so that it recognizesthat all files in a specific directory (i.e., <I CLASS=emphasis>/cgi-bin</I>),or files with certain extensions (i.e., <I CLASS=emphasis>.pl</I>,<I CLASS=emphasis>.tcl</I>, <I CLASS=emphasis>.sh</I>, etc.) are CGIprograms, then it will execute the programs. There is no way forusers to see the script itself.<P CLASS=para>On the other hand, if you allow people to look at your script(by placing it, for example, in the document root directory), itis not a security problem, in most cases.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="appa-SECT2-AUTOID.25">Do I have to copy the whole Perl library into my htdocs directory?</A></h3><P CLASS=para>No, your CGI scripts can access files outside the server anddocument root directories, unless the server is running in a <I CLASS=emphasis>chroot</I>-edenvironment.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="appa-SECT2-AUTOID.26">Why shouldn't I have people type in passwords or social security numbers or credit card numbers? Isn't that what TYPE<i CLASS=command>="password"</i> is for?</A></h3><P CLASS=para><I CLASS=emphasis>No!</I> The forms interface allowsyou to have a "password" field, but it should not be used for anythinghighly confidential. The main reason for this is that form datagets sent from the browser to the Web server as plain text, andnot as encrypted data.<P CLASS=para>If you want to solicit secure information, you need to purchasea secure server, such as Netscape's Commerce Server (<A HREF="http://home.netscape.com/comprod/netscape_commerce.html">http://home.netscape.com/comprod/netscape_commerce.html</A>).</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="appa-SECT2-AUTOID.27">How do I generate separate pages for Netscape vs. the rest of the world?</A></h3><P CLASS=para>You can have your CGI script determine whether your script is being accessed by Netscape:<DIV CLASS=screen><P><PRE>$browser = $ENV{'HTTP_USER_AGENT'};if ($browser =~ /Mozilla/) {    #    # Netscape    #} else {    #    # Non Netscape    #}</PRE></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="appa-SECT2-AUTOID.28">Why doesn't my system ( ) output come out in the right order?</A></h3><P CLASS=para>This has to do with the way the standard outputis buffered. In order for the output to display in the correct order,you need to turn buffering off by using the $| variable:<DIV CLASS=screen><P><PRE>$| = 1;  </PRE></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="appa-SECT2-AUTOID.29">I hear that Netscape is going to support Java. Does that mean I have to use Java now instead of Perl? Should I?</A></h3><P CLASS=para>No, no! The concept of Java is totally differentfrom that of CGI. CGI refers to server-side execution, while Javarefers to client-side execution. There are certain things (likeanimations) that can be improved by using Java. However, you cancontinue to use Perl to develop server-side applications.<P CLASS=para>For more information, here are a few documents you can lookat:<P CLASS=para>Sun's Java Documentation (<A HREF="http://sun.java.com">http://sun.java.com</A>)<P CLASS=para><I CLASS=emphasis>Java uber Alles (</I><A HREF="http://mox.perl.com/perl/versus/java.html">http://mox.perl.com/perl/versus/java.html</A><I CLASS=emphasis>)</I>by Tom Christiansen (tchrist@mox.perl.com)<P CLASS=para><I CLASS=emphasis>Java, the Illusion </I>(<A HREF="http://www.nombas.com/otherdoc/javamagk.htm">http://www.nombas.com/otherdoc/javamagk.htm</A>)</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="appa-SECT2-AUTOID.30">How can I access my environment variables? Why are they different sometimes?</A></h3><P CLASS=para>You can access the environment variables throughthe <I CLASS=emphasis>%ENV</I> associative array. Here is a simplescript that dumps out all of the environment variables (sorted):<DIV CLASS=screen><P><PRE>#!/usr/local/bin/perlprint "Content-type: text/plain", "\n\n";foreach $key (sort keys %ENV) {    print $key, " = ", $ENV{$key}, "\n";}exit (0);</PRE></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="appa-SECT2-AUTOID.31">Why does my output get mangled (like "if b &lt; a" is messed up)?</A></h3><P CLASS=para>If you send a MIME content typeof HTML, you will have to "escape" certain characters,such as "&lt;," "&amp;," and "&gt;", or else the browser will thinkit is HTML.<P CLASS=para>You have to escape the characters by using the following construct:<DIV CLASS=screen><P><PRE>&amp;#ASCII Code;  </PRE></DIV><P CLASS=para>Here is a simple script that you can run on the command linethat will give you the ASCII code for non-alphanumericcharacters:<DIV CLASS=screen><P><PRE>#!/usr/local/bin/perlprint "Please enter a string: ";chop ($string = &lt;STDIN&gt;);$string =~ s/([^\w\s])/sprintf ("&amp;#%d;", ord ($1))/ge;print "The escaped string is: $string\n";exit (0); </PRE></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="appa-SECT2-AUTOID.32">How come when I run it from the command line, my Perl CGI program works, but it doesn't work when I run it from the browser?</A></h3><P CLASS=para>This most likely is due to permission problems.Remember, your server is probably running as "nobody," "www," ora process with very minimal privileges. As a result, it will notbe able to execute your script unless it has permission to do so.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="appa-SECT2-AUTOID.33">How come my Perl CGI program runs fine but doesn't manage to write its output files?</A></h3><P CLASS=para>Again, this has to do with permissions! The servercannot write to a file in a certain directory if it does not havepermission to do so.<P CLASS=para>You should make it a point to check for error status fromthe <I CLASS=emphasis>open</I> command:<DIV CLASS=screen><P><PRE>print "Content-type: text/plain\n\n";...open (FILE, "&gt;" . "/some/dir/some.file") ||    print "Cannot write to the data file!";...</PRE></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="appa-SECT2-AUTOID.34">How do I make a form that maintains state, or has several entry points?</A></h3><P CLASS=para>You can use the CGI::MiniSvrmodule (<I CLASS=emphasis>http://www-genome.wi.mit.edu/ftp/pub/software/WWW/CGIperl/docs/MiniSvr.pm.html</I>) to keep statebetween multiple entry points.<P CLASS=para>Or you can create a series of dynamic documents that passa unique session identification (either as a query, an extra pathname, or as a hidden field) to each other.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="appa-SECT2-AUTOID.35">How do I debug my Perl CGI program without running it from a web browser?</A></h3><P CLASS=para>It's difficult to debug a CGI script. You can emulatea server by setting environment variables manually:<DIV CLASS=screen><P><PRE>setenv HTTP_USER_AGENT "Mozilla/2.0b6"       (csh)</PRE></DIV><P CLASS=para>or<DIV CLASS=screen><P><PRE>export HTTP_USER_AGENT = "Mozilla/2.0b6"     (ksh, bash)</PRE></DIV><P CLASS=para>You can emulate a POST request by placingthe data in a file and piping it to your program:<DIV CLASS=screen><P><PRE>cat data.file | some_program.pl  </PRE></DIV><P CLASS=para>Or, you can use CGI Lint, which will automate some of this.It will also check for potential security problems, errors in <I CLASS=emphasis>open( ),</I> and invalid HTTP headers.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="appa-SECT2-AUTOID.36">How can I call a Perl CGI program without using a <TT>&lt;FORM&gt;</TT> tag?</A></h3><P CLASS=para>You can call a CGI program by simply opening the URL to it:<DIV CLASS=screen><P><PRE>http://some.machine/cgi-bin/your_program.pl </PRE></DIV><P CLASS=para>You can also have a link in a document, such as:<DIV CLASS=screen><P><PRE>&lt;A HREF="http://some.machine/cgi-bin/your_program.pl"&gt; Click here to access my CGI program&lt;/A&gt;</PRE></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="appa-SECT2-AUTOID.37">How do I stop people from calling my form without filling out anything? Why do they keep doing this?</A></h3><P CLASS=para>Why people do this, I don't know. But, you can checkthe information from all the fields and return a "No Response" ifany of them are empty. Here is an example (assume the associativearray <I CLASS=emphasis>$in</I> contains your form information):<DIV CLASS=screen><P><PRE>$error = 0;foreach $value (values %in) {     $value =~ s/\s//g;     $error = 1 unless ($value);}if ($error) {    print "Content-type: text/plain\n";    print "Status: 204 No Response\n\n";    print "You should only see this message if your browser does";    print "not support the status code 204\n";} else {    #    # Process Data Here    #}</PRE></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="appa-SECT2-AUTOID.38">What are all the server response codes (http://www.w3.org/hypertext/ WWW/Protocols/HTTP/HTRESP.html) and what do they mean?</A></h3><P CLASS=para>A CGI program can send specific response codes tothe server, which in turn will send them to the browser. For example,if you want a "No Response" (meaning that the browser will not loada new page), you need to send a response code of 204 (see the answerto the last question).</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="appa-SECT2-AUTOID.39">Why doesn't <tt CLASS=literal>print "Location: http://host/page.html\n"</tt> <I CLASS=emphasis>work? Why does it only work the first time and get the redirects wrong later?</I></A></h3><P CLASS=para>A CGI program can only send <I CLASS=emphasis>one</I>Locationheader. You also cannot send a MIME content typeif you want the server to perform redirection. For example, thisis not valid, though it may work with some servers:<DIV CLASS=screen><P><PRE>#!/usr/local/bin/perl...print "Content-type: text/plain\n"print "Location: http://some.machine/some.doc\n\n"";</PRE></DIV><P CLASS=para>How can I automatically include a:<DIV CLASS=screen><P><PRE>"Last updated: ..."  </PRE></DIV><P CLASS=para><I CLASS=emphasis>line at the bottom of all my HTML pages? Or canI only do that for SSI pages? How do I get the date of the CGI script?</I><P CLASS=para>If you are dynamically creating documentsusing CGI, you can insert a time stamp pretty easily. Here is anexample in Perl 5:<DIV CLASS=screen><P><PRE>$last_updated = localtime (time);print "Last updated: $last_updated\n";</PRE></DIV><P CLASS=para>or in Perl 4:<DIV CLASS=screen><P><PRE>require "ctime.pl";$last_updated = &amp;cmtime (time);print "Last updated: $last_updated\n";</PRE></DIV><P CLASS=para>or even:<DIV CLASS=screen><P><PRE>$date = `/usr/local/bin/date`;print "Last updated: $last_updated\n";</PRE></DIV><P CLASS=para>You can accomplish this with SSI like this:<DIV CLASS=screen><P><PRE>&lt;--#echo var="LAST_MODIFIED"--&gt;  </PRE></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="appa-SECT2-AUTOID.40">When is a Perl CGI program too complex for a simple task and only a shell will do? When is it not powerful enough for a hard one? Isn't C++ much better for this kind of thing? What about C?</A></h3><P CLASS=para>Each language has its own advantages and disadvantages.I'm sure you've heard this many times: It depends on what you'retrying to do. If you are writing a CGI program that's going to beaccessed thousands of times in an hour, then you should write itin C or C++. If you are looking for a quick solution (as far asimplementation), then Perl is the way to go!<P CLASS=para>You should generally avoid the shell for any type of CGI programming,just because of the potential for security problems.</DIV></DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="appa_03.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="appa_05.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>CGI and the WWW Server</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>Security</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>