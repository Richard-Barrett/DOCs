<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 3] 3.3 Accept Types and Content Types</TITLE><META NAME="author" CONTENT="Shishir Gundavaram"><META NAME="date" CONTENT="Mon Mar 17 13:22:08 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="cgi programming"><META NAME="title" CONTENT="CGI Programming on the World Wide Web"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif" ALT="CGI Programming on the World Wide Web"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch03_02.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 3</b></td><td width=172 align=right valign=top><A HREF="ch03_04.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="CGI-CHP-3-SECT-3">3.3 Accept Types and Content Types</A></h2><P CLASS=para>CGI applications can returnnearly any type of virtual document, as long as the client can handleit properly. It can return a plain text file, an HTML file ... orit can send PostScript, PDF, SGML, etc.<P CLASS=para>This is why the client sends a list of "accept types" it supports,both directly and indirectly through helper applications, to theserver when it issues a request. The server stores this informationin the environment variable HTTP_ACCEPT,and the CGI program can check this variable to ensure that it returnsa file in a format the browser can handle.<P CLASS=para>It's also why when you are returning a document, the CGI programneeds to use the <i CLASS=command>Content-type</i> header to notifythe client what type of data it is sending, so that the browsercan format and display the document properly.<P CLASS=para>Here'sa simple snippet of code that checks to see if the browser acceptsJPEG or GIF images:<DIV CLASS=screen><P><PRE>#!/usr/local/bin/perl$gif_image = "logo.gif";$jpeg_image = "logo.jpg";$plain_text = "logo.txt";$accept_types = $ENV{'HTTP_ACCEPT'};if ($accept_types =~ m|image/gif|) {		$html_document = $gif_image;} elsif ($accept_types =~ m|image/jpeg|) {		$html_document = $jpeg_image;} else {		$html_document = $plain_text;}...</PRE></DIV><P CLASS=para>We use a regular expression to search the <I CLASS=emphasis>$accept_types</I>variable for a MIME content type of <i CLASS=command>image/gif</i>and <i CLASS=command>image/jpeg</i>. Once that's done, you can openthe file, read it, and output the data to standard output, likewe've seen in previous examples.</DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch03_02.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="ch03_04.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>CGI and Response Headers</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>The Content-length Header</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>