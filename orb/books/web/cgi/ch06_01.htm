<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 6] Hypermedia Documents</TITLE><META NAME="author" CONTENT="Shishir Gundavaram"><META NAME="date" CONTENT="Mon Mar 17 13:27:29 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="cgi programming"><META NAME="title" CONTENT="CGI Programming on the World Wide Web"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF" TEXT="#000000"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif" ALT="CGI Programming on the World Wide Web"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch05_09.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 6</b></td><td width=172 align=right valign=top><A HREF="ch06_02.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><H1 CLASS=chapter><A CLASS="TITLE" NAME="CGI-CHP-6">Hypermedia Documents</A></H1><DIV CLASS=htmltoc><p><b>Contents:</b><br>Creating Dynamic Home Pages<br><A HREF="ch06_02.htm">CGI Examples with PostScript</A><BR><A HREF="ch06_03.htm">The <I CLASS=emphasis>gd</I> Graphics Library</A><BR><A HREF="ch06_04.htm">CGI Examples with gnuplot</A><BR><A HREF="ch06_05.htm">CGI Examples with pgperl</A><BR><A HREF="ch06_06.htm">Animation</A><BR></DIV><P CLASS=para>When you'relooking around on the Web, going from site to site, you may haveseen virtual documents that greet you, pages with graphics thatare created "on the fly," or sizzling animations. These are allexamples of graphic creation and manipulation using CGI. There arenumerous tools and utilities that allow you to create documentssuch as these very quickly and easily.<DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="CGI-CHP-6-SECT-1">6.1 Creating Dynamic Home Pages</A></h2><P CLASS=para>What is a dynamic (or virtual)home page? It's a document that looks different when viewed at differenttimes or by different people. For example, you may want to displaya random fortune cookie when someone visits your home page. If youconduct business on the Web, you might want to use a dynamic documentto advertise different products when someone accesses the document.<P CLASS=para>In order to set up a virtual home page, you have to modifycertain configuration settings to ask the server to execute a CGIprogram instead of displaying a static HTML file.Normally, the NCSA server looks for the file<I CLASS=emphasis>index.html</I> in the document root directory anddisplays it.<P CLASS=para>The following line when added to the server resource configurationfile (<I CLASS=emphasis>srm.conf</I>) forces the server to executethe CGI program <I CLASS=emphasis>index.html</I> (a Perl programdoesn't have to end with a <I CLASS=emphasis>.pl</I> extension):<DIV CLASS=screen><P><PRE>AddType application/x-httpd-cgi index.html</PRE></DIV><P CLASS=para>The <i CLASS=command>AddType</i>server directive was originally introduced in <A HREF="ch06_01.htm">Chapter 6, <i>Hypermedia Documents</i></A>. It allows youto execute CGI programs located outside the <I CLASS=emphasis>cgi-bin</I>directory.<P CLASS=para>Under the CERN server, you can do somethingsimilar by adding the following line to httpd.conf:<DIV CLASS=screen><P><PRE>Exec /index.html /usr/local/etc/httpd/cgi-bin/index.pl</PRE></DIV><P CLASS=para>Now, let's create a simple virtual home page that displaysa greeting, based on the time of the access, and a message indicatingwhether the webmaster is currently logged in. Of course, this isa very simple example that illustrates the creation of a home pagewith dynamic information. You can also create a virtual home pageusing Server Side Includes, as shown in <A HREF="ch05_01.htm">Chapter 5, <i>Server Side Includes</i></A>.<DIV CLASS=screen><P><PRE>#!/usr/local/bin/perlprint "Content-type: text/html", "\n\n";$webmaster = "shishir";($seconds, $minutes, $hour) = localtime (time);</PRE></DIV><P CLASS=para>The <I CLASS=emphasis>localtime</I> function takes the currenttime (in seconds since 1970) and returns a nine-element array consistingof the date and time for the current time zone. We will be usingonly the first three elements of the array, which contain the seconds,minutes, and hour values (in the military 24-hour format).<P CLASS=para>If your system's time zone is not configured properly, youwill get the date and time for the Greenwich time zone (GMT). Insuch a case, you will need to use the TZ environment variable toset the proper time zone before you call the <I CLASS=emphasis>localtime</I>function:<DIV CLASS=screen><P><PRE>$ENV{'TZ'} = 'EST';</PRE></DIV><P CLASS=para>This sets your time zoneto Eastern Standard Time (EST). You can see some of the other timezones by looking at the following document:<DIV CLASS=screen><P><PRE>http://wwwcrasys.anu.edu.au/reference/world.timezones.html</PRE></DIV><P CLASS=para>To return to the program:<DIV CLASS=screen><P><PRE>if ( ($hour &gt;= 23) || ($hour &lt;= 6) ) {		$greeting = "Wow, you are up late";} elsif ( ($hour &gt; 6) &amp;&amp; ($hour &lt; 12) ) {		$greeting = "Good Morning";} elsif ( ($hour &gt;= 12) &amp;&amp; ($hour &lt;= 18) ) {		$greeting = "Good Afternoon";} else {		$greeting = "Good Evening";}</PRE></DIV><P CLASS=para><P CLASS=para>Since the <I CLASS=emphasis>localtime</I> function returnsthe hour in a 24-hour format, we can use this to our advantage.It is much easier to select a greeting based on this format becausethe time scale is continuous from 0-23, and we don't have to worryabout determining whether an hour value of "12" indicates 12:00A.M. or 12:00 P.M.<DIV CLASS=screen><P><PRE>if ($hour &gt; 12) {		$hour -= 12;} elsif ($hour == 0) {		hour = 12;}$time = sprintf ("%02d:%02d:%02d", $hour, $minutes, $seconds);</PRE></DIV><P CLASS=para>For display purposes, however, the hour is converted intothe regular 12-hour format. The <I CLASS=emphasis>sprintf</I>function formats a string according to the field specifiers. Inthis case, we want the hours, minutes, and seconds to be two digitsin length, so a minute value of "9" will be displayed as "09". Theformatted string is stored in the <I CLASS=emphasis>$time</I> variable.<DIV CLASS=screen><P><PRE>open(CHECK, "/usr/bin/w -h -s $webmaster |");if (&lt;CHECK&gt; =~ /$webmaster/) {		$in_out = "I am currently logged in.";} else {		$in_out = "I just stepped out.";}</PRE></DIV><P CLASS=para>This <I CLASS=emphasis>open</I>command might look strange to you if you're new to Perl. Insteadof opening a file, it opens a pipe for input. In other words, Perlexecutes the UNIX program <I CLASS=emphasis>/usr/bin/w</I>and redirects its output to the file handle <I CLASS=emphasis>CHECK</I>.As you'll see throughout the book, this technique allows us to communicatewith other utilities and programs by sending and receiving datathrough a pipe.<P CLASS=para>We pass the value stored in <I CLASS=emphasis>$webmaster</I>as the argument to <I CLASS=emphasis>/usr/bin/w</I>, which returnsall of the system processes "owned" by<I CLASS=emphasis> $webmaster</I>.We don't really need to know much about the processes. The onlything we're concerned about is whether any processes for <I CLASS=emphasis>$webmaster</I>exist, indicating that he/she is logged in. Depending on this, the<I CLASS=emphasis>$in_out</I> variable is set to a specific message.<DIV CLASS=screen><P><PRE>  close (CHECK);</PRE></DIV><P CLASS=para>Once we're done, we close the file handle. It's a good practiceto clean up all resources when you're done with them. Now, we'reready to output the information that we've gathered so far.<P CLASS=para>Instead of using a <I CLASS=emphasis>print</I> statement to send each lineto standard output, we'll use a "here" document. What is that, youmay ask? See for yourself:<DIV CLASS=screen><P><PRE>print &lt;&lt;End_of_Homepage;</PRE></DIV><P CLASS=para>This statement outputs everything below it to standard outputuntil it reaches the string "End_of_Homepage." This saves us fromtyping <I CLASS=emphasis>print</I> before each line that we wantto output.<P CLASS=para>Since we output a MIME content type of<i CLASS=command>text/html</i>, we need to output some HTMLinformation:<DIV CLASS=screen><P><PRE>&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;Welcome to my home page&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;$greeting! It is $time. Here are some of my favorite links:.. (some information).&lt;ADDRESS&gt;Shishir Gundavaram ($in_out)&lt;/ADDRESS&gt;&lt;/BODY&gt;&lt;/HTML&gt;End_of_Homepageexit(0);</PRE></DIV><P CLASS=para>The whole point of this exercise is that you can "embed" anotherlanguage (like HTML) into a CGI script. But thevariables from the enclosing script can be used within the HTML-Perlsubstitutes the right value for each variable. That's what makesthis page dynamic rather than static. An important thing to noteabout "here" documents is that they follow the same conventionsas the regular <I CLASS=emphasis>print</I> statement, in that Perlwill evaluate only variables, and not function calls and other expressions.<P CLASS=para>In this program, we output a MIME contenttype of <i CLASS=command>text/html</i> and followed that with theHTML code. But we're not limited to just creatingdynamic HTML documents; we can create dynamicgraphics as well, as we'll see next.</DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch05_09.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="ch06_02.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>Common Errors</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>CGI Examples with PostScript</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>