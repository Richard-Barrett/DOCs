<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 10] Gateways to Internet Information Servers</TITLE><META NAME="author" CONTENT="Shishir Gundavaram"><META NAME="date" CONTENT="Mon Mar 17 13:34:53 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="cgi programming"><META NAME="title" CONTENT="CGI Programming on the World Wide Web"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF" TEXT="#000000"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif" ALT="CGI Programming on the World Wide Web"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch09_04.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 10</b></td><td width=172 align=right valign=top><A HREF="ch10_02.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><H1 CLASS=chapter><A CLASS="TITLE" NAME="CGI-CHP-10">Gateways to Internet Information Servers</A></H1><DIV CLASS=htmltoc><p><b>Contents:</b><br>Overview<br><A HREF="ch10_02.htm">What Are Sockets?</A><BR><A HREF="ch10_03.htm">Socket I/O in Perl</A><BR><A HREF="ch10_04.htm">Socket Library</A><BR><A HREF="ch10_05.htm">Checking Hypertext (HTTP) Links</A><BR><A HREF="ch10_06.htm">Archie</A><BR><A HREF="ch10_07.htm">Network News on the Web</A><BR><A HREF="ch10_08.htm">Magic Cookies</A><BR><A HREF="ch10_09.htm">Maintaining State with a Server</A><BR><A HREF="ch10_10.htm">Forking/Spawning Child Processes</A><BR></DIV><DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="CGI-CHP-10-SECT-1">10.1 Overview</A></h2><P CLASS=para>You have probably heard of informationservers on the Internet such as Archie (which lets you search FTPsites) and NNTP (the Usenet news server). Likethe Web itself, these services run as protocols on top of TCP/IP.To make these services available over the Web, you can develop CGIapplications that act as clients to other Internet information serversusing the TCP/IP network protocol.<P CLASS=para>Let's start by looking at how a server functions. Take anelectronic mail application (though thetheory can apply to any other server). Most mail programs save theuser's messages in a particular file, typically in the <I CLASS=emphasis>/var/spool/mail</I>directory. When you send mail to someone on a different host, themail program must find the recipient's mail file on that machineand append the message to it. How exactly does the mail programachieve this task, since it cannot manipulate files on a remotehost directly?<P CLASS=para>The answer to this question is <I CLASS=emphasis>interprocesscommunication</I> (IPC). A process on the remote host actsas a messenger for the mail process on that machine. The local processcommunicates with this remote agent across a network to "deliver"mail. As a result, the remote process is called a server (it "services"an issued request), and the local process is referred to as a client.The Web works along the same philosophy: the browser is the clientthat issues a request to an HTTP server thatinterprets and executes the request.<P CLASS=para>The most important thing to remember here is that the clientand the server must "speak the same language." In other words, aparticular client is designed to work with a specific server. So,for example, an Archie client cannot communicate with a Web server.But if you know the stream of data expected by a server, and thestream produced as output, you can write a CGI program that communicateswith it, as we showed in the previous chapter.<P CLASS=para>One very useful application we will show in this chapter isone where you create both the client and the server. This will bea cookie handler, which helps you keep track of data when it isentered into multiple forms.<P CLASS=para>The communication protocols depend on the type of UNIXsystem. The version of UNIX from AT&amp;T, calledSystem V, provides STREAMSto communicate with processes across a network. On the other hand,the BSD flavor of UNIX, from the University ofCalifornia at Berkeley, implements objects called <I CLASS=emphasis>sockets</I>for network communication. In this chapter, we will look only atBSD sockets (also adopted by the PC world), which are, by far, themost popular way to handle network communications.</DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch09_04.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="ch10_02.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>Figure -: Search results</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>What Are Sockets?</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>