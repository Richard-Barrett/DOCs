<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 10] 10.4 Socket Library</TITLE><META NAME="author" CONTENT="Shishir Gundavaram"><META NAME="date" CONTENT="Mon Mar 17 13:34:56 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="cgi programming"><META NAME="title" CONTENT="CGI Programming on the World Wide Web"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif" ALT="CGI Programming on the World Wide Web"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch10_03.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 10</b></td><td width=172 align=right valign=top><A HREF="ch10_05.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="CGI-CHP-10-SECT-4">10.4 Socket Library</A></h2><P CLASS=para>To make the whole taskof creating clients and servers easier, a socket library was developedthat encapsulates the various socket and network information functions.Here is the same finger client using the library:<DIV CLASS=screen><P><PRE>#!/usr/local/bin/perlrequire "sockets.pl";$service = "finger";chop ($hostname = `/bin/hostname`);$input = shift (@ARGV);($username, $remote_host) = split (/@/, $input, 2);unless ($remote_host) {        $remote_host = $hostname;}</PRE></DIV><P CLASS=para>Most of the code here is the same as that used in the previousexample, with one exception. The <I CLASS=emphasis>require</I>command includes the <I CLASS=emphasis>sockets.pl </I>library.<DIV CLASS=screen><P><PRE>&amp;open_connection (FINGER, $remote_host, $service)     || die "Cannot open connection to: $remote_host", "\n";</PRE></DIV><P CLASS=para>The <I CLASS=emphasis>open_connection</I>library subroutine performs the following tasks:<P><UL CLASS=itemizedlist><li CLASS=listitem>Check to see if the remote host isan IP number (<I CLASS=emphasis>128.197.152.10</I>) or an IP name(acs.bu.edu), and perform the appropriate conversion to a packedaddress string.<P><li CLASS=listitem>Create a socket.<P><li CLASS=listitem>Bind the socket to the current host.<P><li CLASS=listitem>Connect the socket to the remote address and port.<P><li CLASS=listitem>Unbuffer the socket.<P></UL><P CLASS=para>Now, here is the rest of the program.<DIV CLASS=screen><P><PRE>print FINGER $username, "\n";while (&lt;FINGER&gt;) {    print;}&amp;close_connection (FINGER);exit (0);</PRE></DIV><P CLASS=para>The <I CLASS=emphasis>close_connection</I>subroutine flushes the socket so that all the remaining informationin the socket is released, and then closes it. As you can see, thislibrary makes the whole process of communicating with network serversmuch easier. Now, let's look at a simple example that interactswith an HTTP server.</DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch10_03.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="ch10_05.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>Socket I/O in Perl</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>Checking Hypertext (HTTP) Links</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>