<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 10] 10.6 Archie</TITLE><META NAME="author" CONTENT="Shishir Gundavaram"><META NAME="date" CONTENT="Mon Mar 17 13:34:58 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="cgi programming"><META NAME="title" CONTENT="CGI Programming on the World Wide Web"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif" ALT="CGI Programming on the World Wide Web"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch10_05.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 10</b></td><td width=172 align=right valign=top><A HREF="ch10_07.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="CGI-CHP-10-SECT-6">10.6 Archie</A></h2><P CLASS=para>Archie is a database/index of the numerousFTP sites (and their contents) throughout the world. You can usean Archie client to search the database for specific files. In thisexample, we will use Brendan Kehoe's Archie client software (version1.3) to connect to an Archie server and search for user-specifiedinformation. Though we could have easily written a client usingthe socket library, it would be a waste of time, since an excellentone exists. This Archie gateway is based on ArchiPlex, developedby Martijn Koster.<DIV CLASS=screen><P><PRE>#!/usr/local/bin/perl$webmaster = "Shishir Gundavaram (shishir\@bu\.edu)";$archie = "/usr/local/bin/archie";$error = "CGI Archie Gateway Error";$default_server = "archie.rutgers.edu";$timeout_value = 180;</PRE></DIV><P CLASS=para>The <I CLASS=emphasis>archie</I> variable contains the fullpath to the Archie client. Make sure you have an Archie client withthis pathname on your local machine; if you do not have a client,you have to telnet to a machine with a client and run this programthere.<P CLASS=para>The default server to search is stored. This is used in casethe user failed to select a server.<P CLASS=para>Finally, <I CLASS=emphasis>timeout_value</I> contains the numberof seconds after which an gateway will return an error message andterminate. This is so that the user will not have to wait foreverfor the search results.<DIV CLASS=screen><P><PRE>%servers = (   'ANS Net (New York, USA)',         'archie.ans.net',  'Australia',                       'archie.au',  'Canada',                          'archie.mcgill.ca',  'Finland/Mainland Europe',         'archie.funet.fi',  'Germany',                         'archie.th-darmstadt.de',  'Great Britain/Ireland',           'archie.doc.ac.ac.uk',  'Internic Net (New York, USA)',    'ds.internic.net',  'Israel',                          'archie.ac.il',  'Japan',                           'archie.wide.ad.jp',  'Korea',                           'archie.kr',  'New Zealand',                     'archie.nz',  'Rutgers University (NJ, USA)',    'archie.rutgers.edu',  'Spain',                           'archie.rediris.es',  'Sweden',                          'archie.luth.se',  'SURANet (Maryland, USA)',         'archie.sura.net',  'Switzerland',                     'archie.switch.ch',  'Taiwan',                          'archie.ncu.edu.tw',  'University of Nebrasksa (USA)',   'archie.unl.edu' );</PRE></DIV><P CLASS=para>Some of the Archie servers and their IP names are stored inan associative array. We will create the form for this gateway dynamically,listing all of the servers located in this array.<DIV CLASS=screen><P><PRE>$request_method = $ENV{'REQUEST_METHOD'};if ($request_method eq "GET") {    &amp;display_form ();</PRE></DIV><P CLASS=para>The form will be created and displayed if this program wasaccessed with the browser.<DIV CLASS=screen><P><PRE>} elsif ($request_method eq "POST") {    &amp;parse_form_data (*FORM);    $command = &amp;parse_archie_fields ();</PRE></DIV><P CLASS=para>All of the form data is decoded and stored in the FORMassociative array. The <I CLASS=emphasis>parse_archie_fields</I>subroutine uses the form data in constructing a query to be passedto the Archie client.<DIV CLASS=screen><P><PRE>    $SIG{'ALRM'} = "time_to_exit";    alarm ($timeout_value);</PRE></DIV><P CLASS=para>To understand how this array is used, you have to understandthat the UNIX kernel checks every time an interruptor break arrives for a program, and asks, "What routine should Icall?" The routine that the program wants called is a signal handler.Perl associates a handler with a signal in the SIG associative array.<P CLASS=para>As shown above, the traditional way to implement a time-outis to set an ALRM signal to be called after aspecified number of seconds. The first line says that when an alarmis signaled, the time_to_exit subroutine should be executed. ThePerl alarm call on thesecond line schedules the ALRM signal to be sentin the number of seconds represented by the $timeout_value variable.<DIV CLASS=screen><P><PRE>    open (ARCHIE, "$archie $command |");    $first_line = &lt;ARCHIE&gt;;</PRE></DIV><P CLASS=para>A pipe is opened to the Archie client. The <I CLASS=emphasis>command</I>variable contains a "query" that specifies various command-lineoptions, such as search type and Archie server address, as wellas the string to search for. The <I CLASS=emphasis>parse_archie_fields</I>subroutine makes sure that no shell metacharacters are specified,since the <I CLASS=emphasis>command</I> variable is "exposed" tothe shell.<DIV CLASS=screen><P><PRE>    if ($first_line =~ /(failed|Usage|WARNING|Timed)/) {        &amp;return_error (500, $error,            "The archie client encountered a bad request.");    } elsif ($first_line =~ /No [Mm]atches/) {        &amp;return_error (500, $error,        "There were no matches for &lt;B&gt;$FORM{'query'}&lt;/B&gt;.");    }</PRE></DIV><P CLASS=para>If the first line from the Archie server contains either anerror or a "No Matches" string, the <I CLASS=emphasis>return_error</I>subroutine is called to return a more friendly (and verbose) message.If there is no error, the first line is usually blank.<DIV CLASS=screen><P><PRE>    print "Content-type: text/html", "\n\n";    print "&lt;HTML&gt;", "\n";    print "&lt;HEAD&gt;&lt;TITLE&gt;", "CGI Archie Gateway", "&lt;/TITLE&gt;&lt;/HEAD&gt;", "\n";    print "&lt;BODY&gt;", "\n";    print "&lt;H1&gt;", "Archie search for: ", $FORM{'query'}, "&lt;/H1&gt;", "\n";    print "&lt;HR&gt;", "&lt;PRE&gt;", "\n";</PRE></DIV><P CLASS=para>The usual type of header information is output. The followinglines of code parse the output from the Archie server, and createhypertext links to the matched files. Here is the typical formatfor the Archie server output. It lists each host where a desiredfile (in this case, <I CLASS=emphasis>emacs</I>) is found, followedby a list of all publicly accessible directories containing a fileof that name. Files are listed in long format, so you can see howold they are and what their sizes are.<DIV CLASS=screen><P><PRE>Host amadeus.ireq-robot.hydro.qc.ca    Location: /pub      DIRECTORY drwxr-xr-x        512  Dec 18 1990  emacsHost anubis.ac.hmc.edu    Location: /pub      DIRECTORY drwxr-xr-x        512  Dec  6 1994  emacs    Location: /pub/emacs/packages/ffap      DIRECTORY drwxr-xr-x        512  Apr  5 02:05  emacs    Location: /pub/perl/dist      DIRECTORY drwxr-xr-x        512  Aug 16 1994  emacs    Location: /pub/perl/scripts/text-processing           FILE -rwxrwxrwx         16  Feb 25 1994  emacs</PRE></DIV><P CLASS=para>We can enhance this output by putting in hypertextlinks. That way, the user can open a connection to any of the hostswith a click of a button and retrieve the file. Here is the codeto parse this output:<DIV CLASS=screen><P><PRE>    while (&lt;ARCHIE&gt;) {        if ( ($host) = /^Host (\S+)$/ ) {            $host_url = join ("", "ftp://", $host);            s|$host|&lt;A HREF="$host_url"&gt;$host&lt;/A&gt;|;            &lt;ARCHIE&gt;;</PRE></DIV><P CLASS=para>If the line starts with a "Host", the specified host is stored.A URL to the host is created with the join function, using the ftpscheme and the hostname-for example, if the hostname were ftp.ora.com,the URL would be ftp://ftp.ora.com. Finally, the blank line afterthis line is discarded.<DIV CLASS=screen><P><PRE>        } elsif (/^\s+Location:\s+(\S+)$/) {            $location = $1;            s|$location|&lt;A HREF="${host_url}${location}"&gt;$location&lt;/A&gt;|;        } elsif ( ($type, $file) = /^\s+(DIRECTORY|FILE).*\s+(\S+)/) {            s|$type|&lt;I&gt;$type&lt;/I&gt;|;            s|$file|&lt;A HREF="${host_url}${location}/${file}"&gt;$file&lt;/A&gt;|;        } elsif (/^\s*$/) {            print "&lt;HR&gt;";        }                print;    }</PRE></DIV><P CLASS=para>One subtle feature of regular expressions is shown here: Theyare "greedy," eating up as much text as they can. The expression(DIRECTORY|FILE).*\s+ meansmatch DIRECTORY or FILE, thenmatch as many characters as you can up to whitespace. There arechunks of whitespace throughout the line, but the .* takes up everythingup to the last whitespace. This leaves just the word "emacs" tomatch the final parenthesized expression (\S+).<p><img align=middle src="./figs/cgi1002.gif" alt="[Graphic: Figure from the text]" width=410 height=334><P CLASS=para>The rest of the lines are read and parsed in the same mannerand displayed (see <A HREF="ch10_06.htm#CGI-CHP-10-FIG-1">Figure 10.1</A>). If the line is empty, a horizontalrule is output-to indicate the end of each entry.<DIV CLASS=figure><h4 CLASS=figure><A CLASS="TITLE" NAME="CGI-CHP-10-FIG-1">Figure 10-1: Archie results</A></h4><p><img align=middle src="./figs/cgi1003.gif" alt="[Graphic: Figure 10-1]" width=450 height=367></DIV><DIV CLASS=screen><P><PRE>    $SIG{'ALRM'} = "DEFAULT";    close (ARCHIE);    print "&lt;/PRE&gt;";    print "&lt;/BODY&gt;&lt;/HTML&gt;", "\n";</PRE></DIV><P CLASS=para>Finally, the ALRM signal is reset, andthe file handle is closed.<DIV CLASS=screen><P><PRE>} else {    &amp;return_error (500, $error, "Server uses unspecified method");}exit (0);</PRE></DIV><P CLASS=para>Remember how we set the SIG array so that a signal would causethe <I CLASS=emphasis>time_to_exit</I> subroutine to run? Here itis:<DIV CLASS=screen><P><PRE>sub time_to_exit{    close (ARCHIE);    &amp;return_error (500, $error,        "The search was terminated after $timeout_value seconds.");}</PRE></DIV><P CLASS=para>When this subroutine runs, it means that the 180 seconds thatwere allowed for the search have passed, and that it is time toterminate the script. Generally, the Archie server returns the matchedFTP sites and its files quickly, but there are times when it canbe queued up with requests. In such a case, it is wise to terminatethe script, rather than let the user wait for a long period of time.<P CLASS=para>Now, we have to build a command that the Archie client recognizesusing the parse_archie_fields subroutine:<DIV CLASS=screen><P><PRE>sub parse_archie_fields{    local ($query, $server, $type, $address, $status, $options);    $status = 1;    $query = $FORM{'query'};    $server = $FORM{'server'};    $type = $FORM{'type'};    if ($query !~ /^\w+$/) {        &amp;return_error (500, $error,             "Search query contains invalid characters.");</PRE></DIV><P CLASS=para>If the query field contains non-alphanumeric characters (charactersother than A-Z, a-z, 0-9, _), an error message is output.<DIV CLASS=screen><P><PRE>    } else {        foreach $address (keys %servers) {            if ($server eq $address) {                $server = $servers{$address};                $status = 0;            }        }</PRE></DIV><P CLASS=para>The foreach loop iterates through the keys of the <I CLASS=emphasis>servers</I>associative array. If the user- specified server matches the nameas contained in the array, the IP name is stored in the server variable,and the status is set to zero.<DIV CLASS=screen><P><PRE>        if ($status) {            &amp;return_error (500, $error, "Please select a valid archie host.");</PRE></DIV><P CLASS=para>A status of non-zero indicates that the user specified aninvalid address for the Archie server.<DIV CLASS=screen><P><PRE>        } else {            if ($type eq "cs_sub") {                $type = "-c";            } elsif ($type eq "ci_sub") {                $type = "-s";            } else {                $type = "-e";            }</PRE></DIV><P CLASS=para>If the user selected "Case Sensitive Substring", the "-c"switch is used. The "-s" switch indicates a "Case Insensitive Substring".If the user did not select any option, the "-e" switch ("Exact Match")is used.<DIV CLASS=screen><P><PRE>            $options = "-h $server $type $query";            return ($options);        }    }}</PRE></DIV><P CLASS=para>A string containing all of the options is created, and thenreturned to the main program.<P CLASS=para>Our last task is a simple one-to create a form that allowsthe user to enter a query, using the display_form subroutine. Theprogram creates the form dynamically because some information issubject to change (i.e., the list of servers).<DIV CLASS=screen><P><PRE>sub display_form{    local ($archie);    print &lt;&lt;End_of_Archie_One;Content-type: text/html&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;Gateway to Internet Information Servers&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;H1&gt;CGI Archie Gateway&lt;/H1&gt;&lt;HR&gt;&lt;FORM ACTION="/cgi-bin/archie.pl" METHOD="POST"&gt;Please enter a string to search from: &lt;BR&gt;&lt;INPUT TYPE="text" NAME="query" SIZE=40&gt;&lt;P&gt;What archie server would you like to use (&lt;B&gt;please&lt;/B&gt;, be considerateand use the one that is closest to you): &lt;BR&gt;&lt;SELECT NAME="server" SIZE=1&gt;End_of_Archie_One    foreach $archie (sort keys %servers) {        if ($servers{$archie} eq $default_server) {            print "&lt;OPTION SELECTED&gt;", $archie, "\n";        } else {            print "&lt;OPTION&gt;", $archie, "\n";        }    }        </PRE></DIV><P CLASS=para>This loop iterates through the associative array and displaysall of the server names.<DIV CLASS=screen><P><PRE>    print &lt;&lt;End_of_Archie_Two;&lt;/SELECT&gt;&lt;P&gt;Please select a type of search to perform: &lt;BR&gt;&lt;INPUT TYPE="radio" NAME="type" VALUE="exact" CHECKED&gt;Exact&lt;BR&gt;&lt;INPUT TYPE="radio" NAME="type" VALUE="ci_sub"&gt;Case Insensitive Substring&lt;BR&gt;&lt;INPUT TYPE="radio" NAME="type" VALUE="cs_sub"&gt;Case Sensitive Substring&lt;BR&gt;&lt;P&gt;&lt;INPUT TYPE="submit" VALUE="Start Archie Search!"&gt;&lt;INPUT TYPE="reset"  VALUE="Clear the form"&gt;&lt;/FORM&gt;&lt;HR&gt;&lt;/BODY&gt;&lt;/HTML&gt;End_of_Archie_Two}</PRE></DIV><P CLASS=para>The dynamic form looks like that in <A HREF="ch10_06.htm#CGI-CHP-10-FIG-2">Figure 10.2</A>.<DIV CLASS=figure><h4 CLASS=figure><A CLASS="TITLE" NAME="CGI-CHP-10-FIG-2">Figure 10-2: Archie form</A></h4><p><img align=middle src="./figs/cgi1004.gif" alt="[Graphic: Figure 10-2]" width=502 height=353></DIV><P CLASS=para>This was a rather simple program because we did not have todeal with the Archie server directly, but rather through a pre-existingclient. Now, we will look at an example that is a little bit morecomplicated.</DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch10_05.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="ch10_07.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>Checking Hypertext (HTTP) Links</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>Network News on the Web</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>