<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 10] 10.7 Network News on the Web</TITLE><META NAME="author" CONTENT="Shishir Gundavaram"><META NAME="date" CONTENT="Mon Mar 17 13:35:02 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="cgi programming"><META NAME="title" CONTENT="CGI Programming on the World Wide Web"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif" ALT="CGI Programming on the World Wide Web"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch10_06.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 10</b></td><td width=172 align=right valign=top><A HREF="ch10_08.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="CGI-CHP-10-SECT-7">10.7 Network News on the Web</A></h2><P CLASS=para>NNTP(Network News Transfer Protocol) is the most popular software usedto transmit Usenet news over the Internet. It lets the receiving(client) system tell the sending (server) system which newsgroupsto send, and which articles from each group. NNTPaccepts commands in a fairly simple format. It sends back a streamof text consisting of the articles posted and occasional statusinformation.<P CLASS=para>This CGI gateway communicates with an NTTPserver directly by using socket I/O. The program displays listsof newsgroups and articles for the user to choose from. You willbe able to read news from the specified newsgroups in a threadedfashion (all the replies to each article are grouped together).<DIV CLASS=screen><P><PRE>#!/usr/local/bin/perlrequire "sockets.pl";$webmaster = "Shishir Gundavaram (shishir\@bu\.edu)";$error = "CGI NNTP Gateway Error";%groups = ( 'cgi',     'comp.infosystems.www.authoring.cgi',            'html',    'comp.infosystems.www.authoring.html',            'images',  'comp.infosystems.www.authoring.images',            'misc',    'comp.infosystems.www.authoring.misc',            'perl',    'comp.lang.perl.misc' );</PRE></DIV><P CLASS=para>The <I CLASS=emphasis>groups</I> associative array containsa list of the newsgroups that will be displayed when the form isdynamically created.<DIV CLASS=screen><P><PRE>$all_groups = '(cgi|html|images|misc|perl)';</PRE></DIV><P CLASS=para>The <I CLASS=emphasis>all_groups</I> variable contains a regularexpression listing all of the keys of the <I CLASS=emphasis>groups</I>associative array. This will be used to ensure that a valid newsgroupis specified by the user.<DIV CLASS=screen><P><PRE>$nntp_server = "nntp.bu.edu";</PRE></DIV><P CLASS=para>The NNTP server is set to "nntp.bu.edu".If you do not want users from domains other than "bu.edu" to accessthis form, you can set up a simple authentication scheme like this:<DIV CLASS=screen><P><PRE>$allowed_domain = "bu.edu";$remote_host = $ENV{'REMOTE_HOST'};($remote_domain) = ($remote_host =~ /([^.]+\.[^.]+)$/);if ($remote_domain ne $allowed_domain) {    &amp;return_error (500, $error, "Sorry! You are not allowed to read news!");}</PRE></DIV><P CLASS=para>The regular expression used above extracts the domain namefrom an IP name or address.<p><img align=middle src="./figs/cgi1005.gif" alt="[Graphic: Figure from the text]" width=502 height=373><P CLASS=para>Or, you can allow multiple domains like this:<DIV CLASS=screen><P><PRE>$allowed_domains = "(bu.edu|mit.edu|perl.com)";$remote_host = $ENV{'REMOTE_HOST'};if ($remote_host !~ /$allowed_domains$/o) {    &amp;return_error (500, $error, "Sorry! You are not allowed to read news!");}</PRE></DIV><P CLASS=para>To continue with the program:<DIV CLASS=screen><P><PRE>&amp;parse_form_data (*NEWS);$group_name = $NEWS{'group'};$article_number = $NEWS{'article'};</PRE></DIV><P CLASS=para>There is no form front end to this CGI gateway. Instead, allparameters are passed as query information (GETmethod). If you access this application without a query, a documentlisting all the newsgroups is listed. Once you select a newsgroupfrom this list, the program is invoked again, this time with a querythat specifies the newsgroup you want. For instance, if you wantthe newsgroup whose key is "images," this query is passed to theprogram:<DIV CLASS=screen><P><PRE>http://some.machine/cgi-bin/nntp.pl?group=images</PRE></DIV><P CLASS=para>The <I CLASS=emphasis>groups</I> associative array associatesthe string "images" with the actual newsgroup name. This is a moresecure way of handling things-much like the way the Archie servernames were passed instead of the actual IP names in the previousexample. If the program receives a query like the one above, itdisplays a list of the articles in the newsgroup. When the userchooses an article, the query information will look like this:<DIV CLASS=screen><P><PRE>http://some.machine/cgi-bin/nntp.pl?group=images&amp;article=18721</PRE></DIV><P CLASS=para>This program will then display the article.<DIV CLASS=screen><P><PRE>if ($group_name =~ /\b$all_groups\b/o) {   $selected_group = $groups{$group_name};</PRE></DIV><P CLASS=para>This block of code will be executed only if the <I CLASS=emphasis>group</I>field consists of a valid newsgroup name, as stored in <I CLASS=emphasis>all_groups</I>.The actual newsgroup name is stored in the <I CLASS=emphasis>selected_group</I>variable.<DIV CLASS=screen><P><PRE>    &amp;open_connection (NNTP, $nntp_server, "nntp") ||          &amp;return_error (500, $error, "Could not connect to NNTP server.");    &amp;check_nntp ();</PRE></DIV><P CLASS=para>A socket is opened to the NNTP server.The server usually runs on port 119. The <I CLASS=emphasis>check_nntp</I>subroutine checks the header information that is output by the serverupon connection. If the server issues any error messages, the scriptterminates.<DIV CLASS=screen><P><PRE>    ($first, $last) = &amp;set_newsgroup ($selected_group);</PRE></DIV><P CLASS=para>The NNTP server keeps track of all thearticles in a newsgroup by numbering them in ascending order, startingat some arbitrary number. The <I CLASS=emphasis>set_newsgroup</I>subroutine returns the identification number for the first and lastarticles.<DIV CLASS=screen><P><PRE>    if ($article_number) {        if (($article_number &lt; $first) || ($article_number &gt; $last)) {            &amp;return_error (500, $error,                 "The article number you specified is not valid.");        } else {            &amp;show_article ($selected_group, $article_number);        }</PRE></DIV><P CLASS=para>If the user selected an article from the list that was dynamicallygenerated when a newsgroup is selected, this branch of code is executed.The article number is checked to make sure that it lies within thevalid range. You might wonder why we need to check this, since thelist that is presented to the user is based on the range generatedby the <I CLASS=emphasis>set_newsgroup</I> subroutine. The reasonfor this is that the NNTP server lets articlesexpire periodically, and articles are sometimes deleted by theirauthor. If sufficient time passes between the time the list is displayedand the time the user makes a selection, the specified article numbercould be invalid. In addition, I like to handle the possibilitythat a user hardcoded a query.<DIV CLASS=screen><P><PRE>    } else {        &amp;show_all_articles ($group_name, $selected_group, $first, $last);    }</PRE></DIV><P CLASS=para>If no article is specified, which happens when the user selectsa newsgroup from the main HTML document, the<I CLASS=emphasis>show_all_articles</I> subroutine is called to displaya list of all the articles for the selected newsgroup.<DIV CLASS=screen><P><PRE>    print NNTP "quit", "\n";    &amp;close_connection (NNTP);</PRE></DIV><P CLASS=para>Finally, the <I CLASS=emphasis>quit</I> command is sent tothe NNTP server, and the socket is closed.<DIV CLASS=screen><P><PRE>} else {    &amp;display_newsgroups ();}exit (0);</PRE></DIV><P CLASS=para>If this program is accessed without any query information,or if the specified newsgroup is not among the list stored in the<I CLASS=emphasis>groups</I> associative array, the <I CLASS=emphasis>display_newsgroups</I>subroutine is called to output the valid newsgroups.<P CLASS=para>The following print_header subroutine displays a MIMEheader, and some HTML to display the title andthe header.<DIV CLASS=screen><P><PRE>sub print_header{    local ($title) = @_;    print "Content-type: text/html", "\n\n";		print "&lt;HTML&gt;", "\n";    print "&lt;HEAD&gt;&lt;TITLE&gt;", $title, "&lt;/TITLE&gt;&lt;/HEAD&gt;", "\n";		print "&lt;BODY&gt;", "\n";    print "&lt;H1&gt;", $title, "&lt;/H1&gt;", "\n";    print "&lt;HR&gt;", "&lt;BR&gt;", "\n";}</PRE></DIV><P CLASS=para>The print_footer subroutine outputs the webmaster's address.<DIV CLASS=screen><P><PRE>sub print_footer{    print "&lt;HR&gt;", "\n";    print "&lt;ADDRESS&gt;", $webmaster, "&lt;/ADDRESS&gt;", "\n";		print "&lt;/BODY&gt;&lt;/HTML&gt;", "\n";}</PRE></DIV><P CLASS=para>The escape subroutine "escapes" all characters except foralphanumeric characters and whitespace. The main reason for thisis so that "special" characters are displayed properly.<DIV CLASS=screen><P><PRE>sub escape{    local ($string) = @_;    $string =~ s/([^\w\s])/sprintf ("&amp;#%d;", ord ($1))/ge;    return ($string);}</PRE></DIV><P CLASS=para>For example, if an article in a newsgroup contains:<DIV CLASS=screen><P><PRE>From: joe@test.net (Joe Test)Subject: I can't get the &lt;H1&gt; headers to display correctly</PRE></DIV><P CLASS=para>The browser will actually interpret the "&lt;H1&gt;", and therest of the document will be messed up. This subroutine escapesthe text so that it looks like this:<DIV CLASS=screen><P><PRE>From&amp;#58; joe&amp;#64;test&amp;#46;net &amp;#40;Joe Test&amp;#41;Subject&amp;#58; I can&amp;#39;t get the &amp;#60;H1&amp;#62; headers to display correctly</PRE></DIV><P CLASS=para>A web client can interpret any string in the form &amp;#n,where n is the ASCII code of the character. Thismight slow down the display slightly, but it is much safer thanescaping specific characters only.<P CLASS=para>Thecheck_nntp subroutine continuously reads the output from the NNTPserver until the return status is either a success (200 or 201)or a failure (4xx or 5xx). You might have noticed that these statuscodes are very similar to the HTTP status code.In fact, most Internet servers that follow a standard use thesecodes.<DIV CLASS=screen><P><PRE>sub check_nntp{    while (&lt;NNTP&gt;) {        if (/^(200|201)/) {            last;        } elsif (/^4|5\d+/) {            &amp;return_error (500, $error, "The NNTP server returned an error.");        }    }}</PRE></DIV><P CLASS=para>The set_newsgroup subroutine returns the first and last articlenumbers for the newsgroup.<DIV CLASS=screen><P><PRE>sub set_newsgroup{    local ($group) = @_;    local ($group_info, $status, $first_post, $last_post);    print NNTP "group ", $group, "\n";</PRE></DIV><P CLASS=para>The <I CLASS=emphasis>group</I>command is sent to the NNTP server. In responseto this, the server sets its current newsgroup to the one specified,and outputs information in the following format:<DIV CLASS=screen><P><PRE>group comp.infosystems.www.authoring.cgi211 1289 4776 14059 comp.infosystems.www.authoring.cgi</PRE></DIV><P CLASS=para>The first column indicates the status of the operation (211 being a success). The total numberof articles, the first and last articles, and the newsgroup nameconstitute the rest of the line, respectively. As you can see, thenumber of articles is not equal to the numerical difference of thefirst and last articles. This is due to article expiration and deletion(as mentioned above).<DIV CLASS=screen><P><PRE>    $group_info = &lt;NNTP&gt;;    ($status, $first_post, $last_post) = (split (/\s+/, $group_info))[0, 2, 3];</PRE></DIV><P CLASS=para>The server output is split on whitespace, and the first, third,and fourth elements are stored in <I CLASS=emphasis>status</I>, <I CLASS=emphasis>first_post</I>,and last_post, respectively.Remember, arrays are zero based; the first element is zero, notone.<DIV CLASS=screen><P><PRE>    if ($status != 211) {        &amp;return_error (500, $error,                            "Could not get group information for $group.");    } else {        return ($first_post, $last_post);    }}</PRE></DIV><P CLASS=para>If the status is not 211, an error message is displayed. Otherwise,the first and last article numbers are returned.<P CLASS=para>In the show_article subroutine, the actual news article isretrieved and printed.<DIV CLASS=screen><P><PRE>sub show_article{    local ($group, $number) = @_;    local ($useful_headers, $header_line);        $useful_headers = '(From:|Subject:|Date:|Organization:)';    print NNTP "head $number", "\n";    $header_line = &lt;NNTP&gt;;</PRE></DIV><P CLASS=para>The <I CLASS=emphasis>head</I> command displays the headersfor the specified article. Here is the format of the NNTPoutput:<DIV CLASS=screen><P><PRE>221 14059 &lt;47hh6767ghe1$d09@nntp.test.net&gt; headPath: news.bu.edu!decwrl!nntp.test.net!usenetFrom: joe@test.net (Joe Test)Newsgroups: comp.infosystems.www.authoring.cgiSubject: I can't get the &lt;H1&gt; headers to display correctlyDate: Thu, 05 Oct 1995 05:19:03 GMTOrganization: Joe's Test NetLines: 17Message-ID: &lt;47hh6767ghe1$d09@nntp.test.net&gt;Reply-To: joe@test.netNNTP-Posting-Host: my.news.test.netX-Newsreader: Joe Windows Reader v1.28.</PRE></DIV><P CLASS=para>The first line contains the status, the article number, thearticle identification, and the NNTP command,respectively. The status of 221indicates success. All of the other lines constitute the variousarticle headers, and are based on how and where the article wasposted. The header body ends with the "." character.<DIV CLASS=screen><P><PRE>    if ($header_line =~ /^221/) {        &amp;print_header ($group);        print "&lt;PRE&gt;", "\n";</PRE></DIV><P CLASS=para>If the server returns a success status of 221, the <I CLASS=emphasis>print_header</I>subroutine is called to display the MIME header,followed by the usual HTML.<DIV CLASS=screen><P><PRE>        while (&lt;NNTP&gt;) {            if (/^$useful_headers/) {                $_ = &amp;escape ($_);                print "&lt;B&gt;", $_, "&lt;/B&gt;";            } elsif (/^\.\s*$/) {                    last;            }        }</PRE></DIV><P CLASS=para>This loop iterates through the header body, and escapes anddisplays the From, Subject, Date, and Organization headers.<DIV CLASS=screen><P><PRE>        print "\n";        print NNTP "body $number", "\n";        &lt;NNTP&gt;;</PRE></DIV><P CLASS=para>If everything is successful up to this point, the <I CLASS=emphasis>body</I>command is sent to the server. In response, the server outputs thebody of the article in the following format:<DIV CLASS=screen><P><PRE>body 14059222 14059 &lt;47hh6767ghe1$d09@nntp.test.net&gt; bodyI am trying to display headers using the &lt;H1&gt; tag, but it does notseem to be working. What should I do? Please help.Thanks in advance,-Joe.</PRE></DIV><P CLASS=para>There is no need to check the status of this command, if the<I CLASS=emphasis>head</I> command executed successfully. The serverreturns a status of 222to indicate success.<DIV CLASS=screen><P><PRE>        while (&lt;NNTP&gt;) {                last if (/^\.\s*$/);            $_ = &amp;escape ($_);            print;        }</PRE></DIV><P CLASS=para>The while loop iterates through the body, escapes all thelines, and displays them. If the line starts with a period and containsnothing else but whitespace, the loop terminates.<DIV CLASS=screen><P><PRE>        print "&lt;/PRE&gt;", "\n";        &amp;print_footer ();    } else {        &amp;return_error (500, $error,            "Article number $number could not be retrieved.");    }}</PRE></DIV><P CLASS=para>If the specified article is not found, an error message isdisplayed.<P CLASS=para>The following subroutine reads all of the articles for a particulargroup into memory, threads them-all replies to a specific articleare grouped together for reading convenience-and displays the articlenumbers and subject lines.<DIV CLASS=screen><P><PRE>sub show_all_articles{    local ($id, $group, $first_article, $last_article) = @_;    local ($this_script, %all, $count, @numbers, $article,           $subject, @threads, $query);    $this_script = $ENV{'SCRIPT_NAME'};    $count = 0;</PRE></DIV><P CLASS=para>This is the most complicated (but the most interesting) partof the program. Before your eyes, you will see a nice web interfacegrow from some fairly primitive output from the NNTPserver.<DIV CLASS=screen><P><PRE>    print NNTP "xhdr subject $first_article-$last_article", "\n";    &lt;NNTP&gt;;</PRE></DIV><P CLASS=para>The xhdr subject lists all the articles in the specified rangein the following format:<DIV CLASS=screen><P><PRE>xhdr subject 4776-14059221 subject fields follow4776 Re: CGI Scripts (guestbook ie)4831 Re: Access counter for CERN server12769 Re: Problems using sendmail from Perl script12770 File upload, Frames and BSCW-- (More Articles)-.</PRE></DIV><P CLASS=para>The first line contains the status. Again, there is no needto check this, as we know the newsgroup exists. Each article islisted with its number and subject.<DIV CLASS=screen><P><PRE>    &amp;print_header ("Newsgroup: $group");    print "&lt;UL&gt;", "\n";    while (&lt;NNTP&gt;) {        last if (/^\.\s*$/);        $_ = &amp;escape ($_);        ($article, $subject) = split (/\s+/, $_, 2);        $subject =~ s/^\s*(.*)\b\s*/$1/;        $subject =~ s/^[Rr][Ee]:\s*//;</PRE></DIV><P CLASS=para>The loop iterates through all of the subjects. The <I CLASS=emphasis>split</I>command separates each entry into the article number and subject.Leading and trailing spaces, as well as "Re:" at the beginning ofthe line are removed from the subject. This is for sorting purposes.<DIV CLASS=screen><P><PRE>        if (defined ($all{$subject})) {            $all{$subject} = join ("-", $all{$subject}, $article);        } else {            $count++;            $all{$subject} = join ("\0", $count, $article);         }    }</PRE></DIV><P CLASS=para>This is responsible for threading the articles. Each new subjectis stored in an associative array, <I CLASS=emphasis>$all</I>, keyedby the subject itself. The <I CLASS=emphasis>$count</I> variablegives a unique number to start each value in the array. If the articlealready exists, the article number is simply appended to the endto the element with the same subject. For example, if the subjectslook like this:<DIV CLASS=screen><P><PRE>2020 What is CGI?2026 How do you create counters?2027 Please help with file locking!!!2029 Re: What is CGI?2030 Re: What is CGI?2047 Re: How do you create counters?...</PRE></DIV><P CLASS=para>Then this is how the associative array will look:<DIV CLASS=screen><P><PRE>$all{'What is CGI?'} = "1\02020-2029-2030";$all{'How do you create counters?'} = "2\02026-2047";$all{'Please help with file locking!!!'} = "3\02027";</PRE></DIV><P CLASS=para>Note that we assigned a <I CLASS=emphasis>$count</I> of 1 tothe first thread we see ("What's CGI?"), 2 to the second thread,and so on. Later we sort by these numbers, so the user will seethreads in the order that they came in to the newsgroup.<DIV CLASS=screen><P><PRE>    @numbers = sort by_article_number keys (%all);</PRE></DIV><P CLASS=para>What you see hereis a common Perl technique for sorting. The sort command invokesa subroutine repeatedly (in this case, one that I wrote called <I CLASS=emphasis>by_article_number</I>).Using a fast algorithm, it passes pairs of elements from the <I CLASS=emphasis>$all</I>array to the subroutine.<DIV CLASS=screen><P><PRE>    foreach $subject (@numbers) {        $article = (split("\0", $all{$subject}))[1];</PRE></DIV><P CLASS=para>The loop iterates through all of the subjects. The list ofarticle numbers for each subject is stored in <I CLASS=emphasis>article</I>.Thus, the <I CLASS=emphasis>$article</I> variable for "What is CGI?"would be:<DIV CLASS=screen><P><PRE>2020-2029-2030</PRE></DIV><P CLASS=para>Now, we work on the string of articles.<DIV CLASS=screen><P><PRE>        @threads = split (/-/, $article);</PRE></DIV><P CLASS=para>The string containing all of the articles for a particularsubject are split on the "-" delimiter and stored in the <I CLASS=emphasis>threads</I>array.<DIV CLASS=screen><P><PRE>        foreach (@threads) {                    $query = join ("", $this_script, "?", "group=", $id,                        "&amp;", "article=", $_);            print qq|&lt;LI&gt;&lt;A HREF="$query"&gt;$subject&lt;/A&gt;|, "\n";        }    }    print "&lt;/UL&gt;", "\n";    &amp;print_footer ();}</PRE></DIV><P CLASS=para>The loop iterates through each article number (or thread),and builds a hypertext link containing the newsgroup name and thearticle number (see <A HREF="ch10_07.htm#CGI-CHP-10-FIG-3">Figure 10.3</A>).<DIV CLASS=figure><h4 CLASS=figure><A CLASS="TITLE" NAME="CGI-CHP-10-FIG-3">Figure 10-3: News articles</A></h4><p><img align=middle src="./figs/cgi1006.gif" alt="[Graphic: Figure 10-3]" width=502 height=373></DIV><P CLASS=para>The following is a simple subroutine that compares two valuesof an associative array.<DIV CLASS=screen><P><PRE>sub by_article_number{    $all{$a} &lt;=&gt; $all{$b};}</PRE></DIV><P CLASS=para>This statement is identical to the following:<DIV CLASS=screen><P><PRE>if ($all{$a} &lt; $all{$b}) {    return (-1);} elsif ($all{$a} == $all{$b}) {    return (0);} elsif ($all{$a} &gt; $all{$b}) {    return (1);}</PRE></DIV><P CLASS=para>The <I CLASS=emphasis>$a</I> and <I CLASS=emphasis>$b</I> constitutetwo values in the associative array. In this case, Perl uses thislogic to compare all of the values in the associative array.<P CLASS=para>The display_newsgroups subroutine creates a dynamic HTMLdocument that lists all the newsgroups contained in the <I CLASS=emphasis>groups</I>associative array.<DIV CLASS=screen><P><PRE>sub display_newsgroups{    local ($script_name, $keyword, $newsgroup, $query);    &amp;print_header ("CGI NNTP Gateway");    $script_name = $ENV{'SCRIPT_NAME'};    print "&lt;UL&gt;", "\n";    foreach $keyword (keys %groups) {        $newsgroup = $groups{$keyword};        $query = join ("", $script_name, "?", "group=", $keyword);        print qq|&lt;LI&gt;&lt;A HREF="$query"&gt;$newsgroup&lt;/A&gt;|, "\n";    }    print "&lt;/UL&gt;";    &amp;print_footer ();}</PRE></DIV><P CLASS=para>Each newsgroup is listed as an unordered list, with the queryconsisting of the specific key from the associative array. Remember,the qq|...| notation is exactly like the "..." notation, exceptfor the fact that "|" is the delimiter, instead of the double quotationmarks. </DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch10_06.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="ch10_08.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>Archie</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>Magic Cookies</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>