<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 10] 10.8 Magic Cookies</TITLE><META NAME="author" CONTENT="Shishir Gundavaram"><META NAME="date" CONTENT="Mon Mar 17 13:35:07 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="cgi programming"><META NAME="title" CONTENT="CGI Programming on the World Wide Web"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif" ALT="CGI Programming on the World Wide Web"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch10_07.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 10</b></td><td width=172 align=right valign=top><A HREF="ch10_09.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="CGI-CHP-10-SECT-8">10.8 Magic Cookies</A></h2><P CLASS=para>In<A HREF="ch08_01.htm">Chapter 8, <i>Multiple Form Interaction</i></A>, we introduced you to someof the problems of working with multiple forms, and presented afew possible solutions. In this chapter, we approach the problemagain, using our new familiarity with clients and servers.<P CLASS=para>An interface consisting of multiple forms presents thornyproblems for CGI. How do you remember the information stored ondifferent forms? A normal graphical interface application (runningon a local machine) simply displays forms and stores results, asshown in <A HREF="ch10_08.htm#CGI-CHP-10-FIG-4">Figure 10.4</A>.<DIV CLASS=figure><h4 CLASS=figure><A CLASS="TITLE" NAME="CGI-CHP-10-FIG-4">Figure 10-4: A local application handling multiple forms</A></h4><p><img align=middle src="./figs/exp1001.gif" alt="[Graphic: Figure 10-4]" width=503 height=232></DIV><P CLASS=para>It is easy to store information from successive forms whena client and a server are not involved. But when you use CGI, theserver invokes the program repeatedly each time a form is submitted.Instead of a single running program, you have multiple instances,as shown in <A HREF="ch10_08.htm#CGI-CHP-10-FIG-5">Figure 10.5</A>.<DIV CLASS=figure><h4 CLASS=figure><A CLASS="TITLE" NAME="CGI-CHP-10-FIG-5">Figure 10-5: Multiple forms over a server</A></h4><p><img align=middle src="./figs/exp1002.gif" alt="[Graphic: Figure 10-5]" width=502 height=232></DIV><P CLASS=para>The problem you face is how to tell each instance of the programwhat data was retrieved by the previous runs.<P CLASS=para>Temporary files are a simple solution, but a messy one. Theprogram has to know which file to read and write each time. Knowingthe right file is complicated when multiple users are running theprogram at the same time. Furthermore, the information is not verysecure, because the files are visible on the system. The time requiredto access the files can slow down the operation. Finally, you haveto remember to clean up the files, when the user goes away and doesnot finish the session.<P CLASS=para>A much more elegant solution involves a special server whosejob is to maintain state for CGI programs. This server runs continuously,like any other server. CGI programs of all types and purposes canuse this server to store information. The big advantage that a serverhas over temporary files is that the data remains in memory. Thismakes operations faster and keeps the data much more secure.<P CLASS=para>The heart of the server approach is that a CGI program knowshow to retrieve data that a previous instance of the program sentto the server. Each instance of the program needs a kind of handleso it can find the data. To furnish this access, the server associatesa unique identifier with each user who runs the CGI program. Theprogram supplies the identifier when it stores the data, and anotherinstance of the program supplies the identifier again to retrievethe data. Given to colorful language, computer people like to callsuch identifiers "magic cookies." Using a single cookie, a CGI programcan keep track of any amount of data. So the server is called acookie server, while the CGI program is called the cookie client.<P CLASS=para>Another major problem has to be solved to use cookies. Oneinstance of the CGI program has to pass the cookie to the next instance.If you look at <A HREF="ch10_08.htm#CGI-CHP-10-FIG-5">Figure 10.5</A>, you may see the solution in the arrows:Pass the cookie to the next form, and have the form pass it back.This is the solution we will use in this book. When the CGI programbuilds each form, it embeds the cookie in a hidden field. When theuser submits the form, it passes back the hidden field. The newinstance of the program, when it starts up, can retrieve the cookielike any other field, and ask the server for the data. The procedureis shown in <A HREF="ch10_08.htm#CGI-CHP-10-FIG-6">Figure 10.6</A>.<DIV CLASS=figure><h4 CLASS=figure><A CLASS="TITLE" NAME="CGI-CHP-10-FIG-6">Figure 10-6: Cookie server interaction with a Web client and server</A></h4><p><img align=middle src="./figs/exp1003.gif" alt="[Graphic: Figure 10-6]" width=502 height=213></DIV><P CLASS=para>Let's trace a cookie, and the data associated with it, througha complete session.<P><UL CLASS=itemizedlist><li CLASS=listitem>The user fills out the first form,and the CGI program is invoked for the first time.<P><li CLASS=listitem>The CGI program contacts the server for the firsttime. The server creates a cookie and passes it to the program.The program also passes data to the server, using the cookie givento it by the server.<P><li CLASS=listitem>The program creates the next form for the user,embeds the cookie in a hidden field, and sends the form to the browser.<P><li CLASS=listitem>The browser displays the form, which is filled outby the user and submitted. The form passes back the hidden fieldwith the cookie.<P><li CLASS=listitem>A new instance of the CGI program begins. It getsthe cookie from the form data, and starts contacting the serverall over again. This time, the program passes the existing cookieinstead of creating a new one.<P></UL><P CLASS=para>This is our strategy. Understanding this, you should not havemuch trouble following the code that is about to follow.</DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch10_07.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="ch10_09.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>Network News on the Web</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>Maintaining State with a Server</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>