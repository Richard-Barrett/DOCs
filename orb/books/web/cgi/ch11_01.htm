<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 11] Advanced and Creative CGI Applications</TITLE><META NAME="author" CONTENT="Shishir Gundavaram"><META NAME="date" CONTENT="Mon Mar 17 13:36:05 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="cgi programming"><META NAME="title" CONTENT="CGI Programming on the World Wide Web"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF" TEXT="#000000"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif" ALT="CGI Programming on the World Wide Web"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch10_10.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 11</b></td><td width=172 align=right valign=top><A HREF="ch11_02.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><H1 CLASS=chapter><A CLASS="TITLE" NAME="CGI-CHP-11">Advanced and Creative CGI Applications</A></H1><DIV CLASS=htmltoc><p><b>Contents:</b><br>Animated Clock<br><A HREF="ch11_02.htm">Game of Concentration</A><BR><A HREF="ch11_03.htm">Introduction to Imagemaps</A><BR><A HREF="ch11_04.htm">Calendar Manager</A><BR></DIV><P CLASS=para>In this final chapter of practical advice and code, we willlook at three applications: a simple animated clock, the game ofConcentration, and a Calendar Manager. All three of these examplesutilize a combination of the various techniques presented up tothis point.<DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="CGI-CHP-11-SECT-1">11.1 Animated Clock</A></h2><P CLASS=para>This example creates the effect of an animateddigital clock by repeatedly generating dynamic GIF images and sendingthem to the browser using server push (see the discussion in <A HREF="ch06_01.htm">Chapter 6, <i>Hypermedia Documents</i></A>). You can use the techniquespresented in this example to create CGI programs that continuouslydisplay such information as system load averages, stock prices,or sports scores. However, programs like these can heavily tax thehost machine, although they may be fun and entertaining. So youshould use them only if there is an absolute need to do so.<P CLASS=para>To summarize the method used in this example: First we checkthat the browser is Netscape Navigator, version 1.1 or higher. That'sbecause Netscape is the only browser that currently supports serverpush. We then generate a new image every few seconds and send itto the client. To create the image, we'll use the same <I CLASS=emphasis>gd</I>extension to Perl that we showed in <A HREF="ch06_01.htm">Chapter 6, <i>Hypermedia Documents</i></A>.We have to send the data as a special MIME typecalled <i CLASS=command>multipart/x-mixed-replace</i> so that theclient replaces each old image with the new one. Following the MIMEstandard, we send an "--End--" string at the end of each image.Here is the code:<DIV CLASS=screen><P><PRE>#!/usr/local/bin/perl5use GD;$| = 1;$font_length = 8;$font_height = 16;$boundary_string = "\n" . "--End" . "\n";$end_of_data = "\n" . "--End--" . "\n";</PRE></DIV><P CLASS=para>The program turns output bufferingoff by setting Perl's <I CLASS=emphasis>$|</I> variable. The boundarystrings for server push are defined.<DIV CLASS=screen><P><PRE>$delay_time = 5;$max_updates = 10;</PRE></DIV><P CLASS=para>The $<I CLASS=emphasis>delay_time</I> variable reflects thetime between image updates. The maximum number of updates performedby this program is set to 10. The reason for setting these variablesis so that the user does not tax the system by watching the updatesfor an infinite amount of time.<DIV CLASS=screen><P><PRE>print "HTTP/1.0 200 OK", "\n"; </PRE></DIV><P CLASS=para>ThisCGI script outputs the complete HTTP header (see<A HREF="ch03_01.htm">Chapter 3, <i>Output from the Common Gateway Interface</i></A>).Server push animation appears smooth only if buffering is turnedoff and a complete header is output.<DIV CLASS=screen><P><PRE>$browser = $ENV{'HTTP_USER_AGENT'};if ($browser =~ m#^Mozilla/(1\.[^0]|[2-9])#) {    print "Content-type: multipart/x-mixed-replace;boundary=End", "\n";    print $boundary_string;</PRE></DIV><P CLASS=para>This <I CLASS=emphasis>if</I>block runs if the browser is Netscape Navigator, version 1.1 orhigher.<DIV CLASS=screen><P><PRE>    for ($loop=0; $loop &lt; $max_updates; $loop++) {        &amp;display_time ();        print $boundary_string;        sleep ($delay_time);    }</PRE></DIV><P CLASS=para>The <I CLASS=emphasis>display_time</I>subroutine determines the current time, creates an image, outputsthe <i CLASS=command>image/gif</i> MIME type, anddisplays the image. The boundary string is sent to the browser indicatingthe end of image data. The <I CLASS=emphasis>sleep</I> command thenwaits for the specified amount of time.<DIV CLASS=screen><P><PRE>    &amp;display_time ("end");    print $end_of_data;</PRE></DIV><P CLASS=para>Once the loop is terminated,the <I CLASS=emphasis>display_time</I> subroutine is called one finaltime, with an argument. The "end" argument instructs the subroutineto draw the clock in a different way-as we will soon see. Finally,the last boundary string is sent to the browser.<DIV CLASS=screen><P><PRE>} else {    &amp;display_time ("end");}exit(0);</PRE></DIV><P CLASS=para>If the browser does not support server push, the <I CLASS=emphasis>display_time</I>subroutine is called just once to display a static image of thecurrent time.<P CLASS=para>The <I CLASS=emphasis>display_time</I>subroutine does most of the work for the program:<DIV CLASS=screen><P><PRE>sub display_time{    local ($status) = @_;    local ($seconds, $minutes, $hour, $ampm, $time, $time_length,           $x, $y, $image, $black, $color);    print "Content-type: image/gif", "\n\n";    ($seconds, $minutes, $hour) = localtime (time);    if ($hour &gt; 12) {            $hour -= 12;            $ampm = "pm";    } else {            $ampm = "am";    }    if ($hour == 0) {            $hour = 12;    }    $time = sprintf ("%02d:%02d:%02d %s", $hour, $minutes, $seconds, $ampm);</PRE></DIV><P CLASS=para>Thecurrent time is formatted and stored in the variable <I CLASS=emphasis>$time</I>.The output of this variable will look like this: <i CLASS=command>09:27:03pm</i>.<DIV CLASS=screen><P><PRE>    $time_length = length($time);    $x = $font_length * $time_length;    $y = $font_height;</PRE></DIV><P CLASS=para>The size of the image is calculated, based on the length ofthe <I CLASS=emphasis>$time</I> string multiplied by the font dimensions.<DIV CLASS=screen><P><PRE>    $image = new GD::Image ($x, $y);    $black = $image-&gt;colorAllocate (0, 0, 0);</PRE></DIV><P CLASS=para>Anew image is created with black as the background color.<DIV CLASS=screen><P><PRE>    if ($status eq "end") {        $color = $image-&gt;colorAllocate (0, 0, 255);        $image-&gt;transparent ($black);    } else {        $color = $image-&gt;colorAllocate (255, 0, 0);    }</PRE></DIV><P CLASS=para>If the argument passed to this scriptis "end," the color of the text is set to blue. In addition, blackis set as the transparent color. In other words, black will notappear in the image, and as a result the blue text will appear withoutany image border. If an argument was not passed, the text coloris set to red.<DIV CLASS=screen><P><PRE>    $image-&gt;string (gdLargeFont, 0, 0, $time, $color);    print $image-&gt;gif;}</PRE></DIV><P CLASS=para>Finally,the image is displayed to standard output. </DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch10_10.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="ch11_02.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>Forking/Spawning Child Processes</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>Game of Concentration</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>