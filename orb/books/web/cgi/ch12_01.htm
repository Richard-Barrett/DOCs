<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 12] Debugging and Testing CGI Applications</TITLE><META NAME="author" CONTENT="Shishir Gundavaram"><META NAME="date" CONTENT="Mon Mar 17 13:36:57 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="cgi programming"><META NAME="title" CONTENT="CGI Programming on the World Wide Web"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF" TEXT="#000000"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif" ALT="CGI Programming on the World Wide Web"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch11_04.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 12</b></td><td width=172 align=right valign=top><A HREF="ch12_02.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><H1 CLASS=chapter><A CLASS="TITLE" NAME="CGI-CHP-12">Debugging and Testing CGI Applications</A></H1><DIV CLASS=htmltoc><p><b>Contents:</b><br>Common Errors<br><A HREF="ch12_02.htm">Programming/System Errors</A><BR><A HREF="ch12_03.htm">Environment Variables</A><BR><A HREF="ch12_04.htm">Logging and Simulation</A><BR><A HREF="ch12_05.htm">CGI Lint-A Debugging/Testing Tool</A><BR><A HREF="ch12_06.htm">Set UID/GID Wrapper</A><BR></DIV><P CLASS=para>The hardest aspect of developing CGI applicationson the Web is the testing/debugging phase. The main reason for thedifficulty is that applications are being run across a network,with client and server interaction. When there are errors in CGIprograms, it is difficult to figure out where they lie.<P CLASS=para>In this chapter, we will discuss some of the common errorsin CGI script design, and what you can do to correct them. In addition,we will look at a debugging/lint tool for CGI applications, calledCGI Lint, written exclusively for this book.<DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="CGI-CHP-12-SECT-1">12.1 Common Errors</A></h2><P CLASS=para>Initially, we will discuss some of the simpler errors foundin CGI application design. Most CGI designers encounter these errorsat one time or another. However, they are extremely easy to fix.<DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="CGI-CHP-12-SECT-1.1">CGI Script in Unrecognized Directory</A></h3><P CLASS=para>Most serversrequire that CGI scripts reside in a special directory (<I CLASS=emphasis>/cgi-bin</I>),or have certain file extensions. If you try to execute a scriptthat does not follow the rules for a particular server, the serverwill simply retrieve and display the document, instead of executingit. For example, if you have the following two lines in your NCSAserver resource map configuration file (<I CLASS=emphasis>srm.conf</I>):<DIV CLASS=screen><P><PRE>ScriptAlias  /my-cgi-apps/ /usr/local/bin/httpd_1.4.2/cgi-bin/AddType      application/x-httpd-cgi   .cgi .pl</PRE></DIV><P CLASS=para>the server will execute only scripts with URLs that eithercontain the string "/my-cgi-apps," or have a file extension of <I CLASS=emphasis>.pl</I>or <I CLASS=emphasis>.cgi</I>. Take a look at the following URLsand figure out which ones the server will try to execute:<DIV CLASS=screen><P><PRE>http://some.machine.com/cgi-bin/clock.tclhttp://my.machine.edu/my-cgi-apps/clock.plhttp://your.machine.org/index.cgihttp://their.machine.net/cgi-bin/animation.pl</PRE></DIV><P CLASS=para>If you picked the last three, then you are correct! Let'slook at why this so. The first one will not get executed becausethe script is neither in a recognized directory (my-cgi-apps), nordoes it have a valid extension (<I CLASS=emphasis>.cgi</I> or <I CLASS=emphasis>.pl</I>).The second one refers to the correct CGI directory, while the lasttwo have valid extensions.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="CGI-CHP-12-SECT-1.2">Missing Interpreter Line</A></h3><P CLASS=para>If your CGIapplication is a script of some sort (a C Shell, Perl, etc.), itmust contain a line that begins with #! (a "sharp-bang," or "shebang"),or else the server will not know what interpreter to call to executethe script. You don't have to worry about this if your CGI programis written in C/C++, or any other language that creates a binary.This leads us to another closely related problem, as we will soonsee.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="CGI-CHP-12-SECT-1.3">File Permission Problems</A></h3><P CLASS=para>The CGI scriptmust be executable by the server. Most servers are set up to runwith the useridentification (UID) of "nobody," which means that your scriptshave to be world executable. The reason for this is that "nobody"has minimal privileges. You can check the permissions of your scripton UNIX systems by using the <I CLASS=emphasis>ls</I>command:<DIV CLASS=screen><P><PRE>% ls -ls /usr/local/bin/httpd_1.4.2/cgi-bin/clock.pl   4 -rwx------  1 shishir      3624 Aug 17 17:59 clock.pl*</PRE></DIV><P CLASS=para>The second field lists the permissions for the file. Thisfield is divided into three parts: the privileges for the owner,the group, and the world (from left to right), with the first letterindicating the type of the file: either a regular file, or a directory.In this example, the owner has sole permission to read, write, andexecute the script.<P CLASS=para>If you want the server (running as "nobody") to be able toexecute this script, you have to issue the following command:<DIV CLASS=screen><P><PRE>% chmod 755 clock.pl   4 -rwx--x--x  1 shishir      3624 Aug 17 17:59 clock.pl*</PRE></DIV><P CLASS=para>The <I CLASS=emphasis>chmod</I>command modifies the permissions for the file. The octal code of711 indicates read (octal 4), write (octal 2), and execute (octal1) permissions for the owner, and execute permissions for groupmembers and all other members.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="CGI-CHP-12-SECT-1.4">Malformed Header from Script</A></h3><P CLASS=para>All CGI applications must output a valid HTTPheader, followed by a blank line, before any other data. In otherwords, two newline characters have to be output after the header.Here is how the output should look:<DIV CLASS=screen><P><PRE>Content-type: text/html&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;Output from CGI Script&lt;/TITLE&gt;&lt;/HEAD&gt;...</PRE></DIV><P CLASS=para>The headers must be output before any other data, or the serverwill generate a server error with a status of 500. So make it ahabit to output this data as early in the script as possible. Tomake it easier for yourself, you can use a subroutine like the followingto output the correct information:<DIV CLASS=screen><P><PRE>sub output_MIME_header{    local ($type) = @_;    print "Content-type: ", $type, "\n\n";}</PRE></DIV><P CLASS=para>Just remember to call it at the beginning of your program(before you output anything else). Another problem related to thistopic has to do with how the script executes. If the CGI programhas errors, then the interpreter, or compiler, will produce an errormessage when trying to execute the program. These error messageswill inevitably be output before the HTTP header,and the server will complain.<P CLASS=para>What is the moral of this? Make sure you check your scriptfrom the command line before you try to execute it on the Web. Ifyou are using Perl, you can use the <I CLASS=emphasis>-wc</I> switchto check for syntax errors:<DIV CLASS=screen><P><PRE>% perl -wc clock.plsyntax error in file clock.pl at line 9, at EOFclock.pl had compilation errors.</PRE></DIV><P CLASS=para>If there are no errors (but there are warnings), the Perlinterpreter will display the following:<DIV CLASS=screen><P><PRE>% perl -wc clock.plPossible typo: "opt_g" at clock.pl line 9.Possible typo: "opt_u" at clock.pl line 9.Possible typo: "opt_f" at clock.pl line 9.clock.pl syntax OK</PRE></DIV><P CLASS=para>Warnings indicate such things as possible typing errors oruse of uninitialized variables. Most of the time, these warningsare benign, but you should still take the time to look into them.Finally, if there are no warnings or errors to be displayed, Perlwill output the following:<DIV CLASS=screen><P><PRE>% perl -wc clock.plclock.pl syntax OK</PRE></DIV><P CLASS=para>So it is extremely important to check to make sure the scriptruns without any errors on the command line before trying it outon the Web.</DIV></DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch11_04.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="ch12_02.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>Calendar Manager</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>Programming/System Errors</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>