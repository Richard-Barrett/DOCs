<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 12] 12.5 CGI Lint-A Debugging/Testing Tool</TITLE><META NAME="author" CONTENT="Shishir Gundavaram"><META NAME="date" CONTENT="Mon Mar 17 13:37:02 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="cgi programming"><META NAME="title" CONTENT="CGI Programming on the World Wide Web"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif" ALT="CGI Programming on the World Wide Web"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch12_04.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 12</b></td><td width=172 align=right valign=top><A HREF="ch12_06.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="CGI-CHP-12-SECT-5">12.5 CGI Lint-A Debugging/Testing Tool</A></h2><P CLASS=para>CGI Lint greatly simplifiesthe process of testing and debugging CGI applications. <A HREF="appe_01.htm">Appendix E, <i>Applications, Modules, Utilities, and Documentation</i></A>,lists where you can get CGI Lint.<P CLASS=para>Depending on the type of request (either GETor POST), either one or two auxiliary files arerequired by CGI Lint. The first is a configuration file, which shouldcontain a list of the environment variables in the following format:<DIV CLASS=screen><P><PRE>REQUEST_METHOD     =   GETQUERY_STRING       =   name=John Surge&amp;company=ABC Corporation!HTTP_ACCEPT        =   image/gif, image/x-xbitmap, image/jpeg, */*SERVER_PROTOCOL    =   HTTP/1.0REMOTE_ADDR        =   198.198.198.198SERVER_ROOT        =   /usr/local/bin/httpd_1.4.2DOCUMENT_ROOT      =   /usr/local/bin/httpd_1.4.2/publicGATEWAY_INTERFACE  =   CGI/1.1SCRIPT_NAME        =   /cgi-bin/abc.plSERVER_SOFTWARE    =   NCSA/1.4.2REMOTE_HOST        =   gateway.cgi.com</PRE></DIV><P CLASS=para>This format has an advantage over the previous one: You donot need to encode the query string. However, if you have either%, &amp;, or = characters in the query string, you need to escapethem by placing a "\" before them:<DIV CLASS=screen><P><PRE>QUERY_STRING       =   name=Joe\=Joseph&amp;company=JP \&amp; Play&amp;percentage=50\%</PRE></DIV><P CLASS=para>Or you can just use the encoded values of %25, %26, and %3dto represent the "%," "&amp;," and "=" characters, respectively.Now, you are ready to test out your CGI program:<DIV CLASS=screen><P><PRE>% CGI_Lint get.cfg</PRE></DIV><P CLASS=para>CGI Lint executes the script that is pointed to by the environmentvariables SCRIPT_NAME and SERVER_ROOT.In addition, you can use a data file to store query information.Here is an example:<DIV CLASS=screen><P><PRE>% CGI_Lint form.cfg form.data</PRE></DIV><P CLASS=para>The format for the data file should be:<DIV CLASS=screen><P><PRE>name = Joe\=Josephcompany = JP \&amp; Playpercentage = 50\%</PRE></DIV><P CLASS=para>If you already have data stored in QUERY_STRING,CGI Lint will process the data from both sources. In the case ofPOST requests, all you have to do is change theREQUEST_METHOD to "POST" andrun it in the same exact way as before:<DIV CLASS=screen><P><PRE>% CGI_Lint form.cfg form.data</PRE></DIV><P CLASS=para>In addition, you can test the multipart/form-dataencoding scheme (see <A HREF="appd_01.htm">Appendix D, <i>CGI Lite</i></A>),which is a new addition to the Web. For multipart MIMEdata, you need to add the following line to the configuration file:<DIV CLASS=screen><P><PRE>CONTENT_TYPE = multipart/form-data</PRE></DIV><P CLASS=para>Normally, multipart datacontains boundary strings between fields, but you do not have togo to the trouble of inserting the numerous multipart headers. CGILint takes care of all that for you. Now, here is the format forthe data file:<DIV CLASS=screen><P><PRE>name = Joe = Josephcompany = JP &amp; Playpercentage = 50%review = */usr/shishir/rev.dat</PRE></DIV><P CLASS=para>You would execute the script in the same way as you did allthe others. CGI Lint reads through the fields and creates a multipartMIME body:<DIV CLASS=screen><P><PRE>-----------------------------78198732381Content-disposition: form-data; name="name"Joe = Joseph-----------------------------78198732381Content-disposition: form-data; name="company"JP &amp; Play-----------------------------78198732381Content-disposition: form-data; name="percentage"50%-----------------------------78198732381Content-disposition: form-data; name="review"; filename="/usr/ shishir/rev.dat"..(contents of the file /home/shishir/rev.dat)..-----------------------------78198732381--</PRE></DIV><P CLASS=para>One thing to note here is the last line of the data file.The asterisk instructs the tool to include the information storedin the file <I CLASS=emphasis>/usr/shishir/review.dat</I>. That isone of the powerful features of multipart messages: it allows usersto upload files to the server.<P CLASS=para>In addition to simulating the server data streams, CGI Lintalso checks a number of attributes and properties before runningthe script.<DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="CGI-CHP-12-SECT-5.1">CGI Lint in Action</A></h3><P CLASS=para>Let's take a simple CGI program and run it through CGI Lint,and see what happens. Here is the program-it should be familiarto you, as it was introduced at the end of <A HREF="ch07_01.htm">Chapter 7, <i>Advanced Form Applications</i></A>:<DIV CLASS=screen><P><PRE>#!/usr/local/bin/perl&amp;parse_form_data(*simple);$user = $simple{'user'};print "Content-type: text/plain", "\n\n";print "Here are the results of your query: ", "\n";print `/usr/ucb/finger $user`;print "\n";exit (0);</PRE></DIV><P CLASS=para>This program outputs finger information about the specifieduser. Here is the form that is associated with the program:<DIV CLASS=screen><P><PRE>&lt;FORM ACTION="/cgi-bin/finger.pl" METHOD="POST"&gt;&lt;INPUT TYPE="text" NAME="user" SIZE=40&gt;&lt;INPUT TYPE="submit" VALUE="Get Information"&gt;&lt;/FORM&gt;</PRE></DIV><P CLASS=para>Now, let's create the configuration and data files, to beused with CGI Lint. The configuration file must contain the followinglines:<DIV CLASS=screen><P><PRE>REQUEST_METHOD = POSTSERVER_ROOT = /usr/local/bin/httpd_1.4.2	SCRIPT_NAME = /cgi-bin/finger.pl</PRE></DIV><P CLASS=para>Since the form passes the information to the program usingPOST, we need to create a data file to hold thepost data. It needs to consist of only one line:<DIV CLASS=screen><P><PRE>user = shishir</PRE></DIV><P CLASS=para>This is equivalent to the user entering "shishir" in the userfield in the form. That is all that needs to be done. Here is howyou would execute CGI Lint (assuming that the configuration fileis called <I CLASS=emphasis>finger.cfg</I>, and the data file iscalled <I CLASS=emphasis>finger.dat</I>):<DIV CLASS=screen><P><PRE>% CGI_Lint finger.cfg finger.dat</PRE></DIV><P CLASS=para>CGI Lint will output the following information:<DIV CLASS=screen><P><PRE>While looking at your Perl script for possible security holes and"open" commands, I came across the following statements that *might*constitute a security breach:================================================================================Check the *backtics* on line: print `/usr/ucb/finger $user`;Variable(s) *may* not be secure!================================================================================It looks as though your script has no bugs (at least, on the surface),so here is the output you have been waiting for:================================================================================Here are the results of your query: &lt;BR&gt;&lt;HR&gt;Login name: shishir                     In real life: Shishir GundavaramDirectory: /home/shishir                Shell: /usr/local/bin/tcshOn since Oct 26 23:11:27 on ttyp0 from nmrc.bu.eduMail last read Mon Oct 27 00:03:54 1995No Plan.&lt;HR&gt;================================================================================</PRE></DIV><P CLASS=para>Itwill display the output generated by the CGI program. It also outputsvarious other information, including possible security holes. Hereis a list of the <I CLASS=emphasis>exact</I> informational messagesthat CGI Lint outputs:<P><UL CLASS=itemizedlist><li CLASS=listitem>The configuration file (that holdsthe environment variable data) could not be found. This file isneeded to run this program. Please check and try again.<P><li CLASS=listitem>The NCSA server resource mapconfiguration file (<I CLASS=emphasis>srm.conf</I>) could not befound. This might be due to the way your server is setup. In orderto rectify the situation, define a variable called SERVER_ROOT(with the correct server root directory) in the configuration file,and try again.<P><li CLASS=listitem>Sorry, either the file extension or the path toyour CGI script is not valid. Check both of these to make sure theyare configured in the NCSA server resource mapconfiguration (<I CLASS=emphasis>srm.conf</I>) file.<P><li CLASS=listitem>You do not have the necessary privileges to runthe specified script. Use the <I CLASS=emphasis>chmod</I> commandto change the permissions, and try again.<P><li CLASS=listitem>The CGI program that is specified in the configurationfile does not exist. Please check the path, and try again.<P><li CLASS=listitem>The CGI program that is specified could not be opened.Please check the permissions and try again.<P><li CLASS=listitem>The interpreter you specified either does not exist,is not readable, or is not a binary file. Please check the path,and try again.<P><li CLASS=listitem>The script you specified does not have a headerline that points to a interpreter that will execute the script.The header line should be something like this:<P CLASS=para><I CLASS=emphasis>#!/usr/local/bin/perl</I><P><li CLASS=listitem>Oops! The script you wrote had errors. I will listall the bugs here. Please fix them and try again. Here they are:<P><li CLASS=listitem>While looking at your Perl script for possible securityholes and "open" commands, I came across the following *errors*:<P><li CLASS=listitem>While looking at your Perl script for possible securityholes and "open" commands, I came across the following statementsthat *might* constitute a security breach:<P><li CLASS=listitem>The data file (that holds the potential form data)could not be found. Please check the file specification and tryagain.<P><li CLASS=listitem>A data file to store the simulated POSTdata cannot be created. Please check to see if you have privilegesto write to the <I CLASS=emphasis>/tmp</I> directory.<P><li CLASS=listitem>One of the filenames that you listed in the simulatedmultipart data file does not exist. Be sure to check all possiblefields, and try again.<P><li CLASS=listitem>The CONTENT_TYPE variable inyour data file is not set correctly. You do not have to set a valuefor this, as I will default it to:<P CLASS=para><I CLASS=emphasis>application/x-www-form-urlencoded</I><P CLASS=para>But, if you do set a value for this variable, it has to beeither the one mentioned above, or:<P CLASS=para><I CLASS=emphasis>multipart/form-data</I><P CLASS=para>If you specify an encoding type of <I CLASS=emphasis>multipart/form-data</I>in the configuration file, I will create a random boundary, andset the CONTENT_TYPE to the following:<P CLASS=para><I CLASS=emphasis>multipart/form-data; boundary=--------------SomeRandom Boundary</I><P><li CLASS=listitem>The REQUEST_METHOD variable inyour data file is not set correctly. It has to have a value of eitherGET or POST.<P><li CLASS=listitem>Your NPH (Non-Parsed-Header) script does not outputthe correct HTTP response. The first line hasto be something like:<P CLASS=para><i CLASS=command>HTTP/1.0 200 OK</i><P><li CLASS=listitem>A serious error! Either you are not outputting a**BLANK** line after the HTTPheaders, *OR* you are trying to send invalid (or undefined) HTTPheaders. Please check the output of your script and try again.<P><li CLASS=listitem>It looks as though your script has no bugs (at least,on the surface), so here is the output you have been waiting for:<P><li CLASS=listitem>The *system* command was detected in your script.Make sure to turn output buffering off by adding the following lineto your script:<P CLASS=para>$| = 1;<P></UL></DIV></DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch12_04.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="ch12_06.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>Logging and Simulation</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>Set UID/GID Wrapper</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>