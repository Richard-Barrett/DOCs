<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 11] 11.3 Server-Push Documents</TITLE><META NAME="author" CONTENT="Chuck Musciano and Bill Kennedy"><META NAME="date" CONTENT="Mon Mar 17 09:03:25 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="HTML"><META NAME="title" CONTENT="HTML: The Definitive Guide"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif" ALT="HTML: The Definitive Guide"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch11_02.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 11</b></td><td width=172 align=right valign=top><A HREF="ch12_01.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="USING-HTML-CH11-SECT-3">11.3 Server-Push Documents</A></h2><P CLASS=para><A NAME="CH11.SERVER1"></A>Server-push dynamic documents are driven from the server side. Theclient-server connection remains open after an initial transfer ofdata, and the server periodically sends new data to the client,updating the document's display. Server-push is made possible bysome special programming, not special HTML embeddedtags, on the server side, and is enabled by the multipart mixed-mediatype feature of Multipurpose Internet MailExtensions (MIME), the computer industry'sstandard for multimedia document transmission over the Internet.<DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="USING-HTML-CH11-SECT-3.1">The Multipart/Mixed-Media Type</A></h3><P CLASS=para><A NAME="CH11.MULTIPART"></A>As we mentioned earlier in this chapter in the discussion ofclient-pull dynamic documents, the HTTP serversends a two-part document to the client browser: a header describingthe document followed by the document itself. The document'sMIME type is part of the HTTPheader field. Normally, the server includes <tt CLASS=literal>Content-type:text/html</tt> in an HTML document'sheader before sending its actual contents. By changing that contenttype to multipart/mixed-media, you can send anHTML document or several documents in severalpieces, rather than in a single chunk. Only Netscape, though,understands and responds to the multipart header field; the otherbrowsers either ignore additional parts or refuse the documentaltogether.<P CLASS=para>The general form of the MIME multipart mixed-mediacontent type header looks like this:<P CLASS=para><DIV CLASS=screen><P><PRE>Content-type: multipart/mixed;boundary="SomeRandomString"</PRE></DIV><P CLASS=para>This HTTP header component tells the Netscapeclient to expect the document to follow in several parts and to lookfor <tt CLASS=literal>SomeRandomString</tt>, which separates the parts. Thatboundary string should be unique and not appear anywhere in any of theindividual parts. The  content of the server-to-clienttransmission looks like this:<P CLASS=para><DIV CLASS=screen><P><PRE>--SomeRandomStringContent-type: text/plainData for the first part--SomeRandomStringContent-type: text/plainData for the second part--SomeRandomString--</PRE></DIV><P CLASS=para>The above example has two document parts, both plain text. The serversends each part preceded by our <tt CLASS=literal>SomeRandomString</tt>document-boundary delimiter preceded by two dashes, followed by the<tt CLASS=literal>Content-type</tt> field, and then the data for eachpart. The last transmission from server to client is a singlereference to the boundary string followed by two more dashesindicating that this was the last part of the document.<P CLASS=para>Upon receipt of each part, the Netscape browser automatically adds theincoming data to the current document display.<P CLASS=para>You've got to write a special HTTP server application to enable this type of server-push dynamic document; one that creates the special HTTP MIME multipart/mixed header and sends the various documents separated by the boundary delimiter.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="USING-HTML-CH11-SECT-3.2">Multipart Mixed-Replace-Media Type</A></h3><P CLASS=para>Server-push dynamic document authors also may use an experimentalvariant of the MIME multipart mixed-media contentknown as <I CLASS=emphasis>multipart mixed-replace-media</I>. Thedifference between this special content-type and its predecessor isthat, rather than simply adding content to the current display, the``replace'' version has each subsequent part replace thepreceding one.<P CLASS=para>The format of the mixed-replace HTTP header is verysimilar to its multipart mixed counterpart; the only difference is inthe <tt CLASS=literal>Content-type</tt>:<P CLASS=para><DIV CLASS=screen><P><PRE>multipart/x-mixed-replace;boundary=SomeRandomString</PRE></DIV><P CLASS=para>All other rules regarding the format of the multipart content are thesame, including the boundary string used to separate the parts and theindividual Content-type fields for each part of the content.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="USING-HTML-CH11-SECT-3.3">Exploiting Multipart Documents</A></h3><P CLASS=para>It is easy to see how you can use the two specialMIME multipart content types to createserver-push dynamic documents. By delaying the time between parts, youmight create an automatically scrolling message in the Netscapebrowser window. Or by replacing portions of the document through thex-mixed-replace MIME type, you might include adynamic billboard in your document, perhaps even animation.<P CLASS=para>Note in particular, that server-push multipart documents need notapply only to HTML or other plain textdocuments. Images, too, are a MIME-encoded contenttype, so you can have the HTTP server transmitseveral images in sequence as parts of a multipart transmission. Sinceyou may also have each new image replace the previous one, the resultis crude animation. Done correctly over a network of sufficientbandwidth, the effect can be quite satisfying.<DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="USING-HTML-CH11-SECT-3.3.1">Efficiency considerations</A></h4><P CLASS=para>Server-push documents keep a connection open between the client andserver for the duration of the dynamic document's activity. Forsome servers, this may consume extra network resources and may alsorequire that several processes remain active, servicing the openconnection. Make sure the server-push process and, hence, theclient-server connection expire upon completion or after some idleperiod. Otherwise, someone will inadvertently camp on an endlesslycycling server-push document and choke off other users' accessto the server.<P CLASS=para>Before choosing to implement server-push documents, make sure yourserver can support the added processing and networking load. Keep inmind that many simultaneous server-push documents may be active,multiplying the impact on the server and seriously affecting overallserver performance.</DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="USING-HTML-CH11-SECT-3.4">Creating a Server-Push Document</A></h3><P CLASS=para>You create a special application that runs with theHTTP server to enable server-push dynamicdocuments. The application must create the specialMIME Content-type header fieldthat notifies the Netscape browser that the following document comesin several parts--added to or replacing a portion of the currentdocument. The application must also create the appropriate boundarydelimiter and send the Content-type header and data for each part,perhaps also delaying transmission of each part by some period oftime. You will need to consult your server's documentation tolearn how to create a server-side application that can be invoked byaccessing a specific URL on the server. With someservers this may be as simple as placing the application in a certaindirectory on the server. With others, you may have to bend overbackwards and howl at the moon on certain days.<DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="USING-HTML-CH11-SECT-3.4.1">Server-push example application for NCSA httpd</A></h4><P CLASS=para><A NAME="CH11.HTTPD1"></A><A NAME="CH11.HTTPD2"></A>The NCSA <I CLASS=emphasis>httpd</I> server runs onmost UNIX systems. Administrators usually configurethe server to run server-side applications stored in a directory named<tt CLASS=replaceable><i>cgi-bin</i></tt>.<P CLASS=para>The following is a simple UNIX shell script thatillustrates how to send a multipart document to a Netscape client viaNCSA <I CLASS=emphasis>httpd</I>:[3]<blockquote class=footnote><P CLASS=para>[3]          It is an idiosyncrasy of NCSA         <I CLASS=emphasis>httpd</I> that no spaces are allowed in the         Content-type field that precedes your multipart         document. Some authors like to place a space after the         semicolon and before the boundary keyword. Don't do         this with NCSA <I CLASS=emphasis>httpd</I>;         run the whole Content-type together without spaces to get the         server to recognize the correct multipart content type.</blockquote><P CLASS=para><DIV CLASS=screen><P><PRE>#!/bin/sh## Let the client know we are sending a multipart document# with a boundary string of "NEXT"#echo "HTTP/1.0 200"echo "Content-type: multipart/x-mixed-replace;boundary=NEXT"echo ""echo "--NEXT"while truedo## Send the next part, followed by a boundary string# Then sleep five seconds before repeating# echo "Content-type: text/html" echo "" echo "&lt;html&gt;" echo "&lt;head&gt;" echo "&lt;title&gt;Processes On This Server&lt;/title&gt;" echo "&lt;/head&gt;" echo "&lt;body&gt;" echo "&lt;h3&gt; Processes On This Server&lt;/h3&gt;" echo "Date:" date echo "&lt;p&gt;" echo "&lt;pre&gt;" ps -el echo "&lt;/pre&gt;" echo "&lt;/body&gt;" echo "&lt;/html&gt;" echo "--NEXT" sleep 5done</PRE></DIV><P CLASS=para>In a nutshell, this example script updates a list of the processesrunning on the server machine every five seconds. The update continuesuntil the browser breaks the connection by moving on to anotherdocument, or after completing 60 cycles (about five minutes).<P CLASS=para>We offer this shell script example to illustrate the basic logicbehind any server-push document generator. In reality, you shouldcreate your server-side applications using a more conventionalprogramming language like Perl or C. The applications run moreefficiently and can better detect when the client has severed theconnection to the server.</DIV></DIV></DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch11_02.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" BORDER=0></a></td><td width=172 align=right valign=top><A HREF="ch12_01.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>Client-Pull Documents</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>Tips, Tricks, and Hacks</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>