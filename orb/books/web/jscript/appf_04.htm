<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Appendix F] F.4 Specification</TITLE><META NAME="author" CONTENT="David Flanagan"><META NAME="date" CONTENT="Tue Apr 22 18:37:12 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="JavaScript"><META NAME="title" CONTENT="JavaScript: The Definitive Guide"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif" ALT="Javascript: The Definitive Guide"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="appf_03.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Appendix F</b></td><td width=172 align=right valign=top><A HREF="appf_05.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="appf-SECT1-AUTOID.4">F.4 Specification</A></h2><P CLASS=para>  A cookie is introduced to the client by including a  <tt CLASS=literal>Set-Cookie</tt> header as part of an HTTP response;  typically this will be generated by a CGI script.  <DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="appf-SECT2-AUTOID.1">Syntax of the Set-Cookie HTTP Response Header</A></h3><P CLASS=para>    This is the format a CGI script would use to add to the HTTP headers    a new piece of data which is to be stored by the client for later    retrieval.    <DIV CLASS=programlisting><P><PRE>Set-Cookie: <tt CLASS=replaceable><i>name</i></tt>=<tt CLASS=replaceable><i>value</i></tt>; expires=<tt CLASS=replaceable><i>date</i></tt>;path=<tt CLASS=replaceable><i>path</i></tt>; domain=<tt CLASS=replaceable><i>domain_name</i></tt>; secure</PRE></DIV>   <P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal><tt CLASS=replaceable><i>name</i></tt>=<tt CLASS=replaceable><i>value</i></tt></tt><DD><P CLASS=para>       This string is a sequence of characters excluding       semicolons, commas, and white space. If there is a need to place       such data in the name or value, some encoding method such as       URL style <tt CLASS=literal>%XX</tt> encoding is recommended,       though no encoding is defined or required.<P CLASS=para>This is       the only required attribute on the       <tt CLASS=literal>Set-Cookie</tt> header.      <p><DT CLASS=varlistentry><tt CLASS=literal>expires=<tt CLASS=replaceable><i>date</i></tt></tt><DD><P CLASS=para>       The <tt CLASS=literal>expires</tt> attribute specifies a date       string that defines the valid lifetime of that cookie. Once       the expiration date has been reached, the cookie will no       longer be stored or given out.<P CLASS=para>The date string is       formatted as:       <DIV CLASS=programlisting><P><PRE>Wdy, DD-Mon-YYYY HH:MM:SS GMT</PRE></DIV><P CLASS=para>       This is based on RFC 822, RFC 850, RFC 1036, and RFC 1123,       with the variations that the only legal time zone is GMT and       the separators between the elements of the date must be       dashes.      <P CLASS=para>       <tt CLASS=literal>expires</tt> is an optional       attribute. If not specified, the cookie will expire when the       user's session ends.      <DIV CLASS=note><P CLASS=note><BLOCKQUOTE><P><B>NOTE:</B> <P CLASS=para>        There is a bug in Netscape Navigator version 1.1 and earlier.        Only cookies whose <tt CLASS=literal>path</tt> attribute is set        explicitly to "/" will be properly saved between sessions if        they have an <tt CLASS=literal>expires</tt> attribute.       </blockquote><P></DIV><p><DT CLASS=varlistentry><tt CLASS=literal>domain=<tt CLASS=replaceable><i>domain_name</i></tt></tt><DD><P CLASS=para>       When searching the cookie list for valid cookies, a comparison       of the <tt CLASS=literal>domain</tt> attributes of the cookie is       made with the Internet domain name of the host from which the       URL will be fetched. If there is a tail match, then the       cookie will go through <tt CLASS=literal>path</tt> matching to see       if it should be sent. "Tail matching" means that       <tt CLASS=literal>domain</tt> attribute is matched against the       tail of the fully qualified domain name of the host. A       <tt CLASS=literal>domain</tt> attribute of acme.com would match host names       anvil.acme.com as well       as shipping.crate.acme.com.<P CLASS=para>Only hosts within the specified domain can set a cookie       for a domain and domains must have at least two (2) or three       (3) periods in them to prevent domains of the form:       .com, .edu, and va.us. Any domain that falls       within one of the seven special top level domains listed below       only require two periods. Any other domain requires at least       three. The seven special top level domains are:       <I CLASS=emphasis>com</I>, <I CLASS=emphasis>edu</I>,       <I CLASS=emphasis>net</I>, <I CLASS=emphasis>org</I>,       <I CLASS=emphasis>gov</I>, <I CLASS=emphasis>mil</I>, and       <I CLASS=emphasis>int</I>.      <P CLASS=para>       The default value of <tt CLASS=literal>domain</tt> is the host       name of the server which generated the cookie       response.      <p><DT CLASS=varlistentry><tt CLASS=literal>path=<tt CLASS=replaceable><i>path</i></tt></tt><DD><P CLASS=para>       The <tt CLASS=literal>path</tt> attribute is used to specify the       subset of URLs in a domain for which the cookie is valid. If a       cookie has already passed <tt CLASS=literal>domain</tt> matching,       then the pathname component of the URL is compared with the       path attribute, and if there is a match, the cookie is       considered valid and is sent along with the URL request. The       path <i CLASS=filename>/foo</i> would match       <i CLASS=filename>/foobar</i> and       <i CLASS=filename>/foo/bar.html</i>. The path       <i CLASS=filename>/</i> is the most general path.<P CLASS=para>If the <tt CLASS=literal>path</tt> is not specified, it as       assumed to be the same path as the document being described by       the header which contains the cookie.      <p><DT CLASS=varlistentry><tt CLASS=literal>secure</tt><DD><P CLASS=para>       If a cookie is marked <tt CLASS=literal>secure</tt>, it will only       be transmitted if the communications channel with the host is       a secure one. Currently this means that secure cookies will       only be sent to HTTPS (HTTP over SSL) servers.<P CLASS=para>If       <tt CLASS=literal>secure</tt> is not specified, a cookie is       considered safe to be sent in the clear over unsecured       channels.      </DL></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="appf-SECT2-AUTOID.2">Syntax of the Cookie HTTP Request Header</A></h3><P CLASS=para>    When requesting a URL from an HTTP server, the browser will match    the URL against all cookies and if any of them match, a line    containing the name/value pairs of all matching cookies will be    included in the HTTP request. Here is the format of that line:    <DIV CLASS=programlisting><P><PRE>Cookie: <tt CLASS=replaceable><i>NAME1=OPAQUE_STRING1</i></tt>; <tt CLASS=replaceable><i>NAME2=OPAQUE_STRING2 ...</i></tt></PRE></DIV>   </DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="appf-SECT2-AUTOID.3">Additional Notes</A></h3><UL CLASS=itemizedlist><li CLASS=listitem>     Multiple <tt CLASS=literal>Set-Cookie</tt> headers can be issued in     a single server response.    <P><li CLASS=listitem>     Instances of the same path and name will overwrite each other,     with the latest instance taking precedence. Instances of the     same path but different names will add additional mappings.    <P><li CLASS=listitem>     Setting the path to a higher-level value does not override other     more specific path mappings. If there are multiple matches for a     given cookie name, but with separate paths, all the matching     cookies will be sent. (See examples below.)    <P><li CLASS=listitem>     The <tt CLASS=literal>expires</tt> header lets the client know when     it is safe to purge the mapping but the client is not required to     do so. A client may also delete a cookie before its expiration     date arrives if the number of cookies exceeds its internal     limits.    <P><li CLASS=listitem>     When sending cookies to a server, all cookies with a more specific     path mapping should be sent before cookies with less specific path     mappings. For example, a cookie "name1=foo" with a path mapping     of <i CLASS=filename>/</i> should be sent after a cookie     "name1=foo2" with a path mapping of <i CLASS=filename>/bar</i> if     they are both to be sent.    <P><li CLASS=listitem>     There are limitations on the number of cookies that a client can     store at any one time. This is a specification of the minimum     number of cookies that a client should be prepared to receive and     store:    <P><UL CLASS=itemizedlist><li CLASS=listitem>       300 total cookies;      <P><li CLASS=listitem>       4 kilobytes per cookie, where the name and the OPAQUE_STRING       combine to form the 4 kilobyte limit;      <P><li CLASS=listitem>       20 cookies per server or domain (note that completely       specified hosts and domains are treated as separate entities       and have a 20-cookie limitation for each, not combined).      <P></UL><P CLASS=para>     Servers should not expect clients to be able to exceed these     limits. When the 300-cookie limit or the 20-cookie-per-server     limit is exceeded, clients should delete the least recently used     cookie. When a cookie larger than 4 kilobytes is encountered the     cookie should be trimmed to fit, but the name should remain intact     as long as it is less than 4 kilobytes.    <P><li CLASS=listitem>     If a CGI script wishes to delete a cookie, it can do so by     returning a cookie with the same name, and an     <tt CLASS=literal>expires</tt> time which is in the past. The path     and name must match exactly in order for the expiring cookie to     replace the valid cookie. This requirement makes it difficult     for anyone but the originator of a cookie to delete a cookie.    <P><li CLASS=listitem>     When caching HTTP, as a proxy server might do, the     <tt CLASS=literal>Set-cookie</tt> response header should never be cached.    <P><li CLASS=listitem>     If a proxy server receives a response which contains a     <tt CLASS=literal>Set-cookie</tt> header, it should propagate the     <tt CLASS=literal>Set-cookie</tt> header to the client, regardless of     whether the response was 304 (Not Modified) or 200 (OK).    <P CLASS=para>     Similarly, if a client request contains a     <tt CLASS=literal>Cookie:</tt> header, it should be forwarded through     a proxy, even if the conditional     <tt CLASS=literal>If-modified-since</tt> request is being made.     <P></UL></DIV></DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="appf_03.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="appf_05.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>Overview</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>Examples</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>