<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 3] 3.2 Numbers</TITLE><META NAME="author" CONTENT="David Flanagan"><META NAME="date" CONTENT="Thu Apr 24 13:13:50 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="JavaScript"><META NAME="title" CONTENT="JavaScript: The Definitive Guide"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif" ALT="Javascript: The Definitive Guide"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch03_01.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 3</b></td><td width=172 align=right valign=top><A HREF="ch03_03.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="ch03-SECT1-AUTOID.2">3.2 Numbers</A></h2><P CLASS=para><A NAME="CH03.NUM1"></A><A NAME="CH03.NUM2"></A>  Numbers are the most basic data type there is, and require very  little explanation. As we saw in <A HREF="ch02_01.htm">Chapter 2, <i>Lexical Structure</i></A>, numeric literals can be integer or  floating-point, and integers can be expressed in decimal, octal, or  hexadecimal notation.  JavaScript differs from programming languages  like C and Java in that it does not make a distinction between  integer value and floating point values. All numbers in JavaScript  are represented as floating-point values. JavaScript represents  numbers using the standard 8-byte IEEE floating-point numeric  format, which means that it can represent numbers as large as  +/-1.7976931348623157*10^308,  and numbers as small as  +/-2.2250738585072014*10^-308.[2]    <blockquote class=footnote><P CLASS=para>[2] 	  This format will be familiar to Java programmers as the	  format of the <tt CLASS=literal>double</tt> type. It is also	  the <tt CLASS=literal>double</tt> format used in almost all	  modern implementations of C and C++.	</blockquote><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch03-SECT2-AUTOID.3">Arithmetic and Mathematical Functions</A></h3><P CLASS=para>	JavaScript programs work with numbers using the arithmetic	operators that the language provides. These include	<tt CLASS=literal>+</tt> for addition, <tt CLASS=literal>-</tt> for	subtraction, <tt CLASS=literal>*</tt> for multiplication, and	<tt CLASS=literal>/</tt> for division. Full details on these and	other arithmetic operators are in <A HREF="ch04_01.htm">Chapter 4, <i>Expressions and Operators</i></A>.      <P CLASS=para>	In addition to these basic arithmetic operations, JavaScript	supports more complex mathematical operations through a large	number of mathematical functions that are a core part of the	language. For convenience, these functions are all stored as	properties of a single object named <tt CLASS=literal>Math</tt>, and	so we use always use the literal name <tt CLASS=literal>Math</tt> to	access them. For example, to compute the sine of the numeric	value <tt CLASS=literal>x</tt>, we would write code like this:	<DIV CLASS=programlisting><P><PRE>sine_of_x = Math.sin(x);</PRE></DIV>	And to compute the square-root of a numeric expression, we might	use code like this (note the use of the <tt CLASS=literal>*</tt>	operator for multiplication):	<DIV CLASS=programlisting><P><PRE>hypot = Math.sqrt(x*x + y*y);</PRE></DIV>	See the Math object and subsequent listings in the reference	section of this book for full details on all the mathematical	functions supported by JavaScript.      </DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch03-SECT2-AUTOID.4">Special Numeric Values</A></h3><P CLASS=para>	There are several special numeric values used by JavaScript.	When a floating-point value becomes larger than the largest	representable type, the result is a special infinity value,	which JavaScript prints as <tt CLASS=literal>Infinity</tt>. Similarly,	when a negative value becomes more negative than the most	negative representable number, the result is negative infinity,	printed as <tt CLASS=literal>-Infinity</tt>. (Internet Explorer 3.0	prints these special infinity values in a less intuitive	fashion; this will be fixed.)      <P CLASS=para>	Another special JavaScript numeric value is returned when a	mathematical operation (such as division by zero) yields an	undefined result or an error. In this case, the result is the	special Not-a-Number value, printed as <tt CLASS=literal>NaN</tt>.	The special Not-a-Number value has special behavior: it does	not compare equal to any number, including itself!  For this	reason, a special function <tt CLASS=literal>isNaN()</tt>	is required to test for this value. In Navigator 2.0, the	<tt CLASS=literal>NaN</tt> value and the	<tt CLASS=literal>isNaN()</tt> do not work correctly on	Windows and other platforms. On 2.0 Windows platforms, 0 is	returned instead of <tt CLASS=literal>NaN</tt> when a numeric	value is undefined.  Similarly, <tt CLASS=literal>NaN</tt> does	not work in Internet Explorer 3.0, although it will in future	versions. In IE 3.0, <tt CLASS=literal>isNaN()</tt> always returns	<tt CLASS=literal>false</tt>, and functions return 0 instead of	<tt CLASS=literal>NaN</tt>.      <P CLASS=para>	In Navigator 3.0 (but not IE 3.0), there are constants defined	for each of these special numeric values. These constants are	listed in <A HREF="ch03_02.htm#JSCRIPT-CH-DATATYPES-TAB-CONSTANTS">Table 3.1</A>.      <P><DIV CLASS=table><TABLE><CAPTION><A CLASS="TITLE" NAME="JSCRIPT-CH-DATATYPES-TAB-CONSTANTS">Table 3-1: Special Numeric Constants</A></CAPTION><TR CLASS=row><TH ALIGN="left">Constant</TH><TH ALIGN="left">Meaning</TH></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>Number.MAX_VALUE</tt></TD><TD ALIGN="left">Largest representable number</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>Number.MIN_VALUE</tt></TD><TD ALIGN="left">Most negative representable number</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>Number.NaN</tt></TD><TD ALIGN="left">Special not-a-number value</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>Number.POSITIVE_INFINITY</tt></TD><TD ALIGN="left">Special value to represent infinity</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>Number.NEGATIVE_INFINITY</tt></TD><TD ALIGN="left">Special value to represent negative infinity</TD></TR></TABLE><P></DIV></DIV></DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch03_01.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="ch03_03.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>Variables</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>Strings</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>