<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 3] 3.3 Strings</TITLE><META NAME="author" CONTENT="David Flanagan"><META NAME="date" CONTENT="Thu Apr 24 13:13:51 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="JavaScript"><META NAME="title" CONTENT="JavaScript: The Definitive Guide"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif" ALT="Javascript: The Definitive Guide"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch03_02.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 3</b></td><td width=172 align=right valign=top><A HREF="ch03_04.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="ch03-SECT1-AUTOID.3">3.3 Strings</A></h2><P CLASS=para><A NAME="CH03.STRINGS1"></A>      A string is a string of letters, digits, punctuation characters,      and so on--it is the JavaScript data type for representing text.      As we saw in <A HREF="ch02_01.htm">Chapter 2, <i>Lexical Structure</i></A>, string literals may      be included in your programs by enclosing them in matching pairs      of single or double quotes.    <P CLASS=para>      One of the built-in features of JavaScript is the ability to      concatenate strings. If you use the <tt CLASS=literal>+</tt> operator      with numbers, it adds them. But if you use this operator on      strings, it joins them by appending the second to the first. For      example:       <DIV CLASS=programlisting><P><PRE>msg = "Hello, " + "world";   //<tt CLASS=replaceable><i> produces the string "Hello, world"</i></tt>greeting = "Welcome to my home page," + " " + name;</PRE></DIV>    <P CLASS=para>      To determine the length of a string--the number of characters it      contains--you use the <tt CLASS=literal>length</tt> property of the      string. If the variable <tt CLASS=literal>s</tt> contains a string,      you access its length like this:      <DIV CLASS=programlisting><P><PRE>s.length</PRE></DIV>      There are a number of methods that you can use to operate on      strings. For example, to find out what the last character of a      string <tt CLASS=literal>s</tt> is, you could use:      <DIV CLASS=programlisting><P><PRE>last_char = s.charAt(s.length - 1)</PRE></DIV>      To extract the second, third, and fourth characters from a      string <tt CLASS=literal>s</tt>, you would write:      <DIV CLASS=programlisting><P><PRE>sub = s.substring(1,4);</PRE></DIV>      To find the position of the first letter `a'      in a string <tt CLASS=literal>s</tt>, you could use:      <DIV CLASS=programlisting><P><PRE>i = s.indexOf('a');</PRE></DIV>      There are quite a few other methods you can use to manipulate      strings. You'll find full documentation of these methods in the      reference section of this book, under the headings "String",      "String.charAt", and so on.    <P CLASS=para>      When we introduce the object data type below, you'll see that      object properties and methods are used in the same way that      string properties and methods are used in the examples above.      This does not mean that strings are a type of object. In fact,      strings are a distinct JavaScript data type. They use object      syntax for accessing properties and methods, but they are not      themselves objects. We'll see just why this is at the end of this      chapter.    <P CLASS=para>      Note that JavaScript does not have a <tt CLASS=literal>char</tt> or      character data type, like C, C++, and Java do. To represent a      single character, you simply use a string that has a length of      1.     </DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch03_02.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="ch03_04.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>Numbers</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>Boolean Values</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>