<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 3] 3.4 Boolean Values</TITLE><META NAME="author" CONTENT="David Flanagan"><META NAME="date" CONTENT="Thu Apr 24 13:13:52 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="JavaScript"><META NAME="title" CONTENT="JavaScript: The Definitive Guide"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif" ALT="Javascript: The Definitive Guide"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch03_03.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 3</b></td><td width=172 align=right valign=top><A HREF="ch03_05.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="ch03-SECT1-AUTOID.4">3.4 Boolean Values</A></h2><P CLASS=para>      The number and string data types have an infinite number of      possible values. The Boolean data type, on the other hand, has      only two. As we saw in <A HREF="ch02_01.htm">Chapter 2, <i>Lexical Structure</i></A>, the two      legal Boolean values are the keywords <tt CLASS=literal>true</tt>      and <tt CLASS=literal>false</tt>. A Boolean value represents a      "truth value"--it says whether something is true or not.    <P CLASS=para>      Boolean values are generally the result of comparisons we make      in our JavaScript programs. For example, when we write:      <DIV CLASS=programlisting><P><PRE>a == 4</PRE></DIV>      we are testing to see if the value of the variable      <tt CLASS=literal>a</tt> is equal to the number      <tt CLASS=literal>4</tt>. If it is, then the result of this      comparison is the Boolean value <tt CLASS=literal>true</tt>. If      <tt CLASS=literal>a</tt> is not equal to <tt CLASS=literal>4</tt>, then      the result of the comparison is <tt CLASS=literal>false</tt>. If      Boolean values are usually generated by comparisons, they are      generally used in JavaScript control structures. For example,      the <tt CLASS=literal>if/else</tt> statement in JavaScript will perform      one action if a Boolean value is <tt CLASS=literal>true</tt> and      another action if the value is <tt CLASS=literal>false</tt>.      Generally, we will combine a comparison that creates a Boolean      value directly with a statement that uses it. The result looks      like this:      <DIV CLASS=programlisting><P><PRE>if (a == 4)   b = b + 1;else  a = a + 1;</PRE></DIV>      This code checks if <tt CLASS=literal>a</tt> equals      <tt CLASS=literal>4</tt>. If so, it adds <tt CLASS=literal>1</tt> to      <tt CLASS=literal>b</tt>; otherwise, it adds <tt CLASS=literal>1</tt>      to <tt CLASS=literal>a</tt>.    <P CLASS=para>      Instead of thinking of the two possible Boolean values as      <tt CLASS=literal>true</tt> and <tt CLASS=literal>false</tt>, it is      sometimes convenient to think of them as "on"      (<tt CLASS=literal>true</tt>) and "off" (<tt CLASS=literal>false</tt>)      or "yes" (<tt CLASS=literal>true</tt>) and "no"      (<tt CLASS=literal>false</tt>).  Sometimes it is even useful to      consider them equivalent to 1 (<tt CLASS=literal>true</tt>) and 0      (<tt CLASS=literal>false</tt>). (In fact, JavaScript does just this      and converts <tt CLASS=literal>true</tt> and      <tt CLASS=literal>false</tt> to <tt CLASS=literal>1</tt> and      <tt CLASS=literal>0</tt> when necessary.)    <P CLASS=para>      C and C++ programmers should note that JavaScript has a distinct      Boolean data type, unlike C and C++ which simply use integer      values to simulate Boolean values. Java programmers should note      that although JavaScript has a Boolean type, it is not nearly as      "pure" as the Java Boolean data type--JavaScript Boolean values      are easily converted to and from other data types, and so in      practice, the use of Boolean values is much more like their use      in C and C++ than in Java.    </DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch03_03.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="ch03_05.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>Strings</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>Functions</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>