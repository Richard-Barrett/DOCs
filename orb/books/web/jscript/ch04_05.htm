<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 4] 4.5 String Operators</TITLE><META NAME="author" CONTENT="David Flanagan"><META NAME="date" CONTENT="Wed Apr 23 18:04:53 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="JavaScript"><META NAME="title" CONTENT="JavaScript: The Definitive Guide"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif" ALT="Javascript: The Definitive Guide"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch04_04.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 4</b></td><td width=172 align=right valign=top><A HREF="ch04_06.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="ch04-SECT1-AUTOID.5">4.5 String Operators</A></h2><P CLASS=para>      As we've noted in the previous sections, there are several      operators that have special effects when their operands are      strings.    <P CLASS=para>      The <tt CLASS=literal>+</tt> operator concatenates two string      operands. That is, it creates a new string that consists of the      first string followed by the second. Thus, for example, the      following expression evaluates to the string "hello there":    <DIV CLASS=programlisting><P><PRE>"hello" + " " + "there"</PRE></DIV><P CLASS=para>      And the following lines produce the string "22":    <DIV CLASS=programlisting><P><PRE>a = "2"; b = "2";c = a + b;</PRE></DIV><P CLASS=para>      The <tt CLASS=literal>&lt;</tt>, <tt CLASS=literal>&lt;=</tt>,      <tt CLASS=literal>&gt;</tt>, and <tt CLASS=literal>&gt;=</tt> operators      compare two strings to determine what order they fall in. The      comparison uses alphabetical order. Note, however, that this      "alphabetical order" is based on the ASCII or Latin-1 (ISO8859-1)      character encoding used by JavaScript. In this encoding, all      capital letters come before (are "less than") all lowercase      letters, which can cause unexpected results. It means, for      example, that the following expression evaluates to      <tt CLASS=literal>true</tt>:      <DIV CLASS=programlisting><P><PRE>"Zoo" &lt; "aardvark"</PRE></DIV>    <P CLASS=para>      The <tt CLASS=literal>==</tt> and <tt CLASS=literal>!=</tt>      operators work on strings, but, as we've seen, these operators      work for all data types, and they do not have any special behavior      when used with strings.    <P CLASS=para>      The <tt CLASS=literal>+</tt> operator is a special one--it gives      priority to string operands over numeric operands. As noted      earlier, if either operand to <tt CLASS=literal>+</tt> is a string (or      an object) the the other operand (or both operands) will be      converted to strings and concatenated, rather than added. On the      other hand, the comparison operators only perform string      comparison if <I CLASS=emphasis>both</I> operands are strings. If      only one operand is a string, JavaScript attempts to convert it to      a number. The following lines illustrate:      <DIV CLASS=programlisting><P><PRE>1 + 2         //<tt CLASS=replaceable><i> Addition. Result is 3.</i></tt>"1" + "2"     //<tt CLASS=replaceable><i> Concatenation. Result is "12".</i></tt>"1" + 2       //<tt CLASS=replaceable><i> Concatenation; 2 is converted to "2". Result is 12.</i></tt>11 &lt; 3        //<tt CLASS=replaceable><i> Numeric comparison. Result is false.</i></tt>"11" &lt; "3"    //<tt CLASS=replaceable><i> String comparison. Result is true.</i></tt>"11" &lt; 3      //<tt CLASS=replaceable><i> Numeric comparison; "11" converted to 11. Result is false.</i></tt>"eleven" &lt; 3  //<tt CLASS=replaceable><i> Causes error because "eleven" can't be converted to a number.</i></tt></PRE></DIV>    <P CLASS=para>      Finally, it is important to note that when the <tt CLASS=literal>+</tt>      operator is used with strings and numbers, it may not be      associative. That is, the result may depend on the order in which      operations are performed. This can be seen with examples like this:      <DIV CLASS=programlisting><P><PRE>s = 1 + 2 + "blind mice";        //<tt CLASS=replaceable><i> yields "3 blind mice"</i></tt>t = "# of blind mice: " + 1 + 2; //<tt CLASS=replaceable><i> yields "# of blind mice: 12"</i></tt></PRE></DIV>      The reason for this surprising difference in behavior is that the      <tt CLASS=literal>+</tt> operator works from left to right, unless      parentheses change this order. Thus the two lines above are      equivalent to these:      <DIV CLASS=programlisting><P><PRE>s = (1 + 2) + "blind mice";          //<tt CLASS=replaceable><i> 1st + yields number; 2nd yields string</i></tt>t = ("# of blind mice: " + 1) + 2;   //<tt CLASS=replaceable><i> both operations yield strings</i></tt></PRE></DIV>    </DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch04_04.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="ch04_06.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>Comparison Operators</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>Logical Operators</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>