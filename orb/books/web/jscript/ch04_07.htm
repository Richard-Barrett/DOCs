<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 4] 4.7 Bitwise Operators</TITLE><META NAME="author" CONTENT="David Flanagan"><META NAME="date" CONTENT="Wed Apr 23 18:04:57 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="JavaScript"><META NAME="title" CONTENT="JavaScript: The Definitive Guide"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif" ALT="Javascript: The Definitive Guide"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch04_06.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 4</b></td><td width=172 align=right valign=top><A HREF="ch04_08.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="ch04-SECT1-AUTOID.7">4.7 Bitwise Operators</A></h2><P CLASS=para><A NAME="CH04.BIT1"></A><A NAME="CH04.BIT2"></A>      Despite the fact that all numbers in JavaScript are      floating-point, the bitwise operators require numeric operands      that have integral values. They operate on these integer operands      using a 32-bit integer representation instead of the equivalent      floating-point representation. These operators may return      <tt CLASS=literal>NaN</tt> if used with operands which are not      integers or which are too large to fit in a 32-bit integer      representation. Four of these operators perform      Boolean algebra on the individual bits of the operands, behaving      as if each bit in each operand was a Boolean value and performing      similar operands to the logical operators we saw earlier. The      other three bitwise operators are used to shift bits left and      right.    <P CLASS=para>      If you are not familiar with binary numbers and the binary      representation of decimal integers, you can skip the operators      described in this section. The purpose of these operators is not      described here; they are used for low-level manipulation of binary      numbers and are not commonly used in JavaScript programming.    <DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch04-SECT2-AUTOID.22">Bitwise And (<tt CLASS=replaceable><i>&amp;</i></tt>)</A></h3><P CLASS=para>	The <tt CLASS=literal>&amp;</tt> operator performs a Boolean AND	operation on each bit of its integer arguments. A bit is set in	the result only if the corresponding bit is set in both	operands.      </DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch04-SECT2-AUTOID.23">Bitwise Or (|)</A></h3><P CLASS=para>	The <tt CLASS=literal>|</tt> operator performs a Boolean OR	operation on each bit of its integer arguments. A bit is set in	the result if the corresponding bit is set in one or both of the	operands.      </DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch04-SECT2-AUTOID.24">Bitwise Xor (^)</A></h3><P CLASS=para>	The <tt CLASS=literal>^</tt> operator performs a Boolean "exclusive	OR" operation on each bit of its integer argument. Exclusive OR	means either operand one is true or operand two is true, but not	both. A bit is set in the result of this operation if a	corresponding bit is set in one (but not both) of the two	operands.      </DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch04-SECT2-AUTOID.25">Bitwise Not (~)</A></h3><P CLASS=para>	The <tt CLASS=literal>~</tt> operator is a unary operator that	appears before its single integer argument. It operates by	reversing all bits in the operand. Because of how signed	integers are represented in JavaScript, applying the	<tt CLASS=literal>~</tt> operator to a value is equivalent to	changing its sign and subtracting 1.      </DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch04-SECT2-AUTOID.26">Shift Left (&lt;&lt;)</A></h3><P CLASS=para>	The <tt CLASS=literal>&lt;&lt;</tt> operator moves all bits in its	first operand to the left by the number of places specified in	the second operand, which should be an integer between 1 and	31. For example, in the operation <tt CLASS=literal>a &lt;&lt;	1</tt>, the first bit (the ones bit) of	<tt CLASS=literal>a</tt> becomes the second bit (the twos bit), the	second bit of <tt CLASS=literal>a</tt> becomes the third, etc. A	zero is used for the new first bit, and the value of the 32nd	bit is lost. Shifting a value left by one position is equivalent	to multiplying by 2. Shifting two positions is equivalent to	multiplying by 4, and so on.      </DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch04-SECT2-AUTOID.27">Shift Right with Sign (&gt;&gt;)</A></h3><P CLASS=para>	The <tt CLASS=literal>&gt;&gt;</tt> operator moves all bits in its	first operand to the right by the number of places specified in	the second operand (an integer between 1 and 31). Bits that are	shifted off the right are lost. The bits filled in on the left	are the same as the sign bit of the original operand	to preserve the sign of the result: If the first operand	is positive, the result will have zeros filled in the high	bits; if the first operand is negative, the result will have	ones filled in the high bits. Shifting a value right one	place is equivalent to dividing by two (discarding the	remainder), shifting right two places is equivalent to integer	division by four, and so on.      </DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch04-SECT2-AUTOID.28">Shift Right Zero Fill (&gt;&gt;&gt;)</A></h3><P CLASS=para>	The <tt CLASS=literal>&gt;&gt;&gt;</tt> operator is just like the	<tt CLASS=literal>&gt;&gt;</tt> operator, except that the bits	shifted in on the left are always zero, regardless of the sign	of the first operand.      </DIV></DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch04_06.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="ch04_08.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>Logical Operators</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>Assignment Operators</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>