<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 4] 4.9 Miscellaneous Operators</TITLE><META NAME="author" CONTENT="David Flanagan"><META NAME="date" CONTENT="Wed Apr 23 18:05:02 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="JavaScript"><META NAME="title" CONTENT="JavaScript: The Definitive Guide"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif" ALT="Javascript: The Definitive Guide"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch04_08.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 4</b></td><td width=172 align=right valign=top><A HREF="ch05_01.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="ch04-SECT1-AUTOID.9">4.9 Miscellaneous Operators</A></h2><P CLASS=para>      JavaScript supports a number of other miscellaneous operators,      described in the sections below.    <DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch04-SECT2-AUTOID.30">The Conditional Operator (?:)</A></h3><P CLASS=para>	The conditional operator is the only ternary operator (three	operands) in JavaScript and is sometimes actually called the	ternary operator. This operator is sometimes written	<tt CLASS=literal>?:</tt>, although it does not appear quite that	way in code. Because this operator has three operands, the first	goes before the <tt CLASS=literal>?</tt>, the second goes between	the <tt CLASS=literal>?</tt> and the <tt CLASS=literal>:</tt>, and the	third goes after the <tt CLASS=literal>:</tt>. It is used like this:      <DIV CLASS=programlisting><P><PRE>x &gt; 0 ? x*y : -x*y</PRE></DIV><P CLASS=para>	The first operand of the conditional operator must have a	Boolean value--usually this is the result of a comparison	expression. The second and third operands may have any	value. The value returned by the conditional operator depends on	the Boolean value of the first operand. If that operand is	<tt CLASS=literal>true</tt>, then the value of the conditional	expression is the value of the second operand. If the first	operand is <tt CLASS=literal>false</tt>, then the value is the value	of the third operand.      <P CLASS=para>	While you can achieve similar results using the	<tt CLASS=literal>if</tt> statement, the <tt CLASS=literal>?:</tt>	operator is a very handy shortcut in many cases. Here is a	typical usage, which checks to be sure that a variable is	defined, uses it if so, and provides a default value if not.	<DIV CLASS=programlisting><P><PRE>greeting = "hello " + ((name != null) ? name : "there");</PRE></DIV>	This is equivalent to, but more compact than, the following	<tt CLASS=literal>if</tt> statement:	<DIV CLASS=programlisting><P><PRE>greeting = "hello ";if (name != null)     greeting += name;else     greeting += "there";</PRE></DIV>      </DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch04-SECT2-AUTOID.31">The typeof Operator</A></h3><P CLASS=para>	The <tt CLASS=literal>typeof</tt> operator is available in	Navigator 3.0 and Internet Explorer 3.0.	<tt CLASS=literal>typeof</tt> is an unusual operator because it is	not represented by punctuation characters but instead by the	<tt CLASS=literal>typeof</tt> keyword. It is a unary operator that	is placed before its single operand, which can be of any	type. The value of the <tt CLASS=literal>typeof</tt> operator is a	string indicating the data type of the operand.[2]      <blockquote class=footnote><P CLASS=para>[2]             This means that <tt CLASS=literal>typeof typeof</tt>	    <tt CLASS=replaceable><i>x</i></tt>, where	    <tt CLASS=replaceable><i>x</i></tt> is any value, will always	    yield the value <tt CLASS=literal>"string"</tt>.	  </blockquote><P CLASS=para>	Possible values are <tt CLASS=literal>"number"</tt>,	<tt CLASS=literal>"string"</tt>, <tt CLASS=literal>"boolean"</tt>,	<tt CLASS=literal>"object"</tt>, <tt CLASS=literal>"function"</tt>,	and <tt CLASS=literal>"undefined"</tt> for undefined values. Both	arrays and objects return the <tt CLASS=literal>"object"</tt>	value. <tt CLASS=literal>typeof</tt> may be used as follows:	<DIV CLASS=programlisting><P><PRE>typeof i(typeof value == "string") ? "'" + value + "'" : value</PRE></DIV>      <P CLASS=para>	Note that you can place parentheses around the operand to	<tt CLASS=literal>typeof</tt>, which will make	<tt CLASS=literal>typeof</tt> look like the name of a function	rather than an operator keyword:	<DIV CLASS=programlisting><P><PRE>typeof(i)</PRE></DIV>      </DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch04-SECT2-AUTOID.32">Object Creation Operator (new)</A></h3><P CLASS=para>	As we saw earlier, numbers, strings, and Boolean values are	represented through textual literals in JavaScript. That is, you	just type their string representation into your program, and	then your program can manipulate that value. As we'll see later,	you can use the <tt CLASS=literal>function</tt> keyword to define	functions that your program can work with. But JavaScript	supports two other data types as well--objects and	arrays. Object and array values cannot simply be typed into your	JavaScript programs; they must be created. The	<tt CLASS=literal>new</tt> operator is used to do this.      <P CLASS=para>	The <tt CLASS=literal>new</tt> operator is one, like	<tt CLASS=literal>typeof</tt>, that is represented by a keyword	rather than by special punctuation characters. This is a unary	operator that appears before its operand. It has the following	syntax:	<DIV CLASS=programlisting><P><PRE>new <I CLASS=emphasis>constructor</I></PRE></DIV>	<I CLASS=emphasis>constructor</I> must be a function-call	expression (i.e., it must include an expression that refers to a	function, and this function should be followed by an optional	argument list in parentheses). As a special case, for this	<tt CLASS=literal>new</tt> operator only, JavaScript simplifies the	grammar by allowing the parentheses to be omitted if there are	no arguments in the function call. Example uses of the	<tt CLASS=literal>new</tt> operator are:	<DIV CLASS=programlisting><P><PRE>o = new Object;   //<tt CLASS=replaceable><i> optional parentheses omitted here</i></tt>d = new Date();c = new rectangle(3.0, 4.0, 1.5, 2.75);obj[i] = new constructors[i]();</PRE></DIV>      <P CLASS=para>	The <tt CLASS=literal>new</tt> operator works as follows: first, it	creates a new object with no properties defined. Next, it invokes	the specified constructor function, passing the specified	arguments, and passing the newly created object as the value of	the <tt CLASS=literal>this</tt> keyword. The constructor function	can then use the <tt CLASS=literal>this</tt> keyword to initialize	the new object in any way desired. We'll learn more about the	<tt CLASS=literal>this</tt> keyword and about constructor functions	in <A HREF="ch07_01.htm">Chapter 7, <i>Objects</i></A>.      <P CLASS=para>	In Navigator 3.0, you create a JavaScript array with the	<tt CLASS=literal>new Array()</tt> syntax. In Navigator	2.0, there is not an <tt CLASS=literal>Array()</tt>	constructor function defined. In this version of JavaScript,	you can create an array with the	<tt CLASS=literal>Object()</tt> constructor instead. Some	programs will define their own custom	<tt CLASS=literal>Array()</tt> constructor.      <P CLASS=para>	We'll see more about creating and working with objects and	arrays in <A HREF="ch07_01.htm">Chapter 7, <i>Objects</i></A> and	<A HREF="ch08_01.htm">Chapter 8, <i>Arrays</i></A>.      </DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch04-SECT2-AUTOID.33">The delete Operator</A></h3><P CLASS=para>        If you are a C++ programmer, then you probably expect        JavaScript to have a <tt CLASS=literal>delete</tt> operator that        destroys objects created with the <tt CLASS=literal>new</tt>        operator.  JavaScript does have such an operator, but it does        not behave in the same way the C++ <tt CLASS=literal>delete</tt>.        In Navigator 2.0 and 3.0, <tt CLASS=literal>delete</tt> simply        sets its operand (a variable, object property, or array        element) to <tt CLASS=literal>null</tt>.  You could obviously do        this with an assignment statement just as easily, and in fact,        <tt CLASS=literal>delete</tt> is depricated in Navigator 2.0 and        3.0; you should not use it at all.  This mostly-useless        version of the operator was created in a beta version of        Navigator 2.0, and never quite got removed from the language.        In Navigator 4.0, however, we can expect to see a new,        non-depricated, <tt CLASS=literal>delete</tt> operator which is        more functional--it will actually delete, or undefine a        variable or object property.      <P CLASS=para>	 Note that even this new Navigator 4.0         <tt CLASS=literal>delete</tt> operator will not be the same as         the C++ <tt CLASS=literal>delete</tt>--it simply undefines a         variable or property, and does not actually delete or destroy         or free up the memory associated with an object created with         <tt CLASS=literal>new</tt>.  The reason that a C++-style         <tt CLASS=literal>delete</tt> is not necessary is that JavaScript         provides automatic "garbage collection"--when objects and         other values are no longer being used, the memory associated         with them is automatically reclaimed by the system. You don't         have to worry about deleting objects or freeing or releasing         memory that is no longer in use.  Garbage collection in         JavaScript is discussed in more detail in <A HREF="ch11_01.htm">Chapter 11, <i>Windows and the JavaScript Name Space</i></A>.      </DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch04-SECT2-AUTOID.34">The void Operator</A></h3><P CLASS=para>	The <tt CLASS=literal>void</tt> operator is supported in	Navigator 3.0, but not in Internet Explorer 3.0. IE will	support it in a future version.      <P CLASS=para>	<tt CLASS=literal>void</tt> is a unary operator that appears before	an expression with any value. The purpose of this operator is	an unusual one: it always discards its operand value and simply	returns an undefined value. The only occasion on which you are	likely to want to do this is in a <tt CLASS=literal>javascript:</tt>	URL, in which you want to evaluate an expression for its side	effects, but do not want the browser to display the value of the	evaluated expression. Thus, you might use the	<tt CLASS=literal>void</tt> operator in HTML like the following:	<DIV CLASS=programlisting><P><PRE>&lt;A HREF="javascript:void document.form1.submit();"&gt;Submit Form&lt;/A&gt;</PRE></DIV>      </DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch04-SECT2-AUTOID.35">The Comma Operator (,)</A></h3><P CLASS=para>	The comma operator is a simple one. It evaluates its left	argument, evaluates its right argument, and then returns the	value of its right argument. Thus, this line:	<DIV CLASS=programlisting><P><PRE>i=0, j=1, k=2;</PRE></DIV>	is equivalent to:	<DIV CLASS=programlisting><P><PRE>i = 0;j = 1;k = 2;</PRE></DIV>      <P CLASS=para>	This strange operator is useful only in a few limited	circumstances in which you need to evaluate several independent	expressions with side effects in a situation where only a single	expression is allowed. In practice, the comma operator is only	frequently used in conjunction with the <tt CLASS=literal>for</tt>	loop statement, which we'll see later in <A HREF="ch05_01.htm">Chapter 5, <i>Statements</i></A>.      </DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch04-SECT2-AUTOID.36">Array and Object Access Operators</A></h3><P CLASS=para>	As noted briefly in <A HREF="ch03_01.htm">Chapter 3, <i>Variables and Data Types</i></A>, you can	access elements of an array using square brackets	<tt CLASS=literal>[]</tt>, and you can access elements of an	object using a dot (<tt CLASS=literal>.</tt>); both of these are	treated as operators in JavaScript.      <P CLASS=para>	The <tt CLASS=literal>.</tt> operator expects an object as its left	operand, and the name of an object property or method as the	right operand. This right operand should not be a string or a	variable that contains a string, but should be the literal name	of the property, without quotes of any kind. Here are some	examples:	<DIV CLASS=programlisting><P><PRE>document.lastModifiednavigator.appNameframes[0].lengthdocument.write("hello world")</PRE></DIV>      <P CLASS=para>	If the specified property does not exist in the object,	JavaScript does not issue an error, but instead simply returns	the special undefined value as the value of the expression.      <P CLASS=para>	Most operators allow arbitrary expressions for either operand,	as long as the type of the operand is suitable. The	<tt CLASS=literal>.</tt> operator is an exception: the right-hand	operand must be a literal property name. Nothing else is	allowed.       <P CLASS=para>	The <tt CLASS=literal>[]</tt> operator allows access to	array elements and also to object properties, and it does so without	the restrictions that the <tt CLASS=literal>.</tt> operator places	on the right-hand operand. If the first operand (which goes	before the left bracket) refers to an array, then the second	operand (which goes between the brackets) can be an arbitrary	expression that evaluates to an integer. For example:	<DIV CLASS=programlisting><P><PRE>frames[1]document.forms[i + j]document.forms[i].elements[j++]</PRE></DIV>      <P CLASS=para>	If the first operand to the <tt CLASS=literal>[]</tt>	operator is a reference to an object, on the other hand, then	the second operand may be an arbitrary expression that evaluates	to a string that names a property of the object.	Note that in this case, the second operand is a string, not a	literal name. It should be a constant in quotes, or a variable	or expression that refers to a string. This works like	associative arrays in the Perl and awk	programming languages. For example:	<DIV CLASS=programlisting><P><PRE>document["lastModified"]frames[0]['length']data["val" + i]</PRE></DIV>      <P CLASS=para>	        The <tt CLASS=literal>[]</tt> operator is usually used to	access the elements of an array. It is less convenient than	the <tt CLASS=literal>.</tt> operator for accessing properties of	an object because of the need to quote the name of the	property. When an object is used as an associative array,	however, and the property names are dynamically generated,	then the <tt CLASS=literal>.</tt> operator cannot be used, and	only the <tt CLASS=literal>[]</tt> operator will do. This	is commonly the case when you use the	<tt CLASS=literal>for/in</tt> loop, which will be introduced in	<A HREF="ch05_01.htm">Chapter 5, <i>Statements</i></A>.  For example, the	following JavaScript code uses a <tt CLASS=literal>for/in</tt>	loop and the <tt CLASS=literal>[]</tt> operator to print	out the name and value of all properties <tt CLASS=literal>f</tt>	in an object <tt CLASS=literal>o</tt>:	<DIV CLASS=programlisting><P><PRE>for (f in o) {    document.write('o.' + f + ' = ' + o[f]);    document.write('&lt;BR&gt;');}</PRE></DIV>      </DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch04-SECT2-AUTOID.37">Function Call Operator</A></h3><P CLASS=para>	The <tt CLASS=literal>()</tt> operator is used to invoke	functions in JavaScript.		This is an unusual operator in that it does not have a fixed	number of operands. The first operand is always the name of a	function or an expression that refers to a function. This is	followed by the left parenthesis and any number of additional	operands, which may be arbitrary expressions, each separated	from the next with a comma. The right parenthesis follows the	final operand. The <tt CLASS=literal>()</tt> operator	evaluates each of its operands, and invokes the function	specified by the first, with the value of the remaining operands	passed as arguments. Examples:      <DIV CLASS=programlisting><P><PRE>document.close()Math.sin(x)alert("Welcome " + name)Date.UTC(99, 11, 31, 23, 59, 59)funcs[i].f(funcs[i].args[0], funcs[i].args[1])</PRE></DIV></DIV></DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch04_08.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="ch05_01.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>Assignment Operators</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>Statements</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>