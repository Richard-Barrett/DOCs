<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 5] 5.9 with</TITLE><META NAME="author" CONTENT="David Flanagan"><META NAME="date" CONTENT="Wed Apr 23 18:06:25 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="JavaScript"><META NAME="title" CONTENT="JavaScript: The Definitive Guide"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif" ALT="Javascript: The Definitive Guide"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch05_08.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 5</b></td><td width=172 align=right valign=top><A HREF="ch05_10.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="ch05-SECT1-AUTOID.9">5.9 with</A></h2><P CLASS=para><A NAME="CH05.WITH1"></A><A NAME="CH05.WITH2"></A><A NAME="CH05.WITH3"></A><A NAME="CH05.WITH4"></A>      JavaScript interfaces with the web browser through an "object      hierarchy" that contains quite a few arrays nested within objects      and objects nested within arrays. In order to refer to the      components that make up a web page, you may find yourself      referring to objects with cumbersome expressions like the      following:      <DIV CLASS=programlisting><P><PRE>frames[1].document.forms[0].address_field.value</PRE></DIV>    <P CLASS=para>      The <tt CLASS=literal>with</tt> statement provides a way to simplify      expressions like this one, and reduce your typing. It has the      following syntax:    <DIV CLASS=programlisting><P><PRE>with (<tt CLASS=replaceable><i>object</i></tt>)    <tt CLASS=replaceable><i>statement</i></tt></PRE></DIV><P CLASS=para>      <tt CLASS=replaceable><i>object</i></tt> is an expression that evaluates      to an object. This specified object becomes the default object      for all expressions in <tt CLASS=replaceable><i>statement</i></tt>, which      is a primitive statement or statement block. Any time an      identifier appears within <tt CLASS=replaceable><i>statement</i></tt>,      that identifier is looked up as a property of      <tt CLASS=replaceable><i>object</i></tt> first. If the identifier is      defined as a property of <tt CLASS=replaceable><i>object</i></tt>, then      this is the definition used. If the identifier is not defined      there, then JavaScript looks up its value as it normally would.    <P CLASS=para>      For example, you might use the <tt CLASS=literal>with</tt> statement      to simplify the following code:      <DIV CLASS=programlisting><P><PRE>x = Math.sin(i * Math.PI / 20);y = Math.cos(i * Math.PI / 30);</PRE></DIV>      Using <tt CLASS=literal>with</tt>, you might write:      <DIV CLASS=programlisting><P><PRE>with(Math) {    x = sin(i * PI / 20);    y = cos(i * PI / 30);}</PRE></DIV>    <P CLASS=para>      Similarly, instead of calling      <tt CLASS=literal>document.write()</tt> over and over again in      a JavaScript program, you could use a      <tt CLASS=literal>with(document)</tt> statement, and then invoke      <tt CLASS=literal>write()</tt> over and over again instead.    <P CLASS=para>      You can nest <tt CLASS=literal>with</tt> statements arbitrarily. Note      that the <tt CLASS=replaceable><i>object</i></tt> expression in a nested      <tt CLASS=literal>with</tt> statement may itself be interpreted      depending on the <tt CLASS=replaceable><i>object</i></tt> in a containing      <tt CLASS=literal>with</tt> statement.    <P CLASS=para>      If the <tt CLASS=replaceable><i>object</i></tt> in a      <tt CLASS=literal>with</tt> statement contains properties that have the      same name as top-level variables, the <tt CLASS=literal>with</tt>      statement effectively hides the top-level variable--when you      use the name of that variable you now refer to the object's property      instead. If you need to explicitly refer to a hidden top-level      variable <tt CLASS=replaceable><i>var</i></tt>, you can usually use this      syntax:    <DIV CLASS=programlisting><P><PRE>top.<tt CLASS=replaceable><i>var</i></tt></PRE></DIV><P CLASS=para>      We'll see why this works when we study the Window object in <A HREF="ch11_01.htm">Chapter 11, <i>Windows and the JavaScript Name Space</i></A>. Note that this technique will not      work if <tt CLASS=literal>top</tt> is the name of a property of the      <tt CLASS=replaceable><i>object</i></tt> in any enclosing      <tt CLASS=literal>with</tt> statement.    <P CLASS=para>      It is important to understand that the <tt CLASS=literal>with</tt>      statement only works with properties that already exist in the      specified <tt CLASS=replaceable><i>object</i></tt>. If you assign a value      to a variable that does not exist as a property of the specified      <tt CLASS=replaceable><i>object</i></tt>, then that property is not created      in the <tt CLASS=replaceable><i>object</i></tt>. Instead, JavaScript      searches the containing <tt CLASS=literal>with</tt> statements, if      any, for a property with that name, and then searches for a top-level      variable with that name. If no such property or variable is found,      then a new top-level variable is created. The rule to remember is      that new properties cannot be added to an object if you refer to the      object implicitly through a <tt CLASS=literal>with</tt> statement. To      create a new property in the object, you must refer to it explicitly.    <P CLASS=para>      To really understand how the <tt CLASS=literal>with</tt> statement      works, we need to briefly consider how variables are looked up in      JavaScript. We'll return to this topic in detail in <A HREF="ch11_01.htm">Chapter 11, <i>Windows and the JavaScript Name Space</i></A>. Suppose JavaScript needs to look      up the value of the name <tt CLASS=literal>n</tt>. It proceeds as      follows:       <P><UL CLASS=itemizedlist><li CLASS=listitem>	    If <tt CLASS=literal>n</tt> is referred to within a	    <tt CLASS=literal>with</tt> statement, then it first checks to	    see if <tt CLASS=literal>n</tt> is a property of the	    <tt CLASS=replaceable><i>object</i></tt> of that statement. If so,	    it uses the value of this property.	  <P><li CLASS=listitem>	    If the first enclosing <tt CLASS=literal>with</tt> statement	    does not provide a definition for <tt CLASS=literal>n</tt>, then	    JavaScript checks any other enclosing	    <tt CLASS=literal>with</tt> statements in order (remember that	    they can be nested to any depth). If any of objects	    specified in these statements define a property	    <tt CLASS=literal>n</tt>, then that definition is used.	  <P><li CLASS=listitem>	    If the reference to <tt CLASS=literal>n</tt> occurs within a	    function, and no enclosing <tt CLASS=literal>with</tt>	    statements yield a definition for it, then JavaScript checks	    to see if the function has any local variables or arguments	    named <tt CLASS=literal>n</tt>. If so, it uses this value.	  <P><li CLASS=listitem>	    Finally, if no definition for <tt CLASS=literal>n</tt> has been	    found then JavaScript checks to see if there is a top-level	    variable named <tt CLASS=literal>n</tt>, and uses it if so.	  <P><li CLASS=listitem>	    If <tt CLASS=literal>n</tt> is not defined in any of these	    places, then an error occurs.	  <P></UL>    </DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch05_08.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="ch05_10.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>continue</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>var</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>