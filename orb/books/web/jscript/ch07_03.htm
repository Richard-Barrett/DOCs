<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 7] 7.3 Methods</TITLE><META NAME="author" CONTENT="David Flanagan"><META NAME="date" CONTENT="Wed Apr 23 18:08:53 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="JavaScript"><META NAME="title" CONTENT="JavaScript: The Definitive Guide"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif" ALT="Javascript: The Definitive Guide"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch07_02.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 7</b></td><td width=172 align=right valign=top><A HREF="ch07_04.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="ch07-SECT1-AUTOID.3">7.3 Methods</A></h2><P CLASS=para><A NAME="CH07.METH1"></A>      A <I CLASS=emphasis>method</I> is nothing more than a JavaScript      function that is invoked through an object. Recall that functions      are data values, and that there is nothing special about the name      they are defined with--a function can be assigned to any variable,      or even to any property of an object. If we have a function      <tt CLASS=literal>f</tt>, and an object <tt CLASS=literal>o</tt>, then we      can define a method named <tt CLASS=literal>m</tt> with the following line:      <DIV CLASS=programlisting><P><PRE>o.m = f;</PRE></DIV>    <P CLASS=para>      Having defined the method <tt CLASS=literal>m()</tt> of the object      <tt CLASS=literal>o</tt>, we invoke it like this:      <DIV CLASS=programlisting><P><PRE>o.m();</PRE></DIV>      Or, if <tt CLASS=literal>m()</tt> expects two arguments, we might      invoke it like this:      <DIV CLASS=programlisting><P><PRE>o.m(x, x+2);</PRE></DIV>    <P CLASS=para>      Invoking <tt CLASS=literal>o.m()</tt> this way is the same as calling      <tt CLASS=literal>f()</tt>, except for one point: when the      function is invoked as a method, through the object      <tt CLASS=literal>o</tt>, the <tt CLASS=literal>this</tt> keyword will      refer to that object within the body of the method. When the same      function object is invoked directly as      <tt CLASS=literal>f()</tt>, the <tt CLASS=literal>this</tt>      keyword will not contain a meaningful value.[1]    <blockquote class=footnote><P CLASS=para>[1] 	  As you may have discovered by now, variables in client-side	  JavaScript are all implicitly properties of the current Window	  object, so invoking <tt CLASS=literal>f()</tt> is	  equivalent to invoking <tt CLASS=literal>window.f()</tt>:	  the <tt CLASS=literal>this</tt> keyword in both these cases refers	  to the current window. (See <A HREF="ch11_01.htm">Chapter 11, <i>Windows and the JavaScript Name Space</i></A>,	  for an extended discussion of this somewhat odd aspect of	  JavaScript.) 	</blockquote><P CLASS=para>      This discussion of the <tt CLASS=literal>this</tt> keyword should      begin to make it clear why we use methods at all. Any function      that is used as a method is effectively passed a third      argument--the object through which it is invoked. Typically, a      method performs some sort of operation on that object, and the      method invocation syntax is a particularly elegant way to express      the fact that a function is operating on an object. Compare the      following two lines of code:      <DIV CLASS=programlisting><P><PRE>o.m(x,y);f(o,x,y);</PRE></DIV>      The hypothetical method <tt CLASS=literal>m()</tt> and function      <tt CLASS=literal>f()</tt> may perform exactly the same operation on      the object <tt CLASS=literal>o</tt>, but the method invocation syntax      more clearly indicates the idea that it is the object      <tt CLASS=literal>o</tt> that is the primary focus or target of the      operation.    <P CLASS=para>      The typical usage of methods is more clearly illustrated through      an example. <A HREF="ch07_03.htm#JSCRIPT-CH-OBJECTS-EX-2">Example 7-2</A> returns to      the Rectangle objects of <A HREF="ch07_02.htm#JSCRIPT-CH-OBJECTS-EX-1">Example 7-1</A>      and how a method that operates on Rectangle objects can be defined      and invoked.    <DIV CLASS=example><h4 CLASS=example><A CLASS="TITLE" NAME="JSCRIPT-CH-OBJECTS-EX-2">Example 7-2: Defining and Invoking a Method</A></h4><DIV CLASS=programlisting><P><PRE>//<tt CLASS=replaceable><i> This is a function. It uses the this keyword, so</i></tt>//<tt CLASS=replaceable><i> it doesn't make sense to invoke this function by itself; it</i></tt>//<tt CLASS=replaceable><i> needs instead be made a method of some object, some object that has</i></tt>//<tt CLASS=replaceable><i> "width" and "height" properties defined.</i></tt>function compute_area() {    return this.width * this.height;}//<tt CLASS=replaceable><i> Create a new Rectangle object, using the constructor defined earlier</i></tt>var rect = new Rectangle(8.5, 11);//<tt CLASS=replaceable><i> Define a method by assigning the function to a property of the object</i></tt>rect.area = compute_area;//<tt CLASS=replaceable><i> Invoke the new method like this:</i></tt>a = rect.area();    //<tt CLASS=replaceable><i> a = 8.5*11 = 93.5</i></tt></PRE></DIV></DIV><P CLASS=para>      There is a shortcoming that is evident in <A HREF="ch07_03.htm#JSCRIPT-CH-OBJECTS-EX-2">Example 7-2</A>: before you can invoke the      <tt CLASS=literal>area()</tt> method for the <tt CLASS=literal>rect</tt>      object, you must assign that method to a property of the      object. While we can invoke the <tt CLASS=literal>area()</tt>      method on the particular object named <tt CLASS=literal>rect</tt>, we      can't invoke it on any other Rectangle objects      without first assigning the method to them. This quickly becomes      tedious. <A HREF="ch07_03.htm#JSCRIPT-CH-OBJECTS-EX-3">Example 7-3</A> defines      some additional Rectangle methods and shows how they can      automatically be assigned to all Rectangle objects with a      constructor function.    <DIV CLASS=example><h4 CLASS=example><A CLASS="TITLE" NAME="JSCRIPT-CH-OBJECTS-EX-3">Example 7-3: Defining Methods in a Constructor</A></h4><DIV CLASS=programlisting><P><PRE>//<tt CLASS=replaceable><i> First, define some functions that will be used as methods</i></tt>function Rectangle_area() { return this.width * this.height; }function Rectangle_perimeter() { return 2*this.width + 2*this.height; }function Rectangle_set_size(w,h) { this.width = w; this.height = h; }function Rectangle_enlarge() { this.width *= 2; this.height *= 2; }function Rectangle_shrink() { this.width /= 2; this.height /= 2; }//<tt CLASS=replaceable><i> Then define a constructor method for our Rectangle objects.</i></tt>//<tt CLASS=replaceable><i> The constructor initializes properties, and also assigns methods.</i></tt>function Rectangle(w, h) {    //<tt CLASS=replaceable><i> initialize object properties</i></tt>    this.width = w;    this.height = h;    //<tt CLASS=replaceable><i> define methods for the object</i></tt>    this.area = Rectangle_area;    this.perimeter = Rectangle_perimeter;    this.set_size = Rectangle_set_size;    this.enlarge = Rectangle_enlarge;    this.shrink = Rectangle_shrink;}//<tt CLASS=replaceable><i> Now, when we create a rectangle, we can immediately invoke methods on it:</i></tt>r = new Rectangle(2,2);a = r.area();r.enlarge();p = r.perimeter();</PRE></DIV></DIV></DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch07_02.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="ch07_04.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>Creating New Objects with Constructors</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>Object Prototypes</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>