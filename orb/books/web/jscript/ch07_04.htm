<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 7] 7.4 Object Prototypes</TITLE><META NAME="author" CONTENT="David Flanagan"><META NAME="date" CONTENT="Wed Apr 23 18:08:55 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="JavaScript"><META NAME="title" CONTENT="JavaScript: The Definitive Guide"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif" ALT="Javascript: The Definitive Guide"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch07_03.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 7</b></td><td width=172 align=right valign=top><A HREF="ch07_05.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="ch07-SECT1-AUTOID.4">7.4 Object Prototypes</A></h2><P CLASS=para><A NAME="CH07.PROTO1"></A><A NAME="CH07.PROTO2"></A><A NAME="CH07.PROTO3"></A><A NAME="CH07.PROTO4"></A>      We've seen that a constructor function defines a "class" of      objects in JavaScript--all objects created with a given      constructor will be initialized in the same way and will therefore      have the same set of properties. These properties may include      methods, for (as we've also seen) you can use a constructor      function to assign a set of methods to each object that is a      member of the class.    <P CLASS=para>      In Navigator 3.0 and Internet Explorer 3.0, there is another way      to specify the       methods, constants, and other properties that all objects in a      class will support. The technique is to define the methods and      other properties in a <I CLASS=emphasis>prototype object</I> for      the class. A prototype object is a special object, associated      with the constructor function for a class, that has a very      important feature: any properties defined by the prototype object      of a class will appear as properties of every object of that      class. This is true of properties that are added to the prototype      both before and after the objects are defined. The properties of      the prototype object of a class are shared by all objects of that      class (i.e., objects do not get their own unique copy of the      prototype properties, so memory usage is minimal).    <P CLASS=para>      The properties of the prototype object for a class can be read      through all objects of the class, and, although they appear to be,      they are not actually properties of those objects. There is a      single copy of each prototype property, and this copy is shared by      all objects in the class. When you read one of these properties      of an object, you are reading that shared value from the prototype      object. When you set the value of one of these properties for a      particular object, on the other hand, you are actually creating a      new property for that one object. From that point on, for that one      particular object, the newly created property "shadows," or hides,      the shared property in the prototype object.      <A HREF="ch07_04.htm#JSCRIPT-CH-OBJECTS-FIG-1">Figure 7-1</A> illustrates how a      private, non-shared property can shadow a shared prototype      property.     <DIV CLASS=figure><h4 CLASS=figure><A CLASS="TITLE" NAME="JSCRIPT-CH-OBJECTS-FIG-1">Figure 7-1: Objects and prototypes</A></h4><p><img align=middle src="./figs/js0701.gif" alt="[Graphic: Figure 7-1]" width=500 height=580></DIV><P CLASS=para>      Because prototype properties are shared by all objects of a class,      it only generally makes sense to use them to define properties      that will be the same for all objects within the class. This      makes them ideal for defining methods. Other properties with      constant values (such as mathematical constants) are also suitable      for definition with prototype properties. If your class defines a      property with a very commonly used default value, you might define      this property, and the default value in a prototype object. Then      the few objects that want to deviate from the default value can      create their own private, unshared, copy of the property,      defining their own nondefault property value.    <P CLASS=para>      After all this discussion of how prototype objects and their      properties work, we can now discuss where you can find prototype      properties, and how they are created. The prototype object      defines methods and other constant properties for a class of      objects; classes of objects are defined by a common constructor;      therefore, the prototype object should be associated with the      constructor function. This is indeed the case. If we were to      define a <tt CLASS=literal>Circle()</tt> constructor function to      create objects that represent circles, then the prototype object      for this class would be <tt CLASS=literal>Circle.prototype</tt>, and      we could define a constant that would be available to all Circle      objects like this:      <DIV CLASS=programlisting><P><PRE>Circle.prototype.pi = 3.14159;</PRE></DIV>    <P CLASS=para>      The prototype object of a constructor is created automatically by      JavaScript. In Navigator, it is created the first time the      constructor is used       with the <tt CLASS=literal>new</tt> operator. What this means is that      you must create at least one object of a class before you can use      the prototype object to assign methods and constants to objects of      that class. So, if we have defined a <tt CLASS=literal>Circle()</tt>      constructor, but not yet used it to create any Circle objects,      we'd define the constant property <tt CLASS=literal>pi</tt> like this:      <DIV CLASS=programlisting><P><PRE>//<tt CLASS=replaceable><i> First create and discard a dummy Circle object.</i></tt>//<tt CLASS=replaceable><i> All this does is force the prototype object to be created.</i></tt>new Circle();//<tt CLASS=replaceable><i> Now we can set properties in the prototype</i></tt>Circle.prototype.pi = 3.14159;</PRE></DIV>      This requirement that an object be created before the prototype      object is available is an unfortunate blemish in the JavaScript      language design. If you forget to create an object before using      the prototype you'll get an error message indicating that the      prototype object does not have the property you are trying to set      (i.e., the object does not exist). It is an annoyance, but a minor      one. In Internet Explorer, it is not necessary to create a dummy      object to force the prototype object to be created; IE provides a      prototype object for all JavaScript functions, whether they are      used as constructors or not.    <P CLASS=para>      Prototype objects and their properties can be quite confusing.      <A HREF="ch07_04.htm#JSCRIPT-CH-OBJECTS-FIG-1">Figure 7-1</A> illustrates several of      the important prototype concepts; you should study it carefully.      In addition to the figure, <A HREF="ch07_04.htm#JSCRIPT-CH-OBJECTS-EX-4">Example 7-4</A> is a concrete example of how      you can use prototypes to help you define a class of objects. In      this example, we've switched from our Rectangle class to a new      Circle class. The code defines a <tt CLASS=literal>Circle</tt> class      of objects, by first defining a      <tt CLASS=literal>Circle()</tt> constructor method to      initialize each individual object, and then by setting properties      on <tt CLASS=literal>Circle.prototype</tt> to define methods,      constants, and defaults shared by all instances of the class.    <DIV CLASS=example><h4 CLASS=example><A CLASS="TITLE" NAME="JSCRIPT-CH-OBJECTS-EX-4">Example 7-4: Defining a Class with a Prototype Object</A></h4><DIV CLASS=programlisting><P><PRE>//<tt CLASS=replaceable><i> Define a constructor method for our class.</i></tt>//<tt CLASS=replaceable><i> Use it to initialize properties that will be different for</i></tt>//<tt CLASS=replaceable><i> each individual circle object.</i></tt>function Circle(x, y, r) {    this.x = x;  //<tt CLASS=replaceable><i> the X coordinate of the center of the  circle</i></tt>    this.y = y;  //<tt CLASS=replaceable><i> the Y coordinate of the center of the circle</i></tt>    this.r = r;  //<tt CLASS=replaceable><i> the radius of the circle</i></tt>}//<tt CLASS=replaceable><i> Create and discard an initial Circle object.</i></tt>//<tt CLASS=replaceable><i> Doing this forces the prototype object to be created</i></tt>new Circle(0,0,0);//<tt CLASS=replaceable><i> Now define a constant; a property that will be shared by</i></tt>//<tt CLASS=replaceable><i> all circle objects. Actually, we could just use Math.PI,</i></tt>//<tt CLASS=replaceable><i> but we do it this way for the sake of example.</i></tt>Circle.prototype.pi = 3.14159;//<tt CLASS=replaceable><i> Now define some functions that perform computations on circles</i></tt>//<tt CLASS=replaceable><i> Note the use of the constant defined above</i></tt>function Circle_circumference() { return 2 * this.pi * this.r; }function Circle_area() { return this.pi * this.r * this.r; }//<tt CLASS=replaceable><i> Make these functions into methods of all Circle objects by</i></tt>//<tt CLASS=replaceable><i> setting them as properties of the prototype object.</i></tt>Circle.prototype.circumference = Circle_circumference;Circle.prototype.area = Circle_area;//<tt CLASS=replaceable><i> Now define a default property. Most Circle objects will share this </i></tt>//<tt CLASS=replaceable><i> default value, but some may override it by setting creating their </i></tt>//<tt CLASS=replaceable><i> own unshared copy of the property.</i></tt>Circle.prototype.url = "images/default_circle.gif";//<tt CLASS=replaceable><i> Now, create a circle object, and use the methods defined</i></tt>//<tt CLASS=replaceable><i> by the prototype object</i></tt>c = new Circle(0.0, 0.0, 1.0);a = c.area();p = c.circumference();</PRE></DIV></DIV><P CLASS=para>      An important point to note about prototypes is that in Navigator      3.0, you can use them with built-in object types, not just those      that you define yourself. For example, if you wrote a function      that operated on a string object, you could assign it as a      method to <tt CLASS=literal>String.prototype</tt>, and make it      accessible as a method of all JavaScript strings. This technique      does not work in Internet Explorer 3.0. IE 3.0 does not support      the prototypes for Boolean and Number objects, and the      properties of <tt CLASS=literal>String.prototype</tt> are only      available to actual String objects, not primitive string values,      as they are in Navigator. These shortcomings will be fixed in a      future version of IE.    <P CLASS=para>      Finally, a couple of points to remember about prototypes are that      they are not available in Navigator 2.0, and that prototype      properties are shared by all objects of a given class, regardless      of whether the prototype property is defined before or after any      given object is created.    </DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch07_03.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="ch07_05.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>Methods</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>Classes in JavaScript</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>