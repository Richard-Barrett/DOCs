<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 7] 7.6 Objects as Associative Arrays</TITLE><META NAME="author" CONTENT="David Flanagan"><META NAME="date" CONTENT="Wed Apr 23 18:08:59 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="JavaScript"><META NAME="title" CONTENT="JavaScript: The Definitive Guide"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif" ALT="Javascript: The Definitive Guide"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch07_05.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 7</b></td><td width=172 align=right valign=top><A HREF="ch07_07.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="ch07-SECT1-AUTOID.6">7.6 Objects as Associative Arrays</A></h2><P CLASS=para><A NAME="CH07.ARRAY1"></A><A NAME="CH07.ARRAY2"></A><A NAME="CH07.ARRAY3"></A>      We've seen the <tt CLASS=literal>.</tt> operator used to access the      properties of an object. It is also possible to use the      <tt CLASS=literal>[]</tt> operator, more commonly used with      arrays, to access these properties. Thus, the following two      JavaScript expressions have the same value:      <DIV CLASS=programlisting><P><PRE>object.propertyobject["property"]</PRE></DIV>      The important difference to note between these two syntaxes is      that in the first, the property name is an identifier, and in      the second, the property name is a string. We'll see why this is      so important below.    <P CLASS=para>      In C, C++, Java, and similar strongly typed languages an object      can have only a fixed number of properties (or "fields," as      they're often called), and the names of these properties must be      defined in advance. Since JavaScript is a loosely typed      language, this rule does not apply--a program can create      any number of properties in any object. When you use the      <tt CLASS=literal>.</tt> operator to access a property of an object,      however, the name of the property is expressed as an identifier,      and identifiers must be "hardcoded" into your JavaScript      program. That is, identifiers are not a JavaScript data type;      they must be typed literally into a JavaScript program, and      cannot be manipulated by the program.    <P CLASS=para>      On the other hand, when you access a property of an object with      the <tt CLASS=literal>[]</tt> array notation, the name of      the property is expressed as a string. Strings are JavaScript      data types, and they can be manipulated and created while a      program is running. So, for example, you could write the      following code in JavaScript:      <DIV CLASS=programlisting><P><PRE>var addr = "";for(i = 0; i &lt; 4; i++) {    addr += customer["address" + i]}</PRE></DIV>      This code fragment reads and concatenates the properties      <tt CLASS=literal>address0</tt>, <tt CLASS=literal>address1</tt>,      <tt CLASS=literal>address2</tt>, and <tt CLASS=literal>address3</tt> of      the <tt CLASS=literal>customer</tt> object.    <P CLASS=para>      The code fragment above demonstrates the flexibility of using      array notation to access properties of an object with string      expressions. We could have actually written that example using      the <tt CLASS=literal>.</tt> notation, but there are cases for which      only the array notation will do. Suppose, for example, that you      are writing a program that uses network resources to compute the      current value of the user's stock market investments. The program      allows the user to type in the name of each stock they own, and      also the number of shares of each stock. You might use an object      named <tt CLASS=literal>portfolio</tt> to hold this information. The      object would have one property for each stock; the name of the      property would be the name of the stock, and the property value      would be the number of shares of that stock. So, for example, if      a user held 50 shares of stock in Netscape Communications Corp.,      then the <tt CLASS=literal>portfolio.nscp</tt> property would have the      value <tt CLASS=literal>50</tt>.    <P CLASS=para>      One part of this program would be a loop that prompts the user to      enter the name of a stock they own, and then asks them to enter      the number of shares they own of that stock. Inside the loop,      you'd have code something like the following:      <DIV CLASS=programlisting><P><PRE>stock_name = get_stock_name_from_user();shares = get_number_of_shares();portfolio[stock_name] = shares;</PRE></DIV>      Since the user enters stock names at run-time, there is no way      that you can know the property names ahead of time. Since you      can't know the property names when you write the program, there is      no way you can use the <tt CLASS=literal>.</tt> operator to access the      properties of the <tt CLASS=literal>portfolio</tt> object. You can      use the <tt CLASS=literal>[]</tt> operator, however, because it uses a      string value (which is dynamic and can change at run-time), rather      than an identifier (which static and must be hard-coded in the      program), to name the property.    <P CLASS=para>      When an object is used this fashion, it is often called an      <I CLASS=emphasis>associative array</I>--a data structure that      allows you to dynamically associate arbitrary data values with      arbitrary strings. JavaScript objects are actually implemented      internally as associative arrays. The <tt CLASS=literal>.</tt>      notation for accessing properties makes them seem like the static      objects of C++ and Java, and they work perfectly well in that      capacity. But they also have the very powerful ability to      associate values with arbitrary strings. In this respect,      JavaScript objects are much more like Perl arrays than like C++ or      Java objects.    <P CLASS=para>      <A HREF="ch05_01.htm">Chapter 5, <i>Statements</i></A>,      introduced the <tt CLASS=literal>for/in</tt> loop. The real power of      this JavaScript statement becomes clear when we consider its use      with an associative array. To return to the stock portfolio      example, we might use code that looked like the following after      the user had entered her portfolio and we were computing its      current total value:      <DIV CLASS=programlisting><P><PRE>value = 0;for (stock_name in portfolio) {  //<tt CLASS=replaceable><i> for each stock in the portfolio</i></tt>    //<tt CLASS=replaceable><i> get the per share value and multiply it by the number of shares</i></tt>    value += get_share_value(stock_name) * portfolio[stock_name];}</PRE></DIV>      We couldn't write this code without the      <tt CLASS=literal>for/in</tt> loop, because the names of the stocks      aren't known in advance, and this is the only way to extract      those property names from the associative array (i.e.,      JavaScript object) named <tt CLASS=literal>portfolio</tt>.    </DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch07_05.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="ch07_07.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>Classes in JavaScript</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>Special Object Methods</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>