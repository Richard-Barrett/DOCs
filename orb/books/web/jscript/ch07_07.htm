<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 7] 7.7 Special Object Methods</TITLE><META NAME="author" CONTENT="David Flanagan"><META NAME="date" CONTENT="Wed Apr 23 18:09:01 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="JavaScript"><META NAME="title" CONTENT="JavaScript: The Definitive Guide"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif" ALT="Javascript: The Definitive Guide"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch07_06.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 7</b></td><td width=172 align=right valign=top><A HREF="ch08_01.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="ch07-SECT1-AUTOID.7">7.7 Special Object Methods</A></h2><P CLASS=para><A NAME="CH07.OBJSPEC1"></A><A NAME="CH07.OBJSPEC2"></A>      For any object in JavaScript, there are three special methods      that control the way the object is manipulated. Each of these      methods is automatically invoked by JavaScript to manipulate the      object in some way. By providing a custom definition of the      method, you can control the way an object is manipulated. The      methods are <tt CLASS=literal>toString()</tt>, which is invoked to      convert the object to a string, <tt CLASS=literal>valueOf()</tt>,      which is invoked to convert the object to a number or other      nonobject type, and <tt CLASS=literal>assign()</tt>, which is      invoked to assign a value to the object. These three methods are      detailed in the sections below.    <DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.5">The toString() Method</A></h3><P CLASS=para>	The <tt CLASS=literal>toString()</tt>	method takes no arguments and returns a string, which should	somehow represent the type and/or value of the object referred	to by <tt CLASS=literal>this</tt>. JavaScript invokes this method	whenever it needs to convert an object to a string. This	occurs, for example, when you use the <tt CLASS=literal>+</tt>	operator to concatenate a string with an object, or when you	pass an object to a method like	<tt CLASS=literal>document.write()</tt>. The default	<tt CLASS=literal>toString()</tt> method for user-defined objects is	not very informative. For example, the following lines of code	simply cause the browser to display the string "[object Object]":	<DIV CLASS=programlisting><P><PRE>c = new Circle(1, 0, 0);document.write(c);</PRE></DIV>      <P CLASS=para>	You can define your own <tt CLASS=literal>toString()</tt> method so	that your objects can be converted to more meaningful strings	that contain more information about the object being converted.	This is very useful when debugging programs, and if the string	conversions are chosen carefully, it can also be useful in the	programs themselves.      <P CLASS=para>	The <tt CLASS=literal>toString()</tt> method is an excellent	candidate, of course, for inclusion in a prototype object when	defining a class of JavaScript objects. We might write and	register a <tt CLASS=literal>toString()</tt> method for our	<tt CLASS=literal>Circle</tt> class as follows:	<DIV CLASS=programlisting><P><PRE>function Circle_toString() {    return "[Circle of radius " + this.r + ", centered at ("           + this.x + ", " + this.y + ").]";}Circle.prototype.toString = Circle_toString();</PRE></DIV>	With this <tt CLASS=literal>toString()</tt> method defined, a	typical Circle object might be converted to "[Circle of radius	1, centered at (0,0).]".      </DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.6">The valueOf() Method</A></h3><P CLASS=para>	The <tt CLASS=literal>valueOf()</tt> method is much like the	<tt CLASS=literal>toString()</tt> method, but is called when	JavaScript needs to convert an object to some type other than an	object or a string, typically a number. It takes no arguments,	and should return a number, Boolean, or function that somehow	represents the "value" of the object referred to by the	<tt CLASS=literal>this</tt> keyword.      <P CLASS=para>	Most objects are more complicated than number or Boolean values,	and so the <tt CLASS=literal>valueOf()</tt> method is not often	used. In fact, its main purpose is for use with the Number,	Boolean, and Function objects, for which it returns the	corresponding number, Boolean, or function value. For most	objects, the default <tt CLASS=literal>valueOf()</tt> method simply	returns the object itself; this is a way of indicating that the	object could not be converted to any nonobject type. You may	occasionally find circumstances in which you can meaningfully	convert an object to a primitive type, and in these cases, you	may want to provide a custom definition of the	<tt CLASS=literal>valueOf()</tt> method.      <P CLASS=para>	Suppose, for example, that you define a class of Complex objects	that represent complex numbers. This class will define methods	for arithmetic on complex numbers, but you'd still like to be	able to use your Complex objects with the regular arithmetic	operators, as if they were real numbers. You might do so with	code like that shown in <A HREF="ch07_07.htm#JSCRIPT-CH-OBJECTS-EX-6">Example 7-6</A>.      <DIV CLASS=example><h4 CLASS=example><A CLASS="TITLE" NAME="JSCRIPT-CH-OBJECTS-EX-6">Example 7-6: Defining and Using the valueOf() Method</A></h4><DIV CLASS=programlisting><P><PRE>function Complex(x,y) {    this.x = x;   //<tt CLASS=replaceable><i> real part of complex number</i></tt>    this.y = y;   //<tt CLASS=replaceable><i> imaginary part of complex number</i></tt>}//<tt CLASS=replaceable><i> force the prototype object to be created</i></tt>new Complex(0,0); //<tt CLASS=replaceable><i> define some methods</i></tt>Complex.prototype.valueOf = new Function("return this.x");Complex.prototype.toString = new Function("return '{'+this.x+','+this.y+'}'");//<tt CLASS=replaceable><i> create new complex number object</i></tt>c = new Complex(4,1);  //<tt CLASS=replaceable><i> Now rely on the valueOf() operator to treat it like a real number.</i></tt>//<tt CLASS=replaceable><i> Note that this wouldn't work with the + operator--that would convert</i></tt>//<tt CLASS=replaceable><i> the object to a string and do string concatenation.</i></tt>x = c * 2;          //<tt CLASS=replaceable><i> x = 8</i></tt>x = Math.sqrt(c);   //<tt CLASS=replaceable><i> x = 2</i></tt></PRE></DIV></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.7">The assign() Method</A></h3><P CLASS=para><A NAME="CH07.ASS"></A>	The <tt CLASS=literal>assign()</tt> method is a new feature of	Navigator 3.0, and supports a kind of C++-style "operator	overloading" for the <tt CLASS=literal>=</tt> operator.	The <tt CLASS=literal>assign()</tt> method of an object is invoked	when that object appears on the left-hand side of an assignment	operator. It is passed one argument, which is the value on the	right-hand side of the operator. The purpose of the method is	in some fashion to assign the value passed as an argument to the	object referred to by the <tt CLASS=literal>this</tt> keyword. The	default version of this method simply performs an assignment,	replacing the object on the left-hand side of the operator with	the new value from the right-hand side. You would define a	custom <tt CLASS=literal>assign()</tt> method when you want the	assignment to behave differently.      <P CLASS=para>	One use of the <tt CLASS=literal>assign()</tt> method is to	implement an assignment with side effects. Client-side	JavaScript does this with the Location object stored in the	<tt CLASS=literal>Window.location</tt> property. When a string	containing a URL is assigned to this Location object, two things	happen. First, the URL is parsed, and its various components	are assigned to the properties of the Location object. And	second, and more importantly, the web browser reads the contents	of the new URL and displays them. This all occurs as the	side effect of an assignment, and is implemented with a custom	<tt CLASS=literal>assign()</tt> method.      <P CLASS=para>	Another use of the <tt CLASS=literal>assign()</tt> method is to make	objects read-only. If you define an assign method that does	nothing, then no one will be able to change the value of the	variable that holds your object. For example:	<DIV CLASS=programlisting><P><PRE>//<tt CLASS=replaceable><i> give an object an empty assign() method</i></tt>function no_op() { /* do nothing */ }o = new Object();o.assign = no_op;//<tt CLASS=replaceable><i> Now, no one can overwrite o. It will always contain the object we created.</i></tt>o = 3;           //<tt CLASS=replaceable><i> has no effect</i></tt>o = new Date();  //<tt CLASS=replaceable><i> has no effect</i></tt>//<tt CLASS=replaceable><i> Note, though that we can assign properties to o:</i></tt>o.x = 3;         //<tt CLASS=replaceable><i> this works fine</i></tt></PRE></DIV>	This technique can be extended to print issue a warning if	any attempt is made to overwrite the object. You might do it	with an <tt CLASS=literal>assign()</tt> method defined like this:	<DIV CLASS=programlisting><P><PRE>function warn_on_assign(value) {     alert('Attempt to set a read-only variable to:\n' + value);}ReadOnlyClass.prototype.assign = warn_on_assign;</PRE></DIV>      <P CLASS=para>	Finally, the <tt CLASS=literal>assign()</tt> method can be used to	change the very way that assignment is done. Objects are	usually assigned "by reference". That is, when one object is	assigned to another, the contents of the object are not copied;	instead, a reference to the new object merely overwrites a	reference to the old. (The concept of assignment "by reference"	is explained in detail in <A HREF="ch09_01.htm">Chapter 9, <i>Further Topics in JavaScript</i></A>.)	If you want the <I CLASS=emphasis>contents</I> of an object to be	copied when you assign one to another, you can do so with an	<tt CLASS=literal>assign()</tt> method like the following:	<DIV CLASS=programlisting><P><PRE>function assign_properties(value){    //<tt CLASS=replaceable><i> if the value is an object, copy it property by property</i></tt>    //<tt CLASS=replaceable><i> otherwise, do nothing and leave the variable unchanged.</i></tt>    if (typeof value == "object")        for (prop in value) this[prop] = value[prop];}MyClass.prototype.assign = assign_properties;</PRE></DIV>      <P CLASS=para>	The <tt CLASS=literal>assign()</tt> method is one of the most	obscure and least elegant features of JavaScript. The	JavaScript developers at Microsoft did not support it in	Internet Explorer 3.0, and don't plan to support it in future	versions of the language either. Even the JavaScript designers	at Netscape aren't happy with <tt CLASS=literal>assign()</tt>; they	are thinking about providing similar functionality through a	cleaner, more general mechanism in a future version of	JavaScript. For these reasons, the <tt CLASS=literal>assign()</tt>	method may be one of the least portable features of JavaScript,	and you should think twice before writing code that relies upon	it.       </DIV></DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch07_06.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="ch08_01.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>Objects as Associative Arrays</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>Arrays</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>