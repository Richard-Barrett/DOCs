<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 8] 8.2 Multidimensional Arrays</TITLE><META NAME="author" CONTENT="David Flanagan"><META NAME="date" CONTENT="Thu Apr 24 13:32:31 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="JavaScript"><META NAME="title" CONTENT="JavaScript: The Definitive Guide"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif" ALT="Javascript: The Definitive Guide"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch08_01.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 8</b></td><td width=172 align=right valign=top><A HREF="ch08_03.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="ch08-SECT1-AUTOID.2">8.2 Multidimensional Arrays</A></h2><P CLASS=para>      JavaScript does not support true multidimensional arrays, but it      does allow you to approximate them quite nicely with arrays of      arrays. To access a data element in an array of arrays, simply      use the <tt CLASS=literal>[]</tt> operator twice. For      example, suppose the variable <tt CLASS=literal>matrix</tt> is an      array of arrays of numbers. Every element      <tt CLASS=literal>matrix[x]</tt> is an array of numbers. To access      a particular number within this array you would write      <tt CLASS=literal>matrix[x][y]</tt>.    <P CLASS=para>      Instead of using arrays of arrays, you can also use associative      arrays to simulate multidimensional arrays. Because an      associative array allows an arbitrary string as its index, it is      easy to use them to simulate multidimensional      arrays--i.e., to look up a value based on more than one      index. You could use the following function, for example, to      simulate reading a value from a three-dimensional array:      <DIV CLASS=programlisting><P><PRE>function index3(arr, x, y, z) {    return arr[x + "," + y + "," + z];}</PRE></DIV>    <P CLASS=para>      This example works because it combines the <tt CLASS=literal>x</tt>,      <tt CLASS=literal>y</tt>, and <tt CLASS=literal>z</tt> index values into      a single, unique string that acts as a property name in the      associative array (or object).    </DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch08_01.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="ch08_03.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>Array Elements</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>Array/Object Dual Nature</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>