<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 8] 8.4 Creating Arrays</TITLE><META NAME="author" CONTENT="David Flanagan"><META NAME="date" CONTENT="Thu Apr 24 13:32:32 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="JavaScript"><META NAME="title" CONTENT="JavaScript: The Definitive Guide"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif" ALT="Javascript: The Definitive Guide"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch08_03.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 8</b></td><td width=172 align=right valign=top><A HREF="ch08_05.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="ch08-SECT1-AUTOID.4">8.4 Creating Arrays</A></h2><P CLASS=para><A NAME="CH08.DEFARR1"></A><A NAME="CH08.DEFARR2"></A><A NAME="CH08.DEFARR3"></A><A NAME="CH08.DEFARR4"></A>      Since arrays are the same thing as objects, they can be created      in exactly the same way as objects are with the      <tt CLASS=literal>new</tt> operator:      <DIV CLASS=programlisting><P><PRE>a = new Object();a[0] = 1; a[1] = 2;  ... etc ...</PRE></DIV>    <P CLASS=para>      Just as you write custom constructor methods to perform      initialization on newly created objects, you can also write your      own custom array constructor functions as shortcuts for array      initialization. <A HREF="ch08_04.htm#JSCRIPT-CH-ARRAYS-EX-1">Example 8-1</A> shows a      constructor that creates an array, initializes a      <tt CLASS=literal>size</tt> property of the array, and then      initializes <tt CLASS=literal>size</tt> elements (starting at 1,      rather than 0) to a value of 0. This is useful when you want to      know exactly how many elements your array contains, and want to      be sure that all elements have a defined value.    <DIV CLASS=example><h4 CLASS=example><A CLASS="TITLE" NAME="JSCRIPT-CH-ARRAYS-EX-1">Example 8-1: An Array Constructor</A></h4><DIV CLASS=programlisting><P><PRE>//<tt CLASS=replaceable><i> The constructor function</i></tt>function EmptyArray(length){    this.size = length;    for(var i = 1; i &lt;= length; i++)        this[i] = 0;   }//<tt CLASS=replaceable><i> Using the constructor</i></tt>a = new EmptyArray(32);</PRE></DIV></DIV><P CLASS=para>      In Navigator 3.0 and Internet Explorer 3.0, there is a predefined      <tt CLASS=literal>Array()</tt> constructor function that you      can use to create arrays. You can use this constructor in three      distinct ways. The first is to call it with no arguments:      <DIV CLASS=programlisting><P><PRE>a = new Array();</PRE></DIV>      This method creates an empty array with no elements. It is like      calling <tt CLASS=literal>new Object()</tt>, except that it      gives the newly created object (i.e., an array) a      <tt CLASS=literal>length</tt> property set to 0.    <P CLASS=para>      The second technique is to call the      <tt CLASS=literal>Array()</tt> constructor with a single      argument, which specifies a length:      <DIV CLASS=programlisting><P><PRE>a = new Array(10);</PRE></DIV>      This technique creates an empty array as well, but it sets the      <tt CLASS=literal>length</tt> property of the array to the value      specified.    <P CLASS=para>      The final technique allows you to specify values for the first      <I CLASS=emphasis>n</I> elements of an array:      <DIV CLASS=programlisting><P><PRE>a = new Array(5, 4, 3, 2, 1, "testing, testing");</PRE></DIV>      In this form, the constructor is passed two or more arguments.      Each argument specifies an element value and may be of any type.      Elements are assigned to the array starting with element 0. The      <tt CLASS=literal>length</tt> property of the array is set to the      number of arguments that were passed to the constructor.    <P CLASS=para>      Remember that the <tt CLASS=literal>Array()</tt> constructor      is available only in Navigator 3.0 and later. In 2.0, you must      write your own array constructor functions. And, of course, in      either 2.0 or 3.0, you can use any object, no matter how you      create it, as an array. Bear in mind, though, that there are      some significant differences (which we'll explore later) between      arrays in Navigator 2.0 and Navigator 3.0, and you must      carefully take these into account when backward compatibility      with Navigator 2.0 is required.    </DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch08_03.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="ch08_05.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>Array/Object Dual Nature</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>Array Length Property</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>