<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 8] 8.6 Array Methods</TITLE><META NAME="author" CONTENT="David Flanagan"><META NAME="date" CONTENT="Thu Apr 24 13:32:35 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="JavaScript"><META NAME="title" CONTENT="JavaScript: The Definitive Guide"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif" ALT="Javascript: The Definitive Guide"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch08_05.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 8</b></td><td width=172 align=right valign=top><A HREF="ch08_07.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="ch08-SECT1-AUTOID.6">8.6 Array Methods</A></h2><P CLASS=para><A NAME="CH08.ARRMETH1"></A><A NAME="CH08.ARRMETH2"></A>      In the previous section we saw that--in Navigator 3.0 and Internet      Explorer 3.0--arrays created with the <tt CLASS=literal>Array()</tt>      constructor have a <tt CLASS=literal>length</tt> property. In      Navigator 3.0, but <I CLASS=emphasis>not</I> in IE 3.0, these      arrays also support three methods that can be used to manipulate      the array elements. These methods will be implemented in a future      version of IE.    <P CLASS=para><A NAME="CH08.ARRMETH3"></A>      The <tt CLASS=literal>Array.join()</tt> method converts all the      elements of the array to a string, and concatenates them,      separating them with an optionally specified string passed as an      argument to the method. If no separator string is specified,      then a comma is used. For example, the following lines of code      produce the string "1,2,3":      <DIV CLASS=programlisting><P><PRE>a = new Array(1,2,3);  //<tt CLASS=replaceable><i> Create a new array with these three elements.</i></tt>s = a.join();          //<tt CLASS=replaceable><i> s == "1,2,3"</i></tt></PRE></DIV>      And the following lines specify the optional separator to produce      a slightly different result:      <DIV CLASS=programlisting><P><PRE>a = new Array(1,2,3);s = a.join(", ");   //<tt CLASS=replaceable><i> s == "1, 2, 3". Note the space after the comma.</i></tt></PRE></DIV>      In some ways, the <tt CLASS=literal>Array.join()</tt> method is the      reverse of the <tt CLASS=literal>String.split()</tt> method which      creates an array by breaking a string up into pieces.    <P CLASS=para>      The <tt CLASS=literal>Array.reverse()</tt> method reverses the order      of the elements of an array. It does this "in place"--i.e., it      doesn't create a new array with the elements rearranged, but      instead rearranges them in the already existing array. For      example, the following code, which uses the      <tt CLASS=literal>reverse()</tt> and the <tt CLASS=literal>join()</tt>      methods, produces the string "3,2,1":      <DIV CLASS=programlisting><P><PRE>a = new Array(1,2,3);   //<tt CLASS=replaceable><i> a[0] = 1; a[1] = 2; a[2] = 3;</i></tt>a.reverse();            //<tt CLASS=replaceable><i> now a[0] = 3; a[1] = 2; a[2] = 1;</i></tt>s = a.join()            //<tt CLASS=replaceable><i> s = "3,2,1"</i></tt></PRE></DIV>    <P CLASS=para>      The final array method is <tt CLASS=literal>Array.sort()</tt>, which      sorts the elements of an array. Like the      <tt CLASS=literal>reverse()</tt> method, it does this "in place".      When <tt CLASS=literal>sort()</tt> is called with no arguments, it      sorts the array elements in alphabetical order (temporarily      converting them to strings, to perform the comparison, if      necessary):      <DIV CLASS=programlisting><P><PRE>a = new Array("banana", "cherry", "apple");a.sort();s = a.join(", ");   //<tt CLASS=replaceable><i> s == "apple, banana, cherry". </i></tt></PRE></DIV>      You can also pass an argument to the <tt CLASS=literal>sort()</tt>      method if you want to sort the array elements in some other      order. To allow this method to be a fully general sorting      algorithm, the optional argument should be a function. This      function will be passed two arguments that it should compare. If      the first argument should appear before the second in the sorted      array, then the function should return a number less than zero.      If the first argument should appear after the second in the sorted      array, then the function should return a number greater than      zero. And if the two values are equivalent (their order is      irrelevant), then the function should return 0. So, for example,      to sort array elements into numerical, rather than alphabetical      order, you might do the following:      <DIV CLASS=programlisting><P><PRE>a = new Array(33, 4, 1111, 222);a.sort();                        //<tt CLASS=replaceable><i> alphabetical order:  1111, 222, 33, 4</i></tt>function numberorder(a,b) {     return a-b; }a.sort(numberorder);             //<tt CLASS=replaceable><i> numerical order: 4, 33, 222, 1111</i></tt></PRE></DIV>      You can probably think of other comparison functions that will      sort numbers into various esoteric orders:  reverse numerical      order, odd numbers before even numbers, etc. The possibilities      become more interesting, of course, when the elements you are      comparing are objects rather than simple types like numbers or      strings.     </DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch08_05.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="ch08_07.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>Array Length Property</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>Arrays in Navigator 2.0</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>