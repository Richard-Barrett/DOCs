<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 8] 8.7 Arrays in Navigator 2.0</TITLE><META NAME="author" CONTENT="David Flanagan"><META NAME="date" CONTENT="Thu Apr 24 13:32:36 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="JavaScript"><META NAME="title" CONTENT="JavaScript: The Definitive Guide"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif" ALT="Javascript: The Definitive Guide"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch08_06.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 8</b></td><td width=172 align=right valign=top><A HREF="ch08_08.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="ch08-SECT1-AUTOID.7">8.7 Arrays in Navigator 2.0</A></h2><P CLASS=para><A NAME="CH08.TWO"></A>      As noted above, the implementation of arrays in Navigator 2.0 is      substantially different than that in either Navigator 3.0 or      Internet Explorer 3.0. One of the differences we've seen is that      there is no <tt CLASS=literal>Array()</tt> constructor in      Navigator 2.0, and so you may want to write your own constructor      function. Similarly, you may want to manage the value of a      <tt CLASS=literal>length</tt> (or <tt CLASS=literal>size</tt>) property      yourself.    <P CLASS=para>      But the biggest difference between Navigator 2.0 and 3.0 is in how      array elements and object properties interact. In both versions      of Navigator, arrays and objects are the same basic data type:      objects can have array elements, and arrays can have object      properties. The difference is that in Navigator 2.0, elements and      properties can <I CLASS=emphasis>overwrite</I> each other; in      Navigator 3.0 they can't.    <P CLASS=para>      In Navigator 2.0, a newly defined property takes up the "slot"      of the next available array element. Thus after executing the      following lines, in the Navigator 2.0 browser,      <tt CLASS=literal>person.name</tt> is the same as      <tt CLASS=literal>person[0]</tt>, and      <tt CLASS=literal>person.address</tt> is the same as      <tt CLASS=literal>person[1]</tt>:      <DIV CLASS=programlisting><P><PRE>person = new Object();person.name = "david";person.address = "somewhere on the internet";</PRE></DIV>    <P CLASS=para>      If there are already some array elements defined in the object,      then a new property takes up the element after the highest      element already defined (even if there are undefined elements      with lower indexes). So in the following code, in Navigator 2.0,      <tt CLASS=literal>address.zip</tt> is the same as      <tt CLASS=literal>address[4]</tt>:      <DIV CLASS=programlisting><P><PRE>address = new Object();address[3] = "Anytown, USA";address.zip = 22222;</PRE></DIV>    <P CLASS=para>      The implication of all this is that if you define properties and      later set array elements (for example, <tt CLASS=literal>address[4] =	66666</tt>), you may inadvertently be overwriting the value      of your properties. This can lead to strange bugs that are      difficult to find.    <P CLASS=para>      Note that if, for any given object, you use only object      properties, or             only array elements, then you won't encounter this overlap      problem. But, as we've seen, it is common to use a      <tt CLASS=literal>length</tt> property (or a <tt CLASS=literal>size</tt>      property) in conjunction with arrays. We must be careful to do      this correctly. The convention for most Navigator 2.0      JavaScript code is to use array element 0 to hold the      <tt CLASS=literal>length</tt> property, and then to begin the array      contents themselves with element 1. Thus, in Navigator 2.0 it      is common to see array constructors like the one we saw above:    <DIV CLASS=programlisting><P><PRE>function EmptyArray(length){    this.size = length;    for(var i = 1; i &lt;= length; i++)        this[i] = 0;   }</PRE></DIV><P CLASS=para>      The crucial feature of this constructor is that it assigns a      value to the <tt CLASS=literal>size</tt>[3]      property <I CLASS=emphasis>before</I> it initializes any of the      array elements. Creating this <tt CLASS=literal>size</tt> property      uses up element 0 of the array, so the loop initializes the      array starting with element 1. If, instead, we had initialized      the array and then set the <tt CLASS=literal>size</tt> property,      then that property would have been at the end of the array. If      we later added more elements to the array, we would overwrite      the value of <tt CLASS=literal>size</tt>. Of course, if we know that      our array has a fixed size and will never be made larger, then      there would be no problem with doing it this way, and it allows      us to begin the array with element 0 instead of element 1.    <blockquote class=footnote><P CLASS=para>[3] 	  We use a <tt CLASS=literal>size</tt> property here instead of	  <tt CLASS=literal>length</tt> to avoid confusion with Navigator	  3.0 arrays that have an automatically updated	  <tt CLASS=literal>length</tt> property. By using a different	  name we won't expect the property to be automatically updated.	</blockquote><P CLASS=para>      As we've seen, another difference between arrays in Navigator      2.0 and 3.0 is that in Navigator 3.0, arrays created with the      <tt CLASS=literal>Array()</tt> constructor have their      <tt CLASS=literal>length</tt> property automatically updated when      new elements are added to the array. If you need this feature in      Navigator 2.0, you'll have to implement it yourself. You can do      it with code like this:      <DIV CLASS=programlisting><P><PRE>a[i] = j;if (i &gt; a.size) a.size = i;</PRE></DIV>      Note that this code fragment assumes the array begins      with an index of 1, not 0.    <P CLASS=para>      Despite all this discussion of the array <tt CLASS=literal>length</tt>      property, and the ways to simulate it in Navigator 2.0, don't      forget that there are many algorithms and uses for arrays in which      a <tt CLASS=literal>size</tt> or <tt CLASS=literal>length</tt> property is      not necessary. When this is possible, you can simply not bother      with a <tt CLASS=literal>size</tt> property. If your array has no      object properties assigned, you don't have to worry about about      overwriting array elements. And when your algorithm does require      you to keep track of the size of your array, an obvious      alternative to a <tt CLASS=literal>size</tt> property is to maintain      the array length in a separate variable, independent of the      array. This also avoids the problem of properties overwriting      elements.     <P CLASS=para>      Finally, one further feature of arrays in Navigator 2.0 is that      they can be indexed using object notation. Just as object      properties can be accessed with the <tt CLASS=literal>.</tt> operator      and a literal property name or the <tt CLASS=literal>[]</tt> operator      and a property name expressed as a string, so too can Navigator      2.0 arrays be accessed with either operator. When using the      traditional array <tt CLASS=literal>[]</tt> operator, the index can be      any expression that evaluates to a positive integer. When using      the <tt CLASS=literal>.</tt> operator, the index must be an integer      literal. So, in Navigator 2.0, the expression      <tt CLASS=literal>a.2</tt> is legal and is equivalent to      <tt CLASS=literal>a[2]</tt>. Using the <tt CLASS=literal>.</tt> operator      is not at all recommended--this bizarre feature of the language is      deprecated, and has been removed in Navigator 3.0.    </DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch08_06.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="ch08_08.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>Array Methods</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>Built-in Arrays</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>