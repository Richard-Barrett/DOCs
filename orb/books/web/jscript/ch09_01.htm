<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 9] Further Topics in JavaScript</TITLE><META NAME="author" CONTENT="David Flanagan"><META NAME="date" CONTENT="Wed Apr 23 18:11:37 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="JavaScript"><META NAME="title" CONTENT="JavaScript: The Definitive Guide"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF" TEXT="#000000"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif" ALT="Javascript: The Definitive Guide"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch08_09.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 9</b></td><td width=172 align=right valign=top><A HREF="ch09_02.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><H1 CLASS=chapter><A CLASS="TITLE" NAME="JSCRIPT-CH-FURTHER">9. Further Topics in JavaScript</A></H1><DIV CLASS=htmltoc><p><b>Contents:</b><br>Automatic Data Type Conversion<br><A HREF="ch09_02.htm">Explicit Data Type Conversions</A><BR><A HREF="ch09_03.htm">By Value vs. By Reference</A><BR></DIV><P CLASS=para>    This chapter covers miscellaneous JavaScript topics that would have    bogged down previous chapters had they been covered there. Now that    you have read through the preceding chapters, and are experienced with    the core JavaScript language, you are ready to tackle the more    advanced and detailed concepts presented here. In fact, you may    prefer to move on to other chapters and learn about the specifics of    client-side JavaScript at this point. Do be sure to return to this    chapter, however. You will not truly understand the workings of the    JavaScript language if you have not read the material in this    chapter.   <DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="ch09-SECT1-AUTOID.1">9.1 Automatic Data Type Conversion</A></h2><P CLASS=para><A NAME="CH09.CONV"></A><A NAME="CH09.CONV7"></A>      We've seen that JavaScript is an untyped language. This means,      for example, that we don't have to specify the data type of      variable when we declare it. The fact that JavaScript is untyped      gives it the flexibility and simplicity that are desirable for a      scripting language (although those features come at the expense      of rigor, which is important for the longer, more complex      programs often written in stricter languages like C and      Java). Another feature of JavaScript's flexible treatment of      data types is the automatic type conversions that it      performs. For example, if you call      <tt CLASS=literal>document.write()</tt> to output the value of a      Boolean value, JavaScript will automatically convert that value      to the string <tt CLASS=literal>"true"</tt> or the string      <tt CLASS=literal>"false"</tt>. Similarly, if you write an      <tt CLASS=literal>if</tt> that tests a string value, JavaScript will      automatically convert that string to a Boolean value--to      <tt CLASS=literal>false</tt> if the string is empty and to      <tt CLASS=literal>true</tt> otherwise.    <P CLASS=para>      The subsections below explain, in detail, all of the automatic      data conversions performed by JavaScript.    <DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch09-SECT2-AUTOID.1">Conversions to Strings</A></h3><P CLASS=para><A NAME="CH09.CONV1"></A>	Of all the automatic data conversions performed by JavaScript,	conversions to strings are probably the most common. Whenever	a nonstring value is used in a "string context," JavaScript	converts that value to a string.  A "string context" is	anywhere that a string value is expected.  Generally, this	means arguments to built-in JavaScript functions and	methods. As described above, for example, if we pass a Boolean	value to <tt CLASS=literal>document.write()</tt>, it will be	converted to a string before being output. Similarly, if we	pass a number to this method, it will also be converted to a	string before output.      <P CLASS=para>	Another common "string context" occurs with the	<tt CLASS=literal>+</tt> operator. When <tt CLASS=literal>+</tt> is	used with numeric operands, it adds them. When it is used with	string operands, however, it concatenates them. When one	operand is a string, and one is a nonstring, the nonstring	operand will first be converted to a string and then the two	strings will be concatenated:	<DIV CLASS=programlisting><P><PRE>x = 1 + 2;                //<tt CLASS=replaceable><i> yields 3</i></tt>x = 'hello' + 'world';    //<tt CLASS=replaceable><i> yields 'helloworld'</i></tt>x = 1 + '2';              //<tt CLASS=replaceable><i> yields '12'</i></tt>x = true + '3';           //<tt CLASS=replaceable><i> yields 'true3'</i></tt></PRE></DIV>      <P CLASS=para>	Actually, the <tt CLASS=literal>+</tt> operator even works when both	operands are of object type: the operands are converted to	strings and concatenated. When one operands is an object, and	the other is neither an object nor a string, both operands are	converted to strings and concatenated:	<DIV CLASS=programlisting><P><PRE>x = window + 1;             //<tt CLASS=replaceable><i> yields '[object Window]1'</i></tt>x = window + top;           //<tt CLASS=replaceable><i> yields '[object Window][object Window]'</i></tt>x = window + true;          //<tt CLASS=replaceable><i> yields '[object Window]true'</i></tt></PRE></DIV>      <P CLASS=para>	The paragraphs above have described the "string contexts" in	which values are converted to strings. Here is exactly how        that conversion is performed:	<P><UL CLASS=itemizedlist><li CLASS=listitem> 	      Numbers are converted to strings in the obvious way: the	      resulting string contains the digits of the decimal	      representation of the number. The number	      <tt CLASS=literal>123.45</tt>, for example, is converted to	      the string <tt CLASS=literal>"123.45"</tt>.	    <P><li CLASS=listitem>	      The Boolean value <tt CLASS=literal>true</tt> is converted to	      the string <tt CLASS=literal>"true"</tt>, and the value	      <tt CLASS=literal>false</tt> is converted to the string	      <tt CLASS=literal>"false"</tt>. 	    <P><li CLASS=listitem>	      In Navigator, functions are converted to strings which	      consist of the text of the function definition,	      including the complete body of the function. Thus, a	      function defined as follows:	      <DIV CLASS=programlisting><P><PRE>function square(x) { return x*x; }</PRE></DIV>	      is converted to the string:	      <DIV CLASS=programlisting><P><PRE>"function square(x) {    return x*x;}"</PRE></DIV>	      The JavaScript code in the function body may be	      reformatted during this conversion--note the insertion of	      newlines in the example above. Similarly, any comments in	      the original function definition will not appear in the	      resulting string. An interesting feature of the string	      conversion of a function is that it is guaranteed to be	      perfectly legal JavaScript code, and is thus may be passed	      to the <tt CLASS=literal>eval()</tt> method to be	      reinterpreted (perhaps in some new context). You should	      not rely on this, however, because Internet	      Explorer 3.0 does not include the body of a function when	      it converts it to a string, and this behavior is not	      likely to change in future versions.	    <P><li CLASS=listitem>	      Objects are converted to strings by calling their	      <tt CLASS=literal>toString()</tt> method. By default, most	      objects have a <tt CLASS=literal>toString()</tt> method that	      specifies at least the type of the object. For	      example, the Window object <tt CLASS=literal>window</tt> is	      converted to the string <tt CLASS=literal>"[object Window]"</tt>. 	      Similarly, the <tt CLASS=literal>navigator</tt> object	      converts to the string <tt CLASS=literal>"[object Navigator]"</tt>.	      By default, all user-defined objects convert to the vague	      string <tt CLASS=literal>"[object Object]"</tt>. 	    <P CLASS=para>	      Note that you can override the default	      <tt CLASS=literal>toString()</tt> method for any object,	      thereby controlling exactly how the object is converted to	      a string.	    <P><li CLASS=listitem> 	      The <tt CLASS=literal>null</tt> value is converted to the	      string <tt CLASS=literal>"null"</tt>, and the JavaScript	      undefined value is converted to the string	      <tt CLASS=literal>"undefined"</tt>.	    <P></UL>      </DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch09-SECT2-AUTOID.2">Conversions to Numbers</A></h3><P CLASS=para><A NAME="CH09.CONV3"></A>	Just as JavaScript values are automatically converted to strings	when used in a "string context," they are automatically	converted to numbers when used in a "numeric context." The two	numeric contexts are:	<P><UL CLASS=itemizedlist><li CLASS=listitem> 	      Numeric arguments to built-in functions and methods	      (arguments to user-defined functions do not have a type	      defined, so no conversion is performed).	    <P><li CLASS=listitem> 	      Operands of various arithmetic, comparison, and other	      operators. 	    <P></UL>      <P CLASS=para>	For example, the following lines of code contain non-numeric	values in numeric contexts, and cause automatic conversion to	occur:	<DIV CLASS=programlisting><P><PRE>Math.sin("1.45");       //<tt CLASS=replaceable><i> String "1.45" converted to number 1.45</i></tt>done = sum &gt; "10"       //<tt CLASS=replaceable><i> String "10" converted to number 10</i></tt>sum = sum + true;       //<tt CLASS=replaceable><i> Boolean value true converted to number 1</i></tt>total = total - "3";    //<tt CLASS=replaceable><i> String "3" converted to number 3</i></tt></PRE></DIV>	Note, however, that the following line of code does not cause a	numeric conversion to occur.	<DIV CLASS=programlisting><P><PRE>total = total + "3"</PRE></DIV>	Recall that the <tt CLASS=literal>+</tt> operator adds numbers	<I CLASS=emphasis>and</I> concatenates strings. Since there is	one string operand in this example, JavaScript interprets the	operator as the string concatenation operator, rather than the	addition operator.  Therefore, there is not a numeric context	here, and the string is not converted to a number. In fact,	just the opposite occurs: the numeric value	<tt CLASS=literal>total</tt> occurs in a string context, and	therefore is converted to a string.      <P CLASS=para>	JavaScript values are converted to numbers according to the	following rules:	<P><UL CLASS=itemizedlist><li CLASS=listitem>	      If a string contains the decimal representation of an	      integer or floating-point number, with no trailing	      non-numeric characters, then the string is converted to	      that number. If the string does not represent a number,	      or contains trailing characters that are not part of the	      number, then the attempt to convert it fails, and	      JavaScript displays an error message. As a special case,	      the empty string (<tt CLASS=literal>""</tt>) is converted to	      the number <tt CLASS=literal>0</tt>.	    <P><li CLASS=listitem>	      The Boolean value <tt CLASS=literal>true</tt> is converted to	      the number 1, <tt CLASS=literal>false</tt> to	      <tt CLASS=literal>0</tt>. 	    <P><li CLASS=listitem>	      <tt CLASS=literal>null</tt> is converted to the number	      <tt CLASS=literal>0</tt>. 	    <P><li CLASS=listitem>	      Objects are converted to numbers by invoking their	      <tt CLASS=literal>valueOf()</tt> method, if they have one. If	      the <tt CLASS=literal>valueOf()</tt> method returns a number,	      that value is the result of the conversion. If	      <tt CLASS=literal>valueOf()</tt> returns a string or Boolean	      value, then that value is converted to a number following	      the rules above. If the <tt CLASS=literal>valueOf()</tt>	      method returns some other type, or if no such method	      exists, then the conversion fails, and JavaScript displays	      an error message.	    <P><li CLASS=listitem>	      Functions and the undefined value cannot be converted to	      numbers. Using a function or an undefined value in a	      numeric context will always cause a error message	      to be displayed.	    <P></UL>      </DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch09-SECT2-AUTOID.3">Conversions to Booleans</A></h3><P CLASS=para>	When a JavaScript value is used in a "Boolean context", it is	automatically converted to a Boolean value. A "Boolean context"	is anywhere that a Boolean value is expected: Boolean arguments	to certain built-in methods, the return value from certain	event-handlers, and, more commonly, the expressions used by the	<tt CLASS=literal>if</tt> statement, the <tt CLASS=literal>while</tt>	and <tt CLASS=literal>for</tt> loops, and the conditional	(<tt CLASS=literal>:?</tt>) operator.      <P CLASS=para>	For example, the following lines of code use the integer	<tt CLASS=literal>i</tt>, the string <tt CLASS=literal>s</tt>, and the	object <tt CLASS=literal>o</tt> in Boolean contexts, and cause those	values to be converted to Boolean values:	<DIV CLASS=programlisting><P><PRE>for(i = 10; i; i--) document.write(messages[i]); response = s?"yes":"no";if (o) sum += o.value;</PRE></DIV>      <P CLASS=para>	In C, there is no Boolean type. Integer values are used instead,	and just about any value can implicitly be used in a "Boolean	context". In Java, however, there is a Boolean type, and the	language does not permit any conversion, implicit or explicit, to	Boolean values. This means that you need to be very precise	with your <tt CLASS=literal>if</tt> and <tt CLASS=literal>while</tt>	statement (for example) in Java. JavaScript--like Java--has a	Boolean type, but--like C--it allows just about any type to be	used in a Boolean context. If you are a C programmer, you will	find the JavaScript Boolean conversions intuitive and	convenient. The conversions follow these rules:	<P><UL CLASS=itemizedlist><li CLASS=listitem>	      The number <tt CLASS=literal>0</tt> is converted to	      <tt CLASS=literal>false</tt>. All other numbers are converted	      to <tt CLASS=literal>true</tt>.	    <P><li CLASS=listitem>	      The empty string (<tt CLASS=literal>""</tt>) is converted to	      <tt CLASS=literal>false</tt>. All other strings are converted	      to <tt CLASS=literal>true</tt>.	    <P><li CLASS=listitem> 	      <tt CLASS=literal>null</tt> is converted to	      <tt CLASS=literal>false</tt>. Non-<tt CLASS=literal>null</tt>	      objects are converted to the value	      <tt CLASS=literal>true</tt>, with one exception:  if the	      object has a <tt CLASS=literal>valueOf()</tt> method, and that	      method returns <tt CLASS=literal>false</tt>,	      <tt CLASS=literal>0</tt>, or the empty string, then the object	      is converted to <tt CLASS=literal>false</tt>.	    <P><li CLASS=listitem>	      Functions are always converted to the value	      <tt CLASS=literal>true</tt>. 	    <P><li CLASS=listitem>	      Undefined values are converted to <tt CLASS=literal>false</tt>.	    <P></UL>      </DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch09-SECT2-AUTOID.4">Conversions to Objects</A></h3><P CLASS=para><A NAME="CH09.CONV5"></A>	Just as JavaScript values are converted to strings, numbers,	and Boolean values, when used in the appropriate context, so too	are they converted to objects when used in an "object context."	This is the most subtle of the automatic conversions, and it is	possible to use JavaScript without ever realizing that it is	happening. A value is used in an "object context" when you use	the <tt CLASS=literal>.</tt> operator to read or write a property of	the value or to reference a method of the object. A value is	also used in an object context when you use the	<tt CLASS=literal>[]</tt> operator to access an array element of the	value.      <P CLASS=para>	Why would we want to do this?  If a value is not already an	object, how can it have properties or methods to access, anyway?	Consider JavaScript strings, for example. JavaScript defines	quite a few methods that can operate on strings. If	<tt CLASS=literal>s</tt> is a string, then each of the following	lines is legal JavaScript:	<DIV CLASS=programlisting><P><PRE>len = s.length;document.write(s.bold());t = s.substring(2,4);a = s.split(",");</PRE></DIV>	A string isn't an object, so why can we treat it like one?  Are	strings simply a special case supported by JavaScript?  Are they	a special data type that is half object, half primitive type?	No. When a JavaScript string is used in an object context, as	the strings in the above example are, they are converted to a	String object that represents the same underlying value as the	original string did. (Note the capitalization convention: the	primitive type is a string, the corresponding object is a	String.)  The String object defines a <tt CLASS=literal>length</tt>	property and quite a few methods that perform various operations	on the string.      <P CLASS=para>	Strings are the primary example of why and when this sort of	automatic conversion to an object data type is necessary. But	it is occasionally used with other data types as well. For	example, JavaScript will convert a function value to a	Function object so that you can access the	<tt CLASS=literal>arguments</tt> property, which is an array of	arguments passed to the function. Also, a numeric value can be	converted to a Number object, which allows you to invoke the	<tt CLASS=literal>toString()</tt> method of that object, a method	that takes an optional argument to specify what base the	number should be converted to.      <P CLASS=para>	The rules for automatic conversions to objects are particularly	straightforward: 	<P><UL CLASS=itemizedlist><li CLASS=listitem>	      Strings are converted to String objects.	    <P><li CLASS=listitem>	      Numbers are converted to Number objects.	    <P><li CLASS=listitem>	      Boolean values are converted to Boolean objects.	    <P><li CLASS=listitem>	      Functions are converted to Function objects.	    <P><li CLASS=listitem>	      <tt CLASS=literal>null</tt> and the undefined value cannot be	      converted to objects, and cause an error message to be	      displayed if used in an object context.	    <P></UL>      <P CLASS=para>	The conversion of values to objects is handled quite	transparently by JavaScript, and it is often not obvious to a	casual programmer that the conversion is happening at all. This	is for two reasons. First, the converted objects are transient:	suppose a string, for example, is converted to a String object,	and a method is invoked on that String object. The String	object is never saved into a variable, and so it is used once	and then is no longer available to the program (it is "garbage	collected" so memory is not wasted). This makes it	difficult to even obtain an instance of a String object. To do	so, we must explicitly convert our string to String object. We	can do this in either of two ways:	<DIV CLASS=programlisting><P><PRE>s = new String("hello");s = new Object("hello");</PRE></DIV>	Similarly, we can create Number, Boolean, and Function objects	by invoking the <tt CLASS=literal>Number()</tt>,	<tt CLASS=literal>Boolean()</tt>, or <tt CLASS=literal>Function()</tt>	constructors with our number, Boolean, or function value, or,	more generally, by invoking the <tt CLASS=literal>Object()</tt>	constructor with the value to be converted.      <P CLASS=para>	The second reason why conversion to objects is often transparent	to programmers is that each of the String, Number, Boolean, and	Function objects have <tt CLASS=literal>toString()</tt> methods that	are invoked when they are used in a string context, and have	<tt CLASS=literal>valueOf()</tt> methods that are invoked when they	are used in numeric, Boolean, or function contexts. Because the	data conversion is so completely automatic, it can be difficult	to even distinguish between a value and its corresponding	object. The <tt CLASS=literal>typeof</tt> operator provides one way	to distinguish primitive values from objects. When invoked on a	primitive value, <tt CLASS=literal>typeof</tt> will return one of	the strings "string", "number", "boolean", and "function". When	invoked on the corresponding object, however, it will return	"object":		<DIV CLASS=programlisting><P><PRE>typeof "hello"               //<tt CLASS=replaceable><i> returns "string"</i></tt>typeof new String("hello")   //<tt CLASS=replaceable><i> returns "object"</i></tt></PRE></DIV>      </DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch09-SECT2-AUTOID.5">Conversions to Functions</A></h3><P CLASS=para>	The only time that JavaScript can convert a value to a function	is when a Function object is used in a function context (which	occurs when you use the <tt CLASS=literal>()</tt> operator to invoke	a value.)  In this case, the Function object is trivially	converted to the primitive function value it represents.	Using any value other than a function or a Function object in a	function context will cause JavaScript to display an error message.      </DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch09-SECT2-AUTOID.6">Data Conversion Summary</A></h3><P CLASS=para>	While many of the automatic data conversions explained in the	subsections above are intuitive, there are so many of them that	it can be difficult to keep them all straight. <A HREF="ch09_01.htm#JSCRIPT-CH-FURTHER-TAB-CONVERSION">Table 9.1</A> summarizes each of the	possible conversions.      <P><DIV CLASS=table><TABLE><CAPTION><A CLASS="TITLE" NAME="JSCRIPT-CH-FURTHER-TAB-CONVERSION">Table 9-1: Automatic Data Type Conversions</A></CAPTION><TR CLASS=row><TH ALIGN="left">&nbsp;</TH><TH COLSPAN=5 ALIGN="center"><I CLASS=emphasis>Used As:</I></TH></TR><TR CLASS=row><TH ALIGN="left"><I CLASS=emphasis>Value:</I></TH><TH ALIGN="LEFT">String</TH><TH ALIGN="left">Number</TH><TH ALIGN="left">Boolean</TH><TH ALIGN="left">Object</TH><TH ALIGN="LEFT">Function</TH></TR><TR CLASS=row><TD ALIGN="left"><P CLASS=para><b>non-empty string                </b></TD><TD ALIGN="LEFT">-</TD><TD ALIGN="left"><P CLASS=para>	          Numeric value of string, or error                </TD><TD ALIGN="left"> <tt CLASS=literal>true</tt>  </TD><TD ALIGN="left"><P CLASS=para>String object</TD><TD ALIGN="LEFT"><I CLASS=emphasis>error</I></TD></TR><TR CLASS=row><TD ALIGN="left"><P CLASS=para><b>empty string                  </b></TD><TD ALIGN="LEFT">-</TD><TD ALIGN="left"> <tt CLASS=literal>0</tt>  </TD><TD ALIGN="left"> <tt CLASS=literal>false</tt>  </TD><TD ALIGN="left"><P CLASS=para>String object</TD><TD ALIGN="LEFT"><I CLASS=emphasis>error</I></TD></TR><TR CLASS=row><TD ALIGN="left"><b>0</b></TD><TD ALIGN="LEFT"> <tt CLASS=literal>"0"</tt>  </TD><TD ALIGN="left">-</TD><TD ALIGN="left">  <tt CLASS=literal>false</tt> </TD><TD ALIGN="left"><P CLASS=para>Number object</TD><TD ALIGN="LEFT"><I CLASS=emphasis>error</I></TD></TR><TR CLASS=row><TD ALIGN="left"><b>NaN</b></TD><TD ALIGN="LEFT"> <tt CLASS=literal>"NaN"</tt>  </TD><TD ALIGN="left">-</TD><TD ALIGN="left"> <tt CLASS=literal>true</tt> </TD><TD ALIGN="left"><P CLASS=para>Number object</TD><TD ALIGN="LEFT"><I CLASS=emphasis>error</I></TD></TR><TR CLASS=row><TD ALIGN="left"><b>Infinity</b></TD><TD ALIGN="LEFT"> <tt CLASS=literal>"Infinity"</tt>  </TD><TD ALIGN="left">-</TD><TD ALIGN="left"> <tt CLASS=literal>true</tt>  </TD><TD ALIGN="left"><P CLASS=para>Number object</TD><TD ALIGN="LEFT"><I CLASS=emphasis>error</I></TD></TR><TR CLASS=row><TD ALIGN="left"><P CLASS=para><b>Negative Infinity                     </b></TD><TD ALIGN="LEFT"> <tt CLASS=literal>"-Infinity"</tt>  </TD><TD ALIGN="left">-</TD><TD ALIGN="left"> <tt CLASS=literal>true</tt>  </TD><TD ALIGN="left"><P CLASS=para>Number object</TD><TD ALIGN="LEFT"><I CLASS=emphasis>error</I></TD></TR><TR CLASS=row><TD ALIGN="left"><P CLASS=para><b>any other number                     </b></TD><TD ALIGN="LEFT"><P CLASS=para>string value of number</TD><TD ALIGN="left">-</TD><TD ALIGN="left"> <tt CLASS=literal>true</tt> </TD><TD ALIGN="left"><P CLASS=para>Number object</TD><TD ALIGN="LEFT"><I CLASS=emphasis>error</I></TD></TR><TR CLASS=row><TD ALIGN="left"><b>true</b></TD><TD ALIGN="LEFT"> <tt CLASS=literal>"true"</tt>  </TD><TD ALIGN="left"> <tt CLASS=literal>1</tt>  </TD><TD ALIGN="left">-</TD><TD ALIGN="left"><P CLASS=para>Boolean object</TD><TD ALIGN="LEFT"><I CLASS=emphasis>error</I></TD></TR><TR CLASS=row><TD ALIGN="left"><b>false</b></TD><TD ALIGN="LEFT"> <tt CLASS=literal>"false"</tt>  </TD><TD ALIGN="left"> <tt CLASS=literal>0</tt>  </TD><TD ALIGN="left">-</TD><TD ALIGN="left"><P CLASS=para>Boolean object</TD><TD ALIGN="LEFT"><I CLASS=emphasis>error</I></TD></TR><TR CLASS=row><TD ALIGN="left"><P CLASS=para><b>object or array</b>		</TD><TD ALIGN="LEFT"><P CLASS=para>	         <tt CLASS=literal>toString()</tt> result, or object type              </TD><TD ALIGN="left"><P CLASS=para>	         <tt CLASS=literal>valueOf()</tt> result, or <I CLASS=emphasis>error</I></TD><TD ALIGN="left"><P CLASS=para>	         <tt CLASS=literal>valueOf()</tt> result, or   	         <tt CLASS=literal>true</tt></TD><TD ALIGN="left">-</TD><TD ALIGN="LEFT"><P CLASS=para><I CLASS=emphasis>error</I> (unless Function		obj)</TD></TR><TR CLASS=row><TD ALIGN="left"><b>null</b></TD><TD ALIGN="LEFT"> <tt CLASS=literal>"null"</tt>  </TD><TD ALIGN="left"> <tt CLASS=literal>0</tt>  </TD><TD ALIGN="left"> <tt CLASS=literal>false</tt>  </TD><TD ALIGN="left">-</TD><TD ALIGN="LEFT"><I CLASS=emphasis>error</I></TD></TR><TR CLASS=row><TD ALIGN="left"><P CLASS=para><b>undefined value</b>		</TD><TD ALIGN="LEFT"> <tt CLASS=literal>"undefined"</tt>  </TD><TD ALIGN="left"><I CLASS=emphasis>error</I></TD><TD ALIGN="left"> <tt CLASS=literal>false</tt>  </TD><TD ALIGN="left"><I CLASS=emphasis>error</I></TD><TD ALIGN="LEFT"><I CLASS=emphasis>error</I></TD></TR><TR CLASS=row><TD ALIGN="left"><b>function</b></TD><TD ALIGN="LEFT"><P CLASS=para>	         Complete function text	        </TD><TD ALIGN="left"><I CLASS=emphasis>error</I></TD><TD ALIGN="left"> <tt CLASS=literal>true</tt>  </TD><TD ALIGN="left"><P CLASS=para>Function object</TD><TD ALIGN="LEFT">-</TD></TR></TABLE><P></DIV></DIV></DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch08_09.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="ch09_02.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>Array Summary</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>Explicit Data Type Conversions</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>