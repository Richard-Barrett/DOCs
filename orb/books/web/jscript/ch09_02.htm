<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 9] 9.2 Explicit Data Type Conversions</TITLE><META NAME="author" CONTENT="David Flanagan"><META NAME="date" CONTENT="Wed Apr 23 18:11:45 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="JavaScript"><META NAME="title" CONTENT="JavaScript: The Definitive Guide"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif" ALT="Javascript: The Definitive Guide"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch09_01.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 9</b></td><td width=172 align=right valign=top><A HREF="ch09_03.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="ch09-SECT1-AUTOID.2">9.2 Explicit Data Type Conversions</A></h2><P CLASS=para><A NAME="CH09.CONV9"></A><A NAME="CH09.CONV10"></A>      The section above described all of the automatic data type      conversions performed by JavaScript. Sometimes, however, you      will want to explicitly convert a value from one type to      another. For example, instead of repeatedly using a number in a      string context, and relying on JavaScript to convert it to a      string, you might prefer (for efficiency) to convert the number      to a string a single time and then repeatedly use the converted      value.  Or, you might simply prefer to make your data type      conversions explicit so that your code is easier to understand.    <P CLASS=para>      JavaScript does not have a cast operator, a mechanism often used      in C, C++, and Java to convert values from one type to another.      To force a conversion in JavaScript, you must generally invoke a      function or method. The sections below show how you can do this.    <DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch09-SECT2-AUTOID.7">Conversions to and from Objects</A></h3><P CLASS=para><A NAME="CH09.CONV11"></A>	We saw in the section on automatic conversions that all objects	have a <tt CLASS=literal>toString()</tt> method that provides at	least a default string conversion for each object type.	Similarly, many objects define a <tt CLASS=literal>valueOf()</tt>	method that returns the primitive type equivalent of the	object. Although these methods are invoked automatically under	certain appropriate circumstances, there is nothing to prevent	you from using them explicitly to convert objects. For example,	you might use lines of code like the following to perform	explicit conversions of Date objects:	<DIV CLASS=programlisting><P><PRE>message = "Today is: " + today.toString();elapsed_time = end_time.valueOf() - start_time.valueOf();</PRE></DIV>      <P CLASS=para>	Also remember that primitive types are automatically converted	to objects when used in an object context, so you can invoke the	<tt CLASS=literal>toString()</tt> method on a primitive type to	explicitly convert it to a string. For example:	<DIV CLASS=programlisting><P><PRE>//<tt CLASS=replaceable><i> define one of our functions in a new document in a new window</i></tt>newwin.document.write('&lt;script&gt;' + myfunc.toString() + '&lt;/' + 'script&gt;');</PRE></DIV>	Note that because of syntactic constraints in JavaScript, you	can't directly invoke the <tt CLASS=literal>toString()</tt> method	on a numeric literal (although you can on string and Boolean	literals). You must enclose the number in parentheses, or must	first assign it to a variable:	<DIV CLASS=programlisting><P><PRE>321.toString();          //<tt CLASS=replaceable><i> this is a syntax error</i></tt>(123).toString();        //<tt CLASS=replaceable><i> this is okay</i></tt>a = 45; a.toString();    //<tt CLASS=replaceable><i> also okay</i></tt>true.toString();         //<tt CLASS=replaceable><i> this works fine</i></tt></PRE></DIV>      <P CLASS=para>	Although you may less frequently need to do it, you can also	explicitly convert primitive values to their corresponding	String, Number, Boolean, and Function object values. You can	use the constructor methods for each of these object types, or	you can simply use the <tt CLASS=literal>Object()</tt> constructor	instead:	<DIV CLASS=programlisting><P><PRE>func_obj = new Object(my_func);    //<tt CLASS=replaceable><i> these two lines are equivalent</i></tt>func_obj = new Function(my_func);</PRE></DIV>      </DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch09-SECT2-AUTOID.8">Converting Numbers to Strings</A></h3><P CLASS=para>	The number-to-string conversion is probably the one most often	performed in JavaScript. Although it usually happens	automatically, there are a couple of useful ways to perform this	conversion explicitly. Perhaps the simplest is to add the empty	string to a number. This forces the number to be converted	(because it is used in a string context) and concatenated with	nothing:	<DIV CLASS=programlisting><P><PRE>string_value = number + "";</PRE></DIV>      <P CLASS=para>	Another technique for converting numbers to strings is with the	<tt CLASS=literal>toString()</tt> method, as we saw above:	<DIV CLASS=programlisting><P><PRE>string_value = number.toString();</PRE></DIV>	The <tt CLASS=literal>toString()</tt> method of the Number object	(numbers are converted to Number objects so that this method can	be called) takes an optional argument that specifies a radix, or	base, for the conversion. If you do not specify the argument,	the conversion will be done in base 10. But you can also	convert numbers in other bases (between 2 and 16) as well. For	example:	<DIV CLASS=programlisting><P><PRE>binary_string = n.toString(2);octal_string = "0" + n.toString(8);hex_string = "0x" + n.toString(16);</PRE></DIV>      <P CLASS=para>	A shortcoming of JavaScript is that there is no built-in way to	convert a number to a string and specify the number of decimal	places to be included. This can make it a little difficult to	display numbers that represent monetary values, and which have a	traditional format. In fact, JavaScript lacks any kind of	numeric formatting function, so it is not possible to specify	whether exponential notation should be used or not, nor whether	leading zeros should be displayed, and so on.       </DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch09-SECT2-AUTOID.9">Converting Strings to Numbers</A></h3><P CLASS=para>	We've seen that strings that represent numbers are automatically	converted to actual numbers when used in a numeric context. We	can make this conversion explicit by choosing the numeric	context we use. Just as we can convert a number to a string by	adding the empty string to it, we can convert a string to a	number by subtracting zero from it:	<DIV CLASS=programlisting><P><PRE>numeric_value = string_value - 0;</PRE></DIV>	We can't add zero, of course, because in that case the	<tt CLASS=literal>+</tt> operator would be interpreted as the string	concatenation operator.      <P CLASS=para>	The trouble with this sort of string-to-number conversion is	that it is overly strict. It works only with base-10 numbers,	and only when the string contains nothing but leading spaces and	numbers, with no trailing characters, not even trailing spaces.	To allow more flexible conversions, you can use the	<tt CLASS=literal>parseInt()</tt> and	<tt CLASS=literal>parseFloat()</tt> functions. These convert and	return any number at the beginning of a string, ignoring any	trailing non-numbers. <tt CLASS=literal>parseInt()</tt> only parses	integers, and <tt CLASS=literal>parseFloat()</tt> parses both	integers and floating-point numbers. If a number begins with	<tt CLASS=literal>0</tt>, <tt CLASS=literal>parseInt()</tt> interprets	it as an octal number. If it begins with <tt CLASS=literal>0x</tt>	or <tt CLASS=literal>0X</tt>, <tt CLASS=literal>parseInt()</tt>	interprets it as a hexadecimal number.	<DIV CLASS=programlisting><P><PRE>parseInt("3 blind mice");      //<tt CLASS=replaceable><i> returns 3</i></tt>parseFloat("3.14 meters");     //<tt CLASS=replaceable><i> returns 3.14</i></tt>parseInt("12.34");             //<tt CLASS=replaceable><i> returns 12</i></tt>parseInt("077");               //<tt CLASS=replaceable><i> returns 63 (7*8 + 7)</i></tt>parseInt("0xFF");              //<tt CLASS=replaceable><i> returns 255</i></tt></PRE></DIV>	<tt CLASS=literal>parseInt()</tt> can even take a second argument,	which specifies the radix (base) of the number to be parsed.	Legal values are between 2 and 36. For example:	<DIV CLASS=programlisting><P><PRE>parseInt("11", 2);             //<tt CLASS=replaceable><i> returns 3 (1*2 + 1)</i></tt>parseInt("ff", 16);            //<tt CLASS=replaceable><i> returns 255 (15*16 + 15)</i></tt>parseInt("zz", 36);            //<tt CLASS=replaceable><i> returns 1295 (35*36 + 35)</i></tt></PRE></DIV>	If <tt CLASS=literal>parseInt()</tt> or	<tt CLASS=literal>parseFloat()</tt> cannot convert the specified	string to a number, they return <tt CLASS=literal>NaN</tt> in	Navigator 3.0 (and on Unix platforms in Navigator 2.0). On	Navigator 2.0 non-Unix platforms and in Internet Explorer 3.0,	these functions return 0 in this case, which makes it	impossible to distinguish between the legal string "0" and an	a string that does not represent a number. A future version of	IE will correctly support the <tt CLASS=literal>NaN</tt> return	value.	<DIV CLASS=programlisting><P><PRE>parseInt("eleven");            //<tt CLASS=replaceable><i> returns NaN (or 0)</i></tt>parseFloat("$72.47");          //<tt CLASS=replaceable><i> returns NaN (or 0)</i></tt></PRE></DIV>      <P CLASS=para>	Finally, you can also convert strings to numbers (and to other	types) with the <tt CLASS=literal>eval()</tt> method. This method	interprets an arbitrary JavaScript expression and returns the	result (which may be of any JavaScript type). For example:	<DIV CLASS=programlisting><P><PRE>eval("3.14");                  //<tt CLASS=replaceable><i> returns 3.14</i></tt>eval("2 * 3.14 * radius");     //<tt CLASS=replaceable><i> returns the result of the multiplication</i></tt>eval("radius &gt; 3");            //<tt CLASS=replaceable><i> returns true or false</i></tt></PRE></DIV>	Note that you rarely actually need to use	<tt CLASS=literal>eval()</tt>--generally, your JavaScript	expressions occur in JavaScript code itself, not in strings	that are later evaluated!      </DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch09-SECT2-AUTOID.10">Miscellaneous Conversions</A></h3><P CLASS=para>	JavaScript does not contain any built-in conversion functions	other than those described above. You can write your own	JavaScript code to perform certain conversions for you,	however. To explicitly convert between Boolean values and	numeric values, for example, you could use expressions like the	following: 	<DIV CLASS=programlisting><P><PRE>b?1:0              //<tt CLASS=replaceable><i> converts a Boolean, b, to a number</i></tt>(x==0)?false:true  //<tt CLASS=replaceable><i> converts a number, x, to a Boolean</i></tt></PRE></DIV>      <P CLASS=para>	You may write your own code for custom data conversions. For	example, to convert a Boolean value to either the string "yes"	or "no", you might use:	<DIV CLASS=programlisting><P><PRE>(reply)?"yes":"no"</PRE></DIV>	To convert an arbitrary value to a string, you might write a	function like the following, which follows some custom rules:	<DIV CLASS=programlisting><P><PRE>function convert_to_string(x){    if (x == null) return "";    if (typeof x == "boolean") return x?"on":"off";    if (typeof x == "function") return "[function]";    return x.toString();}</PRE></DIV>      </DIV></DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch09_01.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="ch09_03.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>Automatic Data Type Conversion</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>By Value vs. By Reference</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>