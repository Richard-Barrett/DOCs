<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 10] Client-Side Program Structure</TITLE><META NAME="author" CONTENT="David Flanagan"><META NAME="date" CONTENT="Thu Apr 24 13:33:57 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="JavaScript"><META NAME="title" CONTENT="JavaScript: The Definitive Guide"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF" TEXT="#000000"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif" ALT="Javascript: The Definitive Guide"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch09_03.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 10</b></td><td width=172 align=right valign=top><A HREF="ch10_02.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><H1 CLASS=chapter><A CLASS="TITLE" NAME="JSCRIPT-CH-CLIENT">10. Client-Side Program Structure</A></H1><DIV CLASS=htmltoc><p><b>Contents:</b><br>The &lt;SCRIPT&gt; Tag<br><A HREF="ch10_02.htm">Including JavaScript Files</A><BR><A HREF="ch10_03.htm">JavaScript and Events</A><BR><A HREF="ch10_04.htm">JavaScript in URLs</A><BR><A HREF="ch10_05.htm">JavaScript Entities</A><BR><A HREF="ch10_06.htm">Execution of JavaScript Programs</A><BR><A HREF="ch10_07.htm">JavaScript and Threads</A><BR></DIV><P CLASS=para>    The first part of this book described the core JavaScript language,    used in both client- and server-side scripts. Many of the examples    we've seen, while legal JavaScript code, had no particular    context--they were JavaScript fragments, rather than legal    client-side scripts or legal server-side scripts. This chapter    provides that context: it explains how JavaScript code can be    integrated into HTML files so that it is run by the client web    browser. <A NAME="CH09.CSJ"></A>  <P CLASS=para>    There are five techniques for including JavaScript code in HTML:      <P><DL CLASS=variablelist><DT CLASS=varlistentry><I CLASS=emphasis>Embedding a JavaScript script between <tt CLASS=replaceable><i>&lt;SCRIPT&gt;</i></tt> and <tt CLASS=replaceable><i>&lt;/SCRIPT&gt;</i></tt> tags.</I><DD><P CLASS=para>          This is the most common method.        <p><DT CLASS=varlistentry><I CLASS=emphasis>Using the <tt CLASS=replaceable><i>&lt;SCRIPT&gt;</i></tt> tag to refer to a file of JavaScript code.</I><DD><P CLASS=para>          This          is done by specifying a URL as the value of the          <tt CLASS=literal>SRC</tt> attribute, instead of including the          JavaScript statements literally between the          <tt CLASS=literal>&lt;SCRIPT&gt;</tt> and          <tt CLASS=literal>&lt;/SCRIPT&gt;</tt> tags. (This is much like          including an image on a web page with the <tt CLASS=literal>&lt;IMG          SRC=&gt;</tt> tag.) This technique for including          external files of JavaScript code into a web page is not          available in Navigator 2.0.        <p><DT CLASS=varlistentry><I CLASS=emphasis>Defining event handlers.</I><DD><P CLASS=para>          These          are function definitions that are invoked by the browser when          certain events occur. These event handler functions are          defined by specifying JavaScript statements as the value of          appropriate attributes within HTML tags. For example, in the          <tt CLASS=literal>&lt;BODY&gt;</tt> HTML tag, you can specify          arbitrary JavaScript code as the value of the          <tt CLASS=literal>onLoad</tt> attribute. This code will be          executed when the web page is fully loaded.        <p><DT CLASS=varlistentry><I CLASS=emphasis>Using the special <tt CLASS=replaceable><i>javascript:</i></tt> URL pseudo-protocol.</I><DD><P CLASS=para>          You can type these URLs directly          into your browser (this doesn't work in Internet Explorer          3.0), or use them as the target of hypertext links in your          web documents. When such a link is invoked, the JavaScript          code following the <tt CLASS=literal>javascript:</tt> protocol          identifier will be executed, and the resulting value will be          used as the text of the new document.        <p><DT CLASS=varlistentry><I CLASS=emphasis>Embedding code with the JavaScript HTML entity.</I><DD><P CLASS=para>          This is available in Navigator 3.0          only. Recall that an HTML entity is a code usually          representing a special character--either one reserved by          HTML or one that does not appear on most keyboards. For          example, <tt CLASS=literal>&amp;lt;</tt> is an HTML entity that          represents the <tt CLASS=literal>&lt;</tt> character.  All HTML          entities begin with an ampersand and end with a semicolon.          The JavaScript entity may contain arbitrary JavaScript          statements in curly braces between this ampersand and          semicolon. The value of the JavaScript statements becomes          the value of the entity. This special JavaScript entity may          not be used arbitrarily in HTML; it may only appear within          the attribute value of an HTML tag.        </DL>  <P CLASS=para>    The following sections document each of these five JavaScript    embedding techniques in more detail. Together, they explain all the    ways that JavaScript can be included in web pages--that is,    they explain the allowed structure of JavaScript programs on the    client side.  <DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="ch10-SECT1-AUTOID.1">10.1 The &lt;SCRIPT&gt; Tag</A></h2><P CLASS=para><A NAME="CH09.SCRIPT1"></A><A NAME="CH09.SCRIPT2"></A>      Client-side JavaScript scripts are part of an HTML file, and are      usually coded within the <tt CLASS=literal>&lt;SCRIPT&gt;</tt> and      <tt CLASS=literal>&lt;/SCRIPT&gt;</tt> tags. Between these tags you      may place any number of JavaScript statements, which will be      executed in the order they appear as part of the document loading      process. (Definitions of JavaScript functions are stored, but they      are not executed until they are called.)      <tt CLASS=literal>&lt;SCRIPT&gt;</tt> tags may appear in either the      <tt CLASS=literal>&lt;HEAD&gt;</tt> or <tt CLASS=literal>&lt;BODY&gt;</tt>      of an HTML document.    <P CLASS=para>      A single HTML document may contain more than one pair of      (non-overlapping) <tt CLASS=literal>&lt;SCRIPT&gt;</tt> and      <tt CLASS=literal>&lt;/SCRIPT&gt;</tt> tags. These multiple separate      scripts will have their statements executed in the order they      appear within the document. While separate scripts within a single      file are executed at different times during the loading and      parsing of the HTML file, they constitute part of the same      JavaScript program--functions and variables defined in one      script will be available to all scripts that follow in the same      file. For example, if you have the following script somewhere in      an HTML page:      <DIV CLASS=programlisting><P><PRE>&lt;SCRIPT&gt;var x = 1;&lt;/SCRIPT&gt;</PRE></DIV>      later on in the same HTML page, you can refer to      <tt CLASS=literal>x</tt>, even though it's in a different script      block.      <P CLASS=para>      The context that matters is the HTML page, not the script      block:      <DIV CLASS=programlisting><P><PRE>&lt;SCRIPT&gt;document.write(x);&lt;/SCRIPT&gt;</PRE></DIV>      <A HREF="ch10_01.htm#JSCRIPT-CH-CLIENT-EX-1">Example 10-1</A>      shows a sample HTML file that includes a simple JavaScript      program. Note the difference between this example and many of the      code fragments shown earlier in the book--this one is      integrated with an HTML file and has a clear context in which it      runs. Note the use of a <tt CLASS=literal>LANGUAGE</tt> attribute in      the <tt CLASS=literal>&lt;SCRIPT&gt;</tt> tag--it will be explained in      the following subsection.    <DIV CLASS=example><h4 CLASS=example><A CLASS="TITLE" NAME="JSCRIPT-CH-CLIENT-EX-1">Example 10-1: A Simple JavaScript Program in an HTML File</A></h4><DIV CLASS=programlisting><P><PRE>&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;Today's Date&lt;/TITLE&gt;    &lt;SCRIPT LANGUAGE="JavaScript"&gt;    //<tt CLASS=replaceable><i> Define a function for use later on.</i></tt>    function print_todays_date()    {        var d = new Date();  //<tt CLASS=replaceable><i> today's date and time.</i></tt>        document.write(d.toLocaleString());    }    &lt;/SCRIPT&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;HR&gt;The date and time are:&lt;BR&gt;&lt;B&gt;    &lt;SCRIPT LANGUAGE="JavaScript"&gt;    //<tt CLASS=replaceable><i> Now call the function we defined above.</i></tt>    print_todays_date();    &lt;/SCRIPT&gt;&lt;/B&gt;&lt;HR&gt;&lt;/BODY&gt;&lt;/HTML&gt;</PRE></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch10-SECT2-AUTOID.1">The LANGUAGE Attribute</A></h3><P CLASS=para>		The <tt CLASS=literal>&lt;SCRIPT&gt;</tt> tag has an optional	<tt CLASS=literal>LANGUAGE</tt> attribute that specifies the scripting	language used for the script. This attribute is necessary	because there is more than one version of JavaScript, and	because there is more than one scripting language that can be	embedded between <tt CLASS=literal>&lt;SCRIPT&gt;</tt> and	<tt CLASS=literal>&lt;/SCRIPT&gt;</tt> tags. By specifying what	language a script is written in, you tell a browser whether it	should attempt to interpret the script, or whether it is written	in a language that the browser doesn't understand, and therefore	should be ignored.      <P CLASS=para>	If you are writing JavaScript code, you use the	<tt CLASS=literal>LANGUAGE</tt> attribute as follows:	<DIV CLASS=programlisting><P><PRE>&lt;SCRIPT LANGUAGE="JavaScript"&gt;    //<tt CLASS=replaceable><i> JavaScript code goes here</i></tt>&lt;/SCRIPT&gt;</PRE></DIV>	On the other hand, if you were writing a script in Microsoft's	"VBScript" scripting language[1]	you would use the attribute like this:	<DIV CLASS=programlisting><P><PRE>&lt;SCRIPT LANGUAGE="VBScript"&gt;    ' VBScript code goes here (' is a comment character like //<tt CLASS=replaceable><i> in JavaScript)</i></tt>&lt;/SCRIPT&gt;</PRE></DIV>      <blockquote class=footnote><P CLASS=para>[1] 	    The language is actually called "Visual Basic Scripting	    Edition." Obviously, it is a version of Microsoft's Visual	    Basic language. The only browser that supports it is	    Internet Explorer 3.0. VBScript interfaces with HTML	    objects in the same way that JavaScript does, but the core	    language itself has a different syntax than JavaScript.	  </blockquote><P CLASS=para>	When you specify the <tt CLASS=literal>LANGUAGE="JavaScript"</tt>	attribute for a script, both Navigator 2.0 and Navigator 3.0	will run the script. There have been quite a few new features	added to JavaScript between Navigator 2.0 and 3.0, however, and	you may often find yourself writing scripts that simply won't	work in Navigator 2.0. In this case, you should specify that	the script should only be run by Navigator 3.0 (and browsers that	support a compatible version of JavaScript) like this:	<DIV CLASS=programlisting><P><PRE>&lt;SCRIPT LANGUAGE="JavaScript1.1"&gt;    //<tt CLASS=replaceable><i> JavaScript code goes here for Navigator 3.0</i></tt>    //<tt CLASS=replaceable><i> All this code will be ignored by Navigator 2.0</i></tt>&lt;/SCRIPT&gt;</PRE></DIV>	When you set the <tt CLASS=literal>LANGUAGE</tt> attribute to	"JavaScript1.1", you inform Navigator 2.0 and Internet Explorer	3.0 that you are using a version of the language that they do not	understand. By doing this, you tell these browsers to ignore	the <tt CLASS=literal>&lt;SCRIPT&gt;</tt> tags and all the code	between them.      <P CLASS=para>	JavaScript is, and is likely to remain, the	<I CLASS=emphasis>default</I> scripting language for the Web. If	you omit the <tt CLASS=literal>LANGUAGE</tt> attribute, both	Navigator and Internet Explorer default to the value	"JavaScript". Nonetheless, because there are now multiple	scripting languages available it is a good habit to always use	the <tt CLASS=literal>LANGUAGE</tt> attribute to specify exactly	what language (or what version) your scripts	are written in.      </DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch10-SECT2-AUTOID.2">The &lt;/SCRIPT&gt; Tag</A></h3><P CLASS=para>	You may at some point find yourself writing a script that writes	a script into some other browser window or frame.[2]	If you do this, you'll need to write out a	<tt CLASS=literal>&lt;/SCRIPT&gt;</tt> tag to terminate the script	you are writing. You must be careful, though--the HTML	parser doesn't know about quoted strings, so if you write out a	string that contains the characters "&lt;/SCRIPT&gt;" in it, the	HTML parser will terminate the currently running script.      <blockquote class=footnote><P CLASS=para>[2] 	    This happens more commonly than you might think; one	    commonly used feature of JavaScript is the ability to	    dynamically generate HTML and JavaScript content for display	    in other browser windows and frames.	  </blockquote><P CLASS=para>	To avoid this problem simply break this tag up into pieces, and	write it out using an expression like 	<tt CLASS=literal>"&lt;/" + "SCRIPT&gt;"</tt>:	<DIV CLASS=programlisting><P><PRE>&lt;SCRIPT&gt;f1.document.write("&lt;SCRIPT&gt;");f1.document.write("document.write('&lt;H2&gt;This is the quoted script&lt;/H2&gt;')");f1.document.write("&lt;/" + "SCRIPT&gt;");&lt;/SCRIPT&gt;</PRE></DIV>	Alternatively, you can escape the / in	<tt CLASS=literal>&lt;/SCRIPT&gt;</tt> with a backslash:	<DIV CLASS=programlisting><P><PRE>f1.document.write("&lt;\/SCRIPT&gt;");</PRE></DIV>      </DIV></DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch09_03.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="ch10_02.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>By Value vs. By Reference</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>Including JavaScript Files</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>