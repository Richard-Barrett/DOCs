<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 10] 10.3 JavaScript and Events</TITLE><META NAME="author" CONTENT="David Flanagan"><META NAME="date" CONTENT="Thu Apr 24 13:34:03 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="JavaScript"><META NAME="title" CONTENT="JavaScript: The Definitive Guide"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif" ALT="Javascript: The Definitive Guide"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch10_02.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 10</b></td><td width=172 align=right valign=top><A HREF="ch10_04.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="ch10-SECT1-AUTOID.3">10.3 JavaScript and Events</A></h2><P CLASS=para><A NAME="CH09.EVENT1"></A><A NAME="CH09.EVENT2"></A>      We've seen how JavaScript "scripts" can be embedded into HTML      files. The following subsections explain how JavaScript      event-handler functions are embedded in HTML files to allow web      pages to interact with the user.    <DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch10-SECT2-AUTOID.3">The Event-Driven Programming Model</A></h3><P CLASS=para>	In the old days, computer programs often ran in "batch"	mode. This meant that they read a batch of data in, did some	computation on that data, and then wrote out the results. Later,	with timesharing and text-based terminals, limited kinds of	interactivity became possible--the program could ask the	user for input, and the user could type in data; the computer	could process the data and display the results on-screen.      <P CLASS=para>	Nowadays, however, with graphical displays and pointing devices	like mouses, the situation is different--programs are	generally "event driven," responding to mouse button clicks and	keystrokes in a way that depends on the position of the mouse	pointer. A web browser is just such a graphical environment, and	so client-side JavaScript uses the event-driven programming	model.      <P CLASS=para>	In order to implement an event-driven program, you must write	event-handler functions that take the appropriate actions in	response to the user's input. You must also register these event	handlers with the system in some way (perhaps just by giving	them standard names) so that the system can invoke them at the	appropriate times.      </DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch10-SECT2-AUTOID.4">Event Handlers in JavaScript</A></h3><P CLASS=para>	Events do not just occur of their own accord. Generally, they	are generated when the user interacts with something in the user	interface. When the user interface is an HTML file, as is the	case for client-side JavaScript programs, then that "something"	will be a HTML object, such as a hypertext link, a button, a	drop-down menu or an input field. Since events occur "on"	particular objects, it follows that they must be handled "for"	those particular objects. Therefore, the logical way to define	an event handler is as part of the HTML object to which it	responds.       <P CLASS=para>	In order to allow us to define JavaScript event handlers as part	of HTML object definitions, JavaScript extends HTML by adding	new attributes to various HTML tags that define objects. For	example, to define an event handler that is invoked when the	user clicks on a checkbox in a form, for example, you specify	the handler code as an attribute of the HTML tag that defines	the checkbox in the form:      <DIV CLASS=programlisting><P><PRE>&lt;INPUT     TYPE="checkbox"     NAME="opts"     VALUE="ignore-case"    onClick="ignore_case = this.checked;"&gt;</PRE></DIV><P CLASS=para>	What's of interest to us here is the <tt CLASS=literal>onClick</tt>	attribute.[3]	The string value of the <tt CLASS=literal>onClick</tt> attribute may	contain one or more JavaScript statements. If there is more than	one statement, they must be separated from each other with	semicolons.[4]	When the specified event--in this case, a	click--occurs on the checkbox the JavaScript code within	the string will be executed.      <blockquote class=footnote><P CLASS=para>[3] 	    The mixed-case capitalization of <tt CLASS=literal>onClick</tt>	    is a common convention for JavaScript event handlers defined	    in HTML files. HTML element and attribute names are	    case-insensitive, but writing "onClick" rather than	    "ONCLICK" sets off the handlers from standard HTML tags that	    are, by convention, shown in all capitals.	  <P CLASS=para>[4] 	    The statements may not be separated by newlines: while an	    HTML attribute value normally may contain newlines, this	    doesn't work with JavaScript.	  </blockquote><P CLASS=para>	While you can include any number of JavaScript statements within	an event-handler definition, a common technique, when more than	one or two simple statements are required, is to define the body	of an event handler as a function between	<tt CLASS=literal>&lt;SCRIPT&gt;</tt> and	<tt CLASS=literal>&lt;/SCRIPT&gt;</tt> tags, and then to simply	invoke this function from the event handler. This keeps most of	your actual JavaScript code within scripts and reduces the need	to mingle JavaScript and HTML.      <P CLASS=para>	Most form elements have one or more event handlers that you can	define. Buttons, checkboxes, and radio buttons are among the	elements that can specify an <tt CLASS=literal>onClick</tt>	handler. Text and Textarea elements can have	<tt CLASS=literal>onChange</tt>, <tt CLASS=literal>onFocus</tt>, and	<tt CLASS=literal>onBlur</tt> event handlers that are invoked when	the user changes the displayed value or when the user gives	keyboard focus to, or takes away keyboard focus from, the	element. In addition to these HTML form-related event handlers,	there are also handlers invoked whenever the user moves the	mouse over a hypertext link and whenever a web page is loaded	into the browser or unloaded from the browser.      <P CLASS=para>	<A HREF="ch10_03.htm#JSCRIPT-CH-CLIENT-TAB-1">Table 10.1</A> lists the event	handlers defined by all client-side JavaScript objects. The	objects themselves will be introduced in some of the following	chapters, but this table will, for now, illustrate what a	diverse collection of event handlers is supported by JavaScript.	Once you've learned about all of the client-side objects	supported by JavaScript, this table should serve as a convenient	event-handler reference. Note that this table lists event	handlers supported by Navigator 3.0; not all those shown are	supported by Navigator 2.0 or Internet Explorer 3.0.      <P><DIV CLASS=table><TABLE><CAPTION><A CLASS="TITLE" NAME="JSCRIPT-CH-CLIENT-TAB-1">Table 10-1: JavaScript Event Handlers</A></CAPTION><TR CLASS=row><TH ALIGN="LEFT">Object</TH><TH COLSPAN=5 ALIGN="center">Supported Event Handlers</TH></TR><TR CLASS=row><TD ALIGN="LEFT">Area</TD><TD ALIGN="LEFT"><tt CLASS=literal>onClick()</tt>[1]</TD><TD ALIGN="LEFT"><tt CLASS=literal>onMouseOut()</tt></TD><TD COLSPAN=3 ALIGN="center"><tt CLASS=literal>onMouseOver()</tt></TD></TR><TR CLASS=row><TD ALIGN="LEFT">Button</TD><TD ALIGN="LEFT"><tt CLASS=literal>onBlur()</tt>[2]</TD><TD ALIGN="LEFT"><tt CLASS=literal>onClick()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>onFocus()</tt>[2]</TD><TD ALIGN="LEFT">&nbsp;</TD><TD ALIGN="LEFT">&nbsp;</TD></TR><TR CLASS=row><TD ALIGN="LEFT">Checkbox</TD><TD ALIGN="LEFT"><tt CLASS=literal>onBlur()</tt>[2]</TD><TD ALIGN="LEFT"><tt CLASS=literal>onClick()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>onFocus()</tt>[2]</TD><TD ALIGN="LEFT">&nbsp;</TD><TD ALIGN="LEFT">&nbsp;</TD></TR><TR CLASS=row><TD ALIGN="LEFT">FileUpload</TD><TD ALIGN="LEFT"><tt CLASS=literal>onBlur()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>onChange()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>onFocus()</tt></TD><TD ALIGN="LEFT">&nbsp;</TD><TD ALIGN="LEFT">&nbsp;</TD></TR><TR CLASS=row><TD ALIGN="LEFT">Form</TD><TD ALIGN="LEFT"><tt CLASS=literal>onReset()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>onSubmit()</tt></TD><TD ALIGN="LEFT">&nbsp;</TD><TD ALIGN="LEFT">&nbsp;</TD><TD ALIGN="LEFT">&nbsp;</TD></TR><TR CLASS=row><TD ALIGN="LEFT">Frame</TD><TD ALIGN="LEFT"><tt CLASS=literal>onLoad()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>onUnload()</tt></TD><TD ALIGN="LEFT">&nbsp;</TD><TD ALIGN="LEFT">&nbsp;</TD><TD ALIGN="LEFT">&nbsp;</TD></TR><TR CLASS=row><TD ALIGN="LEFT">Image</TD><TD ALIGN="LEFT"><tt CLASS=literal>onAbort()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>onError()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>onLoad()</tt></TD><TD ALIGN="LEFT">&nbsp;</TD><TD ALIGN="LEFT">&nbsp;</TD></TR><TR CLASS=row><TD ALIGN="LEFT">Link</TD><TD ALIGN="LEFT"><tt CLASS=literal>onClick()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>onMouseOut()</tt></TD><TD COLSPAN=3 ALIGN="center"><tt CLASS=literal>onMouseOver()</tt></TD></TR><TR CLASS=row><TD ALIGN="LEFT">Radio</TD><TD ALIGN="LEFT"><tt CLASS=literal>onBlur()</tt>[2]</TD><TD ALIGN="LEFT"><tt CLASS=literal>onClick()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>onFocus()</tt>[2]</TD><TD ALIGN="LEFT">&nbsp;</TD><TD ALIGN="LEFT">&nbsp;</TD></TR><TR CLASS=row><TD ALIGN="LEFT">Reset</TD><TD ALIGN="LEFT"><tt CLASS=literal>onBlur()</tt>[2]</TD><TD ALIGN="LEFT"><tt CLASS=literal>onClick()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>onFocus()</tt>[2]</TD><TD ALIGN="LEFT">&nbsp;</TD><TD ALIGN="LEFT">&nbsp;</TD></TR><TR CLASS=row><TD ALIGN="LEFT">Select</TD><TD ALIGN="LEFT"><tt CLASS=literal>onBlur()</tt>[2]</TD><TD ALIGN="LEFT"><tt CLASS=literal>onChange()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>onFocus()</tt>[2]</TD><TD ALIGN="LEFT">&nbsp;</TD><TD ALIGN="LEFT">&nbsp;</TD></TR><TR CLASS=row><TD ALIGN="LEFT">Submit</TD><TD ALIGN="LEFT"><tt CLASS=literal>onBlur()</tt>[2]</TD><TD ALIGN="LEFT"><tt CLASS=literal>onClick()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>onFocus()</tt>[2]</TD><TD ALIGN="LEFT">&nbsp;</TD><TD ALIGN="LEFT">&nbsp;</TD></TR><TR CLASS=row><TD ALIGN="LEFT">Text</TD><TD ALIGN="LEFT"><tt CLASS=literal>onBlur()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>onChange()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>onFocus()</tt></TD><TD ALIGN="LEFT">&nbsp;</TD><TD ALIGN="LEFT">&nbsp;</TD></TR><TR CLASS=row><TD ALIGN="LEFT">Textarea</TD><TD ALIGN="LEFT"><tt CLASS=literal>onBlur()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>onChange()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>onFocus()</tt></TD><TD ALIGN="LEFT">&nbsp;</TD><TD ALIGN="LEFT">&nbsp;</TD></TR><TR CLASS=row><TD ALIGN="LEFT">Window</TD><TD ALIGN="LEFT"><tt CLASS=literal>onBlur()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>onError()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>onFocus()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>onLoad()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>onUnload()</tt></TD></TR><tr><td colspan=6><p><b>Footnotes:</b><p><blockquote>[1] <P CLASS=para>Not supported in Navigator	      3.0 on Windows platforms.[2] <P CLASS=para>Not supported in Navigator	      3.0 on Unix platforms.</blockquote></td></tr></TABLE><P></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch10-SECT2-AUTOID.5">Event Handlers as Functions</A></h3><P CLASS=para>	Specifying an event handler as a string within an appropriate	HTML tag defines a JavaScript function that is invoked by the	browser when the appropriate event occurs. In fact, in	Navigator 3.0, event-handler functions are stored as properties	of the objects for which they are defined. Thus, if the checkbox	defined in the example above was accessible in JavaScript as	<tt CLASS=literal>document.forms[0].opts[2]</tt>, the event	handler defined in the object's HTML tag would be available to	JavaScript code as:	<DIV CLASS=programlisting><P><PRE>document.forms[0].opts[2].onclick</PRE></DIV>	Note the capitalization of <tt CLASS=literal>onclick</tt> here and	recall that JavaScript <I CLASS=emphasis>is</I> case-sensitive	while HTML is not. Event-handler properties in JavaScript are	always all lowercase, even if the corresponding HTML happens	to appear in mixed-case or all-caps.      <P CLASS=para>	In Navigator 3.0, you can use event-handler properties in the	ways you can use any method property. You can use it to invoke	the event handler explicitly, to assign the	event handler to some other variable or pass it to a function,	and even to define or redefine an event handler by	assigning an appropriate function to the event-handler	property--thereby avoiding the need to define the event	handler with a (sometimes long and awkward) string value of	an HTML attribute.      </DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch10-SECT2-AUTOID.6">Event Handlers in &lt;SCRIPT&gt; Tags</A></h3><P CLASS=para>	In Internet Explorer, but not in Navigator, there is an	alternative syntax for defining event handlers. It involves	using new <tt CLASS=literal>FOR</tt> and <tt CLASS=literal>EVENT</tt>	attributes to the <tt CLASS=literal>&lt;SCRIPT&gt;</tt> tag to	specify code that constitutes an event handler for a named object	and a named event. Using this Internet Explorer technique, we	could rewrite the checkbox example shown earlier like this:	<DIV CLASS=programlisting><P><PRE>&lt;INPUT TYPE="checkbox" NAME="opts" VALUE="ignore-case"&gt;&lt;SCRIPT FOR="opts" EVENT="onClick"&gt;    ignore_case = this.checked;&lt;/SCRIPT&gt;    </PRE></DIV>	Note that the value of the <tt CLASS=literal>FOR</tt> attribute must	be an object name assigned with the <tt CLASS=literal>NAME</tt>	attribute when the object is defined. And the value of the	<tt CLASS=literal>EVENT</tt> attribute is the name of the event	handler (but not the name of the event itself).      <P CLASS=para>	There is a certain elegance to specifying event handlers in this	way--it avoids the need to add new JavaScript-specific	attributes to all the HTML objects. Nevertheless, since	this technique is not supported by Navigator, I do not recommend	its use.      </DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch10-SECT2-AUTOID.7">Timer Events</A></h3><P CLASS=para>	There is another type of event, besides those generated through	user interaction. These are events generated when specified	periods of time have elapsed; they are known as timer events, or	"timeouts."  Timeouts are important to any JavaScript program	that must perform an action on some regular schedule, even when	the user is not actively interacting with the browser.	Applications of timeouts include clocks and animation.      <P CLASS=para>	You use <tt CLASS=literal>setTimeout()</tt> (a method of the	Window object) to specify that a timeout should occur a	specified number of milliseconds in the future. Timer events do	not have predefined event handlers as other types of events	do. Instead, the code to be executed when the specified time	interval elapses is passed as a string argument to	<tt CLASS=literal>setTimeout()</tt>. For example, the following	code arranges for a timer event to occur in 1 second (1000	milliseconds). When that timer event occurs, the function	<tt CLASS=literal>show_date_time()</tt> will be invoked.	<DIV CLASS=programlisting><P><PRE>//<tt CLASS=replaceable><i> call the show_date_time() function 1 second from now</i></tt>setTimeout("show_date_time();", 1000);</PRE></DIV>      <P CLASS=para>	When you register a timeout with code like that above, only one	timer event will occur--i.e., the timer event will occur one	second in the future; it will not repeat itself every second	after that. When you do want a timer that repeats periodically,	you simply include code in the "handler" that re-registers the	timeout by calling <tt CLASS=literal>setTimeout()</tt> again.	This is a useful technique for animation and related tasks. It	might be done like this:	<DIV CLASS=programlisting><P><PRE>function animate_status_line_annoyingly(){    //<tt CLASS=replaceable><i> Set the Window.status property here, </i></tt>    //<tt CLASS=replaceable><i> then arrange to be called later so we can do it again!</i></tt>    setTimeout("animate_status_line_annoyingly()", 1000);}</PRE></DIV>      <P CLASS=para>	In complex programs you may need to use more than one timeout.	This is no problem; JavaScript can keep track of any number of	pending timer events. After you have registered a timeout with	<tt CLASS=literal>setTimeout()</tt>, but before the timer event has	actually occurred, you can cancel the timeout with the	<tt CLASS=literal>clearTimeout()</tt> method. See the reference	section of this book for complete detains on	<tt CLASS=literal>Window.setTimeout()</tt> and	<tt CLASS=literal>Window.clearTimeout()</tt>.       </DIV></DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch10_02.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="ch10_04.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>Including JavaScript Files</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>JavaScript in URLs</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>