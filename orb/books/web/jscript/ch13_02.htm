<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 13] 13.2 The Location Object</TITLE><META NAME="author" CONTENT="David Flanagan"><META NAME="date" CONTENT="Wed Apr 23 18:17:11 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="JavaScript"><META NAME="title" CONTENT="JavaScript: The Definitive Guide"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif" ALT="Javascript: The Definitive Guide"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch13_01.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 13</b></td><td width=172 align=right valign=top><A HREF="ch13_03.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="ch13-SECT1-AUTOID.2">13.2 The Location Object</A></h2><P CLASS=para><A NAME="CH13.LOC1"></A>      The <tt CLASS=literal>location</tt> property of a window is a      reference to a Location object, which is a representation of the      URL of the document currently being displayed in that window. The      <tt CLASS=literal>href</tt> property of the Location object is a      string that contains the complete text of the URL. Other      properties of this object, such as <tt CLASS=literal>protocol</tt>,      <tt CLASS=literal>host</tt>, <tt CLASS=literal>pathname</tt>, and      <tt CLASS=literal>search</tt> specify the various individual parts of      the URL. This <tt CLASS=literal>search</tt> property of the Location      object is an interesting one. It contains any portion of a URL      following (and including) a question mark. This is often some      sort of "query string", and in general, the question mark syntax      in a URL is a technique for embedding arguments in the URL. While      these arguments are usually intended for CGI scripts run on a      server, there is no reason they cannot also be used in      JavaScript-enabled pages.      <A HREF="ch13_02.htm#JSCRIPT-CH-NAVIGATION-EX-2">Example 13-2</A> shows how you can      use JavaScript and the Location object to       extract arguments embedded within your web page.    <DIV CLASS=example><h4 CLASS=example><A CLASS="TITLE" NAME="JSCRIPT-CH-NAVIGATION-EX-2">Example 13-2: Extracting Arguments from a URL</A></h4><DIV CLASS=programlisting><P><PRE>&lt;SCRIPT LANGUAGE="JavaScript1.1"&gt;//<tt CLASS=replaceable><i> location.search has a question mark at the beginning, </i></tt>//<tt CLASS=replaceable><i> so we call substring() to get rid of it.</i></tt>var argstr = location.search.substring(1, location.search.length)//<tt CLASS=replaceable><i> Assuming that the arguments are passed in a comma-separated list, we</i></tt>//<tt CLASS=replaceable><i> can break them into an array with this line. (Using an ampersand to</i></tt>//<tt CLASS=replaceable><i> separate arguments is another common URL convention.)</i></tt>var args = argstr.split(',');//<tt CLASS=replaceable><i> Now we can use the arguments however we want. This example just </i></tt>//<tt CLASS=replaceable><i> prints them out. We use the unescape() function in case the arguments</i></tt>//<tt CLASS=replaceable><i> include escaped characters (like spaces and punctuation) that are </i></tt>//<tt CLASS=replaceable><i> illegal in URLs. (See escape() and unescape() functions for details.)</i></tt>for (var i = 0; i &lt; args.length; i++)    document.write(unescape(args[i]) + "&lt;BR&gt;");&lt;/SCRIPT&gt;</PRE></DIV></DIV><P CLASS=para>      In addition to its properties, the Location object can be used as      if it were itself a primitive string value. If you read the value      of a Location object, you get the same string as you would if you      read the <tt CLASS=literal>href</tt> property of the object (this is      because the Location object has a suitable      <tt CLASS=literal>toString()</tt> method). What is far more      interesting, though, is that you can assign a new URL string to      the <tt CLASS=literal>location</tt> property of a window. Assigning a      URL to the <tt CLASS=literal>Location</tt> object like this has a very      important side effect: it causes the browser to load and display      the contents of the URL you assign (this side effect occurs      because the Location has a suitable <tt CLASS=literal>assign()</tt>      method). For example, you might assign a URL to the      <tt CLASS=literal>location</tt> property like this:      <DIV CLASS=programlisting><P><PRE>//<tt CLASS=replaceable><i> If Java isn't enabled, go to a page that displays a message</i></tt>//<tt CLASS=replaceable><i> saying that you can't run this page without Java.</i></tt>if (!navigator.javaEnabled())     location = "needsjava.html";</PRE></DIV>    <P CLASS=para>      As you can imagine, making the browser load specified web pages      into windows is a very important programming technique. While      you might expect there to be a method you can call to make the      browser display a new web page, assigning a URL to the      <tt CLASS=literal>location</tt> property of a window is the      supported technique to accomplish this. Internet Explorer      supports a <tt CLASS=literal>navigate()</tt> method of the Window      object to do this, but it is not compatible with Navigator, and      therefore should not be used.    <P CLASS=para>      Although the Location object does not have a method that serves      the same function as assigning a URL directly to the      <tt CLASS=literal>location</tt> property of a window, this object does      support two methods (in Navigator 3.0). The      <tt CLASS=literal>reload()</tt> method reloads the currently displayed      page from the web server. The <tt CLASS=literal>replace()</tt> method      loads and displays a URL that you specify. But invoking this      method for a given URL is different than assigning that URL to the      <tt CLASS=literal>location</tt> property of a window. When you call      <tt CLASS=literal>replace()</tt>, the specified URL "replaces" the      current one in the browser's history list rather than creating a      new entry in that history list. Therefore, if you use      <tt CLASS=literal>replace()</tt> to overwrite one document with a new      one, the <b>Back</b> button will not take      the user back to the original document, as it would have if you      had loaded the new document by assigning to the      <tt CLASS=literal>location</tt> property. For web sites that use      frames and display a lot of "temporary" pages (perhaps generated      by a CGI script) using <tt CLASS=literal>replace()</tt> is often quite      useful. By not storing temporary pages in the history list, the      <b>Back</b> button becomes more useful to      the user.    <P CLASS=para>      Finally, don't confuse the <tt CLASS=literal>location</tt> property of      the Window object, which refers to a Location object, with the      <tt CLASS=literal>location</tt> property of the Document object, which      is simply a read-only string with none of the special features of      the Location object. <tt CLASS=literal>Document.location</tt> is a      synonym for <tt CLASS=literal>Document.URL</tt>, which, in Navigator      3.0, is the preferred name for this property (because it avoids      the potential confusion). In most cases,      <tt CLASS=literal>document.location</tt> is the same as      <tt CLASS=literal>location.href</tt>. When there is a server      redirect, however, <tt CLASS=literal>document.location</tt> contains      the actual URL, as loaded, and <tt CLASS=literal>location.href</tt>      contains the URL as originally requested.    </DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch13_01.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="ch13_03.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>The Navigator, MimeType, and Plugin Objects</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>The History Object</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>