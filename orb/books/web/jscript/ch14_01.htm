<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 14] Documents and Their Contents</TITLE><META NAME="author" CONTENT="David Flanagan"><META NAME="date" CONTENT="Thu Apr 24 13:35:24 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="JavaScript"><META NAME="title" CONTENT="JavaScript: The Definitive Guide"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF" TEXT="#000000"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif" ALT="Javascript: The Definitive Guide"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch13_03.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 14</b></td><td width=172 align=right valign=top><A HREF="ch14_02.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><H1 CLASS=chapter><A CLASS="TITLE" NAME="JSCRIPT-CH-DOCUMENTS">14. Documents and Their Contents</A></H1><DIV CLASS=htmltoc><p><b>Contents:</b><br>The Document Object<br><A HREF="ch14_02.htm">The Link Object</A><BR><A HREF="ch14_03.htm">The Anchor Object</A><BR><A HREF="ch14_04.htm">The JavaObject Object</A><BR></DIV><DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="ch14-SECT1-AUTOID.1">14.1 The Document Object</A></h2><P CLASS=para> <A NAME="CH14.DOC1"></A>      If the Window object, which represents a window or a frame, is the      central object in client-side JavaScript, then the Document      object, which represents the contents of a window or frame, runs a      close second, and is just as commonly used. This object has      properties that specify information about the document: the URL,      its last-modified date, the URL of the document that linked to it,      the colors that it is displayed in. The Document object also has      a few methods that allow JavaScript programs to dynamically output      text into a document, and to dynamically create new documents from      scratch. Finally, the Document object also contains a number of      array properties that specify information about the contents of      the document. These arrays contain objects that represent the      links, anchors, HTML forms, applets, and embedded data contained      in the document. These arrays and the objects they contain are      very important in JavaScript programming, and will be described in      their own sections later in this chapter.    <DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch14-SECT2-AUTOID.1">Document Properties</A></h3><P CLASS=para>	The Document object has a number of properties that correspond	to attributes of the <tt CLASS=literal>&lt;BODY&gt;</tt> tag, and	which are used to specify the colors that the document is	displayed in. The <tt CLASS=literal>bgColor</tt> property, and the	<tt CLASS=literal>BGCOLOR</tt> attribute specify the background	color of the document. Similarly, the	<tt CLASS=literal>fgColor</tt> and the <tt CLASS=literal>TEXT</tt>	attribute specify the default color for text in the document.	The <tt CLASS=literal>linkColor</tt> property specifies the color of	unvisited links, and <tt CLASS=literal>vlinkColor</tt> and	<tt CLASS=literal>alinkColor</tt>[1]	specify the color of visited links	and of activated links (i.e., links currently being	clicked on). The <tt CLASS=literal>LINK</tt>,	<tt CLASS=literal>VLINK</tt>, and <tt CLASS=literal>ALINK</tt>	attributes correspond to these properties.      <blockquote class=footnote><P CLASS=para>[1] 	    You can set the <tt CLASS=literal>alinkColor</tt> property in	    Internet Explorer, but it will be ignored, since IE never	    displays a separate color for activated links.	  </blockquote><P CLASS=para>	These color properties of the Document object are read/write	properties, but they can only be set before the	<tt CLASS=literal>&lt;BODY&gt;</tt> tag is parsed. You can set them	dynamically with JavaScript code in the	<tt CLASS=literal>&lt;HEAD&gt;</tt> of a document, or you can set	them statically as attributes of the	<tt CLASS=literal>&lt;BODY&gt;</tt> tag, but you cannot set them	elsewhere.      <P CLASS=para>	The exception to this rule is the <tt CLASS=literal>bgColor</tt>	property. You can set this property at any time, and doing so	will cause the background color of the browser to change.	Unfortunately, on Unix platforms, changing the background color	can make the contents of the page disappear (usually until the	window is scrolled or otherwise redrawn). Setting the	background color can still produce a useful special effect when	done with small, empty frames, however.      <P CLASS=para>	Each of these color properties has a string value. To set a	color, you can use one of the predefined color names listed in	<A HREF="appg_01.htm">Appendix G, <i>JavaScript and HTML Color Names and Values</i></A>, or you can specify the	color as red, green, and blue color values, expressed as a	string of six hexadecimal digits in the form	"<tt CLASS=replaceable><i>RRGGBB</i></tt>".      <P CLASS=para>	The Document object also has properties that are somewhat more	interesting than these color properties. For the most part, the	values of these other properties are derived from the HTML content	of the document or from HTML headers supplied by the web server.	As we saw in the discussion of the Location object, the Document	object has a <tt CLASS=literal>location</tt> property (and a	<tt CLASS=literal>URL</tt> property which is a preferred synonym in	Navigator 3.0) that specifies the URL of the document. Because	of redirection performed by the web server, this URL may be	different than the requested URL.      <P CLASS=para>	The <tt CLASS=literal>lastModified</tt> property is a string that	specifies the date and time of the most recent change to the	document. This is a value supplied by some, but not all, web	servers. The <tt CLASS=literal>referrer</tt> property specifies the	URL of the document that contained the hypertext link that the	user clicked on to get to the current document. If the current	document was loaded by explicitly typing a URL, then this	property will be empty. Note that this property is not	supported in Internet Explorer 3.0. Finally, the	<tt CLASS=literal>title</tt> property contains any text that appears	between the <tt CLASS=literal>&lt;TITLE&gt;</tt> and	<tt CLASS=literal>&lt;/TITLE&gt;</tt> tags in the	<tt CLASS=literal>&lt;HEAD&gt;</tt> of the document. You cannot use	this property, of course, in code that appears before the	<tt CLASS=literal>&lt;TITLE&gt;</tt> of a document.      <P CLASS=para>	A simple use for the <tt CLASS=literal>lastModified</tt> property is	to automatically include a timestamp in your documents, so that	users know whether the information they are seeing is	up to date. You can do this by including HTML and JavaScript	code like the following at the bottom of all your documents.	Note that this code displays the document title and URL as well	as its modification date:	<DIV CLASS=programlisting><P><PRE>&lt;HR&gt;&lt;FONT SIZE=1&gt;Document: &lt;I&gt;&lt;SCRIPT&gt;document.write(document.title);&lt;/SCRIPT&gt;&lt;/I&gt;&lt;BR&gt;URL: &lt;I&gt;&lt;SCRIPT&gt;document.write(document.URL);&lt;/SCRIPT&gt;&lt;/I&gt;&lt;BR&gt;Last Update: &lt;I&gt;&lt;SCRIPT&gt;document.write(document.lastModified);&lt;/SCRIPT&gt;&lt;/I&gt;&lt;/FONT&gt;</PRE></DIV>      <P CLASS=para>	A possible use for the <tt CLASS=literal>referrer</tt> property is	to save this value in a hidden field of a form on your web	page. When the user submits the form (for whatever reason your	page contains the form in the first place) you can save this	referrer data on the server. This will allow you to analyze	what links exist to your page, and also what percentage of hits	come through which links. Another use of this property is a trick	to prevent unauthorized links to your page from working	correctly. For example, if you only want users to be able to	get to your page through links in pages from one particular	site, you might use code like this at the top of your page:	<DIV CLASS=programlisting><P><PRE>&lt;SCRIPT&gt;if (document.referrer == "" || document.referrer.indexOf("mysite.com") == -1)    window.location = "javascript:'You can't get there from here!'";&lt;/SCRIPT&gt;</PRE></DIV>	Don't consider this trick to be any kind of serious security	measure, of course. Anyone determined to read your pages could	simply disable JavaScript in their browser, and then load the	page.       </DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch14-SECT2-AUTOID.2">The write() Method</A></h3><P CLASS=para><A NAME="CH14.WRITE1"></A>	Without a doubt, the most important feature of the Document	object (and perhaps of client-side JavaScript in general) is the	<tt CLASS=literal>write()</tt> method, which allows us to	dynamically generate web page content from our JavaScript	programs. There are several ways that this method can be used.	The most obvious is to use it within a script to output HTML	into the document that is currently being parsed. This is the	way it was used above to display the Document	<tt CLASS=literal>lastModified</tt> property at the bottom of the	web page. Be aware that you can only output HTML to the current	document while that document is being parsed. That is, you can	only call <tt CLASS=literal>document.write()</tt> from within	<tt CLASS=literal>&lt;SCRIPT&gt;</tt> tags, because these scripts	are executed as part of the document parsing process. In	particular, if you call <tt CLASS=literal>document.write()</tt> from	an event handler, you will end up overwriting the current	document (including its event handlers), instead of appending	text to it.      <P CLASS=para>	Although you can't usefully write to the current document from	an event handler, there is no reason you can't write to a	document in another window or frame, and doing so can be a very	useful technique for multiwindow or multiframe web sites. For	example, JavaScript code in one frame of a multiframe site	might display a message in another frame with code like this:	<DIV CLASS=programlisting><P><PRE>&lt;SCRIPT&gt;parent.frames[0].document.open();parent.frames[0].document.write("&lt;HRE&gt;Hello from your sibling frame!&lt;HR&gt;");parent.frames[0].document.close();&lt;/SCRIPT&gt;</PRE></DIV>      <P CLASS=para>	We previously saw code that dynamically creates an HTML document	like this in <A HREF="ch12_02.htm#JSCRIPT-CH-WINDOWS-EX-2">Example 12-2</A> and <A HREF="ch12_04.htm#JSCRIPT-CH-WINDOWS-EX-6">Example 12-6</A>. Recall that to create a new	document, we first call the <tt CLASS=literal>open()</tt> method of	the Document object, then call <tt CLASS=literal>write()</tt> any	number of times to output the contents of the document, and	finally call the <tt CLASS=literal>close()</tt> method of the	Document object to indicate that we are complete. This last	step is important--if you forget to close the document, the	browser will not stop the "document loading" animation it	displays. Also, the browser may buffer up the HTML you have	written, and is not required to display it until you explicitly	end the document by calling <tt CLASS=literal>close()</tt>.      <P CLASS=para>	In contrast to the <tt CLASS=literal>close()</tt> call, which is	required, the <tt CLASS=literal>open()</tt> call is optional. If	you call the <tt CLASS=literal>write()</tt> method on a document	that has already been closed, then JavaScript implicitly opens a	new HTML document, as if you called the	<tt CLASS=literal>open()</tt> method. This explains what happens	when you call <tt CLASS=literal>document.write()</tt> from an	event handler within the same document--JavaScript opens a new	document. In the process, however, the current document and its	contents, including scripts and event handlers, is discarded.	In Navigator 3.0, this causes surprising programming difficulties	and unexpected error messages. In Navigator 2.0, it can	actually cause the browser to crash. The best rule of thumb is	that a document should never call <tt CLASS=literal>write()</tt> on	itself from within an event-handler.      <P CLASS=para>	A couple of final notes about the <tt CLASS=literal>write()</tt>	method. First, many people do not realize that the	<tt CLASS=literal>write()</tt> method can take more than one	argument. When you pass multiple arguments, they will be output	one after another, just as if they had been concatenated. So	instead of writing:	<DIV CLASS=programlisting><P><PRE>document.write('Hello, '  + name + " Welcome to my home page!");</PRE></DIV>	you can equivalently write:	<DIV CLASS=programlisting><P><PRE>document.write('Hello, ', name, " Welcome to my home page!");</PRE></DIV>      <P CLASS=para>	The second point to note about the <tt CLASS=literal>write()</tt>	method is that the Document object also supports a	<tt CLASS=literal>writeln()</tt> method, which is identical to the	<tt CLASS=literal>write()</tt> method in every way, except that it	appends a newline after outputting its arguments. Since HTML	ignores linebreaks, this newline character usually doesn't make	a difference, but, as we'll see in a bit, the	<tt CLASS=literal>writeln()</tt> method can be convenient when	working with non-HTML documents.      </DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch14-SECT2-AUTOID.3">Flushing Generated Output</A></h3><P CLASS=para>	When you use the <tt CLASS=literal>write()</tt> method to	dynamically generate HTML output, the text you write may not	appear in the browser window right away. The contents of your	individual <tt CLASS=literal>write()</tt> calls may be buffered up	so that they can be written out to the document in larger	chunks. Unfortunately, there is no <tt CLASS=literal>flush()</tt>	method of the Document object that forces all output to appear.	Instead, you must know the necessary tricks to make your output	appear.       <P CLASS=para>	Calling the <tt CLASS=literal>close()</tt> method is the simplest	technique for forcing your output to be displayed, of course.	Sometimes, though, you want intermediate output to be displayed,	and are not yet ready to close the document you are generating.	In this case, there are two techniques for flushing output. In	Navigator 3.0, output is flushed whenever a new line is forced	in the browser. Thus, if you output a	<tt CLASS=literal>&lt;BR&gt;</tt> or <tt CLASS=literal>&lt;P&gt;</tt> or	<tt CLASS=literal>&lt;HR&gt;</tt> tag, all the text before that tag	will appear. In Internet Explorer 3.0, it is not so easy,	however--your output does not appear until the current	<tt CLASS=literal>&lt;SCRIPT&gt;</tt> block ends or the current	event handler function returns. Thus, for this browser, you may	need to break your code up into smaller chunks in order to	assure that output is correctly flushed. Note that you can	always use <tt CLASS=literal>setTimeout()</tt> to schedule the next	"chunk" of code to run in 0 milliseconds. This technique allows	control to temporarily return to IE so that it can display any	pending output.      </DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch14-SECT2-AUTOID.4">Non-HTML Documents</A></h3><P CLASS=para><A NAME="CH14.NON1"></A><A NAME="CH14.NON2"></A>	When you open a new document with the <tt CLASS=literal>open()</tt>	method, the browser assumes that you'll be creating an HTML	document. But this is not necessarily the case. Web browsers	can display a number of other data formats besides HTML text.	When you want to dynamically create and display a document using	some other data format, you call the <tt CLASS=literal>open()</tt>	method with a single argument, which is the MIME type you	desire. Note that while this technique is supported in	Navigator 2.0 and 3.0, it does not work in Internet Explorer	3.0--in that browser, any argument passed to	<tt CLASS=literal>open()</tt> is ignored.      <P CLASS=para>	The MIME type for HTML is "text/html". The most common	format other than HTML is plain text, with a MIME type of	"text/plain". If you want to use the <tt CLASS=literal>write()</tt>	method to output text that uses newlines, spaces, and tab	characters for formatting, then you should open the document by	passing the string "text/plain" to the <tt CLASS=literal>open()</tt>	method. <A HREF="ch14_01.htm#JSCRIPT-CH-DOCUMENTS-EX-1">Example 14-1</A> shows one	way you might do this. It implements a	<tt CLASS=literal>debug()</tt> function that you can use to output	plain-text debugging messages from your scripts into a separate	window that appears when needed.	<A HREF="ch14_01.htm#JSCRIPT-CH-DOCUMENTS-FIG-1">Figure 14-1</A> shows what the	resulting window looks like.      <P CLASS=para> <DIV CLASS=figure><h4 CLASS=figure><A CLASS="TITLE" NAME="JSCRIPT-CH-DOCUMENTS-FIG-1">Figure 14-1: A window for plain-text debugging output</A></h4><p><img align=middle src="./figs/js1401.gif" alt="[Graphic: Figure 14-1]" width=500 height=271></DIV><DIV CLASS=example><h4 CLASS=example><A CLASS="TITLE" NAME="JSCRIPT-CH-DOCUMENTS-EX-1">Example 14-1: Creating a Plain-Text Document</A></h4><DIV CLASS=programlisting><P><PRE>&lt;SCRIPT&gt;var _console = null;function debug(msg) {    //<tt CLASS=replaceable><i> Open a window the first time we are called, or after an existing</i></tt>    //<tt CLASS=replaceable><i> console window has been closed.</i></tt>    if ((_console == null) || (_console.closed)) {         _console = window.open("","console","width=600,height=300,resizable");        //<tt CLASS=replaceable><i> open a document in the window to display plain text</i></tt>        _console.document.open("text/plain");    }    _console.document.writeln(msg);}&lt;/SCRIPT&gt;&lt;!--<tt CLASS=replaceable><i> Here's an example of using this script </i></tt>--&gt;&lt;SCRIPT&gt;var n = 0;&lt;/SCRIPT&gt;&lt;FORM&gt;&lt;INPUT TYPE="button" VALUE="Push Me"       onClick="debug('You have pushed me:\t' + ++n + ' times.');"&gt;&lt;/FORM&gt;</PRE></DIV></DIV><P CLASS=para>	This technique of using non-HTML documents is not limited to	plain-text documents, or to textual documents in general. It	can also be used with images, for instance. If we open a	document and specify the MIME type "image/xbm", for example,	then the browser will expect the contents of that document to be	an image in XBM format. Because XBM images have an ASCII	representation, we can easily write a static XBM image to the	document, or even generate a dynamic image on the fly (perhaps	using a Java applet to do the image processing, for speed).	<A HREF="ch14_01.htm#JSCRIPT-CH-DOCUMENTS-EX-2">Example 14-2</A> shows how you can	create an "image/xbm" document with a static XBM image, and also	shows how this XBM image can be used for image embedded in an	HTML document. <A HREF="ch14_01.htm#JSCRIPT-CH-DOCUMENTS-FIG-2">Figure 14-2</A> shows	the windows created by the example. This technique would be	much more efficient and interesting if it used a compact image	format like "image/gif". Unfortunately, this is not possible	because GIF images use a binary format that includes NULL	characters (i.e., the byte 0) and the current versions of	JavaScript cannot output this character.      <DIV CLASS=figure><h4 CLASS=figure><A CLASS="TITLE" NAME="JSCRIPT-CH-DOCUMENTS-FIG-2">Figure 14-2: JavaScript-generated images</A></h4><p><img align=middle src="./figs/js1402.gif" alt="[Graphic: Figure 14-2]" width=500 height=120></DIV><DIV CLASS=example><h4 CLASS=example><A CLASS="TITLE" NAME="JSCRIPT-CH-DOCUMENTS-EX-2">Example 14-2: Generating XBM Images with JavaScript</A></h4><DIV CLASS=programlisting><P><PRE>&lt;SCRIPT&gt;//<tt CLASS=replaceable><i> This is a long string in XBM image format. It defines an image.</i></tt>//<tt CLASS=replaceable><i> This is an ASCII format, which means we can easily manipulate it </i></tt>//<tt CLASS=replaceable><i> in JavaScript, but also means that it is not compact. This is only</i></tt>//<tt CLASS=replaceable><i> a 22x22 pixel image. The real power of this technique comes, of course</i></tt>//<tt CLASS=replaceable><i> when we start generating XBM data dynamically at run-time instead of</i></tt>//<tt CLASS=replaceable><i> using a static string as we do here.</i></tt>image_text = "#define plaid_width 22\n" +"#define plaid_height 22\n" +"#define plaid_x_hot -1\n" +"#define plaid_y_hot -1\n" +"static char plaid_bits[] = {\n" +"  0x75, 0xfd, 0x3f, 0xaa, 0xfa, 0x3e, 0x75, 0xfd, 0x3f, 0xaa, 0xfa, 0x3e,\n" +"  0x75, 0xfd, 0x3f, 0xff, 0x57, 0x15, 0x75, 0xfd, 0x3f, 0xaa, 0xfa, 0x3e,\n" +"  0x75, 0xfd, 0x3f, 0xaa, 0xfa, 0x3e, 0x75, 0xfd, 0x3f, 0x20, 0xa8, 0x2b,\n" +"  0x20, 0x50, 0x15, 0x20, 0xa8, 0x2b, 0x20, 0x50, 0x15, 0x20, 0xa8, 0x2b,\n" +"  0xff, 0xff, 0x3f, 0x20, 0xa8, 0x2b, 0x20, 0x50, 0x15, 0x20, 0xa8, 0x2b,\n" +"  0x20, 0x50, 0x15, 0x20, 0xa8, 0x2b};\n";//<tt CLASS=replaceable><i> Here we create a new window, open the document, specifying a MIME type of</i></tt>//<tt CLASS=replaceable><i> image/xbm, and then output the image text. The window will display</i></tt>//<tt CLASS=replaceable><i> the XBM data we give it.</i></tt>win1 = window.open("", "win1", "width=100,height=100,resizable");var d = win1.document;d.open('image/xbm');d.write(image_text);d.close();//<tt CLASS=replaceable><i> There are also a couple of other ways to use XBM image data that do not</i></tt>//<tt CLASS=replaceable><i> involve specifying a MIME type when opening the document. Here we </i></tt>//<tt CLASS=replaceable><i> create a new window, and then use a javascript: URL as the SRC of an</i></tt>//<tt CLASS=replaceable><i> inline &lt;IMG&gt;. This is an XBM image embedded in a text/html document,</i></tt>//<tt CLASS=replaceable><i> so we can display text, anchors, etc.</i></tt>win2 = window.open("", "win2", "width=100,height=100,resizable");var d = win2.document;d.open();d.write('&lt;B&gt;Plaid:&lt;/B&gt;&lt;BR&gt;');d.write('&lt;A HREF="javascript:self.close();"&gt;');d.write('&lt;IMG SRC="javascript:opener.image_text" WIDTH=22 HEIGHT=22&gt;');d.write('&lt;/A&gt;');d.close();//<tt CLASS=replaceable><i> We can also use the javascript: URL with the BACKGROUND tag of the</i></tt>//<tt CLASS=replaceable><i> &lt;BODY&gt; tag. XBM is a black-on-white image format, but note how the</i></tt>//<tt CLASS=replaceable><i> BGCOLOR tag can replace the white background.</i></tt>win3 = window.open("", "win3", "width=100,height=100,resizable");var d = win3.document;d.open();d.write('&lt;BODY BACKGROUND="javascript:opener.image_text" BGCOLOR="red"&gt;');d.close();&lt;/SCRIPT&gt;</PRE></DIV></DIV></DIV></DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch13_03.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="ch14_02.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>The History Object</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>The Link Object</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>