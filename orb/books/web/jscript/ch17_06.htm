<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 17] 17.6 Form Verification Example</TITLE><META NAME="author" CONTENT="David Flanagan"><META NAME="date" CONTENT="Wed Apr 23 18:22:15 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="JavaScript"><META NAME="title" CONTENT="JavaScript: The Definitive Guide"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif" ALT="Javascript: The Definitive Guide"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch17_05.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 17</b></td><td width=172 align=right valign=top><A HREF="ch18_01.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="ch17-SECT1-AUTOID.6">17.6 Form Verification Example</A></h2><P CLASS=para><A NAME="CH17.VERIF1"></A><A NAME="CH17.VERIF2"></A>      We'll close our discussion of forms with an extended example that      demonstrates several of the concepts we've been talking about.      <A HREF="ch17_06.htm#JSCRIPT-CH-FORMS-EX-2">Example 17-2</A> shows how you might use the      <tt CLASS=literal>onSubmit()</tt> event handler of the Form object to      perform input validation to notify the user and prevent the form      from being submitted when it contains missing or invalid data.      After studying this example, you may want to turn back to <A HREF="ch01_05.htm#JSCRIPT-CH-INTRO-EX-3">Example 1-3</A>, the forms programming      example with which we began this book. The code of that example      will probably make more sense now that you are a JavaScript      expert!    <P CLASS=para>      <A HREF="ch17_06.htm#JSCRIPT-CH-FORMS-EX-2">Example 17-2</A> defines a      <tt CLASS=literal>verify()</tt> function suitable for use as a      generic form validator. It checks for empty non-optional      fields, and can also check that numeric values are in fact      numeric and that they fall within a specified numeric range.      This <tt CLASS=literal>verify()</tt> function relies on the      <tt CLASS=literal>type</tt> property of form elements to determine      which elements are which, and also relies on additional      user-defined properties to distinguish optional fields from      required fields and to specify the allowed range for numeric      fields. Note also how it reads the <tt CLASS=literal>value</tt>      property of input fields, and uses the <tt CLASS=literal>name</tt>      property of those fields when reporting errors. <A HREF="ch17_06.htm#JSCRIPT-CH-FORMS-FIG-3">Figure 17-3</A> shows an example form      using this verification scheme, and the error message that is      displayed when the user attempts to submit the form before      correctly filling it in.    <DIV CLASS=figure><h4 CLASS=figure><A CLASS="TITLE" NAME="JSCRIPT-CH-FORMS-FIG-3">Figure 17-3: A form that failed validation</A></h4><p><img align=middle src="./figs/js1703.gif" alt="[Graphic: Figure 17-3]" width=500 height=360></DIV><DIV CLASS=example><h4 CLASS=example><A CLASS="TITLE" NAME="JSCRIPT-CH-FORMS-EX-2">Example 17-2: Performing Form Validation</A></h4><DIV CLASS=programlisting><P><PRE>&lt;SCRIPT LANGUAGE="JavaScript1.1"&gt;//<tt CLASS=replaceable><i> A utility function that returns true if a string contains only </i></tt>//<tt CLASS=replaceable><i> whitespace characters.</i></tt>function isblank(s){    for(var i = 0; i &lt; s.length; i++) {        var c = s.charAt(i);        if ((c != ' ') &amp;&amp; (c != '\n') &amp;&amp; (c != '\t')) return false;    }    return true;}//<tt CLASS=replaceable><i> This is the function that performs form verification. It will be invoked</i></tt>//<tt CLASS=replaceable><i> from the onSubmit() event handler. The handler should return whatever</i></tt>//<tt CLASS=replaceable><i> value this function returns.</i></tt>function verify(f){    var msg;    var empty_fields = "";    var errors = "";    //<tt CLASS=replaceable><i> Loop through the elements of the form, looking for all </i></tt>    //<tt CLASS=replaceable><i> text and textarea elements that don't have an "optional" property</i></tt>    //<tt CLASS=replaceable><i> defined. Then, check for fields that are empty and make a list of them.</i></tt>    //<tt CLASS=replaceable><i> Also, if any of these elements have a "min" or a "max" property defined,</i></tt>    //<tt CLASS=replaceable><i> then verify that they are numbers and that they are in the right range.</i></tt>    //<tt CLASS=replaceable><i> Put together error messages for fields that are wrong.</i></tt>    for(var i = 0; i &lt; f.length; i++) {        var e = f.elements[i];        if (((e.type == "text") || (e.type == "textarea")) &amp;&amp; !e.optional) {            //<tt CLASS=replaceable><i> first check if the field is empty</i></tt>            if ((e.value == null) || (e.value == "") || isblank(e.value)) {                empty_fields += "\n          " + e.name;                continue;            }            //<tt CLASS=replaceable><i> Now check for fields that are supposed to be numeric.</i></tt>            if (e.numeric || (e.min != null) || (e.max != null)) {                 var v = parseFloat(e.value);                if (isNaN(v) ||                     ((e.min != null) &amp;&amp; (v &lt; e.min)) ||                     ((e.max != null) &amp;&amp; (v &gt; e.max))) {                    errors += "- The field " + e.name + " must be a number";                    if (e.min != null)                         errors += " that is greater than " + e.min;                    if (e.max != null &amp;&amp; e.min != null)                         errors += " and less than " + e.max;                    else if (e.max != null)                        errors += " that is less than " + e.max;                    errors += ".\n";                }            }        }    }    //<tt CLASS=replaceable><i> Now, if there were any errors, then display the messages, and</i></tt>    //<tt CLASS=replaceable><i> return true to prevent the form from being submitted. Otherwise</i></tt>    //<tt CLASS=replaceable><i> return false.</i></tt>    if (!empty_fields &amp;&amp; !errors) return true;    msg  = "______________________________________________________\n\n"    msg += "The form was not submitted because of the following error(s).\n";    msg += "Please correct these error(s) and re-submit.\n";    msg += "______________________________________________________\n\n"    if (empty_fields) {        msg += "- The following required field(s) are empty:"                 + empty_fields + "\n";        if (errors) msg += "\n";    }    msg += errors;    alert(msg);    return false;}&lt;/SCRIPT&gt;&lt;!--<tt CLASS=replaceable><i>----------------------------------------------------------------------     Here's a sample form to test our verification with. Note that we     call verify() from the onSubmit() event handler, and return whatever     value it returns. Also note that we use the onSubmit() handler as     an opportunity to set properties on the form objects that verify()     will use in the verification process. ------------------------------------------------------------------------</i></tt>--&gt;&lt;FORM onSubmit="    this.firstname.optional = true;    this.phonenumber.optional = true;    this.zip.min = 0;    this.zip.max = 99999;    return verify(this);"&gt;First name: &lt;INPUT TYPE=text NAME="firstname"&gt;Last name: &lt;INPUT TYPE=text NAME="lastname"&gt;&lt;BR&gt;Address:&lt;BR&gt;&lt;TEXTAREA NAME="address" ROWS=4 COLS=40&gt;&lt;/TEXTAREA&gt;&lt;BR&gt;Zip Code: &lt;INPUT TYPE=text NAME="zip"&gt;&lt;BR&gt;Phone Number: &lt;INPUT TYPE=text NAME="phonenumber"&gt;&lt;BR&gt;&lt;INPUT TYPE=submit&gt;&lt;/FORM&gt;</PRE></DIV></DIV></DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch17_05.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="ch18_01.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>Naming Forms and Form Elements</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>Compatibility Techniques</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>