<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 18] 18.2 Compatibility with Non-JavaScript Browsers</TITLE><META NAME="author" CONTENT="David Flanagan"><META NAME="date" CONTENT="Thu Apr 24 13:37:53 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="JavaScript"><META NAME="title" CONTENT="JavaScript: The Definitive Guide"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif" ALT="Javascript: The Definitive Guide"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch18_01.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 18</b></td><td width=172 align=right valign=top><A HREF="ch18_03.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="ch18-SECT1-AUTOID.2">18.2 Compatibility with Non-JavaScript Browsers</A></h2><P CLASS=para><A NAME="CH18.BROW1"></A><A NAME="CH18.BROW2"></A>      When a user without a JavaScript-capable browser visits your web      pages, they obviously won't be able run your JavaScript programs.      Therefore, your JavaScript scripts should fail gracefully when      read into browsers that do not understand JavaScript. There are      two components to this. First, they must not simply format and      display your entire JavaScript program as if it was HTML text.      And second, they should display a message informing the visitor      that their browser cannot correctly handle the page. You can do      both of these things with some carefully placed comments.  <DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch18-SECT2-AUTOID.6">Hiding Scripts from Old Browsers</A></h3><P CLASS=para><A NAME="CH18.HID1"></A><A NAME="CH18.HID2"></A><A NAME="CH18.HID3"></A>	Web browsers that support JavaScript will execute the JavaScript	statements that appear between the	<tt CLASS=literal>&lt;SCRIPT&gt;</tt> and	<tt CLASS=literal>&lt;/SCRIPT&gt;</tt> tags. Browsers that don't	support JavaScript, but that recognize the	<tt CLASS=literal>&lt;SCRIPT&gt;</tt> tag, will simply ignore	everything between <tt CLASS=literal>&lt;SCRIPT&gt;</tt> and	<tt CLASS=literal>&lt;/SCRIPT&gt;</tt>. This is as it should be.	Other, older browsers, however (and there are a lot of them), do	not recognize the <tt CLASS=literal>&lt;SCRIPT&gt;</tt> and	<tt CLASS=literal>&lt;/SCRIPT&gt;</tt> tags, and so they ignore the	tags themselves, and treat all the JavaScript between them as	text to be displayed. Users of old browsers cannot run your	JavaScript programs, and this should be punishment	enough--they should not also have to look at your code!      <P CLASS=para><A NAME="CH18.COM1"></A><A NAME="CH18.COM2"></A><A NAME="CH18.COM3"></A><A NAME="CH18.COM4"></A>	In order to prevent this, you enclose the body of your	scripts within an HTML comment, using the format shown in <A HREF="ch18_02.htm#JSCRIPT-CH-COMPAT-EX-1">Example 18-1</A>.       <DIV CLASS=example><h4 CLASS=example><A CLASS="TITLE" NAME="JSCRIPT-CH-COMPAT-EX-1">Example 18-1: A Script Hidden from Old Browsers</A></h4><DIV CLASS=programlisting><P><PRE>1  &lt;SCRIPT LANGUAGE="JavaScript"&gt;2  &lt;!-- begin HTML comment that hides the script3          .4          . JavaScript statements go here5          .6  // end HTML comment that hides the script --&gt;7  &lt;/SCRIPT&gt;</PRE></DIV></DIV><P CLASS=para>	Browsers that do not understand the	<tt CLASS=literal>&lt;SCRIPT&gt;</tt> and	<tt CLASS=literal>&lt;/SCRIPT&gt;</tt> tags simply ignore	them. Thus, lines 1 and 7 in <A HREF="ch18_02.htm#JSCRIPT-CH-COMPAT-EX-1">Example 18-1</A> have no effect on these	browsers. They'll ignore lines 2 through 6 as well, because the	first four characters on line 2 begin an HTML comment, and the	last three characters on line 6 end that	comment--everything between is ignored by the HTML parser.      <P CLASS=para>	This script-hiding technique also works for browsers that	<I CLASS=emphasis>do</I> support JavaScript. Lines 1 and 7	indicate the beginning and ending of a script. As noted in <A HREF="ch02_01.htm">Chapter 2, <i>Lexical Structure</i></A>, JavaScript-enabled web browsers	recognize the HTML comment opening string	<tt CLASS=literal>&lt;!--</tt>, but treat it as a	single-line comment. Thus, a browser with JavaScript support	treats line 2 as a single-line comment. Similarly, line 6 begins	with the <tt CLASS=literal>//</tt> single-line comment string, so	that line is ignored by JavaScript-enabled browsers as	well. This leaves lines 3 through 5, which are executed as	JavaScript statements.      <P CLASS=para>	While it takes a little getting used to, this simple and elegant	mix of HTML and JavaScript comments do exactly what we	need--prevent JavaScript code from being displayed by browsers	that do not support JavaScript. You should get in the habit of	using these comments with all your scripts. The comments need	not be as verbose as this, of course. It is common to see	scripts that look like this:	<DIV CLASS=programlisting><P><PRE>&lt;SCRIPT LANGUAGE="JavaScript"&gt;&lt;!-- begin hiding  document.write(new Date());// end hiding --&gt;&lt;/SCRIPT&gt;</PRE></DIV>	It is also common to strip the English text out of the comments:	<DIV CLASS=programlisting><P><PRE>&lt;SCRIPT LANGUAGE="JavaScript"&gt; &lt;!--   document.write(new Date());// --&gt;&lt;/SCRIPT&gt;</PRE></DIV>	When writing very short scripts, you can even compress them by	removing some of the line breaks:	<DIV CLASS=programlisting><P><PRE>&lt;SCRIPT LANGUAGE="JavaScript"&gt; &lt;!--  document.write(new Date());// --&gt; &lt;/SCRIPT&gt;</PRE></DIV>	And even the following is legal:	<DIV CLASS=programlisting><P><PRE>&lt;SCRIPT LANGUAGE="JavaScript"&gt; &lt;!--  document.write(new Date()); // --&gt; &lt;/SCRIPT&gt;</PRE></DIV>	The only rule to hiding JavaScript code with an HTML comment is	that there must be a line break after the	<tt CLASS=literal>&lt;!--</tt> that opens the comment. Remember	that this functions as a JavaScript comment, and comments out	the remainder of the line. So the JavaScript interpreter won't	run any code that follows it.      <P CLASS=para>	This commenting technique has solved the problem of hiding our	JavaScript code from browsers that can't run it. The next step	in failing gracefully is to display a message to the user	letting them know that the page cannot run. The next	sub-section shows how to accomplish this.      </DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch18-SECT2-AUTOID.7">Notifying Users of Old Browsers</A></h3><P CLASS=para>	In order to inform users of old browsers that their browser	cannot successfully run the JavaScript programs on a web page we	need some technique for displaying a message on an old browser	but not displaying it on a JavaScript-capable browser. This	would be easy if we could use a JavaScript	<tt CLASS=literal>if</tt> statement and the	<tt CLASS=literal>document.write()</tt> method  to display the	message, but of course we can't do this if the browser doesn't	understand JavaScript in the first place. So instead we again	rely on HTML comments and take advantage of the fact that	JavaScript treats HTML comments differently than HTML does.      <P CLASS=para>	JavaScript treats the <tt CLASS=literal>&lt;!--</tt>	sequence that begins an HTML comment as a single-line comment	like <tt CLASS=literal>//</tt>. This means that the following text	is commented out in both HTML and in JavaScript:	<DIV CLASS=programlisting><P><PRE>&lt;!-- This text is commented out in HTML and JavaScript --&gt;</PRE></DIV>	JavaScript doesn't recognize the <tt CLASS=literal>--&gt;</tt>	closing comment and doesn't care where it occurs, however, so	the following text is commented out in JavaScript but not in HTML:	<DIV CLASS=programlisting><P><PRE>&lt;!-- --&gt; This text is commented out in JavaScript, but not in HTML.</PRE></DIV>	Herein lies the secret to displaying messages on non-JavaScript	browsers but not on JavaScript-enabled browsers.	<A HREF="ch18_02.htm#JSCRIPT-CH-COMPAT-EX-2">Example 18-2</A> shows what our	JavaScript scripts might look like with our JavaScript code	hidden from the HTML parser, as above, and with our	HTML messages hidden from the JavaScript interpreter.       <DIV CLASS=example><h4 CLASS=example><A CLASS="TITLE" NAME="JSCRIPT-CH-COMPAT-EX-2">Example 18-2: Displaying a Message on Non-JavaScript Browsers</A></h4><DIV CLASS=programlisting><P><PRE>&lt;SCRIPT LANGUAGE="JavaScript"&gt;&lt;!-- The message below will only display on non-JavaScript browsers --&gt;&lt;!-- --&gt; &lt;HR&gt;&lt;H1&gt;This Page Requires JavaScript&lt;/H1&gt;&lt;!-- --&gt; Your web browser is not capable of running JavaScript programs,&lt;!-- --&gt; so you will not be able to use this page. Please consider&lt;!-- --&gt; upgrading to the latest version of either Netscape Navigator&lt;!-- --&gt; or Microsoft Internet Explorer.&lt;!-- --&gt; &lt;HR&gt;&lt;!-- This HTML comment hides the script from non-JavaScript browsers        .        . JavaScript code goes here        .// This JavaScript comment is also the end of the HTML comment above. --&gt;&lt;/SCRIPT&gt;</PRE></DIV></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch18-SECT2-AUTOID.8">Hiding Scripts from Really Old Browsers</A></h3><P CLASS=para>	One flaw in the script-hiding scheme described above is that	some older web browsers recognize the	<tt CLASS=literal>&lt;!--</tt> string to begin a comment,	but then end the comment with a <tt CLASS=literal>&gt;</tt>	character alone, instead of looking for a complete	<tt CLASS=literal>--&gt;</tt> string. This means that if the	<tt CLASS=literal>&gt;</tt> character appears anywhere within your	JavaScript code, either in a string, or as one of the	<tt CLASS=literal>&gt;</tt>, <tt CLASS=literal>&gt;=</tt>,	<tt CLASS=literal>&gt;&gt;</tt> or <tt CLASS=literal>&gt;&gt;&gt;</tt>	operators, then the HTML parser for these older browsers will	close the comment, and will treat the rest of your script as	HTML text to be formatted and displayed.      <P CLASS=para>	There are two possible solutions to this problem. The first is	to ignore it. Maybe being forced to look at your JavaScript code	will encourage users of these really old browsers to upgrade to	one that supports the correct HTML comment syntax!	Unfortunately, the Lynx browser, prior to version 2.6, is one of	the ones that has the problem.  This browser for text	only terminals fills an important niche, and there are quite a	few copies in use.  In version 2.6, comment syntax is no longer	an issue for Lynx, because it now correctly recognizes the	<tt CLASS=literal>&lt;SCRIPT&gt;</tt> tag and ignores anything	between it and <tt CLASS=literal>&lt;/SCRIPT&gt;</tt>.      <P CLASS=para>	The only other solution to this problem is somewhat tedious and	not entirely satisfactory. Since the problem is with the "&gt;"	character appearing in your JavaScript code, the solution is to	make sure that that character does not appear, at least not in	its unescaped form. You can do this with the following rules:      <P><UL CLASS=itemizedlist><li CLASS=listitem>	    Anywhere <tt CLASS=literal>&gt;</tt> appears within	    a string, replace it with the characters	    <tt CLASS=literal>\076</tt>--this tells JavaScript	    to use the character with the same encoding as the	    <tt CLASS=literal>&gt;</tt> character.	  <P><li CLASS=listitem>	    Replace expressions of the form <tt CLASS=literal>(a &gt;	      b)</tt> with the equivalent <tt CLASS=literal>(b &lt;=	      a)</tt>.	  <P><li CLASS=listitem>	    Replace expressions of the form <tt CLASS=literal>(a &gt;=	      b)</tt> with the equivalent <tt CLASS=literal>(b &lt;	      a)</tt>.	  <P><li CLASS=listitem>	    Replace the <tt CLASS=literal>&gt;&gt;</tt> and	    <tt CLASS=literal>&gt;&gt;&gt;</tt> operators with division by	    the appropriate power of 2, and with appropriate sign	    manipulation. Fortunately, these operators are rarely used;	    if you ever need to use them, you'll understand them well	    enough to figure out the correct replacement.	  <P><li CLASS=listitem>	    Do not try to replace the <tt CLASS=literal>&gt;</tt> character	    with the HTML escape <tt CLASS=literal>&amp;gt;</tt>. The HTML	    parser recognizes this string, but the JavaScript	    interpreter doesn't.	  <P></UL></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch18-SECT2-AUTOID.9">Falling Back to a Non-JavaScript Page</A></h3><P CLASS=para>	Sometimes, if a browser cannot run the scripts in one web page,	you'd like to have it load some other page that does not use	JavaScript. This page might be a CGI-based version of your	program, for example, or it might simply contain static HTML	content, formatted in a way that does not rely on embedded	JavaScript.      <P CLASS=para>	Loading an alternate page would be easy if we could use	JavaScript, but obviously, we can't. What we can do, however,	instead of "falling back" on a non-JavaScript page is turn	things around and "skip ahead" to a JavaScript page if	JavaScript <I CLASS=emphasis>is</I> supported. That is, we load	the non-JavaScript page by default. This page will actually	contain a short script. If the script runs, then JavaScript is	supported, and the script uses the Location object to read	in the JavaScript version of the page. <A HREF="ch18_02.htm#JSCRIPT-CH-COMPAT-EX-3">Example 18-3</A> shows an example HTML document	using this technique.      <DIV CLASS=example><h4 CLASS=example><A CLASS="TITLE" NAME="JSCRIPT-CH-COMPAT-EX-3">Example 18-3: Loading a JavaScript-Based Page Only if JavaScript Is Supported</A></h4><DIV CLASS=programlisting><P><PRE>&lt;HEAD&gt;&lt;SCRIPT LANGUAGE="JavaScript"&gt;    &lt;!-- hide scriptlocation = "my_js_home_page.html";      // stop hiding --&gt;&lt;/SCRIPT&gt;&lt;TITLE&gt;My Home Page (Non-JavaScript Version)&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;          .        . Arbitrary, non-JavaScript HTML goes here         .&lt;/BODY&gt;</PRE></DIV></DIV><P CLASS=para>	You can even automate this process. If every non-JavaScript	web page in a directory has a JavaScript equivalent in a	subdirectory named "js/", then you might use code like this at	the top of a non-JavaScript page to load in the equivalent when	JavaScript is supported:	<DIV CLASS=programlisting><P><PRE>&lt;SCRIPT&gt;                        &lt;!-- hide script  var path = location.path;  var filename = path.substring(path.lastIndexOf("/")+1, path.length);  location = "js/" + filename;  // stop hiding --&gt;&lt;/SCRIPT&gt;</PRE></DIV>      <P CLASS=para>	There is one shortcoming to the technique shown here. If the	user loads a non-JavaScript page in a JavaScript-capable	browser, the short initial script will take them to the full	JavaScript page. This is what we want. But when they click on	the browser's <b>Back</b>, they'll move	to the non-JavaScript page, and the script there will send them	forward again!  In effect, this technique breaks the <b>Back</b> button. With Navigator 3.0, the	workaround is to use the <tt CLASS=literal>replace()</tt> method of	the Location object rather than assigning directly to the	<tt CLASS=literal>location</tt> property. So you should replace the	code above with this:	<DIV CLASS=programlisting><P><PRE>&lt;SCRIPT&gt;                        &lt;!-- hide script  var path = location.path;  var filename = "js/" + path.substring(path.lastIndexOf("/")+1, path.length);  if (location.replace) location.replace(filename)  else location = filename;     // stop hiding --&gt;&lt;/SCRIPT&gt;</PRE></DIV>      </DIV></DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch18_01.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="ch18_03.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>Platform, Browser, and Version- Specific Compatibility</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>Compatibility with JavaScript 1.0 Browsers</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>