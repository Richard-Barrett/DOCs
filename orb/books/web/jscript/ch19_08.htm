<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 19] 19.8 Summary</TITLE><META NAME="author" CONTENT="David Flanagan"><META NAME="date" CONTENT="Wed Apr 23 18:25:08 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="JavaScript"><META NAME="title" CONTENT="JavaScript: The Definitive Guide"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif" ALT="Javascript: The Definitive Guide"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch19_07.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 19</b></td><td width=172 align=right valign=top><A HREF="ch20_01.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="ch19-SECT1-AUTOID.8">19.8 Summary</A></h2><P CLASS=para>      LiveConnect allows JavaScript and Java to cooperate through two      fairly separate and symmetrical systems. In JavaScript, the      JavaPackage, JavaClass, JavaObject, JavaArray, and JavaMethod      objects all allow JavaScript to read and write Java properties      and arrays and to invoke Java methods. In Java, the      <I CLASS=emphasis>netscape.javascript.JSObject</I> class allows      Java programs to read and write properties of JavaScript objects      and elements of JavaScript arrays, to invoke JavaScript      functions, and evaluate strings of JavaScript code. The      following two subsections summarize these two halves of      LiveConnect.    <DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch19-SECT2-AUTOID.17">JavaScript to Java</A></h3><UL CLASS=itemizedlist><li CLASS=listitem> The JavaClass, JavaObject, JavaArray, and	    JavaMethod objects allow transparent communication between	    JavaScript and Java--they handle data conversion and	    all the tricky behind-the-scenes work. <P><li CLASS=listitem> The data conversions performed when JavaScript	    reads and writes Java values are illustrated in <A HREF="ch19_03.htm#JSCRIPT-CH-LIVECONN-FIG-2">Figure 19-2</A> and <A HREF="ch19_03.htm#JSCRIPT-CH-LIVECONN-FIG-3">Figure 19-3</A>. <P><li CLASS=listitem> Most Java objects are converted to JavaScript	    JavaObject objects. JavaObjects behave differently than	    other JavaScript objects, and need to be handled with care.	    In particular, JavaObjects are converted to numeric, Boolean	    and string values differently than other JavaScript types	    are. <P><li CLASS=listitem> You can use the JavaPackage objects referred to	    by the Window properties <tt CLASS=literal>Packages</tt>,	    <tt CLASS=literal>java</tt>, <tt CLASS=literal>sun</tt>, and	    <tt CLASS=literal>netscape</tt> to obtain a JavaClass object for	    any of the standard classes built in to Navigator. The	    JavaClass object allows you to read and write static	    properties and invoke static methods of a class.	    <P><li CLASS=listitem> You can use the <tt CLASS=literal>new</tt> operator	    on a JavaClass object to create a new Java object and a	    JavaScript JavaObject wrapper for it. You can use this	    JavaObject to read and write instance fields and invoke	    instance methods. <P><li CLASS=listitem> You can use the	    <tt CLASS=literal>getClass()</tt> function to obtain a	    JavaClass object corresponding to the Java class of a	    JavaObject object. <P><li CLASS=listitem> You can "script" Java directly from JavaScript	    simply by working with the predefined classes. But this	    technique is limited--no significant user interaction	    with a "scripted" Java program is possible.	    <P><li CLASS=listitem> You can also use the	    <tt CLASS=literal>document.applets[]</tt> array and the	    JavaObject objects it contains to interact with applets.	    Manipulating the fields and methods of a custom-written	    applet allows a richer set of possibilities than simply	    scripting with the basic Java classes. <P><li CLASS=listitem> You can use the	    <tt CLASS=literal>document.embeds[]</tt> array and the	    JavaObjects it contains to interact with the plug-ins that	    are displaying embedded data in the document. You can	    control plug-ins through vendor-specific Java APIs.	    <P></UL></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch19-SECT2-AUTOID.18">Java to JavaScript</A></h3><UL CLASS=itemizedlist><li CLASS=listitem>	    The <I CLASS=emphasis>netscape.javascript.JSObject</I>	    class is the Java equivalent of the JavaScript JavaObject	    class. It handles data conversion and all the	    behind-the-scenes work to allow Java code to communicate	    with JavaScript.	  <P><li CLASS=listitem>	    The data conversions performed when Java reads and writes	    JavaScript data are illustrated in	    <A HREF="ch19_06.htm#JSCRIPT-CH-LIVECONN-FIG-6">Figure 19-5</A> and	    <A HREF="ch19_06.htm#JSCRIPT-CH-LIVECONN-FIG-7">Figure 19-6</A>.	  <P><li CLASS=listitem>	    The <tt CLASS=literal>getMember()</tt> and	    <tt CLASS=literal>getSlot()</tt> methods of a JSObject allow	    Java to read JavaScript object properties and array elements.	  <P><li CLASS=listitem>	    The <tt CLASS=literal>setMember()</tt> and	    <tt CLASS=literal>setSlot()</tt> methods allow Java to set the	    value of JavaScript object properties and array elements.	  <P><li CLASS=listitem>	    The <tt CLASS=literal>call()</tt> method of a JSObject allows	    Java to invoke JavaScript functions.	  <P><li CLASS=listitem>	    The <tt CLASS=literal>eval()</tt> method of a JSObject allows	    Java to pass an arbitrary string of JavaScript code to the	    JavaScript interpreter for execution. This method is often	    easier to use than the other JSObject methods.	  <P><li CLASS=listitem> An applet that uses the JSObject class must	    import it with an <tt CLASS=literal>import</tt> statement. To	    compile the applet, the <tt CLASS=literal>CLASSPATH</tt>	    environment variable must be set to include the Java classes	    supplied by Netscape.	  <P><li CLASS=listitem>	    In order to interact with JavaScript, an applet must be	    embedded in an HTML document with an	    <tt CLASS=literal>&lt;APPLET&gt;</tt> tag that includes the	    <tt CLASS=literal>MAYSCRIPT</tt> attribute.	  <P></UL></DIV></DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch19_07.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="ch20_01.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>Working with Java in Internet Explorer</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>JavaScript Security</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>