<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 1] 1.3 A Grade Example</TITLE><META NAME="author" CONTENT="Larry Wall, Tom Christiansen, and Randal Schwartz"><META NAME="date" CONTENT="Mon Mar 17 12:59:18 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="Perl"><META NAME="title" CONTENT="Programming Perl, Second Edition"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif"     ALT="Programming Perl, Second Edition"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch01_02.htm"><IMG SRC="gifs/txtpreva.gif"     ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 1</b></td><td width=172 align=right valign=top><A HREF="ch01_04.htm"><IMG SRC="gifs/txtnexta.gif"     ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="PERL2-CH-1-SECT-3">1.3 A Grade Example</A></h2><P CLASS=para>Suppose you had a set of scores for each member of a class you areteaching.  You'd like a combined list of all the grades for eachstudent, plus their average score.  You have a text file (imaginativelynamed <I CLASS=emphasis>grades</I>) that looks like this:<P CLASS=para><DIV CLASS=programlisting><P><PRE>No&euml;l 25Ben 76Clementine 49Norm 66Chris 92Doug 42Carol 25Ben 12Clementine 0Norm 66...</PRE></DIV><P CLASS=para>You can use the following script to gather all their scores together,determine each student's average, and print them all out in alphabeticalorder.  This program assumes, rather naively, that you don't have twoCarols in your class.  That is, if there is a second entry for Carol, theprogram will assume it's just another score for the first Carol (notto be confused with the first No&euml;l).<P CLASS=para>By the way, the line numbers are not part of the program, any otherresemblances to BASIC notwithstanding.<P CLASS=para><DIV CLASS=programlisting><P><PRE> 1  #!/usr/bin/perl 2   3  open(GRADES, "grades") or die "Can't open grades: $!\n"; 4  while ($line = &lt;GRADES&gt;) { 5      ($student, $grade) = split(" ", $line); 6      $grades{$student} .= $grade . " "; 7  } 8  9  foreach $student (sort keys %grades) {10      $scores = 0;11      $total = 0;    12      @grades = split(" ", $grades{$student});13      foreach $grade (@grades) {14          $total += $grade;15          $scores++;16      }17      $average = $total / $scores;18      print "$student: $grades{$student}\tAverage: $average\n";19  }</PRE></DIV><P CLASS=para>Now before your eyes cross permanently, we'd better point out that thisexample demonstrates a lot of what we've covered so far, plus quite abit more that we'll explain presently.  But if you let your eyes go just alittle out of focus, you may start to see some interesting patterns.Take some wild guesses now as to what's going on, and then later on we'lltell you if you're right.<P CLASS=para>We'd tell you to try running it, but you may not know how yet.<DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="PERL2-CH-1-SECT-3.1">How to Do It</A></h3><P CLASS=para><A NAME="CH01.HOW"></A>Gee, right about now you're probably wondering how to run a Perlprogram.  The short answer is that you feed it to the Perl languageinterpreter program, which coincidentally happens to be named <I CLASS=emphasis>perl</I>(note the case distinction).  The longer answer starts out like this:There's More Than One Way To Do It.[13]<blockquote class=footnote><P CLASS=para>[13] That's the Perl Slogan, and you'll get tired of hearing it, unlessyou're the Local Expert, in which case you'll get tired of saying it.Sometimes it's shortened to TMTOWTDI, pronounced "tim-toady".  Butyou can pronounce it however you like.  After all, TMTOWTDI.</blockquote><P CLASS=para>The first way to invoke <I CLASS=emphasis>perl</I> (and the way most likely to work on anyoperating system) is to simply call <I CLASS=emphasis>perl</I> explicitly from the commandline.  If you are on a version of UNIX and you are doing somethingfairly simple, you can use the <B>-e</B> switch (<tt CLASS=literal>%</tt> in thefollowing example represents a standardshell prompt, so don't type it):<P CLASS=para><DIV CLASS=programlisting><P><PRE>% perl -e 'print "Hello, world!\n";'</PRE></DIV><P CLASS=para>On other operating systems, you may have to fiddle with the quotes some.But the basic principle is the same: you're trying to cram everythingPerl needs to know into 80 columns or so.[14]<blockquote class=footnote><P CLASS=para>[14] These types of scripts are often referred to as "one-liners".  If youever end up hanging out with other Perl programmers, you'll find thatsome of us are quite fond of creating intricate one-liners.  Perlhas occasionally been maligned as a write-only language because ofthese shenanigans.</blockquote><P CLASS=para>For longer scripts, you can use your favorite text editor (or any othertext editor) to put all your commands into a file and then, presumingyou named the script <I CLASS=emphasis>gradation</I> (not to be confused with graduation),you'd say:<P CLASS=para><DIV CLASS=programlisting><P><PRE>% perl gradation</PRE></DIV><P CLASS=para>You're still invoking the Perl interpreter explicitly, but at least youdon't have to put everything on the command line every time.  And youdon't have to fiddle with quotes to keep the shell happy.<P CLASS=para>The most convenient way to invoke a script is just to name itdirectly (or click on it), and let the operating system find theinterpreter for you.  On some systems, there may be ways of associatingvarious file extensions or directories with a particular application.On those systems, you should do whatever it is you do to associate thePerl script with the Perl interpreter.  On UNIX systems that support the<tt CLASS=literal>#!</tt> "shebang" notation (and most UNIX systems do, nowadays), you canmake the first line of your script be magical, so the operating systemwill know which program to run.  Put a line resembling[15]line 1 of our example into your program:<blockquote class=footnote><P CLASS=para>[15] If <I CLASS=emphasis>perl</I> isn't in <I CLASS=emphasis>/usr/bin</I>, you'll have to change the<tt CLASS=literal>#!</tt> line accordingly.</blockquote><P CLASS=para><DIV CLASS=programlisting><P><PRE>#!/usr/bin/perl</PRE></DIV><P CLASS=para>Then all you have to say is<P CLASS=para><DIV CLASS=programlisting><P><PRE>% gradation</PRE></DIV><P CLASS=para>Of course, this didn't work because you forgot to make sure the scriptwas executable (see the manpage for <I CLASS=emphasis>chmod</I> (1))[16]and in your PATH.  If it isn't in your PATH, you'll have to provide acomplete filename so that the operating system knows how to find your script.Something like<blockquote class=footnote><P CLASS=para>[16] Although Perl has its share of funny notations, this one must be blamedon UNIX.  <I CLASS=emphasis>chmod</I> (1) means you should refer to the manpage for the<I CLASS=emphasis>chmod</I> command in section one of your UNIX manual.  If you type either<tt CLASS=literal>man 1 chmod</tt> or <tt CLASS=literal>man -s 1 chmod</tt> (depending on your flavor of UNIX),you should be able to find out all the interesting information yoursystem knows about the command <I CLASS=emphasis>chmod</I>.  (Of course, if your flavor ofUNIX happens to be "Not UNIX!" then you'll need to refer to your system'sdocumentation for the equivalent command, presuming you are so blessed.Your chief consolation is that, if an equivalent command does exist, itwill have a much better name than <I CLASS=emphasis>chmod</I>.)</blockquote><P CLASS=para><DIV CLASS=programlisting><P><PRE>% ../bin/gradation</PRE></DIV><P CLASS=para>Finally, if you are unfortunate enough to be on an ancient UNIX systemthat doesn't support the magic <tt CLASS=literal>#!</tt> line, or if the path to your interpreteris longer than 32 characters (a built-in limit on many systems), you may beable to work around it like this:<P CLASS=para><DIV CLASS=programlisting><P><PRE>#!/bin/sh -- # perl, to stop loopingeval 'exec /usr/bin/perl -S $0 ${1+"$@"}'    if 0;</PRE></DIV><P CLASS=para>Some operating systems may require variants on this to deal with<I CLASS=emphasis>/bin/csh</I>, <I CLASS=emphasis>DCL</I>, <I CLASS=emphasis>COMMAND.COM</I>, or whatever happens to be yourdefault command interpreter.  Ask your Local Expert.<P CLASS=para>Throughout this book, we'll just use <tt CLASS=literal>#!/usr/bin/perl</tt> to represent allthese notions and notations, but you'll know what we really mean by it.<P CLASS=para>A random clue: when you write a test script, don't call your script<I CLASS=emphasis>test</I>.  UNIX systems have a built-in test command, which will likely beexecuted instead of your script.  Try <I CLASS=emphasis>try</I> instead.<P CLASS=para>A not-so-random clue: while learning Perl, and even after youthink you know what you're doing, we suggest using the <B>-w</B> option,especially during development.  This option will turn on all sorts ofuseful and interesting warning messages, not necessarily in that order.You can put the <B>-w</B> switch on the shebang line, like this:<P CLASS=para><DIV CLASS=programlisting><P><PRE>#!/usr/bin/perl -w</PRE></DIV><P CLASS=para>Now that you know how to run your own Perl program (not to be confused withthe <I CLASS=emphasis>perl</I> program), let's get back to our example.</DIV></DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch01_02.htm"><IMG SRC="gifs/txtpreva.gif"     ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="ch01_04.htm"><IMG SRC="gifs/txtnexta.gif"     ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>Natural and Artificial Languages</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>Filehandles</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>