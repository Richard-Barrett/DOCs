<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 1] 1.5 Operators</TITLE><META NAME="author" CONTENT="Larry Wall, Tom Christiansen, and Randal Schwartz"><META NAME="date" CONTENT="Mon Mar 17 12:59:21 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="Perl"><META NAME="title" CONTENT="Programming Perl, Second Edition"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif"     ALT="Programming Perl, Second Edition"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch01_04.htm"><IMG SRC="gifs/txtpreva.gif"     ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 1</b></td><td width=172 align=right valign=top><A HREF="ch01_06.htm"><IMG SRC="gifs/txtnexta.gif"     ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="PERL2-CH-1-SECT-5">1.5 Operators</A></h2><P CLASS=para><A NAME="CH01.OP"></A>As we alluded to earlier, Perl is also a mathematical language.  This istrue at several levels, from low-level bitwise logical operations, upthrough number and set manipulation, on up to larger predicates andabstractions of various sorts.  And as we all know from studying math inschool, mathematicians love strange symbols.  What's worse, computerscientists have come up with their own versions of these strangesymbols.  Perl has a number of these strange symbols too, but takeheart, most are borrowed directly from C, FORTRAN, <I CLASS=emphasis>sed</I> (1) or<I CLASS=emphasis>awk</I> (1), sothey'll at least be familiar to users of those languages.<P CLASS=para>Perl's built-in operators may be classified by number of operands intounary, binary, and trinary operators.  They may be classified by whetherthey're infix operators or prefix operators.  They may also beclassified by the kinds of objects they work with, such as numbers,strings, or files.  Later, we'll give you a table of all the operators,but here are some to get you started.<DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="PERL2-CH-1-SECT-5.1">Arithmetic Operators</A></h3><P CLASS=para>Arithmetic operators do exactly what you would expect from learning themin school.  They perform some sort of mathematical function on numbers.<P><DIV CLASS=table><TABLE><CAPTION><A CLASS="TITLE" NAME="PERL2-CH-1-TAB-2">Table 1-2: Some Binary Arithmetic Operators</A></CAPTION><TR CLASS=row><TH ALIGN="left">Example</TH><TH ALIGN="left">Name</TH><TH ALIGN="left">Result</TH></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>$a + $b</tt></TD><TD ALIGN="left">Addition</TD><TD ALIGN="left">Sum of <tt CLASS=literal>$a</tt> and <tt CLASS=literal>$b</tt></TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>$a * $b</tt></TD><TD ALIGN="left">Multiplication</TD><TD ALIGN="left">Product of <tt CLASS=literal>$a</tt> and <tt CLASS=literal>$b</tt></TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>$a % $b</tt></TD><TD ALIGN="left">Modulus</TD><TD ALIGN="left">Remainder of <tt CLASS=literal>$a</tt> divided by <tt CLASS=literal>$b</tt></TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>$a ** $b</tt></TD><TD ALIGN="left">Exponentiation</TD><TD ALIGN="left"><tt CLASS=literal>$a</tt> to the power of <tt CLASS=literal>$b</tt></TD></TR></TABLE><P></DIV><P CLASS=para>Yes, we left subtraction and division out of <A HREF="ch01_05.htm#PERL2-CH-1-TAB-2">Table 1.2</A>.  But we suspectyou can figure out how they should work.  Try them and see if you'reright.  (Or cheat and look in the index.)  Arithmetic operators areevaluated in the order your math teacher taught you (exponentiation before multiplication, and multiplication beforeaddition).  You can always use parentheses to make it come out differently.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="PERL2-CH-1-SECT-5.2">String Operators</A></h3><P CLASS=para>There is also an "addition" operator for strings that does concatenation.Unlike some languages that confuse this with numeric addition, Perl defines aseparate operator (<tt CLASS=literal>.</tt>) for string concatenation:<P CLASS=para><DIV CLASS=programlisting><P><PRE>$a = 123;$b = 456;print $a + $b;     # prints 579print $a . $b;     # prints 123456</PRE></DIV><P CLASS=para>There's also a "multiply" operation for strings, also called the <I CLASS=emphasis>repeat</I>operator.  Again, it's a separate operator (<B>x</B>) to keep it distinctfrom numeric multiplication:<P CLASS=para><DIV CLASS=programlisting><P><PRE>$a = 123;$b = 3;print $a * $b;     # prints 369print $a x $b;     # prints 123123123</PRE></DIV><P CLASS=para>These string operators bind as tightly as their correspondingarithmetic operators.  The repeat operator is a bit unusual in taking astring for its left argument but a number for its right argument.  Notealso how Perl is automatically converting from numbers to strings. You could have put all the literal numbers above in quotes, and itwould still have produced the same output.  Internally though, it wouldhave been converting in the opposite direction (that is, from strings tonumbers).<P CLASS=para>A couple more things to think about.  String concatenation isalso implied by the interpolation that happens in double-quoted strings.When you print out a list of values, you're also effectively concatenatingstrings.  So the following three statements produce the same output:<P CLASS=para><DIV CLASS=programlisting><P><PRE>print $a . ' is equal to ' . $b . "\n";    # dot operatorprint $a, ' is equal to ', $b, "\n";       # listprint "$a is equal to $b\n";               # interpolation</PRE></DIV><P CLASS=para>Which of these you use in any particular situation is entirely up to you.<P CLASS=para>The <B>x</B> operator may seem relativelyworthless at first glance, but it is quite useful at times, especiallyfor things like this:<P CLASS=para><DIV CLASS=programlisting><P><PRE>print "-" x $scrwid, "\n";</PRE></DIV><P CLASS=para>which draws a line across your screen, presuming your screen widthis in <tt CLASS=literal>$scrwid</tt>.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="PERL2-CH-1-SECT-5.3">Assignment Operators</A></h3><P CLASS=para>Although it's not exactly a mathematical operator, we've already madeextensive use of the simple assignment operator, <tt CLASS=literal>=</tt>.  Try to rememberthat <tt CLASS=literal>=</tt> means "gets set to" rather than "equals".  (There is also amathematical equality operator <tt CLASS=literal>==</tt> that means "equals", and if youstart out thinking about the difference between them now, you'll saveyourself a lot of headache later.)<P CLASS=para>Like the operators above, assignment operators are binary infixoperators, which means they have an operand on either side of theoperator.  The right operand can be any expression you like, but theleft operand must be a valid <I CLASS=emphasis>lvalue</I> (which, when translated toEnglish, means a valid storage location like a variable, or a locationin an array).  The most common assignment operator is simple assignment.It determines the value of the expression on its right side, and setsthe variable on the left side to that value:<P CLASS=para><DIV CLASS=programlisting><P><PRE>$a = $b;$a = $b + 5;$a = $a * 3;</PRE></DIV><P CLASS=para>Notice the last assignment refers to the same variable twice; oncefor the computation, once for the assignment.  There's nothing wrong with that, but it's a common enough operation that there's ashortcut for it (borrowed from C).  If you say:<DIV CLASS=programlisting><P><PRE>lvalue operator= expression</PRE></DIV><P CLASS=para>it is evaluated as if it were:<DIV CLASS=programlisting><P><PRE>lvalue = lvalue operator expression</PRE></DIV><P CLASS=para>except that the lvalue is not computed twice.  (This only makes adifference if evaluation of the lvalue has side effects.  But when it<I CLASS=emphasis>does</I> make a difference, it usually does what you want.  So don't sweat it.)<P CLASS=para>So, for example, you could write the above as:<P CLASS=para><DIV CLASS=programlisting><P><PRE>$a *= 3;</PRE></DIV><P CLASS=para>which reads "multiply <tt CLASS=literal>$a</tt> by 3".  You can do this with almost anybinary operator in Perl, even some that you can't do it with in C:<P CLASS=para><DIV CLASS=programlisting><P><PRE>$line .= "\n";  # Append newline to $line.$fill x= 80;    # Make string $fill into 80 repeats of itself.$val ||= "2";   # Set $val to 2 if it isn't already set.</PRE></DIV><P CLASS=para>Line 6 of our grade example contains two string concatenations, oneof which is an assignment operator.  And line 14 contains a <tt CLASS=literal>+=</tt>.<P CLASS=para>Regardless of which kind of assignment operator you use, the final valueis returned as the value of the assignment as a whole.  (This is unlike,say, Pascal, in which assignment is a statement and has no value.)This is why we could say:<P CLASS=para><DIV CLASS=programlisting><P><PRE>chop($number = &lt;STDIN&gt;);</PRE></DIV><P CLASS=para>and have it chop the final value of <tt CLASS=literal>$number</tt>.  You also frequently seeassignment as the condition of a <B>while</B> loop, as in line 4 of our gradeexample.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="PERL2-CH-1-SECT-5.4">Autoincrement and Autodecrement Operators</A></h3><P CLASS=para>As if <tt CLASS=literal>$variable += 1</tt> weren't short enough, Perl borrows from Can even shorter way to increment a variable.  The autoincrement andautodecrement operators simply add (or subtract) one from the value of thevariable.  They can be placed on either side of the variable, depending onwhen you want them to be evaluated (see <A HREF="ch01_05.htm#PERL2-CH-1-TAB-3">Table 1.3</A>).<P><DIV CLASS=table><TABLE><CAPTION><A CLASS="TITLE" NAME="PERL2-CH-1-TAB-3">Table 1-3: Unary Arithmetic Operators</A></CAPTION><TR CLASS=row><TH ALIGN="left">Example</TH><TH ALIGN="left">Name</TH><TH ALIGN="left">Result</TH></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>+ +$a, $a+ +</tt></TD><TD ALIGN="left">Autoincrement</TD><TD ALIGN="left">Add 1 to <tt CLASS=literal>$a</tt></TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>- -$a, $a- -</tt></TD><TD ALIGN="left">Autodecrement</TD><TD ALIGN="left">Subtract 1 from <tt CLASS=literal>$a</tt></TD></TR></TABLE><P></DIV><P CLASS=para>If you place one of the auto operators before the variable, it is known asa pre-incremented (pre-decremented) variable.  Its value will be changedbefore it is referenced.  If it is placed after the variable, it is knownas a post-incremented (post-decremented) variable and its value is changedafter it is used.  For example:<P CLASS=para><DIV CLASS=programlisting><P><PRE>$a = 5;        # $a is assigned 5$b = ++$a;     # $b is assigned the incremented value of $a, 6$c = $a--;     # $c is assigned 6, then $a is decremented to 5</PRE></DIV><P CLASS=para>Line 15 of our grade example increments the number of scores by one, sothat we'll know how many scores we're averaging the grade over.  It usesa post-increment operator (<tt CLASS=literal>$scores++</tt>), but in this case it doesn'tmatter, since the expression is in a void context, which is just a funnyway of saying that the expression is being evaluated only for the sideeffect of incrementing the variable.  The value returned is being thrownaway.[21]<blockquote class=footnote><P CLASS=para>[21] The optimizer will notice this and optimize thepost-increment into a pre-increment, because that's a little moreefficient to execute.  (You didn't need to know that, but wehoped it would cheer you up.)</blockquote></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="PERL2-CH-1-SECT-5.5">Logical Operators</A></h3><P CLASS=para>Logical operators, also known as "short-circuit" operators, allow theprogram to make decisions based on multiple criteria, without usingnested conditionals.  They are known as short-circuit because they skipevaluating their right argument if evaluating their left argument issufficient to determine the overall value.<P CLASS=para>Perl actually has two sets of logical operators, a crufty old setborrowed from C, and a nifty new set of ultralow-precedence operatorsthat parse more like people expect them to parse, and are also easier toread.  (Once they're parsed, they behave identically though.) See<A HREF="ch01_05.htm#PERL2-CH-1-TAB-4">Table 1.4</A> for examples of logical operators.<P><DIV CLASS=table><TABLE><CAPTION><A CLASS="TITLE" NAME="PERL2-CH-1-TAB-4">Table 1-4: Logical Operators</A></CAPTION><TR CLASS=row><TH ALIGN="left">Example</TH><TH ALIGN="left">Name</TH><TH ALIGN="left">Result</TH></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>$a &amp;&amp; $b</tt></TD><TD ALIGN="left">And</TD><TD ALIGN="left"><P CLASS=para><tt CLASS=literal>$a</tt> if <tt CLASS=literal>$a</tt> is false, <tt CLASS=literal>$b</tt> otherwise</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>$a || $b</tt></TD><TD ALIGN="left">Or</TD><TD ALIGN="left"><P CLASS=para><tt CLASS=literal>$a</tt> if <tt CLASS=literal>$a</tt> is true, <tt CLASS=literal>$b</tt> otherwise</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>! $a</tt></TD><TD ALIGN="left">Not</TD><TD ALIGN="left">True if <tt CLASS=literal>$a</tt> is not true</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>$a and $b</tt></TD><TD ALIGN="left">And</TD><TD ALIGN="left"><P CLASS=para><tt CLASS=literal>$a</tt> if <tt CLASS=literal>$a</tt> is false,<tt CLASS=literal>$b</tt> otherwise</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>$a or $b</tt></TD><TD ALIGN="left">Or</TD><TD ALIGN="left"><P CLASS=para><tt CLASS=literal>$a</tt> if <tt CLASS=literal>$a</tt> is true, <tt CLASS=literal>$b</tt> otherwise</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>not $a</tt></TD><TD ALIGN="left">Not</TD><TD ALIGN="left">True if <tt CLASS=literal>$a</tt> is not true</TD></TR></TABLE><P></DIV><P CLASS=para>Since the logical operators "short circuit" the way they do, they'reoften used to conditionally execute code.  The following line (from ourgrade example) tries to open the file <I CLASS=emphasis>grades</I>.<DIV CLASS=programlisting><P><PRE>open(GRADES, "grades") or die "Can't open file grades: $!\n";</PRE></DIV><P CLASS=para>If it opens the file,it will jump to the next line of the program.  If it can't open thefile, it will provide us with an error message and then stop execution.<P CLASS=para>Literally, the above message means "Open <I CLASS=emphasis>grades</I> or die!"  Besides being another example ofnatural language, the short-circuit operators preserve the visual flow.Important actions are listed down the left side of the screen, andsecondary actions are hidden off to the right.  (The <B>$!</B> variablecontains the error message returned by the operating system--see"Special Variables" in <A HREF="ch02_01.htm">Chapter 2, <i>The Gory Details</i></A>).Of course, these logical operators can also be used within the moretraditional kinds of conditional constructs, such as the <B>if</B> and <B>while</B>statements.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="PERL2-CH-1-SECT-5.6">Comparison Operators</A></h3><P CLASS=para>Comparison, or relational, operators tell us how two scalar values(numbers or strings) relate to each other.  There are two sets ofoperators--one does numeric comparison and the otherdoes string comparison.  (In either case, the arguments will be "coerced"to have the appropriate type first.)  <A HREF="ch01_05.htm#PERL2-CH-1-TAB-5">Table 1.5</A> assumes <tt CLASS=literal>$a</tt>and <tt CLASS=literal>$b</tt> are the left and right arguments, respectively.<P><DIV CLASS=table><TABLE><CAPTION><A CLASS="TITLE" NAME="PERL2-CH-1-TAB-5">Table 1-5: Some Numeric and String Comparison Operators</A></CAPTION><TR CLASS=row><TH ALIGN="left">Comparison</TH><TH ALIGN="left">Numeric</TH><TH ALIGN="left">String</TH><TH ALIGN="left">Return Value</TH></TR><TR CLASS=row><TD ALIGN="left">Equal</TD><TD ALIGN="left"><tt CLASS=literal>==</tt></TD><TD ALIGN="left"><tt CLASS=literal>eq</tt></TD><TD ALIGN="left">True if <tt CLASS=literal>$a</tt> is equal to <tt CLASS=literal>$b</tt></TD></TR><TR CLASS=row><TD ALIGN="left">Not equal</TD><TD ALIGN="left"><tt CLASS=literal>!=</tt></TD><TD ALIGN="left"><tt CLASS=literal>ne</tt></TD><TD ALIGN="left">True if <tt CLASS=literal>$a</tt> is not equal to <tt CLASS=literal>$b</tt></TD></TR><TR CLASS=row><TD ALIGN="left">Less than</TD><TD ALIGN="left"><tt CLASS=literal>&lt;</tt></TD><TD ALIGN="left"><tt CLASS=literal>lt</tt></TD><TD ALIGN="left">True if <tt CLASS=literal>$a</tt> is less than <tt CLASS=literal>$b</tt></TD></TR><TR CLASS=row><TD ALIGN="left">Greater than</TD><TD ALIGN="left"><tt CLASS=literal>&gt;</tt></TD><TD ALIGN="left"><tt CLASS=literal>gt</tt></TD><TD ALIGN="left">True if <tt CLASS=literal>$a</tt> is greater than <tt CLASS=literal>$b</tt></TD></TR><TR CLASS=row><TD ALIGN="left">Less than or equal</TD><TD ALIGN="left"><tt CLASS=literal>&lt;=</tt></TD><TD ALIGN="left"><tt CLASS=literal>le</tt></TD><TD ALIGN="left">True if <tt CLASS=literal>$a</tt> not greater than <tt CLASS=literal>$b</tt></TD></TR><TR CLASS=row><TD ALIGN="left">Comparison</TD><TD ALIGN="left"><tt CLASS=literal>&lt;=&gt;</tt></TD><TD ALIGN="left"><tt CLASS=literal>cmp</tt></TD><TD ALIGN="left">0 if equal, 1 if <tt CLASS=literal>$a</tt> greater, -1 if <tt CLASS=literal>$b</tt> greater</TD></TR></TABLE><P></DIV><P CLASS=para>The last pair of operators (<tt CLASS=literal>&lt;=&gt;</tt> and <tt CLASS=literal>cmp</tt>)are entirely redundant. However,they're incredibly useful in <A HREF="ch03_02.htm#PERL2-CMD-SORT">sort</A>subroutines (see <A HREF="ch03_01.htm">Chapter 3, <i>Functions</i></A>).[22]<blockquote class=footnote><P CLASS=para>[22] Some folks feel that such redundancy is evil because it keeps a languagefrom being minimalistic, or orthogonal.  But Perl isn't an orthogonallanguage; it's a diagonal language.  By which we mean that Perl doesn'tforce you to always go at right angles.  Sometimes you just wantto follow the hypotenuse of the triangle to get where you're going.TMTOWTDI is about shortcuts.  Shortcuts are about efficiency.</blockquote></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="PERL2-CH-1-SECT-5.7">File Test Operators</A></h3><P CLASS=para>The file test operators allow you to test whether certain file attributes areset before you go and blindly muck about with the files.  For example, itwould be very nice to know that the file <I CLASS=emphasis>/etc/passwd</I> already existsbefore you go and open it as a new file, wiping out everything that was inthere before. See <A HREF="ch01_05.htm#PERL2-CH-1-TAB-6">Table 1.6</A> for examples of file test operators.<P><DIV CLASS=table><TABLE><CAPTION><A CLASS="TITLE" NAME="PERL2-CH-1-TAB-6">Table 1-6: Some File Test Operators</A></CAPTION><TR CLASS=row><TH ALIGN="left">Example</TH><TH ALIGN="left">Name</TH><TH ALIGN="left">Result</TH></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>-e $a</tt></TD><TD ALIGN="left">Exists</TD><TD ALIGN="left">True if file named in <tt CLASS=literal>$a</tt> exists</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>-r $a</tt></TD><TD ALIGN="left">Readable</TD><TD ALIGN="left">True if file named in <tt CLASS=literal>$a</tt> is readable</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>-w $a</tt></TD><TD ALIGN="left">Writable</TD><TD ALIGN="left">True if file named in <tt CLASS=literal>$a</tt> is writable</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>-d $a</tt></TD><TD ALIGN="left">Directory</TD><TD ALIGN="left">True if file named in <tt CLASS=literal>$a</tt> is a directory</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>-f $a</tt></TD><TD ALIGN="left">File</TD><TD ALIGN="left">True if file named in <tt CLASS=literal>$a</tt> is a regular file</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>-T $a</tt></TD><TD ALIGN="left">Text File</TD><TD ALIGN="left">True if file named in <tt CLASS=literal>$a</tt> is a text file</TD></TR></TABLE><P></DIV><P CLASS=para>Here are some examples:<P CLASS=para><DIV CLASS=programlisting><P><PRE>-e "/usr/bin/perl" or warn "Perl is improperly installed\n";-f "/vmunix" and print "Congrats, we seem to be running BSD Unix\n";</PRE></DIV><P CLASS=para>Note that a regular file is not the same thing as a text file.  Binaryfiles like <I CLASS=emphasis>/vmunix</I> are regular files, but they aren't text files.Text files are the opposite of binary files, while regular files are theopposite of irregular files like directories and devices.<P CLASS=para>There are a lot of file test operators, many of which we didn't list.Most of the file tests are unary Boolean operators: they take only oneoperand, a scalar that evaluates to a file or a filehandle, and theyreturn either a true or false value.  A few of them return something fancier,like the file's size or age, but you can look those up when you need them.</DIV></DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch01_04.htm"><IMG SRC="gifs/txtpreva.gif"     ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="ch01_06.htm"><IMG SRC="gifs/txtnexta.gif"     ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>Filehandles</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>Control Structures</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>