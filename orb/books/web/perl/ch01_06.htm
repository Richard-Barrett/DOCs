<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 1] 1.6 Control Structures</TITLE><META NAME="author" CONTENT="Larry Wall, Tom Christiansen, and Randal Schwartz"><META NAME="date" CONTENT="Mon Mar 17 12:59:26 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="Perl"><META NAME="title" CONTENT="Programming Perl, Second Edition"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif"     ALT="Programming Perl, Second Edition"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch01_05.htm"><IMG SRC="gifs/txtpreva.gif"     ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 1</b></td><td width=172 align=right valign=top><A HREF="ch01_07.htm"><IMG SRC="gifs/txtnexta.gif"     ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="PERL2-CH-1-SECT-6">1.6 Control Structures</A></h2><P CLASS=para><A NAME="CH01.CONTROL"></A>So far, except for our one large example, all of our examples have beencompletely linear; we executed each command in order.  We've seen a fewexamples of using the short circuit operators to cause a single commandto be (or not to be) executed.  While you can write some very usefullinear programs (a lot of CGI scripts fall into this category), you canwrite much more powerful programs if you have conditional expressionsand looping mechanisms.  Collectively, these are known as control structures.So you can also think of Perl as a control language.<P CLASS=para>But to have control, you have to be able to decide things, and to decidethings, you have to know the difference between what's true and what's false.<DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="PERL2-CH-1-SECT-6.1">What Is Truth?</A></h3><P CLASS=para>We've bandied about the term truth,[23]and we've mentioned that certain operators return a true or a falsevalue.  Before we go any further, we really ought to explain exactlywhat we mean by that.  Perl treats truth a little differently than mostcomputer languages, but after you've worked with it awhile it willmake a lot of sense.  (Actually, we're hoping it'll make a lot of senseafter you've read the following.)<blockquote class=footnote><P CLASS=para>[23] Strictly speaking, this is not true.</blockquote><P CLASS=para>Basically, Perl holds truths to be self-evident.  That's a glib way ofsaying that you can evaluate almost anything for its truth value.  Perluses practical definitions of truth that depend on the type of thingyou're evaluating.  As it happens, there are many more kinds of truththan there are of nontruth.<P CLASS=para>Truth in Perl is always evaluated in a scalar context.  (Other thanthat, no type coercion is done.)  So here are the rules for the variouskinds of values that a scalar can hold:<P><OL CLASS=orderedlist><li CLASS=listitem>Any string is true except for <tt CLASS=literal>""</tt> and <tt CLASS=literal>"0"</tt>.<P><li CLASS=listitem>Any number is true except for 0.<P><li CLASS=listitem>Any reference is true.<P><li CLASS=listitem>Any undefined value is false.<P></OL><P CLASS=para>Actually, the last two rules can be derived from the first two.  Anyreference (rule 3) points to something with an address, and wouldevaluate to a number or string containing that address, which is never0.  And any undefined value (rule 4) would always evaluate to 0 or thenull string.<P CLASS=para>And in a way, you can derive rule 2 from rule 1 if you pretend thateverything is a string.  Again, no coercion is actually done to evaluatetruth, but if a coercion to string <I CLASS=emphasis>were</I> done, then any numeric valueof 0 would simply turn into the string <tt CLASS=literal>"0"</tt>, and be false.  Any othernumber would not turn into the string <tt CLASS=literal>"0"</tt>, and so would be true.  Let'slook at some examples so we can understand this better:<DIV CLASS=programlisting><P><PRE>0          # would become the string "0", so false1          # would become the string "1", so true10 - 10    # 10-10 is 0, would convert to string "0", so false0.00       # becomes 0, would convert to string "0", so false"0"        # the string "0", so false""         # a null string, so false"0.00"     # the string "0.00", neither empty nor exactly "0", so true"0.00" + 0 # the number 0 (coerced by the +), so false.\$a        # a reference to $a, so true, even if $a is falseundef()    # a function returning the undefined value, so false</PRE></DIV><P CLASS=para>Since we mumbled something earlier about truth being evaluated in ascalar context, you might be wondering what the truth value of a listis.  Well, the simple fact is, there <I CLASS=emphasis>is</I> no operation in Perl that willreturn a list in a scalar context.  They all return a scalar valueinstead, and then you apply the rules of truth to that scalar.  Sothere's no problem, as long as you can figure out what any givenoperator will return in a scalar context.<DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-1-SECT-6.1.1">The if and unless statements</A></h4><P CLASS=para>We saw earlier how a logic operator could function as a conditional.A slightly more complex form of the logic operators is the <B>if</B>statement.  The <B>if</B> statement evaluates a truth condition, andexecutes a block if the condition is true.<P CLASS=para>A block is one or more statements grouped together by a set ofbraces.  Since the <B>if</B> statement executes a block, the braces arerequired by definition.  If you know a language like C, you'll noticethat this is different.  Braces are optional in C if you only have asingle line of code, but they are not optional in Perl.<P CLASS=para><DIV CLASS=programlisting><P><PRE>if ($debug_level &gt; 0) {    # Something has gone wrong.  Tell the user.    print "Debug: Danger, Will Robinson, danger!\n";    print "Debug: Answer was '54', expected '42'.\n";}</PRE></DIV><P CLASS=para>Sometimes, just executing a block when a condition is met isn't enough.You may also want to execute a different block if that condition <I CLASS=emphasis>isn't</I>met.  While you could certainly use two <B>if</B> statements, one thenegation of the other, Perl provides a more elegant solution.  Afterthe block, <B>if</B> can take an optional second condition, called <B>else</B>,to be executed only if the truth condition is false.  (Veteran computerprogrammers will not be surprised at this point.)<P CLASS=para>Other times, you may even have more than two possible choices.  In thiscase, you'll want to add an <B>elsif</B> truth condition for the otherpossible choices.  (Veteran computer programmers may well be surprisedby the spelling of "elsif", for which nobody here is going to apologize.Sorry.)<P CLASS=para><DIV CLASS=programlisting><P><PRE>if ($city eq "New York") {    print "New York is northeast of Washington, D.C.\n";}elsif ($city eq "Chicago") {    print "Chicago is northwest of Washington, D.C.\n";}elsif ($city eq "Miami") {    print "Miami is south of Washington, D.C.  And much warmer!\n";}else {    print "I don't know where $city is, sorry.\n";}</PRE></DIV><P CLASS=para>The <B>if</B> and <B>elsif</B> clauses are each computed in turn, until oneis found to be true or the <B>else</B> condition is reached.  When one of theconditions is found to be true, its block is executed and all theremaining branches are skipped.Sometimes, you don't want to do anything if the condition is true, only ifit is false.  Using an empty <B>if</B> with an <B>else</B> may be messy, anda negated <B>if</B> may be illegible; it sounds weird to say "do somethingif not this is true".  In these situations, you would use the <B>unless</B>statement.<P CLASS=para><DIV CLASS=programlisting><P><PRE>unless ($destination eq $home) {    print "I'm not going home.\n";}</PRE></DIV><P CLASS=para>There is no "elsunless" though.  This is generally construed as a feature.</DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="PERL2-CH-1-SECT-6.2">Iterative (Looping) Constructs</A></h3><P CLASS=para>Perl has four main iterative statement types: <B>while</B>, <B>until</B>,<B>for</B>, and <B>foreach</B>. These statements allow a Perl program torepeatedly execute the same code for different values.<DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-1-SECT-6.2.1">The while and until statements</A></h4><P CLASS=para>The <B>while</B> and <B>until</B> statements function similarly to the<B>if</B> and <B>unless</B> statements, in a looping fashion.  First, theconditional part of the statement is checked.  If the condition is met(if it is true for a <B>while</B> or false for an <B>until</B>) the block ofthe statement is executed.<P CLASS=para><DIV CLASS=programlisting><P><PRE>while ($tickets_sold &lt; 10000) {    $available = 10000 - $tickets_sold;    print "$available tickets are available.  How many would you like: ";    $purchase = &lt;STDIN&gt;;    chomp($purchase);    $tickets_sold += $purchase;}</PRE></DIV><P CLASS=para>Note that if the original condition is never met, the loop will never beentered at all.  For example, if we've already sold 10,000 tickets, wemight want to have the next line of the program say something like:<P CLASS=para><DIV CLASS=programlisting><P><PRE>print "This show is sold out, please come back later.\n";</PRE></DIV><P CLASS=para>In our grade example earlier, line 4 reads:<P CLASS=para><DIV CLASS=programlisting><P><PRE>while ($line = &lt;GRADES&gt;) {</PRE></DIV><P CLASS=para>This assigns the next line to the variable <tt CLASS=literal>$line</tt>, and as we explainedearlier, returns the value of <tt CLASS=literal>$line</tt> so that the condition of the<B>while</B> statement can evaluate <tt CLASS=literal>$line</tt> for truth.  You might wonderwhether Perl will get a false negative on blank lines and exit theloop prematurely.  The answer is that it won't.  The reason is clear, ifyou think about everything we've said.  The line input operator leaves thenewline on the end of the string, so a blank line has the value <tt CLASS=literal>"\n"</tt>.And you know that <tt CLASS=literal>"\n"</tt> is not one of the canonical false values.  Sothe condition is true, and the loop continues even on blank lines.<P CLASS=para>On the other hand, when we finally do reach the end of the file, theline input operator returns the undefined value, which always evaluates tofalse.  And the loop terminates, just when we wanted it to.  There's noneed for an explicit test against the <A HREF="ch03_02.htm#PERL2-CMD-EOF">eof</A> function in Perl, because theinput operators are designed to work smoothly in a conditional context.<P CLASS=para>In fact, almost everything is designed to work smoothly in a conditionalcontext.  For instance, an array in a scalar context returns its length.So you often see:<P CLASS=para><DIV CLASS=programlisting><P><PRE>while (@ARGV) {    process(shift @ARGV);}</PRE></DIV><P CLASS=para>The loop automatically exits when <tt CLASS=literal>@ARGV</tt> is exhausted.</DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-1-SECT-6.2.2">The for statement</A></h4><P CLASS=para>Another iterative statement is the <B>for</B> loop.  A <B>for</B> loopruns exactly like the <B>while</B> loop, but looks a good deal different.(C programmers will find it very familiar though.)<P CLASS=para><DIV CLASS=programlisting><P><PRE>for ($sold = 0; $sold &lt; 10000; $sold += $purchase) {    $available = 10000 - $sold;    print "$available tickets are available.  How many would you like: ";    $purchase = &lt;STDIN&gt;;    chomp($purchase);}</PRE></DIV><P CLASS=para>The <B>for</B> loop takes three expressions within the loop's parentheses:an expression to set the initial state of the loop variable, a conditionto test the loop variable, and an expression to modify the state of theloop variable.  When the loop starts, the initial state is set and thetruth condition is checked.  If the condition is true, the block is executed.  Whenthe block finishes, the modification expression is executed, the truthcondition is again checked, and if true, the block is rerun with thenew values.  As long as the truth condition remains true, the block andthe modification expression will continue to be executed.</DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-1-SECT-6.2.3">The foreach statement</A></h4><P CLASS=para>The last of Perl's main iterative statements is the <B>foreach</B> statement.<B>foreach</B> is used to execute the same code for each of a known set ofscalars, such as an array:<P CLASS=para><DIV CLASS=programlisting><P><PRE>foreach $user (@users) {    if (-f "$home{$user}/.nexrc") {        print "$user is cool... they use a perl-aware vi!\n";    }}</PRE></DIV><P CLASS=para>In a <B>foreach</B> statement, the expression in parentheses is evaluated toproduce a list.  Then each element of the list is aliased to theloop variable in turn, and the block of code is executed once foreach element.  Note that the loop variable becomes a reference tothe element itself, rather than a copy of the element. Hence, modifyingthe loop variable will modify the original array.<P CLASS=para>You find many more <B>foreach</B> loops in the typical Perl program than<B>for</B> loops, because it's very easy in Perl to generate the liststhat <B>foreach</B> wants to iterate over.  A frequently seen idiom isa loop to iterate over the sorted keys of a hash:<P CLASS=para><DIV CLASS=programlisting><P><PRE>foreach $key (sort keys %hash) {</PRE></DIV><P CLASS=para>In fact, line 9 of our grade example does precisely that.</DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-1-SECT-6.2.4">Breaking out: next and last</A></h4><P CLASS=para>The <A HREF="ch03_02.htm#PERL2-CMD-NEXT">next</A> and <A HREF="ch03_02.htm#PERL2-CMD-LAST">last</A> operators allow you to modify the flow ofyour loop.  It is not at all uncommon to have a special case; you may wantto skip it, or you may want to quit when you encounter it.For example, if you are dealing withUNIX accounts, you may want to skip the system accounts (like rootor lp).  The <A HREF="ch03_02.htm#PERL2-CMD-NEXT">next</A> operator would allow you to skip to the end of yourcurrent loop iteration, and start the next iteration.  The <A HREF="ch03_02.htm#PERL2-CMD-LAST">last</A>operator would allow you to skip to the end of your block, as if your testcondition had returned false.  This might be useful if, forexample, you are looking for a specific account and want to quit as soon as youfind it.<P CLASS=para><DIV CLASS=programlisting><P><PRE>foreach $user (@users) {    if ($user eq "root" or $user eq "lp") {        next;    }    if ($user eq "special") {        print "Found the special account.\n";        # do some processing        last;    }}</PRE></DIV><P CLASS=para>It's possible to break out of multi-level loops by labeling your loopsand specifying which loop you want to break out of.  Togetherwith statement modifiers (another form of conditional we haven'ttalked about), this can make for very readable loop exits, if youhappen to think English is readable:<P CLASS=para><DIV CLASS=programlisting><P><PRE>LINE: while ($line = &lt;ARTICLE&gt;) {    last LINE if $line eq "\n"; # stop on first blank line    next LINE if $line =~ /^#/; # skip comment lines    # your ad here}</PRE></DIV><P CLASS=para>You may be saying, "Wait a minute, what's that funny <tt CLASS=literal>^#</tt> thing thereinside the leaning toothpicks?  That doesn't look much like English."And you're right.  That's a pattern match containing a regularexpression (albeit a rather simple one).  And that's what the nextsection is about.  Perl is above all a text processing language, andregular expressions are at the heart of Perl's text processing.</DIV></DIV></DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch01_05.htm"><IMG SRC="gifs/txtpreva.gif"     ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="ch01_07.htm"><IMG SRC="gifs/txtnexta.gif"     ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>Operators</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>Regular Expressions</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>