<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 4] 4.5 Braces, Brackets, and Quoting</TITLE><META NAME="author" CONTENT="Larry Wall, Tom Christiansen, and Randal Schwartz"><META NAME="date" CONTENT="Mon Mar 17 13:09:05 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="Perl"><META NAME="title" CONTENT="Programming Perl, Second Edition"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif"     ALT="Programming Perl, Second Edition"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch04_04.htm"><IMG SRC="gifs/txtpreva.gif"     ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 4</b></td><td width=172 align=right valign=top><A HREF="ch04_06.htm"><IMG SRC="gifs/txtnexta.gif"     ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="PERL2-CH-4-SECT-5">4.5 Braces, Brackets, and Quoting</A></h2><P CLASS=para>In the previous section we pointed out that <tt CLASS=literal>${identifier}</tt> is not treated asa symbolic reference.  Now you might wonder how this interacts withreserved words.  The short answer is, it doesn't.  Despite the factthat <A HREF="ch03_02.htm#PERL2-CMD-PUSH">push</A> is a reserved word, these twostatements:<DIV CLASS=programlisting><P><PRE>$push = "pop on ";print "${push}over";</PRE></DIV><P CLASS=para>print out "<tt CLASS=literal>pop on over</tt>".  The reason is that, historically, this use ofbraces is how UNIX shells have delimited a variable name from subsequentalphanumeric text that would otherwise be interpreted as part of thevariable name.  It's how many people expect variable interpolation towork, so we made it work the same way in Perl.  But with Perl, thenotion extends further and applies to any braces used in generatingreferences, whether or not they're inside quotes.  This means that:<DIV CLASS=programlisting><P><PRE>print ${push} . 'over';</PRE></DIV><P CLASS=para>or even:<DIV CLASS=programlisting><P><PRE>print ${ push } . 'over';</PRE></DIV><P CLASS=para>will also print "<tt CLASS=literal>pop on over</tt>", even though the braces are outside ofdouble quotes.  The same rule applies to any identifier that is used forsubscripting a hash.  So, instead of writing:<DIV CLASS=programlisting><P><PRE>$hash{ "aaa" }{ "bbb" }{ "ccc" }</PRE></DIV><P CLASS=para>you can just write:<DIV CLASS=programlisting><P><PRE>$hash{ aaa }{ bbb }{ ccc }</PRE></DIV><P CLASS=para>and not worry about whether the subscripts are reserved words.  In therare event that you do wish to do something like:<DIV CLASS=programlisting><P><PRE>$hash{ shift }</PRE></DIV><P CLASS=para>you can force interpretation as a reserved word by adding anything thatmakes it more than a mere identifier:<DIV CLASS=programlisting><P><PRE>$hash{ shift() }$hash{ +shift }$hash{ shift @_ }</PRE></DIV><P CLASS=para>The <B>-w</B> switch will warn you if itinterprets a reserved word as a string, since you may have<I CLASS=emphasis>meant</I> the reserved word.  (That's why werecommend you use <tt CLASS=literal>${pkg}</tt> instead of<tt CLASS=literal>${package}</tt> or <tt CLASS=literal>${pack}</tt>, sinceyou'll avoid some warnings that way.)<DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="PERL2-CH-4-SECT-5.1">Hard References Don't Work as Hash Keys</A></h3><P CLASS=para>Consistent with the foregoing, hash keys are stored internally as strings.[7]If you try to store a hard reference as a key in a hash, the key value will beconverted into a string:<blockquote class=footnote><P CLASS=para>[7] They're also stored externally as strings, such as when you put them intoa DBM file.  In fact, DBM files <I CLASS=emphasis>require</I> that their keys (and values) be strings.</blockquote><DIV CLASS=programlisting><P><PRE>$x{ \$a } = $a;($key, $value) = each %x;print $$key;   # WRONG</PRE></DIV><P CLASS=para>We mentioned earlier that you can't convert a string back to a hardreference.  So if you try to dereference <tt CLASS=literal>$key</tt>, which contains amere string, it won't do a hard dereference, but rather a symbolicdereference, and since you probably don't have a variable named<tt CLASS=literal>SCALAR(0x1fc0e)</tt>, you won't accomplish what you're attempting.  Youmight want to do something more like:<DIV CLASS=programlisting><P><PRE>$r = \@a;$x{ $r } = $r;</PRE></DIV><P CLASS=para>And then at least you can use the hash <I CLASS=emphasis>value</I>, which will be ahard reference, instead of the key, which won't.<P CLASS=para>Although you can't store a hard reference as a key, if you use a hardreference in a string context, it <I CLASS=emphasis>is</I> guaranteed to produce aunique string, since the address of the reference is included as part ofthe resulting string.  So you can in fact use a hard reference as aunique hash key.  You just can't dereference it later.</DIV></DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch04_04.htm"><IMG SRC="gifs/txtpreva.gif"     ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="ch04_06.htm"><IMG SRC="gifs/txtnexta.gif"     ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>Symbolic References</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>A Brief Tutorial: Manipulating Lists of Lists</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>