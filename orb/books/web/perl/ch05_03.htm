<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 5] 5.3 Objects</TITLE><META NAME="author" CONTENT="Larry Wall, Tom Christiansen, and Randal Schwartz"><META NAME="date" CONTENT="Mon Mar 17 13:10:21 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="Perl"><META NAME="title" CONTENT="Programming Perl, Second Edition"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif"     ALT="Programming Perl, Second Edition"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch05_02.htm"><IMG SRC="gifs/txtpreva.gif"     ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 5</b></td><td width=172 align=right valign=top><A HREF="ch05_04.htm"><IMG SRC="gifs/txtnexta.gif"     ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="PERL2-CH-5-SECT-3">5.3 Objects</A></h2><P CLASS=para><A NAME="CH05.OBJ"></A>First of all, you need to understand packages and modules as previouslydescribed in this chapter.  You also need to know what references andreferenced thingies are in Perl; see <A HREF="ch04_01.htm">Chapter 4, <i>References and Nested Data Structures</i></A>, for that.<P CLASS=para>It's also helpful to understand a little about object-orientedprogramming (OOP), so in the next section we'll give you a little courseon OOL (object-oriented lingo).<DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="PERL2-CH-5-SECT-3.1">Brief Refresher on Object-Oriented Programming</A></h3><P CLASS=para>An <I CLASS=emphasis>object</I> is a data structure with a collection of behaviors thatthe data structure is capable of.  We generally speak of behaviors asbeing performed by the object directly, sometimes to the point ofanthropomorphizing the object.  For example, we might say that arectangle "knows"how to display itself on the screen, or "knows" how to compute its ownarea.<P CLASS=para>An object gets its behaviors by being an <I CLASS=emphasis>instance</I> of a <I CLASS=emphasis>class</I>.The class defines <I CLASS=emphasis>methods</I> that apply to all objects belonging tothat class, called <I CLASS=emphasis>instance methods</I>.<P CLASS=para>The class will also likely include instance-independent methods,called <I CLASS=emphasis>class methods</I>.[9]Some class methods createnew objects of the classes, and are called <I CLASS=emphasis>constructor methods</I>(such as "create a new rectangle with width 10 and height 5").  Otherclass methods might perform operations on many objects collectively("display all rectangles"), or provide other necessary operations("read a rectangle from this file").<blockquote class=footnote><P CLASS=para>[9] Or sometimes <I CLASS=emphasis>static methods</I>.</blockquote><P CLASS=para>A class may be defined so as to <I CLASS=emphasis>inherit</I> both class and instance methodsfrom <I CLASS=emphasis>parent classes</I>, also known as <I CLASS=emphasis>base classes</I>.  This allows a newclass to be createdthat is similar to an existing class, but with added behaviors. Anymethod invocation that is not found in a particular class will besearched for in the parent classes automatically.  For example, arectangle class might inherit some common behaviors from a genericpolygon class.<P CLASS=para>While you might know the particular implementation of an object,generally you should treat the object as a black box.  All access to theobject should be obtained through the published interface via theprovided methods.  This allows the implementation to be revised, as longas the interface remains frozen (or at least, upward compatible).  Bypublished interface, we mean the written documentation describing howto use a particular class.  (Perl does not have an explicit interfacefacility apart from this.  You are expected to exercise common sense andcommon decency.)<P CLASS=para>Objects of different classes may be held in the same variable at differenttimes. When a method is invoked on the contents of the variable, theproper method for the object's class gets selected automatically.  If, forexample, the <tt CLASS=literal>draw( )</tt> method is invoked on a variable that holdseither a rectangle or a circle, the method actually used depends on thecurrent nature of the object to which the variable refers.  For this towork, however, the methods for drawing circles and rectangles must both becalled <tt CLASS=literal>draw( )</tt>.<P CLASS=para>Admittedly, there's a lot more to objects than this, and a lot of waysto find out more.  But that's not our purpose here.  So, on we go.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="PERL2-CH-5-SECT-3.2">Perl's Objects</A></h3><P CLASS=para>Here are three simple definitions that you may find reassuring:<P><UL CLASS=itemizedlist><li CLASS=listitem>An <I CLASS=emphasis>object</I> is simply a referenced thingy that happens to know which class itbelongs to.<P><li CLASS=listitem>A <I CLASS=emphasis>class</I> is simply a package that happens to provide methods to dealwith objects.<P><li CLASS=listitem>A <I CLASS=emphasis>method</I> is simply a subroutine that expects an object reference (ora package name, for class methods) as its first argument.<P></UL><P CLASS=para>We'll cover these points in more depth now.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="PERL2-CH-5-SECT-3.3">An Object Is Simply a Referenced Thingy</A></h3><P CLASS=para><A NAME="CH05.CONST1"></A><A NAME="CH05.CONST2"></A><A NAME="CH05.CONST3"></A>Perl doesn't provide any special syntax for constructors.  A constructoris merely a subroutine that returns a reference to a thingy that it hasblessed into a class, generally the class in which the subroutine isdefined.  The constructor does this using the built-in <A HREF="ch03_02.htm#PERL2-CMD-BLESS">bless</A> function,which marks a thingy as belonging to a particular class.  It takeseither one or two arguments: the first argument is a regular hard referenceto any kind of thingy, and the second argument (if present) is thepackage that will own the thingy.  If no second argument is supplied,the current package is assumed.  Here is a typical constructor:<DIV CLASS=programlisting><P><PRE>package Critter;sub new { return bless {}; }</PRE></DIV><P CLASS=para>The <tt CLASS=literal>{}</tt> composes a reference to an empty anonymous hash.The <A HREF="ch03_02.htm#PERL2-CMD-BLESS">bless</A> function takes that hash reference and tells the thingyit references that it's now a member of the class Critter, and returns thereference.The same thing can be accomplished more explicitly this way:<DIV CLASS=programlisting><P><PRE>sub new {    my     $obref = {};         # ref to empty hash    bless  $obref;              # make it an object in this class    return $obref;              # return it}</PRE></DIV><P CLASS=para>Once a reference has been blessed into a class, you can invoke the class'sinstance methods upon it.  For example:<DIV CLASS=programlisting><P><PRE>$circle-&gt;draw();</PRE></DIV><P CLASS=para>We'll discuss method invocation in more detail below.<P CLASS=para>Sometimes constructors call other methods in the class as part of theconstruction.  Here we'll call an <tt CLASS=literal>_initialize()</tt> method, whichmay be in the current package or in one of the classes (packages) thatthis class inherits from.  The leading underscore is an oft-used conventionindicating that the function is private, that is, to be usedonly by the class itself.  This result can also be achieved by omittingthe function from the published documentation for that class.<DIV CLASS=programlisting><P><PRE>sub new {    my $self = {}    bless $self;    $self-&gt;_initialize();    return $self;}</PRE></DIV><P CLASS=para>If you want your constructor method to be (usefully) inheritable, thenyou must use the two-argument form of <A HREF="ch03_02.htm#PERL2-CMD-BLESS">bless</A>.  That's because, inPerl, methods execute in the context of the original base class ratherthan in the context of the derived class.  For example, suppose you havea Polygon class that had a <tt CLASS=literal>new()</tt> method as a constructor.  Thiswould work fine when called as <tt CLASS=literal>Polygon-&gt;new()</tt>.  But then youdecide to also have a Square class, which inherits methods from thePolygon class.  The only way for that constructor to build an object ofthe proper class when it is called as <tt CLASS=literal>Square-&gt;new()</tt> is by usingthe two-argument form of <A HREF="ch03_02.htm#PERL2-CMD-BLESS">bless</A>, as in the following example:<DIV CLASS=programlisting><P><PRE>sub new {    my $class = shift;    my $self = {};    bless $self, $class;        # bless $self into the designated class    $self-&gt;_initialize();       # in case there's more work to do    return $self;}</PRE></DIV><P CLASS=para>Within the class package, methods will typically deal with the referenceas an ordinary (unblessed) reference to a thingy.  Outside the classpackage, the reference should generally treated as an opaque value thatmay only be accessed through the class's methods.  (Mutually consentingclasses may of course do whatever they like with each other, but eventhat doesn't necessarily make it right.)<P CLASS=para>A constructor may re-bless a referenced object currently belonging toanother class, but then the new class is responsible for all cleanuplater.  The previous blessing is forgotten, as an object may onlybelong to one class at a time.  (Although of course it's free toinherit methods from many classes.)<P CLASS=para>A clarification:  Perl objects are blessed.  References are not.Thingies know which package they belong to.  References do not.  The<A HREF="ch03_02.htm#PERL2-CMD-BLESS">bless</A> operator simply uses the reference in order to find thethingy.  Consider the following example:<DIV CLASS=programlisting><P><PRE>$a = {};            # generate reference to hash$b = $a;            # reference assignment (shallow)bless $b, Mountain;bless $a, Fourteener;print "\$b is a ", ref($b), "\n";</PRE></DIV><P CLASS=para>This reports <tt CLASS=literal>$b</tt> as being a member of class <tt CLASS=literal>Fourteener</tt>, not amember of class <tt CLASS=literal>Mountain</tt>, because the second blessing operates on theunderlying thingy that <tt CLASS=literal>$a</tt> refers to, not on the reference itself.Thus is the first blessing forgotten.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="PERL2-CH-5-SECT-3.4">A Class Is Simply a Package</A></h3><P CLASS=para>Perl doesn't provide any special syntax for class definitions.  Youjust use a package as a class by putting method definitions into theclass.<P CLASS=para>Within each package a special array called <tt CLASS=literal>@ISA</tt>tells Perl where else to look for a method if it can't find the method inthat package.  This is how Perl implements inheritance.  Eachelement of the <tt CLASS=literal>@ISA</tt> array is just the name of another packagethat happens to be used as a class.  The packages are recursivelysearched (depth first) for missing methods, in the order that packagesare mentioned in <tt CLASS=literal>@ISA</tt>.  This means that if you have twodifferent packages (say, <tt CLASS=literal>Mom</tt> and <tt CLASS=literal>Dad</tt>) in a class's<tt CLASS=literal>@ISA</tt>, Perl would first look for missing methods in<tt CLASS=literal>Mom</tt> and all of her ancestor classes before going on to search through<tt CLASS=literal>Dad</tt> and his ancestors.  Classes accessible through <tt CLASS=literal>@ISA</tt>are known as <I CLASS=emphasis>base classes</I> of the current class, which is itself calledthe <I CLASS=emphasis>derived class</I>.[10]<blockquote class=footnote><P CLASS=para>[10] Instead of "base class" and "derived class",some OOP literature uses <I CLASS=emphasis>superclass</I> for themore generic classes and <I CLASS=emphasis>subclass</I> for the more specific ones.Confusing the issue further, some literature uses "base class" tomean a "most super" superclass.  That's not what we mean by it.</blockquote><P CLASS=para>If a missing method is found in one of the base classes, Perl internallycaches that location in the current class for efficiency, so the next timeit has to find the method, it doesn't have to look so far.  Changing<tt CLASS=literal>@ISA</tt> or defining new subroutines invalidates this cache and causesPerl to do the lookup again.<P CLASS=para>If a method isn't found but an <tt CLASS=literal>AUTOLOAD</tt> routine is found, thenthat routine is called on behalf of the missing method, withthat package's <tt CLASS=literal>$AUTOLOAD</tt> variable set to thefully qualified method name.<P CLASS=para>If neither a method nor an <tt CLASS=literal>AUTOLOAD</tt> routine is found in<tt CLASS=literal>@ISA</tt>, then one last, desperate try is made for the method (or an<tt CLASS=literal>AUTOLOAD</tt> routine) in the special pre-defined class called<tt CLASS=literal>UNIVERSAL</tt>.This package does not initially contain any definitions (although see CPAN forsome), but you may place your "last-ditch" methods there.  Think of it as a global baseclass from which all other classes implicitly derive.<P CLASS=para>If that method still doesn't work, Perl finally gives up andcomplains by raising an exception.<P CLASS=para>Perl classes do only method inheritance.  Data inheritance is leftup to the class itself.  By and large, this is not a problem in Perl,because most classes model the attributes of their object usingan anonymous hash.  All the object's data fields (termed "instancevariables" in some languages) are contained within this anonymous hash instead ofbeing part of the language itself.  This hash serves as its own littlenamespace to be carved up by the various classes that might want to dosomething with the object.  For example, if you want an object called<tt CLASS=literal>$user_info</tt> to have a data field named <tt CLASS=literal>age</tt>, you can simplyaccess <tt CLASS=literal>$user_info-&gt;{age}</tt>.  No declarations are necessary. See thesection on "Instance Variables" under "Some Hints About Object Design"later in this chapter.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="PERL2-CH-5-SECT-3.5">A Method Is Simply a Subroutine</A></h3><P CLASS=para>Perl doesn't provide any special syntax for method definition.  (Itdoes provide a little syntax for method invocation, though.  More onthat later.)  A method expects its first argument to indicate the object orpackage it is being invoked on.<DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-5-SECT-3.5.1">Class methods</A></h4><P CLASS=para>A <I CLASS=emphasis>class method</I> expects a class (package) name as its first argument.(The class name isn't blessed; it's just a string.)  These methodsprovide functionality for the class as a whole, not for any individualobject instance belonging to the class.  Constructors are typicallywritten as class methods.  Many class methods simply ignore their firstargument, since they already know what package they're in, and don'tcare what package they were invoked via.  (These aren't necessarily thesame, since class methods follow the inheritance tree just like ordinaryinstance methods.)<P CLASS=para>Another typical use for class methods might be to look up an object bysome nickname in a global registry:<DIV CLASS=programlisting><P><PRE>sub find {    my ($class, $nickname) = @_;    return $objtable{$nickname};}</PRE></DIV></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-5-SECT-3.5.2">Instance methods</A></h4><P CLASS=para>An <I CLASS=emphasis>instance method</I> expects an object reference[11]as its first argument.Typically it shifts the first argument into a private variable (oftencalled <tt CLASS=literal>$self</tt> or <tt CLASS=literal>$this</tt> depending on the cultural biases of theprogrammer), and then it uses the variable as an ordinary reference:<blockquote class=footnote><P CLASS=para>[11] By which we mean simply an ordinary hard reference that happens topoint to an object thingy. Remember that the reference itself doesn'tknow or care whether its thingy is blessed.</blockquote><DIV CLASS=programlisting><P><PRE>sub display {    my $self = shift;    my @keys;    if (@_ == 0) {                  # no further arguments        @keys = sort keys(%$self);    }  else {        @keys = @_;                 # use the ones given    }    foreach $key (@keys) {        print "\t$key =&gt; $self-&gt;{$key}\n";    }}</PRE></DIV><P CLASS=para>Despite being counterintuitive to object-oriented novices, it's a good idea <I CLASS=emphasis>not</I> tocheck the type of object that caused the instance method to beinvoked.  If you do, it can get in the way of inheritance.</DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-5-SECT-3.5.3">Dual-nature methods</A></h4><P CLASS=para>Because there is no language-defined distinction between definitions ofclass methods and instance methods (nor arbitrary functions, for thatmatter), you could actually have the same method work for bothpurposes.  It just has to check whether it was passed a reference ornot.  Suppose you want a constructor that can figure out its classfrom either a classname or an existing object.  Here's an example of thetwo uses of such a method:<DIV CLASS=programlisting><P><PRE>$ob1  = StarKnight-&gt;new();$luke = $ob1-&gt;new();</PRE></DIV><P CLASS=para>Here's how such a method might be defined.  We use the <A HREF="ch03_02.htm#PERL2-CMD-REF">ref</A> functionto find out the type of the object the method was called on so our newobject can be blessed into that class.  If <A HREF="ch03_02.htm#PERL2-CMD-REF">ref</A> returns false, thenour <tt CLASS=literal>$self</tt> argument isn't an object, so it must be a class name.<DIV CLASS=programlisting><P><PRE>package StarKnight;sub new {    my $self  = shift;    my $type  = ref($self) || $self;    return bless {}, $type;}</PRE></DIV></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="PERL2-CH-5-SECT-3.6">Method Invocation</A></h3><P CLASS=para><A NAME="CH05.METH1"></A><A NAME="CH05.METH2"></A>Perl supports two different syntactic forms for explicitly invoking class orinstance methods.[12]Unlike normal function calls, methodcalls always receive, as their first parameter, the appropriate class nameor object reference upon which they were invoked.<blockquote class=footnote><P CLASS=para>[12] Methods may also be called implicitly due to object destructors,tied variables, or operator overloading.Properly speaking, none of these is a functioninvocation.  Rather, Perl uses the information presented via the syntaxto determine which function to call.Operator overloading is implemented by the standard overloadmodule as described separately in <A HREF="ch07_01.htm">Chapter 7, <i>The Standard Perl Library</i></A>.</blockquote><P CLASS=para>The first syntax form looks like this:<DIV CLASS=programlisting><P><PRE><tt CLASS=replaceable><i>METHOD</i></tt> <tt CLASS=replaceable><i>CLASS_OR_INSTANCE</i></tt> <tt CLASS=replaceable><i>LIST</i></tt></PRE></DIV><P CLASS=para>Since this is similar to using the filehandle specification with<A HREF="ch03_02.htm#PERL2-CMD-PRINT">print</A> or <A HREF="ch03_02.htm#PERL2-CMD-PRINTF">printf</A>, and also similar to English sentences like "Givethe dog the bone," we'll call it the <I CLASS=emphasis>indirect object</I> form.  To lookup an object with the class method <tt CLASS=literal>find</tt>, and to print outsome of its attributes with the instance method <tt CLASS=literal>display</tt>, you couldsay this:<DIV CLASS=programlisting><P><PRE>$fred = find Critter "Fred";display $fred 'Height', 'Weight';</PRE></DIV><P CLASS=para>The indirect object form allows a <tt CLASS=replaceable><i>BLOCK</i></tt> returning an object (or class)in the indirect object slot, so you can combine these into onestatement:<DIV CLASS=programlisting><P><PRE>display { find Critter "Fred" } 'Height', 'Weight';</PRE></DIV><P CLASS=para>The second syntax form looks like this:<DIV CLASS=programlisting><P><PRE><tt CLASS=replaceable><i>CLASS_OR_INSTANCE</i></tt> -&gt;<tt CLASS=replaceable><i>METHOD</i></tt>(<tt CLASS=replaceable><i>LIST</i></tt>)</PRE></DIV><P CLASS=para>This second syntax employs the <tt CLASS=literal>-&gt;</tt> notation. It is sometimes called the <I CLASS=emphasis>object-oriented</I> syntax.The parentheses are required if there are any arguments, because this form can'tbe used as a list operator, although the first form can.<DIV CLASS=programlisting><P><PRE>$fred = Critter-&gt;find("Fred");$fred-&gt;display('Height', 'Weight');</PRE></DIV><P CLASS=para>Or, you can put the above in only one statement, like this:<DIV CLASS=programlisting><P><PRE>Critter-&gt;find("Fred")-&gt;display('Height', 'Weight');</PRE></DIV><P CLASS=para>There are times when one syntax is more readable, and times when theother syntax is more readable.  The indirect object syntax is lesscluttered, but it has the same ambiguity as ordinary list operators.If there is an open parenthesis following the class orobject, then the matching close parenthesis terminates the list ofarguments.  Thus, the parentheses of<DIV CLASS=programlisting><P><PRE>new Critter ('Barney', 1.5, 70);</PRE></DIV><P CLASS=para>are assumed to surround all the arguments of the method call, regardlessof what comes afterward. Therefore, saying<DIV CLASS=programlisting><P><PRE>new Critter ('Bam' x 2), 1.4, 45;</PRE></DIV><P CLASS=para>would be equivalent to<DIV CLASS=programlisting><P><PRE>Critter-&gt;new('Bam' x 2), 1.4, 45;</PRE></DIV><P CLASS=para>which is unlikely to do what you want since the <tt CLASS=literal>1.4</tt> and <tt CLASS=literal>45</tt>are not being passed to the <tt CLASS=literal>new( )</tt> routine.<P CLASS=para>There may be occasions when you need to specify which class's method to use.In that case, you <I CLASS=emphasis>could</I> call your method as an ordinary subroutinecall, being sure to pass the requisite first argument explicitly:<P CLASS=para><DIV CLASS=programlisting><P><PRE>$fred = MyCritter::find("Critter", "Fred");MyCritter::display($fred, 'Height', 'Weight');</PRE></DIV><P CLASS=para>However, this does not do any inheritance.  If you merelywant to specify that Perl should start looking for a method in aparticular package, use an ordinary method call, but qualify the methodname with the package like this:<P CLASS=para><DIV CLASS=programlisting><P><PRE>$fred = Critter-&gt;MyCritter::find("Fred");$fred-&gt;MyCritter::display('Height', 'Weight');</PRE></DIV><P CLASS=para>If you're trying to control where the method search begins and you'reexecuting in the class package itself, then you may use the <tt CLASS=literal>SUPER</tt>pseudoclass, which says to start looking in your base class's<tt CLASS=literal>@ISA</tt> list without having to explicitly name it:<P CLASS=para><DIV CLASS=programlisting><P><PRE>$self-&gt;SUPER::display('Height', 'Weight');</PRE></DIV><P CLASS=para>The <tt CLASS=literal>SUPER</tt> construct is meaningful only when used <I CLASS=emphasis>inside</I> the class methods; whilewriters of class modules can employ <tt CLASS=literal>SUPER</tt> in their own code,people who merely use class objects cannot.<P CLASS=para>Sometimes you want to call a method when you don't know the method nameahead of time.  You can use the arrow form, replacing the method namewith a simple scalar variable (not an expression or indexed aggregate) containing the method name:<P CLASS=para><DIV CLASS=programlisting><P><PRE>$method = $fast ? "findfirst" : "findbest";$fred-&gt;$method(@args);</PRE></DIV><P CLASS=para>We mentioned that the object-oriented notation is less syntacticallyambiguous than the indirect object notation, even though the latteris less cluttered.  Here's why:An indirect object is limited to a name, a scalar variable, or a<tt CLASS=replaceable><i>BLOCK</i></tt>.[13](If you try to put anything more complicated in that slot, it will notbe parsed as you expect.)  The left side of <tt CLASS=literal>-&gt;</tt> is not so limited.This means that A and B below are equivalent to each other, and C and Dare also equivalent, but A and B differ from C and D:<blockquote class=footnote><P CLASS=para>[13] Attentive readers will recall that this is precisely the same list ofsyntactic items that are allowed after a funny character to indicate avariable dereference--for example, <tt CLASS=literal>@ary</tt>, <tt CLASS=literal>@$aryref</tt>, or<tt CLASS=literal>@{$aryref}</tt>.</blockquote><P CLASS=para><DIV CLASS=programlisting><P><PRE>A: method $obref-&gt;{fieldname}B: (method $obref)-&gt;{fieldname}C: $obref-&gt;{fieldname}-&gt;method()D: method {$obref-&gt;{fieldname}}</PRE></DIV><P CLASS=para>In A and B, the method applies to <tt CLASS=literal>$obref</tt>, which must yield a hashreference with <tt CLASS=literal>"fieldname"</tt> as a key.  In C and D the methodapplies to <tt CLASS=literal>$obref-&gt;{fieldname}</tt>, which must evaluate to an objectappropriate for the method.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="PERL2-CH-5-SECT-3.7">Destructors</A></h3><P CLASS=para>When the last reference to an object goes away, the object isautomatically destroyed.  (This may even be after you exit, if you'vestored references in global variables.)  If you want to capture controljust before the object is freed, you may define a <tt CLASS=literal>DESTROY</tt> method inyour class.  It will automatically be called at the appropriate moment,and you can do any extra cleanup you desire.  (Perl does the memorymanagement cleanup for you automatically.)<P CLASS=para>Perl does not do nested destruction for you.  If your constructorre-blessed a reference from one of your base classes, your <tt CLASS=literal>DESTROY</tt>method may need to call <tt CLASS=literal>DESTROY</tt> for any base classes that need it.But this only applies to re-blessed objects; an object reference that ismerely <I CLASS=emphasis>contained</I> within the current object--as, for example, onevalue in a larger hash--will be freed anddestroyed automatically.  This is one of the reasons why containershipvia mere aggregation (sometimes called a "has-a" relationship) is oftencleaner and clearer than inheritance (an "is-a" relationship).  In otherwords, often you really only need to store one object inside anotherdirectly instead of employing inheritance, which can add unnecessarycomplexity.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="PERL2-CH-5-SECT-3.8">Method Autoloading</A></h3><P CLASS=para><A NAME="CH05.METH3"></A><A NAME="CH05.METH4"></A>After Perl has vainly looked through an object's class package and the packages ofits base classes to find a method, it also checks for an <tt CLASS=literal>AUTOLOAD</tt>routine in each package before concluding that the method can't be found.One could use this property to provide an interface to the object'sdata fields (instance variables) without writing a separate functionfor each.  Consider the following code:<P CLASS=para><DIV CLASS=programlisting><P><PRE>use Person;$him = new Person;$him-&gt;name("Jason");$him-&gt;age(23);$him-&gt;peers( ["Norbert", "Rhys", "Phineas"] );printf "%s is %d years old.\n", $him-&gt;name, $him-&gt;age;print "His peers are: ", join(", ", @{$him-&gt;peers}), ".\n";</PRE></DIV><P CLASS=para>The Person class implements a data structure containing three fields:<tt CLASS=literal>name</tt>, <tt CLASS=literal>age</tt>, and <tt CLASS=literal>peers</tt>.  Instead of accessing the objects' data fields directly, you usesupplied methods to do so.  To set one of these fields, call a method ofthat name with an argument of the value the field should be set to.  Toretrieve one of the fields without setting it, call the method without anargument.  Here's the code that does that:<P CLASS=para><DIV CLASS=programlisting><P><PRE>package Person;use Carp;       # see Carp.pm in <A HREF="ch07_01.htm">Chapter 7, <i>The Standard Perl Library</i></A>my %fields = (    name        =&gt; undef,    age         =&gt; undef,    peers       =&gt; undef,);sub new {    my $that  = shift;    my $class = ref($that) || $that;    my $self  = {        %fields,    };    bless $self, $class;    return $self;} sub AUTOLOAD {    my $self = shift;    my $type = ref($self) || croak "$self is not an object";    my $name = $AUTOLOAD;    $name =~ s/.*://;   # strip fully-qualified portion    unless (exists $self-&gt;{$name} ) {        croak "Can't access `$name' field in object of class $type";    }     if (@_) {        return $self-&gt;{$name} = shift;    } else {        return $self-&gt;{$name};    } }</PRE></DIV><P CLASS=para>As you see, there isn't really a method named <tt CLASS=literal>name()</tt>,<tt CLASS=literal>age()</tt>, or <tt CLASS=literal>peers()</tt> to be found anywhere.  The<tt CLASS=literal>AUTOLOAD</tt> routine takes care of all of these.  This class is afairly generic implementation of something analogous to a C structure.A more complete implementation of this notion can be found in theClass::Template module contained on CPAN.  The Aliasmodule found there may also prove useful for simplifying member access.[14]<blockquote class=footnote><P CLASS=para>[14] CPAN is the Comprehensive Perl Archive Network, as described in thePreface.</blockquote></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="PERL2-CH-5-SECT-3.9">A Note on Garbage Collection</A></h3><P CLASS=para><A NAME="CH05.MEM1"></A><A NAME="CH05.MEM2"></A><A NAME="CH05.MEM3"></A>High-level languages typically allow the programmers to dispense withworrying about deallocating memory when they're done using it.  Thisautomatic reclamation process is known as <I CLASS=emphasis>garbage collection</I>.For most purposes, Perl uses a fast and simple, reference-based garbagecollection system.  One serious concern is that unreachable memorywith a non-zero reference count will normally not get freed.Therefore, saying this is a bad idea:<P CLASS=para><DIV CLASS=programlisting><P><PRE>{               # make $a and $b point to each other    my($a, $b);    $a = \$b;    $b = \$a;}</PRE></DIV><P CLASS=para>or more simply:<P CLASS=para><DIV CLASS=programlisting><P><PRE>{               # make $a point to itself    my $a;    $a = \$a;}</PRE></DIV><P CLASS=para>When the block is exited, its <A HREF="ch03_02.htm#PERL2-CMD-MY">my</A> variables are normallyfreed up.  But their internal reference counts can never go to zero,because the variables point at each other or themselves.  This is circularreference.No one outside the block can reach them, which makes them useless.  Buteven though they <I CLASS=emphasis>should</I> go away, they can't.  When building recursivedata structures, you'll have to break the self-reference yourselfexplicitly if you don't care to cause a memory leak.<P CLASS=para>For example, here's a self-referential node such as one might use in asophisticated tree structure:<P CLASS=para><DIV CLASS=programlisting><P><PRE>sub new_node {    my $self = shift;    my $class = ref($self) || $self;    my $node = {};    $node-&gt;{LEFT} = $node-&gt;{RIGHT} = $node;    $node-&gt;{DATA} = [ @_ ];    return bless $node, $class;}</PRE></DIV><P CLASS=para>If you create nodes like this, they (currently)[15]won't ever go away unless you break the circular references yourself.<blockquote class=footnote><P CLASS=para>[15] In other words, this behavior is not to be construed as a feature, andyou shouldn't depend on it.  Someday, Perl may have a fullmark-and-sweep style garbage collection as in Lisp or Scheme.  If thathappens, it will properly clean up memory lost to unreachable circulardata.</blockquote><P CLASS=para>Well, almost never.<P CLASS=para>When an interpreter thread finally shuts down (usually when your programexits), then a complete pass of garbagecollection is performed, and everything allocated by that thread getsdestroyed.  This is essential to support Perl as an embedded or amultithreadable language.  When a thread shuts down, all its objectsmust be properly destructed, and all its memory has to be reclaimed.The following program demonstrates Perl's multi-phased garbage collection:<P CLASS=para><DIV CLASS=programlisting><P><PRE>#!/usr/bin/perlpackage Subtle;sub new {    my $test;    $test = \$test;   # Create a self-reference.    warn "CREATING " . \$test;    return bless \$test;}sub DESTROY {    my $self = shift;    warn "DESTROYING $self";}package main;warn "starting program";{    my $a = Subtle-&gt;new;    my $b = Subtle-&gt;new;    $$a = 0;           # Break this self-reference, but not the other.    warn "leaving block";}warn "just exited block";warn "time to die...";exit;</PRE></DIV><P CLASS=para>When run as <I CLASS=emphasis>/tmp/try</I>, the following output is produced:<P CLASS=para><DIV CLASS=programlisting><P><PRE>starting program at /tmp/try line 18.CREATING SCALAR(0x8e5b8) at /tmp/try line 7.CREATING SCALAR(0x8e57c) at /tmp/try line 7.leaving block at /tmp/try line 23.DESTROYING Subtle=SCALAR(0x8e5b8) at /tmp/try line 13.just exited block at /tmp/try line 26.time to die... at /tmp/try line 27.DESTROYING Subtle=SCALAR(0x8e57c) during global destruction.</PRE></DIV><P CLASS=para>Notice that "global destruction" in the last line?  That's the threadgarbage collector reaching the unreachable.<P CLASS=para>Objects are always destructed even when regular references aren't, and in factare destructed in a separate pass before ordinary references.  This is anattempt to prevent object destructors from using references that havethemselves been destructed.  Plain references are (currently) only garbagecollected if the "destruct level" is greater than 0, which is usually onlytrue when Perl is invoked as an embedded interpreter.  You can test thehigher levels of global destruction in the regular Perl executable bysetting the <tt CLASS=literal>PERL_DESTRUCT_LEVEL</tt> environment variable (presuming the<tt CLASS=literal>-DDEBUGGING</tt> option was enabled at Perl build time).</DIV></DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch05_02.htm"><IMG SRC="gifs/txtpreva.gif"     ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="ch05_04.htm"><IMG SRC="gifs/txtnexta.gif"     ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>Modules</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>Using Tied Variables</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>