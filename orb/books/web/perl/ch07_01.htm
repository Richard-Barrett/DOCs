<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 7] The Standard Perl Library</TITLE><META NAME="author" CONTENT="Larry Wall, Tom Christiansen, and Randal Schwartz"><META NAME="date" CONTENT="Mon Mar 17 13:15:35 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="Perl"><META NAME="title" CONTENT="Programming Perl, Second Edition"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF" TEXT="#000000"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif"     ALT="Programming Perl, Second Edition"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch06_04.htm"><IMG SRC="gifs/txtpreva.gif"     ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 7</b></td><td width=172 align=right valign=top><A HREF="ch07_02.htm"><IMG SRC="gifs/txtnexta.gif"     ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><H1 CLASS=chapter><A CLASS="TITLE" NAME="PERL2-CH-7">The Standard Perl Library</A></H1><DIV CLASS=htmltoc><p><b>Contents:</b><br>Beyond the Standard Library<br><A HREF="ch07_02.htm">Library Modules</A><BR></DIV><P CLASS=para>This chapter describes the collection of Perl code that comes alongwith the Perl distribution.  If you use this library and then share yourprogram with others, they will not have to take special steps to executethe program, because the same library is available to Perl programseverywhere.<A NAME="CH07.PSL"></A><A NAME="CH07.SLIB"></A><P CLASS=para>You'll save some time if you make the effort to get familiar with thestandard library.  There's no point in reinventing the wheel.  Youshould be aware, however, that the library contains a wide range ofmaterial.  While some modules may be extremely helpful, others may becompletely irrelevant to your needs.  For example, some are useful onlyif you are creating extensions to Perl.We offer below a rough classification of the library modules to aid youin browsing.<P CLASS=para>First, however, let's untangle some terminology:<P><DL CLASS=variablelist><DT CLASS=varlistentry><I CLASS=emphasis>package</I><DD><P CLASS=para>A <I CLASS=emphasis>package</I> is a simple namespace management device, allowing twodifferent parts of a Perl program to have a (different) variablenamed <tt CLASS=literal>$fred</tt>.  These namespaces are managed with the<A HREF="ch03_02.htm#PERL2-CMD-PACKAGE">package</A> declaration, described in <A HREF="ch05_01.htm">Chapter 5, <i>Packages, Modules, and Object Classes</i></A>.<p><DT CLASS=varlistentry><I CLASS=emphasis>library</I><DD><P CLASS=para>A <I CLASS=emphasis>library</I> is a set of subroutines for a particular purpose.  Often thelibrary declares itself a separate package so that related variables andsubroutines can be kept together, and so that they won't interfere withother variables in your program.  Generally, a library is placed in aseparate file, often ending in "<I CLASS=emphasis>.pl</I>&nbsp;", and then pulled into the mainprogram via <A HREF="ch03_02.htm#PERL2-CMD-REQUIRE">require</A>.  (This mechanism has largely been supersededby the module mechanism, so nowadays we often use the term "library"to talk about the whole system of modules that come with Perl.  See thetitle of this chapter, for instance.)<p><DT CLASS=varlistentry><I CLASS=emphasis>module</I><DD><P CLASS=para>A <I CLASS=emphasis>module</I> is a library that conforms to specific conventions, allowingthe file to be brought in with a <A HREF="ch03_02.htm#PERL2-CMD-USE">use</A> directive at compile time.Module filenames end in "<I CLASS=emphasis>.pm</I>", because the <A HREF="ch03_02.htm#PERL2-CMD-USE">use</A> directive insistson that.  (It also translates the subpackage delimiter <tt CLASS=literal>::</tt> towhatever your subdirectory delimiter is; it is <tt CLASS=literal>/</tt> on UNIX.)  <A HREF="ch05_01.htm">Chapter 5, <i>Packages, Modules, and Object Classes</i></A>describes Perl modules in greater detail.<p><DT CLASS=varlistentry><I CLASS=emphasis>pragma</I><DD><P CLASS=para>A <I CLASS=emphasis>pragma</I> is a module that affects the compilation phase of your programas well as the execution phase.  Think of them as hints to the compiler.Unlike modules, pragmas often (but not always) limit the scope of theireffects to the innermost enclosing block of your program.  The namesof pragmas are by convention all lowercase.</DL><P CLASS=para>For easy reference, this chapter is arranged alphabetically. If youwish to look something up by functional grouping, Tables 7-1 through 7-11 display an (admittedly arbitrary)listing of the modules and pragmas described in this chapter.<P><DIV CLASS=table><TABLE><CAPTION><A CLASS="TITLE" NAME="PERL2-CH-7-TAB-1">Table 7-1: General Programming: Miscellaneous</A></CAPTION><TR CLASS=row><TH ALIGN="LEFT">Module</TH><TH ALIGN="LEFT">Function</TH></TR><TR CLASS=row><TD ALIGN="LEFT">Benchmark</TD><TD ALIGN="LEFT">Check and compare running times of code</TD></TR><TR CLASS=row><TD ALIGN="LEFT">Config</TD><TD ALIGN="LEFT">Access Perl configuration information</TD></TR><TR CLASS=row><TD ALIGN="LEFT">Env</TD><TD ALIGN="LEFT">Import environment variables</TD></TR><TR CLASS=row><TD ALIGN="LEFT">English</TD><TD ALIGN="LEFT">Use English or <I CLASS=emphasis>awk</I> names for punctuation variables</TD></TR><TR CLASS=row><TD ALIGN="LEFT">Getopt::Long</TD><TD ALIGN="LEFT">Extended processing of command-line options</TD></TR><TR CLASS=row><TD ALIGN="LEFT">Getopt::Std</TD><TD ALIGN="LEFT">Process single-character switches with switch clustering</TD></TR><TR CLASS=row><TD ALIGN="LEFT">lib</TD><TD ALIGN="LEFT">Manipulate <tt CLASS=literal>@INC</tt> at compile time</TD></TR><TR CLASS=row><TD ALIGN="LEFT">Shell</TD><TD ALIGN="LEFT">Run shell commands transparently within Perl</TD></TR><TR CLASS=row><TD ALIGN="LEFT">strict</TD><TD ALIGN="LEFT">Restrict unsafe constructs</TD></TR><TR CLASS=row><TD ALIGN="LEFT">Symbol</TD><TD ALIGN="LEFT">Generate anonymous globs; qualify variable names</TD></TR><TR CLASS=row><TD ALIGN="LEFT">subs</TD><TD ALIGN="LEFT">Predeclare subroutine names</TD></TR><TR CLASS=row><TD ALIGN="LEFT">vars</TD><TD ALIGN="LEFT">Predeclare global variable names</TD></TR></TABLE><P></DIV><P><DIV CLASS=table><TABLE><CAPTION><A CLASS="TITLE" NAME="PERL2-CH-7-TAB-2">Table 7-2: General Programming: Error Handling and Logging</A></CAPTION><TR CLASS=row><TH ALIGN="LEFT">Module</TH><TH ALIGN="LEFT">Function</TH></TR><TR CLASS=row><TD ALIGN="LEFT">Carp</TD><TD ALIGN="LEFT">Generate error messages</TD></TR><TR CLASS=row><TD ALIGN="LEFT">diagnostics</TD><TD ALIGN="LEFT">Force verbose warning diagnostics</TD></TR><TR CLASS=row><TD ALIGN="LEFT">sigtrap</TD><TD ALIGN="LEFT">Enable stack backtrace on unexpected signals</TD></TR><TR CLASS=row><TD ALIGN="LEFT">Sys::Syslog</TD><TD ALIGN="LEFT">Perl interface to UNIX <I CLASS=emphasis>syslog</I> (3) calls</TD></TR></TABLE><P></DIV><P><DIV CLASS=table><TABLE><CAPTION><A CLASS="TITLE" NAME="PERL2-CH-7-TAB-3">Table 7-3: General Programming: File Access and Handling</A></CAPTION><TR CLASS=row><TH ALIGN="LEFT">Module</TH><TH ALIGN="LEFT">Function</TH></TR><TR CLASS=row><TD ALIGN="LEFT">Cwd</TD><TD ALIGN="LEFT">Get pathname of current working directory</TD></TR><TR CLASS=row><TD ALIGN="LEFT">DirHandle</TD><TD ALIGN="LEFT">Supply object methods for directory handles</TD></TR><TR CLASS=row><TD ALIGN="LEFT">File::Basename</TD><TD ALIGN="LEFT">Parse file specifications</TD></TR><TR CLASS=row><TD ALIGN="LEFT">File::CheckTree</TD><TD ALIGN="LEFT">Run many tests on a collection of files</TD></TR><TR CLASS=row><TD ALIGN="LEFT">File::Copy</TD><TD ALIGN="LEFT">Copy files or filehandles</TD></TR><TR CLASS=row><TD ALIGN="LEFT">File::Find</TD><TD ALIGN="LEFT">Traverse a file tree</TD></TR><TR CLASS=row><TD ALIGN="LEFT">File::Path</TD><TD ALIGN="LEFT">Create or remove a series of directories</TD></TR><TR CLASS=row><TD ALIGN="LEFT">FileCache</TD><TD ALIGN="LEFT">Keep more files open than the system permits</TD></TR><TR CLASS=row><TD ALIGN="LEFT">FileHandle</TD><TD ALIGN="LEFT">Supply object methods for filehandles</TD></TR><TR CLASS=row><TD ALIGN="LEFT">SelectSaver</TD><TD ALIGN="LEFT">Save and restore selected filehandle</TD></TR></TABLE><P></DIV><P><DIV CLASS=table><TABLE><CAPTION><A CLASS="TITLE" NAME="PERL2-CH-7-TAB-4">Table 7-4: General Programming: Text Processing and Screen Interfaces</A></CAPTION><TR CLASS=row><TH ALIGN="LEFT">Module</TH><TH ALIGN="LEFT">Function</TH></TR><TR CLASS=row><TD ALIGN="LEFT">Pod::Text</TD><TD ALIGN="LEFT">Convert POD data to formatted ASCII text</TD></TR><TR CLASS=row><TD ALIGN="LEFT">Search::Dict</TD><TD ALIGN="LEFT">Search for key in dictionary file</TD></TR><TR CLASS=row><TD ALIGN="LEFT">Term::Cap</TD><TD ALIGN="LEFT">Terminal capabilities interface</TD></TR><TR CLASS=row><TD ALIGN="LEFT">Term::Complete</TD><TD ALIGN="LEFT">Word completion module</TD></TR><TR CLASS=row><TD ALIGN="LEFT">Text::Abbrev</TD><TD ALIGN="LEFT">Create an abbreviation table from a list</TD></TR><TR CLASS=row><TD ALIGN="LEFT">Text::ParseWords</TD><TD ALIGN="LEFT">Parse text into a list of tokens</TD></TR><TR CLASS=row><TD ALIGN="LEFT">Text::Soundex</TD><TD ALIGN="LEFT">The Soundex Algorithm described by Knuth</TD></TR><TR CLASS=row><TD ALIGN="LEFT">Text::Tabs</TD><TD ALIGN="LEFT">Expand and unexpand tabs</TD></TR><TR CLASS=row><TD ALIGN="LEFT">Text::Wrap</TD><TD ALIGN="LEFT">Wrap text into a paragraph</TD></TR></TABLE><P></DIV><P><DIV CLASS=table><TABLE><CAPTION><A CLASS="TITLE" NAME="PERL2-CH-7-TAB-5">Table 7-5: Database Interfaces</A></CAPTION><TR CLASS=row><TH ALIGN="LEFT">Module</TH><TH ALIGN="LEFT">Function</TH></TR><TR CLASS=row><TD ALIGN="LEFT">AnyDBM_File</TD><TD ALIGN="LEFT">Provide framework for multiple DBMs</TD></TR><TR CLASS=row><TD ALIGN="LEFT">DB_File</TD><TD ALIGN="LEFT">Tied access to Berkeley DB</TD></TR><TR CLASS=row><TD ALIGN="LEFT">GDBM_File</TD><TD ALIGN="LEFT">Tied access to GDBM library</TD></TR><TR CLASS=row><TD ALIGN="LEFT">NDBM_File</TD><TD ALIGN="LEFT">Tied access to NDBM files</TD></TR><TR CLASS=row><TD ALIGN="LEFT">ODBM_File</TD><TD ALIGN="LEFT">Tied access to ODBM files</TD></TR><TR CLASS=row><TD ALIGN="LEFT">SDBM_File</TD><TD ALIGN="LEFT">Tied access to SDBM files</TD></TR></TABLE><P></DIV><P><DIV CLASS=table><TABLE><CAPTION><A CLASS="TITLE" NAME="PERL2-CH-7-TAB-6">Table 7-6: Mathematics</A></CAPTION><TR CLASS=row><TH ALIGN="LEFT">Module</TH><TH ALIGN="LEFT">Function</TH></TR><TR CLASS=row><TD ALIGN="LEFT">integer</TD><TD ALIGN="LEFT">Do arithmetic in integer instead of double</TD></TR><TR CLASS=row><TD ALIGN="LEFT">Math::BigFloat</TD><TD ALIGN="LEFT">Arbitrary-length floating-point math package</TD></TR><TR CLASS=row><TD ALIGN="LEFT">Math::BigInt</TD><TD ALIGN="LEFT">Arbitrary-length integer math package</TD></TR><TR CLASS=row><TD ALIGN="LEFT">Math::Complex</TD><TD ALIGN="LEFT">Complex numbers package</TD></TR></TABLE><P></DIV><P><DIV CLASS=table><TABLE><CAPTION><A CLASS="TITLE" NAME="PERL2-CH-7-TAB-7">Table 7-7: Networking and Interprocess Communication</A></CAPTION><TR CLASS=row><TH ALIGN="LEFT">Module</TH><TH ALIGN="LEFT">Function</TH></TR><TR CLASS=row><TD ALIGN="LEFT">IPC::Open2</TD><TD ALIGN="LEFT">Open a process for both reading and writing</TD></TR><TR CLASS=row><TD ALIGN="LEFT">IPC::Open3</TD><TD ALIGN="LEFT">Open a process for reading, writing, and error handling</TD></TR><TR CLASS=row><TD ALIGN="LEFT">Net::Ping</TD><TD ALIGN="LEFT">Check whether a host is online</TD></TR><TR CLASS=row><TD ALIGN="LEFT">Socket</TD><TD ALIGN="LEFT">Load the C <I CLASS=emphasis>socket.h</I> defines and structure manipulators</TD></TR><TR CLASS=row><TD ALIGN="LEFT">Sys::Hostname</TD><TD ALIGN="LEFT">Try every conceivable way to get hostname</TD></TR></TABLE><P></DIV><P><DIV CLASS=table><TABLE><CAPTION><A CLASS="TITLE" NAME="PERL2-CH-7-TAB-8">Table 7-8: Time and Locale</A></CAPTION><TR CLASS=row><TH ALIGN="LEFT">Module</TH><TH ALIGN="LEFT">Function</TH></TR><TR CLASS=row><TD ALIGN="LEFT">Time::Local</TD><TD ALIGN="LEFT">Efficiently compute time from local and GMT time</TD></TR><TR CLASS=row><TD ALIGN="LEFT">I18N::Collate</TD><TD ALIGN="LEFT">Compare 8-bit scalar data according to the current locale</TD></TR></TABLE><P></DIV><P><DIV CLASS=table><TABLE><CAPTION><A CLASS="TITLE" NAME="PERL2-CH-7-TAB-9">Table 7-9: For Developers: Autoloading and Dynamic Loading</A></CAPTION><TR CLASS=row><TH ALIGN="LEFT">Module</TH><TH ALIGN="LEFT">Function</TH></TR><TR CLASS=row><TD ALIGN="LEFT">AutoLoader</TD><TD ALIGN="LEFT">Load functions only on demand</TD></TR><TR CLASS=row><TD ALIGN="LEFT">AutoSplit</TD><TD ALIGN="LEFT">Split a module for autoloading</TD></TR><TR CLASS=row><TD ALIGN="LEFT">Devel::SelfStubber</TD><TD ALIGN="LEFT">Generate stubs for a SelfLoading module</TD></TR><TR CLASS=row><TD ALIGN="LEFT">DynaLoader</TD><TD ALIGN="LEFT">Automatic dynamic loading of Perl modules</TD></TR><TR CLASS=row><TD ALIGN="LEFT">SelfLoader</TD><TD ALIGN="LEFT">Load functions only on demand</TD></TR></TABLE><P></DIV><P><DIV CLASS=table><TABLE><CAPTION><A CLASS="TITLE" NAME="PERL2-CH-7-TAB-10">Table 7-10: For Developers: Language Extensions and Platform Development Support</A></CAPTION><TR CLASS=row><TH ALIGN="LEFT">Module</TH><TH ALIGN="LEFT">Function</TH></TR><TR CLASS=row><TD ALIGN="LEFT">ExtUtils::Install</TD><TD ALIGN="LEFT">Install files from here to there</TD></TR><TR CLASS=row><TD ALIGN="LEFT">ExtUtils::Liblist</TD><TD ALIGN="LEFT">Determine libraries to use and how to use them</TD></TR><TR CLASS=row><TD ALIGN="LEFT">ExtUtils::MakeMaker</TD><TD ALIGN="LEFT">Create a <I CLASS=emphasis>Makefile</I> for a Perl extension</TD></TR><TR CLASS=row><TD ALIGN="LEFT">ExtUtils::Manifest</TD><TD ALIGN="LEFT">Utilities to write and check a <I CLASS=emphasis>MANIFEST</I> file</TD></TR><TR CLASS=row><TD ALIGN="LEFT">ExtUtils::Miniperl</TD><TD ALIGN="LEFT">Write the C code for <I CLASS=emphasis>perlmain.c</I></TD></TR><TR CLASS=row><TD ALIGN="LEFT">ExtUtils::Mkbootstrap</TD><TD ALIGN="LEFT">Make a bootstrap file for use by DynaLoader</TD></TR><TR CLASS=row><TD ALIGN="LEFT">ExtUtils::Mksymlists</TD><TD ALIGN="LEFT">Write linker option files for dynamic extension</TD></TR><TR CLASS=row><TD ALIGN="LEFT">ExtUtils::MM_OS2</TD><TD ALIGN="LEFT">Methods to override UNIX behavior in ExtUtils::MakeMaker</TD></TR><TR CLASS=row><TD ALIGN="LEFT">ExtUtils::MM_Unix</TD><TD ALIGN="LEFT">Methods used by ExtUtils::MakeMaker</TD></TR><TR CLASS=row><TD ALIGN="LEFT">ExtUtils::MM_VMS</TD><TD ALIGN="LEFT">Methods to override UNIX behavior in ExtUtils::MakeMaker</TD></TR><TR CLASS=row><TD ALIGN="LEFT">Fcntl</TD><TD ALIGN="LEFT">Load the C <I CLASS=emphasis>fcntl.h</I> defines</TD></TR><TR CLASS=row><TD ALIGN="LEFT">POSIX</TD><TD ALIGN="LEFT">Interface to IEEE Std 1003.1</TD></TR><TR CLASS=row><TD ALIGN="LEFT">Safe</TD><TD ALIGN="LEFT">Create safe namespaces for evaluating Perl code</TD></TR><TR CLASS=row><TD ALIGN="LEFT">Test::Harness</TD><TD ALIGN="LEFT">Run Perl standard test scripts with statistics</TD></TR></TABLE><P></DIV><P><DIV CLASS=table><TABLE><CAPTION><A CLASS="TITLE" NAME="PERL2-CH-7-TAB-11">Table 7-11: For Developers: Object-Oriented Programming Support</A></CAPTION><TR CLASS=row><TH ALIGN="LEFT">Module</TH><TH ALIGN="LEFT">Function</TH></TR><TR CLASS=row><TD ALIGN="LEFT">Exporter</TD><TD ALIGN="LEFT">Default import method for modules</TD></TR><TR CLASS=row><TD ALIGN="LEFT">overload</TD><TD ALIGN="LEFT">Overload Perl's mathematical operations</TD></TR><TR CLASS=row><TD ALIGN="LEFT">Tie::Hash</TD><TD ALIGN="LEFT">Base class definitions for tied hashes</TD></TR><TR CLASS=row><TD ALIGN="LEFT">Tie::Scalar</TD><TD ALIGN="LEFT">Base class definitions for tied scalars</TD></TR><TR CLASS=row><TD ALIGN="LEFT">Tie::StdHash</TD><TD ALIGN="LEFT">Base class definitions for tied hashes</TD></TR><TR CLASS=row><TD ALIGN="LEFT">Tie::StdScalar</TD><TD ALIGN="LEFT">Base class definitions for tied scalars</TD></TR><TR CLASS=row><TD ALIGN="LEFT">Tie::SubstrHash</TD><TD ALIGN="LEFT">Fixed-table-size, fixed-key-length hashing</TD></TR></TABLE><P></DIV><DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1A">7.1 Beyond the Standard Library</A></h2><P CLASS=para>If you don't find an entry in the standard library that fits your needs,it's still quite possible that someone has written code that will beuseful to you.  There are many superb library modules that are notincluded in the standard distribution, for various practical, political,and pathetic reasons.  To find out what is available, you can look atthe Comprehensive Perl Archive Network (CPAN).  See the discussion ofCPAN in the Preface.<P CLASS=para>Here are the major categories of modules available from CPAN:<P><UL CLASS=itemizedlist><li CLASS=listitem>Archiving and Compression<P><li CLASS=listitem>Authentication, Security and Encryption<P><li CLASS=listitem>Control Flow Utilities (callbacks, exceptions, and so on)<P><li CLASS=listitem>Data Types and Data Type Utilities<P><li CLASS=listitem>Database Interfaces<P><li CLASS=listitem>Development Support<P><li CLASS=listitem>Filehandle and Input/Output Stream Utilities<P><li CLASS=listitem>File Names, File Systems and File Locking<P><li CLASS=listitem>Images, Pixmap and Bitmap Manipulation, Drawing and Graphing<P><li CLASS=listitem>Interfaces to/Emulations of Other Programming Languages<P><li CLASS=listitem>Internationalization and Locale<P><li CLASS=listitem>Language Extensions and Documentation Tools<P><li CLASS=listitem>Mail and Usenet News<P><li CLASS=listitem>Miscellaneous Modules<P><li CLASS=listitem>Networking, Device Control (modems) and Inter-process Communication<P><li CLASS=listitem>Operating System Interfaces<P><li CLASS=listitem>Option, Argument, Parameter and Configuration File Processing<P><li CLASS=listitem>Server and Daemon Utilities<P><li CLASS=listitem>String Processing, Language Text Processing, Parsing and Searching<P><li CLASS=listitem>User Interfaces<P><li CLASS=listitem>World Wide Web, HTML, HTTP, CGI, MIME<P></UL><P CLASS=para>Allow us again to reiterate once more that these things are in a stateof flux, and you will certainly find more and better stuff on CPANthan we can possibly describe here.  The Perl of Great Price hasoutgrown its oyster, so to speak, because Perl is truly a communityeffort these days--see John 14:12.</DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch06_04.htm"><IMG SRC="gifs/txtpreva.gif"     ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="ch07_02.htm"><IMG SRC="gifs/txtnexta.gif"     ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>Generating other languages in Perl</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>Library Modules</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>