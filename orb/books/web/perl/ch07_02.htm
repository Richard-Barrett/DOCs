<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 7] 7.2 Library Modules</TITLE><META NAME="author" CONTENT="Larry Wall, Tom Christiansen, and Randal Schwartz"><META NAME="date" CONTENT="Mon Mar 17 13:15:42 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="Perl"><META NAME="title" CONTENT="Programming Perl, Second Edition"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif"     ALT="Programming Perl, Second Edition"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch07_01.htm"><IMG SRC="gifs/txtpreva.gif"     ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 7</b></td><td width=172 align=right valign=top><A HREF="ch08_01.htm"><IMG SRC="gifs/txtnexta.gif"     ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1B">7.2 Library Modules</A></h2><P CLASS=para>As mentioned earlier, the following library modules are arranged inalphabetical order, for easy reference. <DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.1">AnyDBM_File--Provide Framework for Multiple DBMs</A></h3><DIV CLASS=programlisting><P><PRE>use AnyDBM_File;</PRE></DIV><P CLASS=para><A NAME="CH07.DBM1"></A><A NAME="CH07.DBM2"></A>This module is a "pure virtual base class"--it has nothing of its own.It's just there to inherit from the various DBM packages.  By default itinherits from NDBM_File for compatibility with earlier versions ofPerl.  If it doesn't find NDBM_File, it looks for DB_File, GDBM_File,SDBM_File (which is always there--it comes with Perl), and finallyODBM_File.<P CLASS=para>Perl's <A HREF="ch03_02.htm#PERL2-CMD-DBMOPEN">dbmopen</A> function (which now exists only for backwardcompatibility) actually just calls <A HREF="ch03_02.htm#PERL2-CMD-TIE">tie</A> to bind a hash to AnyDBM_File.The effect is to bind the hash to one of the specific DBM classes thatAnyDBM_File inherits from.<P CLASS=para>You can override the defaults and determine which class <A HREF="ch03_02.htm#PERL2-CMD-DBMOPEN">dbmopen</A> willtie to.  Do this by redefining <B>@ISA</B>:<DIV CLASS=programlisting><P><PRE>@AnyDBM_File::ISA = qw(DB_File GDBM_File NDBM_File);</PRE></DIV><P CLASS=para>Note, however, that an explicit <A HREF="ch03_02.htm#PERL2-CMD-USE">use</A> takes priority over the orderingof <B>@ISA</B>, so that:<DIV CLASS=programlisting><P><PRE>use GDBM_File;</PRE></DIV><P CLASS=para>will cause the next <A HREF="ch03_02.htm#PERL2-CMD-DBMOPEN">dbmopen</A> to tie your hash to GDBM_File.<P CLASS=para>You can tie hash variables directly to the desired class yourself,without using <A HREF="ch03_02.htm#PERL2-CMD-DBMOPEN">dbmopen</A> or AnyDBM_File.  For example,by using multiple DBM implementations, you can copy a database from oneformat to another:<DIV CLASS=programlisting><P><PRE>use Fcntl;         # for O_* valuesuse NDBM_File;use DB_File;tie %oldhash, "NDBM_File", $old_filename, O_RDWR;tie %newhash, "DB_File",   $new_filename, O_RDWR|O_CREAT|O_EXCL, 0644;while (($key,$val) = each %oldhash) {    $newhash{$key} = $val;}</PRE></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.1">DBM comparisons</A></h4><P CLASS=para>Here's a table of the features that the different DBMish packages offer:<DIV CLASS=informaltable><P><A NAME="PERL2-CH-7-TAB-12"></A><TABLE CLASS=INFORMALTABLE><TR CLASS=row><TH ALIGN="left">Feature</TH><TH ALIGN="left">ODBM</TH><TH ALIGN="left">NDBM</TH><TH ALIGN="left">SDBM</TH><TH ALIGN="left">GDBM</TH><TH ALIGN="left">BSD-DB</TH></TR><TR CLASS=row><TD ALIGN="left">Linkage comes with Perl</TD><TD ALIGN="left">Yes</TD><TD ALIGN="left">Yes</TD><TD ALIGN="left">Yes</TD><TD ALIGN="left">Yes</TD><TD ALIGN="left">Yes</TD></TR><TR CLASS=row><TD ALIGN="left">Source bundled with Perl</TD><TD ALIGN="left">No</TD><TD ALIGN="left">No</TD><TD ALIGN="left">Yes</TD><TD ALIGN="left">No</TD><TD ALIGN="left">No</TD></TR><TR CLASS=row><TD ALIGN="left">Source redistributable</TD><TD ALIGN="left">No</TD><TD ALIGN="left">No</TD><TD ALIGN="left">Yes</TD><TD ALIGN="left">GPL</TD><TD ALIGN="left">Yes</TD></TR><TR CLASS=row><TD ALIGN="left">Often comes with UNIX</TD><TD ALIGN="left">Yes</TD><TD ALIGN="left">Yes[1]</TD><TD ALIGN="left">No</TD><TD ALIGN="left">No</TD><TD ALIGN="left">No</TD></TR><TR CLASS=row><TD ALIGN="left">Builds OK on UNIX</TD><TD ALIGN="left">N/A</TD><TD ALIGN="left">N/A</TD><TD ALIGN="left">Yes</TD><TD ALIGN="left">Yes</TD><TD ALIGN="left">Yes[2]</TD></TR><TR CLASS=row><TD ALIGN="left">Code size</TD><TD ALIGN="left">Varies[3]</TD><TD ALIGN="left">Varies[3]</TD><TD ALIGN="left">Small</TD><TD ALIGN="left">Big</TD><TD ALIGN="left">Big</TD></TR><TR CLASS=row><TD ALIGN="left">Disk usage</TD><TD ALIGN="left">Varies[3]</TD><TD ALIGN="left">Varies[3]</TD><TD ALIGN="left">Small</TD><TD ALIGN="left">Big</TD><TD ALIGN="left">OK[4]</TD></TR><TR CLASS=row><TD ALIGN="left">Speed</TD><TD ALIGN="left">Varies[3]</TD><TD ALIGN="left">Varies[3]</TD><TD ALIGN="left">Slow</TD><TD ALIGN="left">OK</TD><TD ALIGN="left">Fast</TD></TR><TR CLASS=row><TD ALIGN="left">FTPable</TD><TD ALIGN="left">No</TD><TD ALIGN="left">No</TD><TD ALIGN="left">Yes</TD><TD ALIGN="left">Yes</TD><TD ALIGN="left">Yes</TD></TR><TR CLASS=row><TD ALIGN="left">Easy to build</TD><TD ALIGN="left">N/A</TD><TD ALIGN="left">N/A</TD><TD ALIGN="left">Yes</TD><TD ALIGN="left">Yes</TD><TD ALIGN="left">OK[5]</TD></TR><TR CLASS=row><TD ALIGN="left">Block size limits</TD><TD ALIGN="left">1k</TD><TD ALIGN="left">4k</TD><TD ALIGN="left">1k[6]</TD><TD ALIGN="left">None</TD><TD ALIGN="left">None</TD></TR><TR CLASS=row><TD ALIGN="left">Byte-order independent</TD><TD ALIGN="left">No</TD><TD ALIGN="left">No</TD><TD ALIGN="left">No</TD><TD ALIGN="left">No</TD><TD ALIGN="left">Yes</TD></TR><TR CLASS=row><TD ALIGN="left">User-defined sort order</TD><TD ALIGN="left">No</TD><TD ALIGN="left">No</TD><TD ALIGN="left">No</TD><TD ALIGN="left">No</TD><TD ALIGN="left">Yes</TD></TR><TR CLASS=row><TD ALIGN="left">Wildcard lookups</TD><TD ALIGN="left">No</TD><TD ALIGN="left">No</TD><TD ALIGN="left">No</TD><TD ALIGN="left">No</TD><TD ALIGN="left">Yes</TD></TR><tr><td colspan=6><p><b>Footnotes:</b><p><blockquote>[1] <P CLASS=para>On mixed-universemachines, may be in the BSD compatibility library, which is often shunned.[2] <P CLASS=para>Providing you have an ANSI C compiler.[3] <P CLASS=para>Depends on how much your vendor has "tweaked" it.[4] <P CLASS=para>Can be trimmed if you compile for one access method.[5] <P CLASS=para>See the DB_File library module. Requires symbolic links.[6] <P CLASS=para>By default, but can be redefined (at the expense of compatibility with older files).</blockquote></td></tr></TABLE><P></DIV></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.2">See also</A></h4><P CLASS=para>Relevant library modules include: DB_File, GDBM_File, NDBM_File, ODBM_File, andSDBM_File.  Related manpages: <I CLASS=emphasis>dbm</I> (3),<I CLASS=emphasis>ndbm</I> (3).  Tied variables are discussed extensivelyin <A HREF="ch05_01.htm">Chapter 5, <i>Packages, Modules, and Object Classes</i></A>, and the <A HREF="ch03_02.htm#PERL2-CMD-DBMOPEN">dbmopen</A> entry in <A HREF="ch03_01.htm">Chapter 3, <i>Functions</i></A>, may also behelpful.  You can pick up the unbundled modules from the<I CLASS=emphasis>src/misc/</I> directory on your nearest CPAN site.  Here arethe most popular ones, but note that their version numbers may have changed bythe time you read this:<DIV CLASS=programlisting><P><PRE>http://www.perl.com/CPAN/src/misc/db.1.85.tar.gzhttp://www.perl.com/CPAN/src/misc/gdbm-1.7.3.tar.gz</PRE></DIV></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.2">AutoLoader--Load Functions Only on Demand</A></h3><DIV CLASS=programlisting><P><PRE>package GoodStuff;use Exporter;use AutoLoader;@ISA = qw(Exporter AutoLoader);</PRE></DIV><P CLASS=para>The AutoLoader module provides a standard mechanism for delayed loading of functions stored in separate files on disk.Each file has the same name as the function (plus a <I CLASS=emphasis>.al</I> ), andcomes from a directory named after the package (with the <I CLASS=emphasis>auto/</I> directory).For example, the function named <tt CLASS=literal>GoodStuff::whatever()</tt>would be loaded from the file<I CLASS=emphasis>auto/GoodStuff/whatever.al</I>.  <P CLASS=para>A module using the AutoLoader should have the special marker <tt CLASS=literal>_ _END_ _</tt>prior to the actual subroutine declarations.  All code before thismarker is loaded and compiled when the module is used.  At the marker,Perl stops parsing the file.<P CLASS=para>When a subroutine not yet in memory is called, the <tt CLASS=literal>AUTOLOAD</tt> function attempts tolocate it in a directory relative to the location of the module file itself. Asan example, assume <I CLASS=emphasis>POSIX.pm</I> is located in<I CLASS=emphasis>/usr/local/lib/perl5/POSIX.pm</I>. The AutoLoader will look forthe corresponding subroutines for this package in<I CLASS=emphasis>/usr/ local/lib/perl5/auto/POSIX/*.al</I>.<P CLASS=para>Lexicals declared with <A HREF="ch03_02.htm#PERL2-CMD-MY">my</A> in themain block of a package using the AutoLoader will not be visible to autoloadedfunctions, because the given lexical scope ends at the<tt CLASS=literal>_ _END_ _</tt> marker.  A module using suchvariables as file-scoped globals will not work properly under the AutoLoader.Package globals must be used instead.  When running under <tt CLASS=literal>usestrict</tt>, the <tt CLASS=literal>use vars</tt> pragma may be employed in suchsituations as an alternative to explicitly qualifying all globals with thepackage name.  Package variables predeclared with this pragma will be accessibleto any autoloaded routines, but of course will not be invisible outside themodule file.<P CLASS=para>The AutoLoader is a counterpart to the SelfLoader module. Both delay the loadingof subroutines, but the SelfLoader accomplishes this by storing the subroutinesright there in the module file rather than in separate files elsewhere.  Whilethis avoids the use of a hierarchy of disk files and the associated I/O for eachroutine loaded, the SelfLoader suffers a disadvantage in the one-time parsing ofthe lines after <tt CLASS=literal>_ _DATA_ _</tt>, after whichroutines are cached.  The SelfLoader can also handle multiple packages in afile.<P CLASS=para>AutoLoader, on the other hand, only reads code as it is requested,and in many cases should be faster.  But it requires a mechanismlike AutoSplit to be used to create the individual files.<P CLASS=para>On systems with restrictions on file name length, the file corresponding to asubroutine may have a shorter name than the routine itself.  This can lead toconflicting filenames. The AutoSplit module will warn of these potentialconflicts when used to split a module.<P CLASS=para>See the discussion of autoloading in <A HREF="ch05_01.htm">Chapter 5, <i>Packages, Modules, and Object Classes</i></A>.  Also see theAutoSplit module, a utility that automatically splits a module into a collectionof files for autoloading.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.3">AutoSplit--Split a Module for Autoloading</A></h3><DIV CLASS=programlisting><P><PRE># from a programuse AutoSplit;autosplit_modules(@ARGV)# or from the command lineperl -MAutoSplit -e 'autosplit(<tt CLASS=replaceable><i>FILE, DIR, KEEP, CHECK, MODTIME</i></tt>)' ... # another interfaceperl -MAutoSplit -e 'autosplit_lib_modules(@ARGV)' ...</PRE></DIV><P CLASS=para><A NAME="CH07.ASM1"></A><A NAME="CH07.ASM2"></A><A NAME="CH07.ASM3"></A>This function splits up your program or module into files that theAutoLoader module can handle.  It is mainly used to buildautoloading Perl library modules, especially complex ones like POSIX.It is used by both the standard Perl libraries and by the MakeMakermodule to automatically configure libraries for autoloading.<P CLASS=para>The <tt CLASS=literal>autosplit()</tt> interface splits the specified<tt CLASS=replaceable><i>FILE</i></tt> into a hierarchy rooted at the directory<tt CLASS=replaceable><i>DIR</i></tt>.  It creates directories as needed to reflectclass hierarchy.  It then creates the file <I CLASS=emphasis>autosplit.ix</I>,which acts as both a forward declaration for all package routines and also as atimestamp for when the hierarchy was last updated.<P CLASS=para>The remaining three arguments to <tt CLASS=literal>autosplit()</tt> govern otheroptions to the autosplitter.  If the third argument,<tt CLASS=replaceable><i>KEEP</i></tt>, is false, then any pre-existing<I CLASS=emphasis>.al</I> files in the autoload directory are removed if they areno longer part of the module (obsoleted functions).  The fourth argument,<tt CLASS=replaceable><i>CHECK</i></tt>, instructs<tt CLASS=literal>autosplit()</tt> tocheck the module currently being split to ensure that it really does include a<A HREF="ch03_02.htm#PERL2-CMD-USE">use</A> specification for the AutoLoader module,and skips the module if AutoLoader is not detected.  Lastly, the<tt CLASS=replaceable><i>MODTIME</i></tt> argument specifies that<tt CLASS=literal>autosplit()</tt> is to check the modification time of the moduleagainst that of the <I CLASS=emphasis>autosplit.ix</I> file, and only split themodule if it is newer.<P CLASS=para>Here's a typical use of AutoSplit by the MakeMaker utility via thecommand line:<DIV CLASS=programlisting><P><PRE>perl -MAutoSplit -e 'autosplit($ARGV[0], $ARGV[1], 0, 1, 1)'</PRE></DIV><P CLASS=para>MakeMaker defines thisas a <I CLASS=emphasis>make</I> macro, and it is invoked with file and directoryarguments.  The <tt CLASS=literal>autosplit()</tt> function splits the named file intothe given directory and deletes obsolete <I CLASS=emphasis>.al</I> files, after checkingfirst that the module does use the AutoLoader and ensuring that the moduleisn't already split in its current form.<P CLASS=para>The <tt CLASS=literal>autosplit_lib_modules()</tt> form is used in the building of Perl. Ittakes as input a list of files (modules) that are assumed to reside in adirectory <I CLASS=emphasis>lib/</I> relative to the current directory.  Each file is sentto the autosplitter one at a time, to be split into the directory<I CLASS=emphasis>lib/auto/</I>.<P CLASS=para>In both usages of the autosplitter, only subroutines defined following thePerl special marker <tt CLASS=literal>_ _END_ _</tt> are split out into separate files.Routines placed prior to this marker are not autosplit, but are forced to loadwhen the module is first required.<P CLASS=para>Currently, AutoSplit cannot handle multiple package specificationswithin one file.<P CLASS=para>AutoSplit will inform the user if it is necessary to create the top-leveldirectory specified in the invocation.  It's better if the script orinstallation process that invokes AutoSplit has created the full directorypath ahead of time.  This warning may indicate that the module is being splitinto an incorrect path.<P CLASS=para>AutoSplit will also warn the user of subroutines whose names cause potentialnaming conflicts on machines with severely limited (eight characters orless) filename length.  Since the subroutine name is used as the filename,these warnings can aid in portability to such systems.<P CLASS=para>Warnings are issued and the file skipped if AutoSplit cannot locateeither the <tt CLASS=literal>_ _END_ _</tt> marker or a specification of the form <tt CLASS=literal>package Name;</tt>.AutoSplit will also complain if it can't create directories or files.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.4">Benchmark--Check and Compare Running Times of Code</A></h3><A NAME="CH07.BMM1"></A><A NAME="CH07.BMM2"></A><A NAME="CH07.BMM3"></A><DIV CLASS=programlisting><P><PRE>use Benchmark;# timeit():  run $count iterations of the given Perl code, and time it$t = timeit($count, '<tt CLASS=replaceable><i>CODE</i></tt>');  # $t is now a Benchmark object# timestr():  convert Benchmark times to printable stringsprint "$count loops of '<tt CLASS=replaceable><i>CODE</i></tt>' took:", timestr($t), "\n";# timediff():  calculate the difference between two times$t = timediff($t1 - $t2);# timethis():  run "code" $count times with timeit(); also, print out a#     header saying "timethis $count: "$t = timethis($count, "<tt CLASS=replaceable><i>CODE</i></tt>");# timethese():  run timethis() on multiple chunks of code@t = timethese($count, {    'Name1' =&gt; '...<tt CLASS=replaceable><i>CODE1</i></tt>...',    'Name2' =&gt; '...<tt CLASS=replaceable><i>CODE2</i></tt>...',});# new method:  return the current time$t0 = new Benchmark;# ... your <tt CLASS=replaceable><i>CODE</i></tt> here ...$t1 = new Benchmark;$td = timediff($t1, $t0);print "the code took: ", timestr($td), "\n";# debug method:  enable or disable debuggingBenchmark-&gt;debug (1);$t = timeit(10, ' 5 ** $Global ');Benchmark-&gt;debug(0);</PRE></DIV><P CLASS=para>The Benchmark module encapsulates a number of routines to help youfigure out how long it takes to execute some code a given number of timeswithin a loop.<P CLASS=para>For the <tt CLASS=literal>timeit()</tt> routine, <tt CLASS=literal>$count</tt> is thenumber of times to run the loop.  <tt CLASS=replaceable><i>CODE</i></tt> is a stringcontaining the code to run.  <tt CLASS=literal>timeit()</tt> runs a null loop with<tt CLASS=literal>$count</tt> iterations, and then runs the same loop with your codeinserted.  It reports the difference between the times of execution.<P CLASS=para>For <tt CLASS=literal>timethese()</tt>, a loop of <tt CLASS=literal>$count</tt> iterations is run oneach code chunk separately, and the results are reported separately.The code to run is given as a hash with keys that are names and valuesthat are code.  <tt CLASS=literal>timethese()</tt> is handy for quick tests to determinewhich way of doing something is faster.  For example:<DIV CLASS=programlisting><P><PRE>$ perl -MBenchmark -Mintegertimethese(100000, { add =&gt; '$i += 2', inc =&gt; '$i++; $i++' });_ _END_ _Benchmark: timing 1000000 iterations of add, inc...       add:  4 secs ( 4.52 usr  0.00 sys =  4.52 cpu)       inc:  6 secs ( 5.32 usr  0.00 sys =  5.32 cpu)</PRE></DIV><P CLASS=para>The following routines are exported into your namespaceif you use the Benchmark module:<DIV CLASS=programlisting><P><PRE>timeit()timethis()timethese()timediff()timestr()</PRE></DIV><P CLASS=para>The following routines will be exported into your namespaceif you specifically ask that they be imported:<DIV CLASS=programlisting><P><PRE>clearcache()     # clear just the cache element indexed by $keyclearallcache()  # clear the entire cachedisablecache()   # do not use the cacheenablecache()    # resume caching</PRE></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.3">Notes</A></h4><P CLASS=para>Code is executed in the caller's package.<P CLASS=para>The null loop times are cached, the key being thenumber of iterations.  You can control caching with calls like these:<DIV CLASS=programlisting><P><PRE>clearcache($key);clearallcache();disablecache();enablecache();</PRE></DIV><P CLASS=para>Benchmark inherits only from the Exporter class.<P CLASS=para>The elapsed time is measured using <I CLASS=emphasis>time</I> (2) and thegranularity is therefore only one second.  Times are given in seconds for thewhole loop (not divided by the number of iterations).  Short tests may producenegative figures because Perl can appear to take longer to execute the emptyloop than a short test.<P CLASS=para>The user and system CPU time is measured to millisecond accuracy using<I CLASS=emphasis>times</I> (3).  In general, you should pay moreattention to the CPU time than to elapsed time, especially if other processesare running on the system.  Also, elapsed times of five seconds or more areneeded for reasonable accuracy.<P CLASS=para>Because you pass in a string to be <A HREF="ch03_02.htm#PERL2-CMD-EVAL">eval</A>edinstead of a closure to be executed, lexical variables declared with <A HREF="ch03_02.htm#PERL2-CMD-MY">my</A> outside of the <A HREF="ch03_02.htm#PERL2-CMD-EVAL">eval</A> are not visible.</DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.5">Carp--Generate Error Messages</A></h3><DIV CLASS=programlisting><P><PRE>use Carp;carp "Be careful!";         # warn of errors (from perspective of caller)croak "We're outta here!";  # die of errors (from perspective of caller)confess "Bye!";             # die of errors with stack backtrace</PRE></DIV><P CLASS=para><tt CLASS=literal>carp()</tt> and <tt CLASS=literal>croak()</tt> behave like <A HREF="ch03_02.htm#PERL2-CMD-WARN">warn</A> and <A HREF="ch03_02.htm#PERL2-CMD-DIE">die</A>,respectively, except that they report the error as occurring not at theline of code where they are invoked, but at a line in one of the callingroutines.  Suppose, for example, that you have a routine <tt CLASS=literal>goo()</tt>containing an invocation of <tt CLASS=literal>carp()</tt>.  In that case--and assumingthat the current stack shows no callers from a package other than thecurrent one--<tt CLASS=literal>carp()</tt> will report the error as occurring where<tt CLASS=literal>goo()</tt> was called.  If, on the other hand, callers from differentpackages are found on the stack, then the error is reported as occurringin the package immediately preceding the package in which the<tt CLASS=literal>carp()</tt> invocation occurs.The intent is to let library modules act a little more like built-infunctions, which always report errors where you call them from.<P CLASS=para><tt CLASS=literal>confess()</tt> is like <A HREF="ch03_02.htm#PERL2-CMD-DIE">die</A> except that it prints out a stackbacktrace.  The error is reported at the line where <tt CLASS=literal>confess()</tt> isinvoked, not at a line in one of the calling routines.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.6">Config--Access Perl Configuration Information</A></h3><DIV CLASS=programlisting><P><PRE>use Config;if ($Config{cc} =~ /gcc/) {    print "built by gcc\n";}use Config qw(myconfig config_sh config_vars);print myconfig();print config_sh();config_vars(qw(osname archname));</PRE></DIV><P CLASS=para>The Config module contains all the information that the<I CLASS=emphasis>Configure</I> script had to figure out at Perl buildtime (over 450values).[1]<blockquote class=footnote><P CLASS=para>[1]  Perl was written in C, not because it's a portablelanguage, but because it's a ubiquitous language.  A bare C program is about asportable as Chuck Yeager on foot.  </blockquote><P CLASS=para>Shell variables from the <I CLASS=emphasis>config.sh</I> file (written by<I CLASS=emphasis>Configure</I>) are stored in a readonly hash, <tt CLASS=literal>%Config</tt>, indexedby their names.  Values set to the string <tt CLASS=literal>"undef"</tt> in<I CLASS=emphasis>config.sh</I> are returned as undefined values.  The Perl <A HREF="ch03_02.htm#PERL2-CMD-EXISTS">exists</A>function should be used to check whether a named variable exists.<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>myconfig</tt><DD><P CLASS=para>Returns a textual summary of the major Perl configuration values.See also the explanation of Perl's <B>-V</B> command-line switch in <A HREF="ch06_01.htm">Chapter 6, <i>Social Engineering</i></A>.<p><DT CLASS=varlistentry><tt CLASS=literal>config_sh</tt><DD><P CLASS=para>Returns the entire Perl configuration information in the form of theoriginal <I CLASS=emphasis>config.sh</I> shell variable assignment script.<p><DT CLASS=varlistentry><tt CLASS=literal>config_vars(@names)</tt><DD><P CLASS=para>Prints to <tt CLASS=literal>STDOUT</tt> the values of the named configuration variables.  Each isprinted on a separate line in the form:<DIV CLASS=programlisting><P><PRE>name='value';</PRE></DIV><P CLASS=para>Names that are unknown are output as <tt CLASS=literal>name='UNKNOWN';</tt>.</DL><P CLASS=para>Here's a more sophisticated example using <tt CLASS=literal>%Config</tt>:<DIV CLASS=programlisting><P><PRE>use Config;defined $Config{sig_name} or die "No sigs?";foreach $name (split(' ', $Config{sig_name})) {    $signo{$name} = $i;    $signame[$i] = $name;    $i++;}print "signal #17 = $signame[17]\n";if ($signo{ALRM}) {    print "SIGALRM is $signo{ALRM}\n";}</PRE></DIV><P CLASS=para>Because configuration information is not stored within the Perl executableitself, it is possible (but unlikely) that the information might notrelate to the actual Perl binary that is being used to access it.The Config module checks the Perl version number when loaded to tryto prevent gross mismatches, but can't detect subsequent rebuilds ofthe same version.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.7">Cwd--Get Pathname of Current Working Directory</A></h3><DIV CLASS=programlisting><P><PRE>use Cwd;$dir = cwd();           # get current working directory safest way$dir = getcwd();        # like getcwd(3) or getwd(3)$dir = fastcwd();       # faster and more dangeroususe Cwd 'chdir';        # override chdir; keep PWD up to datechdir "/tmp";print $ENV{PWD};        # prints "/tmp"</PRE></DIV><P CLASS=para><tt CLASS=literal>cwd()</tt> gets the current working directoryusing the most natural and safest form for the currentarchitecture.  For most systems it is identical to <tt CLASS=literal>`pwd`</tt> (but withoutthe trailing line terminator).<P CLASS=para><tt CLASS=literal>getcwd()</tt> does the same thing by re-implementing <I CLASS=emphasis>getcwd</I> (3)or <I CLASS=emphasis>getwd</I> (3) in Perl.<P CLASS=para><tt CLASS=literal>fastcwd()</tt> looks the same as <tt CLASS=literal>getcwd()</tt>, but runs faster.It's also more dangerous because you might <A HREF="ch03_02.htm#PERL2-CMD-CHDIR">chdir</A> out of adirectory that you can't <A HREF="ch03_02.htm#PERL2-CMD-CHDIR">chdir</A> back into.<P CLASS=para>It is recommended that one of these functions be used in <I CLASS=emphasis>all</I> codeto ensure portability because the <I CLASS=emphasis>pwd</I> program probably only existson UNIX systems.<P CLASS=para>If you consistently override your <A HREF="ch03_02.htm#PERL2-CMD-CHDIR">chdir</A> built-in function in allpackages of your program, then your <tt CLASS=literal>PWD</tt> environment variable willautomatically be kept up to date.  Otherwise, you shouldn't rely on it.(Which means you probably shouldn't rely on it.)</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.8">DB_File--Access to Berkeley DB</A></h3><DIV CLASS=programlisting><P><PRE>use DB_File;# brackets in following code indicate optional arguments[$X =] tie %hash,  "DB_File", $filename [, $flags, $mode, $DB_HASH];[$X =] tie %hash,  "DB_File", $filename, $flags, $mode, $DB_BTREE;[$X =] tie @array, "DB_File", $filename, $flags, $mode, $DB_RECNO;$status = $X-&gt;del($key [, $flags]);$status = $X-&gt;put($key, $value [, $flags]);$status = $X-&gt;get($key, $value [, $flags]);$status = $X-&gt;seq($key, $value [, $flags]);$status = $X-&gt;sync([$flags]);$status = $X-&gt;fd;untie %hash;untie @array;</PRE></DIV><P CLASS=para><A NAME="CH07.DBF1"></A><A NAME="CH07.DBF2"></A>DB_File is the most flexible of the DBM-style tie modules.  Itallows Perl programs to make use of thefacilities provided by Berkeley DB (not included).  If you intend to use thismodule you should really have a copy of the Berkeley DB manual page athand.  The interface defined here mirrors the Berkeley DB interfaceclosely.<P CLASS=para>Berkeley DB is a C library that provides a consistent interface to anumber of database formats.  DB_File provides an interface to allthree of the database (file) types currently supported by Berkeley DB.<P CLASS=para>The file types are:<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>DB_HASH</tt><DD><P CLASS=para>Allows arbitrary key/data pairs to be stored in data files.  This isequivalent to the functionality provided by other hashing packages likeDBM, NDBM, ODBM, GDBM, and SDBM.  Remember, though, the files createdusing <tt CLASS=literal>DB_HASH</tt> are not binary compatible with any of the otherpackages mentioned.A default hashing algorithm that will be adequate for mostapplications is built into Berkeley DB.  If you do need to use your ownhashing algorithm, it's possible to write your own and haveDB_File use it instead.<p><DT CLASS=varlistentry><tt CLASS=literal>DB_BTREE</tt><DD><P CLASS=para>The btree format allows arbitrary key/data pairs to be stored in asorted, balanced binary tree.It is possible to provide a user-definedPerl routine to perform the comparison of keys.  By default, though, thekeys are stored in lexical order.  This is useful for providing an ordering for your hash keys, and may be used on hashes that are only in memory and never go to disk.<p><DT CLASS=varlistentry><tt CLASS=literal>DB_RECNO</tt><DD><P CLASS=para><tt CLASS=literal>DB_RECNO</tt> allows both fixed-length and variable-length flat text filesto be manipulated using the same key/value pair interface as in <tt CLASS=literal>DB_HASH</tt>and <tt CLASS=literal>DB_BTREE</tt>.  In this case the key will consist of a record (line)number.</DL><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.4">How does DB_File interface to Berkeley DB?</A></h4><P CLASS=para>DB_File gives access to Berkeley DB files using Perl's <A HREF="ch03_02.htm#PERL2-CMD-TIE">tie</A>function.  This allows DB_File to access Berkeley DB files using either ahash (for <tt CLASS=literal>DB_HASH</tt> and <tt CLASS=literal>DB_BTREE</tt> file types) oran ordinary array (for the <tt CLASS=literal>DB_RECNO</tt> file type).<P CLASS=para>In addition to the <A HREF="ch03_02.htm#PERL2-CMD-TIE">tie</A> interface, it is also possible to use most ofthe functions provided in the Berkeley DB API.</DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.5">Differences from Berkeley DB</A></h4><P CLASS=para>Berkeley DB uses the function <I CLASS=emphasis>dbopen</I> (3) to open or create a database.Below is the C prototype for <I CLASS=emphasis>dbopen</I> (3).<DIV CLASS=programlisting><P><PRE>DB *dbopen (const char *file, int flags, int mode,        DBTYPE type, const void *openinfo)</PRE></DIV><P CLASS=para>The <tt CLASS=literal>type</tt> parameter is an enumeration selecting one of thethree interface methods, <tt CLASS=literal>DB_HASH</tt>, <tt CLASS=literal>DB_BTREE</tt> or<tt CLASS=literal>DB_RECNO</tt>.Depending on which of these is actually chosen, the final parameter,<tt CLASS=literal>openinfo</tt>, points to a data structure that allows tailoring of thespecific interface method.<P CLASS=para>This interface is handled slightly differently in DB_File.  Here isan equivalent call using DB_File.<DIV CLASS=programlisting><P><PRE>tie %array, "DB_File", $filename, $flags, $mode, $DB_HASH;</PRE></DIV><P CLASS=para>The <tt CLASS=literal>filename</tt>, <tt CLASS=literal>flags</tt>, and <tt CLASS=literal>mode</tt> parameters are the directequivalent of their <I CLASS=emphasis>dbopen</I> (3) counterparts.  The final parameter<tt CLASS=literal>$DB_HASH</tt> performs the function of both the <tt CLASS=literal>type</tt> and<tt CLASS=literal>openinfo</tt> parameters in <I CLASS=emphasis>dbopen</I> (3).<P CLASS=para>In the example above <tt CLASS=literal>$DB_HASH</tt> is actually a reference to a hashobject.  DB_File has three of these predefined references.  Apartfrom <tt CLASS=literal>$DB_HASH</tt>, there are also <tt CLASS=literal>$DB_BTREE</tt> and <tt CLASS=literal>$DB_RECNO</tt>.<P CLASS=para>The keys allowed in each of these predefined references are limited tothe names used in the equivalent C structure.  So, for example, the<tt CLASS=literal>$DB_HASH</tt> reference will only allow keys called <tt CLASS=literal>bsize</tt>,<tt CLASS=literal>cachesize</tt>, <tt CLASS=literal>ffactor</tt>, <tt CLASS=literal>hash</tt>, <tt CLASS=literal>lorder</tt>, and<tt CLASS=literal>nelem</tt>.<P CLASS=para>To change one of these elements, just assign to it like this:<DIV CLASS=programlisting><P><PRE>$DB_HASH-&gt;{cachesize} = 10_000;</PRE></DIV></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.6">Array offsets</A></h4><P CLASS=para>In order to make <tt CLASS=literal>RECNO</tt> more compatible with Perl,the array offset for all<tt CLASS=literal>RECNO</tt> arrays begins at 0 rather than 1 as in Berkeley DB.</DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.7">In-memory databases</A></h4><P CLASS=para>Berkeley DB allows the creation of in-memory databases by using <tt CLASS=literal>NULL</tt>(that is, a <tt CLASS=literal>(char *)0</tt> in C) in place of the filename.  <tt CLASS=literal>DB_File</tt>uses <A HREF="ch03_02.htm#PERL2-CMD-UNDEF">undef</A> instead of <tt CLASS=literal>NULL</tt> to provide this functionality.<DIV CLASS=programlisting><P><PRE>use strict;use Fcntl;use DB_File;my ($k, $v, %hash);tie(%hash, 'DB_File', undef, O_RDWR|O_CREAT, 0, $DB_BTREE)    or die "can't tie DB_File: $!":foreach $k (keys %ENV) {    $hash{$k} = $ENV{$k};}# this will now come out in sorted lexical order # without the overhead of sorting the keyswhile  (($k,$v) = each %hash) {    print "$k=$v\n";}</PRE></DIV></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.8">Using the Berkeley DB interface directly</A></h4><P CLASS=para>In addition to accessing Berkeley DB using a tied hash or array, you canalso make direct use of most functions defined in theBerkeley DB documentation.<P CLASS=para>To do this you need to remember the return value from <A HREF="ch03_02.htm#PERL2-CMD-TIE">tie</A>, oruse the <A HREF="ch03_02.htm#PERL2-CMD-TIED">tied</A> function to get at it yourself later on.<DIV CLASS=programlisting><P><PRE>$db = tie %hash, "DB_File", "filename";</PRE></DIV><P CLASS=para>Once you have done that, you can access the Berkeley DB API functionsdirectly.<DIV CLASS=programlisting><P><PRE>$db-&gt;put($key, $value, R_NOOVERWRITE);  # invoke the DB "put" function</PRE></DIV><P CLASS=para>All the functions defined in the <I CLASS=emphasis>dbopen</I> (3) manpage are availableexcept for<tt CLASS=literal>close()</tt> and <tt CLASS=literal>dbopen()</tt> itself.  The DB_File interface to thesefunctions mirrors the way Berkeley DBworks.  In particular, note that all these functions return only a statusvalue.  Whenever a Berkeley DB function returns data via one of itsparameters, the DB_File equivalent does exactly the same thing.<P CLASS=para>All the constants defined in the <I CLASS=emphasis>dbopen</I> manpage are also available.<P CLASS=para>Below is a list of the functions available.  (The comments only tell youthe differences from the C version.)<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>get</tt><DD><P CLASS=para>The <tt CLASS=literal>$flags</tt> parameter is optional.The value associated with the key you request is returned inthe <tt CLASS=literal>$value</tt> parameter.<p><DT CLASS=varlistentry><tt CLASS=literal>put</tt><DD><P CLASS=para>As usual the <tt CLASS=literal>flags</tt> parameter is optional.If you use either the <tt CLASS=literal>R_IAFTER</tt> or <tt CLASS=literal>R_IBEFORE</tt> flags, the<tt CLASS=literal>$key</tt> parameter will be set to the record number of the insertedkey/value pair.<p><DT CLASS=varlistentry><tt CLASS=literal>del</tt><DD><P CLASS=para>The <tt CLASS=literal>$flags</tt> parameter is optional.<p><DT CLASS=varlistentry><tt CLASS=literal>fd    </tt><DD><P CLASS=para>No differences encountered.<DT CLASS=varlistentry><tt CLASS=literal>seq</tt><DD><P CLASS=para>The <tt CLASS=literal>$flags</tt> parameter is optional.  Both the <tt CLASS=literal>$key</tt> and<tt CLASS=literal>$value</tt> parameters will be set.<p><DT CLASS=varlistentry><tt CLASS=literal>sync</tt><DD><P CLASS=para>The <tt CLASS=literal>$flags</tt> parameter is optional.</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.9">Examples</A></h4><P CLASS=para>Here are a few examples.  First, using <tt CLASS=literal>$DB_HASH</tt>:<DIV CLASS=programlisting><P><PRE>use DB_File;use Fcntl;tie %h,  "DB_File", "hashed", O_RDWR|O_CREAT, 0644, $DB_HASH;# Add a key/value pair to the file$h{apple} = "orange";# Check for value of a keyprint "No, we have some bananas.\n" if $h{banana};# Deletedelete $h{"apple"};untie %h;</PRE></DIV><P CLASS=para>Here is an example using <tt CLASS=literal>$DB_BTREE</tt>.  Just to make life moreinteresting, the default comparison function is not used.  Instead,a Perl subroutine, <tt CLASS=literal>Compare()</tt>, does a case-insensitive comparison.<DIV CLASS=programlisting><P><PRE>use DB_File;use Fcntl;sub Compare {    my ($key1, $key2) = @_;    "\L$key1" cmp "\L$key2";}$DB_BTREE-&gt;{compare} = 'Compare';tie %h,  'DB_File', "tree", O_RDWR|O_CREAT, 0644, $DB_BTREE;# Add a key/value pair to the file$h{Wall}  = 'Larry';$h{Smith} = 'John';$h{mouse} = 'mickey';$h{duck}  = 'donald';# Deletedelete $h{duck};# Cycle through the keys printing them in order.# Note it is not necessary to sort the keys as# the btree will have kept them in order automatically.while ($key = each %h) { print "$key\n" }untie %h;</PRE></DIV><P CLASS=para>The preceding code yields this output:<DIV CLASS=programlisting><P><PRE>mouseSmithWall</PRE></DIV><P CLASS=para>Next, an example using <tt CLASS=literal>$DB_RECNO</tt>.  You may access a regular textfile as an array of lines.  But the first line of the text file is thezeroth element of the array, and so on.  This provides a clean way to seek to a particular line in a text file.<DIV CLASS=programlisting><P><PRE>my(@line, $number);$number = 10;use Fcntl;use DB_File;tie(@line, "DB_File", "/tmp/text", O_RDWR|O_CREAT, 0644, $DB_RECNO)    or die "can't tie file: $!";$line[$number - 1] = "this is a new line $number";</PRE></DIV><P CLASS=para>Here's an example of updating a file in place:<DIV CLASS=programlisting><P><PRE>use Fcntl;use DB_File;tie(@file, 'DB_File', "/tmp/sample", O_RDWR, 0644, $DB_RECNO)    or die "can't update /tmp/sample: $!";print "line #3 was ", $file[2], "\n";$file[2] = `date`;untie @file;</PRE></DIV><P CLASS=para>Note that the tied array interface is incomplete, causingsome operations on the resulting array to fail in strange ways.  See thediscussion of tied arrays in <A HREF="ch05_01.htm">Chapter 5, <i>Packages, Modules, and Object Classes</i></A>.  Some object methods are provided to avoid this.  Here's an example of reading a file backward:<DIV CLASS=programlisting><P><PRE>use DB_File;use Fcntl;$H = tie(@h, "DB_File", $file, O_RDWR, 0640, $DB_RECNO)        or die "Cannot open file $file: $!\n";# print the records in reverse orderfor ($i = $H-&gt;length - 1; $i &gt;= 0; --$i) {     print "$i: $h[$i]\n";}untie @h;</PRE></DIV></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.10">Locking databases</A></h4><P CLASS=para>Concurrent access of a read-write database by several parties requiresthat each use some kind of locking.  Here's an example that uses the<tt CLASS=literal>fd()</tt> method to get the file descriptor, and then a careful<A HREF="ch03_02.htm#PERL2-CMD-OPEN">open</A> to give something Perl will <A HREF="ch03_02.htm#PERL2-CMD-FLOCK">flock</A> for you.  Run thisrepeatedly in the background to watch the locks granted in proper order.You have to call the <tt CLASS=literal>sync()</tt> method to ensure that the writes makeit to disk between access, or else the library would normally hold somein its own cache.<DIV CLASS=programlisting><P><PRE>use Fcntl;use DB_File;</PRE></DIV><DIV CLASS=programlisting><P><PRE>use strict;</PRE></DIV><DIV CLASS=programlisting><P><PRE>sub LOCK_SH { 1 }sub LOCK_EX { 2 }sub LOCK_NB { 4 }sub LOCK_UN { 8 }</PRE></DIV><DIV CLASS=programlisting><P><PRE>my($oldval, $fd, $db_obj, %db_hash, $value, $key);</PRE></DIV><DIV CLASS=programlisting><P><PRE>$key   = shift || 'default';$value = shift || 'magic';</PRE></DIV><DIV CLASS=programlisting><P><PRE>$value .= " $$";</PRE></DIV><DIV CLASS=programlisting><P><PRE>$db_obj = tie(%db_hash, 'DB_File', '/tmp/foo.db', O_CREAT|O_RDWR, 0644)                    or die "dbcreat /tmp/foo.db $!";$fd = $db_obj-&gt;fd;print "$$: db fd is $fd\n";open(DB_FH, "+&lt;&amp;=$fd") or die "fdopen $!";</PRE></DIV><DIV CLASS=programlisting><P><PRE>unless (flock (DB_FH, LOCK_SH | LOCK_NB)) {    print "$$: CONTENTION; can't read during write update!                Waiting for read lock ($!) ....";    unless (flock (DB_FH, LOCK_SH)) { die "flock: $!" }}print "$$: Read lock granted\n";</PRE></DIV><DIV CLASS=programlisting><P><PRE>$oldval = $db_hash{$key};print "$$: Old value was $oldval\n";flock(DB_FH, LOCK_UN);</PRE></DIV><DIV CLASS=programlisting><P><PRE>unless (flock (DB_FH, LOCK_EX | LOCK_NB)) {    print "$$: CONTENTION; must have exclusive lock!                Waiting for write lock ($!) ....";    unless (flock (DB_FH, LOCK_EX)) { die "flock: $!" }}</PRE></DIV><DIV CLASS=programlisting><P><PRE>print "$$: Write lock granted\n";$db_hash{$key} = $value;sleep 10;</PRE></DIV><DIV CLASS=programlisting><P><PRE>$db_obj-&gt;sync();                   # to flushflock(DB_FH, LOCK_UN);untie %db_hash;undef $db_obj;                     # removing the last reference to the DB                                   # closes it. Closing DB_FH is implicit.print "$$: Updated db to $key=$value\n";</PRE></DIV></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.11">See also</A></h4><P CLASS=para>Related manpages: <I CLASS=emphasis>dbopen</I> (3),<I CLASS=emphasis>hash</I> (3), <I CLASS=emphasis>recno</I> (3),<I CLASS=emphasis>btree</I> (3).<P CLASS=para>Berkeley DB is available from these locations:<P><UL CLASS=itemizedlist><li CLASS=listitem><I CLASS=emphasis>ftp://ftp.cs.berkeley.edu/ucb/4bsd/db.1.85.tar.gz</I><P><li CLASS=listitem><I CLASS=emphasis>http://www.perl.com/CPAN/src/misc/db.1.85.tar.gz</I><P></UL></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.9">Devel::SelfStubber--Generate Stubs for a SelfLoading Module</A></h3><DIV CLASS=programlisting><P><PRE>use Devel::SelfStubber;$modulename = "Mystuff::Grok";  # no .pm suffix or slashes$lib_dir = "";                  # defaults to current directoryDevel::SelfStubber-&gt;stub($modulename, $lib_dir);   # stubs only# to generate the whole module with stubs inserted correctlyuse Devel::SelfStubber;$Devel::SelfStubber::JUST_STUBS = 0;Devel::SelfStubber-&gt;stub($modulename, $lib_dir);</PRE></DIV><P CLASS=para>Devel::SelfStubber supports inherited, autoloaded methods by printing the stubsyou need to put in your module before the<tt CLASS=literal>_ _DATA_ _</tt> token.  A subroutine stub looks likethis:<DIV CLASS=programlisting><P><PRE>sub moo;</PRE></DIV><P CLASS=para>The stub ensures that if a method is called, it will get loaded.This is best explained using the following example:<P CLASS=para>Assume four classes, A, B, C, and D.A is the root class, B is a subclass of A, C is a subclass of B,and D is another subclass of A.<P CLASS=para><DIV CLASS=screen><P><PRE>                    A                   / \                  B   D                 /                C</PRE></DIV><P CLASS=para>If D calls an autoloaded method <tt CLASS=literal>moo()</tt> which is defined in class A,then the method is loaded into class A, and executed.  If C then callsmethod <tt CLASS=literal>moo()</tt>, and that method was reimplemented in class B, butset to be autoloaded, then the lookup mechanism never gets to the<tt CLASS=literal>AUTOLOAD</tt> mechanism in B because it first finds the <tt CLASS=literal>moo()</tt>method already loaded in A, and so erroneously uses that.  If the method<tt CLASS=literal>moo()</tt> had been stubbed in B, then the lookup mechanism would havefound the stub, and correctly loaded and used the subroutine from B.<P CLASS=para>So, to get autoloading to work right with classes and subclasses,you need to make sure the stubs are loaded.<P CLASS=para>The SelfLoader can load stubs automatically at module initializationwith:<DIV CLASS=programlisting><P><PRE>SelfLoader-&gt;load_stubs();</PRE></DIV><P CLASS=para>But you may wish to avoid having the stub-loading overhead associatedwith your initialization.[2]In this case, you can put the subroutine stubs before the<tt CLASS=literal>_ _DATA_ _</tt> token.  This can be done manually, by inserting theoutput of the first call to the <tt CLASS=literal>stub()</tt> method above.  But the modulealso allows automatic insertion of the stubs.By default the <tt CLASS=literal>stub()</tt> method just prints the stubs, but you can set theglobal <tt CLASS=literal>$Devel::SelfStubber::JUST_STUBS</tt> to <tt CLASS=literal>0</tt> and it willprint out the entire module with the stubs positioned correctly, as inthe second call to <tt CLASS=literal>stub()</tt>.<blockquote class=footnote><P CLASS=para>[2] Although note that the <tt CLASS=literal>load_stubs()</tt> method will be called sooneror later, at latest when the first subroutine is being autoloaded--whichmay be too late, if you're trying to <tt CLASS=literal>moo()</tt>.</blockquote><P CLASS=para>At the very least, this module is useful for seeing what the SelfLoaderthinks are stubs; in order to ensure that future versions of theSelfStubber remain in step with the SelfLoader, theSelfStubber actually uses the SelfLoader to determine whichstubs are needed.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.10">diagnostics--Force Verbose Warning Diagnostics</A></h3><DIV CLASS=programlisting><P><PRE># As a pragma:use diagnostics;use diagnostics -verbose;enable  diagnostics;disable diagnostics;# As a program:$ perl program 2&gt;diag.out$ splain [-v] [-p] diag.out</PRE></DIV><P CLASS=para><A NAME="CH07.DIAG1"></A><A NAME="CH07.DIAG2"></A><A NAME="CH07.DIAG3"></A><A NAME="CH07.DIAG4"></A><A NAME="CH07.DIAG5"></A>The diagnostics module extends the terse diagnostics normally emitted byboth the Perl compiler and the Perl interpreter, augmenting them with the moreexplicative and endearing descriptions found in <A HREF="ch09_01.htm">Chapter 9, <i>Diagnostic Messages</i></A>.It affects the compilation phase of your program rather than merely theexecution phase.<P CLASS=para>To use in your program as a pragma, merely say:<DIV CLASS=programlisting><P><PRE>use diagnostics;</PRE></DIV><P CLASS=para>at the start (or near the start) of your program.  (Notethat this enables Perl's <B>-w</B> flag.)  Your wholecompilation will then be subject to the enhanced diagnostics.These are still issued to <tt CLASS=literal>STDERR</tt>.<P CLASS=para>Due to the interaction between run-time and compile-time issues,and because it's probably not a very good idea anyway,you may <I CLASS=emphasis>not</I> use:<DIV CLASS=programlisting><P><PRE>no diagnostics</PRE></DIV><P CLASS=para>to turn diagnostics off at compile time.  However, you can turn diagnostics on oroff at run-time by invoking <tt CLASS=literal>diagnostics::enable()</tt> and<tt CLASS=literal>diagnostics::disable()</tt>, respectively.<P CLASS=para>The <tt CLASS=literal>-verbose</tt> argument first prints out the <I CLASS=emphasis>perldiag</I> (1) manpageintroduction before any other diagnostics.  The <tt CLASS=literal>$diagnostics::PRETTY</tt>variable, if set in a <tt CLASS=literal>BEGIN</tt> block, results in nicer escape sequencesfor pagers:<DIV CLASS=programlisting><P><PRE>BEGIN { $diagnostics::PRETTY = 1 }</PRE></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.12">The standalone program</A></h4><P CLASS=para>While apparently a whole other program, <I CLASS=emphasis>splain</I> is actually nothingmore than a link to the (executable) <I CLASS=emphasis>diagnostics.pm</I> module.It acts upon the standard error output of a Perl program, which you mayhave treasured up in a file, or piped directly to <I CLASS=emphasis>splain</I>.<P CLASS=para>The <B>-v</B> flag has the same effect as:<DIV CLASS=programlisting><P><PRE>use diagnostics -verbose</PRE></DIV><P CLASS=para>The <B>-p</B> flag sets<tt CLASS=literal>$diagnostics::PRETTY</tt> to true.  Since you're post-processingwith <I CLASS=emphasis>splain</I>, there's no sense in being able to<tt CLASS=literal>enable()</tt> or <tt CLASS=literal>disable()</tt> diagnostics.<P CLASS=para>Output from <I CLASS=emphasis>splain</I> (unlike the pragma) is directed to <tt CLASS=literal>STDOUT</tt>.</DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.13">Examples</A></h4><P CLASS=para>The following file is certain to trigger a few errors at bothrun-time and compile-time:<DIV CLASS=programlisting><P><PRE>use diagnostics;print NOWHERE "nothing\n";print STDERR "\n\tThis message should be unadorned.\n";warn "\tThis is a user warning";print "\nDIAGNOSTIC TESTER: Please enter a &lt;CR&gt; here: ";my $a, $b = scalar &lt;STDIN&gt;;print "\n";print $x/$y;</PRE></DIV><P CLASS=para>If you prefer to run your program first and look at its problemsafterward, do this while talking to a Bourne-like shell:<DIV CLASS=programlisting><P><PRE>perl -w test.pl 2&gt;test.out./splain &lt; test.out</PRE></DIV><P CLASS=para>If you don't want to modify your source code, but still want on-the-flywarnings, do this:<DIV CLASS=programlisting><P><PRE>perl -w -Mdiagnostics test.pl</PRE></DIV><P CLASS=para>If you want to control warnings on the fly, do something like this.(Make sure the <A HREF="ch03_02.htm#PERL2-CMD-USE">use</A> comes first, or you won't be able to get at the <tt CLASS=literal>enable()</tt> or <tt CLASS=literal>disable()</tt> methods.)<DIV CLASS=programlisting><P><PRE>use diagnostics; # checks entire compilation phaseprint "\ntime for 1st bogus diags: SQUAWKINGS\n";print BOGUS1 'nada';print "done with 1st bogus\n";disable diagnostics; # only turns off run-time warningsprint "\ntime for 2nd bogus: (squelched)\n";print BOGUS2 'nada';print "done with 2nd bogus\n";enable diagnostics; # turns back on run-time warningsprint "\ntime for 3rd bogus: SQUAWKINGS\n";print BOGUS3 'nada';print "done with 3rd bogus\n";disable diagnostics;print "\ntime for 4th bogus: (squelched)\n";print BOGUS4 'nada';print "done with 4th bogus\n";</PRE></DIV></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.11">DirHandle--Supply Object Methods for Directory Handles</A></h3><DIV CLASS=programlisting><P><PRE>use DirHandle;my $d = new DirHandle ".";   # open the current directoryif (defined $d) {    while (defined($_ = $d-&gt;read)) { something($_); }    $d-&gt;rewind;    while (defined($_ = $d-&gt;read)) { something_else($_); }}</PRE></DIV><P CLASS=para>DirHandle provides an alternative interface to Perl's<A HREF="ch03_02.htm#PERL2-CMD-OPENDIR">opendir</A>, <A HREF="ch03_02.htm#PERL2-CMD-CLOSEDIR">closedir</A>, <A HREF="ch03_02.htm#PERL2-CMD-READDIR">readdir</A>, and <A HREF="ch03_02.htm#PERL2-CMD-REWINDDIR">rewinddir</A> functions.<P CLASS=para>The only objective benefit to using DirHandle is that it avoidsname-space pollution by creating anonymous globs to hold directoryhandles.  Well, and it also closes the DirHandle automatically when thelast reference goes out of scope.  But since most people only keep adirectory handle open long enough to slurp in all the filenames, this isof dubious value.  But hey, it's object-oriented.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.12">DynaLoader--Automatic Dynamic Loading of Perl Modules</A></h3><DIV CLASS=programlisting><P><PRE>package YourModule;require DynaLoader;@ISA = qw(... DynaLoader ...);bootstrap YourModule;</PRE></DIV><P CLASS=para><A NAME="CH07.DYNA1"></A><A NAME="CH07.DYNA2"></A><A NAME="CH07.DYNA3"></A><A NAME="CH07.DYNA4"></A>This module defines the standard Perl interface to the dynamic linkingmechanisms available on many platforms.  A common theme throughout themodule system is that <I CLASS=emphasis>using</I> a module should be easy, even if themodule itself (or the installation of the module) is more complicated asa result.  This applies particularly to the DynaLoader.  To use it inyour own module, all you need are the incantations listed above in thesynopsis.  This will work whether YourModule is statically ordynamically linked into Perl.  (This is a <I CLASS=emphasis>Configure</I> option for eachmodule.) The <tt CLASS=literal>bootstrap()</tt> method will either call YourModule's bootstrap routine directly if YourModule is statically linked into Perl, or if not, YourModule will inherit the <tt CLASS=literal>bootstrap()</tt> method from DynaLoader, which will do everything necessary to load in your module, and then call YourModule's <tt CLASS=literal>bootstrap()</tt> method for you, asif it were there all the time and you called it yourself.  Piece of cake,of the have-it-and-eat-it-too variety.<P CLASS=para>The rest of this description talks about the DynaLoader from theviewpoint of someone who wants to extend the DynaLoader module to a newarchitecture.  The <I CLASS=emphasis>Configure</I> process selects which kind of dynamicloading to use by choosing to link in one of several C implementations,which must be linked into <I CLASS=emphasis>perl</I> statically.  (This is unlike otherC extensions, which provide a single implementation, which may be linkedin either statically or dynamically.)<P CLASS=para>The DynaLoader is designed to be a very simple, high-level interface thatis sufficiently general to cover the requirements of SunOS, HP-UX,NeXT, Linux, VMS, Win-32, and other platforms.  By itself, though,DynaLoader is practically useless for accessing non-Perl librariesbecause it provides almost no Perl-to-C "glue".  There is, for example,no mechanism for calling a C library function or supplying its argumentsin any sort of portable form.  This job is delegated to the otherextension modules that you may load in by using DynaLoader.<DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="ch07-SECT3-AUTOID.1">Internal interface summary</A></h4><DIV CLASS=programlisting><P><PRE><I CLASS=emphasis>Variables:</I>    @dl_library_path    @dl_resolve_using    @dl_require_symbols    $dl_debug<I CLASS=emphasis>Subroutines:</I>    bootstrap($modulename);    @filepaths = dl_findfile(@names);    $filepath = dl_expandspec($spec);    $libref  = dl_load_file($filename);    $symref  = dl_find_symbol($libref, $symbol);    @symbols = dl_undef_symbols();    dl_install_xsub($name, $symref [, $filename]);    $message = dl_error;</PRE></DIV><P CLASS=para>The <tt CLASS=literal>bootstrap()</tt> and <tt CLASS=literal>dl_findfile()</tt> routinesare standard across all platforms, and so are defined in<I CLASS=emphasis>DynaLoader.pm</I>.  The rest of the functions are supplied bythe particular <I CLASS=emphasis>.xs</I> file that supplies the implementationfor the platform.  (You can examine the existing implementations in the<I CLASS=emphasis>ext/DynaLoader/</I> *<I CLASS=emphasis>.xs</I> files in the Perlsource directory.  You should also read <I CLASS=emphasis>DynaLoader.pm</I>, ofcourse.)  These implementations may also tweak the default values of thevariables listed below.<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>@dl_library_path</tt><DD><P CLASS=para><A NAME="CH07.DYNA6"></A>The default list of directories in which <tt CLASS=literal>dl_findfile()</tt> willsearch for libraries.  Directories are searched in the order they aregiven in this array variable, beginning with subscript 0.<tt CLASS=literal>@dl_library_path</tt> is initialized to hold the list of "normal"directories (<I CLASS=emphasis>/usr/lib</I> and so on) determined by the Perl installationscript, <I CLASS=emphasis>Configure</I>, and given by <tt CLASS=literal>$Config{'libpth'}</tt>.  Thisis to ensure portability across a wide range of platforms.<tt CLASS=literal>@dl_library_path</tt> should also be initialized with any other directoriesthat can be determined from the environment at run-time (such as<tt CLASS=literal>LD_LIBRARY_PATH</tt> for SunOS).After initialization, <tt CLASS=literal>@dl_library_path</tt> can be manipulated by anapplication using <A HREF="ch03_02.htm#PERL2-CMD-PUSH">push</A> and <A HREF="ch03_02.htm#PERL2-CMD-UNSHIFT">unshift</A> before calling<tt CLASS=literal>dl_findfile()</tt>.<A HREF="ch03_02.htm#PERL2-CMD-UNSHIFT">unshift</A> can be used to add directories to the front of the search ordereither to save search time or to override standard libraries with the samename.The load function that <tt CLASS=literal>dl_load_file()</tt> calls might require an absolutepathname.  The <tt CLASS=literal>dl_findfile()</tt> function and <tt CLASS=literal>@dl_library_path</tt>can be used to search for and return the absolute pathname for thelibrary/object that you wish to load.<DT CLASS=varlistentry><tt CLASS=literal>@dl_resolve_using</tt><DD><P CLASS=para>A list of additional libraries or other shared objects that can beused to resolve any undefined symbols that might be generated by alater call to <tt CLASS=literal>dl_load_file()</tt>.This is only required on some platforms that do not handle dependentlibraries automatically.  For example, the Socket extension shared library(<I CLASS=emphasis>auto/Socket/Socket.so</I>) contains references to many socket functionsthat need to be resolved when it's loaded.  Most platforms willautomatically know where to find the "dependent" library (for example,<I CLASS=emphasis>/usr/lib/libsocket.so</I>). A few platforms need to be told the locationof the dependent library explicitly.  Use <tt CLASS=literal>@dl_resolve_using</tt> for this.Example:<DIV CLASS=programlisting><P><PRE>@dl_resolve_using = dl_findfile('-lsocket');</PRE></DIV><p><DT CLASS=varlistentry><tt CLASS=literal>@dl_require_symbols</tt><DD><P CLASS=para>A list of one or more symbol names that are in the library/object fileto be dynamically loaded.  This is only required on some platforms.<p><DT CLASS=varlistentry><tt CLASS=literal>dl_error</tt><DD><DIV CLASS=programlisting><P><PRE>$message = dl_error();</PRE></DIV><P CLASS=para>Error message text from the last failed DynaLoader function.  Note that, similarto <tt CLASS=literal>errno</tt> in UNIX, a successful function call does not resetthis message.  Implementations should detect the error as soon as it occurs inany of the other functions and save the corresponding message for laterretrieval.  This will avoid problems on some platforms (such as SunOS) where theerror message is very temporary (see, for example, <I CLASS=emphasis>dlerror</I> (3)).<p><DT CLASS=varlistentry><tt CLASS=literal>$dl_debug</tt><DD><P CLASS=para>Internal debugging messages are enabled when <tt CLASS=literal>$dl_debug</tt> is settrue.  Currently, setting <tt CLASS=literal>$dl_debug</tt> only affects the Perl sideof the DynaLoader.  These messages should help an applicationdeveloper to resolve any DynaLoader usage problems.<tt CLASS=literal>$dl_debug</tt> is set to <tt CLASS=literal>$ENV{'PERL_DL_DEBUG'}</tt> if defined.For the DynaLoader developer and porter there is a similar debuggingvariable added to the C code (see <I CLASS=emphasis>dlutils.c</I>) and enabled if Perl wasbuilt with the <tt CLASS=literal>-DDEBUGGING</tt> flag.  This can also be set via the<tt CLASS=literal>PERL_DL_DEBUG</tt> environment variable.  Set to 1 for minimal information orhigher for more.<p><DT CLASS=varlistentry><tt CLASS=literal>dl_findfile</tt><DD><DIV CLASS=programlisting><P><PRE>@filepaths = dl_findfile(@names)</PRE></DIV><P CLASS=para>Determines the full paths (including file suffix) of one or more loadable files,given their generic names and optionally one or more directories.  Searchesdirectories in <tt CLASS=literal>@dl_library_path</tt> by default and returns anempty list if no files were found.  Names can be specified in a variety ofplatform-independent forms.  Any names in the form <tt CLASS=literal>-lname</tt> areconverted into <I CLASS=emphasis>libname.</I>*, where .* is an appropriate suffixfor the platform.  If a name does not already have a suitable prefix or suffix,then the corresponding file will be sought by trying prefix and suffixcombinations appropriate to the platform: <I CLASS=emphasis>$name.o</I>,<I CLASS=emphasis>lib$name.</I>* and <I CLASS=emphasis>$name</I>.  If anydirectories are included in <tt CLASS=literal>@names</tt>, they are searched before<tt CLASS=literal>@dl_library_path</tt>.  Directories may be specified as<tt CLASS=literal>-Ldir</tt>.  Any other names are treated as filenames to besearched for.  Using arguments of the form <tt CLASS=literal>-Ldir</tt> and<tt CLASS=literal>-lname</tt> is recommended.  Example:<DIV CLASS=programlisting><P><PRE>@dl_resolve_using = dl_findfile(qw(-L/usr/5lib -lposix));</PRE></DIV><p><DT CLASS=varlistentry><tt CLASS=literal>dl_expandspec</tt><DD><DIV CLASS=programlisting><P><PRE>$filepath = dl_expandspec($spec)</PRE></DIV><P CLASS=para>Some unusual systems such as VMS require special filename handling in order todeal with symbolic names for files (that is, VMS's Logical Names).  To supportthese systems a <tt CLASS=literal>dl_expandspec()</tt> function can be implementedeither in the <I CLASS=emphasis>dl_</I>*<I CLASS=emphasis>.xs</I> file or code canbe added to the autoloadable <tt CLASS=literal>dl_expandspec()</tt> function in<I CLASS=emphasis>DynaLoader.pm</I>.<p><DT CLASS=varlistentry><tt CLASS=literal>dl_load_file</tt><DD><DIV CLASS=programlisting><P><PRE>$libref = dl_load_file($filename)</PRE></DIV><P CLASS=para>Dynamically load <tt CLASS=literal>$filename</tt>, which must be the path to a shared objector library.  An opaque "library reference" is returned as a handle forthe loaded object.  <tt CLASS=literal>dl_load_file()</tt> returns the undefined value on error.(On systems that provide a handle for the loaded object such as SunOSand HP-UX, the returned handle will be <tt CLASS=literal>$libref</tt>.  On other systems<tt CLASS=literal>$libref</tt> will typically be <tt CLASS=literal>$filename</tt> or a pointer to abuffer containing <tt CLASS=literal>$filename</tt>.The application should not examine or alter <tt CLASS=literal>$libref</tt> in any way.)Below are some of the functions that do the real work.  Such functionsshould use the current values of <tt CLASS=literal>@dl_require_symbols</tt> and<tt CLASS=literal>@dl_resolve_using</tt> if required.<DIV CLASS=programlisting><P><PRE>SunOS:  dlopen($filename)HP-UX:  shl_load($filename)Linux:  dld_create_reference(@dl_require_symbols); dld_link($filename)NeXT:   rld_load($filename, @dl_resolve_using)VMS:    lib$find_image_symbol($filename, $dl_require_symbols[0])</PRE></DIV><p><DT CLASS=varlistentry><tt CLASS=literal>dl_find_symbol</tt><DD><DIV CLASS=programlisting><P><PRE>$symref = dl_find_symbol($libref, $symbol)</PRE></DIV><P CLASS=para>Returns the address of the symbol <tt CLASS=literal>$symbol</tt>, or the undefined valueif not found.  If thetarget system has separate functions to search for symbols of differenttypes, then <tt CLASS=literal>dl_find_symbol()</tt> should search for function symbols firstand then search for other types.The exact manner in which the address is returned in <tt CLASS=literal>$symref</tt> is notcurrently defined.  The only initial requirement is that <tt CLASS=literal>$symref</tt> canbe passed to, and understood by, <tt CLASS=literal>dl_install_xsub()</tt>.  Here are somecurrent implementations:<DIV CLASS=programlisting><P><PRE>SunOS:  dlsym($libref, $symbol)HP-UX:  shl_findsym($libref, $symbol)Linux:  dld_get_func($symbol) and/or dld_get_symbol($symbol)NeXT:   rld_lookup("_$symbol")VMS:    lib$find_image_symbol($libref, $symbol)</PRE></DIV><p><DT CLASS=varlistentry><tt CLASS=literal>dl_undef_symbols</tt><DD><DIV CLASS=programlisting><P><PRE>@symbols = dl_undef_symbols()</PRE></DIV><P CLASS=para>Returns a list of symbol names which remain undefined after<tt CLASS=literal>dl_load_file()</tt>.  It returns <tt CLASS=literal>()</tt> if thesenames are not known.  Don't worry if your platform does not provide a mechanismfor this.  Most platforms do not need it and hence do not provide it; they justreturn an empty list.<p><DT CLASS=varlistentry><tt CLASS=literal>dl_install_xsub</tt><DD><DIV CLASS=programlisting><P><PRE>dl_install_xsub($perl_name, $symref [, $filename])</PRE></DIV><P CLASS=para>Creates a new Perl external subroutine named <tt CLASS=literal>$perl_name</tt> using<tt CLASS=literal>$symref</tt> as a pointer to the function that implements the routine.This is simply a direct call to <tt CLASS=literal>newXSUB()</tt>. It returns a reference tothe installed function.The <tt CLASS=literal>$filename</tt> parameter is used by Perl to identify the source file forthe function if required by <A HREF="ch03_02.htm#PERL2-CMD-DIE">die</A>, <A HREF="ch03_02.htm#PERL2-CMD-CALLER">caller</A>, or the debugger.  If<tt CLASS=literal>$filename</tt> is not defined, then <I CLASS=emphasis>DynaLoader</I> will be used.<p><DT CLASS=varlistentry><tt CLASS=literal>bootstrap()</tt><DD><DIV CLASS=programlisting><P><PRE>bootstrap($module);</PRE></DIV><P CLASS=para>This is the normal entry point for automatic dynamic loading in Perl.<P CLASS=para>It performs the following actions:<P><UL CLASS=itemizedlist><li CLASS=listitem>Locates an <I CLASS=emphasis>auto/$module</I> directory by searching <tt CLASS=literal>@INC</tt><P><li CLASS=listitem>Uses <tt CLASS=literal>dl_findfile()</tt> to determine the filename to load<P><li CLASS=listitem>Sets <tt CLASS=literal>@dl_require_symbols</tt> to <tt CLASS=literal>(`boot_$module`)</tt><P><li CLASS=listitem>Executes an <I CLASS=emphasis>auto/$module/$module.bs</I> file if it exists(typically used to add to <tt CLASS=literal>@dl_resolve_using</tt> any files thatare required to load the module on the current platform)<P><li CLASS=listitem>Calls <tt CLASS=literal>dl_load_file()</tt> to load the file<P><li CLASS=listitem>Calls <tt CLASS=literal>dl_undef_symbols()</tt> and warns if any symbols are undefined<P><li CLASS=listitem>Calls <tt CLASS=literal>dl_find_symbol()</tt> for <tt CLASS=literal>"boot_$module"</tt><P><li CLASS=listitem>Calls <tt CLASS=literal>dl_install_xsub()</tt> to install it as <tt CLASS=literal>${module}::bootstrap</tt><P><li CLASS=listitem>Calls <tt CLASS=literal>&amp;{"${module}::bootstrap"}</tt> to bootstrap the module (actuallyit uses the function reference returned by <tt CLASS=literal>dl_install_xsub()</tt> for speed)<P></UL></DL></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.13">English--Use English or awk Names for Punctuation Variables</A></h3><DIV CLASS=programlisting><P><PRE>use English;...if ($ERRNO =~ /denied/) { ... }</PRE></DIV><P CLASS=para>This module provides aliases for the built-in "punctuation" variables.Variables with side effectsthat get triggered merely by accessing them (like <B>$0</B>) will stillhave the same effects under the aliases.<P CLASS=para>For those variables that have an <I CLASS=emphasis>awk</I> (1) version, both longand short English alternatives are provided.  For example,the <tt CLASS=literal>$/</tt> variable can be referred to either as <tt CLASS=literal>$RS</tt> or as<tt CLASS=literal>$INPUT_RECORD_SEPARATOR</tt> if you are using the English module.<P CLASS=para>Here is the list of variables along with their English alternatives:<DIV CLASS=informaltable><P><A NAME="PERL2-CH-7-TAB-13"></A><TABLE CLASS=INFORMALTABLE><TR CLASS=row><TH ALIGN="left">Perl</TH><TH ALIGN="left">English</TH><TH ALIGN="left">Perl</TH><TH ALIGN="left">English</TH></TR><TR CLASS=row><TD ALIGN="left"><B>@_</B></TD><TD ALIGN="left"><tt CLASS=literal>@ARG</tt></TD><TD ALIGN="left"><B>$?</B></TD><TD ALIGN="left"><tt CLASS=literal>$CHILD_ERROR</tt></TD></TR><TR CLASS=row><TD ALIGN="left"><B>$_</B></TD><TD ALIGN="left"><tt CLASS=literal>$ARG</tt></TD><TD ALIGN="left"><B>$!</B></TD><TD ALIGN="left"><tt CLASS=literal>$OS_ERROR</tt></TD></TR><TR CLASS=row><TD ALIGN="left"><B>$&amp;</B></TD><TD ALIGN="left"><tt CLASS=literal>$MATCH</tt></TD><TD ALIGN="left"><B>$!</B></TD><TD ALIGN="left"><tt CLASS=literal>$ERRNO</tt></TD></TR><TR CLASS=row><TD ALIGN="left"><B>$</B><tt CLASS=literal>`</tt></TD><TD ALIGN="left"><tt CLASS=literal>$PREMATCH</tt></TD><TD ALIGN="left"><B>$@</B></TD><TD ALIGN="left"><tt CLASS=literal>$EVAL_ERROR</tt></TD></TR><TR CLASS=row><TD ALIGN="left"><B>$</B><tt CLASS=literal>'</tt></TD><TD ALIGN="left"><tt CLASS=literal>$POSTMATCH</tt></TD><TD ALIGN="left"><B>$$</B></TD><TD ALIGN="left"><tt CLASS=literal>$PROCESS_ID</tt></TD></TR><TR CLASS=row><TD ALIGN="left"><B>$+</B></TD><TD ALIGN="left"><tt CLASS=literal>$LAST_PAREN_MATCH</tt></TD><TD ALIGN="left"><B>$$</B></TD><TD ALIGN="left"><tt CLASS=literal>$PID</tt></TD></TR><TR CLASS=row><TD ALIGN="left"><B>$.</B></TD><TD ALIGN="left"><tt CLASS=literal>$INPUT_LINE_NUMBER</tt></TD><TD ALIGN="left"><B>$&lt;</B></TD><TD ALIGN="left"><tt CLASS=literal>$REAL_USER_ID</tt></TD></TR><TR CLASS=row><TD ALIGN="left"><B>$.</B></TD><TD ALIGN="left"><tt CLASS=literal>$NR</tt></TD><TD ALIGN="left"><B>$&lt;</B></TD><TD ALIGN="left"><tt CLASS=literal>$UID</tt></TD></TR><TR CLASS=row><TD ALIGN="left"><B>$/</B></TD><TD ALIGN="left"><tt CLASS=literal>$INPUT_RECORD_SEPARATOR</tt></TD><TD ALIGN="left"><B>$&gt;</B></TD><TD ALIGN="left"><tt CLASS=literal>$EFFECTIVE_USER_ID</tt></TD></TR><TR CLASS=row><TD ALIGN="left"><B>$/</B></TD><TD ALIGN="left"><tt CLASS=literal>$RS</tt></TD><TD ALIGN="left"><B>$&gt;</B></TD><TD ALIGN="left"><tt CLASS=literal>$EUID</tt></TD></TR><TR CLASS=row><TD ALIGN="left"><B>$|</B></TD><TD ALIGN="left"><tt CLASS=literal>$OUTPUT_AUTOFLUSH</tt></TD><TD ALIGN="left"><B>$(</B></TD><TD ALIGN="left"><tt CLASS=literal>$REAL_GROUP_ID</tt></TD></TR><TR CLASS=row><TD ALIGN="left"><B>$,</B></TD><TD ALIGN="left"><tt CLASS=literal>$OUTPUT_FIELD_SEPARATOR</tt></TD><TD ALIGN="left"><B>$(</B></TD><TD ALIGN="left"><tt CLASS=literal>$GID</tt></TD></TR><TR CLASS=row><TD ALIGN="left"><B>$,</B></TD><TD ALIGN="left"><tt CLASS=literal>$OFS</tt></TD><TD ALIGN="left"><B>$)</B></TD><TD ALIGN="left"><tt CLASS=literal>$EFFECTIVE_GROUP_ID</tt></TD></TR><TR CLASS=row><TD ALIGN="left"><B>$\</B></TD><TD ALIGN="left"><tt CLASS=literal>$OUTPUT_RECORD_SEPARATOR</tt></TD><TD ALIGN="left"><B>$)</B></TD><TD ALIGN="left"><tt CLASS=literal>$EGID</tt></TD></TR><TR CLASS=row><TD ALIGN="left"><B>$\</B></TD><TD ALIGN="left"><tt CLASS=literal>$ORS</tt></TD><TD ALIGN="left"><B>$0</B></TD><TD ALIGN="left"><tt CLASS=literal>$PROGRAM_NAME</tt></TD></TR><TR CLASS=row><TD ALIGN="left"><B>$"</B></TD><TD ALIGN="left"><tt CLASS=literal>$LIST_SEPARATOR</tt></TD><TD ALIGN="left"><B>$]</B></TD><TD ALIGN="left"><tt CLASS=literal>$PERL_VERSION</tt></TD></TR><TR CLASS=row><TD ALIGN="left"><B>$;</B></TD><TD ALIGN="left"><tt CLASS=literal>$SUBSCRIPT_SEPARATOR</tt></TD><TD ALIGN="left"><B>$^A</B></TD><TD ALIGN="left"><tt CLASS=literal>$ACCUMULATOR</tt></TD></TR><TR CLASS=row><TD ALIGN="left"><B>$;</B></TD><TD ALIGN="left"><tt CLASS=literal>$SUBSEP</tt></TD><TD ALIGN="left"><B>$^D</B></TD><TD ALIGN="left"><tt CLASS=literal>$DEBUGGING</tt></TD></TR><TR CLASS=row><TD ALIGN="left"><B>$%</B></TD><TD ALIGN="left"><tt CLASS=literal>$FORMAT_PAGE_NUMBER</tt></TD><TD ALIGN="left"><B>$^F</B></TD><TD ALIGN="left"><tt CLASS=literal>$SYSTEM_FD_MAX</tt></TD></TR><TR CLASS=row><TD ALIGN="left"><B>$=</B></TD><TD ALIGN="left"><tt CLASS=literal>$FORMAT_LINES_PER_PAGE</tt></TD><TD ALIGN="left"><B>$^I</B></TD><TD ALIGN="left"><tt CLASS=literal>$INPLACE_EDIT</tt></TD></TR><TR CLASS=row><TD ALIGN="left"><B>$-</B></TD><TD ALIGN="left"><tt CLASS=literal>$FORMAT_LINES_LEFT</tt></TD><TD ALIGN="left"><B>$^P</B></TD><TD ALIGN="left"><tt CLASS=literal>$PERLDB</tt></TD></TR><TR CLASS=row><TD ALIGN="left"><B>$~</B></TD><TD ALIGN="left"><tt CLASS=literal>$FORMAT_NAME</tt></TD><TD ALIGN="left"><B>$^T</B></TD><TD ALIGN="left"><tt CLASS=literal>$BASETIME</tt></TD></TR><TR CLASS=row><TD ALIGN="left"><B>$^</B></TD><TD ALIGN="left"><tt CLASS=literal>$FORMAT_TOP_NAME</tt></TD><TD ALIGN="left"><B>$^W</B></TD><TD ALIGN="left"><tt CLASS=literal>$WARNING</tt></TD></TR><TR CLASS=row><TD ALIGN="left"><B>$:</B></TD><TD ALIGN="left"><tt CLASS=literal>$FORMAT_LINE_BREAK_CHARACTERS</tt></TD><TD ALIGN="left"><B>$^X</B></TD><TD ALIGN="left"><tt CLASS=literal>$EXECUTABLE_NAME</tt></TD></TR><TR CLASS=row><TD ALIGN="left"><B>$^L</B></TD><TD ALIGN="left"><tt CLASS=literal>$FORMAT_LINEFEED</tt></TD><TD ALIGN="left"><B>$^O</B></TD><TD ALIGN="left"><tt CLASS=literal>$OSNAME</tt></TD></TR></TABLE><P></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.14">Env--Import Environment Variables</A></h3><DIV CLASS=programlisting><P><PRE>use Env;                     # import all possible variablesuse Env qw(PATH HOME TERM);  # import only specified variables</PRE></DIV><P CLASS=para><A NAME="CH07.IMPORT"></A>Perl maintains environment variables in a pseudo-associative arraynamed <tt CLASS=literal>%ENV</tt>.  Since this access method is sometimes inconvenient,the Env module allows environment variables to be treated assimple variables.<P CLASS=para>The <tt CLASS=literal>Env::import()</tt> routine ties environment variables to global Perlvariables with the same names.  By default it ties suitable, existingenvironment variables (that is, variables yielded by <tt CLASS=literal>keys %ENV</tt>).An environmentalvariable is considered suitable if its name begins with an alphabeticcharacter, and if it consists of nothing but alphanumeric characters plusunderscore.<P CLASS=para>If you supply arguments when invoking <tt CLASS=literal>use Env</tt>, they are taken tobe a list of environment variables to tie.  It's OK if the variablesdon't yet exist.<P CLASS=para>After an environment variable is tied, you can use it like a normal variable.You may access its value:<DIV CLASS=programlisting><P><PRE>@path = split(/:/, $PATH);</PRE></DIV><P CLASS=para>or modify it any way you like:<DIV CLASS=programlisting><P><PRE>$PATH .= ":.";</PRE></DIV><P CLASS=para>To remove a tied environment variable fromthe environment, make it the undefined value:<DIV CLASS=programlisting><P><PRE>undef $PATH;</PRE></DIV><P CLASS=para>Note that the corresponding operation performed directly against<tt CLASS=literal>%ENV</tt> is not <A HREF="ch03_02.htm#PERL2-CMD-UNDEF">undef</A>, but <A HREF="ch03_02.htm#PERL2-CMD-DELETE">delete</A>:<DIV CLASS=programlisting><P><PRE>delete $ENV{PATH};</PRE></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.15">Exporter--Default Import Method for Modules</A></h3><DIV CLASS=programlisting><P><PRE># in module YourModule.pm:package YourModule;use Exporter ();@ISA = qw(Exporter);@EXPORT = qw(...);              # Symbols to export by default.@EXPORT_OK = qw(...);           # Symbols to export on request.%EXPORT_TAGS = (tag =&gt; [...]);  # Define names for sets of symbols.# in other files that wish to use YourModule:use YourModule;                 # Import default symbols into my package.use YourModule qw(...);         # Import listed symbols into my package.use YourModule ();              # Do not import any symbols!</PRE></DIV><P CLASS=para><A NAME="CH07.EXP1"></A><A NAME="CH07.EXP2"></A><A NAME="CH07.EXP3"></A>Any module may define a class method called <tt CLASS=literal>import()</tt>.  Perlautomatically calls a module's <tt CLASS=literal>import()</tt> method when processing the<A HREF="ch03_02.htm#PERL2-CMD-USE">use</A> statement for the module.  The module itself doesn't have todefine the <tt CLASS=literal>import()</tt> method, though.  The Exporter module implementsa default <tt CLASS=literal>import()</tt> method that many modules choose to inheritinstead.  The Exporter module supplies the customary import semantics,and any other <tt CLASS=literal>import()</tt> methods will tend to deviate from thenormal import semantics in various (hopefully documented) ways.Now we'll talk about the normal import semantics.<DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.14">Specialized import lists</A></h4><P CLASS=para>Ignoring the class name, which is always the first argument to a classmethod, the arguments that are passed into the <tt CLASS=literal>import()</tt> method areknown as an <I CLASS=emphasis>import list</I>.  Usually the import list is nothing more than alist of subroutine or variable names, but occasionally you may want toget fancy.  If the first entry in an import list begins with<tt CLASS=literal>!</tt>, <tt CLASS=literal>:</tt>, or <tt CLASS=literal>/</tt>, the list is treated as aseries of specifications that either add to or delete from the list ofnames to import.  They are processed left to right.  Specifications arein the form:<DIV CLASS=informaltable><P><A NAME="PERL2-CH-7-TAB-14"></A><TABLE CLASS=INFORMALTABLE><TR CLASS=row><TH ALIGN="left">Symbol</TH><TH ALIGN="left">Meaning</TH></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>[!]</tt><tt CLASS=replaceable><i>name</i></tt></TD><TD ALIGN="left">This <tt CLASS=replaceable><i>name</i></tt> only</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>[!]:DEFAULT</tt></TD><TD ALIGN="left">All names in <tt CLASS=literal>@EXPORT</tt></TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>[!]:</tt><tt CLASS=replaceable><i>tag</i></tt></TD><TD ALIGN="left">All names in <tt CLASS=literal>$EXPORT_TAGS{</tt><tt CLASS=replaceable><i>tag</i></tt><tt CLASS=literal>}</tt> anonymous list</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>[!]/</tt><tt CLASS=replaceable><i>pattern</i></tt><tt CLASS=literal>/</tt></TD><TD ALIGN="left">All names in <tt CLASS=literal>@EXPORT</tt> and <tt CLASS=literal>@EXPORT_OK</tt> that match <tt CLASS=replaceable><i>pattern</i></tt></TD></TR></TABLE><P></DIV><P CLASS=para>A leading <tt CLASS=literal>!</tt> indicates that matching names should be deleted from thelist of names to import.  If the first specification is a deletion, itis treated as though preceded by <tt CLASS=literal>:DEFAULT</tt>.  If you just want to importextra names in addition to the default set, you will still need toinclude <tt CLASS=literal>:DEFAULT</tt> explicitly.<P CLASS=para>For example, suppose that <I CLASS=emphasis>YourModule.pm</I> says:<DIV CLASS=programlisting><P><PRE>@EXPORT      = qw(A1 A2 A3 A4 A5);@EXPORT_OK   = qw(B1 B2 B3 B4 B5);%EXPORT_TAGS = (    T1 =&gt; [qw(A1 A2 B1 B2)],    T2 =&gt; [qw(A1 A2 B3 B4)]);</PRE></DIV><P CLASS=para>Individual names in <tt CLASS=literal>EXPORT_TAGS</tt> must also appear in<tt CLASS=literal>@EXPORT</tt> or <tt CLASS=literal>@EXPORT_OK</tt>.  Note that you cannot use thetags directly within either <tt CLASS=literal>@EXPORT</tt> or <tt CLASS=literal>@EXPORT_OK</tt>(though you could preprocess tags into either of those arrays, and infact, the <tt CLASS=literal>export_tags()</tt> and <tt CLASS=literal>export_ok_tags()</tt> functions belowdo precisely that).<P CLASS=para>An application using YourModule can then say something like this:<DIV CLASS=programlisting><P><PRE>use YourModule qw(:DEFAULT :T2 !B3 A3);</PRE></DIV><P CLASS=para>The <tt CLASS=literal>:DEFAULT</tt> adds in <tt CLASS=literal>A1</tt>, <tt CLASS=literal>A2</tt>, <tt CLASS=literal>A3</tt>,<tt CLASS=literal>A4</tt>, and <tt CLASS=literal>A5</tt>.  The <tt CLASS=literal>:T2</tt> adds in only <tt CLASS=literal>B3</tt> and<tt CLASS=literal>B4</tt>, since <tt CLASS=literal>A1</tt> and <tt CLASS=literal>A2</tt> were already added.  The<tt CLASS=literal>!B3</tt> then deletes <tt CLASS=literal>B3</tt>, and the <tt CLASS=literal>A3</tt> does nothingbecause <tt CLASS=literal>A3</tt> was already included.Other examples include:<DIV CLASS=programlisting><P><PRE>use Socket qw(!/^[AP]F_/ !SOMAXCONN !SOL_SOCKET);use POSIX  qw(:errno_h :termios_h !TCSADRAIN !/^EXIT/);</PRE></DIV><P CLASS=para>Remember that most patterns (using <tt CLASS=literal>//</tt>) will need to be anchoredwith a leading ^, for example, <tt CLASS=literal>/^EXIT/</tt> rather than <tt CLASS=literal>/EXIT/</tt>.<P CLASS=para>You can say:<DIV CLASS=programlisting><P><PRE>BEGIN { $Exporter::Verbose=1 }</PRE></DIV><P CLASS=para>in order to see how thespecifications are being processed and what is actually being importedinto modules.</DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.15">Module version checking</A></h4><P CLASS=para>The Exporter module will convert an attempt to import a number from amodule into a call to <tt CLASS=literal>$module_name-&gt;require_version($value)</tt>.This can be used to validate that the version of the module being usedis greater than or equal to the required version.  The Exporter modulealso supplies a default <tt CLASS=literal>require_version()</tt> method, which checks thevalue of <tt CLASS=literal>$VERSION</tt> in the exporting module.<P CLASS=para>Since the default <tt CLASS=literal>require_version()</tt> method treats the<tt CLASS=literal>$VERSION</tt> number as a simple numeric value, it will regard version1.10 as lower than1.9.  For this reason it is strongly recommended that the module developer usenumberswith at least two decimal places; for example, 1.09.<P CLASS=para>Prior to release 5.004 or so of Perl, this only worked with modules thatuse the Exporter module; in particular, this means that you can't check theversion of a class module that doesn't require the Exporter module.</DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.16">Managing unknown symbols</A></h4><P CLASS=para>In some situations you may want to prevent certain symbols from beingexported.  Typically this applies to extensions with functionsor constants that may not exist on some systems.<P CLASS=para>The names of any symbols that cannot be exported should be listedin the <tt CLASS=literal>@EXPORT_FAIL</tt> array.<P CLASS=para>If a module attempts to import any of these symbols, the Exporterwill give the module an opportunity to handle the situation beforegenerating an error.  The Exporter will call an <tt CLASS=literal>export_fail()</tt> methodwith a list of the failed symbols:<DIV CLASS=programlisting><P><PRE>@failed_symbols = $module_name-&gt;export_fail(@failed_symbols);</PRE></DIV><P CLASS=para>If the <tt CLASS=literal>export_fail()</tt> method returns an empty list, then no error isrecorded and all requested symbols are exported.  If the returnedlist is not empty, then an error is generated for each symbol and theexport fails.  The Exporter provides a default <tt CLASS=literal>export_fail()</tt> method thatsimply returns the list unchanged.<P CLASS=para>Uses for the <tt CLASS=literal>export_fail()</tt> method include giving better error messagesfor some symbols and performing lazy architectural checks.  Put moresymbols into <tt CLASS=literal>@EXPORT_FAIL</tt> by default and then take them out if someoneactually tries to use them and an expensive check shows that they areusable on that platform.</DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.17">Tag handling utility functions</A></h4><P CLASS=para>Since the symbols listed within <tt CLASS=literal>%EXPORT_TAGS</tt> must also appear in either<tt CLASS=literal>@EXPORT</tt> or <tt CLASS=literal>@EXPORT_OK</tt>, two utility functions are providedthat allow you to easily add tagged sets of symbols to <tt CLASS=literal>@EXPORT</tt> or<tt CLASS=literal>@EXPORT_OK:</tt><DIV CLASS=programlisting><P><PRE>%EXPORT_TAGS = (Bactrian =&gt; [qw(aa bb cc)], Dromedary =&gt; [qw(aa cc dd)]);</PRE></DIV><DIV CLASS=programlisting><P><PRE>Exporter::export_tags('Bactrian');     # add aa, bb and cc to @EXPORTExporter::export_ok_tags('Dromedary'); # add aa, cc and dd to @EXPORT_OK</PRE></DIV><P CLASS=para>Any names that are not tags are added to <tt CLASS=literal>@EXPORT</tt> or<tt CLASS=literal>@EXPORT_OK</tt> unchanged, but will trigger a warning (with<B>-w</B>) to avoid misspelt tag names beingsilently added to <tt CLASS=literal>@EXPORT</tt> or <tt CLASS=literal>@EXPORT_OK</tt>.Future versions may regard this as a fatal error.</DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.16">ExtUtils::Install--Install Files from Here to There</A></h3><DIV CLASS=programlisting><P><PRE>use ExtUtils::Install;install($hashref, $verbose, $nonono);uninstall($packlistfile, $verbose, $nonono);</PRE></DIV><P CLASS=para><tt CLASS=literal>install()</tt> and <tt CLASS=literal>uninstall()</tt> are specific tothe way ExtUtils::MakeMaker handles the platform-dependent installationand deinstallation of Perl extensions.  They are not designed asgeneral-purpose tools.  If you're reading this chapter straight through(brave soul), you probably want to take a glance at the MakeMaker entryfirst.  (Or just skip over everything in the ExtUtils package until youstart writing an Ext.)<P CLASS=para><tt CLASS=literal>install()</tt> takes three arguments:  a reference to a hash, a verboseswitch, and a don't-really-do-it switch.  The hash reference contains amapping of directories; each key/value pair is a combination ofdirectories to be copied.  The key is a directory to copy from, andthe value is adirectory to copy to.  The whole tree below the "from" directory willbe copied, preserving timestamps and permissions.<P CLASS=para>There are two keys with a special meaning in thehash: <tt CLASS=literal>`read`</tt>and <tt CLASS=literal>`write`</tt>.  After the copying is done, install will write the list oftarget files to the file named by <tt CLASS=literal>$hashref-&gt;{write}</tt>.  If there isanother file named by <tt CLASS=literal>$hashref-&gt;{read}</tt>, the contents of this file willbe merged into the written file.  The read and the written file may beidentical, but on the Andrew File System (AFS) it is fairly likely that people are installing to adifferent directory than the one where the files later appear.<P CLASS=para><tt CLASS=literal>uninstall()</tt> takes as first argument a file containing filenamesto be unlinked.  The second argument is a verbose switch, the third isa no-don't-really-do-it-now switch (useful to know whatwill happen without actually doing it).</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.17">ExtUtils::Liblist--Determine Libraries to Use and How to Use Them</A></h3><DIV CLASS=programlisting><P><PRE>require ExtUtils::Liblist;ExtUtils::Liblist::ext($potential_libs, $Verbose);</PRE></DIV><P CLASS=para>This utility takes a list of libraries in the form <tt CLASS=literal>-llib1 -llib2-llib3</tt> and returns lines suitable for inclusion in a Perlextension <I CLASS=emphasis>Makefile</I> on the current platform.  Extra library paths may beincluded with the form <tt CLASS=literal>-L/another/path</tt>.  This will affect thesearches for all subsequent libraries.<P CLASS=para><tt CLASS=literal>ExtUtils::Liblist::ext()</tt> returns a list of four scalarvalues, which Makemaker will eventually use in constructing a<I CLASS=emphasis>Makefile</I>, among other things.  The values are:<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>EXTRALIBS</tt><DD><P CLASS=para>List of libraries that need to be linked with <I CLASS=emphasis>ld</I> (1) when linking aPerl binary that includes a static extension.  Only those libraries thatactually exist are included.<p><DT CLASS=varlistentry><tt CLASS=literal>LDLOADLIBS</tt><DD><P CLASS=para>List of those libraries that can or must be linkedwhen creating a shared library using <I CLASS=emphasis>ld</I> (1).  These may be staticor dynamic libraries.<DT CLASS=varlistentry><tt CLASS=literal>LD_RUN_PATH</tt><DD><P CLASS=para>A colon-separated list of thedirectories in <tt CLASS=literal>LDLOADLIBS</tt>.  It is passed as an environment variableto the process that links the shared library.<p><DT CLASS=varlistentry><tt CLASS=literal>BSLOADLIBS</tt><DD><P CLASS=para>List of those libraries that are needed but can be linked in dynamicallywith the DynaLoader at run-time on this platform.  This list is used tocreate a <I CLASS=emphasis>.bs</I> (bootstrap) file.  SunOS/Solaris does not needthis because <I CLASS=emphasis>ld</I> (1) records the information (from <tt CLASS=literal>LDLOADLIBS</tt>)into the object file.</DL><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.18">Portability</A></h4><P CLASS=para>This module deals with a lot of system dependencies and has quite afew architecture-specific <B>if</B>s in the code.</DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.18">ExtUtils::MakeMaker--Create a Makefile for a Perl Extension</A></h3><DIV CLASS=programlisting><P><PRE>use ExtUtils::MakeMaker;WriteMakefile( <tt CLASS=replaceable><i>ATTRIBUTE</i></tt> =&gt; <tt CLASS=replaceable><i>VALUE</i></tt>, ... );# which internally is really more like...%att = (<tt CLASS=replaceable><i>ATTRIBUTE</i></tt> =&gt; <tt CLASS=replaceable><i>VALUE</i></tt>, ...);MM-&gt;new(\%att)-&gt;flush;</PRE></DIV><P CLASS=para><A NAME="CH07.MM1"></A><A NAME="CH07.MM2"></A><A NAME="CH07.MM3"></A><A NAME="CH07.MM4"></A><A NAME="CH07.MM5"></A>When you build an extension to Perl, you need to have an appropriate<I CLASS=emphasis>Makefile</I>[3]in the extension's source directory.  Andwhile you could conceivably write one by hand, this would be rather tedious. So you'd like a program to write it for you.<blockquote class=footnote><P CLASS=para>[3] If you don't know what a<I CLASS=emphasis>Makefile</I> is, or what the<I CLASS=emphasis>make</I> (1) program does with one, you<I CLASS=emphasis>really</I> shouldn't be reading this section.  We will beassuming that you know what happens when you type a command like<tt CLASS=literal>make foo</tt>.</blockquote><P CLASS=para>Originally, this was done using a shell script (actually, one for eachextension) called <I CLASS=emphasis>Makefile.SH</I>, much like the one thatwrites the <I CLASS=emphasis>Makefile</I> for Perl itself.  But somewhere alongthe line, it occurred to the perl5-porters that, by the time you want to compileyour extensions, there's already a bare-bones version of the Perl executablecalled <I CLASS=emphasis>miniperl</I>, if not a fully installed<I CLASS=emphasis>perl</I>.  And for some strange reason, Perl programmers preferprogramming in Perl to programming in shell.  So they wrote MakeMaker, just sothat you can write <I CLASS=emphasis>Makefile.PL</I> instead of<I CLASS=emphasis>Makefile.SH</I>.<P CLASS=para>MakeMaker isn't a program; it's a module (or it wouldn't be in this chapter).The module provides the routines you need; you just need to <A HREF="ch03_02.htm#PERL2-CMD-USE">use</A> the module, and then call the routines.  As with anyprogramming job, there are many degrees of freedom; but your typical<I CLASS=emphasis>Makefile.PL</I> is pretty simple.  For example, here's<I CLASS=emphasis>ext/POSIX/Makefile.PL</I> from the Perl distribution's POSIXextension (which is by no means a trivial extension):<DIV CLASS=programlisting><P><PRE>use ExtUtils::MakeMaker;WriteMakefile(    NAME         =&gt; 'POSIX',    LIBS         =&gt; ["-lm -lposix -lcposix"],    MAN3PODS     =&gt; ' ',    # Pods will be built by installman.    XSPROTOARG   =&gt; '-noprototypes',       # XXX remove later?    VERSION_FROM =&gt; 'POSIX.pm', );</PRE></DIV><P CLASS=para>Several things are apparent from this example, but the most important isthat the <tt CLASS=literal>WriteMakefile()</tt> function uses named parameters.  Thismeans that you can pass many potential parameters, but you're only required topass the ones you want to be different from the default values.  (And when wesay "many", we mean "many"--there are about 75 of them.  See theAttributes section later.)<P CLASS=para>As the synopsis above indicates, the <tt CLASS=literal>WriteMakefile()</tt> functionactually constructs an object.  This object has attributes that are setfrom various sources, including the parameters you pass to the function.It's this object that actually writes your <I CLASS=emphasis>Makefile</I>,meshing together the demands of your extension with the demands of thearchitecture on which the extension is being installed.  Like manycraftily crafted objects, this MakeMaker object delegates as much of itswork as possible to various other subroutines and methods.  Many ofthese may be overridden in your <I CLASS=emphasis>Makefile.PL</I> if you need to do somefine tuning.  (Generally you don't.)<P CLASS=para>But let's not lose track of the goal, which is to write a <I CLASS=emphasis>Makefile</I>that will know how to do anything to your extension that needs doing.Now as you can imagine, the <I CLASS=emphasis>Makefile</I> that MakeMaker writes isquite, er, full-featured.  It's easy to get lost in all thedetails.  If you look at the POSIX <I CLASS=emphasis>Makefile</I> generatedby the bit of code above, you will find a file containing about 122macros and 77 targets.  You will want to go off into a corner and curlup into a little ball, saying, "Never mind, I didn't really want toknow."<P CLASS=para>Well, the fact of the matter is, you really <I CLASS=emphasis>don't</I> want to know,nor do you have to.  Most of these items take care of themselves--that'swhat MakeMaker is there for, after all.  We'll lay out the variousattributes and targets for you, but you can just pick and choose, likein a cafeteria.  We'll talk about the <I CLASS=emphasis>make</I> targets first, because they'rethe actions you eventually want to perform, and then work backwardto the macros and attributes that feed the targets.<P CLASS=para>But before we do that, you need to know just a few more architecturalfeatures of MakeMaker to make sense of some of the things we'll say.The targets at the end of your <I CLASS=emphasis>Makefile</I> depend on the macrodefinitions that are interpolated into them.  Those macro definitions inturn come from any of several places.  Depending on how you count, thereare about five sources of information for these attributes.  Ordered byincreasing precedence and (more or less) decreasing permanence, they are:<P><UL CLASS=itemizedlist><li CLASS=listitem>Platform-specific values in Perl's Config module, provided bythe <I CLASS=emphasis>Configure</I> program that was run when Perl was installed on this machine.<P><li CLASS=listitem>The <tt CLASS=literal>WriteMakefile()</tt> function call arguments in <I CLASS=emphasis>Makefile.Pl</I>,supplied by the extension writer.  (You saw some of those above.)<P><li CLASS=listitem>Platform-specific hints in the extension's <I CLASS=emphasis>hints/</I> directory, alsoprovided by extension writer.  We'll talk about those later.<P><li CLASS=listitem>Overriding values from the command line for <I CLASS=emphasis>Makefile.PL</I> script,supplied by the person who runs the script.  These look like <tt CLASS=literal>KEY=VALUE</tt>.<P><li CLASS=listitem>Overriding values from the command line for <I CLASS=emphasis>make</I> itself,supplied by the person who runs the <I CLASS=emphasis>make</I>.  These also look like <tt CLASS=literal>KEY=VALUE</tt>.<P></UL><P CLASS=para>The first four of these turn into attributes of the object we mentioned,and are eventually written out as macro definitions in your<I CLASS=emphasis>Makefile</I>.  In most cases, the names of the values are consistentfrom beginning to end.  (Except that the Config database keeps the namesin lowercase, as they come from Perl's <I CLASS=emphasis>config.sh</I> file.  The namesare translated to uppercase when they become attributes of the object.)In any case, we'll tend to use the term <I CLASS=emphasis>attributes</I> to mean bothattributes and the <I CLASS=emphasis>Makefile</I> macros derived from them.<P CLASS=para>The <I CLASS=emphasis>Makefile.PL</I> and the <I CLASS=emphasis>hints</I> may also provide overridingmethods for the object, if merely changing an attribute isn't goodenough.<P CLASS=para>The hints files are expected to be namedlike their counterparts in <I CLASS=emphasis>PERL_SRC/hints</I>, but with a <I CLASS=emphasis>.pl</I>filename extension (for example, <I CLASS=emphasis>next_3_2.pl</I> ), because the fileconsists of Perl code to be evaluated.  Apart from that, the rulesgoverning which hintsfile is chosen are the same as in <I CLASS=emphasis>Configure</I>.The hintsfile is <A HREF="ch03_02.htm#PERL2-CMD-EVAL">eval</A>ed within a routine that is a method of ourMakeMaker object, so if you want tooverride or create an attribute, you would say something like:<DIV CLASS=programlisting><P><PRE>$self-&gt;{LIBS} = ['-ldbm -lucb -lc'];</PRE></DIV><P CLASS=para>By and large, if your <I CLASS=emphasis>Makefile</I> isn't doing what you want, you justtrace back the name of the misbehaving attribute to its source, and eitherchange it there or override it downstream.<P CLASS=para>Extensions may be built using the contents of either the Perl sourcedirectory tree or the installed Perl library.  The recommended wayis to build extensions after you have run <I CLASS=emphasis>make install</I> on Perlitself.  You can then build your extension in any directory on your hard disk that is notbelow the Perl source tree.  The support for extensions below the<I CLASS=emphasis>ext/</I>directory of the Perl distribution is only good for the standardextensions that come with Perl.<P CLASS=para>If an extension is being built below the <I CLASS=emphasis>ext/</I> directory ofthe Perl source, then MakeMaker will set <tt CLASS=literal>PERL_SRC</tt>automatically (usually to <tt CLASS=literal>../..</tt>).  If<tt CLASS=literal>PERL_SRC</tt> is defined and the extension is recognized as astandard extension, then other variables default to the following:<DIV CLASS=programlisting><P><PRE>PERL_INC     = PERL_SRCPERL_LIB     = PERL_SRC/libPERL_ARCHLIB = PERL_SRC/libINST_LIB     = PERL_LIBINST_ARCHLIB = PERL_ARCHLIB</PRE></DIV><P CLASS=para>If an extension is being built away from the Perl source, then MakeMakerwill leave <tt CLASS=literal>PERL_SRC</tt> undefined and default to using the installed copyof the Perl library.  The other variables default to the following:<DIV CLASS=programlisting><P><PRE>PERL_INC     = $archlibexp/COREPERL_LIB     = $privlibexpPERL_ARCHLIB = $archlibexpINST_LIB     = ./blib/libINST_ARCHLIB = ./blib/arch</PRE></DIV><P CLASS=para>If Perl has not yet been installed, then <tt CLASS=literal>PERL_SRC</tt> can be defined asan override on the command line.<DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.19">Targets</A></h4><P CLASS=para>Far and away the most commonly used <I CLASS=emphasis>make</I> targets are those used bythe installer to install the extension.  So we aim to make the normalinstallation very easy:<DIV CLASS=programlisting><P><PRE>perl Makefile.PL  # generate the <I CLASS=emphasis>Makefile</I>make              # compile the extensionmake test         # test the extensionmake install      # install the extension</PRE></DIV><P CLASS=para>This assumes that the installer has dynamic linking available.  If not,a couple of additional commands are also necessary:<DIV CLASS=programlisting><P><PRE>make perl         # link a new <I CLASS=emphasis>perl</I> statically with this extensionmake inst_perl    # install that new <I CLASS=emphasis>perl</I> appropriately</PRE></DIV><P CLASS=para>Other interesting targets in the generated <I CLASS=emphasis>Makefile</I> are:<DIV CLASS=programlisting><P><PRE>make config       # check whether the <I CLASS=emphasis>Makefile</I> is up-to-datemake clean        # delete local temp files (<tt CLASS=replaceable><i>Makefile</i></tt> gets renamed)make realclean    # delete derived files (including <tt CLASS=replaceable><i>./blib</i></tt>)make ci           # check in all files in the <I CLASS=emphasis>MANIFEST</I> filemake dist         # see the "Distribution Support" section below</PRE></DIV><P CLASS=para>Now we'll talk about some of these commands, and how each of them isrelated to MakeMaker.  So we'll not only be talking about things thathappen when you invoke the <I CLASS=emphasis>make</I> target, but also about whatMakeMaker has to do to generate that <I CLASS=emphasis>make</I> target.  So braceyourself for some temporal whiplash.</DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.20">Running MakeMaker</A></h4><P CLASS=para>This command is the one most closely related to MakeMaker because it's theone in which you actually run MakeMaker.  No temporal whiplash here.As we mentioned earlier, some of the default attribute values may beoverridden by adding arguments of the form <tt CLASS=literal>KEY=VALUE</tt>.  Forexample:<DIV CLASS=programlisting><P><PRE>perl Makefile.PL PREFIX=/tmp/myperl5</PRE></DIV><P CLASS=para>To get a more detailed view of what MakeMaker is doing, say:<DIV CLASS=programlisting><P><PRE>perl Makefile.PL verbose</PRE></DIV></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.21">Making whatever is needed</A></h4><P CLASS=para>A <I CLASS=emphasis>make</I> command without arguments performs any compilation neededand puts any generated files into staging directories that are named by theattributes <tt CLASS=literal>INST_LIB</tt>, <tt CLASS=literal>INST_ARCHLIB</tt>, <tt CLASS=literal>INST_EXE</tt>,<tt CLASS=literal>INST_MAN1DIR</tt>, and <tt CLASS=literal>INST_MAN3DIR</tt>.These directories default tosomething below <I CLASS=emphasis>.&nbsp;/blib</I> if you are <I CLASS=emphasis>not</I> building below thePerl source directory.  If you <I CLASS=emphasis>are</I> building below the Perl source,<tt CLASS=literal>INST_LIB</tt> and <tt CLASS=literal>INST_ARCHLIB</tt> default to <I CLASS=emphasis>..&nbsp;/..&nbsp;/lib</I>,and <tt CLASS=literal>INST_EXE</tt> is not defined.</DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.22">Running tests</A></h4><P CLASS=para>The goal of this command is to run any regression tests supplied with theextension, so MakeMaker checks for the existence of a file named<I CLASS=emphasis>test.pl</I> in the current directory and, if it exists, addscommands to the <tt CLASS=literal>test</tt> target of the<I CLASS=emphasis>Makefile</I> that will execute the script with the proper setof Perl <B>-I</B> options (since the files haven't been installed into their final location yet).<P CLASS=para>MakeMaker also checks for any files matching<tt CLASS=literal>glob(`t/*.t`)</tt>.  It will add commands to the<tt CLASS=literal>test</tt> target that execute all matching files via theTest::Harness module with the <B>-I</B> switchesset correctly.  If you pass <tt CLASS=literal>TEST_VERBOSE=1</tt>, the<tt CLASS=literal>test</tt> target will run the tests verbosely.</DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.23">Installing files</A></h4><P CLASS=para>Once the installer has tested the extension, the various generated filesneed to get put into their final resting places.  The <tt CLASS=literal>install</tt>target copies the files found below each of the <tt CLASS=literal>INST_*</tt>directories to their <tt CLASS=literal>INSTALL*</tt> counterparts.<DIV CLASS=informaltable><P><A NAME="PERL2-CH-7-TAB-14.5"></A><TABLE CLASS=INFORMALTABLE><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>INST_LIB</tt></TD><TD ALIGN="left">-></TD><TD ALIGN="LEFT"><tt CLASS=literal>INSTALLPRIVLIB</tt>[1]<tt CLASS=literal>orINSTALLSITELIB</tt>[2]</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>INST_ARCHLIB</tt></TD><TD ALIGN="left">-></TD><TD ALIGN="LEFT"><tt CLASS=literal>INSTALLARCHLIB</tt>[1]<tt CLASS=literal>or INSTALLSITEARCH</tt>[2]</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>INST_EXE</tt></TD><TD ALIGN="left">-></TD><TD ALIGN="LEFT"><tt CLASS=literal>INSTALLBIN</tt></TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>INST_MAN1DIR</tt></TD><TD ALIGN="left">-></TD><TD ALIGN="LEFT"><tt CLASS=literal>INSTALLMAN1DIR</tt></TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>INST_MAN3DIR</tt></TD><TD ALIGN="left">-></TD><TD ALIGN="LEFT"><tt CLASS=literal>INSTALLMAN3DIR</tt></TD></TR><tr><td colspan=3><p><b>Footnotes:</b><p><blockquote>[1] <P CLASS=para>if <tt CLASS=literal>INSTALLDIRS</tt> set to"<tt CLASS=literal>perl</tt>"[2] <P CLASS=para>if<tt CLASS=literal>INSTALLDIRS</tt> set to"<tt CLASS=literal>site</tt>"</blockquote></td></tr></TABLE><P></DIV><P CLASS=para>The <tt CLASS=literal>INSTALL*</tt> attributes in turn default to their <tt CLASS=literal>%Config</tt>counterparts, <tt CLASS=literal>$Config{installprivlib}</tt>,<tt CLASS=literal>$Config{installarchlib}</tt>, and so on.<P CLASS=para>If you don't set <tt CLASS=literal>INSTALLARCHLIB</tt> or <tt CLASS=literal>INSTALLSITEARCH</tt>,MakeMaker willassume you want them to be subdirectories of <tt CLASS=literal>INSTALLPRIVLIB</tt>and <tt CLASS=literal>INSTALLSITELIB</tt>,respectively.  The exact relationship is determined by <I CLASS=emphasis>Configure</I>.  Butyou can usually just go with the defaults for all these attributes.<P CLASS=para>The <tt CLASS=literal>PREFIX</tt> attribute can be used to redirect all the <tt CLASS=literal>INSTALL*</tt>attributes in one go.  Here's the quickest way to install a module in anonstandard place:<DIV CLASS=programlisting><P><PRE>perl Makefile.PL PREFIX=~</PRE></DIV><P CLASS=para>The value you specify for <tt CLASS=literal>PREFIX</tt> replaces one or moreleading pathname components in all <tt CLASS=literal>INSTALL*</tt> attributes.  Theprefix to be replaced is determined by the value of<tt CLASS=literal>$Config{prefix}</tt>, which typically has a value like <I CLASS=emphasis>/usr</I>.(Note that the tilde expansion above is done by MakeMaker, not by<I CLASS=emphasis>perl</I> or <I CLASS=emphasis>make</I>.)<P CLASS=para>If the user has superuser privileges and is not working under theAndrew File System (AFS) or relatives, then the defaults for<tt CLASS=literal>INSTALLPRIVLIB</tt>, <tt CLASS=literal>INSTALLARCHLIB</tt>, <tt CLASS=literal>INSTALLBIN</tt>, and soon should be appropriate.<P CLASS=para>By default, <I CLASS=emphasis>make install</I> writes some documentation of what has beendone into the file given by <tt CLASS=literal>$(INSTALLARCHLIB)/perllocal.pod</tt>.This feature can be bypassed by calling <I CLASS=emphasis>make pure_install</I>.<P CLASS=para>If you are using AFS, you mustspecify the installation directories, since these mostprobably have changed since Perl itself was installed.Do this by issuing these commands:<DIV CLASS=programlisting><P><PRE>perl Makefile.PL INSTALLSITELIB=/afs/here/today    INSTALLBIN=/afs/there/now INSTALLMAN3DIR=/afs/for/manpagesmake</PRE></DIV><P CLASS=para>Be careful to repeat this procedure every time you recompile anextension, unless you are sure the AFS installation directories arestill valid.</DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.24">Static linking of a new Perl binary</A></h4><P CLASS=para>The steps above are sufficient on a system supporting dynamic loading.On systems that do not support dynamic loading, however, the extensionhas to be linked together statically with everything else you might wantin your <I CLASS=emphasis>perl</I> executable.  MakeMaker supports the linking processby creating appropriate targets in the <I CLASS=emphasis>Makefile</I>.  If you say:<DIV CLASS=programlisting><P><PRE>make perl</PRE></DIV><P CLASS=para>it will produce a new <I CLASS=emphasis>perl</I> binary in the current directory withall extensions linked in that can be found in <tt CLASS=literal>INST_ARCHLIB</tt>,<tt CLASS=literal>SITELIBEXP</tt>, and <tt CLASS=literal>PERL_ARCHLIB</tt>.  To do that, MakeMakerwrites a new <I CLASS=emphasis>Makefile</I>&nbsp;; on UNIX it is called <I CLASS=emphasis>Makefile.aperl</I>,but the name may be system-dependent.  When you want to force thecreation of a new <I CLASS=emphasis>perl</I>, we recommend that you delete this<I CLASS=emphasis>Makefile.aperl</I> so the directories are searched for linkablelibraries again.<P CLASS=para>The binary can be installed in the directory where Perl normallyresides on your machine with:<DIV CLASS=programlisting><P><PRE>make inst_perl</PRE></DIV><P CLASS=para>To produce a Perl binary with a different filename than <I CLASS=emphasis>perl</I>, either say:<DIV CLASS=programlisting><P><PRE>perl Makefile.PL MAP_TARGET=myperlmake myperlmake inst_perl</PRE></DIV><P CLASS=para>or say:<DIV CLASS=programlisting><P><PRE>perl Makefile.PLmake myperl MAP_TARGET=myperlmake inst_perl MAP_TARGET=myperl</PRE></DIV><P CLASS=para>In either case, you will be asked to confirm the invocation of the<tt CLASS=literal>inst_perl</tt> target, since this invocation is likely to overwriteyour existing Perl binary in <tt CLASS=literal>INSTALLBIN</tt>.<P CLASS=para>By default <I CLASS=emphasis>make inst_perl</I> documents what has beendone in the file given by <tt CLASS=literal>$(INSTALLARCHLIB)/perllocal.pod</tt>.  Thisbehavior can be bypassed by calling <I CLASS=emphasis>make pure_inst_perl</I>.<P CLASS=para>Sometimes you might want to build a statically linked Perl even thoughyour system supports dynamic loading.  In this case you may explicitlyset the linktype:<DIV CLASS=programlisting><P><PRE>perl Makefile.PL LINKTYPE=static</PRE></DIV></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.25">Attributes you can set</A></h4><P CLASS=para>The following attributes can be specified as arguments to<tt CLASS=literal>WriteMakefile()</tt> or as <tt CLASS=literal>NAME=VALUE</tt> pairs on the commandline.  We give examples below in the form they would appear in your<I CLASS=emphasis>Makefile.PL</I>, that is, as though passed as a named parameter to<tt CLASS=literal>WriteMakefile()</tt> (including the comma that comes after it).<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>C</tt>      <DD><P CLASS=para>A reference to an array of *<I CLASS=emphasis>.c</I> filenames.  It's initialized by doing adirectory scan and by derivation from the values of the <tt CLASS=literal>XS</tt>attribute hash.  This is not currently used by MakeMaker but may behandy in <I CLASS=emphasis>Makefile.PL</I>s.<p><DT CLASS=varlistentry><tt CLASS=literal>CONFIG</tt><DD><P CLASS=para>An array reference containing a list of attributes to fetch from<tt CLASS=literal>%Config</tt>.  For example:<DIV CLASS=programlisting><P><PRE>CONFIG =&gt; [qw(archname manext)],</PRE></DIV><P CLASS=para>defines<tt CLASS=literal>ARCHNAME</tt> and <tt CLASS=literal>MANEXT</tt> from <I CLASS=emphasis>config.sh</I>.  MakeMaker willautomatically add the following values to <tt CLASS=literal>CONFIG</tt>:<DIV CLASS=programlisting><P><PRE>ar            dlext        ldflags     ranlibcc            dlsrc        libc        sitelibexpcccdlflags    ld           lib_ext     sitearchexpccdlflags     lddlflags    obj_ext     so</PRE></DIV><p><DT CLASS=varlistentry><tt CLASS=literal>CONFIGURE</tt><DD><P CLASS=para>A reference to a subroutine returning a hash reference.  Thehash may contain further attributes, for example, <tt CLASS=literal>{LIBS =&gt; ...}</tt>,that have to be determined by some evaluation method.  Be careful,because any attributes defined this way will override hints and<tt CLASS=literal>WriteMakefile( )</tt> parameters (but not command-line arguments).<p><DT CLASS=varlistentry><tt CLASS=literal>DEFINE</tt><DD><P CLASS=para>An attribute containing additional defines, such as <tt CLASS=literal>-DHAVE_UNISTD_H</tt>.<p><DT CLASS=varlistentry><tt CLASS=literal>DIR</tt><DD><P CLASS=para>A reference to an array of subdirectories containing<I CLASS=emphasis>Makefile.PL</I>s.  For example, SDBM_FILE has:<DIV CLASS=programlisting><P><PRE>DIR =&gt; ['sdbm'],</PRE></DIV><P CLASS=para>MakeMaker will automatically do recursive MakeMaking if subdirectoriescontain <I CLASS=emphasis>Makefile.PL</I> files.  A separate MakeMaker class isgenerated for each subdirectory, so each MakeMaker object can overridemethods using the fake <tt CLASS=literal>MY::</tt> class (see below) withoutinterfering with other MakeMaker objects.  You don't even need a<I CLASS=emphasis>Makefile.PL</I> in the top level directory if you pass one in via<B>-M</B> and <B>-e</B>:<DIV CLASS=programlisting><P><PRE>perl -MExtUtils::MakeMaker -e 'WriteMakefile()'</PRE></DIV><p><DT CLASS=varlistentry><tt CLASS=literal>DISTNAME</tt><DD><P CLASS=para>Your name for distributing the package (by <I CLASS=emphasis>tar</I> file).  This defaults to<tt CLASS=literal>NAME</tt> below.<p><DT CLASS=varlistentry><tt CLASS=literal>DL_FUNCS</tt><DD><P CLASS=para>A reference to a hash of symbol names for routines to be made availableas universal symbols.  Each key/value pair consists of the package nameand an array of routine names in that package.  This attribute is usedonly under AIX (export lists) and VMS (linker options) at present.  Theroutine names supplied will be expanded in the same way as <tt CLASS=literal>XSUB</tt>names are expanded by the <tt CLASS=literal>XS</tt> attribute.<P CLASS=para>The default key/value pairlooks like this:<DIV CLASS=programlisting><P><PRE>"$PKG" =&gt; ["boot_$PKG"]</PRE></DIV><P CLASS=para>For a pair of packages named RPC and NetconfigPtr, you might, forexample, set it to this:<DIV CLASS=programlisting><P><PRE>DL_FUNCS =&gt; {    RPC          =&gt; [qw(boot_rpcb rpcb_gettime getnetconfigent)],    NetconfigPtr =&gt; ['DESTROY'],},</PRE></DIV><p><DT CLASS=varlistentry><tt CLASS=literal>DL_VARS</tt><DD><P CLASS=para>An array of symbol names for variables to be made available asuniversal symbols.  It's used only under AIX (export lists) and VMS(linker options) at present.  Defaults to <tt CLASS=literal>[]</tt>.  A typicalvalue might look like this:<DIV CLASS=programlisting><P><PRE>DL_VARS =&gt; [ qw( Foo_version Foo_numstreams Foo_tree ) ],</PRE></DIV><p><DT CLASS=varlistentry><tt CLASS=literal>EXE_FILES</tt><DD><P CLASS=para>A reference to an array of executable files.  The files will be copied to the<tt CLASS=literal>INST_EXE</tt> directory.  A <I CLASS=emphasis>make realclean</I> command will deletethem from there again.<p><DT CLASS=varlistentry><tt CLASS=literal>FIRST_MAKEFILE</tt><DD><P CLASS=para>The name of the <I CLASS=emphasis>Makefile</I> to be produced.  Defaults to the contentsof <tt CLASS=literal>MAKEFILE</tt>, but can be overridden.  This is used for the second<I CLASS=emphasis>Makefile</I> that will be produced for the <tt CLASS=literal>MAP_TARGET</tt>.<p><DT CLASS=varlistentry><tt CLASS=literal>FULLPERL</tt><DD><P CLASS=para>A Perl binary able to run this extension.<p><DT CLASS=varlistentry><tt CLASS=literal>H</tt>      <DD><P CLASS=para>A reference to an array of *<I CLASS=emphasis>.h</I> filenames.  Similar to <tt CLASS=literal>C</tt>.<p><DT CLASS=varlistentry><tt CLASS=literal>INC</tt><DD><P CLASS=para>Directories containing include files, in <B>-I</B> form.  For example:<DIV CLASS=programlisting><P><PRE>INC =&gt; "-I/usr/5include -I/path/to/inc",</PRE></DIV><p><DT CLASS=varlistentry><tt CLASS=literal>INSTALLARCHLIB</tt><DD><P CLASS=para>Used by <I CLASS=emphasis>make install</I>, which copies files from<tt CLASS=literal>INST_ARCHLIB</tt> to this directory if<tt CLASS=literal>INSTALLDIRS</tt> is set to "<tt CLASS=literal>perl</tt>".<DT CLASS=varlistentry><tt CLASS=literal>INSTALLBIN</tt><DD><P CLASS=para>Used by <I CLASS=emphasis>make install</I>, which copies files from<tt CLASS=literal>INST_EXE</tt> to this directory.<p><DT CLASS=varlistentry><tt CLASS=literal>INSTALLDIRS</tt><DD><P CLASS=para>Determines which of the two sets of installation directories tochoose: <I CLASS=emphasis>installprivlib</I> and <I CLASS=emphasis>installarchlib</I> versus<I CLASS=emphasis>installsitelib</I> and <I CLASS=emphasis>installsitearch</I>.  The first pair is chosenwith <tt CLASS=literal>INSTALLDIRS=perl</tt>, the second with <tt CLASS=literal>INSTALLDIRS=site</tt>.The default is "<tt CLASS=literal>site</tt>".<p><DT CLASS=varlistentry><tt CLASS=literal>INSTALLMAN1DIR</tt><DD><P CLASS=para>This directory gets the command manpages at <I CLASS=emphasis>makeinstall</I> time. It defaults to<tt CLASS=literal>$Config{installman1dir}</tt>.<p><DT CLASS=varlistentry><tt CLASS=literal>INSTALLMAN3DIR</tt><DD><P CLASS=para>This directory gets the library manpages at <I CLASS=emphasis>makeinstall</I> time. It defaults to<tt CLASS=literal>$Config{installman3dir}</tt>.<p><DT CLASS=varlistentry><tt CLASS=literal>INSTALLPRIVLIB</tt><DD><P CLASS=para>Used by <I CLASS=emphasis>make install</I>, which copies files from<tt CLASS=literal>INST_LIB</tt> to this directory if <tt CLASS=literal>INSTALLDIRS</tt>is set to "<tt CLASS=literal>perl</tt>".<p><DT CLASS=varlistentry><tt CLASS=literal>INSTALLSITELIB</tt><DD><P CLASS=para>Used by <I CLASS=emphasis>make install</I>, which copies files from<tt CLASS=literal>INST_LIB</tt> to this directory if <tt CLASS=literal>INSTALLDIRS</tt>is set to "<tt CLASS=literal>site</tt>" (default).<p><DT CLASS=varlistentry><tt CLASS=literal>INSTALLSITEARCH</tt><DD><P CLASS=para>Used by <I CLASS=emphasis>make install</I>, which copies files from<tt CLASS=literal>INST_ARCHLIB</tt> to this directory if<tt CLASS=literal>INSTALLDIRS</tt> is set to "<tt CLASS=literal>site</tt>"(default).<p><DT CLASS=varlistentry><tt CLASS=literal>INST_ARCHLIB</tt><DD><P CLASS=para>Same as <tt CLASS=literal>INST_LIB</tt>, but for architecture-dependent files.<p><DT CLASS=varlistentry><tt CLASS=literal>INST_EXE</tt><DD><P CLASS=para>Directory where executable scripts should be staged during running of<I CLASS=emphasis>make</I>.  Defaults to <tt CLASS=literal>./blib/bin</tt>, just tohave a dummy location during testing.  <I CLASS=emphasis>make install</I> willcopy the files in <tt CLASS=literal>INST_EXE</tt> to <tt CLASS=literal>INSTALLBIN</tt>.<p><DT CLASS=varlistentry><tt CLASS=literal>INST_LIB</tt><DD><P CLASS=para>Directory where we put library files of this extension while buildingit.<p><DT CLASS=varlistentry><tt CLASS=literal>INST_MAN1DIR</tt><DD><P CLASS=para>Directory to hold the command manpages at <I CLASS=emphasis>make</I> time.<p><DT CLASS=varlistentry><tt CLASS=literal>INST_MAN3DIR</tt><DD><P CLASS=para>Directory to hold the library manpages at <I CLASS=emphasis>make</I> time<p><DT CLASS=varlistentry><tt CLASS=literal>LDFROM</tt><DD><P CLASS=para>Defaults to <tt CLASS=literal>$(OBJECT)</tt> and is used in the <I CLASS=emphasis>ld</I> (1) command to specifywhat files to link/load from.  (Also see <tt CLASS=literal>dynamic_lib</tt> later for how tospecify <I CLASS=emphasis>ld</I> flags.)<DT CLASS=varlistentry><tt CLASS=literal>LIBPERL_A</tt><DD><P CLASS=para>The filename of the Perl library that will be used together with thisextension.  Defaults to <I CLASS=emphasis>libperl.a</I>.<p><DT CLASS=varlistentry><tt CLASS=literal>LIBS</tt><DD><P CLASS=para>An anonymous array of alternative libraryspecifications to be searched for (in order) untilat least one library is found. <P CLASS=para>For example:<DIV CLASS=programlisting><P><PRE>LIBS =&gt; ["-lgdbm", "-ldbm -lfoo", "-L/path -ldbm.nfs"],</PRE></DIV><P CLASS=para>Note that any element of the arraycontains a complete set of arguments for the <I CLASS=emphasis>ld</I>command.  So do not specify:<DIV CLASS=programlisting><P><PRE>LIBS =&gt; ["-ltcl", "-ltk", "-lX11"],</PRE></DIV><P CLASS=para>See <I CLASS=emphasis>NDBM_File/Makefile.PL</I> for an example where an array is needed.  Ifyou specify a scalar as in:<DIV CLASS=programlisting><P><PRE>LIBS =&gt; "-ltcl -ltk -lX11",</PRE></DIV><P CLASS=para>MakeMaker will turn it into an array with one element.<p><DT CLASS=varlistentry><tt CLASS=literal>LINKTYPE</tt><DD><P CLASS=para>"<tt CLASS=literal>static</tt>" or"<tt CLASS=literal>dynamic</tt>" (the latter is the default unless<tt CLASS=literal>usedl=undef</tt> in <I CLASS=emphasis>config.sh</I>).  Should onlybe used to force static linking.  (Also see <tt CLASS=literal>linkext</tt>, later inthis chapter).<p><DT CLASS=varlistentry><tt CLASS=literal>MAKEAPERL</tt><DD><P CLASS=para>Boolean that tells MakeMaker to include the rules formaking a Perl binary. This is handled automatically as a switch byMakeMaker. The user normally does not need it.<p><DT CLASS=varlistentry><tt CLASS=literal>MAKEFILE</tt><DD><P CLASS=para>The name of the <I CLASS=emphasis>Makefile</I> to be produced.<p><DT CLASS=varlistentry><tt CLASS=literal>MAN1PODS</tt><DD><P CLASS=para>A reference to a hash of POD-containing files.  MakeMaker will defaultthis to all <tt CLASS=literal>EXE_FILES</tt> files that include POD directives.  Thefiles listed here will be converted to manpages and installed asrequested at <I CLASS=emphasis>Configure</I> time.<p><DT CLASS=varlistentry><tt CLASS=literal>MAN3PODS</tt><DD><P CLASS=para>A reference to a hash of <I CLASS=emphasis>.pm</I> and <I CLASS=emphasis>.pod</I> files.  MakeMaker willdefault this to all <I CLASS=emphasis>.pod</I> and any <I CLASS=emphasis>.pm</I> files that includePOD directives.  The files listed here will be converted to manpagesand installed as requested at <I CLASS=emphasis>Configure</I> time.<p><DT CLASS=varlistentry><tt CLASS=literal>MAP_TARGET</tt><DD><P CLASS=para>If it is intended that a new Perl binary be produced, this variableholds the name for that binary.  Defaults to <I CLASS=emphasis>perl</I>.<p><DT CLASS=varlistentry><tt CLASS=literal>MYEXTLIB</tt><DD><P CLASS=para>If the extension links to a library that it builds, set this to thename of the library (see SDBM_File).<p><DT CLASS=varlistentry><tt CLASS=literal>NAME</tt><DD><P CLASS=para>Perl module name for this extension (for example, <tt CLASS=literal>DBD::Oracle</tt>).This will default to the directory name, but should really be explicitlydefined in the <I CLASS=emphasis>Makefile.PL</I>.<p><DT CLASS=varlistentry><tt CLASS=literal>NEEDS_LINKING</tt><DD><P CLASS=para>MakeMaker will figure out whether an extension contains linkable codeanywhere down the directory tree, and will set this variableaccordingly.  But you can speed it up a very little bit if you definethis Boolean variable yourself.<p><DT CLASS=varlistentry><tt CLASS=literal>NOECHO</tt><DD><P CLASS=para>Governs <I CLASS=emphasis>make</I>&nbsp;'s <tt CLASS=literal>@</tt> (echoing) feature.  By setting <tt CLASS=literal>NOECHO</tt>to an empty string, you can generate a<I CLASS=emphasis>Makefile</I> that echos all commands.  Mainly used in debugging MakeMakeritself.<p><DT CLASS=varlistentry><tt CLASS=literal>NORECURS</tt><DD><P CLASS=para>A Boolean that inhibits the automatic descent into subdirectories (see<tt CLASS=literal>DIR</tt> above).  For example:<DIV CLASS=programlisting><P><PRE>NORECURS =&gt; 1,</PRE></DIV><p><DT CLASS=varlistentry><tt CLASS=literal>OBJECT</tt><DD><P CLASS=para>A string containing a list of object files, defaulting to<tt CLASS=literal>$(BASEEXT)$(OBJ_EXT)</tt>.  But it can be a long string containingall object files.  For example:<DIV CLASS=programlisting><P><PRE>OBJECT =&gt; "tkpBind.o tkpButton.o tkpCanvas.o",</PRE></DIV><p><DT CLASS=varlistentry><tt CLASS=literal>PERL</tt><DD><P CLASS=para>Perl binary for tasks that can be done by <I CLASS=emphasis>miniperl</I>.<p><DT CLASS=varlistentry><tt CLASS=literal>PERLMAINCC</tt><DD><P CLASS=para>The command line that is able to compile <I CLASS=emphasis>perlmain.c</I>.  Defaultsto <tt CLASS=literal>$(CC)</tt>.<p><DT CLASS=varlistentry><tt CLASS=literal>PERL_ARCHLIB</tt><DD><P CLASS=para>Same as <tt CLASS=literal>PERL_LIB</tt> for architecture-dependent files.<p><DT CLASS=varlistentry><tt CLASS=literal>PERL_LIB</tt><DD><P CLASS=para>The directory containing the Perl library to use.<p><DT CLASS=varlistentry><tt CLASS=literal>PERL_SRC</tt><DD><P CLASS=para>The directory containing the Perl source code.  Use of this should beavoided, since it may be undefined.<p><DT CLASS=varlistentry><tt CLASS=literal>PL_FILES</tt><DD><P CLASS=para>A reference to hash of files to be processed as Perl programs.  By defaultMakeMaker will turn the names of any *<I CLASS=emphasis>.PL</I> files it finds (except<I CLASS=emphasis>Makefile.PL</I>) into keys, and use the basenames of these files as values.For example:<DIV CLASS=programlisting><P><PRE>PL_FILES =&gt; {'whatever.PL' =&gt; 'whatever'},</PRE></DIV><P CLASS=para>This turns into a Makefile entry resembling:<DIV CLASS=programlisting><P><PRE>all :: whateverwhatever :: whatever.PL        $(PERL) -I$(INST_ARCHLIB) -I$(INST_LIB) \                -I$(PERL_ARCHLIB) -I$(PERL_LIB) whatever.PL</PRE></DIV><P CLASS=para>You'll note that there's no I/O redirection into <I CLASS=emphasis>whatever</I> there.The *<I CLASS=emphasis>.PL</I> files are expected to produce output to the target filesthemselves.<p><DT CLASS=varlistentry><tt CLASS=literal>PM</tt>      <DD><P CLASS=para>A reference to a hash of <I CLASS=emphasis>.pm</I> files and<I CLASS=emphasis>.pl</I> files to be installed. For example:<DIV CLASS=programlisting><P><PRE>PM =&gt; {'name_of_file.pm' =&gt; '$(INST_LIBDIR)/install_as.pm'},</PRE></DIV><P CLASS=para>By default this includes *<I CLASS=emphasis>.pm</I> and*<I CLASS=emphasis>.pl</I>.  If a <I CLASS=emphasis>lib/</I> subdirectory existsand is not listed in <tt CLASS=literal>DIR</tt> (above) then any*<I CLASS=emphasis>.pm</I> and *<I CLASS=emphasis>.pl</I> files it contains willalso be included by default.  Defining <tt CLASS=literal>PM</tt> in the<I CLASS=emphasis>Makefile.PL</I> will override <tt CLASS=literal>PMLIBDIRS</tt>.<p><DT CLASS=varlistentry><tt CLASS=literal>PMLIBDIRS</tt><DD><P CLASS=para>A reference to an array of subdirectories that contain library files.Defaults to:<DIV CLASS=programlisting><P><PRE>PMLIBDIRS =&gt; [ 'lib', '$(BASEEXT)' ],</PRE></DIV><P CLASS=para>The directories will be scanned and any filesthey contain will be installed in the corresponding location in thelibrary.  A <tt CLASS=literal>libscan()</tt> method may be used to alter the behavior.Defining <tt CLASS=literal>PM</tt> in the <I CLASS=emphasis>Makefile.PL</I> will override <tt CLASS=literal>PMLIBDIRS</tt>.<p><DT CLASS=varlistentry><tt CLASS=literal>PREFIX</tt><DD><P CLASS=para>May be used to set the three <tt CLASS=literal>INSTALL*</tt> attributes in one go (except forprobably <tt CLASS=literal>INSTALLMAN1DIR</tt> if it is not below <tt CLASS=literal>PREFIX</tt> according to<tt CLASS=literal>%Config</tt>).  They will have <tt CLASS=literal>PREFIX</tt> as a common directory nodeand will branch from that node into <tt CLASS=literal>lib/</tt>, <tt CLASS=literal>lib/ARCHNAME</tt>or whatever <I CLASS=emphasis>Configure</I> decided at the build time of your Perl (unlessyou override one of them, of course).<p><DT CLASS=varlistentry><tt CLASS=literal>PREREQ</tt><DD><P CLASS=para>A placeholder, not yet implemented.  Will eventually be a hashreference: the keys of the hash are names of modules that need to beavailable to run this extension (for example, Fcntl for SDBM_File); thevalues of the hash are the desired versions of the modules.<p><DT CLASS=varlistentry><tt CLASS=literal>SKIP</tt><DD><P CLASS=para>An array reference specifying the names of sections of the<I CLASS=emphasis>Makefile</I> not to write.  For example:<DIV CLASS=programlisting><P><PRE>SKIP =&gt; [qw(name1 name2)],</PRE></DIV><p><DT CLASS=varlistentry><tt CLASS=literal>TYPEMAPS</tt><DD><P CLASS=para>A reference to an array of typemap filenames.  (Typemaps are used by theXS preprocessing system.)  Use this when the typemaps arein some directory other than the current directory or when they arenot named <I CLASS=emphasis>typemap</I>.  The last typemap in the list takesprecedence.  A typemap in the current directory has highestprecedence, even if it isn't listed in <tt CLASS=literal>TYPEMAPS</tt>.  The default systemtypemap has lowest precedence.<p><DT CLASS=varlistentry><tt CLASS=literal>VERSION</tt><DD><P CLASS=para>Your version number for distributing the package.  This number defaults to0.1.<p><DT CLASS=varlistentry><tt CLASS=literal>VERSION_FROM</tt><DD><P CLASS=para>Instead of specifying the <tt CLASS=literal>VERSION</tt> in the <I CLASS=emphasis>Makefile.PL</I>, you can letMakeMaker parse a file to determine the version number.  The parsingroutine requires that the file named by <tt CLASS=literal>VERSION_FROM</tt> contain onesingle line to compute the version number.  The first line in the filethat contains the regular expression:<DIV CLASS=programlisting><P><PRE>/(\$[\w:]*\bVERSION)\b.*=/</PRE></DIV><P CLASS=para>will be evaluated with <A HREF="ch03_02.htm#PERL2-CMD-EVAL">eval</A> and the value of the named variableafter the <A HREF="ch03_02.htm#PERL2-CMD-EVAL">eval</A> will be assigned to the <tt CLASS=literal>VERSION</tt> attribute of theMakeMaker object.  The following lines will be parsed satisfactorily:<DIV CLASS=programlisting><P><PRE>$VERSION = '1.00';( $VERSION ) = '$Revision: 1.52 $ ' =~ /\$Revision:\s+([^\s]+)/;$FOO::VERSION = '1.10';</PRE></DIV><P CLASS=para>but these will fail:<DIV CLASS=programlisting><P><PRE>my $VERSION = '1.01';local $VERSION = '1.02';local $FOO::VERSION = '1.30';</PRE></DIV><P CLASS=para>The file named in <tt CLASS=literal>VERSION_FROM</tt> is added as a dependency to the<I CLASS=emphasis>Makefile</I> in order to guarantee that the <I CLASS=emphasis>Makefile</I> containsthe correct <tt CLASS=literal>VERSION</tt> attribute after a change of the file.<p><DT CLASS=varlistentry><tt CLASS=literal>XS</tt>      <DD><P CLASS=para>A hash reference of <I CLASS=emphasis>.xs</I> files.  MakeMaker will default this.For example:<DIV CLASS=programlisting><P><PRE>XS =&gt; {'name_of_file.xs' =&gt; 'name_of_file.c'},</PRE></DIV><P CLASS=para>The *<I CLASS=emphasis>.c</I> files will automatically be included in the list of filesdeleted by a <I CLASS=emphasis>make clean</I>.<p><DT CLASS=varlistentry><tt CLASS=literal>XSOPT</tt><DD><P CLASS=para>A string of options to pass to <I CLASS=emphasis>xsubpp</I> (the XS preprocessor).  Thismight include <tt CLASS=literal>-C++</tt> or <tt CLASS=literal>-extern</tt>.  Do not include typemapshere; the <tt CLASS=literal>TYPEMAP</tt> parameter exists for that purpose.<p><DT CLASS=varlistentry><tt CLASS=literal>XSPROTOARG</tt><DD><P CLASS=para>May be set to an empty string, which is identical to <tt CLASS=literal>-prototypes</tt>, or<tt CLASS=literal>-noprototypes</tt>.MakeMaker defaults to the empty string.<p><DT CLASS=varlistentry><tt CLASS=literal>XS_VERSION</tt><DD><P CLASS=para>Your version number for the <I CLASS=emphasis>.xs</I> file of this package.  This defaultsto the value of the <tt CLASS=literal>VERSION</tt> attribute.</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.26">Additional lowercase attributes</A></h4><P CLASS=para>There are additional lowercase attributes that you can use to passparameters to the methods that spit out particular portionsof the <I CLASS=emphasis>Makefile</I>. These attributes are not normally required.<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>clean</tt><DD><P CLASS=para>Extra files to clean.<DIV CLASS=programlisting><P><PRE>clean =&gt; {FILES =&gt; "*.xyz foo"},</PRE></DIV><p><DT CLASS=varlistentry><tt CLASS=literal>depend</tt><DD><P CLASS=para>Extra dependencies.<DIV CLASS=programlisting><P><PRE>depend =&gt; {<tt CLASS=replaceable><i>ANY_TARGET</i></tt> =&gt; <tt CLASS=replaceable><i>ANY_DEPENDENCY</i></tt>, ...},</PRE></DIV><p><DT CLASS=varlistentry><tt CLASS=literal>dist</tt><DD><P CLASS=para>Options for distribution (see "Distribution Support" below).<DIV CLASS=programlisting><P><PRE>dist =&gt; {    TARFLAGS =&gt; 'cvfF',    COMPRESS =&gt; 'gzip',    SUFFIX =&gt; 'gz',    SHAR =&gt; 'shar -m',    DIST_CP =&gt; 'ln',},</PRE></DIV><P CLASS=para>If you specify <tt CLASS=literal>COMPRESS</tt>, then <tt CLASS=literal>SUFFIX</tt>should also be altered, since it is needed in order to specify for<I CLASS=emphasis>make</I> the target file of the compression.  Setting<tt CLASS=literal>DIST_CP</tt> to "<tt CLASS=literal>ln</tt>" canbe useful if you need topreserve the timestamps on your files.  <tt CLASS=literal>DIST_CP</tt> can take thevalues "<tt CLASS=literal>cp</tt>" (copy the file),"<tt CLASS=literal>ln</tt>" (link the file), or"<tt CLASS=literal>best</tt>" (copy symbolic links and link the rest).Default is "<tt CLASS=literal>best</tt>".<p><DT CLASS=varlistentry><tt CLASS=literal>dynamic_lib</tt><DD><P CLASS=para>Options for dynamic library support.<DIV CLASS=programlisting><P><PRE>dynamic_lib =&gt; {    ARMAYBE =&gt; 'ar',    OTHERLDFLAGS =&gt; '...',    INST_DYNAMIC_DEP =&gt; '...',},</PRE></DIV><p><DT CLASS=varlistentry><tt CLASS=literal>installpm</tt><DD><P CLASS=para>Some installation options having to do with AutoSplit.<DIV CLASS=programlisting><P><PRE>{SPLITLIB =&gt; '$(INST_LIB)' (default) or '$(INST_ARCHLIB)'}</PRE></DIV><p><DT CLASS=varlistentry><tt CLASS=literal>linkext</tt><DD><P CLASS=para>Linking style.<DIV CLASS=programlisting><P><PRE>linkext =&gt; {LINKTYPE =&gt; 'static', 'dynamic', or ""},</PRE></DIV><P CLASS=para>Extensions that have nothing but <I CLASS=emphasis>*.pm</I> files used to have to say:<DIV CLASS=programlisting><P><PRE>linkext =&gt; {LINKTYPE =&gt; ""},</PRE></DIV><P CLASS=para>with Pre-5.0 MakeMakers.  With Version 5.00 of MakeMaker such a linecan be deleted safely.  MakeMaker recognizes when there's nothing tobe linked.<p><DT CLASS=varlistentry><tt CLASS=literal>macro</tt><DD><P CLASS=para>Extra macros to define.<DIV CLASS=programlisting><P><PRE>macro =&gt; {ANY_MACRO =&gt; ANY_VALUE, ...},</PRE></DIV><p><DT CLASS=varlistentry><tt CLASS=literal>realclean</tt><DD><P CLASS=para>Extra files to really clean.<DIV CLASS=programlisting><P><PRE>{FILES =&gt; '$(INST_ARCHAUTODIR)/*.xyz'}</PRE></DIV></DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.27">Useful Makefile macros</A></h4><P CLASS=para>Here are some useful macros that you probably shouldn't redefine becausethey're derivative.<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>FULLEXT</tt><DD><P CLASS=para>Pathname for extension directory (for example, <I CLASS=emphasis>DBD/Oracle</I>).<DT CLASS=varlistentry><tt CLASS=literal>BASEEXT</tt><DD><P CLASS=para>Basename part of <tt CLASS=literal>FULLEXT</tt>.  May be just equal to <tt CLASS=literal>FULLEXT</tt>.<p><DT CLASS=varlistentry><tt CLASS=literal>ROOTEXT</tt><DD><P CLASS=para>Directory part of <tt CLASS=literal>FULLEXT</tt> with leading slash (for example, <I CLASS=emphasis>/DBD</I>)<p><DT CLASS=varlistentry><tt CLASS=literal>INST_LIBDIR</tt><DD><P CLASS=para><tt CLASS=literal>$(INST_LIB)$(ROOTEXT)</tt><p><DT CLASS=varlistentry><tt CLASS=literal>INST_AUTODIR</tt><DD><P CLASS=para><tt CLASS=literal>$(INST_LIB)/auto/$(FULLEXT)</tt><p><DT CLASS=varlistentry><tt CLASS=literal>INST_ARCHAUTODIR</tt><DD><P CLASS=para><tt CLASS=literal>$(INST_ARCHLIB)/auto/$(FULLEXT)</tt></DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.28">Overriding MakeMaker methods</A></h4><P CLASS=para>If you cannot achieve the desired <I CLASS=emphasis>Makefile</I> behavior by specifyingattributes, you may define private subroutines in the <I CLASS=emphasis>Makefile.PL</I>.Each subroutine returns the text it wishes to have written tothe <I CLASS=emphasis>Makefile</I>.  To override a section of the <I CLASS=emphasis>Makefile</I> you canuse one of two styles.  You can just return a new value:<DIV CLASS=programlisting><P><PRE>sub MY::c_o { "new literal text" }</PRE></DIV><P CLASS=para>or you can edit the default by saying something like:<DIV CLASS=programlisting><P><PRE>sub MY::c_o {    my $self = shift;    local *c_o;    $_=$self-&gt;MM::c_o;    s/old text/new text/;    $_;}</PRE></DIV><P CLASS=para>Both methods above are available for backward compatibility witholder <I CLASS=emphasis>Makefile.PL</I>s.<P CLASS=para>If you still need a different solution, try to develop another subroutine thatbetter fits your needs and then submit the diffs to either<I CLASS=emphasis>perl5-porters@nicoh.com</I> or<I CLASS=emphasis>comp.lang.perl.modules</I> as appropriate.</DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.29">Distribution support</A></h4><P CLASS=para>For authors of extensions, MakeMaker provides several<I CLASS=emphasis>Makefile</I> targets.  Most of the support comes from theExtUtils::Manifest module, where additional documentation can be found.  Notethat a <I CLASS=emphasis>MANIFEST</I> file is basically just a list of filenamesto be shipped with the kit to build the extension.<P><DL CLASS=variablelist><DT CLASS=varlistentry><I CLASS=emphasis>make distcheck</I><DD><P CLASS=para>Reports which files are below the build directory but not in the<I CLASS=emphasis>MANIFEST</I> file and vice versa.  (See<tt CLASS=literal>ExtUtils::Manifest::fullcheck()</tt> for details.)<p><DT CLASS=varlistentry><I CLASS=emphasis>make skipcheck</I><DD><P CLASS=para>Reports which files are skipped due to the entries in the<I CLASS=emphasis>MANIFEST.SKIP</I> file.  (See <tt CLASS=literal>ExtUtils::Manifest::skipcheck()</tt> fordetails).<p><DT CLASS=varlistentry><I CLASS=emphasis>make distclean</I><DD><P CLASS=para>Does a <I CLASS=emphasis>realclean</I> first and then the <I CLASS=emphasis>distcheck</I>.Note that this is notneeded to build a new distribution as long as you are sure that the<I CLASS=emphasis>MANIFEST</I> file is OK.<p><DT CLASS=varlistentry><I CLASS=emphasis>make manifest</I><DD><P CLASS=para>Rewrites the <I CLASS=emphasis>MANIFEST</I> file, adding all remaining files found.  (See<tt CLASS=literal>ExtUtils::Manifest::mkmanifest()</tt> for details.)<p><DT CLASS=varlistentry><I CLASS=emphasis>make distdir</I><DD><P CLASS=para>Copies all files that are in the <I CLASS=emphasis>MANIFEST</I> file to a newly createddirectory with the name <tt CLASS=literal>$(DISTNAME)-$(VERSION)</tt>.  If that directoryexists, it will be removed first.<p><DT CLASS=varlistentry><I CLASS=emphasis>make disttest</I><DD><P CLASS=para>Makes <I CLASS=emphasis>distdir</I> first, and runs <I CLASS=emphasis>perlMakefile.PL</I>, <I CLASS=emphasis>make</I>, and <I CLASS=emphasis>maketest</I> in that directory.<p><DT CLASS=varlistentry><I CLASS=emphasis>make tardist</I><DD><P CLASS=para>First does a command <tt CLASS=literal>$(PREOP)</tt>, which defaults to a nullcommand.  Does a <I CLASS=emphasis>make distdir</I> next and runs<I CLASS=emphasis>tar</I> (1) on that directory into a tarfile.  Thendeletes the <I CLASS=emphasis>distdir</I>.  Finishes with a command<tt CLASS=literal>$(POSTOP)</tt>, which defaults to a null command.<p><DT CLASS=varlistentry><I CLASS=emphasis>make dist</I><DD><P CLASS=para>Defaults to <tt CLASS=literal>$(DIST_DEFAULT)</tt>, which in turn defaults to<I CLASS=emphasis>tardist</I>.<p><DT CLASS=varlistentry><I CLASS=emphasis>make uutardist</I><DD><P CLASS=para>Runs a <I CLASS=emphasis>tardist</I> first and <I CLASS=emphasis>uuencode</I>&nbsp;s the tarfile.<p><DT CLASS=varlistentry><I CLASS=emphasis>make shdist</I><DD><P CLASS=para>First does a command <tt CLASS=literal>$(PREOP)</tt>, which defaults to a nullcommand.  Does a <I CLASS=emphasis>distdir</I> next and runs<I CLASS=emphasis>shar</I> on that directory into a sharfile.  Then deletes the<I CLASS=emphasis>distdir</I>.  Finishes with a command <tt CLASS=literal>$(POSTOP)</tt>, which defaultsto a null command.  Note:  for <I CLASS=emphasis>shdist</I> to work properly, a<I CLASS=emphasis>shar</I> program that can handle directories is mandatory.<p><DT CLASS=varlistentry><I CLASS=emphasis>make ci</I><DD><P CLASS=para>Does a <tt CLASS=literal>$(CI)</tt> and a <tt CLASS=literal>$(RCS_LABEL)</tt> on all files in the<I CLASS=emphasis>MANIFEST</I> file.</DL><P CLASS=para>Customization of the distribution targets can be done by specifying a hashreference to the <tt CLASS=literal>dist</tt> attribute of the<tt CLASS=literal>WriteMakefile()</tt> call.  The following parameters arerecognized:<DIV CLASS=informaltable><P><A NAME="PERL2-CH-7-TAB-15"></A><TABLE CLASS=INFORMALTABLE><TR CLASS=row><TH ALIGN="left">Parameter</TH><TH ALIGN="left">Default</TH></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>CI</tt></TD><TD ALIGN="left"><tt CLASS=literal>('ci -u')</tt></TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>COMPRESS</tt></TD><TD ALIGN="left"><tt CLASS=literal>('compress')</tt></TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>POSTOP</tt></TD><TD ALIGN="left"><tt CLASS=literal>('@ :')</tt></TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>PREOP</tt></TD><TD ALIGN="left"><tt CLASS=literal>('@ :')</tt></TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>RCS_LABEL</tt></TD><TD ALIGN="left"><tt CLASS=literal>('rcs -q -Nv$(VERSION_SYM):')</tt></TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>SHAR</tt></TD><TD ALIGN="left"><tt CLASS=literal>('shar')</tt></TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>SUFFIX</tt></TD><TD ALIGN="left"><tt CLASS=literal>('Z')</tt></TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>TAR</tt></TD><TD ALIGN="left"><tt CLASS=literal>('tar')</tt></TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>TARFLAGS</tt></TD><TD ALIGN="left"><tt CLASS=literal>('cvf')</tt></TD></TR></TABLE><P></DIV><P CLASS=para>An example:<DIV CLASS=programlisting><P><PRE>WriteMakefile( 'dist' =&gt; { COMPRESS=&gt;"gzip", SUFFIX=&gt;"gz" })</PRE></DIV></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.19">ExtUtils::Manifest--Utilities to Write and Check a MANIFEST File</A></h3><DIV CLASS=programlisting><P><PRE>require ExtUtils::Manifest;ExtUtils::Manifest::mkmanifest();ExtUtils::Manifest::manicheck();ExtUtils::Manifest::filecheck();ExtUtils::Manifest::fullcheck();ExtUtils::Manifest::skipcheck();ExtUtild::Manifest::manifind();ExtUtils::Manifest::maniread($file);ExtUtils::Manifest::manicopy($read, $target, $how);</PRE></DIV><P CLASS=para><A NAME="CH07.MANIF1"></A><A NAME="CH07.MANIF2"></A><A NAME="CH07.MANIF3"></A><A NAME="CH07.MANIF4"></A>These routines automate the maintenance and use of a <I CLASS=emphasis>MANIFEST</I>file.  A <I CLASS=emphasis>MANIFEST</I> file is essentially just a list of filenames,one per line, with an optional comment on each line, separated bywhitespace (usually one or more tabs).  The idea is simply that you canextract the filenames by saying:<DIV CLASS=programlisting><P><PRE>awk '{print $1}' MANIFEST</PRE></DIV><P CLASS=para><tt CLASS=literal>mkmanifest()</tt> writes the names of all files in and below thecurrent directory to a file named in the global variable<tt CLASS=literal>$ExtUtils::Manifest::MANIFEST</tt> (which defaults to <I CLASS=emphasis>MANIFEST</I>)in the current directory.  As the counterpart to the <I CLASS=emphasis>awk</I> commandabove, it works much like:<DIV CLASS=programlisting><P><PRE>find . -type f -print &gt; MANIFEST</PRE></DIV><P CLASS=para>except that it also checks the existing <I CLASS=emphasis>MANIFEST</I> file (if any) andcopies over any comments that are found there.Also, all filenames that match any regular expression in a file<I CLASS=emphasis>MANIFEST.SKIP</I> (if such a file exists) are ignored.<P CLASS=para><tt CLASS=literal>manicheck()</tt> checks whether all files listed in a <I CLASS=emphasis>MANIFEST</I>file in the current directory really do exist.<P CLASS=para><tt CLASS=literal>filecheck()</tt> finds files below the current directory that are notmentioned in the <I CLASS=emphasis>MANIFEST</I> file.  An optional <I CLASS=emphasis>MANIFEST.SKIP</I>file will be consulted, and any filename matching a regular expressionin such a file will not be reported as missing in the <I CLASS=emphasis>MANIFEST</I> file.<P CLASS=para><tt CLASS=literal>fullcheck()</tt> does both a <tt CLASS=literal>manicheck()</tt> and a <tt CLASS=literal>filecheck()</tt>.<P CLASS=para><tt CLASS=literal>skipcheck()</tt> lists all files that are skipped due to your<I CLASS=emphasis>MANIFEST.SKIP</I> file.<P CLASS=para><tt CLASS=literal>manifind()</tt> returns a hash reference.  The keys of the hash are thefiles found below the current directory.  The values are null strings,representing all the <I CLASS=emphasis>MANIFEST</I> comments that aren't there.<P CLASS=para><tt CLASS=literal>maniread($file)</tt> reads a named <I CLASS=emphasis>MANIFEST</I> file (defaults to<I CLASS=emphasis>MANIFEST</I> in the current directory) and returns a hash reference,the keys of which are the filenames, and the values of which are thecomments that <I CLASS=emphasis>are</I> there.  Er, which may be null if thecomments aren't there. . . .<P CLASS=para><tt CLASS=literal>manicopy($read, $target, $how)</tt> copies the files that are thekeys in the hash <tt CLASS=literal>%$read</tt> to the named target directory.  Thehash reference <tt CLASS=literal>$read</tt> is typically returned by the<tt CLASS=literal>maniread()</tt> function.  <tt CLASS=literal>manicopy()</tt> is usefulfor producing a directory tree identical to the intended distribution tree.  Thethird parameter <tt CLASS=literal>$how</tt> can be used to specify a differentmethod of "copying".  Valid values are "<tt CLASS=literal>cp</tt>",which actually copies the files, "<tt CLASS=literal>ln</tt>", whichcreates hard links, and "<tt CLASS=literal>best</tt>", which mostlylinks the files but copies any symbolic link to make a tree without any symboliclink.  "<tt CLASS=literal>best</tt>" is the default, though it may notbe the best default.<DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.30">Ignoring files</A></h4><P CLASS=para>The <I CLASS=emphasis>MANIFEST.SKIP</I> file may contain regular expressions offiles that should be ignored by <tt CLASS=literal>mkmanifest()</tt> and<tt CLASS=literal>filecheck()</tt>.  The regular expressions should appear one oneach line.  A typical example:<DIV CLASS=programlisting><P><PRE>\bRCS\b^MANIFEST\.(?i)^makefile$~$\.html$\.old$^blib/^MakeMaker-\d</PRE></DIV></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.31">Exportability</A></h4><P CLASS=para><tt CLASS=literal>mkmanifest()</tt>, <tt CLASS=literal>manicheck()</tt>, <tt CLASS=literal>filecheck()</tt>, <tt CLASS=literal>fullcheck()</tt>,<tt CLASS=literal>maniread()</tt>, and <tt CLASS=literal>manicopy()</tt> are exportable.</DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.32">Global variables</A></h4><P CLASS=para><tt CLASS=literal>$ExtUtils::Manifest::MANIFEST</tt> defaults to <tt CLASS=literal>MANIFEST</tt>.  Changing itresults in both a different <I CLASS=emphasis>MANIFEST</I> and a different<I CLASS=emphasis>MANIFEST.SKIP</I> file.  This is useful if you want to maintaindifferent distributions for different audiences (say a user versionand a developer version including RCS).<P CLASS=para><tt CLASS=literal>$ExtUtils::Manifest::Quiet</tt> defaults to 0.  You can set it to a truevalue to get all the functions to shutup already.</DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.33">Diagnostics</A></h4><P CLASS=para>All diagnostic output is sent to <tt CLASS=literal>STDERR</tt>.<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>Not in MANIFEST:</tt> <tt CLASS=replaceable><i>file</i></tt><DD><P CLASS=para>A file excluded by a regular expression in <I CLASS=emphasis>MANIFEST.SKIP</I> wasmissing from the <I CLASS=emphasis>MANIFEST</I> file.<p><DT CLASS=varlistentry><tt CLASS=literal>No such file:</tt> <tt CLASS=replaceable><i>file</i></tt><DD><P CLASS=para>A file mentioned in a <I CLASS=emphasis>MANIFEST</I> file does notexist.<p><DT CLASS=varlistentry><tt CLASS=literal>MANIFEST:</tt> <I CLASS=emphasis>$!</I><DD><P CLASS=para>The <I CLASS=emphasis>MANIFEST</I> file could not be opened.<p><DT CLASS=varlistentry><tt CLASS=literal>Added to MANIFEST:</tt> <tt CLASS=replaceable><i>file</i></tt><DD><P CLASS=para>Reported by <tt CLASS=literal>mkmanifest()</tt> if <tt CLASS=literal>$Verbose</tt> is set and a file is addedto <I CLASS=emphasis>MANIFEST</I>. <tt CLASS=literal>$Verbose</tt> is set to 1 by default.</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.34">See also</A></h4><P CLASS=para>The <I CLASS=emphasis>ExtUtils::MakeMaker</I> library module generates a <I CLASS=emphasis>Makefile</I> withhandy targets for most of this functionality.</DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.20">ExtUtils::Miniperl--Write the C Code for perlmain.c</A></h3><DIV CLASS=programlisting><P><PRE>use ExtUtils::Miniperl;writemain(@directories);</PRE></DIV><P CLASS=para><tt CLASS=literal>writemain()</tt> takes an argument list of directories containingarchive libraries that are needed by Perl modules and that should belinked into a new Perl binary.  It correspondingly writes to<tt CLASS=literal>STDOUT</tt> a file intended to be compiled as <I CLASS=emphasis>perlmain.c</I> thatcontains all the bootstrap code to make the modules associated with thelibraries available from within Perl.<P CLASS=para>The typical usage is from within a <I CLASS=emphasis>Makefile</I> generated byExtUtils::MakeMaker.  So under normal circumstances you won't have todeal with this module directly.<DIV CLASS=warning><P CLASS=warning><BLOCKQUOTE><P><B>WARNING:</B><P CLASS=para>This entire module is automatically generated from a script called<I CLASS=emphasis>minimod.PL</I> when Perl itself is built.  So if you want to patch it,please patch <I CLASS=emphasis>minimod.PL</I> in the Perl distribution instead.</blockquote><P></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.21">ExtUtils::Mkbootstrap--Make a Bootstrap File for Use by DynaLoader</A></h3><DIV CLASS=programlisting><P><PRE>use ExtUtils::Mkbootstrap;mkbootstrap();</PRE></DIV><P CLASS=para><tt CLASS=literal>mkbootstrap()</tt> typically gets called from an extension's<I CLASS=emphasis>Makefile</I>.  It writes a <I CLASS=emphasis>*.bs</I> file that is needed by somearchitectures to do dynamic loading.  It is otherwise unremarkable, andMakeMaker usually handles the details.  If you need to know more aboutit, you've probably already read the module.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.22">ExtUtils::Mksymlists--Write Linker Option Files for Dynamic Extension</A></h3><DIV CLASS=programlisting><P><PRE>use ExtUtils::Mksymlists;Mksymlists(  NAME     =&gt; $name,             DL_FUNCS =&gt; { $pkg1 =&gt; [$func1, $func2], $pkg2 =&gt; [$func3] },             DL_VARS  =&gt; [$var1, $var2, $var3]);</PRE></DIV><P CLASS=para><tt CLASS=literal>ExtUtils::Mksymlists()</tt> produces files used by the linkerunder some OSes during the creation of shared libraries for dynamic extensions.It is normally called from a MakeMaker-generated <I CLASS=emphasis>Makefile</I>when the extension is built.  The linker option file is generated by calling thefunction <tt CLASS=literal>Mksymlists()</tt>, which is exported by default fromExtUtils::Mksymlists.  It takes one argument, a list of key/value pairs, inwhich the following keys are recognized:<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>NAME</tt><DD><P CLASS=para>This gives the name of the extension (for example, <tt CLASS=literal>Tk::Canvas</tt>)for whichthe linker option file will be produced.<p><DT CLASS=varlistentry><tt CLASS=literal>DL_FUNCS</tt><DD><P CLASS=para>This is identical to the <tt CLASS=literal>DL_FUNCS</tt> attribute available via MakeMaker,from which it is usually taken.  Its value is a reference to a hash,in which each key is the name of a package, andeach value is a reference to an array of function names, whichshould be exported by the extension. So, one might say:<DIV CLASS=programlisting><P><PRE>DL_FUNCS =&gt; {     Homer::Iliad   =&gt; [ qw(trojans greeks) ],     Homer::Odyssey =&gt; [ qw(travelers family suitors) ],},</PRE></DIV><P CLASS=para>The function names should be identical to those in the<tt CLASS=literal>XSUB</tt> code; <tt CLASS=literal>Mksymlists()</tt> willalter the names written to the linker option file to match the changesmade by <I CLASS=emphasis>xsubpp</I>.  In addition, if none of thefunctions in a list begins with the string "<tt CLASS=literal>boot_</tt>",<tt CLASS=literal>Mksymlists()</tt> will add a bootstrap function for thatpackage, just as <I CLASS=emphasis>xsubpp</I> does.  (If a<tt CLASS=literal>boot_</tt><tt CLASS=replaceable><i>pkg</i></tt> function is presentin the list, it is passed through unchanged.)  If<tt CLASS=literal>DL_FUNCS</tt> is not specified, it defaults to thebootstrap function for the extension specified in<tt CLASS=literal>NAME</tt>.<p><DT CLASS=varlistentry><tt CLASS=literal>DL_VARS</tt><DD><P CLASS=para>This is identical to the <tt CLASS=literal>DL_VARS</tt> attribute available via MakeMaker,and, like <tt CLASS=literal>DL_FUNCS</tt>, it is usually specified via MakeMaker.  Itsvalue is a reference to an array of variable names that shouldbe exported by the extension.<p><DT CLASS=varlistentry><tt CLASS=literal>FILE</tt><DD><P CLASS=para>This key can be used to specify the name of the linker option file(minus the OS-specific extension) if for some reason you do notwant to use the default value, which is the last word of the <tt CLASS=literal>NAME</tt>attribute (for example, for <tt CLASS=literal>Tk::Canvas</tt>,<tt CLASS=literal>FILE</tt> defaults to <tt CLASS=literal>Canvas</tt>).<p><DT CLASS=varlistentry><tt CLASS=literal>FUNCLIST</tt><DD><P CLASS=para>This provides an alternate means to specify function names to beexported from the extension.  Its value is a reference to anarray of function names to be exported.  Thesenames are passed through unaltered to the linker options file.<p><DT CLASS=varlistentry><tt CLASS=literal>DLBASE</tt><DD><P CLASS=para>This item specifies the name by which the linker knows theextension, which may be different from the name of theextension itself (for instance, some linkers add an "_" to thename of the extension).  If it is not specified, it is derivedfrom the <tt CLASS=literal>NAME</tt> attribute.  It is presently used only by OS/2.</DL><P CLASS=para>When calling <tt CLASS=literal>Mksymlists()</tt>, one should always specify the <tt CLASS=literal>NAME</tt>attribute.  In most cases, this is all that's necessary.  Inthe case of unusual extensions, however, the other attributescan be used to provide additional information to the linker.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.23">ExtUtils::MM_OS2--Methods to Override UNIX Behavior in ExtUtils::MakeMaker</A></h3><DIV CLASS=programlisting><P><PRE>use ExtUtils::MM_OS2; # Done internally by ExtUtils::MakeMaker if needed</PRE></DIV><P CLASS=para>See ExtUtils::MM_Unix for documentation of the methods providedthere.  This package overrides the implementation of the methods, notthe interface.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.24">ExtUtils::MM_Unix--Methods Used by ExtUtils::MakeMaker</A></h3><DIV CLASS=programlisting><P><PRE>require ExtUtils::MM_Unix;</PRE></DIV><P CLASS=para><A NAME="CH07.OS1"></A><A NAME="CH07.OS2"></A>The methods provided by this package (and by the other MM_* packages)are designed to be used in conjunction with ExtUtils::MakeMaker.  Youwill never <A HREF="ch03_02.htm#PERL2-CMD-REQUIRE">require</A> this module yourself.  You would only define methodsin this or a similar module if you're working on improving the portingcapabilities of MakeMaker.  Nevertheless, this is a laudable goal, sowe'll talk about it here.<P CLASS=para>When MakeMaker writes a <I CLASS=emphasis>Makefile</I>, it creates one or moreobjects that inherit their methods from package MM. MM itself doesn't provideany methods, but it inherits from the ExtUtils::MM_Unix class. However, forcertain platforms, it also inherits from an OS-specific module such as MM_VMS,and it does this <I CLASS=emphasis>before</I> it inherits from the MM_Unix modulein the <B>@ISA</B> list.  The inheritance tree of MMtherefore lets the OS-specific package override any of the methods listed here.In a sense, the MM_Unix package is slightly misnamed, since it providesfundamental methods on non-UNIX systems too, to the extent that the system islike UNIX.<DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.35">MM methods</A></h4><P CLASS=para>We've avoided listing deprecated methods here, as well as any private methodsyou're unlikely to want to override.<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>catdir</tt> <tt CLASS=replaceable><i>LIST</i></tt><DD><P CLASS=para>Concatenates two or more directory names to form a complete path endingwith a directory.  On UNIX it just glues it together with a <tt CLASS=literal>/</tt>character.<p><DT CLASS=varlistentry><tt CLASS=literal>catfile</tt> <tt CLASS=replaceable><i>LIST</i></tt><DD><P CLASS=para>Concatenates one or more directory names and a filename to form acomplete path ending with a filename.  Also uses <tt CLASS=literal>/</tt> on UNIX.<p><DT CLASS=varlistentry><tt CLASS=literal>dir_target</tt><DD><P CLASS=para>Takes an array of directories that need to exist and returns a<I CLASS=emphasis>Makefile</I> entry for a <I CLASS=emphasis>.exists</I> file in these directories.  Returnsnothing if the entry has already been processed.  We're helpless,though, if the same directory comes as <tt CLASS=literal>$(FOO)</tt> and as <tt CLASS=literal>bar</tt>.Both of them get an entry; that's why we use "<tt CLASS=literal>::</tt>".<p><DT CLASS=varlistentry><tt CLASS=literal>file_name_is_absolute</tt> <tt CLASS=replaceable><i>FILENAME</i></tt><DD><P CLASS=para>Takes as argument a path and returns true if it is an absolute path.<p><DT CLASS=varlistentry><tt CLASS=literal>find_perl</tt> <tt CLASS=replaceable><i>VERSION, NAMES, DIRS, TRACE</i></tt><DD><P CLASS=para>Searches for an executable Perl that is at least the specified<tt CLASS=replaceable><i>VERSION</i></tt>, named by one of the entries in <tt CLASS=replaceable><i>NAMES</i></tt> (an arrayreference), and located in one of the entries of <tt CLASS=replaceable><i>DIRS</i></tt> (also anarray reference). It prints debugging info if <tt CLASS=replaceable><i>TRACE</i></tt> is true.<p><DT CLASS=varlistentry><tt CLASS=literal>guess_name</tt><DD><P CLASS=para>Guesses the name of this package by examining the working directory'sname.  MakeMaker calls this only if the developer has not supplied a<tt CLASS=literal>NAME</tt> attribute.  Shame on you.<p><DT CLASS=varlistentry><tt CLASS=literal>has_link_code</tt><DD><P CLASS=para>Returns true if <tt CLASS=literal>C</tt>, <tt CLASS=literal>XS</tt>, <tt CLASS=literal>MYEXTLIB</tt> or similarobjects exist within this object that need a compiler.  Does not descendinto subdirectories as <tt CLASS=literal>needs_linking()</tt> does.<p><DT CLASS=varlistentry><tt CLASS=literal>libscan</tt> <tt CLASS=replaceable><i>FILENAME</i></tt><DD><P CLASS=para>Takes a path to a file that is found by <tt CLASS=literal>init_dirscan()</tt> and returns falseif we don't want to include this file in the library. It is mainly used toexclude <I CLASS=emphasis>RCS/</I>, <I CLASS=emphasis>CVS/</I>, and <I CLASS=emphasis>SCCS/</I> directories from installation.<p><DT CLASS=varlistentry><tt CLASS=literal>lsdir</tt> <tt CLASS=replaceable><i>DIR</i></tt>, <tt CLASS=replaceable><i>REGEXP</i></tt><DD><P CLASS=para>Takes as arguments a directory name and a regular expression.  Returnsall entries in the directory that match the regular expression.<p><DT CLASS=varlistentry><tt CLASS=literal>maybe_command_in_dirs</tt><DD><P CLASS=para>Method under development.  Not yet used.<p><DT CLASS=varlistentry><tt CLASS=literal>maybe_command</tt> <tt CLASS=replaceable><i>FILENAME</i></tt><DD><P CLASS=para>Returns true if the argument is likely to be a command.<p><DT CLASS=varlistentry><tt CLASS=literal>needs_linking</tt><DD><P CLASS=para>Does this module need linking?  Looks into subdirectory objects, if any.  (Seealso <tt CLASS=literal>has_link_code()</tt>.)<p><DT CLASS=varlistentry><tt CLASS=literal>nicetext</tt> <tt CLASS=replaceable><i>TARGET</i></tt><DD><P CLASS=para>(A misnamed method.)  The MM_Unix version of the method justreturns the argument without further processing.On VMS, this method ensures that colons marking targets are preceded byspace.  Most UNIX <I CLASS=emphasis>makes</I> don't need this, but it's necessary under VMSto distinguish the target delimiter from a colon appearing as part ofa filespec.<p><DT CLASS=varlistentry><tt CLASS=literal>path</tt><DD><P CLASS=para>Takes no argument.  Returns the environment variable <tt CLASS=literal>PATH</tt> as an array.<p><DT CLASS=varlistentry><tt CLASS=literal>perl_script</tt> <tt CLASS=replaceable><i>FILENAME</i></tt><DD><P CLASS=para>Returns true if the argument is likely to be a Perl script.  WithMM_Unix this is true for any ordinary, readable file.<p><DT CLASS=varlistentry><tt CLASS=literal>prefixify</tt> <tt CLASS=replaceable><i>ATTRNAME, OLDPREFIX, NEWPREFIX</i></tt><DD><P CLASS=para>Processes a path attribute in<tt CLASS=literal>$self-&gt;{ </tt><tt CLASS=replaceable><i>ATTRNAME</i></tt><tt CLASS=literal> }</tt>.  Firstit looks it up for you in <tt CLASS=literal>%Config</tt> if it doesn't have a valueyet.  Then it replaces (in-place) the <tt CLASS=replaceable><i>OLDPREFIX</i></tt> with the<tt CLASS=replaceable><i>NEWPREFIX</i></tt> (if it matches).<p><DT CLASS=varlistentry><tt CLASS=literal>replace_manpage_separator</tt> <tt CLASS=replaceable><i>FILENAME</i></tt><DD><P CLASS=para>Takes the filename of a package, which if it's a nested package willhave a name of the form "<tt CLASS=literal>Foo/Bar</tt>" (under UNIX),and replaces thesubdirectory delimiter with "<tt CLASS=literal>::</tt>".  Returns the altered name.</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.36">Methods to produce chunks of text for the Makefile</A></h4><P CLASS=para>When MakeMaker thinks it has all its ducks in a row, it calls a specialsequence of methods to produce the Makefile for a given MakeMakerobject.  The list of methods it calls is specified in the array<tt CLASS=literal>@ExtUtils::MakeMaker::MM_Sections</tt>, one method per section.Since these routines are all called the same way, we won't documenteach of them separately, except to list them.<P CLASS=para>By far the most accurate and up-to-date documentation for what eachmethod does is actually the <I CLASS=emphasis>Makefile</I> that MakeMaker produces.Each section of the file is labeled with the name of the method thatproduces it, so once you see how you want to change the <I CLASS=emphasis>Makefile</I>,it's a trivial matter to work back from the proposed change and find themethod responsible for it.<P CLASS=para>You've plowed through a lot of ugly things to get here, but since you'veread this far, we'll reward you by pointing out something incrediblybeautiful in MakeMaker.  The arguments (if any) that are passed to eachmethod are simply the pseudo-attributes of the same name that youalready saw documented under "Additional Lowercase Attributes" in thesection on ExtUtils::MakeMaker.  You'll recall that thosepseudo-attributes were specified as anonymous hashes, which Just Happento have exactly the same syntax inside as named parameters.  Fancy that.So the arguments just come right into your method as ordinary namedparameters.  Assign the arguments to a hash, and off you go.  And it'scompletely forward and backward compatible.  Even if you override amethod that didn't have arguments before, there's no problem.  Since it'sall driven off the method name, just name your new pseudo-attributeafter your method, and your method will get its arguments.<P CLASS=para>The return values are also easy to understand: each method simplyreturns the string it wants to put into its section of the<I CLASS=emphasis>Makefile</I>.<P CLASS=para>Two special methods are <tt CLASS=literal>post_initialize()</tt> and <tt CLASS=literal>postamble()</tt>,each of which returns an empty string by default.  You can define them in your<I CLASS=emphasis>Makefile.PL</I> to insert customized text near the beginning or end ofthe <I CLASS=emphasis>Makefile</I>.<P CLASS=para>Here are the methods.  They're called in this order (reading down the columns):<DIV CLASS=informaltable><P><TABLE CLASS=INFORMALTABLE><TR CLASS=row><TD ALIGN="LEFT"><tt CLASS=literal>post_initialize()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>top_targets()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>realclean()</tt></TD></TR><TR CLASS=row><TD ALIGN="LEFT"><tt CLASS=literal>const_config()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>linkext()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>dist_basics()</tt></TD></TR><TR CLASS=row><TD ALIGN="LEFT"><tt CLASS=literal>constants()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>dlsyms()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>dist_core()</tt></TD></TR><TR CLASS=row><TD ALIGN="LEFT"><tt CLASS=literal>const_loadlibs()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>dynamic()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>dist_dir()</tt></TD></TR><TR CLASS=row><TD ALIGN="LEFT"><tt CLASS=literal>const_cccmd()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>dynamic_bs()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>dist_test()</tt></TD></TR><TR CLASS=row><TD ALIGN="LEFT"><tt CLASS=literal>tool_autosplit()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>dynamic_lib()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>dist_ci()</tt></TD></TR><TR CLASS=row><TD ALIGN="LEFT"><tt CLASS=literal>tool_xsubpp()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>static()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>install()</tt></TD></TR><TR CLASS=row><TD ALIGN="LEFT"><tt CLASS=literal>tools_other()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>static_lib()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>force()</tt></TD></TR><TR CLASS=row><TD ALIGN="LEFT"><tt CLASS=literal>dist()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>installpm()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>perldepend()</tt></TD></TR><TR CLASS=row><TD ALIGN="LEFT"><tt CLASS=literal>macro()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>installpm_x()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>makefile()</tt></TD></TR><TR CLASS=row><TD ALIGN="LEFT"><tt CLASS=literal>depend()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>manifypods()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>staticmake()</tt></TD></TR><TR CLASS=row><TD ALIGN="LEFT"><tt CLASS=literal>post_constants()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>processPL()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>test()</tt></TD></TR><TR CLASS=row><TD ALIGN="LEFT"><tt CLASS=literal>pasthru()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>installbin()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>test_via_harness()</tt></TD></TR><TR CLASS=row><TD ALIGN="LEFT"><tt CLASS=literal>c_o()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>subdirs()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>test_via_script()</tt></TD></TR><TR CLASS=row><TD ALIGN="LEFT"><tt CLASS=literal>xs_c()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>subdir_x()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>postamble()</tt></TD></TR><TR CLASS=row><TD ALIGN="LEFT"><tt CLASS=literal>xs_o()</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>clean()</tt></TD><TD ALIGN="LEFT">&nbsp;</TD></TR></TABLE><P></DIV></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.37">See also</A></h4><P CLASS=para>ExtUtils::MakeMaker library module.</DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.25">ExtUtils::MM_VMS--Methods to Override UNIX Behavior in ExtUtils::MakeMaker</A></h3><DIV CLASS=programlisting><P><PRE>use ExtUtils::MM_VMS; # Done internally by ExtUtils::MakeMaker if needed</PRE></DIV><P CLASS=para>See ExtUtils::MM_Unix for documentation of the methods providedthere.  This package overrides the implementation of the methods, notthe interface.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.26">Fcntl--Load the C fcntl.h Defines</A></h3><DIV CLASS=programlisting><P><PRE>use Fcntl;$nonblock_flag = O_NDELAY();$create_flag = O_CREAT();$read_write_flag = O_RDWR();</PRE></DIV><P CLASS=para>This module is just a translation of the C <I CLASS=emphasis>fcntl.h</I> file.Unlike the old mechanism which required a translated <I CLASS=emphasis>fcntl.ph</I>file, <I CLASS=emphasis>fcntl</I> uses the <I CLASS=emphasis>h2xs</I> program (see the Perl source distribution)and your native C compiler.  This means that it has amuch better chance of getting the numbers right.<P CLASS=para>Note that only <tt CLASS=literal>#define</tt> symbols get translated; you must still correctlypack up your own arguments to pass as arguments for locking functions andso on.<P CLASS=para>The following routines are exported by default, and each routine returns the valueof the <tt CLASS=literal>#define</tt> that is the same as the routine name:<DIV CLASS=informaltable><P><TABLE CLASS=INFORMALTABLE><TR CLASS=row><TD ALIGN="LEFT"><tt CLASS=literal>FD_CLOEXEC</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>F_DUPFD</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>F_GETFD</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>F_GETFL</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>F_GETLK</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>F_RDLCK</tt></TD></TR><TR CLASS=row><TD ALIGN="LEFT"><tt CLASS=literal>F_SETFD</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>F_SETFL</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>F_SETLK</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>F_SETLKW</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>F_UNLCK</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>F_WRLCK</tt></TD></TR><TR CLASS=row><TD ALIGN="LEFT"><tt CLASS=literal>O_APPEND</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>O_CREAT</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>O_EXCL</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>O_NDELAY</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>O_NOCTTY</tt></TD><TD ALIGN="LEFT">&nbsp;</TD></TR><TR CLASS=row><TD ALIGN="LEFT"><tt CLASS=literal>O_NONBLOCK</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>O_RDONLY</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>O_RDWR</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>O_TRUNC</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>O_WRONLY</tt></TD><TD ALIGN="LEFT">&nbsp;</TD></TR></TABLE><P></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.27">File::Basename--Parse File Specifications</A></h3><DIV CLASS=programlisting><P><PRE>use File::Basename;($name, $path, $suffix) = fileparse($fullname, @suffixlist)fileparse_set_fstype($os_string);  # $os_string specifies OS type$basename = basename($fullname, @suffixlist);$dirname = dirname($fullname);($name, $path, $suffix) = fileparse("lib/File/Basename.pm", '\.pm');fileparse_set_fstype("VMS");$basename = basename("lib/File/Basename.pm", ".pm");$dirname = dirname("lib/File/Basename.pm");</PRE></DIV><P CLASS=para><A NAME="CH07.BASE1"></A><A NAME="CH07.BASE2"></A><A NAME="CH07.BASE3"></A>These routines allow you to parse file specifications into usefulpieces using the syntax of different operating systems.<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>fileparse_set_fstype</tt><DD><P CLASS=para>You select the syntax via the routine<tt CLASS=literal>fileparse_set_fstype()</tt>. If the argument passed to it containsone of the substrings "<tt CLASS=literal>VMS</tt>","<tt CLASS=literal>MSDOS</tt>", or"<tt CLASS=literal>MacOS</tt>", the file specification syntax of thatoperating system is used in future calls to <tt CLASS=literal>fileparse()</tt>,<tt CLASS=literal>basename()</tt>, and <tt CLASS=literal>dirname()</tt>.  If it containsnone of these substrings, UNIX syntax is used.  This pattern matching iscase-insensitive.  If you've selected VMS syntax and the file specification youpass to one of these routines contains a <tt CLASS=literal>/</tt>, it assumes youare using UNIX emulation and applies the UNIX syntax rules instead for thatfunction call only. If you haven't called<tt CLASS=literal>fileparse_set_fstype()</tt>, the syntax is chosen byexamining the <tt CLASS=literal>osname</tt> entry from the Config packageaccording to these rules.<p><DT CLASS=varlistentry><tt CLASS=literal>fileparse</tt><DD><P CLASS=para>The <tt CLASS=literal>fileparse()</tt> routine divides a file specification intothree parts: a leading <tt CLASS=replaceable><i>path</i></tt>, a file<tt CLASS=replaceable><i>name</i></tt>, and a <tt CLASS=replaceable><i>suffix</i></tt>.  The<tt CLASS=replaceable><i>path</i></tt> contains everything up to and including the lastdirectory separator in the input file specification.  The remainder of the inputfile specification is then divided into <tt CLASS=replaceable><i>name</i></tt> and<tt CLASS=replaceable><i>suffix</i></tt> based on the optional patterns you specify in<tt CLASS=literal>@suffixlist</tt>.  Each element of this list is interpreted as aregular expression, and is matched against the end of<tt CLASS=replaceable><i>name</i></tt>.  If this succeeds, the matching portion of<tt CLASS=replaceable><i>name</i></tt> is removed and prepended to<tt CLASS=replaceable><i>suffix</i></tt>.  By proper use of<tt CLASS=literal>@suffixlist</tt>, you can remove file types or versions forexamination.  You are guaranteed that if you concatenate<tt CLASS=replaceable><i>path</i></tt>, <tt CLASS=replaceable><i>name</i></tt>, and<tt CLASS=replaceable><i>suffix</i></tt> together in that order, the result will beidentical to the input file specification.  Using UNIX file syntax:<DIV CLASS=programlisting><P><PRE>($name, $path, $suffix) = fileparse('/virgil/aeneid/draft.book7',                                                  '\.book\d+');</PRE></DIV><P CLASS=para>would yield:<DIV CLASS=programlisting><P><PRE>$name   eq 'draft'$path   eq '/virgil/aeneid',$suffix eq '.book7'</PRE></DIV><P CLASS=para>(Note that the suffix pattern is in single quotes.  You'd have to double thebackslashes if you used double quotes, since double quotes do backslashinterpretation.)Similarly, using VMS syntax:<DIV CLASS=programlisting><P><PRE>($name, $path, $suffix) = fileparse('Doc_Root:[Help]Rhetoric.Rnh', '\..*');</PRE></DIV><P CLASS=para>would yield:<DIV CLASS=programlisting><P><PRE>$name   eq 'Rhetoric'$path   eq 'Doc_Root:[Help]'$suffix eq '.Rnh'</PRE></DIV><p><DT CLASS=varlistentry><tt CLASS=literal>basename</tt><DD><P CLASS=para>The <tt CLASS=literal>basename()</tt> routine returns the first element of the list producedby calling <tt CLASS=literal>fileparse()</tt> with the same arguments.  It is provided forcompatibility with the UNIX shell command <I CLASS=emphasis>basename</I> (1).<p><DT CLASS=varlistentry><tt CLASS=literal>dirname</tt><DD><P CLASS=para>The <tt CLASS=literal>dirname()</tt> routine returns the directory portion of the input filespecification.  When using VMS or MacOS syntax, this is identical to thesecond element of the list produced by calling <tt CLASS=literal>fileparse()</tt> with the sameinput file specification.  When using UNIX or MS-DOS syntax, the returnvalue conforms to the behavior of the UNIX shell command <I CLASS=emphasis>dirname</I> (1).  Thisis usually the same as the behavior of <tt CLASS=literal>fileparse()</tt>, but differs in somecases.  For example, for the input file specification <tt CLASS=literal>lib/</tt>,<tt CLASS=literal>fileparse()</tt>considers the directory name to be <I CLASS=emphasis>lib/</I>, while <tt CLASS=literal>dirname()</tt> considersthe directory name to be <B>.</B> (dot).</DL></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.28">File::CheckTree--Run Many Tests on a Collection of Files</A></h3><DIV CLASS=programlisting><P><PRE>use File::CheckTree;$warnings += validate( q{    /vmunix                 -e || die    /boot                   -e || die    /bin                    cd        csh                 -ex        csh                 !-ug        sh                  -ex        sh                  !-ug    /usr                    -d || warn "What happened to $file?\n"});</PRE></DIV><P CLASS=para>The <tt CLASS=literal>validate()</tt> routine takes a single multi-line string, eachline of which contains a filename plus a file test to try on it.  (The file testmay be given as "<tt CLASS=literal>cd</tt>", causing subsequent relativefilenames to be interpreted relative to that directory.)  After the file testyou may put "<tt CLASS=literal>|| die</tt>" to make it a fatal error ifthe file test fails.  The default is:<DIV CLASS=programlisting><P><PRE>|| warn</PRE></DIV><P CLASS=para>You can reverse the sense of the test by prepending "!".  If you specify"<tt CLASS=literal>cd</tt>" and then list some relative filenames, youmay want to indent them slightly for readability.  If you supply your own <A HREF="ch03_02.htm#PERL2-CMD-DIE">die</A> or <A HREF="ch03_02.htm#PERL2-CMD-WARN">warn</A>message, you can use <tt CLASS=literal>$file</tt> to interpolate the filename.<P CLASS=para>File tests may be grouped:  <tt CLASS=literal>-rwx</tt> tests for all of <tt CLASS=literal>-r</tt>,<tt CLASS=literal>-w</tt>, and <tt CLASS=literal>-x</tt>.Only the first failed test of the group will produce a warning.<P CLASS=para><tt CLASS=literal>validate()</tt> returns the number of warnings issued, presuming itdidn't <A HREF="ch03_02.htm#PERL2-CMD-DIE">die</A>.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.29">File::Copy--Copy Files or Filehandles</A></h3><DIV CLASS=programlisting><P><PRE>use File::Copy;copy("<tt CLASS=replaceable><i>src-file</i></tt>", "<tt CLASS=replaceable><i>dst-file</i></tt>");copy("Copy.pm", \*STDOUT);use POSIX;use File::Copy 'cp';$fh = FileHandle-&gt;new("/dev/null", "r");cp($fh, "<tt CLASS=replaceable><i>dst-file</i></tt>");'</PRE></DIV><P CLASS=para>The Copy module provides one function, <tt CLASS=literal>copy()</tt>, that takes twoparameters: a file to copy from and a file to copy to.  Eitherargument may be a string, a FileHandle reference, or a FileHandleglob.  If the first argument is a filehandle of somesort, it will be read from; if it is a filename, it willbe opened for reading.  Likewise, the second argument will bewritten to (and created if need be).<P CLASS=para>An optional third parameter is a hint that requests the buffer size tobe used for copying.  This is the number of bytes from the first filethat will be held in memory at any given time, before being written tothe second file.  The default buffer size depends upon the file and theoperating system, but will generally be the whole file (up to 2Mb), or1kb for filehandles that do not reference files (for example, sockets).<P CLASS=para>When running under VMS, this routine performs an RMS copy ofthe file, in order to preserve file attributes, indexed filestructure, and so on.  The buffer size parameter is ignored.<P CLASS=para>You may use the syntax:<DIV CLASS=programlisting><P><PRE>use File::Copy "cp"</PRE></DIV><P CLASS=para>to get at the <tt CLASS=literal>cp()</tt> alias for the <tt CLASS=literal>copy()</tt> function.The syntax is exactlythe same.<P CLASS=para><tt CLASS=literal>copy()</tt> returns <tt CLASS=literal>1</tt> on success, <tt CLASS=literal>0</tt> on failure;<B>$!</B> will be set if an error was encountered.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.30">File::Find--Traverse a File Tree</A></h3><DIV CLASS=programlisting><P><PRE>use File::Find;find(\&amp;wanted, '<tt CLASS=replaceable><i>dir1</i></tt>', '<tt CLASS=replaceable><i>dir2</i></tt>'...);sub wanted { ... }use File::Find;finddepth(\&amp;wanted, '<tt CLASS=replaceable><i>dir1</i></tt>', '<tt CLASS=replaceable><i>dir2</i></tt>'...);  # traverse depth-firstsub wanted { ... }</PRE></DIV><P CLASS=para><tt CLASS=literal>find()</tt> is similar to the UNIX<I CLASS=emphasis>find</I> (1) command in that it traverses the specifieddirectories, performing whatever tests or other actions you request.  However,these actions are given in the subroutine, <tt CLASS=literal>wanted()</tt>, whichyou must define (but see <I CLASS=emphasis>find2perl</I> below).  For example, toprint out the names of all executable files, you could define<tt CLASS=literal>wanted()</tt> this way:<DIV CLASS=programlisting><P><PRE>sub wanted {    print "$File::Find::name\n" if -x;}</PRE></DIV><P CLASS=para><tt CLASS=literal>$File::Find::dir</tt> contains the current directory name, and<B>$_</B> the current filename within that directory.<tt CLASS=literal>$File::Find::name</tt> contains<tt CLASS=literal>"$File::Find::dir/$_"</tt>.  You are <A HREF="ch03_02.htm#PERL2-CMD-CHDIR">chdir</A>ed to <tt CLASS=literal>$File::Find::dir</tt> when<tt CLASS=literal>find()</tt> is called.  You can set<tt CLASS=literal>$File::Find::prune</tt> to true in <tt CLASS=literal>wanted()</tt> inorder to prune the tree; that is, <tt CLASS=literal>find()</tt> will not descendinto any directory when <tt CLASS=literal>$File::Find::prune</tt> is set.<P CLASS=para>This library is primarily for use with the <I CLASS=emphasis>find2perl</I> (1) command,which is supplied with the standard Perl distribution and converts a<I CLASS=emphasis>find</I> (1) invocation to an appropriate <tt CLASS=literal>wanted()</tt> subroutine.The command:<DIV CLASS=programlisting><P><PRE>find2perl / -name .nfs\* -mtime +7 \             -exec rm -f {} \; -o -fstype nfs -prune</PRE></DIV><P CLASS=para>produces something like:<DIV CLASS=programlisting><P><PRE>sub wanted {    /^\.nfs.*$/ &amp;&amp;    (($dev, $ino, $mode, $nlink, $uid, $gid) = lstat($_)) &amp;&amp;    int(-M _) &gt; 7 &amp;&amp;    unlink($_)    ||    ($nlink || (($dev, $ino, $mode, $nlink, $uid, $gid) = lstat($_))) &amp;&amp;    $dev &lt; 0 &amp;&amp;    ($File::Find::prune = 1);}</PRE></DIV><P CLASS=para>Set the variable <tt CLASS=literal>$File::Find::dont_use_nlink</tt> ifyou're using the AFS.<P CLASS=para><tt CLASS=literal>finddepth()</tt> is just like <tt CLASS=literal>find()</tt>, except that it does adepth-first search.<P CLASS=para>Here's another interesting <tt CLASS=literal>wanted()</tt> function.  It will find allsymbolic links that don't resolve:<DIV CLASS=programlisting><P><PRE>sub wanted {    -l and not -e and print "bogus link: $File::Find::name\n";}</PRE></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.31">File::Path--Create or Remove a Series of Directories</A></h3><DIV CLASS=programlisting><P><PRE>use File::Pathmkpath(['/foo/bar/baz', 'blurfl/quux'], 1, 0711);rmtree(['/foo/bar/baz', 'blurfl/quux'], 1, 1);</PRE></DIV><P CLASS=para>The <tt CLASS=literal>mkpath()</tt> function provides a convenient way to create directories,even ifyour <I CLASS=emphasis>mkdir</I> (2) won't create more than one level of directory at atime.  <tt CLASS=literal>mkpath()</tt> takes three arguments:<P><UL CLASS=itemizedlist><li CLASS=listitem>The name of the path to create, or a referenceto a list of paths to create<P><li CLASS=listitem>A Boolean value, which if true will cause <tt CLASS=literal>mkpath()</tt>to print the name of each directory as it is created(defaults to false)<P><li CLASS=listitem>The numeric mode to use when creating the directories(defaults to <tt CLASS=literal>0777</tt>)<P></UL><P CLASS=para>It returns a list of all directories created, including intermediatedirectories, which are assumed to be delimited bythe UNIX path separator, <tt CLASS=literal>/</tt>.<P CLASS=para>Similarly, the <tt CLASS=literal>rmtree()</tt> function provides a convenient way to delete asubtree from the directory structure, much like the UNIX <I CLASS=emphasis>rm -r</I>command.  <tt CLASS=literal>rmtree()</tt> takes three arguments:<P><UL CLASS=itemizedlist><li CLASS=listitem>The root of the subtree to delete, or a reference toa list of roots.  All of the files and directoriesbelow each root, as well as the roots themselves,will be deleted.<P><li CLASS=listitem>A Boolean value, which if true will cause <tt CLASS=literal>rmtree()</tt> toprint a message each time it examines a file, giving thename of the file and indicating whether it's using <I CLASS=emphasis>rmdir</I> (2)or <I CLASS=emphasis>unlink</I> (2) to remove it, or whether it's skipping it.(This argument defaults to false.)<P><li CLASS=listitem>A Boolean value, which if true will cause <tt CLASS=literal>rmtree()</tt> toskip any files to which you do not have delete access(if running under VMS) or write access (if runningunder another operating system).  This will change in the future whena criterion for "delete permission" under operating systems otherthan VMS is settled. (This argument defaults to false.)<P></UL><P CLASS=para><tt CLASS=literal>rmtree()</tt> returns the number of files successfully deleted.Symbolic links are treated as ordinary files.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.32">FileCache--Keep More Files Open Than the System Permits</A></h3><DIV CLASS=programlisting><P><PRE>use FileCache;cacheout $path;         # open the file whose path name is $pathprint $path "stuff\n";  # print stuff to file given by $path</PRE></DIV><P CLASS=para>The <tt CLASS=literal>cacheout()</tt> subroutine makes sure that the file whose name is<tt CLASS=literal>$path</tt> is created and accessible through the filehandle also named<tt CLASS=literal>$path</tt>.  It permits you to write to more files than your system allowsto be open at once, performing the necessary opens and closes in thebackground.  By preceding each file access with:<DIV CLASS=programlisting><P><PRE>cacheout $path;</PRE></DIV><P CLASS=para>you can be sure that the named file will be open and ready to do business.However, you do not need to invoke <tt CLASS=literal>cacheout()</tt> between successiveaccesses to the same file.<P CLASS=para><tt CLASS=literal>cacheout()</tt> does not create directories for you.  If you use it toopen an existing file that FileCache is seeing for the first time, thefile will be truncated to zero length with no questions asked.  (However,in its opening and closing of files in the background, <tt CLASS=literal>cacheout()</tt>keeps track of which files it has opened before and does not overwritethem, but appends to them instead.)<P CLASS=para><tt CLASS=literal>cacheout()</tt> checks the value of <tt CLASS=literal>NOFILE</tt> in <I CLASS=emphasis>sys/param.h</I>to determine the number of open files allowed.  This value is incorrect onsome systems, in which case you should set <tt CLASS=literal>$FileCache::maxopen</tt> tobe four less than the correct value for <tt CLASS=literal>NOFILE</tt>.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.33">FileHandle--Supply Object Methods for Filehandles</A></h3><A NAME="CH07.FILEH1"></A><A NAME="CH07.FILEH2"></A><A NAME="CH07.FILEH3"></A><DIV CLASS=programlisting><P><PRE>use FileHandle;$fh = new FileHandle;if ($fh-&gt;open "&lt; <tt CLASS=replaceable><i>file</i></tt>") {    print &lt;$fh&gt;;    $fh-&gt;close;}$fh = new FileHandle "&gt; <tt CLASS=replaceable><i>file</i></tt>";if (defined $fh) {    print $fh "bar\n";    $fh-&gt;close;}$fh = new FileHandle "<tt CLASS=replaceable><i>file</i></tt>", "r";if (defined $fh) {    print &lt;$fh&gt;;    undef $fh;       # automatically closes the file}$fh = new FileHandle "<tt CLASS=replaceable><i>file</i></tt>", O_WRONLY|O_APPEND;if (defined $fh) {    print $fh "stuff\n";    undef $fh;       # automatically closes the file}$pos = $fh-&gt;getpos;$fh-&gt;setpos $pos;$fh-&gt;setvbuf($buffer_var, _IOLBF, 1024);($readfh, $writefh) = FileHandle::pipe;autoflush STDOUT 1;</PRE></DIV><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>new</tt><DD><P CLASS=para>Creates a FileHandle, which is a reference to anewly created symbol (see the Symbol library module).  If it receives anyparameters, they are passed to <tt CLASS=literal>open()</tt>.  If the open fails,the FileHandle object is destroyed.  Otherwise, it is returned tothe caller.<p><DT CLASS=varlistentry><tt CLASS=literal>new_from_fd</tt><DD><P CLASS=para>Creates a FileHandle like <tt CLASS=literal>new()</tt> does.It requires two parameters, which are passed to <tt CLASS=literal>fdopen()</tt>;if the <tt CLASS=literal>fdopen()</tt> fails, the FileHandle object is destroyed.Otherwise, it is returned to the caller.<p><DT CLASS=varlistentry><tt CLASS=literal>open</tt><DD><P CLASS=para>Accepts one parameter or two.  With one parameter, it is just a front end forthe built-in <A HREF="ch03_02.htm#PERL2-CMD-OPEN">open</A> function.  With twoparameters, the first parameter is a filename that may include whitespace orother special characters, and the second parameter is the open mode in eitherPerl form (<tt CLASS=literal>"&gt;"</tt>, <tt CLASS=literal>"+&lt;"</tt>, and so on) orPOSIX form (<tt CLASS=literal>"w"</tt>, <tt CLASS=literal>"r+"</tt>, and so on).<p><DT CLASS=varlistentry><tt CLASS=literal>fdopen</tt><DD><P CLASS=para>Like <tt CLASS=literal>open()</tt> except that its first parameter is not a filenamebut rather a filehandle name, a FileHandle object, or a file descriptor number.<p><DT CLASS=varlistentry><tt CLASS=literal>getpos</tt><DD><P CLASS=para>If the C functions <I CLASS=emphasis>fgetpos</I> (3) and<I CLASS=emphasis>fsetpos</I> (3) are available, then<tt CLASS=literal>getpos()</tt> returns an opaque value that represents the currentposition of the FileHandle, and <tt CLASS=literal>setpos()</tt> uses that value toreturn to a previously visited position.<p><DT CLASS=varlistentry><tt CLASS=literal>setvbuf</tt><DD><P CLASS=para>If the C function <I CLASS=emphasis>setvbuf</I> (3) is available, then<tt CLASS=literal>setvbuf()</tt> sets the buffering policy for the FileHandle.  Thecalling sequence for the Perl function is the same as its C counterpart,including the macros <tt CLASS=literal>_IOFBF</tt>, <tt CLASS=literal>_IOLBF</tt>, and<tt CLASS=literal>_IONBF</tt>, except that the buffer parameter specifies a scalarvariable to use as a buffer.<DIV CLASS=warning><P CLASS=warning><BLOCKQUOTE><P><B>WARNING:</B><P CLASS=para>A variable used as a buffer by <tt CLASS=literal>setvbuf()</tt> must not bemodified in any way until the FileHandle is closed or until<tt CLASS=literal>setvbuf()</tt> is called again, or memory corruption mayresult!</blockquote><P></DIV></DL><P CLASS=para>The following supported FileHandle methods are just front ends for thecorresponding built-in Perl functions:<DIV CLASS=informaltable><P><TABLE CLASS=INFORMALTABLE><TR CLASS=row><TD ALIGN="LEFT"><tt CLASS=literal>clearerr</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>getc</tt></TD></TR><TR CLASS=row><TD ALIGN="LEFT"><tt CLASS=literal>close</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>gets</tt></TD></TR><TR CLASS=row><TD ALIGN="LEFT"><tt CLASS=literal>eof</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>seek</tt></TD></TR><TR CLASS=row><TD ALIGN="LEFT"><tt CLASS=literal>fileno</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>tell</tt></TD></TR></TABLE><P></DIV><P CLASS=para>The following supported FileHandle methods correspond to Perl specialvariables:<DIV CLASS=informaltable><P><TABLE CLASS=INFORMALTABLE><TR CLASS=row><TD ALIGN="LEFT"><tt CLASS=literal>autoflush</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>format_page_number</tt></TD></TR><TR CLASS=row><TD ALIGN="LEFT"><tt CLASS=literal>format_formfeed</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>format_top_name</tt></TD></TR><TR CLASS=row><TD ALIGN="LEFT"><tt CLASS=literal>format_line_break_characters</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>input_line_number</tt></TD></TR><TR CLASS=row><TD ALIGN="LEFT"><tt CLASS=literal>format_lines_left</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>input_record_separator</tt></TD></TR><TR CLASS=row><TD ALIGN="LEFT"><tt CLASS=literal>format_lines_per_page</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>output_field_separator</tt></TD></TR><TR CLASS=row><TD ALIGN="LEFT"><tt CLASS=literal>format_name</tt></TD><TD ALIGN="LEFT"><tt CLASS=literal>output_record_separator</tt></TD></TR></TABLE><P></DIV><P CLASS=para>Furthermore, for doing normal I/O you might need these methods:<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>$fh-&gt;print</tt><DD><P CLASS=para>See Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-PRINT">print</A> function.<p><DT CLASS=varlistentry><tt CLASS=literal>$fh-&gt;printf</tt><DD><P CLASS=para>See Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-PRINTF">printf</A> function.<p><DT CLASS=varlistentry><tt CLASS=literal>$fh-&gt;getline</tt><DD><P CLASS=para>This method works like Perl's <tt CLASS=literal>&lt;FILEHANDLE&gt;</tt> construct,except that it can be safely called in anarray context, where it still returns just one line.<p><DT CLASS=varlistentry><tt CLASS=literal>$fh-&gt;getlines</tt><DD><P CLASS=para>This method works like Perl's <tt CLASS=literal>&lt;FILEHANDLE&gt;</tt> construct when called in anarray context to read all remaining lines in a file.It will also <tt CLASS=literal>croak()</tt> if accidentally called in a scalar context.</DL><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.38">Bugs</A></h4><P CLASS=para>Due to backward compatibility, all filehandles resemble objectsof class FileHandle, or actually classes derived from that class.But they aren't.  Which means you can't derive your ownclass from FileHandle and inherit those methods.<P CLASS=para>While it may look as though the filehandle methods correspondingto the built-in variables are unique to a particularfilehandle, currently some of them are not, including the following:<tt CLASS=literal>input_line_number()</tt>, <tt CLASS=literal>input_record_separator()</tt>, and <tt CLASS=literal>output_record_separator()</tt></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.34">GDBM_File--Tied Access to GDBM Library</A></h3><DIV CLASS=programlisting><P><PRE>use GDBM_File;tie %hash, "GDBM_File", $filename, &amp;GDBM_WRCREAT, 0644);# read/writes of %hash are now read/writes of $filenameuntie %hash;</PRE></DIV><P CLASS=para>GDBM_File is a module that allows Perl programs to make use of thefacilities provided by the GNU <I CLASS=emphasis>gdbm</I> library.  If you intend to use thismodule, you should have a copy of the <I CLASS=emphasis>gdbm</I> (3) manpage at hand.<P CLASS=para>Most of the <I CLASS=emphasis>libgdbm.a</I> functions are available as methods of the<tt CLASS=literal>GDBM_File</tt> interface.<DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.39">Availability</A></h4><P CLASS=para><I CLASS=emphasis>gdbm</I> is available from any GNU archive.  The master site isprep.ai.mit.edu, but you are strongly urged to use one of the manymirrors.   You can obtain a list of mirror sites by issuing thecommand, <I CLASS=emphasis>finger fsf@prep.ai.mit.edu</I>.  A copy is also storedon CPAN:<DIV CLASS=programlisting><P><PRE>http://www.perl.com/CPAN/src/misc/gdbm-1.7.3.tar.gz</PRE></DIV></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.40">See also</A></h4><P CLASS=para>DB_File library module.</DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.35">Getopt::Long--Extended Processing of Command-Line Options</A></h3><DIV CLASS=programlisting><P><PRE>use Getopt::Long;$result = GetOptions(<tt CLASS=replaceable><i>option-descriptions</i></tt>);</PRE></DIV><P CLASS=para><A NAME="CH07.LONG1"></A><A NAME="CH07.LONG2"></A><A NAME="CH07.LONG3"></A><A NAME="CH07.LONG4"></A>The Getopt::Long module implements an extended function called<tt CLASS=literal>GetOptions()</tt>.  This function retrieves and processes thecommand-line options with which your Perl program was invoked, based on thedescription of valid options that you provide.<P CLASS=para><tt CLASS=literal>GetOptions()</tt> adheres to the POSIX syntax for command-lineoptions, with GNU extensions.  In general, this means that options have longnames instead of single letters, and are introduced with a double hyphen<tt CLASS=literal>- -</tt>.  (A single hyphen can also be used,but implies restrictions on functionality.  See later in the chapter.)  There isno bundling of command-line options, as was the case with the more traditionalsingle-letter approach.  For example, the UNIX<I CLASS=emphasis>ps</I> (1) command can be given the command-lineargument:<DIV CLASS=programlisting><P><PRE>-vax</PRE></DIV><P CLASS=para>which means the combination of <tt CLASS=literal>-v</tt>, <tt CLASS=literal>-a</tt> and <tt CLASS=literal>-x</tt>.With the Getopt::Long syntax, <tt CLASS=literal>-vax</tt> would be a single option.<P CLASS=para>Command-line options can be used to set values.  These values can bespecified in one of two ways:<DIV CLASS=programlisting><P><PRE>- -size 24- -size=24</PRE></DIV><P CLASS=para><tt CLASS=literal>GetOptions()</tt> is called with a list of option descriptions, each of whichconsists of two elements:  the option specifier and the option linkage.The option specifier defines the name of the option and, optionally,the value it can take.  The option linkage is usually a reference to avariable that will be set when the option is used.  For example, thefollowing call to <tt CLASS=literal>GetOptions()</tt>:<DIV CLASS=programlisting><P><PRE>&amp;GetOptions("size=i" =&gt; \$offset);</PRE></DIV><P CLASS=para>will accept a command-line option "<tt CLASS=literal>size</tt>" that must have aninteger value.  With a command line of <tt CLASS=literal>- -size24</tt> this will cause the variable <tt CLASS=literal>$offset</tt> to beassigned the value 24.<P CLASS=para>Alternatively, the first argument to GetOptions may be a reference toa hash describing the linkage for the options.  The following call isequivalent to the example above:<DIV CLASS=programlisting><P><PRE>%optctl = (size =&gt; \$offset);&amp;GetOptions(\%optctl, "size=i");</PRE></DIV><P CLASS=para>Linkage may be specified using either of the above methods, or both.The linkage specified in the argument list takes precedence over thelinkage specified in the hash.<P CLASS=para>The command-line options are implicitly taken from array <tt CLASS=literal>@ARGV</tt>.  Upon completionof <tt CLASS=literal>GetOptions()</tt>, <tt CLASS=literal>@ARGV</tt> will contain only the command-linearguments that were not options.  (But see below for a way to processnon-option arguments.)  Each option specifier handed to<tt CLASS=literal>GetOptions()</tt> designates the name of an option, possiblyfollowed by an argument specifier.  Values for argument specifiers are:<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>&lt;none&gt;</tt><DD><P CLASS=para>Option does not take an argument.  If the user invokes the option,the option variable will be set to 1.<p><DT CLASS=varlistentry><tt CLASS=literal>!      </tt><DD><P CLASS=para>Option does not take an argument and may be negated, that is, prefixed by"<tt CLASS=literal>no</tt>".  For example, <tt CLASS=literal>foo!</tt> will allow <tt CLASS=literal>- -foo</tt> (with value 1being assigned to the option variable) and<tt CLASS=literal>-nofoo</tt>(with value 0).<p><DT CLASS=varlistentry><tt CLASS=literal>=s      </tt><DD><P CLASS=para>Option takes a mandatory string argument.This string will be assigned to the option variable.Even if the string argument starts with <tt CLASS=literal>-</tt> or <tt CLASS=literal>- -</tt>, itwill be assigned to the option variable rather than taken as a separateoption.<p><DT CLASS=varlistentry><tt CLASS=literal>:s      </tt><DD><P CLASS=para>Option takes an optional string argument.This string will be assigned to the option variable.  If the string isomitted from the command invocation, <tt CLASS=literal>""</tt> (an empty string) will beassigned to the option variable.If the string argument starts with <tt CLASS=literal>-</tt> or <tt CLASS=literal>- -</tt>, itwill be taken as another option rather than assigned to the option variable.<p><DT CLASS=varlistentry><tt CLASS=literal>=i      </tt><DD><P CLASS=para>Option takes a mandatory integer argument.This value will be assigned to the option variable.Note that the value may start with <tt CLASS=literal>-</tt> to indicate a negativevalue.<p><DT CLASS=varlistentry><tt CLASS=literal>:i      </tt><DD><P CLASS=para>Option takes an optional integer argument.This integer value will be assigned to the option variable.If the optional argument is omitted, the value 0 will be assigned to theoption variable.  The value may start with <tt CLASS=literal>-</tt> to indicate a negativevalue.<p><DT CLASS=varlistentry><tt CLASS=literal>=f      </tt><DD><P CLASS=para>Option takes a mandatory floating-point argument.This value will be assigned to the option variable.Note that the value may start with <tt CLASS=literal>-</tt> to indicate a negativevalue.<p><DT CLASS=varlistentry><tt CLASS=literal>:f      </tt><DD><P CLASS=para>Option takes an optional floating-point argument.This value will be assigned to the option variable.If the optional argument is omitted, the value 0 will be assigned to theoption variable.The value may start with <tt CLASS=literal>-</tt> to indicate a negative value.</DL><P CLASS=para>A lone hyphen <tt CLASS=literal>-</tt> is considered an option; the corresponding optionname is the empty string.<P CLASS=para>A lone double hyphen <tt CLASS=literal>- -</tt> terminates theprocessing of options and arguments.  Any options following the double hyphenwill remain in <tt CLASS=literal>@ARGV</tt> when <tt CLASS=literal>GetOptions()</tt>returns.<P CLASS=para>If an argument specifier concludes with <tt CLASS=literal>@</tt> (as in <tt CLASS=literal>=s@</tt>),then the option is treated as an array.  That is, multiple invocations ofthe same option, each with a particular value, will result in the list ofvalues being assigned to the option variable, which is an array.  See thefollowing section for an example.<DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.41">Linkage specification</A></h4><P CLASS=para>The linkage specifier is optional.  If no linkage is explicitlyspecified but a hash reference is passed, <tt CLASS=literal>GetOptions()</tt>will place the value in the hash.  For example:<DIV CLASS=programlisting><P><PRE>%optctl = ();&amp;GetOptions (\%optctl, "size=i");</PRE></DIV><P CLASS=para>will perform the equivalent of the assignment:<DIV CLASS=programlisting><P><PRE>$optctl{"size"} = 24;</PRE></DIV><P CLASS=para>For array options, a reference to an anonymous array is generated.  For example:<DIV CLASS=programlisting><P><PRE>%optctl = ();&amp;GetOptions (\%optctl, "sizes=i@");</PRE></DIV><P CLASS=para>with command-line arguments:<DIV CLASS=programlisting><P><PRE>-sizes 24 -sizes 48</PRE></DIV><P CLASS=para>will perform the equivalent of the assignment:<DIV CLASS=programlisting><P><PRE>$optctl{"sizes"} = [24, 48];</PRE></DIV><P CLASS=para>If no linkage is explicitly specified and no hash reference is passed,<tt CLASS=literal>GetOptions()</tt> will put the value in a global variable namedafter the option, prefixed by <tt CLASS=literal>opt_</tt>.  To yield a usable Perlvariable, characters that are not part of the syntax for variables aretranslated to underscores.  For example,<tt CLASS=literal>- -fpp-struct-return</tt> will set the variable<tt CLASS=literal>$opt_fpp_struct_return</tt>.  (Note that this variable resides inthe namespace of the calling program, not necessarily main.)  For example:<DIV CLASS=programlisting><P><PRE>&amp;GetOptions ("size=i", "sizes=i@");</PRE></DIV><P CLASS=para>with command line:<DIV CLASS=programlisting><P><PRE>-size 10 -sizes 24 -sizes 48</PRE></DIV><P CLASS=para>will perform theequivalent of the assignments:<DIV CLASS=programlisting><P><PRE>$opt_size = 10;@opt_sizes = (24, 48);</PRE></DIV><P CLASS=para>A lone hyphen (<tt CLASS=literal>-</tt>) is considered an option; the correspondingidentifier is <tt CLASS=literal>$opt_</tt> .<P CLASS=para>The linkage specifier can be a reference to a scalar, a reference toan array, or a reference to a subroutine:<P><UL CLASS=itemizedlist><li CLASS=listitem>If a scalar reference is supplied, the new value is stored in the referencedvariable.  If the option occurs more than once, the previous value isoverwritten.<P><li CLASS=listitem>If an array reference is supplied, the new value is appended (pushed) to thereferenced array.<P><li CLASS=listitem>If a code reference is supplied, the referenced subroutine is called withtwo arguments: the option name and the option value.The option name is always the true name, not an abbreviation or alias.<P></UL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.42">Aliases and abbreviations</A></h4><P CLASS=para>The option specifier may actually include a "<tt CLASS=literal>|</tt>"-separated list of option names:<DIV CLASS=programlisting><P><PRE>foo|bar|blech=s</PRE></DIV><P CLASS=para>In this example, <tt CLASS=literal>foo</tt> is the true name of the option.  If nolinkage is specified, options <tt CLASS=literal>-foo</tt>, <tt CLASS=literal>-bar</tt> and<tt CLASS=literal>-blech</tt> all will set <tt CLASS=literal>$opt_foo</tt>.<P CLASS=para>Options may be invoked as unique abbreviations, depending onconfiguration variable <tt CLASS=literal>$Getopt::Long::autoabbrev</tt>.</DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.43">Non-option callback routine</A></h4><P CLASS=para>A special option specifier <tt CLASS=literal>&lt;&gt;</tt> can be used to designate a subroutineto handle non-option arguments.  For example:<DIV CLASS=programlisting><P><PRE>&amp;GetOptions(..."&lt;&gt;", \&amp;mysub...);</PRE></DIV><P CLASS=para>In this case <tt CLASS=literal>GetOptions()</tt> will immediately call<tt CLASS=literal>&amp;mysub</tt> for every non-option it encounters in the optionslist.  This subroutine gets the name of the non-option passed.  This featurerequires <tt CLASS=literal>$Getopt::Long::order</tt> to have the value of thepredefined and exported variable, <tt CLASS=literal>$PERMUTE</tt>.  See also theexamples.</DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.44">Option starters</A></h4><P CLASS=para>On the command line, options can start with <tt CLASS=literal>-</tt> (traditional),<tt CLASS=literal>- -</tt> (POSIX), and <tt CLASS=literal>+</tt> (GNU,now being phased out).  The latter is not allowed if the environment variable<tt CLASS=literal>POSIXLY_CORRECT</tt> has been defined.<P CLASS=para>Options that start with <tt CLASS=literal>- -</tt> may have anargument appended, following an equals sign (<tt CLASS=literal>=</tt>). Forexample: <tt CLASS=literal>- -foo=bar</tt>.</DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.45">Return value</A></h4><P CLASS=para>A return status of <tt CLASS=literal>0</tt> (false) indicates that the function detectedone or more errors.</DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.46">Configuration variables</A></h4><P CLASS=para>The following variables can be set to change the default behavior of<tt CLASS=literal>GetOptions()</tt>:<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>$Getopt::Long::autoabbrev</tt><DD><P CLASS=para>If true, then allow option names to be invoked with unique abbreviations.Default is <tt CLASS=literal>1</tt> unless environment variable<tt CLASS=literal>POSIXLY_CORRECT</tt> has been set.<p><DT CLASS=varlistentry><tt CLASS=literal>$Getopt::Long::getopt_compat</tt><DD><P CLASS=para>If true, then allow "<tt CLASS=literal>+</tt>" to start options.Default is 1 unless environment variable<tt CLASS=literal>POSIXLY_CORRECT</tt> has been set.<p><DT CLASS=varlistentry><tt CLASS=literal>$Getopt::Long::order</tt><DD><P CLASS=para>If set to <tt CLASS=literal>$PERMUTE</tt>, then non-options are allowed to be mixed withoptions on the command line.  If set to <tt CLASS=literal>$REQUIRE_ORDER</tt>, thenmixing is not allowed.  Default is <tt CLASS=literal>$REQUIRE_ORDER</tt> if environmentvariable <tt CLASS=literal>POSIXLY_CORRECT</tt> has been set, <tt CLASS=literal>$PERMUTE</tt> otherwise.Both <tt CLASS=literal>$PERMUTE</tt> and <tt CLASS=literal>$REQUIRE_ORDER</tt> are defined in the librarymodule and automatically exported.<tt CLASS=literal>$PERMUTE</tt> means that:<DIV CLASS=programlisting><P><PRE>-foo arg1 -bar arg2 arg3</PRE></DIV><P CLASS=para>is equivalent to:<DIV CLASS=programlisting><P><PRE>-foo -bar arg1 arg2 arg3</PRE></DIV><P CLASS=para>If a non-option callback routine is specified, <tt CLASS=literal>@ARGV</tt> will always beempty upon successful return of <tt CLASS=literal>GetOptions()</tt> since all options have beenprocessed, except when <tt CLASS=literal>- -</tt> is used.  So, for example:<DIV CLASS=programlisting><P><PRE>-foo arg1 -bar arg2 -- arg3</PRE></DIV><P CLASS=para>will call the callback routine for <tt CLASS=literal>arg1</tt> and<tt CLASS=literal>arg2</tt>, and then terminate, leaving <tt CLASS=literal>arg3</tt> in<tt CLASS=literal>@ARGV</tt>.  If <tt CLASS=literal>$Getopt::Long::order</tt> is<tt CLASS=literal>$REQUIRE_ORDER</tt>, option processing terminates when the firstnon-option is encountered.<DIV CLASS=programlisting><P><PRE>-foo arg1 -bar arg2 arg3</PRE></DIV><P CLASS=para>is equivalent to:<DIV CLASS=programlisting><P><PRE>-foo -- arg1 -bar arg2 arg3</PRE></DIV><p><DT CLASS=varlistentry><tt CLASS=literal>$Getopt::Long::ignorecase</tt><DD><P CLASS=para>If true, then ignore case when matching options.  Default is <tt CLASS=literal>1</tt>.<p><DT CLASS=varlistentry><tt CLASS=literal>$Getopt::Long::VERSION</tt><DD><P CLASS=para>The version number of this Getopt::Long implementation is in the format<tt CLASS=literal>major.minor</tt>. This can be used to have Exporter check theversion. Example:<DIV CLASS=programlisting><P><PRE>use Getopt::Long 2.00;</PRE></DIV><P CLASS=para><tt CLASS=literal>$Getopt::Long::major_version</tt> and<tt CLASS=literal>$Getopt::Long::minor_version</tt> may be inspected for theindividual components.<p><DT CLASS=varlistentry><tt CLASS=literal>$Getopt::Long::error</tt><DD><P CLASS=para>Internal error flag.  May be incremented from a callback routine tocause options parsing to fail.<p><DT CLASS=varlistentry><tt CLASS=literal>$Getopt::Long::debug</tt><DD><P CLASS=para>Enable copious debugging output.  Default is <tt CLASS=literal>0</tt>.</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.47">Examples</A></h4><P CLASS=para>If the option specifier is <tt CLASS=literal>one:i</tt> (which takes an optional integerargument), then the following situations are handled:<DIV CLASS=programlisting><P><PRE>-one -two            # $opt_one = "", -two is next option-one -2              # $opt_one = -2</PRE></DIV><P CLASS=para>Also, assume specifiers <tt CLASS=literal>foo=s</tt> and <tt CLASS=literal>bar:s</tt>:<DIV CLASS=programlisting><P><PRE>-bar -xxx            # $opt_bar = "", -xxx is next option-foo -bar            # $opt_foo = '-bar'-foo --              # $opt_foo = '--'</PRE></DIV><P CLASS=para>In GNU or POSIX format, option names and values can be combined:<DIV CLASS=programlisting><P><PRE>+foo=blech           # $opt_foo = 'blech'--bar=               # $opt_bar = ""--bar=--             # $opt_bar = '--'</PRE></DIV><P CLASS=para>Example using variable references:<DIV CLASS=programlisting><P><PRE>$ret = &amp;GetOptions ('foo=s', \$foo, 'bar=i', 'ar=s', \@ar);</PRE></DIV><P CLASS=para>With command-line options <tt CLASS=literal>-foo blech -bar 24 -ar xx -ar yy</tt>this will result in:<DIV CLASS=programlisting><P><PRE>$bar = 'blech'$opt_bar = 24@ar = ('xx', 'yy')</PRE></DIV><P CLASS=para>Example of using the <tt CLASS=literal>&lt;&nbsp;&gt;</tt> option specifier:<DIV CLASS=programlisting><P><PRE>@ARGV = qw(-foo 1 bar -foo 2 blech);&amp;GetOptions("foo=i", \$myfoo, "&lt;&gt;", \&amp;mysub);</PRE></DIV><P CLASS=para>Results:<DIV CLASS=programlisting><P><PRE>&amp;mysub("bar") <I CLASS=emphasis>will be called (with</I> $myfoo <I CLASS=emphasis>being</I> 1<I CLASS=emphasis>)</I>&amp;mysub("blech") <I CLASS=emphasis>will be called (with</I> $myfoo <I CLASS=emphasis>being</I> 2<I CLASS=emphasis>)</I></PRE></DIV><P CLASS=para>Compare this with:<DIV CLASS=programlisting><P><PRE>@ARGV = qw(-foo 1 bar -foo 2 blech);&amp;GetOptions("foo=i", \$myfoo);</PRE></DIV><P CLASS=para>This will leave the non-options in <tt CLASS=literal>@ARGV:</tt><DIV CLASS=programlisting><P><PRE>$myfoo <I CLASS=emphasis>becomes</I> 2@ARGV  <I CLASS=emphasis>becomes</I> qw(bar blech)</PRE></DIV><P CLASS=para>If you're using the <tt CLASS=literal>use strict</tt> pragma, which requires you to employonly lexical variables or else globals that are fully declared, you will have to use the double-colon package delimiter or else the <tt CLASS=literal>use vars</tt> pragma.  For example:<DIV CLASS=programlisting><P><PRE>use strict;use vars qw($opt_rows $opt_cols);use Getopt::Long;</PRE></DIV></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.36">Getopt::Std--Process Single-Character Options with Option Clustering</A></h3><DIV CLASS=programlisting><P><PRE>use Getopt::Std;getopt('oDI');    # -o, -D &amp; -I take arg.  Sets opt_* as a side effect.getopts('oif:');  # -o &amp; -i are boolean flags, -f takes an argument.                  # Sets opt_* as a side effect.</PRE></DIV><P CLASS=para>The <tt CLASS=literal>getopt()</tt> and <tt CLASS=literal>getopts()</tt> functions giveyour program simple mechanisms for processing single-character options.  Theseoptions can be clustered (for example, <tt CLASS=literal>-bdLc</tt> might beinterpreted as four single-character options), and you can specify individualoptions that require an accompanying argument.  When you invoke<tt CLASS=literal>getopt()</tt> or <tt CLASS=literal>getopts()</tt>, you pass alonginformation about the kinds of options your program expects.  These functionsthen analyze <tt CLASS=literal>@ARGV</tt>, extract information about the options,and return this information to your program in a set of variables.  Theprocessing of <tt CLASS=literal>@ARGV</tt> stops when an argument without a leading"<tt CLASS=literal>-</tt>" is encountered, if that argument is notassociated with a preceding option.  Otherwise, <tt CLASS=literal>@ARGV</tt> isprocessed to its end and left empty.<P CLASS=para>For each option in your program's invocation, both <tt CLASS=literal>getopt()</tt> and<tt CLASS=literal>getopts()</tt> define a variable <tt CLASS=literal>$opt_</tt><tt CLASS=replaceable><i>x</i></tt> where <tt CLASS=replaceable><i>x</i></tt> is theoption name.  If the option takes an argument, then the argument is readand assigned to <tt CLASS=literal>$opt_</tt><tt CLASS=replaceable><i>x</i></tt> as its value; otherwise, a value of 1 isassigned to the variable.<P CLASS=para>Invoke <tt CLASS=literal>getopt()</tt> with one argument, which should contain alloptions that require a following argument.  For example:<DIV CLASS=programlisting><P><PRE>getopt('dV');</PRE></DIV><P CLASS=para>If your program is then invoked as:<DIV CLASS=programlisting><P><PRE>myscr -bfd January -V 10.4</PRE></DIV><P CLASS=para>then these variables will be set in the program:<DIV CLASS=programlisting><P><PRE>$opt_b = 1;$opt_f = 1;$opt_d = "January";$opt_V = 10.4;</PRE></DIV><P CLASS=para>Space between an option and its following argument is unnecessary.  Theprevious command line could have been given this way:<DIV CLASS=programlisting><P><PRE>myscr -bfdJanuary -V10.4</PRE></DIV><P CLASS=para>In general, your program can be invoked with options given in any order.All options not "declared" in the invocation of <tt CLASS=literal>getopt()</tt> areassumed to be without accompanying argument.<P CLASS=para>Where <tt CLASS=literal>getopt()</tt> allows any single-character option,<tt CLASS=literal>getopts()</tt> allows only those options you declare explicitly.  Forexample, this invocation:<DIV CLASS=programlisting><P><PRE>getopts('a:bc:');</PRE></DIV><P CLASS=para>legitimizes only the options <tt CLASS=literal>-a</tt>, <tt CLASS=literal>-b</tt>, and <tt CLASS=literal>-c</tt>.  Thecolon following the <tt CLASS=literal>a</tt> and <tt CLASS=literal>c</tt> means that these two optionsrequire an accompanying argument; <tt CLASS=literal>b</tt> is not allowed to have anargument.  Accordingly, here are some ways to invoke the program:<DIV CLASS=programlisting><P><PRE>myscr -abc              # WRONG unless bc is really the argument to -amyscr -a -bc            # WRONG, with same qualificationmyscr -a foo -bc bar    # $opt_a = "foo"; $opt_b = 1; $opt_c = "bar"myscr -bafoo -cbar      # same as previous</PRE></DIV><P CLASS=para><tt CLASS=literal>getopts()</tt> returns false if it encounters errors during optionprocessing.  However, it continues to process arguments and assign valuesas best it can to <tt CLASS=literal>$opt_</tt><tt CLASS=replaceable><i>x</i></tt>variables.  You should always check forerrors before assuming that the variables hold meaningful values.<P CLASS=para><tt CLASS=literal>getopt()</tt> does not return a meaningful value.<P CLASS=para>Remember that both <tt CLASS=literal>getopt()</tt> and <tt CLASS=literal>getopts()</tt> halt argumentprocessing upon reading an argument (without leading "<tt CLASS=literal>-</tt>") wherenone was called for.  This is not considered an error.  So a user mightinvoke your program with invalid arguments, without your being notified ofthe fact.  However, you can always check to see whether <tt CLASS=literal>@ARGV</tt> hasbeen completely emptied or not--that is, whether all arguments have beenprocessed.If you're using the <tt CLASS=literal>use strict</tt> pragma, which requires you to employonly lexical variables or else globals that are fully declared, you will have to use the double-colon package delimiter or else the <tt CLASS=literal>use vars</tt> pragma.  For example:<DIV CLASS=programlisting><P><PRE>use strict;use vars qw($opt_o $opt_i $opt_D);use Getopt::Std;</PRE></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.37">I18N::Collate--Compare 8-bit Scalar Data According to the Current Locale</A></h3><DIV CLASS=programlisting><P><PRE>use I18N::Collate;setlocale(LC_COLLATE, $locale);         # uses POSIX::setlocale$s1 = new I18N::Collate "<tt CLASS=replaceable><i>scalar_data_1</i></tt>";$s2 = new I18N::Collate "<tt CLASS=replaceable><i>scalar_data_2</i></tt>";</PRE></DIV><P CLASS=para>This module provides you with objects that can be collated (ordered)according to your national character set, provided that Perl's POSIXmodule and the POSIX <I CLASS=emphasis>setlocale</I> (3) and <I CLASS=emphasis>strxfrm</I> (3) functions areavailable on your system.  <tt CLASS=literal>$locale</tt> in the <tt CLASS=literal>setlocale()</tt>invocation shown above must be an argument acceptable to<I CLASS=emphasis>setlocale</I> (3) on your system.  See the <I CLASS=emphasis>setlocale</I> (3) manpagefor further information.  Available locales depend upon your operatingsystem.<P CLASS=para>Here is an example of collation within the standard `C' locale:<DIV CLASS=programlisting><P><PRE>use I18N::Collate;setlocale(LC_COLLATE, 'C');$s1 = new I18N::Collate "Hello";$s2 = new I18N::Collate "Goodbye";# following line prints "Hello comes before Goodbye"print "$$s1 comes before $$s2" if $s2 le $s1;</PRE></DIV><P CLASS=para>The objects returned by the <tt CLASS=literal>new()</tt> method are references.  You canget at their values by dereferencing them--for example, <tt CLASS=literal>$$s1</tt> and<tt CLASS=literal>$$s2</tt>.  However, Perl's built-in comparison operators areoverloaded by I18N::Collate, so that they operate on the objects returnedby <tt CLASS=literal>new()</tt> without the necessity of dereference.  The <A HREF="ch03_02.htm#PERL2-CMD-PRINT">print</A> lineabove dereferences <tt CLASS=literal>$s1</tt> and <tt CLASS=literal>$s2</tt>to access their valuesdirectly, but does not dereference the variables passed to the <B>le</B>operator.  The comparison operators you can use in this way are thefollowing:<DIV CLASS=screen><P><PRE>&lt;   &lt;=  &gt;   &gt;=  ==  !=  &lt;=&gt;lt  le  gt  ge  eq  ne  cmp</PRE></DIV><P CLASS=para>I18N::Collate uses <tt CLASS=literal>POSIX::setlocale()</tt> and <tt CLASS=literal>POSIX::strxfrm()</tt>to perform the collation.  Unlike <tt CLASS=literal>strxfrm()</tt>, however,I18N::Collate handles embedded <tt CLASS=literal>NULL</tt> characters gracefully.<P CLASS=para>To determine which locales are available with your operating system,check whether the command:<DIV CLASS=programlisting><P><PRE>locale -a</PRE></DIV><P CLASS=para>lists them.  You can also check the <I CLASS=emphasis>locale</I> (5) or<I CLASS=emphasis>nlsinfo</I> manpages, or look at the filenames within one ofthese directories (or their subdirectories): <I CLASS=emphasis>/usr/lib/nls</I>,<I CLASS=emphasis>/usr/share/lib/locale</I>, or <I CLASS=emphasis>/etc/locale</I>.Not all locales your vendor supports are necessarily installed.  Please consultyour operating system's documentation and possibly your local systemadministrator.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.38">integer--Do Arithmetic in Integer Instead of Double</A></h3><DIV CLASS=programlisting><P><PRE>use integer;$x = 10/3;   # $x is now 3, not 3.33333333333333333</PRE></DIV><P CLASS=para>This module tells the compiler to use integer operationsfrom here to the end of the enclosing block.  On many machines,this doesn't matter a great deal for most computations, but on thosewithout floating point hardware, it can make a big difference.<P CLASS=para>This pragma does not automatically cast everything to aninteger; it only forces integer operations on arithmetic.  For example:<DIV CLASS=programlisting><P><PRE>use integer; print sin(3);           # 0.141120008059867print sin(3) + 4;       # 4</PRE></DIV><P CLASS=para>You can turn off the integer pragma within an inner block by using the<tt CLASS=literal>no integer</tt> directive.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.39">IPC::Open2--Open a Process for Both Reading and Writing</A></h3><DIV CLASS=programlisting><P><PRE>use IPC::Open2;# with named filehandles$pid = open2(\*RDR, \*WTR, $cmd_with_args);$pid = open2(\*RDR, \*WTR, $cmd, "<tt CLASS=replaceable><i>arg1</i></tt>", "<tt CLASS=replaceable><i>arg2</i></tt>", ...);</PRE></DIV><DIV CLASS=programlisting><P><PRE># with object-oriented handlesuse FileHandle;my($rdr, $wtr) = (FileHandle-&gt;new, FileHandle-&gt;new);$pid = open2($rdr, $wtr, $cmd_with_args);</PRE></DIV><P CLASS=para><A NAME="CH07.OPEN21"></A><A NAME="CH07.OPEN22"></A><A NAME="CH07.OPEN23"></A><A NAME="CH07.OPEN24"></A><A NAME="CH07.OPEN25"></A>The <tt CLASS=literal>open2()</tt> function forks a child process to execute thespecified command.  The first two arguments represent filehandles, oneway or another.  They can be FileHandle objects, or they can bereferences to typeglobs, which can either be explicitly named as above,or generated by the Symbol package, as in the example below.  Whicheveryou choose, they represent handles through which your program can readfrom the command's standard output and write to the command's standardinput, respectively.  <tt CLASS=literal>open2()</tt> differs from Perl's built-in<A HREF="ch03_02.htm#PERL2-CMD-OPEN">open</A> function in that it allows your program to communicate inboth directions with the child process.<P CLASS=para><tt CLASS=literal>open2()</tt> returns the process ID of the child process.  On failure itreports a fatal error.<P CLASS=para>Here's a simple use of <tt CLASS=literal>open2()</tt> by which you can give the programuser interactive access to the <I CLASS=emphasis>bc</I> (1) command.  (<I CLASS=emphasis>bc</I> is anarbitrary-precision arithmetic package.)  In this case we use the Symbolmodule to produce "anonymous" symbols:<DIV CLASS=programlisting><P><PRE>use IPC::Open2;use Symbol;$WTR = gensym();  # get a reference to a typeglob$RDR = gensym();  # and another one$pid = open2($RDR, $WTR, 'bc');while (&lt;STDIN&gt;) {            # read commands from user     print $WTR $_;          # write a command to bc(1)     $line = &lt;$RDR&gt;;         # read the output of bc(1)     print STDOUT "$line";   # send the output to the user}</PRE></DIV><P CLASS=para><tt CLASS=literal>open2()</tt> establishes unbuffered output for <tt CLASS=literal>$WTR</tt>.  However,it cannot control buffering of output from the designated command.Therefore, be sure to heed the following warning.<DIV CLASS=warning><P CLASS=warning><BLOCKQUOTE><P><B>WARNING:</B><P CLASS=para>It is extremely easy for your program to hang while waitingto read the next line of output from the command.  In the example justshown, <I CLASS=emphasis>bc</I> is known to read and write one line at a time, so it issafe.  But utilities like <I CLASS=emphasis>sort</I> (1) that read their entire inputstream before offering any output will cause a deadlock when used in themanner we have illustrated.  You might do something like this instead:<DIV CLASS=programlisting><P><PRE>$pid = open2($RDR, $WTR, 'sort');while (&lt;STDIN&gt;) {     print $WTR $_;}close($WTR);    # finish sending all output to sort(1)while (&lt;$RDR&gt;) {     # now read the output of sort(1)     print STDOUT "$_";}</PRE></DIV><P CLASS=para>More generally, you may have to use <B>select</B> to determine which filedescriptors are ready to read, and then <A HREF="ch03_02.htm#PERL2-CMD-SYSREAD">sysread</A> for the actualreading.</blockquote><P></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.48">See also</A></h4><P CLASS=para>The IPC::open3 module shows an alternative that handles <tt CLASS=literal>STDERR</tt>as well.</DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.40">IPC::Open3--Open a Process for Reading, Writing, and Error Handling</A></h3><DIV CLASS=programlisting><P><PRE>use IPC::Open3;$pid = open3($WTR, $RDR, $ERR, $cmd_with_args);$pid = open3($WTR, $RDR, $ERR, $cmd, "<tt CLASS=replaceable><i>arg1</i></tt>", "<tt CLASS=replaceable><i>arg2</i></tt>", ...);</PRE></DIV><P CLASS=para>IPC::Open3 works like IPC::Open2, with the following differences:<P><UL CLASS=itemizedlist><li CLASS=listitem>The first two arguments (<tt CLASS=literal>$WTR</tt> and <tt CLASS=literal>$RDR</tt>) are given inreverse order compared to IPC::Open2.<P><li CLASS=listitem>A third filehandle can be given, for standard error.  If this argument isgiven as <tt CLASS=literal>""</tt>, then <tt CLASS=literal>STDERR</tt> and <tt CLASS=literal>STDOUT</tt> for <tt CLASS=literal>$cmd</tt>will be on the same filehandle.<P><li CLASS=listitem>If <tt CLASS=literal>$WTR</tt> begins with<tt CLASS=literal>&lt;&amp;</tt>, then the leading <tt CLASS=literal>&lt;&amp;</tt> isstripped from the name and the remainder is assumed to be a regular filehandlefor an open file, rather than a reference to a typeglob.<tt CLASS=literal>open3()</tt> opens this file as <tt CLASS=literal>STDIN</tt> for<tt CLASS=literal>$cmd</tt> and closes it in the parent.  Likewise, if<tt CLASS=literal>$RDR</tt> or <tt CLASS=literal>$ERR</tt> begins with<tt CLASS=literal>&gt;&amp;</tt>, then <tt CLASS=literal>$cmd</tt> directs<tt CLASS=literal>STDOUT</tt> or <tt CLASS=literal>STDERR</tt> directly to that filerather than to the parent.<P></UL><P CLASS=para>Warnings given for IPC::Open2 regarding possible program hangs apply toIPC::Open3 as well.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.41">lib--Manipulate @INC at Compile-Time</A></h3><DIV CLASS=programlisting><P><PRE>use lib <tt CLASS=replaceable><i>LIST</i></tt>;no lib <tt CLASS=replaceable><i>LIST</i></tt>;</PRE></DIV><P CLASS=para>This module simplifies the manipulation of Perl's special <B>@INC</B>variable at compile-time.  It is used to add extra directoriesto Perl's search path so that later <A HREF="ch03_02.htm#PERL2-CMD-USE">use</A> or <A HREF="ch03_02.htm#PERL2-CMD-REQUIRE">require</A> statementswill find modules not located along Perl's default search path.<DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.49">Adding directories</A></h4><P CLASS=para>Directories itemized in <tt CLASS=replaceable><i>LIST</i></tt> are added to the start of thePerl search path.  Saying:<DIV CLASS=programlisting><P><PRE>use lib <tt CLASS=replaceable><i>LIST</i></tt>;</PRE></DIV><P CLASS=para>is <I CLASS=emphasis>almost</I> the same as saying:<DIV CLASS=programlisting><P><PRE>BEGIN { unshift(@INC, <tt CLASS=replaceable><i>LIST</i></tt> ) }</PRE></DIV><P CLASS=para>The difference is that, for each directory in <tt CLASS=replaceable><i>LIST</i></tt> (called<tt CLASS=literal>$dir</tt> here), the lib module alsochecks to see whether a directory called <tt CLASS=literal>$dir</tt>/<tt CLASS=literal>$archname</tt>/<I CLASS=emphasis>auto</I> exists,where <tt CLASS=literal>$archname</tt> is derived from Perl's configuration information:<DIV CLASS=programlisting><P><PRE>use Config;$archname = $Config{'archname'};</PRE></DIV><P CLASS=para>If so, the <tt CLASS=literal>$dir/$archname</tt> directory is assumed to be anarchitecture-specific directory and is added to <B>@INC</B> in front of <tt CLASS=literal>$dir</tt>.<P CLASS=para>If <tt CLASS=replaceable><i>LIST</i></tt> includes both <tt CLASS=literal>$dir</tt> and<tt CLASS=literal>$dir</tt>/<tt CLASS=literal>$archname</tt>, then<tt CLASS=literal>$dir</tt>/<tt CLASS=literal>$archname</tt> will be added to <B>@INC</B> twice (assuming<tt CLASS=literal>$dir</tt>/<tt CLASS=literal>$archname</tt>/<I CLASS=emphasis>auto</I>exists).</DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.50">Deleting directories</A></h4><P CLASS=para>You should normally only add directories to <B>@INC</B>.  If you need todelete directories from <B>@INC</B>, take care to delete only those youyourself added.  Otherwise, be certain that the directories you delete arenot needed by other modules directly or indirectly invoked by your script.Other modules may have added directories they need for correct operation.<P CLASS=para>By default the statement:<DIV CLASS=programlisting><P><PRE>no lib <tt CLASS=replaceable><i>LIST</i></tt></PRE></DIV><P CLASS=para>deletes the first instance ofeach named directory from <B>@INC</B>.  To delete multiple instances of thesame name from <B>@INC</B> you can specify the name multiple times.<P CLASS=para>To delete all instances of all the specified names from<B>@INC</B> you can specify <tt CLASS=literal>:ALL</tt> as the first parameter of<tt CLASS=replaceable><i>LIST</i></tt>.  For example:<DIV CLASS=programlisting><P><PRE>no lib qw(:ALL .);</PRE></DIV><P CLASS=para>For each directory in <tt CLASS=replaceable><i>LIST</i></tt> (called<tt CLASS=literal>$dir</tt> here) the lib module also checks to see whether adirectory called<tt CLASS=literal>$dir</tt>/<tt CLASS=literal>$archname</tt>/<I CLASS=emphasis>auto</I>exists.  If so, the <tt CLASS=literal>$dir</tt>/<tt CLASS=literal>$archname</tt>directory is assumed to be a corresponding architecture-specific directory andis also deleted from <B>@INC</B>.<P CLASS=para>If <tt CLASS=replaceable><i>LIST</i></tt> includes both <tt CLASS=literal>$dir</tt> and<tt CLASS=literal>$dir</tt>/<tt CLASS=literal>$archname</tt> then<tt CLASS=literal>$dir</tt>/<tt CLASS=literal>$archname</tt> will be deleted from<B>@INC</B> twice (assuming<tt CLASS=literal>$dir</tt>/<tt CLASS=literal>$archname</tt>/<I CLASS=emphasis>auto</I>exists).</DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.51">Restoring the original directory list</A></h4><P CLASS=para>When the lib module is first loaded, it records the current value of <B>@INC</B> in an array <tt CLASS=literal>@lib::ORIG_INC</tt>.  Torestore <B>@INC</B> to that value you can say:<DIV CLASS=programlisting><P><PRE>@INC = @lib::ORIG_INC;</PRE></DIV></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.52">See also</A></h4><P CLASS=para>The AddINC module (not in the standard Perl library, but available fromCPAN) deals with paths relative to the source file.</DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.42">Math::BigFloat--Arbitrary-Length, Floating-Point Math Package</A></h3><DIV CLASS=programlisting><P><PRE>use Math::BigFloat;$f = Math::BigFloat-&gt;new($string);# <tt CLASS=replaceable><i>NSTR</i></tt> is a number string; <tt CLASS=replaceable><i>SCALE</i></tt> is an integer value.# In all following cases $f remains unchanged.# All methods except fcmp() return a number string.$f-&gt;fadd(<tt CLASS=replaceable><i>NSTR</i></tt>);          # return sum of <tt CLASS=replaceable><i>NSTR</i></tt> and $f$f-&gt;fsub(<tt CLASS=replaceable><i>NSTR</i></tt>);          # return $f minus <tt CLASS=replaceable><i>NSTR</i></tt>$f-&gt;fmul(<tt CLASS=replaceable><i>NSTR</i></tt>);          # return $f multiplied by <tt CLASS=replaceable><i>NSTR</i></tt>$f-&gt;fdiv(<tt CLASS=replaceable><i>NSTR</i></tt>[,<tt CLASS=replaceable><i>SCALE</i></tt>]);  # return $f divided by <tt CLASS=replaceable><i>NSTR</i></tt> to <tt CLASS=replaceable><i>SCALE</i></tt> places$f-&gt;fneg();              # return negative of $f$f-&gt;fabs();              # return absolute value of $f$f-&gt;fcmp(<tt CLASS=replaceable><i>NSTR</i></tt>);          # compare $f to <tt CLASS=replaceable><i>NSTR</i></tt>; see below for return value$f-&gt;fround(<tt CLASS=replaceable><i>SCALE</i></tt>);       # return rounded value of $f to <tt CLASS=replaceable><i>SCALE</i></tt> digits$f-&gt;ffround(<tt CLASS=replaceable><i>SCALE</i></tt>);      # return rounded value of $f at <tt CLASS=replaceable><i>SCALEth</i></tt> place$f-&gt;fnorm();             # return normalization of $f$f-&gt;fsqrt([<tt CLASS=replaceable><i>SCALE</i></tt>]);      # return sqrt of $f to <tt CLASS=replaceable><i>SCALE</i></tt> places</PRE></DIV><P CLASS=para>This module allows you to use floating-point numbers of arbitrary length.For example:<DIV CLASS=programlisting><P><PRE>$float = new Math::BigFloat "2.123123123123123123123123123123123";</PRE></DIV><P CLASS=para>Number strings (<tt CLASS=replaceable><i>NSTR</i></tt>s) have the form, <tt CLASS=literal>/[+-]\d*\.?\d*E[+-]\d+/</tt>.Embedded white space is ignored, so that the number strings used in thefollowing two lines are identical:<DIV CLASS=programlisting><P><PRE>$f = Math::BigFloat-&gt;new("-20.0    0732");$g = $f-&gt;fmul("-20.00732");</PRE></DIV><P CLASS=para>The return value <tt CLASS=literal>NaN</tt> indicates either that an input parameter was "Nota Number", or else that you tried to divide by zero or take the squareroot of a negative number.  The <tt CLASS=literal>fcmp()</tt> method returns <tt CLASS=literal>-1</tt>,<tt CLASS=literal>0</tt>, or <tt CLASS=literal>1</tt> depending on whether <tt CLASS=literal>$f</tt> is less than,equal to, or greater than the number string given as an argument.  Ifthe number string is undefined or null, the undefined value is returned.<P CLASS=para>If <tt CLASS=replaceable><i>SCALE</i></tt> is unspecified,division is computed to the number of digits given by:<DIV CLASS=programlisting><P><PRE>max($div_scale, length(dividend)+length(divisor))</PRE></DIV><P CLASS=para>A similar default scale value is computed for square roots.<P CLASS=para>When you use this module, Perl's basic math operations are overloadedwith routines from Math::BigFloat.  Therefore, you don't have to employ themethods shown above to multiply, divide, and so on.  You can rely insteadon the usual operators.  Given this code:<DIV CLASS=programlisting><P><PRE>$f = Math::BigFloat-&gt;new("20.00732");$g = Math::BigFloat-&gt;new("1.7");</PRE></DIV><P CLASS=para>the following six lines all yield the corresponding values for <tt CLASS=literal>$h</tt>:<DIV CLASS=programlisting><P><PRE>$h = -20.00732 * 1.7;   # 34.012444 (ordinary math--$h is not an object)$h = $f * $g;           # "34.012444" ($h is now a BigFloat object)$h = $f * 1.7;          # "34.012444" ($h is now a BigFloat object)$h = -20.00732 * $g;    # "34.012444" ($h is now a BigFloat object)$h = $f-&gt;fmul($g);      # "+34012444E-6" ($h is now a BigFloat object)$h = $f-&gt;fmul(1.7);     # "+34012444E-6" ($h is now a BigFloat object)</PRE></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.43">Math::BigInt--Arbitrary-Length Integer Math Package</A></h3><DIV CLASS=programlisting><P><PRE>use Math::BigInt;$i = Math::BigInt-&gt;new($string);# <tt CLASS=replaceable><i>BINT</i></tt> is a big integer string; in all following cases $i remains unchanged.# All methods except bcmp() return a big integer string, or strings.$i-&gt;bneg;       # return negative of $i$i-&gt;babs        # return absolute value of $i$i-&gt;bcmp(<tt CLASS=replaceable><i>BINT</i></tt>)  # compare $i to <tt CLASS=replaceable><i>BINT</i></tt>; see below for return value$i-&gt;badd(<tt CLASS=replaceable><i>BINT</i></tt>)  # return sum of <tt CLASS=replaceable><i>BINT</i></tt> and $i$i-&gt;bsub(<tt CLASS=replaceable><i>BINT</i></tt>)  # return $i minus <tt CLASS=replaceable><i>BINT</i></tt>$i-&gt;bmul(<tt CLASS=replaceable><i>BINT</i></tt>)  # return $i multiplied by <tt CLASS=replaceable><i>BINT</i></tt>$i-&gt;bdiv(<tt CLASS=replaceable><i>BINT</i></tt>)  # return $i divided by <tt CLASS=replaceable><i>BINT</i></tt>; see below for return value$i-&gt;bmod(<tt CLASS=replaceable><i>BINT</i></tt>)  # return $i modulus <tt CLASS=replaceable><i>BINT</i></tt>$i-&gt;bgcd(<tt CLASS=replaceable><i>BINT</i></tt>)  # return greatest common divisor of $i and <tt CLASS=replaceable><i>BINT</i></tt>$i-&gt;bnorm       # return normalization of $i</PRE></DIV><P CLASS=para>This module allows you to use integers of arbitrary length.  Integerstrings (<tt CLASS=replaceable><i>BINT</i></tt>s) have the form <tt CLASS=literal>/^\s*[+-]?[\d\s]+$/</tt>.Embedded whitespace is ignored.  Output values are always in thecanonical form: <tt CLASS=literal>/^[+-]\d+$/</tt> .  For example:<DIV CLASS=programlisting><P><PRE>'+0'                # canonical zero value'   -123 123 123'   # canonical value:  '-123123123''1 23 456 7890'     # canonical value:  '+1234567890'</PRE></DIV><P CLASS=para>The return value <tt CLASS=literal>NaN</tt> results when an input argument is not anumber, or when a divide by zero is attempted.  The <tt CLASS=literal>bcmp()</tt> methodreturns <tt CLASS=literal>-1</tt>, <tt CLASS=literal>0</tt>, or <tt CLASS=literal>1</tt> depending on whether<tt CLASS=literal>$f</tt> is less than, equal to, or greater than the number stringgiven as an argument.  If the number string is undefined or null, theundefined value is returned.  In a list context the <tt CLASS=literal>bdiv()</tt> methodreturns a two-element array containing the quotient of the division andthe remainder; in a scalar context only the quotient is returned.<P CLASS=para>When you use this module, Perl's basic math operations are overloadedwith routines from Math::BigInt.  Therefore, you don't have to employ themethods shown above to multiply, divide, and so on.  You can rely insteadon the usual operators.  Given this code:<DIV CLASS=programlisting><P><PRE>$a = Math::BigInt-&gt;new("42 000 000 000 000");$b = Math::BigInt-&gt;new("-111111");</PRE></DIV><P CLASS=para>the following five lines yield these string values for <tt CLASS=literal>$c</tt>:<DIV CLASS=programlisting><P><PRE>$c = 42000000000000 - -111111;                          # 42000000111111; ordinary math--$c is a double$c = $a - $b;             # "+42000000111111"; $c is now a BigInt object$c = $a - -111111;        # "+42000000111111"; $c is now a BigInt object$c = $a-&gt;bsub($b);        # "+42000000111111"; $c is just a string$c = $a-&gt;bsub(-111111);   # "+42000000111111"; $c is just a string</PRE></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.44">Math::Complex--Complex Numbers Package</A></h3><DIV CLASS=programlisting><P><PRE>use Math::Complex;$cnum = new Math::Complex;</PRE></DIV><P CLASS=para>When you use this module, complex numbers declared as:<DIV CLASS=programlisting><P><PRE>$cnum = Math::Complex-&gt;new(1, 1);</PRE></DIV><P CLASS=para>can be manipulated with overloaded math operators.  The operators:<DIV CLASS=screen><P><PRE>+ - * / neg ~ abs cos sin exp sqrt</PRE></DIV><P CLASS=para>are supported, and return references to new objects.  Also,<DIV CLASS=screen><P><PRE>"" (stringify)</PRE></DIV><P CLASS=para>is available to convert complex numbers to strings.  In addition, themethods:<DIV CLASS=screen><P><PRE>Re Im arg</PRE></DIV><P CLASS=para>are available.  Given a complex number, <tt CLASS=literal>$cnum</tt>:<DIV CLASS=programlisting><P><PRE>$cnum = Math::Complex-&gt;new($x, $y);</PRE></DIV><P CLASS=para>then <tt CLASS=literal>$cnum-&gt;Re()</tt> returns <tt CLASS=literal>$x</tt>,<tt CLASS=literal>$cnum-&gt;Im()</tt> returns <tt CLASS=literal>$y</tt>, and<tt CLASS=literal>$cnum-&gt;arg()</tt> returns <tt CLASS=literal>atan2($y, $x)</tt>.<P CLASS=para><tt CLASS=literal>sqrt()</tt>, which should return two roots, returns only one.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.45">NDBM_File--Tied Access to NDBM Files</A></h3><DIV CLASS=programlisting><P><PRE>use Fcntl;use NDBM_File;tie(%hash, NDBM_File, 'Op.dbmx', O_RDWR|O_CREAT, 0644);# read/writes of %hash are now read/writes of the file, Op.dmx.paguntie %hash;</PRE></DIV><P CLASS=para>See Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-TIE">tie</A> function.  Also see under DB_File in thischapter for a description of a closely related module.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.46">Net::Ping--Check Whether a Host Is Online</A></h3><DIV CLASS=programlisting><P><PRE>use Net::Ping;$hostname = 'elvis';       # host to check$timeout = 10;             # how long to wait for a responseprint "elvis is alive\n"    if pingecho($hostname, $timeout);</PRE></DIV><P CLASS=para><tt CLASS=literal>pingecho()</tt> uses a TCP echo (not an ICMP one) to determine whethera remote host is reachable.  This is usually adequate to tell whether a remotehost is available to <I CLASS=emphasis>rsh</I> (1), <I CLASS=emphasis>ftp</I> (1), or <I CLASS=emphasis>telnet</I> (1).<P CLASS=para>The parameters for <tt CLASS=literal>pingecho()</tt> are:<P><DL CLASS=variablelist><DT CLASS=varlistentry>hostname<DD><P CLASS=para>The remote host to check, specified either as a hostname or as an IP address.<p><DT CLASS=varlistentry>timeout<DD><P CLASS=para>The timeout in seconds.  If not specified it will default to 5 seconds.</DL><DIV CLASS=warning><P CLASS=warning><BLOCKQUOTE><P><B>WARNING:</B><P CLASS=para><tt CLASS=literal>pingecho()</tt> uses <A HREF="ch03_02.htm#PERL2-CMD-ALARM">alarm</A> to implement the timeout, so don't setanother alarm while you are using it.</blockquote><P></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.47">ODBM_File--Tied Access to ODBM Files</A></h3><DIV CLASS=programlisting><P><PRE>use Fcntl;use ODBM_File;tie(%hash, ODBM_File, 'Op.dbmx', O_RDWR|O_CREAT, 0644);# read/writes of %hash are now read/writes of the file, Op.dmxuntie %h;</PRE></DIV><P CLASS=para>See Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-TIE">tie</A> function.  Also see under DB_File in thischapter for a description of a closely related module.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.48">overload--Overload Perl's Mathematical Operations</A></h3><DIV CLASS=programlisting><P><PRE># In the SomeThing module:package SomeThing;use overload    '+' =&gt; \&amp;myadd,    '-' =&gt; \&amp;mysub;# In your other code:use SomeThing;$a = SomeThing-&gt;new(57);$b=5+$a;if (overload::Overloaded $b) {...}  # is $b subject to overloading?$strval = overload::StrVal $b;</PRE></DIV><P CLASS=para><A NAME="CH07.OVER1"></A><A NAME="CH07.OVER2"></A><A NAME="CH07.OVER3"></A><I CLASS=emphasis>Caveat Scriptor:</I>  This interface is the subject of ongoingresearch.  Feel free to play with it, but don't be too surprised if theinterface changes subtly (or not so subtly) as it is developed further.If you rely on it for a mission-critical application, please be sure towrite some good regression tests.  (Or perhaps in this case we shouldcall them "progression" tests.)<P CLASS=para>This module allows you to substitute class methods or your own subroutinesfor standard Perl operators.  For example, the code:<DIV CLASS=programlisting><P><PRE>package Number;use overload    "+"  =&gt; \&amp;add,    "*=" =&gt; "muas";</PRE></DIV><P CLASS=para>declares function <tt CLASS=literal>add()</tt> for addition, and method<tt CLASS=literal>muas()</tt> in the Number class (or one of its base classes) forthe assignment form <tt CLASS=literal>*=</tt> of multiplication.<P CLASS=para>Arguments to <tt CLASS=literal>use overload</tt> come in key/value pairs.  Legal valuesare values permitted inside a <tt CLASS=literal>&amp;{ ... }</tt> call, so the name of asubroutine, a reference to a subroutine, or an anonymous subroutine willall work.  Legal keys are listed below.<P CLASS=para>The subroutine <tt CLASS=literal>add()</tt> will be called to execute<tt CLASS=literal>$a+$b</tt> if <tt CLASS=literal>$a</tt> is a reference to an objectblessed into the package <tt CLASS=literal>Number</tt>, or if <tt CLASS=literal>$a</tt>is not an object from a package with overloaded addition, but<tt CLASS=literal>$b</tt> is a reference to a <tt CLASS=literal>Number</tt>.  It canalso be called in other situations, like <tt CLASS=literal>$a+=7</tt>, or<tt CLASS=literal>$a++</tt>.  See the section on "Autogeneration".<DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.54">Calling conventions for binary operations</A></h4><P CLASS=para>The functions specified with the <tt CLASS=literal>use overload</tt> directive aretypically called with three arguments.  (See the "No Method" section later inthis chapter for the four-argument case.)  If the corresponding operation isbinary, then the first two arguments are the two arguments of the operation.However, due to general object-calling conventions, the first argument shouldalways be an object in the package, so in the situation of<tt CLASS=literal>7+$a</tt>, the order of the arguments gets interchanged before themethod is called.  It probably does not matter when implementing the additionmethod, but whether the arguments are reversed is vital to the subtractionmethod.  The method can query this information by examining the third argument,which can take three different values:<P><DL CLASS=variablelist><DT CLASS=varlistentry>false (0)<DD><P CLASS=para>The order of arguments is as in the current operation.<p><DT CLASS=varlistentry>true (1)<DD><P CLASS=para>The arguments are reversed.<p><DT CLASS=varlistentry>undefined<DD><P CLASS=para>The current operation is an assignment variant (as in<tt CLASS=literal>$a+=7</tt>), but the usual function is called instead.  This additionalinformation can be used to generate some optimizations.</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.55">Calling conventions for unary operations</A></h4><P CLASS=para>Unary operations are considered binary operations with the second argument being<A HREF="ch03_02.htm#PERL2-CMD-UNDEF">undef</A>.  Thus the function that overloads<tt CLASS=literal>{"++"}</tt> is called with arguments <tt CLASS=literal>($a, undef,``)</tt> when <tt CLASS=literal>$a</tt>++ is executed.</DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.56">Overloadable operations</A></h4><P CLASS=para>The following operations can be specified with <tt CLASS=literal>use overload</tt>:<P><UL CLASS=itemizedlist><li CLASS=listitem><I CLASS=emphasis>Arithmetic operations</I><DIV CLASS=screen><P><PRE>+    -    *    /    %    **    &lt;&lt;    &gt;&gt;    x    .+=   -=   *=   /=   %=   **=   &lt;&lt;=   &gt;&gt;=   x=   .=</PRE></DIV><P CLASS=para>For these operations a substituted non-assignment variant can be called ifthe assignment variant is not available.  Methods for operations "<tt CLASS=literal>+</tt>","<tt CLASS=literal>-</tt>", "<tt CLASS=literal>+=</tt>", and "<tt CLASS=literal>-=</tt>" can be called to automatically generateincrement and decrement methods.  The operation "<tt CLASS=literal>-</tt>" can be used toautogenerate missing methods for unary minus or <tt CLASS=literal>abs()</tt>.<P><li CLASS=listitem><I CLASS=emphasis>Comparison operations</I><DIV CLASS=screen><P><PRE>&lt;   &lt;=  &gt;   &gt;=  ==  !=  &lt;=&gt;lt  le  gt  ge  eq  ne  cmp</PRE></DIV><P CLASS=para>The <tt CLASS=literal>&lt;=&gt;</tt> operator can substitute for any of the other numeric compareoperators, and <B>cmp</B> can substitute for any missing string compareoperators.  When using <A HREF="ch03_02.htm#PERL2-CMD-SORT">sort</A> onarrays, <tt CLASS=literal>cmp</tt> is used to compare values subject to <tt CLASS=literal>use overload</tt>.<P><li CLASS=listitem><I CLASS=emphasis>Bit and unary operations</I><DIV CLASS=screen><P><PRE>&amp;   ^   |   neg   !   ~</PRE></DIV><P CLASS=para>"<tt CLASS=literal>neg</tt>" stands for unary minus.  If the method for <tt CLASS=literal>neg</tt> is notspecified, it can be autogenerated using the method for subtraction.<P><li CLASS=listitem><I CLASS=emphasis>Increment and decrement</I><DIV CLASS=screen><P><PRE>++   --</PRE></DIV><P CLASS=para>If undefined, addition and subtraction methods can beused instead.  These operations are called both in prefix andpostfix form.<P><li CLASS=listitem><I CLASS=emphasis>Transcendental functions</I><DIV CLASS=screen><P><PRE>atan2   cos   sin   exp   abs   log   sqrt</PRE></DIV><P CLASS=para>If <tt CLASS=literal>abs</tt> is unavailable, it can be autogenerated using methodsfor "<tt CLASS=literal>&lt;</tt>" or "<tt CLASS=literal>&lt;=&gt;</tt>" combined with either unary minus or subtraction.<P><li CLASS=listitem><I CLASS=emphasis>Boolean, string and numeric conversion</I><DIV CLASS=screen><P><PRE>bool   ""   0+</PRE></DIV><P CLASS=para>(Yes, that really is two double-quotes in a row.)  If one or two of theseoperations are unavailable, the remaining ones can be used instead.<tt CLASS=literal>bool</tt> is used in the flow control operators (like <B>while</B> and <B>if</B>) and for thetrinary "<tt CLASS=literal>?:</tt>" operation.  These functions can return anyarbitrary Perl value.  If the corresponding operation for this value isoverloaded, too, then that operation will be called again with this value.<P><li CLASS=listitem><I CLASS=emphasis>Special</I><DIV CLASS=screen><P><PRE>nomethod  fallback  =</PRE></DIV><P CLASS=para>The following sections provide explanation.<P></UL><P CLASS=para>Three keys are recognized by Perl that are not covered by the abovedescriptions: "<tt CLASS=literal>nomethod</tt>","<tt CLASS=literal>fallback</tt>", and"<tt CLASS=literal>=</tt>".</DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.57">No method</A></h4><P CLASS=para>"<tt CLASS=literal>nomethod</tt>" should be followed by a reference to afunction of four parameters.  If defined, it is called when the overloadingmechanism cannot find a method for some operation.  The first three arguments ofthis function coincide with the arguments for the corresponding method if itwere found; the fourth argument is the symbol corresponding to the missingmethod.  If several methods are tried, the last one is used.  <P CLASS=para>For example,<tt CLASS=literal>1-$a</tt> can be equivalent to:<DIV CLASS=programlisting><P><PRE>&amp;nomethodMethod($a, 1, 1, "-")</PRE></DIV><P CLASS=para>if the pair <tt CLASS=literal>`nomethod` =&gt; `nomethodMethod`</tt> was specified in the <tt CLASS=literal>useoverload</tt> directive.<P CLASS=para>If some operation cannot be resolved and there is no function assigned to"<tt CLASS=literal>nomethod</tt>", then an exception will be raised via<A HREF="ch03_02.htm#PERL2-CMD-DIE">die</A> unless"<tt CLASS=literal>fallback</tt>" was specified as a key in a<tt CLASS=literal>use overload</tt> directive.</DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.58">Fallback</A></h4><P CLASS=para>The "<tt CLASS=literal>fallback</tt>" key governs what to do if a method for aparticular operation is not found.  Three different cases are possible dependingon the value of "<tt CLASS=literal>fallback</tt>":<P><DL CLASS=variablelist><DT CLASS=varlistentry>undefined<DD><P CLASS=para>Perl tries to use a substituted method (see the section later on"Autogeneration".  If this fails, it then tries to call the methodspecified for "<tt CLASS=literal>nomethod</tt>"; if missing, an exception will beraised.<p><DT CLASS=varlistentry>true<DD><P CLASS=para>The same as for the undefined value, but no exception is raised.  Instead,Perl silently reverts to what it would have done were there no <tt CLASS=literal>useoverload</tt> present.<p><DT CLASS=varlistentry>defined, but false<DD><P CLASS=para>No autogeneration is tried.  Perl tries to call the method specifiedfor "<tt CLASS=literal>nomethod</tt>", and if this is missing, raises an exception.</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.59">Copy constructor</A></h4><P CLASS=para>The value for "<tt CLASS=literal>=</tt>" is a reference to a function with threearguments; that is, it looks like the other values in <tt CLASS=literal>useoverload</tt>.  However, it does not overload the Perl assignmentoperator.  This would rub Camel hair the wrong way.<P CLASS=para>This operation is called when a <I CLASS=emphasis>mutator</I> is appliedto a reference that shares its object with some other reference, suchas:<DIV CLASS=programlisting><P><PRE>$a=$b;$a++;</PRE></DIV><P CLASS=para>In order to change <tt CLASS=literal>$a</tt> but not <tt CLASS=literal>$b</tt>, a copyof <tt CLASS=literal>$$a</tt> is made, and <tt CLASS=literal>$a</tt> is assigned areference to this new object.  This operation is done during execution of the<tt CLASS=literal>$a++</tt>, and not during the assignment, (so before the increment<tt CLASS=literal>$$a</tt> coincides with <tt CLASS=literal>$$b</tt>).  This is onlydone if <tt CLASS=literal>++</tt> is expressed via a method for"<tt CLASS=literal>++</tt>" or "<tt CLASS=literal>+=</tt>".Note that if this operation is expressed via "<tt CLASS=literal>+</tt>" (a nonmutator):<DIV CLASS=programlisting><P><PRE>$a=$b;$a=$a+1;</PRE></DIV><P CLASS=para>then <tt CLASS=literal>$a</tt> does not reference a new copy of <tt CLASS=literal>$$a</tt>, since<tt CLASS=literal>$$a</tt> does notappear as an lvalue when the above code is executed.<P CLASS=para>If the copy constructor is required during the execution of some mutator, but amethod for "<tt CLASS=literal>=</tt>" was not specified, it can beautogenerated as a string copy if the object is a plain scalar.<P CLASS=para>As an example, the actually executed code for:<DIV CLASS=programlisting><P><PRE>$a=$b;# Something else which does not modify $a or $b...++$a;</PRE></DIV><P CLASS=para>may be:<DIV CLASS=programlisting><P><PRE>$a=$b;# Something else which does not modify $a or $b...$a = $a-&gt;clone(undef, "");$a-&gt;incr(undef, "");</PRE></DIV><P CLASS=para>This assumes <tt CLASS=literal>$b</tt> is subject to overloading,"<tt CLASS=literal>++</tt>" was overloaded with<tt CLASS=literal>\&amp;incr</tt>, and "<tt CLASS=literal>=</tt>" wasoverloaded with <tt CLASS=literal>\&amp;clone</tt>.</DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.60">Autogeneration</A></h4><P CLASS=para>If a method for an operation is not found, and the value for"<tt CLASS=literal>fallback</tt>" is true or undefined, Perl tries toautogenerate a substitute method for the missing operation based on the definedoperations.  Autogenerated method substitutions are possible for the followingoperations:<P><DL CLASS=variablelist><DT CLASS=varlistentry><I CLASS=emphasis>Assignment forms of arithmetic operations</I><DD><P CLASS=para><tt CLASS=literal>$a+=$b</tt> can use the method for"<tt CLASS=literal>+</tt>" if the method for"<tt CLASS=literal>+=</tt>" is not defined.<p><DT CLASS=varlistentry><I CLASS=emphasis>Conversion operations</I> <DD><P CLASS=para>String, numeric, and Boolean conversion are calculated in terms of oneanother if not all of them are defined.<p><DT CLASS=varlistentry><I CLASS=emphasis>Increment and decrement</I><DD><P CLASS=para>The <tt CLASS=literal>++$a</tt> operation can be expressed in terms of<tt CLASS=literal>$a+=1</tt> or <tt CLASS=literal>$a+1</tt>, and<tt CLASS=literal>$a- -</tt> in terms of <tt CLASS=literal>$a-=1</tt>and <tt CLASS=literal>$a-1</tt>.<p><DT CLASS=varlistentry><tt CLASS=literal>abs($a)</tt><DD><P CLASS=para>Can be expressed in terms of <tt CLASS=literal>$a&lt;0</tt> and <tt CLASS=literal>-$a</tt> (or <tt CLASS=literal>0-$a</tt>).<p><DT CLASS=varlistentry><I CLASS=emphasis>Unary minus</I><DD><P CLASS=para>Can be expressed in terms of subtraction.<p><DT CLASS=varlistentry><I CLASS=emphasis>Concatenation</I><DD><P CLASS=para>Can be expressed in terms of string conversion.<p><DT CLASS=varlistentry><I CLASS=emphasis>Comparison operations</I> <DD><P CLASS=para>Can be expressed in terms of its three-valued counterpart: either<tt CLASS=literal>&lt;=&gt;</tt> or <tt CLASS=literal>cmp</tt>:<DIV CLASS=screen><P><PRE>&lt;,  &gt;,  &lt;=, &gt;=, ==, !=    <I CLASS=emphasis>in terms of </I>&lt;=&gt;lt, gt, le, ge, eq, ne    <I CLASS=emphasis>in terms of </I>cmp</PRE></DIV><p><DT CLASS=varlistentry><I CLASS=emphasis>Copy operator</I><DD><P CLASS=para>Can be expressed in terms of an assignment to the dereferenced value if thisvalue is a scalar and not a reference.</DL><DIV CLASS=warning><P CLASS=warning><BLOCKQUOTE><P><B>WARNING:</B><P CLASS=para>One restriction for the comparison operation is that even if, for example,<tt CLASS=literal>cmp</tt> returns a blessed reference, the autogenerated <tt CLASS=literal>lt</tt>function will produce only a standard logical value based on thenumerical value of the result of <tt CLASS=literal>cmp</tt>.  In particular, a workingnumeric conversion is needed in this case (possibly expressed in terms ofother conversions).<P CLASS=para>Similarly, <tt CLASS=literal>.=</tt>  and <tt CLASS=literal>x=</tt> operators lose their overloadedproperties if the string conversion substitution is applied.<P CLASS=para>When you <A HREF="ch03_02.htm#PERL2-CMD-CHOP">chop</A> an object that is subject to overloaded operations, theobject is promoted to a string and its overloading properties are lost.The same can happen with other operations as well.</blockquote><P></DIV></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.62">Run-time overloading</A></h4><P CLASS=para>Since all <A HREF="ch03_02.htm#PERL2-CMD-USE">use</A> directives are executed at compile-time, the only way tochange overloading during run-time is:<DIV CLASS=programlisting><P><PRE>eval 'use overload "+" =&gt; \&amp;addmethod';</PRE></DIV><P CLASS=para>You can also say:<DIV CLASS=programlisting><P><PRE>eval 'no overload "+", "--", "&lt;="';</PRE></DIV><P CLASS=para>although the use of these constructs during run-time is questionable.</DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.63">Public functions</A></h4><P CLASS=para>The <tt CLASS=literal>overload</tt> module provides the following public functions:<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>overload::StrVal(</tt><tt CLASS=replaceable><i>arg</i></tt><tt CLASS=literal>)</tt><DD><P CLASS=para>Gives string value of <tt CLASS=replaceable><i>arg</i></tt> if stringify overloading is absent.<p><DT CLASS=varlistentry><tt CLASS=literal>overload::Overloaded(</tt><tt CLASS=replaceable><i>arg</i></tt><tt CLASS=literal>)</tt><DD><P CLASS=para>Returns true if <tt CLASS=replaceable><i>arg</i></tt> is subject to overloading of some operations.<p><DT CLASS=varlistentry><tt CLASS=literal>overload::Method(</tt><tt CLASS=replaceable><i>obj</i></tt>, <tt CLASS=replaceable><i>op</i></tt>)<DD><P CLASS=para>Returns the undefined value or a reference to the method that implements<tt CLASS=replaceable><i>op</i></tt>.</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.64">Diagnostics</A></h4><P CLASS=para>When Perl is run with the <tt CLASS=literal>-Do</tt> switch or its equivalent, overloadinginduces diagnostic messages.</DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.0.65">Bugs</A></h4><P CLASS=para>Because it is used for overloading, the per-package associative array<tt CLASS=literal>%OVERLOAD</tt> now has a special meaning in Perl.<P CLASS=para>Overloading is not yet inherited via the <B>@ISA</B> tree, thoughindividual methods may be.</DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.49">POSIX--Perl Interface to IEEE Std 1003.1</A></h3><DIV CLASS=programlisting><P><PRE>use POSIX;                        # import all symbolsuse POSIX qw(setsid);             # import one symboluse POSIX qw(:errno_h :fcntl_h);  # import sets of symbolsprintf "EINTR is %d\n", EINTR;$sess_id = POSIX::setsid();$fd = POSIX::open($path, O_CREAT|O_EXCL|O_WRONLY, 0644);# note: $fd is a filedescriptor, *NOT* a filehandle</PRE></DIV><P CLASS=para><A NAME="CH07.POSIX1"></A>The POSIX module permits you to access all (or nearly all) the standardPOSIX 1003.1 identifiers.  Many of these identifiers have been givenPerl-ish interfaces.<P CLASS=para>This description gives a condensed list of the features available in the POSIXmodule.  Consult your operating system's manpages for general information onmost features.  Consult the appropriate Perl built-in function whenever aPOSIX routine is noted as being identical to the function.<P CLASS=para>The "Classes" section later in this chapter describes some classes for signalobjects, TTY objects, and other miscellaneous objects.  The "Functions" sectionlater in this chapter describes POSIX functions from the 1003.1 specification.The remaining sections list various constants and macros in an organization thatroughly follows IEEE Std 1003.1b-1993.<DIV CLASS=warning><P CLASS=warning><BLOCKQUOTE><P><B>WARNING:</B><P CLASS=para>A few functions are not implemented because they are C-specific.[4]If you attempt to call one of these functions, it will print a messagetelling you that it isn't implemented, and will suggest using the Perlequivalent, should one exist.  For example, trying to access the<tt CLASS=literal>setjmp()</tt> call will elicit the message: "<tt CLASS=literal>setjmp() isC-specific: use eval {} instead</tt>".<blockquote class=footnote><P CLASS=para>[4] The 1003.1 standard wisely recommends that other language bindingsshould avoid duplicating the idiosyncracies of C.  This is something wewere <I CLASS=emphasis>glad</I> to comply with.</blockquote><P CLASS=para>Furthermore, some vendors will claim 1003.1 compliance without passing the POSIXCompliance Test Suites (PCTS).  For example, one vendor may not define<tt CLASS=literal>EDEADLK</tt>, or may incorrectly define the semantics of the<I CLASS=emphasis>errno</I> values set by <I CLASS=emphasis>open</I> (2).Perl does not attempt to verify POSIX compliance.  That means you can currentlysay "<tt CLASS=literal>use POSIX</tt>" successfully, and then later inyour program find that your vendor has been lax and there's no usable<tt CLASS=literal>ICANON</tt> macro after all.  This could be construed to be a bug.Whose bug, we won't venture to guess.</blockquote><P></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.66">Classes</A></h4><P CLASS=para><B>POSIX::SigAction</B><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>new</tt><DD><P CLASS=para>Creates a new POSIX::SigAction object that corresponds to the C<tt CLASS=literal>struct sigaction</tt>.  This object will be destroyed automatically whenit is no longer needed.  The first parameter is the fully qualified name of asubroutine which is a signal handler.  The second parameter is aPOSIX::SigSetobject.  The third parameter contains the <tt CLASS=literal>sa_flags</tt>.<DIV CLASS=programlisting><P><PRE>$sigset = POSIX::SigSet-&gt;new;$sigaction = POSIX::SigAction-&gt;new('main::handler', $sigset,                 &amp;POSIX::SA_NOCLDSTOP);</PRE></DIV><P CLASS=para>This POSIX::SigActionobject should be used with the POSIX::sigaction()function.</DL><P CLASS=para><B>POSIX::SigSet</B><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>new</tt><DD><P CLASS=para>Creates a new SigSet object.This object will be destroyed automaticallywhen it is no longer needed.  Arguments may be supplied to initialize theset. Create an empty set:<DIV CLASS=programlisting><P><PRE>$sigset = POSIX::SigSet-&gt;new;</PRE></DIV><P CLASS=para>Create a set with <tt CLASS=literal>SIGUSR1</tt>:<DIV CLASS=programlisting><P><PRE>$sigset = POSIX::SigSet-&gt;new(&amp;POSIX::SIGUSR1);</PRE></DIV><p><DT CLASS=varlistentry><tt CLASS=literal>addset</tt><DD><P CLASS=para>Adds a signal to a SigSet object.  Returns <A HREF="ch03_02.htm#PERL2-CMD-UNDEF">undef</A> on failure.<DIV CLASS=programlisting><P><PRE>$sigset-&gt;addset(&amp;POSIX::SIGUSR2);</PRE></DIV><p><DT CLASS=varlistentry><tt CLASS=literal>delset</tt><DD><P CLASS=para>Removes a signal from the SigSet object.  Returns <A HREF="ch03_02.htm#PERL2-CMD-UNDEF">undef</A> onfailure.<DIV CLASS=programlisting><P><PRE>$sigset-&gt;delset(&amp;POSIX::SIGUSR2);</PRE></DIV><p><DT CLASS=varlistentry><tt CLASS=literal>emptyset</tt><DD><P CLASS=para>Initializes the SigSet object to be empty.  Returns <A HREF="ch03_02.htm#PERL2-CMD-UNDEF">undef</A> onfailure.<DIV CLASS=programlisting><P><PRE>$sigset-&gt;emptyset();</PRE></DIV><p><DT CLASS=varlistentry><tt CLASS=literal>fillset</tt><DD><P CLASS=para>Initializes the SigSet object to include all signals.Returns <A HREF="ch03_02.htm#PERL2-CMD-UNDEF">undef</A> on failure.<DIV CLASS=programlisting><P><PRE>$sigset-&gt;fillset();</PRE></DIV><p><DT CLASS=varlistentry><tt CLASS=literal>ismember</tt><DD><P CLASS=para>Tests the SigSet object to see whether it contains a specific signal.<DIV CLASS=programlisting><P><PRE>if ($sigset-&gt;ismember(&amp;POSIX::SIGUSR1 ) ){    print "contains SIGUSR1\n";}</PRE></DIV></DL><P CLASS=para><B>POSIX::Termios</B><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>new</tt><DD><P CLASS=para>Creates a new Termios object.  This object will be destroyed automaticallywhen it is no longer needed.<DIV CLASS=programlisting><P><PRE>$termios = POSIX::Termios-&gt;new;</PRE></DIV><p><DT CLASS=varlistentry><tt CLASS=literal>getattr</tt><DD><P CLASS=para>Gets terminal control attributes for a given <I CLASS=emphasis>fd</I>, 0 by default.Returns <A HREF="ch03_02.htm#PERL2-CMD-UNDEF">undef</A> on failure.Obtain the attributes for standard input:<DIV CLASS=programlisting><P><PRE>$termios-&gt;getattr()</PRE></DIV><P CLASS=para>Obtain the attributes for standard output:<DIV CLASS=programlisting><P><PRE>$termios-&gt;getattr(1)</PRE></DIV><DT CLASS=varlistentry><tt CLASS=literal>getcc</tt><DD><P CLASS=para>Retrieves a value from the <tt CLASS=literal>c_cc</tt> field of a Termios object.The <tt CLASS=literal>c_cc</tt> field is an array, so an index must be specified.<DIV CLASS=programlisting><P><PRE>$c_cc[1] = $termios-&gt;getcc(&amp;POSIX::VEOF);</PRE></DIV><p><DT CLASS=varlistentry><tt CLASS=literal>getcflag</tt><DD><P CLASS=para>Retrieves the <tt CLASS=literal>c_cflag</tt> field of a Termios object.<DIV CLASS=programlisting><P><PRE>$c_cflag = $termios-&gt;getcflag;</PRE></DIV><p><DT CLASS=varlistentry><tt CLASS=literal>getiflag</tt><DD><P CLASS=para>Retrieves the <tt CLASS=literal>c_iflag</tt> field of a Termios object.<DIV CLASS=programlisting><P><PRE>$c_iflag = $termios-&gt;getiflag;</PRE></DIV><p><DT CLASS=varlistentry><tt CLASS=literal>getispeed</tt><DD><P CLASS=para>Retrieves the input baud rate.<DIV CLASS=programlisting><P><PRE>$ispeed = $termios-&gt;getispeed;</PRE></DIV><p><DT CLASS=varlistentry><tt CLASS=literal>getlflag</tt><DD><P CLASS=para>Retrieves the <tt CLASS=literal>c_lflag</tt> field of a Termios object.<DIV CLASS=programlisting><P><PRE>$c_lflag = $termios-&gt;getlflag;</PRE></DIV><p><DT CLASS=varlistentry><tt CLASS=literal>getoflag</tt><DD><P CLASS=para>Retrieves the <tt CLASS=literal>c_oflag</tt> field of a Termios object.<DIV CLASS=programlisting><P><PRE>$c_oflag = $termios-&gt;getoflag;</PRE></DIV><p><DT CLASS=varlistentry><tt CLASS=literal>getospeed</tt><DD><P CLASS=para>Retrieves the output baud rate.<DIV CLASS=programlisting><P><PRE>$ospeed = $termios-&gt;getospeed;</PRE></DIV><p><DT CLASS=varlistentry><tt CLASS=literal>setattr</tt><DD><P CLASS=para>Sets terminal control attributes for a given <I CLASS=emphasis>fd</I>.  Returns<A HREF="ch03_02.htm#PERL2-CMD-UNDEF">undef</A> on failure.  The following sets attributes immediately forstandard output.<DIV CLASS=programlisting><P><PRE>$termios-&gt;setattr(1, &amp;POSIX::TCSANOW);</PRE></DIV><p><DT CLASS=varlistentry><tt CLASS=literal>setcc</tt><DD><P CLASS=para>Sets a value in the <tt CLASS=literal>c_cc</tt> field of a Termios object.The <tt CLASS=literal>c_cc</tt> field is an array, so an index must be specified.<DIV CLASS=programlisting><P><PRE>$termios-&gt;setcc(&amp;POSIX::VEOF, 4);</PRE></DIV><p><DT CLASS=varlistentry><tt CLASS=literal>setcflag</tt><DD><P CLASS=para>Sets the <tt CLASS=literal>c_cflag</tt> field of a Termios object.<DIV CLASS=programlisting><P><PRE>$termios-&gt;setcflag(&amp;POSIX::CLOCAL);</PRE></DIV><p><DT CLASS=varlistentry><tt CLASS=literal>setiflag</tt><DD><P CLASS=para>Sets the <tt CLASS=literal>c_iflag</tt> field of a Termios object.<DIV CLASS=programlisting><P><PRE>$termios-&gt;setiflag(&amp;POSIX::BRKINT);</PRE></DIV><p><DT CLASS=varlistentry><tt CLASS=literal>setispeed</tt><DD><P CLASS=para>Sets the input baud rate.  Returns <A HREF="ch03_02.htm#PERL2-CMD-UNDEF">undef</A> on failure.<DIV CLASS=programlisting><P><PRE>$termios-&gt;setispeed(&amp;POSIX::B9600);</PRE></DIV><p><DT CLASS=varlistentry><tt CLASS=literal>setlflag</tt><DD><P CLASS=para>Sets the <tt CLASS=literal>c_lflag</tt> field of a Termios object.<DIV CLASS=programlisting><P><PRE>$termios-&gt;setlflag(&amp;POSIX::ECHO);</PRE></DIV><p><DT CLASS=varlistentry><tt CLASS=literal>setoflag</tt><DD><P CLASS=para>Set the <tt CLASS=literal>c_oflag</tt> field of a Termios object.<DIV CLASS=programlisting><P><PRE>$termios-&gt;setoflag(&amp;POSIX::OPOST);</PRE></DIV><p><DT CLASS=varlistentry><tt CLASS=literal>setospeed</tt><DD><P CLASS=para>Sets the output baud rate.  Returns <A HREF="ch03_02.htm#PERL2-CMD-UNDEF">undef</A> on failure.<DIV CLASS=programlisting><P><PRE>$termios-&gt;setospeed(&amp;POSIX::B9600);</PRE></DIV><p><DT CLASS=varlistentry>Baud rate values<DD><P CLASS=para><tt CLASS=literal>B0 B50 B75 B110 B134 B150 B200 B300 B600 B1200 B1800 B2400 B4800 B9600B19200 B38400</tt><p><DT CLASS=varlistentry>Terminal interface values<DD><P CLASS=para><tt CLASS=literal>TCSADRAIN TCSANOW TCOON TCIOFLUSH TCOFLUSH TCION TCIFLUSH TCSAFLUSHTCIOFF TCOOFF</tt><p><DT CLASS=varlistentry><tt CLASS=literal>c_cc</tt> index values<DD><P CLASS=para><tt CLASS=literal>VEOF VEOL VERASE VINTR VKILL VQUIT VSUSP VSTART VSTOP VMIN VTIME NCCS</tt><p><DT CLASS=varlistentry><tt CLASS=literal>c_cflag</tt> field values<DD><P CLASS=para><tt CLASS=literal>CLOCAL CREAD CSIZE CS5 CS6 CS7 CS8 CSTOPB HUPCL PARENB PARODD</tt><p><DT CLASS=varlistentry><tt CLASS=literal>c_iflag</tt> field values<DD><P CLASS=para><tt CLASS=literal>BRKINT ICRNL IGNBRK IGNCR IGNPAR INLCR INPCK ISTRIP IXOFF IXON PARMRK</tt><p><DT CLASS=varlistentry><tt CLASS=literal>c_lflag</tt> field values<DD><P CLASS=para><tt CLASS=literal>ECHO ECHOE ECHOK ECHONL ICANON IEXTEN ISIG NOFLSH TOSTOP</tt><p><DT CLASS=varlistentry><tt CLASS=literal>c_oflag</tt> field values<DD><P CLASS=para><tt CLASS=literal>OPOST</tt></DL><P CLASS=para>While these constants are associated with the Termios class, note that they areactually symbols in the POSIX package. <P CLASS=para>Here's an example of a complete programfor getting unbuffered, single-character input on a POSIX system:<DIV CLASS=programlisting><P><PRE>#!/usr/bin/perl -wuse strict;$| = 1;for (1..4) {    my $got;    print "gimme: ";    $got = getone();    print "--&gt; $got\n";}exit;BEGIN {    use POSIX qw(:termios_h);    my ($term, $oterm, $echo, $noecho, $fd_stdin);    $fd_stdin = fileno(STDIN);    $term     = POSIX::Termios-&gt;new();    $term-&gt;getattr($fd_stdin);    $oterm    = $term-&gt;getlflag();    $echo     = ECHO | ECHOK | ICANON;    $noecho   = $oterm &amp; ~$echo;    sub cbreak {        $term-&gt;setlflag($noecho);        $term-&gt;setcc(VTIME, 1);        $term-&gt;setattr($fd_stdin, TCSANOW);    }    sub cooked {        $term-&gt;setlflag($oterm);        $term-&gt;setcc(VTIME, 0);        $term-&gt;setattr($fd_stdin, TCSANOW);    }    sub getone {        my $key = "";        cbreak();        sysread(STDIN, $key, 1);        cooked();        return $key;    }}END { cooked() }</PRE></DIV></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.67">Functions</A></h4><A NAME="CH07.POSIX2"></A><P><DIV CLASS=table><TABLE><CAPTION><A CLASS="TITLE" NAME="PERL2-CH-7-TAB-16">Table 7-12: Functions</A></CAPTION><TR CLASS=row><TH ALIGN="left">Function Name</TH><TH ALIGN="LEFT">Definition</TH></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>_exit</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to the C function <I CLASS=emphasis>_exit</I> (2).</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>abort</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to the C function <I CLASS=emphasis>abort</I> (3).</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>abs</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-ABS">abs</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>access</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Determines the accessibility of a file.  Returns <A HREF="ch03_02.htm#PERL2-CMD-UNDEF">undef</A> on failure.<DIV CLASS=programlisting><P><PRE>if (POSIX::access("/", &amp;POSIX::R_OK ) ){    print "have read permission\n";}</PRE></DIV></TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>acos</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to the C function <I CLASS=emphasis>acos</I> (3).</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>alarm</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-ALARM">alarm</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>asctime</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to the C function <I CLASS=emphasis>asctime</I> (3).</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>asin</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to the C function <I CLASS=emphasis>asin</I> (3).</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>assert</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Similar to C macro <I CLASS=emphasis>assert</I> (3).</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>atan</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to the C function <I CLASS=emphasis>atan</I> (3).</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>atan2</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-ATAN2">atan2</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>atexit</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific: use <tt CLASS=literal>END {}</tt> instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>atof</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>atoi</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>atol</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>bsearch</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Not supplied.  You should probably be using a hash anyway.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>calloc</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>ceil</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to the C function <I CLASS=emphasis>ceil</I> (3).</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>chdir</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-CHDIR">chdir</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>chmod</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-CHMOD">chmod</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>chown</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-CHOWN">chown</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>clearerr</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Use method <tt CLASS=literal>FileHandle::clearerr()</tt> instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>clock</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to the C function <I CLASS=emphasis>clock</I> (3).</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>close</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Closes a file.  This uses file descriptors such as those obtained by calling<tt CLASS=literal>POSIX::open()</tt>.  Returns <A HREF="ch03_02.htm#PERL2-CMD-UNDEF">undef</A> on failure.<DIV CLASS=programlisting><P><PRE>$fd = POSIX::open("foo", &amp;POSIX::O_RDONLY);POSIX::close($fd);</PRE></DIV></TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>closedir</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-CLOSEDIR">closedir</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>cos</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-COS">cos</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>cosh</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to the C function <I CLASS=emphasis>cosh</I> (3).</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>creat</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Creates a new file.  This returns a file descriptor like the ones returned by<tt CLASS=literal>POSIX::open()</tt>.  Use <tt CLASS=literal>POSIX::close()</tt> to close the file.<DIV CLASS=programlisting><P><PRE>$fd = POSIX::creat("foo", 0611);POSIX::close($fd);</PRE></DIV></TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>ctermid</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Generates the path name for the controlling terminal.<DIV CLASS=programlisting><P><PRE>$path = POSIX::ctermid();</PRE></DIV></TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>ctime</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to the C function <I CLASS=emphasis>ctime</I> (3)</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>cuserid</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Gets the character login name of the user.<DIV CLASS=programlisting><P><PRE>$name = POSIX::cuserid();</PRE></DIV></TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>difftime</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to the C function <I CLASS=emphasis>difftime</I> (3).</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>div</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>dup</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Similar to the C function <I CLASS=emphasis>dup</I> (2).Uses file descriptors such as those obtained by calling<tt CLASS=literal>POSIX::open()</tt>.  Returns <A HREF="ch03_02.htm#PERL2-CMD-UNDEF">undef</A> on failure.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>dup2</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Similar to the C function <I CLASS=emphasis>dup2</I> (2).Uses file descriptors such as those obtained by calling<tt CLASS=literal>POSIX::open()</tt>.  Returns <A HREF="ch03_02.htm#PERL2-CMD-UNDEF">undef</A> on failure.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>errno</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Returns the value of <I CLASS=emphasis>errno</I>.<DIV CLASS=programlisting><P><PRE>$errno = POSIX::errno();</PRE></DIV></TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>execl</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific; use Perl's <A HREF="ch03_02.htm#PERL2-CMD-EXEC">exec</A> instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>execle</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific; use Perl's <A HREF="ch03_02.htm#PERL2-CMD-EXEC">exec</A> instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>execlp</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific; use Perl's <A HREF="ch03_02.htm#PERL2-CMD-EXEC">exec</A> instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>execv</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific; use Perl's <A HREF="ch03_02.htm#PERL2-CMD-EXEC">exec</A> instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>execve</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific; use Perl's <A HREF="ch03_02.htm#PERL2-CMD-EXEC">exec</A> instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>execvp</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific; use Perl's <A HREF="ch03_02.htm#PERL2-CMD-EXEC">exec</A> instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>exit</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-EXIT">exit</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>exp</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-EXP">exp</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>fabs</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-ABS">abs</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>fclose</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Use method <tt CLASS=literal>FileHandle::close()</tt> instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>fcntl</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-FCNTL">fcntl</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>fdopen</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Use method <tt CLASS=literal>FileHandle::new_from_fd()</tt> instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>feof</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Use method <tt CLASS=literal>FileHandle::eof()</tt> instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>ferror</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Use method <tt CLASS=literal>FileHandle::error()</tt> instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>fflush</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Use method <tt CLASS=literal>FileHandle::flush()</tt> instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>fgetc</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Use method <tt CLASS=literal>FileHandle::getc()</tt> instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>fgetpos</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Use method <tt CLASS=literal>FileHandle::getpos()</tt> instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>fgets</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Use method <tt CLASS=literal>FileHandle::gets()</tt> instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>fileno</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Use method <tt CLASS=literal>FileHandle::fileno()</tt> instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>floor</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to the C function <I CLASS=emphasis>floor</I> (3).</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>fmod</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to the C function <I CLASS=emphasis>fmod</I> (3).</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>fopen</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Use method <tt CLASS=literal>FileHandle::open()</tt> instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>fork</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-FORK">fork</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>fpathconf</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Retrieves the value of a configurable limit on a file or directory.  Thisuses file descriptors such as those obtained by calling <tt CLASS=literal>POSIX::open()</tt>.Returns <A HREF="ch03_02.htm#PERL2-CMD-UNDEF">undef</A> on failure. The following will determine the maximum length of the longest allowablepathname on the filesystem that holds <I CLASS=emphasis>/tmp/foo</I>.<DIV CLASS=programlisting><P><PRE>$fd = POSIX::open("/tmp/foo", &amp;POSIX::O_RDONLY);$path_max = POSIX::fpathconf($fd, &amp;POSIX::_PC_PATH_MAX);</PRE></DIV></TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>fprintf</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific; use Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-PRINTF">printf</A> function instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>fputc</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific; use Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-PRINT">print</A> function instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>fputs</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific; use Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-PRINT">print</A> function instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>fread</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific; use Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-READ">read</A> function instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>free</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>freopen</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific; use Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-OPEN">open</A> function instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>frexp</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Returns the mantissa and exponent of a floating-point number.<DIV CLASS=programlisting><P><PRE>($mantissa, $exponent) = POSIX::frexp(3.14);</PRE></DIV></TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>fscanf</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific; use <tt CLASS=literal>&lt;&gt;</tt> and regular expressions instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>fseek</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Use method <tt CLASS=literal>FileHandle::seek()</tt> instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>fsetpos</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Use method <tt CLASS=literal>FileHandle::setpos()</tt> instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>fstat</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Gets file status.  This uses file descriptors such as those obtained bycalling <tt CLASS=literal>POSIX::open()</tt>.  The data returned is identical to the data fromPerl's built-in <A HREF="ch03_02.htm#PERL2-CMD-STAT">stat</A> function.  Odd how that happens...<DIV CLASS=programlisting><P><PRE>$fd = POSIX::open("foo", &amp;POSIX::O_RDONLY);@stats = POSIX::fstat($fd);</PRE></DIV></TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>ftell</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Use method <tt CLASS=literal>FileHandle::tell()</tt> instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>fwrite</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific; use Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-PRINT">print</A> function instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>getc</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-GETC">getc</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>getchar</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Returns one character from <tt CLASS=literal>STDIN</tt>.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>getcwd</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Returns the name of the current working directory.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>getegid</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Returns the effective group ID (gid).</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>getenv</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Returns the value of the specified environment variable.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>geteuid</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Returns the effective user ID (uid).</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>getgid</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Returns the user's real group ID (gid).</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>getgrgid</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-GETGRGID">getgrgid</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>getgrnam</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-GETGRNAM">getgrnam</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>getgroups</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Returns the ids of the user's supplementary groups.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>getlogin</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-GETLOGIN">getlogin</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>getpgrp</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-GETPGRP">getpgrp</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>getpid</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Returns the process's ID (pid).</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>getppid</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-GETPPID">getppid</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>getpwnam</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-GETPWNAM">getpwnam</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>getpwuid</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-GETPWUID">getpwuid</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>gets</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Returns one line from <tt CLASS=literal>STDIN</tt>.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>getuid</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Returns the user's ID (uid).</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>gmtime</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-GMTIME">gmtime</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>isalnum</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to the C function, except that it can apply to a singlecharacter or to a whole string.  (If applied to a whole string, all charactersmust be of the indicated category.)</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>isalpha</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to the C function, except that it can apply to a singlecharacter or to a whole string.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>isatty</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Returns a Boolean indicating whether the specified filehandle is connectedto a TTY.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>iscntrl</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to the C function, except that it can apply to a singlecharacter or to a whole string.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>isdigit</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to the C function, except that it can apply to a singlecharacter or to a whole string.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>isgraph</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to the C function, except that it can apply to a singlecharacter or to a whole string.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>islower</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to the C function, except that it can apply to a singlecharacter or to a whole string.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>isprint</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to the C function, except that it can apply to a singlecharacter or to a whole string.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>ispunct</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to the C function, except that it can apply to a singlecharacter or to a whole string.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>isspace</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to the C function, except that it can apply to a singlecharacter or to a whole string.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>isupper</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to the C function, except that it can apply to a singlecharacter or to a whole string.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>isxdigit</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to the C function, except that it can apply to a singlecharacter or to a whole string.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>kill</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-KILL">kill</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>labs</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific; use Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-ABS">abs</A> function instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>ldexp</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to the C function <I CLASS=emphasis>ldexp</I> (3).</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>ldiv</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific; use the division operator <tt CLASS=literal>/</tt> and Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-INT">int</A>function instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>link</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-LINK">link</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>localeconv</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Gets numeric formatting information.  Returns a reference to a hashcontaining the current locale formatting values.The database for the <tt CLASS=literal>de</tt> (Deutsch or German) locale:</TD></TR><TR CLASS=row><TD ALIGN="left">&nbsp;</TD><TD ALIGN="LEFT"><P CLASS=para><DIV CLASS=programlisting><P><PRE>$loc = POSIX::setlocale(&amp;POSIX::LC_ALL, "de");print "Locale = $loc\n";$lconv = POSIX::localeconv();print "decimal_point     = ", $lconv-&gt;{decimal_point},     "\n";print "thousands_sep     = ", $lconv-&gt;{thousands_sep},     "\n";print "grouping          = ", $lconv-&gt;{grouping},          "\n";print "int_curr_symbol   = ", $lconv-&gt;{int_curr_symbol},   "\n";print "currency_symbol   = ", $lconv-&gt;{currency_symbol},   "\n";print "mon_decimal_point = ", $lconv-&gt;{mon_decimal_point}, "\n";print "mon_thousands_sep = ", $lconv-&gt;{mon_thousands_sep}, "\n";print "mon_grouping      = ", $lconv-&gt;{mon_grouping},      "\n";print "positive_sign     = ", $lconv-&gt;{positive_sign},     "\n";print "negative_sign     = ", $lconv-&gt;{negative_sign},     "\n";</PRE></DIV></TD></TR><TR CLASS=row><TD ALIGN="left">&nbsp;</TD><TD ALIGN="LEFT"><P CLASS=para><DIV CLASS=programlisting><P><PRE>print "int_frac_digits   = ", $lconv-&gt;{int_frac_digits},   "\n";print "frac_digits       = ", $lconv-&gt;{frac_digits},       "\n";print "p_cs_precedes     = ", $lconv-&gt;{p_cs_precedes},     "\n";print "p_sep_by_space    = ", $lconv-&gt;{p_sep_by_space},    "\n";print "n_cs_precedes     = ", $lconv-&gt;{n_cs_precedes},     "\n";print "n_sep_by_space    = ", $lconv-&gt;{n_sep_by_space},    "\n";print "p_sign_posn       = ", $lconv-&gt;{p_sign_posn},       "\n";print "n_sign_posn       = ", $lconv-&gt;{n_sign_posn},       "\n";</PRE></DIV></TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>localtime</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-LOCALTIME">localtime</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>log</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-LOG">log</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>log10</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to the C function <I CLASS=emphasis>log10</I> (3).</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>longjmp</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific; use Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-DIE">die</A> function instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>lseek</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Moves the read/write file pointer.  This uses file descriptors such asthose obtained by calling <tt CLASS=literal>POSIX::open()</tt>.<DIV CLASS=programlisting><P><PRE>$fd = POSIX::open("foo", &amp;POSIX::O_RDONLY);$off_t = POSIX::lseek($fd, 0, &amp;POSIX::SEEK_SET);</PRE></DIV>Returns <A HREF="ch03_02.htm#PERL2-CMD-UNDEF">undef</A> on failure.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>malloc</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>mblen</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to the C function <I CLASS=emphasis>mblen</I> (3).</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>mbstowcs</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to the C function <I CLASS=emphasis>mbstowcs</I> (3).</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>mbtowc</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to the C function <I CLASS=emphasis>mbtowc</I> (3).</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>memchr</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific; use Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-INDEX">index</A> instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>memcmp</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific; use <B>eq</B> instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>memcpy</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific; use <B>=</B> instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>memmove</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific; use <B>=</B> instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>memset</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific; use <B>x</B> instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>mkdir</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-MKDIR">mkdir</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>mkfifo</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Similar to the C function <I CLASS=emphasis>mkfifo</I> (2).Returns <A HREF="ch03_02.htm#PERL2-CMD-UNDEF">undef</A> on failure.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>mktime</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Converts date/time information to a calendar time.  Returns <A HREF="ch03_02.htm#PERL2-CMD-UNDEF">undef</A> on failure.Synopsis:</TD></TR><TR CLASS=row><TD ALIGN="left">&nbsp;</TD><TD ALIGN="LEFT"><P CLASS=para><DIV CLASS=programlisting><P><PRE>mktime(<tt CLASS=replaceable><i>sec</i></tt>, <tt CLASS=replaceable><i>min</i></tt>, <tt CLASS=replaceable><i>hour</i></tt>, <tt CLASS=replaceable><i>mday</i></tt>, <tt CLASS=replaceable><i>mon</i></tt>, <tt CLASS=replaceable><i>year</i></tt>, <tt CLASS=replaceable><i>wday</i></tt> = 0,                                     <tt CLASS=replaceable><i>yday</i></tt> = 0, <tt CLASS=replaceable><i>isdst</i></tt> = 0)</PRE></DIV></TD></TR><TR CLASS=row><TD ALIGN="left">&nbsp;</TD><TD ALIGN="LEFT"><P CLASS=para>The month (<tt CLASS=replaceable><i>mon</i></tt>), weekday (<tt CLASS=replaceable><i>wday</i></tt>), and yearday(<tt CLASS=replaceable><i>yday</i></tt>) begin at zero.That is, January is 0, not 1; Sunday is 0, not 1; January 1st is 0, not 1.  Theyear (<tt CLASS=literal>year</tt>) is given in years since 1900.  That is, the year1995 is 95; theyear 2001 is 101.  Consult your system's <I CLASS=emphasis>mktime</I> (3) manpage for detailsabout these and the other arguments.Calendar time for December 12, 1995, at 10:30 am.</TD></TR><TR CLASS=row><TD ALIGN="left">&nbsp;</TD><TD ALIGN="LEFT"><P CLASS=para><DIV CLASS=programlisting><P><PRE>$time_t = POSIX::mktime(0, 30, 10, 12, 11, 95);print "Date = ", POSIX::ctime($time_t);</PRE></DIV></TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>modf</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Returns the integral and fractional parts of a floating-point number.<DIV CLASS=programlisting><P><PRE>($fractional, $integral) = POSIX::modf(3.14);</PRE></DIV></TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>nice</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Similar to the C function <I CLASS=emphasis>nice</I> (3).Returns <A HREF="ch03_02.htm#PERL2-CMD-UNDEF">undef</A> on failure.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>offsetof</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>open</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Opens a file for reading or writing.  This returns file descriptors, notPerl filehandles.  Returns <A HREF="ch03_02.htm#PERL2-CMD-UNDEF">undef</A> on failure.Use <tt CLASS=literal>POSIX::close()</tt> to close the file.Open a file read-only:<DIV CLASS=programlisting><P><PRE>$fd = POSIX::open("foo");</PRE></DIV>Open a file for reading and writing:<DIV CLASS=programlisting><P><PRE>$fd = POSIX::open("foo", &amp;POSIX::O_RDWR);</PRE></DIV>Open a file for writing, with truncation:<DIV CLASS=programlisting><P><PRE>$fd = POSIX::open("foo", &amp;POSIX::O_WRONLY | &amp;POSIX::O_TRUNC);</PRE></DIV>Create a new file with mode 0644; set up the file for writing:<DIV CLASS=programlisting><P><PRE>$fd = POSIX::open("foo", &amp;POSIX::O_CREAT | &amp;POSIX::O_WRONLY,         0644);</PRE></DIV></TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>opendir</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Opens a directory for reading.  Returns <A HREF="ch03_02.htm#PERL2-CMD-UNDEF">undef</A> on failure.<DIV CLASS=programlisting><P><PRE>$dir = POSIX::opendir("/tmp");@files = POSIX::readdir($dir);POSIX::closedir($dir);</PRE></DIV></TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>pathconf</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Retrieves the value of a configurable limit on a file or directory.Returns <A HREF="ch03_02.htm#PERL2-CMD-UNDEF">undef</A> on failure.The following will determine the maximum length of the longest allowablepathname on the filesystem that holds <I CLASS=emphasis>/tmp</I>&nbsp;:<DIV CLASS=programlisting><P><PRE>$path_max = POSIX::pathconf("/tmp", &amp;POSIX::_PC_PATH_MAX);</PRE></DIV></TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>pause</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Similar to the C function <I CLASS=emphasis>pause</I> (3).Returns <A HREF="ch03_02.htm#PERL2-CMD-UNDEF">undef</A> on failure.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>perror</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to the C function <I CLASS=emphasis>perror</I> (3).</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>pipe</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Creates an interprocess channel.  Returns file descriptors like thosereturned by <tt CLASS=literal>POSIX::open()</tt>.<DIV CLASS=programlisting><P><PRE>($fd0, $fd1) = POSIX::pipe();POSIX::write($fd0, "hello", 5);POSIX::read($fd1, $buf, 5);</PRE></DIV></TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>pow</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Computes <tt CLASS=literal>$x</tt> raised to the power <tt CLASS=literal>$exponent</tt>.<DIV CLASS=programlisting><P><PRE>$ret = POSIX::pow($x, $exponent);</PRE></DIV></TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>printf</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Prints the specified arguments to <tt CLASS=literal>STDOUT</tt>.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>putc</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific; use Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-PRINT">print</A> function instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>putchar</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific; use Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-PRINT">print</A> function instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>puts</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific; use Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-PRINT">print</A> function instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>qsort</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific; use Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-SORT">sort</A> function instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>raise</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Sends the specified signal to the current process.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>rand</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Non-portable; use Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-RAND">rand</A> function instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>read</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Reads from a file.  This uses file descriptors such as those obtained bycalling <tt CLASS=literal>POSIX::open()</tt>.  If the buffer <tt CLASS=literal>$buf</tt> is not largeenough for the read, then Perl will extend it to make room for the request.Returns <A HREF="ch03_02.htm#PERL2-CMD-UNDEF">undef</A> on failure.<DIV CLASS=programlisting><P><PRE>$fd = POSIX::open("foo", &amp;POSIX::O_RDONLY);$bytes = POSIX::read($fd, $buf, 3);</PRE></DIV></TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>readdir</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-READDIR">readdir</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>realloc</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>remove</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-UNLINK">unlink</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>rename</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-RENAME">rename</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>rewind</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Seeks to the beginning of the file.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>rewinddir</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-REWINDDIR">rewinddir</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>rmdir</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-RMDIR">rmdir</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>scanf</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific; use <tt CLASS=literal>&lt;&gt;</tt> and regular expressions instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>setgid</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Sets the real group id for this process, like assigning to thespecial variable <B>$(</B>.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>setjmp</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific; use <tt CLASS=literal>eval {}</tt> instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>setlocale</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Modifies and queries program's locale.The following will set the traditional UNIX system locale behavior.<DIV CLASS=programlisting><P><PRE>$loc = POSIX::setlocale(&amp;POSIX::LC_ALL, "C");</PRE></DIV></TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>setpgid</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Similar to the C function <I CLASS=emphasis>setpgid</I> (2).Returns <A HREF="ch03_02.htm#PERL2-CMD-UNDEF">undef</A> on failure.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>setsid</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to the C function <I CLASS=emphasis>setsid</I> (8).</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>setuid</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Sets the real user ID for this process, like assigning to thespecial variable <B>$&lt;</B>.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>sigaction</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Detailed signal management.  This uses POSIX::SigAction objects for the<tt CLASS=literal>$action</tt> and <tt CLASS=literal>$oldaction</tt> arguments.  Consult your system's<I CLASS=emphasis>sigaction</I> (3) manpage for details.Returns <A HREF="ch03_02.htm#PERL2-CMD-UNDEF">undef</A> on failure.<DIV CLASS=programlisting><P><PRE>POSIX::sigaction($sig, $action, $oldaction)</PRE></DIV></TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>siglongjmp</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific; use Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-DIE">die</A> function instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>sigpending</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Examine signals that are blocked and pending.  This uses POSIX::SigSetobjects for the <tt CLASS=literal>$sigset</tt> argument.  Consult your system's<I CLASS=emphasis>sigpending</I> (2) manpage for details.Returns <A HREF="ch03_02.htm#PERL2-CMD-UNDEF">undef</A> on failure.<DIV CLASS=programlisting><P><PRE>POSIX::sigpending($sigset)</PRE></DIV></TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>sigprocmask</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Changes and/or examines this process's signal mask.  This usesPOSIX::SigSet objects for the <tt CLASS=literal>$sigset</tt> and <tt CLASS=literal>$oldsigset</tt>arguments.  Consult your system's<I CLASS=emphasis>sig&nbsp;procmask</I> (2) manpage for details.Returns <A HREF="ch03_02.htm#PERL2-CMD-UNDEF">undef</A> on failure.<DIV CLASS=programlisting><P><PRE>POSIX::sigprocmask($how, $sigset, $oldsigset)</PRE></DIV></TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>sigsetjmp</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific; use <tt CLASS=literal>eval {}</tt> instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>sigsuspend</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Install a signal mask and suspend process until signal arrives.  This usesPOSIX::SigSet objects for the <tt CLASS=literal>$signal_mask</tt> argument.Consult your system's <I CLASS=emphasis>sigsuspend</I> (2) manpage for details.Returns <A HREF="ch03_02.htm#PERL2-CMD-UNDEF">undef</A> on failure.<DIV CLASS=programlisting><P><PRE>POSIX::sigsuspend($signal_mask)</PRE></DIV></TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>sin</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-SIN">sin</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>sinh</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to the C function <I CLASS=emphasis>sinh</I> (3).</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>sleep</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-SLEEP">sleep</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>sprintf</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-SPRINTF">sprintf</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>sqrt</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-SQRT">sqrt</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>srand</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-SRAND">srand</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>sscanf</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific; use regular expressions instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>stat</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-STAT">stat</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>strcat</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific; use <tt CLASS=literal>.=</tt> instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>strchr</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific; use <A HREF="ch03_02.htm#PERL2-CMD-INDEX">index</A> instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>strcmp</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific; use <B>eq</B> instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>strcoll</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to the C function <I CLASS=emphasis>strcoll</I> (3).</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>strcpy</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific; use <tt CLASS=literal>=</tt> instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>strcspn</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific; use regular expressions instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>strerror</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Returns the error string for the specified <I CLASS=emphasis>errno</I>.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>strftime</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Converts date and time information to string.  Returns the string.<DIV CLASS=programlisting><P><PRE>strftime(<tt CLASS=replaceable><i>fmt</i></tt>, <tt CLASS=replaceable><i>sec</i></tt>, <tt CLASS=replaceable><i>min</i></tt>, <tt CLASS=replaceable><i>hour</i></tt>, <tt CLASS=replaceable><i>mday</i></tt>, <tt CLASS=replaceable><i>mon</i></tt>, <tt CLASS=replaceable><i>year</i></tt>,             <tt CLASS=replaceable><i>wday</i></tt> = 0, <tt CLASS=replaceable><i>yday</i></tt> = 0, <tt CLASS=replaceable><i>isdst</i></tt> = 0)</PRE></DIV>The month (<tt CLASS=replaceable><i>mon</i></tt>), weekday (<tt CLASS=replaceable><i>wday</i></tt>), and yearday (<tt CLASS=replaceable><i>yday</i></tt>)begin at zero.  That is, January is 0, not 1; Sunday is 0, not 1;January 1st is 0, not 1.  The year (<tt CLASS=replaceable><i>year</i></tt>) is given in years since1900.  That is, the year 1995 is 95; the year 2001 is 101.  Consult yoursystem's <I CLASS=emphasis>strftime</I> (3) manpage for details about these and theother arguments.The string for Tuesday, December 12, 1995:<DIV CLASS=programlisting><P><PRE>$str = POSIX::strftime("%A, %B %d, %Y", 0, 0, 0, 12,                         11, 95, 2);print "$str\n";</PRE></DIV></TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>strlen</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific; use <A HREF="ch03_02.htm#PERL2-CMD-LENGTH">length</A> instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>strncat</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific; use <tt CLASS=literal>.=</tt> and/or <A HREF="ch03_02.htm#PERL2-CMD-SUBSTR">substr</A> instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>strncmp</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific; use <B>eq</B> and/or <A HREF="ch03_02.htm#PERL2-CMD-SUBSTR">substr</A> instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>strncpy</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific; use <tt CLASS=literal>=</tt> and/or <A HREF="ch03_02.htm#PERL2-CMD-SUBSTR">substr</A> instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>strpbrk</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>strrchr</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific; use <A HREF="ch03_02.htm#PERL2-CMD-RINDEX">rindex</A> and/or <A HREF="ch03_02.htm#PERL2-CMD-SUBSTR">substr</A> instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>strspn</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>strstr</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-INDEX">index</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>strtod</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>strtok</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>strtol</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>strtoul</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>strxfrm</tt></TD><TD ALIGN="LEFT"><P CLASS=para>String transformation.  Returns the transformed string.<DIV CLASS=programlisting><P><PRE>$dst = POSIX::strxfrm($src);</PRE></DIV></TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>sysconf</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Retrieves values of system configurable variables.Returns <A HREF="ch03_02.htm#PERL2-CMD-UNDEF">undef</A> on failure.The following will get the machine's clock speed.<DIV CLASS=programlisting><P><PRE>$clock_ticks = POSIX::sysconf(&amp;POSIX::_SC_CLK_TCK);</PRE></DIV></TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>system</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-SYSTEM">system</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>tan</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to the C function <I CLASS=emphasis>tan</I> (3).</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>tanh</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to the C function <I CLASS=emphasis>tanh</I> (3).</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>tcdrain</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Similar to the C function <I CLASS=emphasis>tcdrain</I> (3).Returns <A HREF="ch03_02.htm#PERL2-CMD-UNDEF">undef</A> on failure.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>tcflow</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Similar to the C function <I CLASS=emphasis>tcflow</I> (3).Returns <A HREF="ch03_02.htm#PERL2-CMD-UNDEF">undef</A> on failure.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>tcflush</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Similar to the C function <I CLASS=emphasis>tcflush</I> (3).Returns <A HREF="ch03_02.htm#PERL2-CMD-UNDEF">undef</A> on failure.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>tcgetpgrp</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to the C function <I CLASS=emphasis>tcgetpgrp</I> (3).</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>tcsendbreak</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Similar to the C function <I CLASS=emphasis>tcsendbreak</I> (3).Returns <A HREF="ch03_02.htm#PERL2-CMD-UNDEF">undef</A> on failure.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>tcsetpgrp</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Similar to the C function <I CLASS=emphasis>tcsetpgrp</I> (3).Returns <A HREF="ch03_02.htm#PERL2-CMD-UNDEF">undef</A> on failure.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>time</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-TIME">time</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>times</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Returns elapsed realtime since some point in the past(such as system startup), user and system times for this process, and userand system times for child processes.  All times are returned in clockticks.<DIV CLASS=programlisting><P><PRE>($realtime, $user, $system, $cuser, $csystem) = POSIX::times();</PRE></DIV>Note: Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-TIMES">times</A> function returns four values, measured inseconds.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>tmpfile</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Use method <tt CLASS=literal>FileHandle::new_tmpfile()</tt> instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>tmpnam</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Returns a name for a temporary file.<DIV CLASS=programlisting><P><PRE>$tmpfile = POSIX::tmpnam();</PRE></DIV></TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>tolower</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-LC">lc</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>toupper</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-UC">uc</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>ttyname</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to the C function <I CLASS=emphasis>ttyname</I> (3).</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>tzname</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Retrieves the time conversion information from the <tt CLASS=literal>tzname</tt> variable.<DIV CLASS=programlisting><P><PRE>POSIX::tzset();($std, $dst) = POSIX::tzname();</PRE></DIV></TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>tzset</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to the C function <I CLASS=emphasis>tzset</I> (3).</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>umask</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-UMASK">umask</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>uname</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Gets name of current operating system.<DIV CLASS=programlisting><P><PRE>($sysname, $nodename, $release,      $version, $machine) = POSIX::uname();</PRE></DIV></TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>ungetc</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Use method <tt CLASS=literal>FileHandle::ungetc()</tt> instead.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>unlink</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-UNLINK">unlink</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>utime</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-UTIME">utime</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>vfprintf</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>vprintf</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>vsprintf</tt></TD><TD ALIGN="LEFT"><P CLASS=para>C-specific.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>wait</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-WAIT">wait</A> function.</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>waitpid</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Wait for a child process to change state.  This is identical to Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-WAITPID">waitpid</A> function.<DIV CLASS=programlisting><P><PRE>$pid = POSIX::waitpid(-1, &amp;POSIX::WNOHANG);print "status = ", ($? / 256), "\n";</PRE></DIV></TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>wcstombs</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to the C function <I CLASS=emphasis>wcstombs</I> (3).</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>wctomb</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Identical to the C function <I CLASS=emphasis>wctomb</I> (3).</TD></TR><TR CLASS=row><TD ALIGN="left"><tt CLASS=literal>write</tt></TD><TD ALIGN="LEFT"><P CLASS=para>Writes to a file.  Uses file descriptors such as those obtained bycalling <tt CLASS=literal>POSIX::open()</tt>.  Returns <A HREF="ch03_02.htm#PERL2-CMD-UNDEF">undef</A> on failure.<DIV CLASS=programlisting><P><PRE>$fd = POSIX::open("foo", &amp;POSIX::O_WRONLY);$buf = "hello";$bytes = POSIX::write($b, $buf, 5);</PRE></DIV></TD></TR></TABLE><P></DIV></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.68">Pathname constants</A></h4><tt CLASS=literal>_PC_CHOWN_RESTRICTED</tt>, <tt CLASS=literal>_PC_LINK_MAX</tt>, <tt CLASS=literal>_PC_MAX_CANON</tt>, <tt CLASS=literal>_PC_MAX_INPUT</tt>, <tt CLASS=literal>_PC_NAME_MAX</tt>, <tt CLASS=literal>_PC_NO_TRUNC</tt>, <tt CLASS=literal>_PC_PATH_MAX</tt>, <tt CLASS=literal>_PC_PIPE_BUF</tt>, and <tt CLASS=literal>_PC_VDISABLE</tt></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.69">POSIX constants</A></h4><tt CLASS=literal>_POSIX_ARG_MAX</tt>, <tt CLASS=literal>_POSIX_CHILD_MAX</tt>, <tt CLASS=literal>_POSIX_CHOWN_RESTRICTED</tt>, <tt CLASS=literal>_POSIX_JOB_CONTROL</tt>, <tt CLASS=literal>_POSIX_LINK_MAX</tt>, <tt CLASS=literal>_POSIX_MAX_CANON</tt>, <tt CLASS=literal>_POSIX_MAX_INPUT</tt>, <tt CLASS=literal>_POSIX_NAME_MAX</tt>, <tt CLASS=literal>_POSIX_NGROUPS_MAX</tt>, <tt CLASS=literal>_POSIX_NO_TRUNC</tt>, <tt CLASS=literal>_POSIX_OPEN_MAX</tt>, <tt CLASS=literal>_POSIX_PATH_MAX</tt>, <tt CLASS=literal>_POSIX_PIPE_BUF</tt>, <tt CLASS=literal>_POSIX_SAVED_IDS</tt>, <tt CLASS=literal>_POSIX_SSIZE_MAX</tt>, <tt CLASS=literal>_POSIX_STREAM_MAX</tt>, <tt CLASS=literal>_POSIX_TZNAME_MAX</tt>, <tt CLASS=literal>_POSIX_VDISABLE</tt>, and <tt CLASS=literal>_POSIX_VERSION</tt></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.70">System configuration</A></h4><tt CLASS=literal>_SC_ARG_MAX</tt>, <tt CLASS=literal>_SC_CHILD_MAX</tt>, <tt CLASS=literal>_SC_CLK_TCK</tt>, <tt CLASS=literal>_SC_JOB_CONTROL</tt>, <tt CLASS=literal>_SC_NGROUPS_MAX</tt>, <tt CLASS=literal>_SC_OPEN_MAX</tt>, <tt CLASS=literal>_SC_SAVED_IDS</tt>, <tt CLASS=literal>_SC_STREAM_MAX</tt>, <tt CLASS=literal>_SC_TZNAME_MAX</tt>, and <tt CLASS=literal>_SC_VERSION</tt></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.71">Error constants</A></h4><tt CLASS=literal>E2BIG</tt>, <tt CLASS=literal>EACCES</tt>, <tt CLASS=literal>EAGAIN</tt>, <tt CLASS=literal>EBADF</tt>, <tt CLASS=literal>EBUSY</tt>, <tt CLASS=literal>ECHILD</tt>, <tt CLASS=literal>EDEADLK</tt>, <tt CLASS=literal>EDOM</tt>, <tt CLASS=literal>EEXIST</tt>, <tt CLASS=literal>EFAUL</tt>, <tt CLASS=literal>EFBIG</tt>, <tt CLASS=literal>EINTR</tt>, <tt CLASS=literal>EINVAL</tt>, <tt CLASS=literal>EIO</tt>, <tt CLASS=literal>EISDIR</tt>, <tt CLASS=literal>EMFILE</tt>, <tt CLASS=literal>EMLINK</tt>, <tt CLASS=literal>ENAMETOOLONG</tt>, <tt CLASS=literal>ENFILE</tt>, <tt CLASS=literal>ENODE</tt>, <tt CLASS=literal>ENOENT</tt>, <tt CLASS=literal>ENOEXEC</tt>, <tt CLASS=literal>ENOLCK</tt>, <tt CLASS=literal>ENOMEM</tt>, <tt CLASS=literal>ENOSPC</tt>, <tt CLASS=literal>ENOSYS</tt>, <tt CLASS=literal>ENOTDIR</tt>, <tt CLASS=literal>ENOTEMPTY</tt>, <tt CLASS=literal>ENOTTY</tt>, <tt CLASS=literal>ENXIO</tt>, <tt CLASS=literal>EPERM</tt>, <tt CLASS=literal>EPIPE</tt>, <tt CLASS=literal>ERANGE</tt>, <tt CLASS=literal>EROFS</tt>, <tt CLASS=literal>ESPIPE</tt>, <tt CLASS=literal>ESRCH</tt>, and <tt CLASS=literal>EXDEV</tt></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.72">File control constants</A></h4><tt CLASS=literal>FD_CLOEXEC</tt>, <tt CLASS=literal>F_DUPFD</tt>, <tt CLASS=literal>F_GETFD</tt>, <tt CLASS=literal>F_GETFL</tt>, <tt CLASS=literal>F_GETLK</tt>, <tt CLASS=literal>F_OK</tt>, <tt CLASS=literal>F_RDLCK</tt>, <tt CLASS=literal>F_SETFD</tt>, <tt CLASS=literal>F_SETFL</tt>, <tt CLASS=literal>F_SETLK</tt>, <tt CLASS=literal>F_SETLKW</tt>, <tt CLASS=literal>F_UNLCK</tt>, <tt CLASS=literal>F_WRLCK</tt>, <tt CLASS=literal>O_ACCMODE</tt>, <tt CLASS=literal>O_APPEND</tt>, <tt CLASS=literal>O_CREAT</tt>, <tt CLASS=literal>O_EXCL</tt>, <tt CLASS=literal>O_NOCTTY</tt>, <tt CLASS=literal>O_NONBLOCK</tt>, <tt CLASS=literal>O_RDONLY</tt>, <tt CLASS=literal>O_RDWR</tt>, <tt CLASS=literal>O_TRUNC</tt>, and <tt CLASS=literal>O_WRONLY</tt></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.73">Floating-point constants</A></h4><tt CLASS=literal>DBL_DIG</tt>, <tt CLASS=literal>DBL_EPSILON</tt>, <tt CLASS=literal>DBL_MANT_DIG</tt>, <tt CLASS=literal>DBL_MAX</tt>, <tt CLASS=literal>DBL_MAX_10_EXP</tt>, <tt CLASS=literal>DBL_MAX_EXP</tt>, <tt CLASS=literal>DBL_MIN</tt>, <tt CLASS=literal>DBL_MIN_10_EXP</tt>, <tt CLASS=literal>DBL_MIN_EXP</tt>, <tt CLASS=literal>FLT_DIG</tt>, <tt CLASS=literal>FLT_EPSILON</tt>, <tt CLASS=literal>FLT_MANT_DIG</tt>, <tt CLASS=literal>FLT_MAX</tt>, <tt CLASS=literal>FLT_MAX_10_EXP</tt>, <tt CLASS=literal>FLT_MAX_EXP</tt>, <tt CLASS=literal>FLT_MIN</tt>, <tt CLASS=literal>FLT_MIN_10_EXP</tt>, <tt CLASS=literal>FLT_MIN_EXP</tt>, <tt CLASS=literal>FLT_RADIX</tt>, <tt CLASS=literal>FLT_ROUNDS</tt>, <tt CLASS=literal>LDBL_DIG</tt>, <tt CLASS=literal>LDBL_EPSILON</tt>, <tt CLASS=literal>LDBL_MANT_DIG</tt>, <tt CLASS=literal>LDBL_MAX</tt>, <tt CLASS=literal>LDBL_MAX_10_EXP</tt>, <tt CLASS=literal>LDBL_MAX_EXP</tt>, <tt CLASS=literal>LDBL_MIN</tt>, <tt CLASS=literal>LDBL_MIN_10_EXP</tt>, and <tt CLASS=literal>LDBL_MIN_EXP</tt></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.74">Limit constants</A></h4><tt CLASS=literal>ARG_MAX</tt>, <tt CLASS=literal>CHAR_BIT</tt>, <tt CLASS=literal>CHAR_MAX</tt>, <tt CLASS=literal>CHAR_MIN</tt>, <tt CLASS=literal>CHILD_MAX</tt>, <tt CLASS=literal>INT_MAX</tt>, <tt CLASS=literal>INT_MIN</tt>, <tt CLASS=literal>LINK_MAX</tt>, <tt CLASS=literal>LONG_MAX</tt>, <tt CLASS=literal>LONG_MIN</tt>, <tt CLASS=literal>MAX_CANON</tt>, <tt CLASS=literal>MAX_INPUT</tt>, <tt CLASS=literal>MB_LEN_MAX</tt>, <tt CLASS=literal>NAME_MAX</tt>, <tt CLASS=literal>NGROUPS_MAX</tt>, <tt CLASS=literal>OPEN_MAX</tt>, <tt CLASS=literal>PATH_MAX</tt>, <tt CLASS=literal>PIPE_BUF</tt>, <tt CLASS=literal>SCHAR_MAX</tt>, <tt CLASS=literal>SCHAR_MIN</tt>, <tt CLASS=literal>SHRT_MAX</tt>, <tt CLASS=literal>SHRT_MIN</tt>, <tt CLASS=literal>SSIZE_MAX</tt>, <tt CLASS=literal>STREAM_MAX</tt>, <tt CLASS=literal>TZNAME_MAX</tt>, <tt CLASS=literal>UCHAR_MAX</tt>, <tt CLASS=literal>UINT_MAX</tt>, and <tt CLASS=literal>ULONG_MAX USHRT_MAX</tt></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.75">Locale constants</A></h4><tt CLASS=literal>LC_ALL</tt>, <tt CLASS=literal>LC_COLLATE</tt>, <tt CLASS=literal>LC_CTYPE</tt>, <tt CLASS=literal>LC_MONETARY</tt>, <tt CLASS=literal>LC_NUMERIC</tt>, and <tt CLASS=literal>LC_TIME</tt></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.76">Math constants</A></h4>, and <tt CLASS=literal>HUGE_VAL</tt></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.77">Signal constants</A></h4><tt CLASS=literal>SA_NOCLDSTOP</tt>, <tt CLASS=literal>SIGABRT</tt>, <tt CLASS=literal>SIGALRM</tt>, <tt CLASS=literal>SIGCHLD</tt>, <tt CLASS=literal>SIGCONT</tt>, <tt CLASS=literal>SIGFPE</tt>, <tt CLASS=literal>SIGHUP</tt>, <tt CLASS=literal>SIGILL</tt>, <tt CLASS=literal>SIGINT</tt>, <tt CLASS=literal>SIGKILL</tt>, <tt CLASS=literal>SIGPIPE</tt>, <tt CLASS=literal>SIGQUIT</tt>, <tt CLASS=literal>SIGSEGV</tt>, <tt CLASS=literal>SIGSTOP</tt>, <tt CLASS=literal>SIGTERM</tt>, <tt CLASS=literal>SIGTSTP</tt>, <tt CLASS=literal>SIGTTIN</tt>, <tt CLASS=literal>SIGTTOU</tt>, <tt CLASS=literal>SIGUSR1</tt>, <tt CLASS=literal>SIGUSR2</tt>, <tt CLASS=literal>SIG_BLOCK</tt>, <tt CLASS=literal>SIG_DFL</tt>, <tt CLASS=literal>SIG_ERR</tt>, <tt CLASS=literal>SIG_IGN</tt>, <tt CLASS=literal>SIG_SETMASK</tt>, and <tt CLASS=literal>SIG_UNBLOCK</tt></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.78">Stat constants</A></h4><tt CLASS=literal>S_IRGRP</tt>, <tt CLASS=literal>S_IROTH</tt>, <tt CLASS=literal>S_IRUSR</tt>, <tt CLASS=literal>S_IRWXG</tt>, <tt CLASS=literal>S_IRWXO</tt>, <tt CLASS=literal>S_IRWXU</tt>, <tt CLASS=literal>S_ISGID</tt>, <tt CLASS=literal>S_ISUID</tt>, <tt CLASS=literal>S_IWGRP</tt>, <tt CLASS=literal>S_IWOTH</tt>, <tt CLASS=literal>S_IWUSR</tt>, <tt CLASS=literal>S_IXGRP</tt>, <tt CLASS=literal>S_IXOTH</tt>, and <tt CLASS=literal>S_IXUSR</tt></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.79">Stat macros</A></h4><tt CLASS=literal>S_ISBLK</tt>, <tt CLASS=literal>S_ISCHR</tt>, <tt CLASS=literal>S_ISDIR </tt>, <tt CLASS=literal>S_ISFIFO</tt>, and <tt CLASS=literal>S_ISREG</tt></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.80">Stdlib constants</A></h4><tt CLASS=literal>EXIT_FAILURE</tt>, <tt CLASS=literal>EXIT_SUCCESS</tt>, <tt CLASS=literal>MB_CUR_MAX</tt>, and <tt CLASS=literal>RAND_MAX</tt></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.81">Stdio constants</A></h4><tt CLASS=literal>BUFSIZ</tt>, <tt CLASS=literal>EOF</tt>, <tt CLASS=literal>FILENAME_MAX</tt>, <tt CLASS=literal>L_ctermid</tt>, <tt CLASS=literal>L_cuserid</tt>, <tt CLASS=literal>L_tmpname</tt>, and <tt CLASS=literal>TMP_MAX</tt></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.82">Time constants</A></h4><tt CLASS=literal>CLK_TCK</tt>, and <tt CLASS=literal>CLOCKS_PER_SEC</tt></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.83">Unistd constants</A></h4><tt CLASS=literal>R_OK</tt>, <tt CLASS=literal>SEEK_CUR</tt>, <tt CLASS=literal>SEEK_END</tt>, <tt CLASS=literal>SEEK_SET</tt>, <tt CLASS=literal>STDIN_FILENO</tt>, <tt CLASS=literal>STDOUT_FILENO</tt>, <tt CLASS=literal>STRERR_FILENO</tt>, <tt CLASS=literal>W_OK</tt>, and <tt CLASS=literal>X_OK</tt></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.84">Wait constants</A></h4><tt CLASS=literal>WNOHANG</tt>, and <tt CLASS=literal>WUNTRACED</tt></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.85">Wait macros</A></h4><tt CLASS=literal>WIFEXITED</tt>, <tt CLASS=literal>WEXITSTATUS</tt>, <tt CLASS=literal>WIFSIGNALED</tt>, <tt CLASS=literal>WTERMSIG</tt>, <tt CLASS=literal>WIFSTOPPED</tt>, and <tt CLASS=literal>WSTOPSIG</tt></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.50">Pod::Text--Convert POD Data to Formatted ASCII Text</A></h3><DIV CLASS=programlisting><P><PRE>use Pod::Text;pod2text("perlfunc.pod", *<tt CLASS=replaceable><i>filehandle</i></tt>);  # send formatted output to file$text = pod2text("perlfunc.pod");       # assign formatted output to $text</PRE></DIV><P CLASS=para>Pod::Text converts documentation in the POD format (suchas can be found throughout the Perl distribution) into formatted ASCII text.Termcap is optionally supported for boldface/underline, and can be enabledwith:<DIV CLASS=programlisting><P><PRE>$Pod::Text::termcap=1</PRE></DIV><P CLASS=para>If termcap is not enabled, backspaces are used to simulate bold andunderlined text.<P CLASS=para>The <tt CLASS=literal>pod2text()</tt> subroutine can take one or two arguments.  The firstis the name of a file to read the POD from, or <tt CLASS=literal>"&lt;&amp;STDIN"</tt> to readfrom <tt CLASS=literal>STDIN</tt>.  The second argument, if provided, is a filehandle globwhere output should be sent.  (Use <tt CLASS=literal>*STDOUT</tt> to write to <tt CLASS=literal>STDOUT</tt>.)<P CLASS=para>A separate <I CLASS=emphasis>pod2text</I> program is included as part of the standard Perldistribution.  Primarily, a wrapper for Pod::Text, it can beinvoked this way:<DIV CLASS=programlisting><P><PRE>pod2text &lt; input.pod</PRE></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.51">Safe--Create Safe Namespaces for Evaluating Perl Code</A></h3><DIV CLASS=programlisting><P><PRE>use Safe;$cpt = new Safe;  # create a new safe compartment</PRE></DIV><P CLASS=para><A NAME="CH07.SAFE1"></A><A NAME="CH07.SAFE2"></A><A NAME="CH07.SAFE3"></A><A NAME="CH07.SAFE4"></A><A NAME="CH07.SAFE5"></A>The Safe extension module allows the creation of compartments in whichuntrusted Perl code can be evaluated.  Each compartment provides a newnamespace and has an associated operator mask.<P CLASS=para>The root of the namespace (that is, <tt CLASS=literal>main::</tt>) is changed to adifferent package, and code evaluated in the compartment cannotrefer to variables outside this namespace, even with run-timeglob lookups and other tricks.  Code that is compiled outsidethe compartment can choose to place variables into (or sharevariables with) the compartment's namespace, and only thatdata will be visible to code evaluated in the compartment.<P CLASS=para>By default, the only variables shared with compartments are theunderscore variables <B>$_</B> and <B>@_</B> (and, technically, the much lessfrequently used <tt CLASS=literal>%_</tt>, the <tt CLASS=literal>_</tt> filehandle and so on).  This is becauseotherwise Perl operators that default to <tt CLASS=literal>$_</tt> would not work and neitherwould the assignment of arguments to <tt CLASS=literal>@_</tt> on subroutine entry.<P CLASS=para><A NAME="CH07.SAFE6"></A>Each compartment has an associated operator mask with which you can excludeparticular Perl operators from the compartment.  (The mask syntax is explainedbelow.)  Recall that Perl code is compiled into an internal format beforeexecution.  Evaluating Perl code (for example, via <tt CLASS=literal>eval</tt><tt CLASS=replaceable><i>STRING</i></tt> or <tt CLASS=literal>do</tt><tt CLASS=replaceable><i>FILE</i></tt>) causes the code to be compiled into an internalformat and then, provided there was no error in the compilation, executed.  Codeevaluated in a compartment is compiled subject to the compartment's operatormask.  Attempting to evaluate compartmentalized code that contains a maskedoperator will cause the compilation to fail with an error.  The code will not beexecuted.<P CLASS=para>By default, the operator mask for a newly created compartment masks out alloperations that give access to the system in some sense.  This includes maskingoff operators such as <A HREF="ch03_02.htm#PERL2-CMD-SYSTEM">system</A>, <A HREF="ch03_02.htm#PERL2-CMD-OPEN">open</A>, <A HREF="ch03_02.htm#PERL2-CMD-CHOWN">chown</A>, and <A HREF="ch03_02.htm#PERL2-CMD-SHMGET">shmget</A>, but operators such as <A HREF="ch03_02.htm#PERL2-CMD-PRINT">print</A>, <A HREF="ch03_02.htm#PERL2-CMD-SYSREAD">sysread</A>, and<tt CLASS=literal>&lt;FILEHANDLE&gt;</tt> are not masked off.  These file operatorsare allowed since, in order for the code in the compartment to have access to afilehandle, the code outside the compartment must have explicitly placed thefilehandle variable inside the compartment.<P CLASS=para>Since it is only at the compilation stage that the operator mask applies,controlled access to potentially unsafe operations can be achieved by having ahandle to a wrapper subroutine (written outside the compartment) placed into thecompartment. For example:<DIV CLASS=programlisting><P><PRE>$cpt = new Safe;sub wrapper {    ;# vet arguments and perform potentially unsafe operations}$cpt-&gt;share('&amp;wrapper');  # see share method below</PRE></DIV><P CLASS=para>An operator mask exists at user-level as a string of bytes of length<tt CLASS=literal>MAXO</tt>, each of which is either <tt CLASS=literal>0x00</tt> or<tt CLASS=literal>0x01</tt>.  Here, <tt CLASS=literal>MAXO</tt> is the number ofoperators in the current version of Perl.  The subroutine<tt CLASS=literal>MAXO</tt> (available for export by package Safe) returns thenumber of operators in the currently running Perl executable.  The presence of a<tt CLASS=literal>0x01</tt> byte at offset <tt CLASS=replaceable><i>n</i></tt> of thestring indicates that operator number <tt CLASS=replaceable><i>n</i></tt> should bemasked (that is, disallowed).  The Safe extension makes available routines forconverting from operator names to operator numbers (and vice versa) and forconverting from a list of operator names to the corresponding mask (and viceversa).<DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.86">Methods in class Safe</A></h4><P CLASS=para>To create a new compartment, use:<DIV CLASS=programlisting><P><PRE>$cpt = new Safe <tt CLASS=replaceable><i>NAMESPACE</i></tt>, <tt CLASS=replaceable><i>MASK</i></tt>;</PRE></DIV><P CLASS=para>where <tt CLASS=replaceable><i>NAMESPACE</i></tt> is the root namespace to use for thecompartment (defaults to <tt CLASS=literal>Safe::Root000000000</tt>, auto-incrementedfor each new compartment).  <tt CLASS=replaceable><i>MASK</i></tt> is the operator mask to use.Both arguments are optional.<P CLASS=para>The following methods can then be used on the compartmentobject returned by the above constructor.  The object argumentis implicit in each case.<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>root</tt>(<tt CLASS=replaceable><i>NAMESPACE</i></tt><tt CLASS=literal>)</tt><DD><P CLASS=para>A get-or-set method for the compartment's namespace.  With the<tt CLASS=replaceable><i>NAMESPACE</i></tt> argument present, it sets the root namespace for thecompartment.  With no <tt CLASS=replaceable><i>NAMESPACE</i></tt> argument present, it returns thecurrent root namespace of the compartment.<p><DT CLASS=varlistentry><tt CLASS=literal>mask</tt>(<tt CLASS=replaceable><i>MASK</i></tt><tt CLASS=literal>)</tt><DD><P CLASS=para>A get-or-set method for the compartment's operator mask.With the <tt CLASS=replaceable><i>MASK</i></tt> argument present, it sets the operator mask for thecompartment.  With no <tt CLASS=replaceable><i>MASK</i></tt> argument present, it returns thecurrent operator mask of the compartment.<p><DT CLASS=varlistentry><tt CLASS=literal>trap</tt>(<tt CLASS=replaceable><i>OP</i></tt><tt CLASS=literal>, ...)</tt><DD><P CLASS=para>Sets bits in the compartment's operator mask correspondingto each operator named in the list of arguments.  Each <tt CLASS=replaceable><i>OP</i></tt> can beeither the name of an operation or its number.  See <I CLASS=emphasis>opcode.h</I> or<I CLASS=emphasis>opcode.pl</I> in the main Perl distribution for a canonical list ofoperator names.<p><DT CLASS=varlistentry><tt CLASS=literal>untrap(</tt><tt CLASS=replaceable><i>OP</i></tt><tt CLASS=literal>, ...)</tt><DD><P CLASS=para>Resets bits in the compartment's operator mask correspondingto each operator named in the list of arguments.  Each <tt CLASS=replaceable><i>OP</i></tt> can beeither the name of an operation or its number.  See <I CLASS=emphasis>opcode.h</I> or<I CLASS=emphasis>opcode.pl</I> in the main Perl distribution for a canonical list ofoperator names.<p><DT CLASS=varlistentry><tt CLASS=literal>share(</tt><tt CLASS=replaceable><i>VARNAME</i></tt><tt CLASS=literal>, ...)</tt><DD><P CLASS=para>Shares the variables in the argument list with the compartment.  Each<tt CLASS=replaceable><i>VARNAME</i></tt> must be a string containing the name of a variable witha leading type identifier included.  Examples of legal variable namesare <tt CLASS=literal>$foo</tt> for a scalar, <tt CLASS=literal>@foo</tt> for an array, <tt CLASS=literal>%foo</tt>for a hash, <tt CLASS=literal>&amp;foo</tt> for a subroutine and <tt CLASS=literal>*foo</tt> for atypeglob.  (A typeglob results in the sharing of all symbol tableentries associated with <tt CLASS=literal>foo</tt>, including scalar, array, hash,subroutine, and filehandle.)<p><DT CLASS=varlistentry><tt CLASS=literal>varglob(</tt><tt CLASS=replaceable><i>VARNAME</i></tt><tt CLASS=literal>)</tt><DD><P CLASS=para>Returns a typeglob for the symbol table entry of <tt CLASS=replaceable><i>VARNAME</i></tt> in the packageof the compartment. <tt CLASS=replaceable><i>VARNAME</i></tt> must be the name of a variable withoutany leading type marker. For example:<DIV CLASS=programlisting><P><PRE>$cpt = new Safe 'Root';$Root::foo = "Hello world";# Equivalent version which doesn't need to know $cpt's package name:${$cpt-&gt;varglob('foo')} = "Hello world";</PRE></DIV><p><DT CLASS=varlistentry><tt CLASS=literal>reval(</tt><tt CLASS=replaceable><i>STRING</i></tt><tt CLASS=literal>)</tt><DD><P CLASS=para>Evaluates <tt CLASS=replaceable><i>STRING</i></tt> as Perl code inside the compartment.The code can only see the compartment's namespace (as returned by the<tt CLASS=literal>root()</tt> method).  Any attempt by code in<tt CLASS=replaceable><i>STRING</i></tt> to use an operator which is in thecompartment's mask will cause an error (at run-time of the main program, but atcompile-time for the code in <tt CLASS=replaceable><i>STRING</i></tt>).  If the code in<tt CLASS=replaceable><i>STRING</i></tt> includes an <A HREF="ch03_02.htm#PERL2-CMD-EVAL">eval</A> (and the <A HREF="ch03_02.htm#PERL2-CMD-EVAL">eval</A> operator is permitted) then theerror can occur at run-time for <tt CLASS=replaceable><i>STRING</i></tt> (although itis at compile-time for the <A HREF="ch03_02.htm#PERL2-CMD-EVAL">eval</A> within<tt CLASS=replaceable><i>STRING</i></tt>).  The error is of the form "<tt CLASS=literal>%strapped by operation mask operation....</tt>"  If an operationis trapped in this way, then the code in <tt CLASS=replaceable><i>STRING</i></tt> willnot be executed.  If such a trapped operation occurs, or if any othercompile-time or return error occurs, then <B>$@</B> isset to the error message, just as with an <A HREF="ch03_02.htm#PERL2-CMD-EVAL">eval</A>.  If there is no error, then themethod returns the value of the last expression evaluated, or a return statementmay be used, just as with subroutines and <A HREF="ch03_02.htm#PERL2-CMD-EVAL">eval</A>.<p><DT CLASS=varlistentry><tt CLASS=literal>rdo(</tt><tt CLASS=replaceable><i>FILENAME</i></tt><tt CLASS=literal>)</tt><DD><P CLASS=para>Evaluates the contents of file <tt CLASS=replaceable><i>FILENAME</i></tt> inside the compartment.See the <tt CLASS=literal>reval()</tt> method earlier for further details.</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.87">Subroutines in package Safe</A></h4><P CLASS=para>The Safe package contains subroutines for manipulating operatornames and operator masks.  All are available for export by the package.The canonical list of operator names is contained in the array<tt CLASS=literal>op_name</tt> defined and initialized in file <I CLASS=emphasis>opcode.h</I> of the Perlsource distribution.<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>ops_to_mask(</tt><tt CLASS=replaceable><i>OP</i></tt><tt CLASS=literal>, ...)</tt><DD><P CLASS=para>Takes a list of operator names and returns an operator maskwith precisely those operators masked.<p><DT CLASS=varlistentry><tt CLASS=literal>mask_to_ops(</tt><tt CLASS=replaceable><i>MASK</i></tt><tt CLASS=literal>)</tt><DD><P CLASS=para>Takes an operator mask and returns a list of operator namescorresponding to those operators which are masked in <tt CLASS=replaceable><i>MASK</i></tt>.<p><DT CLASS=varlistentry><tt CLASS=literal>opcode(</tt><tt CLASS=replaceable><i>OP</i></tt><tt CLASS=literal>, ...)</tt><DD><P CLASS=para>Takes a list of operator names and returns the correspondinglist of opcodes (which can then be used as byte offsets into a mask).<p><DT CLASS=varlistentry><tt CLASS=literal>opname(</tt><tt CLASS=replaceable><i>OP</i></tt><tt CLASS=literal>, ...)</tt><DD><P CLASS=para>Takes a list of opcodes and returns the corresponding list ofoperator names.<p><DT CLASS=varlistentry><tt CLASS=literal>fullmask</tt><DD><P CLASS=para>Returns a mask with all operators masked.It returns the string <tt CLASS=literal>`\001` x MAXO()</tt>.<p><DT CLASS=varlistentry><tt CLASS=literal>emptymask</tt><DD><P CLASS=para>Returns a mask with all operators unmasked.It returns the string <tt CLASS=literal>`\0` x MAXO()</tt>.  This is useful if youwant a compartment to make use of the name-space protectionfeatures but do not want the default restrictive mask.<p><DT CLASS=varlistentry><tt CLASS=literal>MAXO</tt><DD><P CLASS=para>This returns the number of operators (hence the length of anoperator mask).<p><DT CLASS=varlistentry><tt CLASS=literal>op_mask</tt><DD><P CLASS=para>This returns the operator mask that is actually in effect at thetime the invocation to the subroutine is compiled.This is probably not terribly useful.</DL></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.52">SDBM_File--Tied Access to SDBM Files</A></h3><DIV CLASS=programlisting><P><PRE>use Fcntl;use SDBM_File;tie(%hash, SDBM_File, 'Op.dbmx', O_RDWR|O_CREAT, 0644);# read/writes of %hash are now read/writes of the file, Op.dmx.paguntie %h;</PRE></DIV><P CLASS=para>See Perl's built-in <A HREF="ch03_02.htm#PERL2-CMD-TIE">tie</A> function.  Also see the DB_File module in thischapter for a description of a closely related module.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.53">Search::Dict--Search for Key in Dictionary File</A></h3><DIV CLASS=programlisting><P><PRE>use Search::Dict;look *FILEHANDLE, $key, $dict, $fold;</PRE></DIV><P CLASS=para>The <tt CLASS=literal>look()</tt> routine sets the file position in <tt CLASS=literal>FILEHANDLE</tt>to be the first line greater than or equal (stringwise) to <tt CLASS=literal>$key</tt>.It returns the new file position, or -1 if an error occurs.<P CLASS=para>If <tt CLASS=literal>$dict</tt> is true, the search is in dictionary order (ignoringeverything but word characters and whitespace).  If <tt CLASS=literal>$fold</tt> istrue, then case is ignored.  The file must be sorted into the appropriate order,using the <B>-d</B> and <B>-f</B> flags of UNIX<I CLASS=emphasis>sort</I> (1), or the equivalent command on non-UNIXmachines.  Unpredictable results will otherwise ensue.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.54">SelectSaver--Save and Restore Selected Filehandle</A></h3><DIV CLASS=programlisting><P><PRE>use SelectSaver;select $fh_old;{    my $saver = new SelectSaver($fh_new); # selects $fh_new}# block ends; object pointed to by "my" $saver is destroyed# previous handle, $fh_old is now selected# alternative invocation, without filehandle argumentmy $saver = new SelectSaver; # selected filehandle remains unchanged</PRE></DIV><P CLASS=para>A SelectSaver object contains a reference to the filehandle thatwas selected when the object was created.  If its <tt CLASS=literal>new()</tt> method isgiven a filehandle as an argument, then that filehandle is selected;otherwise, the selected filehandle remains unchanged.<P CLASS=para>When a SelectSaver object is destroyed, the filehandle thatwas selected immediately prior to the object's creation is re-selected.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.55">SelfLoader--Load Functions Only on Demand</A></h3><DIV CLASS=programlisting><P><PRE>package GoodStuff;use SelfLoader;<I CLASS=emphasis>[initializing code]</I>_ _DATA_ _sub {...};</PRE></DIV><P CLASS=para><A NAME="CH07.SELF"></A>This module is used for delayed loading of Perl functionsthat (unlike AutoLoader functions) are packaged within your script file.This gives the <I CLASS=emphasis>appearance</I>of faster loading.<P CLASS=para>In the example above, SelfLoader tells its user (GoodStuff) thatfunctions in the GoodStuff package are tobe autoloaded from after the <tt CLASS=literal>_ _DATA_ _</tt> token.<P CLASS=para>The <tt CLASS=literal>_ _DATA_ _</tt> token tells Perl that the codefor compilation is finished.  Everything after the<tt CLASS=literal>_ _DATA_ _</tt> token is available for reading viathe filehandle <tt CLASS=literal>GoodStuff::DATA</tt>, whereGoodStuff is the name of the current package when the<tt CLASS=literal>_ _DATA_ _</tt> token is reached. This token worksjust the same as <tt CLASS=literal>_ _END_ _</tt> does in packagemain, except that data after <tt CLASS=literal>_ _END_ _</tt> isretrievable only in package main, whereas data after<tt CLASS=literal>_ _DATA_ _</tt> is retrievable in whatever thecurrent package is.<P CLASS=para>Note that it is possible to have <tt CLASS=literal>_ _DATA_ _</tt>tokens in the same package in multiple files, and that the last<tt CLASS=literal>_ _DATA_ _</tt> token in a given package that isencountered by the compiler is the one accessible by the filehandle.  That is,whenever the <tt CLASS=literal>_ _DATA_ _</tt> token is parsed, any<tt CLASS=literal>DATA</tt> filehandle previously open in the current package(opened in a different file, presumably) is closed so that the new one can beopened. (This also applies to <tt CLASS=literal>_ _END_ _</tt>and the <tt CLASS=literal>main::DATA</tt> filehandle:<tt CLASS=literal>main::DATA</tt> is reopened whenever<tt CLASS=literal>_ _END_ _</tt> is encountered, soany former association is lost.)<DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.88">SelfLoader autoloading</A></h4><P CLASS=para>The SelfLoader will read from the <tt CLASS=literal>GoodStuff::DATA</tt> filehandleto get definitions for functions placed after<tt CLASS=literal>_ _DATA_ _</tt>, and then<A HREF="ch03_02.htm#PERL2-CMD-EVAL">eval</A> the requestedsubroutine the first timeit's called. The costsare the one-time parsing of the data after<tt CLASS=literal>_ _DATA_ _</tt>, and a loaddelay for the first callof any autoloaded function. The benefits are a speeded upcompilation phase, with no need to load functions that are never used.<P CLASS=para>You can use <tt CLASS=literal>_ _END_ _</tt> after<tt CLASS=literal>_ _DATA_ _</tt>.  The SelfLoader will stop readingfrom <tt CLASS=literal>DATA</tt> if it encounters the<tt CLASS=literal>_ _END_ _</tt> token, just as you might expect.  Ifthe <tt CLASS=literal>_ _END_ _</tt> token is present, and is followedby the token <tt CLASS=literal>DATA</tt>, then the SelfLoader leaves the<tt CLASS=literal>GoodStuff::DATA</tt> filehandle open on the line after that token.<P CLASS=para>The SelfLoader exports the <tt CLASS=literal>AUTOLOAD</tt> subroutine to the package using theSelfLoader, and this triggers the automatic loading of an undefinedsubroutine out of its <tt CLASS=literal>DATA</tt> portion the first time that subroutine iscalled.<P CLASS=para>There is no advantage to putting subroutines that will alwaysbe called after the <tt CLASS=literal>_ _DATA_ _</tt> token.</DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.89">Autoloading and file-scoped lexicals</A></h4><P CLASS=para>A <tt CLASS=literal>my $pack_lexical</tt> statement makes the variable<tt CLASS=literal>$pack_lexical</tt> visible <I CLASS=emphasis>only</I> up to the<tt CLASS=literal>_ _DATA_ _</tt> token.  That means that subroutinesdeclared elsewhere cannot see lexical variables.  Specifically, autoloadedfunctions cannot see such lexicals (this applies to both the SelfLoader andthe Autoloader).  The <tt CLASS=literal>use vars</tt> pragma (see later in thischapter) provides a way to declare package-level globals that will be visible toautoloaded routines.</DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.90">SelfLoader and AutoLoader</A></h4><P CLASS=para>The SelfLoader can replace the AutoLoader--just change <tt CLASS=literal>use AutoLoader</tt>to <tt CLASS=literal>use SelfLoader</tt>[5]and the <tt CLASS=literal>_ _END_ _</tt> token to <tt CLASS=literal>_ _DATA_ _</tt>.<blockquote class=footnote><P CLASS=para>[5] Be aware, however, that the SelfLoader exportsan <tt CLASS=literal>AUTOLOAD</tt> function into your package.  But if you have your own <tt CLASS=literal>AUTOLOAD</tt> andare using the AutoLoader too, you probably know what you're doing.</blockquote><P CLASS=para>There is no need to inherit from the SelfLoader.<P CLASS=para>The SelfLoader works similarly to the AutoLoader, but picks up the subroutinedefinitions from after the <tt CLASS=literal>_ _DATA_ _</tt> insteadof in the <I CLASS=emphasis>lib/auto/</I> directory.  SelfLoader needs lessmaintenance at the time the module is installed, since there's no need to runAutoSplit.  And it can run faster at load time because it doesn't need to keepopening and closing files to load subroutines.  On the other hand, it can runslower because it needs to parse the code after the<tt CLASS=literal>_ _DATA_ _</tt>. Details of the AutoLoader andanother view of these distinctions can be found in that module's documentation.</DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.91">How to read DATA from your Perl program</A></h4><P CLASS=para>(This section is only relevant if you want to usethe <tt CLASS=literal>GoodStuff::DATA</tt> together with the SelfLoader.)<P CLASS=para>The SelfLoader reads from wherever the current position of the<tt CLASS=literal>GoodStuff::DATA</tt> filehandle is, until EOF or the<tt CLASS=literal>_ _END_ _</tt> token.  This means that if you wantto use that filehandle (and <I CLASS=emphasis>only</I> if you want to), youshould either<P><UL CLASS=itemizedlist><li CLASS=listitem>Put all your subroutine declarations immediatelyafter the <tt CLASS=literal>_ _DATA_ _</tt> token and put your own data after thosedeclarations, using the <tt CLASS=literal>_ _END_ _</tt> token to markthe end of subroutinedeclarations.  You must also ensure that the SelfLoader first reads itsstubs by calling <tt CLASS=literal>SelfLoader-&gt;load_stubs();</tt>, or by using a functionwhich is selfloaded; or<P></UL><P><UL CLASS=itemizedlist><li CLASS=listitem>You should read the <tt CLASS=literal>GoodStuff::DATA</tt>filehandle first, leaving the handle open and positioned at the first lineof subroutine declarations.<P></UL><P CLASS=para>You could even conceivably do both.</DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.92">Classes and inherited methods</A></h4><P CLASS=para>This section is only relevant if your module is a class, and has methodsthat could be inherited.<P CLASS=para>A subroutine stub (or forward declaration) looks like:<DIV CLASS=programlisting><P><PRE>sub <tt CLASS=replaceable><i>stub</i></tt>;</PRE></DIV><P CLASS=para>That is, it is a subroutine declaration without the body of the subroutine.  Formodules that aren't classes, there is no real need for stubs as far asautoloading is concerned.<P CLASS=para>For modules that <I CLASS=emphasis>are</I> classes, and need to handle inheritedmethods, stubs are needed to ensure that the method inheritance mechanism worksproperly. You can load the stubs into the module at <A HREF="ch03_02.htm#PERL2-CMD-REQUIRE">require</A> time, by adding the statement<tt CLASS=literal>SelfLoader-&gt;load_stubs();</tt> to the module to do this.<P CLASS=para>The alternative is to put the stubs in before the<tt CLASS=literal>_ _DATA_ _</tt> token before releasing the module,and for this purpose the Devel::SelfStubber module is available.  However thisdoes require the extra step of ensuring that the stubs are in the module.  Ifyou do this, we strongly recommended that you do it before releasing the moduleand <I CLASS=emphasis>not</I> at install time.</DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.93">Multiple packages and fully qualified subroutine names</A></h4><P CLASS=para>Subroutines in multiple packages within the same file are supported--butyou should note that this requires exporting<tt CLASS=literal>SelfLoader::AUTOLOAD</tt> to every package which requires it. Thisis done automatically by the SelfLoader when it first loads the subs into thecache, but you should really specify it in the initialization before the<tt CLASS=literal>_ _DATA_ _</tt> by putting a <tt CLASS=literal>useSelfLoader</tt> statement in each package.<P CLASS=para>Fully qualified subroutine names are also supported. For example:<DIV CLASS=programlisting><P><PRE><tt CLASS=literal>_ _DATA_ _</tt>sub foo::bar {23}package baz;sub dob {32}</PRE></DIV><P CLASS=para>will all be loaded correctly by the SelfLoader, and the SelfLoader will ensurethat the packages "foo" and "baz" correctly have the<tt CLASS=literal>SelfLoader::AUTOLOAD</tt> method when the data after<tt CLASS=literal>_ _DATA_ _</tt> is first parsed.<P CLASS=para>See the discussion of autoloading in <A HREF="ch05_01.htm">Chapter 5, <i>Packages, Modules, and Object Classes</i></A>.Also see the AutoLoader module, autility that handles modules that have been into a collection of files forautoloading.</DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.56">Shell--Run Shell Commands Transparently Within Perl</A></h3><DIV CLASS=programlisting><P><PRE>use Shell qw(date cp ps);  # list shell commands you want to use$date = date();   # put the output of the date(1) command into $datecp("-p" "/etc/passwd", "/tmp/passwd");  # copy password file to a tmp fileprint ps("-ww");  # print the results of a "ps -ww" command</PRE></DIV><P CLASS=para>This module allows you to invoke UNIX utilities accessible from theshell command line as if they were Perl subroutines.  Arguments (includingswitches) are passed to the utilities as strings.<P CLASS=para>The Shell module essentially duplicates the built-in backtickfunctionality of Perl.  The module was written so that its implementationcould serve as a demonstration of autoloading.  It also shows how functioncalls can be mapped to subprocesses.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.57">sigtrap--Enable Stack Backtrace on Unexpected Signals</A></h3><DIV CLASS=programlisting><P><PRE>use sigtrap;       # initialize default signal handlersuse sigtrap <tt CLASS=replaceable><i>LIST</i></tt>;  # <tt CLASS=replaceable><i>LIST</i></tt> example:  qw(BUS SEGV PIPE SYS ABRT TRAP)</PRE></DIV><P CLASS=para>The <tt CLASS=literal>sigtrap</tt> pragma initializes a signal handler for the signalsspecified in <tt CLASS=replaceable><i>LIST</i></tt>, or (if no list is given) for a set of defaultsignals.  The signal handler prints a stack dump of the program and thenissues a (non-trapped) ABRT signal.<P CLASS=para>In the absence of <tt CLASS=replaceable><i>LIST</i></tt>, the signal handler is set up to deal withthe <tt CLASS=literal>ABRT</tt>, <tt CLASS=literal>BUS</tt>, <tt CLASS=literal>EMT</tt>, <tt CLASS=literal>FPE</tt>, <tt CLASS=literal>ILL</tt>, <tt CLASS=literal>PIPE</tt>, <tt CLASS=literal>QUIT</tt>, <tt CLASS=literal>SEGV</tt>, <tt CLASS=literal>SYS</tt>, <tt CLASS=literal>TERM</tt>, and <tt CLASS=literal>TRAP</tt> signals.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.58">Socket--Load the C socket.h Defines and Structure Manipulators</A></h3><A NAME="CH07.SOCK"></A><DIV CLASS=programlisting><P><PRE>use Socket;$proto = getprotobyname('udp');socket(Socket_Handle, PF_INET, SOCK_DGRAM, $proto);$iaddr = gethostbyname('hishost.com');$port = getservbyname('time', 'udp');$sin = sockaddr_in($port, $iaddr);send(Socket_Handle, 0, 0, $sin);$proto = getprotobyname('tcp');socket(Socket_Handle, PF_INET, SOCK_STREAM, $proto);$port = getservbyname('smtp');$sin = sockaddr_in($port, inet_aton("127.1"));$sin = sockaddr_in(7, inet_aton("localhost"));$sin = sockaddr_in(7, INADDR_LOOPBACK);connect(Socket_Handle, $sin);($port, $iaddr) = sockaddr_in(getpeername(Socket_Handle));$peer_host = gethostbyaddr($iaddr, AF_INET);$peer_addr = inet_ntoa($iaddr);socket(Socket_Handle, PF_UNIX, SOCK_STREAM, 0);unlink('/tmp/usock');$sun = sockaddr_un('/tmp/usock');bind(Socket_Handle, $sun);</PRE></DIV><P CLASS=para>This module is just a translation of the C <I CLASS=emphasis>socket.h</I> file.Unlike the old mechanism of requiring a translated <I CLASS=emphasis>socket.ph</I>file, this uses the <I CLASS=emphasis>h2xs</I> program (see the Perl source distribution)and your native C compiler.  This means that it has afar more likely chance of getting the numbers right.  This includesall of the commonly used preprocessor-defined constants like <tt CLASS=literal>AF_INET</tt>,<tt CLASS=literal>SOCK_STREAM</tt>, and so on.<P CLASS=para>In addition, some structure manipulation functions are available:<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>inet_aton</tt> <tt CLASS=replaceable><i>HOSTNAME</i></tt><DD><P CLASS=para>Takes a string giving the name of a host, and translates thatto a four-byte, packed string (structure).  Takes arguments of boththe <tt CLASS=literal>rtfm.mit.edu</tt> and <tt CLASS=literal>18.181.0.24</tt> types.  If the host namecannot be resolved, returns the undefined value.<p><DT CLASS=varlistentry><tt CLASS=literal>inet_ntoa</tt> <tt CLASS=replaceable><i>IP_ADDRESS</i></tt><DD><P CLASS=para>Takes a four-byte IP address (as returned by <tt CLASS=literal>inet_aton()</tt>)and translates it into a string of the form <I CLASS=emphasis>d.d.d.d</I>where the <I CLASS=emphasis>d</I>s are numbers less than 256 (the normal,readable, dotted-quad notation for Internet addresses).<p><DT CLASS=varlistentry><tt CLASS=literal>INADDR_ANY</tt><DD><P CLASS=para>Note: This function does not return a number, but a packed string.Returns the four-byte wildcard IP address that specifies anyof the host's IP addresses. (A particular machine can havemore than one IP address, each address corresponding toa particular network interface.  This wildcard addressallows you to bind to all of them simultaneously.)Normally equivalent to <tt CLASS=literal>inet_aton('0.0.0.0')</tt>.<p><DT CLASS=varlistentry><tt CLASS=literal>INADDR_LOOPBACK</tt><DD><P CLASS=para>Note:  does not return a number, but a packed string.Returns the four-byte loopback address.  Normally equivalentto <tt CLASS=literal>inet_aton('localhost')</tt>.<p><DT CLASS=varlistentry><tt CLASS=literal>INADDR_NONE</tt><DD><P CLASS=para>Note:  does not return a number, but a packed string.Returns the four-byte invalid IP address.  Normally equivalentto <tt CLASS=literal>inet_aton('255.255.255.255')</tt>.<p><DT CLASS=varlistentry><tt CLASS=literal>sockaddr_in</tt> <tt CLASS=replaceable><i>PORT, ADDRESS</i></tt><DD><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>sockaddr_in</tt> <tt CLASS=replaceable><i>SOCKADDR_IN</i></tt><DD><P CLASS=para>In a list context, unpacks its <tt CLASS=replaceable><i>SOCKADDR_IN</i></tt> argument and returnsa list consisting of <tt CLASS=literal>(</tt><tt CLASS=replaceable><i>PORT</i></tt><tt CLASS=literal>, </tt><tt CLASS=replaceable><i>ADDRESS</i></tt><tt CLASS=literal>)</tt>.In a scalar context, packs its <tt CLASS=literal>(</tt><tt CLASS=replaceable><i>PORT</i></tt><tt CLASS=literal>, </tt><tt CLASS=replaceable><i>ADDRESS</i></tt><tt CLASS=literal>)</tt>arguments as a <tt CLASS=replaceable><i>SOCKADDR_IN</i></tt> andreturns it.  If this is confusing, use <tt CLASS=literal>pack_sockaddr_in()</tt> and<tt CLASS=literal>unpack_sockaddr_in()</tt> explicitly.<p><DT CLASS=varlistentry><tt CLASS=literal>pack_sockaddr_in</tt> <tt CLASS=replaceable><i>PORT, IP_ADDRESS</i></tt><DD><P CLASS=para>Takes two arguments, a port number and a four-byte <tt CLASS=replaceable><i>IP_ADDRESS</i></tt>(as returned by <tt CLASS=literal>inet_aton()</tt>).  Returns the <tt CLASS=literal>sockaddr_in</tt>structure with those arguments packed in with <tt CLASS=literal>AF_INET</tt> filled in.For Internet domain sockets, thisstructure is normally what you need for the arguments in <A HREF="ch03_02.htm#PERL2-CMD-BIND">bind</A>,<A HREF="ch03_02.htm#PERL2-CMD-CONNECT">connect</A>, and <A HREF="ch03_02.htm#PERL2-CMD-SEND">send</A>, and is also returned by <A HREF="ch03_02.htm#PERL2-CMD-GETPEERNAME">getpeername</A>,<A HREF="ch03_02.htm#PERL2-CMD-GETSOCKNAME">getsockname</A>, and <A HREF="ch03_02.htm#PERL2-CMD-RECV">recv</A>.<p><DT CLASS=varlistentry><tt CLASS=literal>unpack_sockaddr_in</tt> <tt CLASS=replaceable><i>SOCKADDR_IN</i></tt><DD><P CLASS=para>Takes a <tt CLASS=literal>sockaddr_in</tt> structure (as returned by <tt CLASS=literal>pack_sockaddr_in()</tt>)and returns a list of two elements: the port and the four-byte IP address.This function will croak if the structure does not have <tt CLASS=literal>AF_INET</tt> in the right place.<p><DT CLASS=varlistentry><tt CLASS=literal>sockaddr_un</tt> <tt CLASS=replaceable><i>PATHNAME</i></tt><DD><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>sockaddr_un</tt> <tt CLASS=replaceable><i>SOCKADDR_UN</i></tt><DD><P CLASS=para>In a list context, it unpacks its <tt CLASS=replaceable><i>SOCKADDR_UN</i></tt> argument and returnsa list consisting of <tt CLASS=literal>(</tt><tt CLASS=replaceable><i>PATHNAME</i></tt><tt CLASS=literal>)</tt>.  In a scalar context, it packs its<tt CLASS=replaceable><i>PATHNAME</i></tt> argument as a <tt CLASS=literal>SOCKADDR_UN</tt> and returns it.  Ifthis is confusing, use<tt CLASS=literal>pack_sockaddr_un()</tt> and <tt CLASS=literal>unpack_sockaddr_un()</tt> explicitly.These functions are only supported if your system has &lt;<I CLASS=emphasis>sys/un.h</I>&gt;.<p><DT CLASS=varlistentry><tt CLASS=literal>pack_sockaddr_un</tt> <tt CLASS=replaceable><i>PATH</i></tt><DD><P CLASS=para>Takes one argument, a pathname.  Returns the <tt CLASS=literal>sockaddr_un</tt> structure withthat path packed in with <tt CLASS=literal>AF_UNIX</tt> filled in.  For UNIX domain sockets,this structure is normally what you need for the arguments in <A HREF="ch03_02.htm#PERL2-CMD-BIND">bind</A>,<A HREF="ch03_02.htm#PERL2-CMD-CONNECT">connect</A>, and <A HREF="ch03_02.htm#PERL2-CMD-SEND">send</A>, and is also returned by <A HREF="ch03_02.htm#PERL2-CMD-GETPEERNAME">getpeername</A>,<A HREF="ch03_02.htm#PERL2-CMD-GETSOCKNAME">getsockname</A> and <A HREF="ch03_02.htm#PERL2-CMD-RECV">recv</A>.<p><DT CLASS=varlistentry><tt CLASS=literal>unpack_sockaddr_un</tt> <tt CLASS=replaceable><i>SOCKADDR_UN</i></tt><DD><P CLASS=para>Takes a <tt CLASS=literal>sockaddr_un</tt> structure (as returned by <tt CLASS=literal>pack_sockaddr_un()</tt>)and returns the pathname.  Will croak if the structure does nothave <tt CLASS=literal>AF_UNIX</tt> in the right place.</DL></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.59">strict--Restrict Unsafe Constructs</A></h3><DIV CLASS=programlisting><P><PRE>use strict;        # apply all possible restrictionsuse strict 'vars'; # restrict unsafe use of variables for rest of blockuse strict 'refs'; # restrict unsafe use of references for rest of blockuse strict 'subs'; # restrict unsafe use of barewords for rest of blockno strict 'vars';  # relax restrictions on variables for rest of blockno strict 'refs';  # relax restrictions on references for rest of blockno strict 'subs';  # relax restrictions on barewords for rest of block</PRE></DIV><P CLASS=para>If no import list is given to <tt CLASS=literal>use strict</tt>, all possible restrictionsupon unsafe Perl constructs are imposed.  (This is the safest mode tooperate in, but is sometimes toostrict for casual programming.)  Currently, there are three possible thingsto be strict about:  <tt CLASS=literal>refs</tt>, <tt CLASS=literal>vars</tt>, and <tt CLASS=literal>subs</tt>.<P CLASS=para>In all cases the restrictions apply only until the end of the immediatelyenclosing block.<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>strict 'refs'</tt><DD><P CLASS=para>This generates a run-time error if youuse symbolic references.<DIV CLASS=programlisting><P><PRE>use strict 'refs';$ref = \$foo;print $$ref;        # ok$ref = "foo";print $$ref;        # run-time error; normally ok</PRE></DIV><p><DT CLASS=varlistentry><tt CLASS=literal>strict 'vars'</tt><DD><P CLASS=para>This generates a compile-time error if you access a variable that wasn'tdeclared via <A HREF="ch03_02.htm#PERL2-CMD-MY">my</A>, or fully qualified, or imported.<DIV CLASS=programlisting><P><PRE>use strict 'vars';use vars '$foe';$SomePack::fee = 1;  # ok, fully qualifiedmy $fie = 10;        # ok, my() var$foe = 7;            # ok, pseudo-imported by 'use vars'$foo = 9;            # blows up--did you mistype $foe maybe?</PRE></DIV><P CLASS=para>The last line generates a compile-time error because you're touching aglobal name without fully qualifying it.  Since the purpose of thispragma is to encourage use of <A HREF="ch03_02.htm#PERL2-CMD-MY">my</A> variables, using <A HREF="ch03_02.htm#PERL2-CMD-LOCAL">local</A> on avariable isn't good enough to declare it.  You can, however, use<A HREF="ch03_02.htm#PERL2-CMD-LOCAL">local</A> on a variable that you declared with <tt CLASS=literal>use vars</tt>.<p><DT CLASS=varlistentry><tt CLASS=literal>strict 'subs'</tt><DD><P CLASS=para>This generates a compile-time error ifyou try to use a bareword identifier that's not a predeclared subroutine.<DIV CLASS=programlisting><P><PRE>use strict 'subs';$SIG{PIPE} = Plumber;     # blows up (assuming Plumber sub not declared yet)$SIG{PIPE} = "Plumber";   # okay, means "main::Plumber" really$SIG{PIPE} = \&amp;Plumber;   # preferred form</PRE></DIV></DL><P CLASS=para>The <tt CLASS=literal>no strict 'vars'</tt> statement negates any preceding <tt CLASS=literal>use strictvars</tt> for the remainder of the innermost enclosing block.  Likewise,<tt CLASS=literal>no strict 'refs'</tt> negates any preceding invocation of <tt CLASS=literal>use strictrefs</tt>, and <tt CLASS=literal>no strict 'subs'</tt> negates <tt CLASS=literal>use strict 'subs'</tt>.<P CLASS=para>The arguments to <tt CLASS=literal>use strict</tt> are sometimes given as barewords--that is,without surrounding quotes.  Be aware, however, that the followingsequence will not work:<DIV CLASS=programlisting><P><PRE>use strict;      # or just:  use strict subs;...no strict subs;  # WRONG!  Should be:  no strict 'subs';...</PRE></DIV><P CLASS=para>The problem here is that giving <tt CLASS=literal>subs</tt> as a bareword is no longer allowedafter the <tt CLASS=literal>use strict</tt> statement.  <tt CLASS=literal>:-)</tt></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.60">subs--Predeclare Subroutine Names</A></h3><DIV CLASS=programlisting><P><PRE>use subs qw(<tt CLASS=replaceable><i>sub1 sub2 sub3</i></tt>);<tt CLASS=replaceable><i>sub1</i></tt> $arg1, $arg2;</PRE></DIV><P CLASS=para>This predeclares the subroutines whose names arein the list, allowing you to use them without parentheseseven before they're defined.  It has the additional benefit of allowingyou to override built-in functions, since you may only override built-insvia an import, and this pragma does a pseudo-import.<P CLASS=para>See also the vars module.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.61">Symbol--Generate Anonymous Globs; Qualify Variable Names</A></h3><DIV CLASS=programlisting><P><PRE>use Symbol;$sym = gensym;open($sym, "<tt CLASS=replaceable><i>filename</i></tt>");$_ = &lt;$sym&gt;;ungensym $sym;      # no effectprint qualify("x");              # "main::x"print qualify("x", "FOO");       # "FOO::x"print qualify("BAR::x");         # "BAR::x"print qualify("BAR::x", "FOO");  # "BAR::x"print qualify("STDOUT", "FOO");  # "main::STDOUT" (global)print qualify(\*x);              # \*x--for example: GLOB(0x99530)print qualify(\*x, "FOO");       # \*x--for example: GLOB(0x99530)</PRE></DIV><P CLASS=para><tt CLASS=literal>gensym()</tt> creates an anonymous glob and returns a referenceto it.  Such a glob reference can be used as a filehandle or directoryhandle.<P CLASS=para>For backward compatibility with older implementations that didn'tsupport anonymous globs, <tt CLASS=literal>ungensym()</tt> is also provided.But it doesn't do anything.<P CLASS=para><tt CLASS=literal>qualify()</tt> turns unqualified symbol names into qualifiedvariable names (for example, <tt CLASS=literal>myvar</tt> becomes<tt CLASS=literal>MyPackage::myvar</tt>).  If it is given a second parameter,<tt CLASS=literal>qualify()</tt> uses it as the default package; otherwise, it usesthe package of its caller.  Regardless, global variable names (for example,<tt CLASS=literal>STDOUT</tt>, <tt CLASS=literal>%ENV</tt>, <tt CLASS=literal>%SIG</tt>) arealways qualified with <tt CLASS=literal>main::</tt>.<P CLASS=para>Qualification applies only to symbol names (strings).  References areleft unchanged under the assumption that they are glob references,which are qualified by their nature.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.62">Sys::Hostname--Try Every Conceivable Way to Get Hostname</A></h3><DIV CLASS=programlisting><P><PRE>use Sys::Hostname;$host = hostname();</PRE></DIV><P CLASS=para>Attempts several methods of getting the system hostname andthen caches the result.  It tries <tt CLASS=literal>syscall(SYS_gethostname)</tt>,<tt CLASS=literal>`hostname`</tt>, <tt CLASS=literal>`uname -n`</tt>, and the file <I CLASS=emphasis>/com/host</I>.If all that fails, it <tt CLASS=literal>croak()</tt>s.<P CLASS=para>All nulls, returns, and newlines are removed from the result.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.63">Sys::Syslog--Perl Interface to UNIX syslog(3) Calls</A></h3><DIV CLASS=programlisting><P><PRE>use Sys::Syslog;openlog $ident, $logopt, $facility;syslog $priority, $mask, $format, @args;$oldmask = setlogmask $mask_priority;closelog;</PRE></DIV><P CLASS=para>Sys::Syslog is an interface to the UNIX <I CLASS=emphasis>syslog</I> (3) program.Call <tt CLASS=literal>syslog()</tt> with a string priority and a list of <A HREF="ch03_02.htm#PERL2-CMD-PRINTF">printf</A> argsjust like <I CLASS=emphasis>syslog</I> (3).  Sys::Syslog needs <I CLASS=emphasis>syslog.ph</I>,which must be created with <I CLASS=emphasis>h2ph</I> by your system administrator.<P CLASS=para>Sys::Syslog provides these functions:<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>openlog $ident, $logopt, $facility</tt><DD><P CLASS=para><tt CLASS=literal>$ident</tt> is prepended to every message.<tt CLASS=literal>$logopt</tt> contains one or more of the words <tt CLASS=literal>pid</tt>,<tt CLASS=literal>ndelay</tt>, <tt CLASS=literal>cons</tt>, <tt CLASS=literal>nowait</tt>.<tt CLASS=literal>$facility</tt> specifies the part of the system making the log entry.<p><DT CLASS=varlistentry><tt CLASS=literal>syslog $priority, $mask, $format, @args</tt><DD><P CLASS=para>If <tt CLASS=literal>$priority</tt> and <tt CLASS=literal>$mask</tt> permit, logs a message formed as if by<tt CLASS=literal>sprintf($format, @args)</tt>, with the addition that <tt CLASS=literal>%m</tt>is replaced with <tt CLASS=literal>"$!"</tt> (the latest error message).<p><DT CLASS=varlistentry><tt CLASS=literal>setlogmask $mask_priority</tt><DD><P CLASS=para>Sets log mask to <tt CLASS=literal>$mask_priority</tt> and returns the old mask.<p><DT CLASS=varlistentry><tt CLASS=literal>closelog</tt><DD><P CLASS=para>Closes the log file.</DL><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.94">Examples</A></h4><DIV CLASS=programlisting><P><PRE>openlog($program, 'cons, pid', 'user');syslog('info', 'this is another test');syslog('mail|warning', 'this is a better test: %d', time);closelog();syslog('debug', 'this is the last test');openlog("$program $$", 'ndelay', 'user');syslog('notice', 'fooprogram: this is really done');$! = 55;syslog('info', 'problem was %m'); # %m == $! in syslog (3)</PRE></DIV></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.64">Term::Cap--Terminal Capabilities Interface</A></h3><DIV CLASS=programlisting><P><PRE>require Term::Cap;$terminal = Tgetent Term::Cap { TERM =&gt; undef, OSPEED =&gt; $ospeed };$terminal-&gt;Trequire(qw/ce ku kd/);$terminal-&gt;Tgoto('cm', $col, $row, $FH);$terminal-&gt;Tputs('dl', $count, $FH);</PRE></DIV><P CLASS=para><A NAME="CH07.TERM1"></A><A NAME="CH07.TERM2"></A><A NAME="CH07.TERM3"></A>These are low-level functions to extract and use capabilities froma terminal capability (termcap) database.  For general information aboutthe use of this database, see the <I CLASS=emphasis>termcap</I> (5) manpage.<P CLASS=para>The "<tt CLASS=literal>new</tt>" function of Term::Cap is<tt CLASS=literal>Tgetent()</tt>, which extracts the termcap entry for the specifiedterminal type and returns a reference to a terminal object.  If the valueassociated with the <tt CLASS=literal>TERM</tt> key in the<tt CLASS=literal>Tgetent()</tt> argument list is false or undefined, then itdefaults to the environment variable <tt CLASS=literal>TERM</tt>.<P CLASS=para><tt CLASS=literal>Tgetent()</tt> looks in the environment for a <tt CLASS=literal>TERMCAP</tt> variable.If it finds one, and if the value does not begin with a slash and lookslike a termcap entry in which the terminal type name is the same as theenvironment string <tt CLASS=literal>TERM</tt>, then the <tt CLASS=literal>TERMCAP</tt> string is useddirectly as the termcap entry and there is no search for an entry in a termcapfile somewhere.<P CLASS=para>Otherwise, <tt CLASS=literal>Tgetent()</tt> looks in a sequence of files for thetermcap entry.  The sequence consists of the filename in<tt CLASS=literal>TERMCAP</tt>, if any, followed by either the files listed in the<tt CLASS=literal>TERMPATH</tt> environment variable, if any, or otherwise the files<I CLASS=emphasis>$HOME/.termcap</I>, <I CLASS=emphasis>/etc/termcap</I>, and<I CLASS=emphasis>/usr/share/misc/termcap</I>, in that order.  (Filenames in<tt CLASS=literal>TERMPATH</tt> may be separated by either a colon or a space.)Whenever multiple files are searched and a <tt CLASS=literal>tc</tt> field occurs inthe requested entry, the entry named in the <tt CLASS=literal>tc</tt> field must befound in the same file or one of the succeeding files.  If there is a<tt CLASS=literal>tc</tt> field in the <tt CLASS=literal>TERMCAP</tt> environmentvariable string, <tt CLASS=literal>Tgetent()</tt> continues searching as indicatedabove.<P CLASS=para><tt CLASS=literal>OSPEED</tt> is the terminal output bit rate (often mistakenlycalled the baud rate).  <tt CLASS=literal>OSPEED</tt> can be specified as either aPOSIX termios/SYSV termio speed (where 9600 equals 9600) or an old BSD-stylespeed (where 13 equals 9600).  See the next section, "Getting Terminal OutputSpeed", for code illustrating how to obtain the output speed.<P CLASS=para><tt CLASS=literal>Tgetent()</tt> returns a reference to a blessed object(<tt CLASS=literal>$terminal</tt> in the examples above).  The actual termcap entryis available as <tt CLASS=literal>$terminal-&gt;{TERMCAP}</tt>.  Failure to find anappropriate termcap entry results in a call to <tt CLASS=literal>Carp::croak()</tt>.<P CLASS=para>Once you have invoked <tt CLASS=literal>Tgetent()</tt>, you can manage a terminal bysending control strings to it with <tt CLASS=literal>Tgoto()</tt> and<tt CLASS=literal>Tputs()</tt>.  You can also test for the existence of particularterminal capabilities with <tt CLASS=literal>Trequire()</tt>.<P CLASS=para><tt CLASS=literal>Trequire()</tt> checks to see whether the named capabilities have beenspecified in the terminal's termcap entry.  For example, this line:<DIV CLASS=programlisting><P><PRE>$terminal-&gt;Trequire(qw/ce ku kd/);</PRE></DIV><P CLASS=para>checks whether the <tt CLASS=literal>ce</tt> (clear to end of line), <tt CLASS=literal>ku</tt>(keypad up-arrow), and <tt CLASS=literal>kd</tt> (keypad down-arrow) capabilities havebeen defined.  Any undefined capabilities will result in a listing ofthose capabilities and a call to <tt CLASS=literal>Carp::croak()</tt>.<P CLASS=para><tt CLASS=literal>Tgoto()</tt> produces a control string to move the cursor relative tothe screen.  For example, to move the cursor to the fifth line andforty-fifth column on the screen, you can say:<DIV CLASS=programlisting><P><PRE>$row = 5; $col = 45;$terminal-&gt;Tgoto('cm', $row, $col, STDOUT);</PRE></DIV><P CLASS=para>The first argument in this call must always be <tt CLASS=literal>cm</tt>.  If a filehandle is given as the final argument, then <tt CLASS=literal>Tgoto()</tt> sendsthe appropriate control string to that handle.  With or without a handle,the routine returns the control string, so you could achieve the sameeffect this way:<DIV CLASS=programlisting><P><PRE>$str = $terminal-&gt;Tgoto('cm', $row, $col);print STDOUT $str;</PRE></DIV><P CLASS=para><tt CLASS=literal>Tgoto()</tt> performs the necessary % interpolation on the controlstrings.  (See the <I CLASS=emphasis>termcap</I> (5) manpage for details.)<P CLASS=para>The <tt CLASS=literal>Tputs()</tt> routine allows you to exercise other terminalcapabilities.  For example, the following code deletes one line at the cursor'spresent position, and then turns on the bold text attribute:<DIV CLASS=programlisting><P><PRE>$count = 1;$terminal-&gt;Tputs('dl', $count, $FILEHANDLE);  # delete one line$terminal-&gt;Tputs('md', $count, $FILEHANDLE);  # turn on bold attribute</PRE></DIV><P CLASS=para>Again, <tt CLASS=literal>Tputs()</tt> returns the terminal control string, and the filehandle can be omitted.  The <tt CLASS=literal>$count</tt> for such calls should normally be<tt CLASS=literal>1</tt>, unless padding is required.  (Padding involves the output of"no-op" characters in order to effect a delay required by the terminaldevice.  It is most commonly required for hardcopy devices.)  A countgreater than <tt CLASS=literal>1</tt> is taken to specify the amount of padding.See the <I CLASS=emphasis>termcap</I> (5) manpage for more about padding.<P CLASS=para><tt CLASS=literal>Tputs()</tt> does <I CLASS=emphasis>not</I> perform % interpolation.  This means that the following will not work:<DIV CLASS=programlisting><P><PRE>$terminal-&gt;Tputs('DC', 1, $FILEHANDLE);  # delete one character (WRONG!)</PRE></DIV><P CLASS=para>If the terminal control string requires numeric parameters, then you mustdo the interpolation yourself:<DIV CLASS=programlisting><P><PRE>$str = $terminal-&gt;Tputs('DC', 1);$str =~ s/%d/7/;print STDOUT $str;        # delete seven characters</PRE></DIV><P CLASS=para>The output strings for <tt CLASS=literal>Tputs()</tt> are cached for counts of 1.<tt CLASS=literal>Tgoto()</tt> does not cache.  <tt CLASS=literal>$terminal-&gt;{_</tt><tt CLASS=replaceable><i>xx</i></tt><tt CLASS=literal>}</tt>is the raw termcap data and <tt CLASS=literal>$terminal-&gt;{</tt><tt CLASS=replaceable><i>xx</i></tt><tt CLASS=literal>}</tt> is the cachedversion (where <tt CLASS=replaceable><i>xx</i></tt> is the two-character terminal capability code).<DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.95">Getting terminal output speed</A></h4><P CLASS=para>You can use the POSIX module to get your terminal's output speed for usein the <tt CLASS=literal>Tgetent()</tt> call:<DIV CLASS=programlisting><P><PRE>require POSIX;my $termios = new POSIX::Termios;$termios-&gt;getattr;my $ospeed = $termios-&gt;getospeed;</PRE></DIV><P CLASS=para>The method using <I CLASS=emphasis>ioctl</I> (2) works like this:<DIV CLASS=programlisting><P><PRE>require 'ioctl.pl';ioctl(TTY, $TIOCGETP, $sgtty);($ispeed, $ospeed) = unpack('cc', $sgtty);</PRE></DIV></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.65">Term::Complete--Word Completion Module</A></h3><DIV CLASS=programlisting><P><PRE>use Term::Complete;$input = Complete('prompt_string', \@completion_list);$input = Complete('prompt_string', @completion_list);</PRE></DIV><P CLASS=para>The <tt CLASS=literal>Complete()</tt> routine sends the indicated promptstring to the currently selected filehandle, reads the user's response,and places the response in <tt CLASS=literal>$input</tt>.  What the user types is readone character at a time, and certain characters result in specialprocessing as follows:<P><DL CLASS=variablelist><DT CLASS=varlistentry>TAB<DD><P CLASS=para>The tab character causes <tt CLASS=literal>Complete()</tt> to match what the user hastyped so far against the list of strings in <tt CLASS=literal>@completion_list</tt>.  Ifthe user's partial input uniquely matches one of these strings, then therest of the matched string is output.  However, input is still not finisheduntil the user presses the return key.  If the user's partial input does notuniquely match one string in <tt CLASS=literal>@completion_list</tt> when the tabcharacter is pressed, then the partial input remains unchanged and thebell character is output.<p><DT CLASS=varlistentry>CTRL-D<DD><P CLASS=para>If the user types CTRL-D, the current matches between the user's partialinput string and the completion list are printed out.  If the partial inputstring is null, then the entire completion list is printed.  In any case,the prompt string is then reissued, along with the partial input.You can substitute a different character for CTRL-D by defining<tt CLASS=literal>$Term::Complete::complete</tt>.  For example:<DIV CLASS=programlisting><P><PRE>$Term::Complete::complete = "\001";  # use ctrl-a instead of ctrl-d</PRE></DIV><p><DT CLASS=varlistentry>CTRL-U<DD><P CLASS=para>Typing CTRL-U erases any partial input.  You can substitute a differentcharacter for CTRL-U by defining <tt CLASS=literal>$Term::Complete::kill</tt>.<p><DT CLASS=varlistentry>DEL, BS<DD><P CLASS=para>The delete and backspace characters both erase one character from thepartial input string.  You can redefine them by assigning a differentcharacter value to <tt CLASS=literal>$Term::Complete::erase1</tt> and<tt CLASS=literal>$Term::Complete::erase2</tt>.</DL><P CLASS=para>The user is not prevented from providing input that differs from allstrings in the completion list, or from adding to input that has beencompleted from the list.  The final input (determined when the userpresses the return key) is the string returned by <tt CLASS=literal>Complete()</tt>.<P CLASS=para>The TTY driver is put into raw mode using the system command<tt CLASS=literal>stty raw -echo</tt> and restored using <tt CLASS=literal>stty -raw echo</tt>.When <tt CLASS=literal>Complete()</tt> is called multiple times, it offersthe user's immediately previous response as the default response to each prompt.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.66">Test::Harness--Run Perl Standard Test Scripts with Statistics</A></h3><DIV CLASS=programlisting><P><PRE>use Test::Harness;runtests(@tests);</PRE></DIV><P CLASS=para>This module is used by MakeMaker.  If you're building a Perl extensionand if you have test scripts with filenames matching <I CLASS=emphasis>t/*.t</I> in theextension's subdirectory, then you can run those tests by executing theshell command, <tt CLASS=literal>make test</tt>.<P CLASS=para><tt CLASS=literal>runtests(@tests)</tt> runs all test scripts named as arguments andchecks standard output for the expected "<tt CLASS=literal>ok</tt><tt CLASS=replaceable><i>n</i></tt>" strings.  (Standard Perl test scripts print"<tt CLASS=literal>ok</tt> <tt CLASS=replaceable><i>n</i></tt>" for each single test, where<tt CLASS=replaceable><i>n</i></tt> is an integer incremented by one each time around.)After all tests have been performed, <tt CLASS=literal>runtests()</tt> prints someperformance statistics that are computed by the Benchmark module.<P CLASS=para><tt CLASS=literal>runtests()</tt> is exported by Test::Harness by default.<DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.97">The test script output</A></h4><P CLASS=para>The first line output by a standard test script should be<tt CLASS=literal>1..</tt><tt CLASS=replaceable><i>m</i></tt> with<tt CLASS=replaceable><i>m</i></tt> being the number of tests that the test scriptattempts to run.  Any output from the test script to standard error is ignoredand bypassed, and thus will be seen by the user.  Lines written to standardoutput that look like Perl comments (starting with <tt CLASS=literal>/^\s*\#/</tt>)are discarded.  Lines containing <tt CLASS=literal>/^(not\s+)?ok\b/</tt> areinterpreted as feedback for <tt CLASS=literal>runtests()</tt>.<P CLASS=para>The global variable <tt CLASS=literal>$Test::Harness::verbose</tt> is exportable andcan be used to let <tt CLASS=literal>runtests()</tt> display the standard output ofthe script without altering the behavior otherwise.<P CLASS=para>It is tolerated if the script omits test numbers after <tt CLASS=literal>ok</tt>.In this case Test::Harness maintains its own counter.  So the following scriptoutput:<P CLASS=para><DIV CLASS=screen><P><PRE>1..6not okoknot okokok</PRE></DIV><P CLASS=para>will generate:<P CLASS=para><DIV CLASS=screen><P><PRE>FAILED tests 1, 3, 6Failed 3/6 tests, 50.00% okay</PRE></DIV></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.98">Diagnostics</A></h4><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>All tests successful.\nFiles=%d,  Tests=%d, %s</tt><DD><P CLASS=para>If all tests are successful, some statistics about the performance areprinted.<p><DT CLASS=varlistentry><tt CLASS=literal>FAILED tests %s\n\tFailed %d/%d tests, %.2f%% okay.</tt><DD><P CLASS=para>For any single script that has failing subtests, these statisticsare printed.<p><DT CLASS=varlistentry><tt CLASS=literal>Test returned status %d (wstat %d)</tt><DD><P CLASS=para>Scripts that return a non-zero exit status, both <tt CLASS=literal>$?&gt;&gt;8</tt> and <tt CLASS=literal>$?</tt>,are printed in a message similar to the above.<p><DT CLASS=varlistentry><tt CLASS=literal>Failed 1 test, %.2f%% okay.</tt><DD><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>Failed %d/%d tests, %.2f%% okay.</tt><DD><P CLASS=para>If not all tests were successful, the script dies with one of theabove messages.</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.99">Notes</A></h4><P CLASS=para>Test::Harness uses <B>$^X</B> to determine which Perl binary to runthe testswith.  Test scripts running via the shebang (<tt CLASS=literal>#!</tt>) line may not beportable because <B>$^X</B> is not consistent for shebang scripts acrossplatforms.  This is no problem when Test::Harness is run with anabsolute path to the Perl binary or when <B>$^X</B> can be found in the path.</DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.67">Text::Abbrev--Create an Abbreviation Table from a List</A></h3><DIV CLASS=programlisting><P><PRE>use Text::Abbrev;%hash = ();abbrev(*hash, <tt CLASS=replaceable><i>LIST</i></tt>);</PRE></DIV><P CLASS=para>The <tt CLASS=literal>abbrev()</tt> routine takes each string in <tt CLASS=replaceable><i>LIST</i></tt> andconstructs all unambiguous abbreviations (truncations) of the stringwith respect to the other strings in <tt CLASS=replaceable><i>LIST</i></tt>.  Each such truncation(including the null truncation consisting of the entire string) is used asa key in <tt CLASS=literal>%hash</tt> for which the associated value is the non-truncatedstring.<P CLASS=para>So, if <tt CLASS=literal>good</tt> is the only string in <tt CLASS=replaceable><i>LIST</i></tt> beginning with<tt CLASS=literal>g</tt>, the following key/value pairs will be created:<P CLASS=para><DIV CLASS=screen><P><PRE>g    =&gt; good,go   =&gt; good,goo  =&gt; good,good =&gt; good</PRE></DIV><P CLASS=para>If, on the other hand, the string <tt CLASS=literal>go</tt> is also in the list, then<tt CLASS=literal>good</tt> yields these key/value pairs:<P CLASS=para><DIV CLASS=screen><P><PRE>goo  =&gt; good,good =&gt; good</PRE></DIV><P CLASS=para>and <tt CLASS=literal>go</tt> yields only:<P CLASS=para><DIV CLASS=screen><P><PRE>go =&gt; go</PRE></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.68">Text::ParseWords--Parse Text into a List of Tokens</A></h3><DIV CLASS=programlisting><P><PRE>use Text::ParseWords;@words = quotewords($delim, $keep, @lines);</PRE></DIV><P CLASS=para><tt CLASS=literal>quotewords()</tt> accepts a delimiter (which can be a regular expression)and a list of lines, and then breaks those lines up into a list ofdelimiter-separated words.  It ignores delimiters that appear insidesingle or double quotes.<P CLASS=para>The <tt CLASS=literal>$keep</tt> argument is a Boolean flag.  If it is false, then quotesare removed from the list of words returned by <tt CLASS=literal>quotewords()</tt>;otherwise, quotes are retained.<P CLASS=para>The value of <tt CLASS=literal>$keep</tt> also affects the interpretation of backslashes.If <tt CLASS=literal>$keep</tt> is true, then backslashes are fully preserved in thereturned list of words.  Otherwise, a single backslash disappears and adouble backslash is returned as a single backslash.  (Be aware, however,that, regardless of the value of <tt CLASS=literal>$keep</tt>, a single backslash occurringwithin quotes causes a Perl syntax error--presumably a bug.)</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.69">Text::Soundex--The Soundex Algorithm Described by Knuth</A></h3><DIV CLASS=programlisting><P><PRE>use Text::Soundex;$code = soundex $string;  # get soundex code for a string@codes = soundex @list;   # get list of codes for list of strings# set value to be returned for strings without soundex code$soundex_nocode = 'Z000';</PRE></DIV><P CLASS=para>This module implements the soundex algorithm as described by Donald Knuthin Volume 3 of <I CLASS=emphasis>The Art of Computer Programming</I>.  The algorithm isintended to hash words (in particular surnames) into a small space using asimple model that approximates the sound of the word when spoken by an Englishspeaker.  Each word is reduced to a four-character string, the firstcharacter being an uppercase letter and the remaining three being digits.<P CLASS=para>If there is no soundex code representation for a string, then the value of<tt CLASS=literal>$soundex_nocode</tt> is returned.  This variable is initially set to theundefined value, butmany people seem to prefer an unlikely value like <tt CLASS=literal>Z000</tt>.(How unlikely this is depends on the data set being dealt with.)  Any valuecan be assigned to <tt CLASS=literal>$soundex_nocode</tt>.<P CLASS=para>In a scalar context <tt CLASS=literal>soundex()</tt> returns the soundex code of its firstargument, and in an array context a list is returned in which each elementis the soundex code for the corresponding argument passed to<tt CLASS=literal>soundex()</tt>.<P CLASS=para>For example:<DIV CLASS=programlisting><P><PRE>@codes = soundex qw(Mike Stok);</PRE></DIV><P CLASS=para>leaves <tt CLASS=literal>@codes</tt> containing <tt CLASS=literal>('M200', 'S320')</tt>.<P CLASS=para>Here are Knuth's examples of various names and the soundex codes they map to:<DIV CLASS=informaltable><P><A NAME="PERL2-CH-7-TAB-17"></A><TABLE CLASS=INFORMALTABLE><TR CLASS=row><TH ALIGN="left">Names</TH><TH ALIGN="left">Code</TH></TR><TR CLASS=row><TD ALIGN="left">Euler, Ellery</TD><TD ALIGN="left"><tt CLASS=literal>E460</tt></TD></TR><TR CLASS=row><TD ALIGN="left">Gauss, Ghosh</TD><TD ALIGN="left"><tt CLASS=literal>G200</tt></TD></TR><TR CLASS=row><TD ALIGN="left">Hilbert, Heilbronn</TD><TD ALIGN="left"><tt CLASS=literal>H416</tt></TD></TR><TR CLASS=row><TD ALIGN="left">Knuth, Kant</TD><TD ALIGN="left"><tt CLASS=literal>K530</tt></TD></TR><TR CLASS=row><TD ALIGN="left">Lloyd, Ladd</TD><TD ALIGN="left"><tt CLASS=literal>L300</tt></TD></TR><TR CLASS=row><TD ALIGN="left">Lukasiewicz, Lissajous</TD><TD ALIGN="left"><tt CLASS=literal>L222</tt></TD></TR></TABLE><P></DIV><P CLASS=para>So we have:<DIV CLASS=programlisting><P><PRE>$code = soundex 'Knuth';              # $code contains 'K530'@list = soundex qw(Lloyd Gauss);      # @list contains 'L300', 'G200'</PRE></DIV><P CLASS=para>As the soundex algorithm was originally used a <I CLASS=emphasis>long</I> time ago in the United States,it considers only the English alphabet and pronunciation.<P CLASS=para>As it is mapping a large space (arbitrary-length strings) onto a smallspace (single letter plus three digits), no inference can be made about thesimilarity of two strings that end up with the same soundex code.  Forexample, both <tt CLASS=literal>Hilbert</tt> and <tt CLASS=literal>Heilbronn</tt> end up with a soundex codeof <tt CLASS=literal>H416</tt>.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.70">Text::Tabs--Expand and Unexpand Tabs</A></h3><DIV CLASS=programlisting><P><PRE>use Text::Tabs;$tabstop = 8;                            # set tab spacing to 8 (default)print expand("Hello\tworld");            # convert tabs to spaces in outputprint unexpand("Hello,        world");   # convert spaces to tabs in output$tabstop = 4;                            # set tab spacing to 4print join("\n", expand(split(/\n/,                "Hello\tworld, \nit's a nice day.\n")));</PRE></DIV><P CLASS=para>This module expands tabs into spaces and "unexpands" spaces into tabs,in the manner of the UNIX <I CLASS=emphasis>expand</I> (1) and <I CLASS=emphasis>unexpand</I> (1) programs.All tabs and spaces--not only leading ones--are subject to being expandedand unexpanded.<P CLASS=para>Both <tt CLASS=literal>expand()</tt> and <tt CLASS=literal>unexpand()</tt> take as argument an array ofstrings, which are returned with tabs or spaces transformed.  Newlinesmay not be included in the strings, and should be used to splitstrings into separate elements before they are passed to <tt CLASS=literal>expand()</tt>and <tt CLASS=literal>unexpand()</tt>.<P CLASS=para><tt CLASS=literal>expand()</tt>, <tt CLASS=literal>unexpand()</tt>, and <tt CLASS=literal>$tabstop</tt> are imported intoyour program when you <A HREF="ch03_02.htm#PERL2-CMD-USE">use</A> this module.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.71">Text::Wrap--Wrap Text into a Paragraph</A></h3><DIV CLASS=programlisting><P><PRE>use Text::Wrap;$Text::Wrap::columns = 20; # default is 76$pre1 = "\t";              # prepend this to first line of paragraph$pre2 = "";                # prepend this to subsequent linesprint wrap($pre1, $pre2, "Hello, world, it's a nice day, isn't it?");</PRE></DIV><P CLASS=para>This module is a simple paragraph formatter that wraps text into a paragraphand indents each line.  The single exported function, <tt CLASS=literal>wrap()</tt>, takes threearguments:  a string to prepend to the first output line; a string toprepend to each subsequent output line; and the text to be wrapped.<P CLASS=para><tt CLASS=literal>$columns</tt> is exported on request.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.72">Tie::Hash, Tie::StdHash--Base Class Definitions for Tied Hashes</A></h3><DIV CLASS=programlisting><P><PRE>package NewHash;require Tie::Hash;@ISA = (Tie::Hash);sub DELETE { ... }          # Provides additional methodsub CLEAR { ... }           # Overrides inherited methodpackage NewStdHash;require Tie::Hash;@ISA = (Tie::StdHash);sub DELETE { ... }package main;tie %new_hash, "NewHash";tie %new_std_hash, "NewStdHash";</PRE></DIV><P CLASS=para>This module provides some skeletal methods for hash-tying classes.  (See<A HREF="ch05_01.htm">Chapter 5, <i>Packages, Modules, and Object Classes</i></A> for a list of the functions required in order to tie a hash toa package.)  The basic Tie::Hash package provides a <tt CLASS=literal>new()</tt> method,as well as methods <tt CLASS=literal>TIEHASH()</tt>, <tt CLASS=literal>EXISTS()</tt> and <tt CLASS=literal>CLEAR()</tt>.  TheTie::StdHash package provides most methods required for hashes.  Itinherits from Tie::Hash, and causes tied hashes to behave exactly likestandard hashes, allowing for selective overloading of methods.  The<tt CLASS=literal>new()</tt> method is provided as grandfathering in case a class forgetsto include a <tt CLASS=literal>TIEHASH()</tt> method.<P CLASS=para>For developers wishing to write their own tied hashes, the required methodsare briefly defined below.  (<A HREF="ch05_01.htm">Chapter 5, <i>Packages, Modules, and Object Classes</i></A> not only documents these methods, but alsohas sample code.)<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>TIEHASH</tt> <tt CLASS=replaceable><i>ClassName</i></tt>, <tt CLASS=replaceable><i>LIST</i></tt><DD><P CLASS=para>The method invoked by the command:<DIV CLASS=programlisting><P><PRE>tie %hash, <tt CLASS=replaceable><i>ClassName</i></tt>, <tt CLASS=replaceable><i>LIST</i></tt></PRE></DIV><P CLASS=para>Associates a newhash instance with the specified class. <tt CLASS=replaceable><i>LIST</i></tt> would represent additionalarguments (along the lines of AnyDBM_File and compatriots) needed tocomplete the association.<p><DT CLASS=varlistentry><tt CLASS=literal>STORE</tt> <tt CLASS=replaceable><i>this, key, value</i></tt><DD><P CLASS=para>Store <tt CLASS=replaceable><i>value</i></tt> into <tt CLASS=replaceable><i>key</i></tt> for the tied hash <tt CLASS=replaceable><i>this</i></tt>.<p><DT CLASS=varlistentry><tt CLASS=literal>FETCH</tt> <tt CLASS=replaceable><i>this, key</i></tt><DD><P CLASS=para>Retrieve the value associated with <tt CLASS=replaceable><i>key</i></tt> for the tied hash <tt CLASS=replaceable><i>this</i></tt>.<p><DT CLASS=varlistentry><tt CLASS=literal>FIRSTKEY</tt> <tt CLASS=replaceable><i>this</i></tt><DD><P CLASS=para>Return the key/value pair for the first key in hash <tt CLASS=replaceable><i>this</i></tt>.<p><DT CLASS=varlistentry><tt CLASS=literal>NEXTKEY</tt> <tt CLASS=replaceable><i>this, lastkey</i></tt><DD><P CLASS=para>Return the next key/value pair for the hash.<p><DT CLASS=varlistentry><tt CLASS=literal>EXISTS</tt> <tt CLASS=replaceable><i>this, key</i></tt><DD><P CLASS=para>Verify that <tt CLASS=replaceable><i>key</i></tt> exists with the tied hash <tt CLASS=replaceable><i>this</i></tt>.<p><DT CLASS=varlistentry><tt CLASS=literal>DELETE</tt> <tt CLASS=replaceable><i>this, key</i></tt><DD><P CLASS=para>Delete <tt CLASS=replaceable><i>key</i></tt> from the tied hash <tt CLASS=replaceable><i>this</i></tt>.<p><DT CLASS=varlistentry><tt CLASS=literal>CLEAR</tt> <tt CLASS=replaceable><i>this</i></tt><DD><P CLASS=para>Clear all values from the tied hash <tt CLASS=replaceable><i>this</i></tt>.</DL><P CLASS=para><A HREF="ch05_01.htm">Chapter 5, <i>Packages, Modules, and Object Classes</i></A> includes a method called <tt CLASS=literal>DESTROY()</tt> as a "necessary" methodfor tied hashes.  However, it is not actually required, and neitherTie::Hash nor Tie::StdHash defines a default for this method.<DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.100">See also</A></h4><P CLASS=para>The library modules relating to various DBM-related implementations(DB_File, GDBM_File, NDBM_File, ODBM_File, and SDBM_File) show examplesof general tied hashes, as does the Config module.  While these modulesdo not utilize Tie::Hash, they serve as good working examples.</DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.73">Tie::Scalar, Tie::StdScalar--Base Class Definitions for Tied Scalars</A></h3><DIV CLASS=programlisting><P><PRE>package NewScalar;require Tie::Scalar;@ISA = (Tie::Scalar);sub FETCH { ... }           # Provides additional methodsub TIESCALAR { ... }       # Overrides inherited methodpackage NewStdScalar;require Tie::Scalar;@ISA = (Tie::StdScalar);sub FETCH { ... }package main;tie $new_scalar, "NewScalar";tie $new_std_scalar, "NewStdScalar";</PRE></DIV><P CLASS=para>This module provides some skeletal methods for scalar-tying classes.(See <A HREF="ch05_01.htm">Chapter 5, <i>Packages, Modules, and Object Classes</i></A> for a list of the functions required in tying a scalar toa package.)  The basic Tie::Scalar package provides a <tt CLASS=literal>new()</tt>method, as wellas methods <tt CLASS=literal>TIESCALAR()</tt>, <tt CLASS=literal>FETCH()</tt> and <tt CLASS=literal>STORE()</tt>.  TheTie::StdScalar package provides all methods specified in <A HREF="ch05_01.htm">Chapter 5, <i>Packages, Modules, and Object Classes</i></A>.It inherits fromTie::Scalar and causes scalars tied to it to behave exactly like thebuilt-in scalars, allowing for selective overloading of methods.  The <tt CLASS=literal>new()</tt>method is provided as a means of grandfathering for classes that forget toprovide their own <tt CLASS=literal>TIESCALAR()</tt> method.<P CLASS=para>For developers wishing to write their own tied-scalar classes, methodsare summarized below.(<A HREF="ch05_01.htm">Chapter 5, <i>Packages, Modules, and Object Classes</i></A> not only documents these, butalso has sample code.)<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>TIESCALAR</tt> <tt CLASS=replaceable><i>ClassName</i></tt>, <tt CLASS=replaceable><i>LIST</i></tt><DD><P CLASS=para>The method invoked by the command:<DIV CLASS=programlisting><P><PRE>tie $scalar, ClassName, <tt CLASS=replaceable><i>LIST</i></tt></PRE></DIV><P CLASS=para>Associates a newscalar instance with the specified class. <tt CLASS=replaceable><i>LIST</i></tt> would representadditional arguments (along the lines of the AnyDBM_File library module andassociated modules) needed to complete the association.<p><DT CLASS=varlistentry><tt CLASS=literal>FETCH</tt> <tt CLASS=replaceable><i>this</i></tt><DD><P CLASS=para>Retrieve the value of the tied scalar referenced by <tt CLASS=replaceable><i>this</i></tt>.<p><DT CLASS=varlistentry><tt CLASS=literal>STORE</tt> <tt CLASS=replaceable><i>this, value</i></tt><DD><P CLASS=para>Store <tt CLASS=replaceable><i>value</i></tt> in the tied scalar referenced by <tt CLASS=replaceable><i>this</i></tt>.<p><DT CLASS=varlistentry><tt CLASS=literal>DESTROY</tt> <tt CLASS=replaceable><i>this</i></tt><DD><P CLASS=para>Free the storage associated with the tied scalar referenced by <tt CLASS=replaceable><i>this</i></tt>.This is rarely needed, since Perl manages its memory well.  But theoption exists, should a class wish to perform specific actions upon thedestruction of an instance.</DL><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="PERL2-CH-7-SECT-1.101">See also</A></h4><P CLASS=para><A HREF="ch05_01.htm">Chapter 5, <i>Packages, Modules, and Object Classes</i></A> has a good example using tied scalars toassociate process IDs with priority.</DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.74">Tie::SubstrHash--Fixed-table-size, Fixed-key-length Hashing</A></h3><DIV CLASS=programlisting><P><PRE>require Tie::SubstrHash;tie %myhash, "Tie::SubstrHash", $key_len, $value_len, $table_size;</PRE></DIV><P CLASS=para>The Tie::SubstrHash package provides a hash table-like interface toan array of determinate size, with constant key size and record size.<P CLASS=para>Upon tying a new hash to this package, the developer must specify thesize of the keys that will be used, the size of the value fields that thekeys will index, and the size of the overall table (in terms of the numberof key/value pairs, not hard memory). <I CLASS=emphasis>These values will not change for theduration of the tied hash</I>.  The newly allocated hash table may now havedata stored and retrieved.  Efforts to store more than <tt CLASS=literal>$table_size</tt>elements will result in a fatal error, as will efforts to store a valuenot exactly <tt CLASS=literal>$value_len</tt> characters in length, or to reference through akey not exactly <tt CLASS=literal>$key_len</tt> characters in length.  While these constraintsmay seem excessive, the result is a hash table using much less internalmemory than an equivalent freely allocated hash table.<P CLASS=para>Because the current implementation uses the table and key sizes for thehashing algorithm, there is no means by which to dynamically change thevalue of any of the initialization parameters.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.75">Time::Local--Efficiently Compute Time from Local and GMT Time</A></h3><DIV CLASS=programlisting><P><PRE>use Time::Local;$time = timelocal($sec, $min, $hours, $mday, $mon, $year);$time = timegm($sec, $min, $hours, $mday, $mon, $year);</PRE></DIV><P CLASS=para>These routines take a series of arguments specifying a local(<tt CLASS=literal>timelocal()</tt>) or Greenwich (<tt CLASS=literal>timegm()</tt>) time, and return thenumber of seconds elapsed between January 1, 1970, and the specified time.The arguments are defined like the corresponding arguments returned byPerl's <A HREF="ch03_02.htm#PERL2-CMD-GMTIME">gmtime</A> and <A HREF="ch03_02.htm#PERL2-CMD-LOCALTIME">localtime</A> functions.<P CLASS=para>The routines are very efficient and yet are always guaranteed to agreewith the <A HREF="ch03_02.htm#PERL2-CMD-GMTIME">gmtime</A> and <A HREF="ch03_02.htm#PERL2-CMD-LOCALTIME">localtime</A> functions.  That is,if you pass the value returned by <A HREF="ch03_02.htm#PERL2-CMD-TIME">time</A> to <A HREF="ch03_02.htm#PERL2-CMD-LOCALTIME">localtime</A>, and ifyou then pass the values returned by <A HREF="ch03_02.htm#PERL2-CMD-LOCALTIME">localtime</A> to<tt CLASS=literal>timelocal()</tt>, the returned value from <tt CLASS=literal>timelocal()</tt> will bethe same as the value originally returned from <A HREF="ch03_02.htm#PERL2-CMD-TIME">time</A>.<P CLASS=para>Both routines return <tt CLASS=literal>-1</tt> if the integer limit is hit.  On mostmachines this applies to dates after January 1, 2038.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="ch07-SECT2-AUTOID.76">vars--Predeclare Global Variable Names</A></h3><DIV CLASS=programlisting><P><PRE>use vars qw($frob @mung %seen);</PRE></DIV><P CLASS=para>This module predeclares all variables whose names arein the list, allowing you to use them under <tt CLASS=literal>use strict</tt>, anddisabling any typo warnings.<P CLASS=para>Packages such as the AutoLoader and SelfLoader that delay loadingof subroutines within packages can create problems with file-scoped lexicalsdefined using <A HREF="ch03_02.htm#PERL2-CMD-MY">my</A>.  This is because they move the subroutines outsidethe scope of the lexical variables.While the <tt CLASS=literal>use vars</tt> pragma cannot duplicate theeffect of file-scoped lexicals (total transparency outside of the file),it can act as an acceptable substitute by pre-declaring global symbols,ensuring their availability to the routines whose loading was delayed.<P CLASS=para>See also the <tt CLASS=literal>subs</tt> module.</DIV></DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch07_01.htm"><IMG SRC="gifs/txtpreva.gif"     ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="ch08_01.htm"><IMG SRC="gifs/txtnexta.gif"     ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>Beyond the Standard Library</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>Other Oddments</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>