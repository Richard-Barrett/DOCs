<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 8] 8.4 Programming with Style</TITLE><META NAME="author" CONTENT="Larry Wall, Tom Christiansen, and Randal Schwartz"><META NAME="date" CONTENT="Mon Mar 17 13:20:25 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="Perl"><META NAME="title" CONTENT="Programming Perl, Second Edition"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif"     ALT="Programming Perl, Second Edition"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch08_03.htm"><IMG SRC="gifs/txtpreva.gif"     ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 8</b></td><td width=172 align=right valign=top><A HREF="ch08_05.htm"><IMG SRC="gifs/txtnexta.gif"     ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="PERL2-CH-8-SECT-4">8.4 Programming with Style</A></h2><P CLASS=para><A NAME="CH08.STYLE1"></A><A NAME="CH08.STYLE2"></A><A NAME="CH08.STYLE3"></A>Each programmer will, of course, have his or her own preferences in regards toformatting, but there are some general guidelines that will make yourprograms easier to read, understand, and maintain.<P CLASS=para>The most important thing is to run your programs under the <B>-w</B> flag at all times.  You may turn it off explicitlyfor particular portions of code via the <B>$^W</B>variable if you must.  You should also always run under <tt CLASS=literal>usestrict</tt> or know the reason why not.  The <tt CLASS=literal>use sigtrap</tt>and even the <tt CLASS=literal>use diagnostics</tt> pragmas may also prove ofbenefit.<P CLASS=para>Regarding aesthetics of code layout, about the only thing Larry cares stronglyabout is that the closing brace of a multi-line <tt CLASS=replaceable><i>BLOCK</i></tt>should line up in the same column as the start of the keyword that started theconstruct.  Beyond that, he has other preferences that aren't so strong.Examples in this book (should) all follow these coding conventions.<P><UL CLASS=itemizedlist><li CLASS=listitem>Four-column indent.<P><li CLASS=listitem>An opening brace should be put on the same line as its precedingkeyword, if possible; otherwise, line them up vertically.<DIV CLASS=programlisting><P><PRE>while ($condition) {	# for short ones, align with keywords    # do something} # if the condition wraps, line up the  braces with each otherwhile ($this_condition and $that_condition       and $this_other_long_condition) {    # do something}</PRE></DIV><P CLASS=para><P><li CLASS=listitem>Put space before the opening brace of a multi-line <tt CLASS=replaceable><i>BLOCK</i></tt>.<P><li CLASS=listitem>A one-line <tt CLASS=replaceable><i>BLOCK</i></tt> may be put on one line, including braces.<P><li CLASS=listitem>Do not put space before a semicolon.<P><li CLASS=listitem>Omit the semicolon in a short, one-line <tt CLASS=replaceable><i>BLOCK</i></tt>.<P><li CLASS=listitem>Surround most operators with space.<P><li CLASS=listitem>Surround a "complex" subscript (inside brackets) with space.<P><li CLASS=listitem>Put blank lines between chunks of code that do different things.<P><li CLASS=listitem>Put a newline between a closing brace and <B>else</B>.<P><li CLASS=listitem>Do not put space between a function name and its opening parenthesis.<P><li CLASS=listitem>Put space after each comma.<P><li CLASS=listitem>Break long lines after an operator (but before <B>and</B> and <B>or</B>).<P><li CLASS=listitem>Line up corresponding items vertically.<P><li CLASS=listitem>Omit redundant punctuation as long as clarity doesn't suffer.<P></UL><P CLASS=para>Larry has his reasons for each of these things, but he doesn't claim thateveryone else's mind works the same as his does.<P CLASS=para>Here are some other, more substantive style issues to think about:<P><UL CLASS=itemizedlist><li CLASS=listitem>Just because you <I CLASS=emphasis>can</I> do something a particular way doesn't meanyou <I CLASS=emphasis>should</I> do it that way.  Perl is designed to give you severalways to do anything, so consider picking the most readable one.  Forinstance:<DIV CLASS=programlisting><P><PRE>open(FOO,$foo) || die "Can't open $foo: $!";</PRE></DIV><P CLASS=para>is better than:<DIV CLASS=programlisting><P><PRE>die "Can't open $foo: $!" unless open(FOO,$foo);</PRE></DIV><P CLASS=para>because the second way hides the main point of the statement in amodifier.  On the other hand<DIV CLASS=programlisting><P><PRE>print "Starting analysis\n" if $verbose;</PRE></DIV><P CLASS=para>is better than:<DIV CLASS=programlisting><P><PRE>$verbose &amp;&amp; print "Starting analysis\n";</PRE></DIV><P CLASS=para>since the main point isn't whether the user typed <B>-v</B> or not.<P CLASS=para>Similarly, just because an operator lets you assume default arguments doesn'tmean that you have to make use of the defaults.  The defaults are there for lazysystems programmers writing one-shot programs.  If you want your program to bereadable, consider supplying the argument.<P CLASS=para>Along the same lines, just because you <I CLASS=emphasis>can</I> omit parentheses in manyplaces doesn't mean that you ought to:<DIV CLASS=programlisting><P><PRE>return print reverse sort num values %array;return print(reverse(sort num (values(%array))));</PRE></DIV><P CLASS=para>When in doubt, parenthesize.  At the very least it will let some poorschmuck bounce on the % key in <I CLASS=emphasis>vi</I>.<P CLASS=para>Even if <I CLASS=emphasis>you</I> aren't in doubt, consider the mental welfare of the personwho has to maintain the code after you, and who will probably putparentheses in the wrong place.<P><li CLASS=listitem>Don't go through silly contortions to exit a loop at the top orthe bottom.  Perl provides the <A HREF="ch03_02.htm#PERL2-CMD-LAST">last</A> operatorso you can exit in the middle.  Just "outdent" it to make it more visible:<DIV CLASS=programlisting><P><PRE>LINE:    for (;;) {        statements;      last LINE if $foo;        next LINE if /^#/;        statements;    }</PRE></DIV><P CLASS=para><P><li CLASS=listitem>Don't be afraid to use loop labels--they're there to enhancereadability as well as to allow multi-level loop breaks.  See the example just given.<P><li CLASS=listitem> Avoid using <A HREF="ch03_02.htm#PERL2-CMD-GREP">grep</A>,<A HREF="ch03_02.htm#PERL2-CMD-MAP">map</A>, or backticks in a void context;that is, when you just throw away their return values.  Thosefunctions all have return values, so use them.  Otherwise, use a<B>foreach</B> loop or the <A HREF="ch03_02.htm#PERL2-CMD-SYSTEM">system</A> function.  <P><li CLASS=listitem> For portability, when using features that may not beimplemented on every machine, test the construct in an <A HREF="ch03_02.htm#PERL2-CMD-EVAL">eval</A> to see whether it fails.  If you know theversion or patchlevel of a particular feature, you can test <B>$]</B> (<tt CLASS=literal>$PERL_VERSION</tt> in theEnglish module) to see whether the feature is there.  The Configmodule will also let you interrogate values determined by the<I CLASS=emphasis>Configure</I> program when Perl was installed.<P><li CLASS=listitem>Choose mnemonic identifiers.  If you can't remember what mnemonic means,you've got a problem.<P><li CLASS=listitem>While short identifiers like <tt CLASS=literal>$gotit</tt> areprobably OK, use underscores to separate words.  It is generally much easier to read<tt CLASS=literal>$var_names_like_this</tt> than<tt CLASS=literal>$VarNamesLikeThis</tt>, especially for non-native speakers ofEnglish.  Besides, the same rule works for <tt CLASS=literal>$VAR_NAMES_LIKE_THIS</tt>.<P CLASS=para>Package names are sometimes an exception to this rule.  Perl informallyreserves lowercase module names for pragmatic modules like <tt CLASS=literal>integer</tt> and<tt CLASS=literal>strict</tt>.  Other modules should begin with a capital letter and use mixedcase, but probably without underscores due to name-length limitations ofsome primitive filesystems.<P><li CLASS=listitem>You may find it helpful to use letter case to indicate the scope or nature of a variable. For example:<DIV CLASS=programlisting><P><PRE>$ALL_CAPS_HERE   # constants only (beware clashes with Perl vars!)  $Some_Caps_Here  # package-wide global/static $no_caps_here    # function scope my() or local() variables</PRE></DIV><P CLASS=para>Function and method names seem to work best as all lowercase. For example, <tt CLASS=literal>$obj-&gt;as_string()</tt>. <P CLASS=para>You can use a leading underscore to indicate that a variable orfunction should not be used outside the package that defined it.<P><li CLASS=listitem>If you have a really hairy regular expression, use the <B>/x</B> modifier and put in some whitespace to make it look alittle less like line noise.<P><li CLASS=listitem>Don't use slash as a delimiter when your regexp has slashes or backslashes.<P><li CLASS=listitem>Don't use quotes as a delimiter when your string contains that samequote.  Use the <tt CLASS=literal>q//</tt>, <tt CLASS=literal>qq//</tt>, or<tt CLASS=literal>qx//</tt> pseudofunctions instead.  <P><li CLASS=listitem>Use the <B>and</B> and <B>or</B> operators to avoid having to parenthesize listoperators so much, and to reduce the incidence of punctuationaloperators like <tt CLASS=literal>&amp;&amp;</tt> and<tt CLASS=literal>||</tt>.  Call your subroutines as if they werefunctions or list operators to avoid excessive ampersands andparentheses.  <P><li CLASS=listitem>Use "here" documents instead of repeated <A HREF="ch03_02.htm#PERL2-CMD-PRINT">print</A> statements.<P><li CLASS=listitem>Line up corresponding things vertically, especially if they're too longto fit on one line anyway.<DIV CLASS=programlisting><P><PRE>$IDX = $ST_MTIME;       $IDX = $ST_ATIME       if $opt_u; $IDX = $ST_CTIME       if $opt_c;     $IDX = $ST_SIZE        if $opt_s;mkdir $tmpdir, 0700 or die "can't mkdir $tmpdir: $!";chdir($tmpdir)      or die "can't chdir $tmpdir: $!";mkdir 'tmp',   0777 or die "can't mkdir $tmpdir/tmp: $!";</PRE></DIV><P><li CLASS=listitem>That which I tell you three times is true:Always check the return codes of system calls.  , <I CLASS=emphasis>Always check the return codes of system calls.</I>, and <I CLASS=emphasis>ALWAYS CHECK THE RETURN CODES OF SYSTEM CALLS!</I><P CLASS=para>Error messages should go to <tt CLASS=literal>STDERR</tt>, and should say which programcaused the problem and what the failed system call and arguments were.Most importantly, they should contain the standard system error message forwhat went wrong.  Here's a simple but sufficient example:<DIV CLASS=programlisting><P><PRE>opendir(D, $dir)     or die "can't opendir $dir: $!";</PRE></DIV><P><li CLASS=listitem>Line up your translations when it makes sense:<DIV CLASS=programlisting><P><PRE>tr [abc]   [xyz];</PRE></DIV><P><li CLASS=listitem> Think about reusability.  Why waste brainpower on aone-shot script when you might want to do something like it again?Consider generalizing your code.  Consider writing a module or objectclass.  Consider making your code run cleanly with <tt CLASS=literal>usestrict</tt> and <B>-w</B> in effect.Consider giving away your code.  Consider changing your whole worldview.  Consider . . . oh, never mind.  <P><li CLASS=listitem>Be consistent.<P><li CLASS=listitem>Be nice.<P></UL></DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch08_03.htm"><IMG SRC="gifs/txtpreva.gif"     ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="ch08_05.htm"><IMG SRC="gifs/txtnexta.gif"     ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>Efficiency</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>Distribution and Installation</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>