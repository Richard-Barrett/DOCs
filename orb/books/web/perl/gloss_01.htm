<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Glossary 10] Glossary</TITLE><META NAME="author" CONTENT="Larry Wall, Tom Christiansen, and Randal Schwartz"><META NAME="date" CONTENT="Mon Mar 17 13:26:09 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="Perl"><META NAME="title" CONTENT="Programming Perl, Second Edition"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF" TEXT="#000000"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif"     ALT="Programming Perl, Second Edition"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch09_01.htm"><IMG SRC="gifs/txtpreva.gif"     ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Glossary 10</b></td><td width=172 align=right valign=top>&nbsp;</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><DIV CLASS=glossary><H1 CLASS=glossary><A CLASS="TITLE" NAME="PERL2-APPA">Glossary</A></H1><DL><DT CLASS=glossentry><A NAME="G-ACTUAL-ARGUMENTS">actual arguments</A><DD CLASS=glossdef><P CLASS=para>The <I CLASS=emphasis>scalar values</I> that you supply to a <A HREF="gloss_01.htm#G-FUNCTION"><I CLASS=emphasis>function</I></A> or<A HREF="gloss_01.htm#G-SUBROUTINE"><I CLASS=emphasis>subroutine</I></A> when you call it.  For instance, when you call<tt CLASS=literal>piglatin(`bingo`)</tt>, the string <tt CLASS=literal>"bingo"</tt> is the actualargument. See also <A HREF="gloss_01.htm#G-ARGUMENT"><I CLASS=emphasis>argument</I></A> [1] and <A HREF="gloss_01.htm#G-FORMAL-ARGUMENTS"><I CLASS=emphasis>formal arguments</I></A>.<blockquote class=footnote><P CLASS=para>[1] When we italicize a word or phrase in here, it usually means you canfind it defined elsewhere in the Glossary.  Think of them as hyperlinks.</blockquote><P><DT CLASS=glossentry><A NAME="G-ADDRESS-OPERATOR">address operator</A><DD CLASS=glossdef><P CLASS=para>A language construct formanipulating the actual location of an object in your computer's memory.Strictly speaking, there are no such operators in Perl, since it handlesall that for you automatically.  You tell Perl that you want a new<A HREF="gloss_01.htm#G-THINGY"><I CLASS=emphasis>thingy</I></A>, and Perl worries about creating, moving, anddestroying the thingy for you.  Not so strictly speaking, the backslashoperator returns a reference to a thingy, which works much like anaddress.  See also <A HREF="gloss_01.htm#G-NETWORK-ADDRESS"><I CLASS=emphasis>network address</I></A>.<P><DT CLASS=glossentry><A NAME="G-ALTERNATIVES">alternatives</A><DD CLASS=glossdef><P CLASS=para>A list of possible choices from which you may select only one, as in"Would you like door A, B, or C?"  Alternatives in regular expressionsare separated with a vertical bar: <tt CLASS=literal>|</tt>.  Alternatives in normalPerl expressions are separated with a double vertical bar: <tt CLASS=literal>||</tt>.You might say there are two alternatives for alternatives.  (Then again,you might not.  Your choice.)<P><DT CLASS=glossentry><A NAME="G-ANONYMOUS">anonymous</A><DD CLASS=glossdef><P CLASS=para>Used to describe a <A HREF="gloss_01.htm#G-THINGY"><I CLASS=emphasis>thingy</I></A> that is not directly accessible through anamed <A HREF="gloss_01.htm#G-VARIABLE"><I CLASS=emphasis>variable</I></A>.  Such a thingy must be indirectly accessible through atleast one <A HREF="gloss_01.htm#G-HARD-REFERENCE"><I CLASS=emphasis>hard reference</I></A>.  When the last hard reference goes away, theanonymous thingy is destroyed without pity.<P><DT CLASS=glossentry><A NAME="G-ARCHITECTURE">architecture</A><DD CLASS=glossdef><P CLASS=para>The kind of computer you're working on, where one "kind" of computermeans all those computers that can run the same <A HREF="gloss_01.htm#G-BINARY"><I CLASS=emphasis>binary</I></A> program.  SincePerl scripts are text files, not binaries, a Perl script is much lesssensitive to the architecture it's running on than programs in otherlanguages (such as C) that are compiled into machine code.See also <A HREF="gloss_01.htm#G-OPERATING-SYSTEM"><I CLASS=emphasis>operating system</I></A>.<P><DT CLASS=glossentry><A NAME="G-ARGUMENT">argument</A><DD CLASS=glossdef><P CLASS=para>A piece of data supplied as input to a <I CLASS=emphasis>program</I>, <A HREF="gloss_01.htm#G-SUBROUTINE"><I CLASS=emphasis>subroutine</I></A>, or<A HREF="gloss_01.htm#G-FUNCTION"><I CLASS=emphasis>function</I></A> when it is invoked to tell it what it's supposed to do.Also called a "parameter".<P><DT CLASS=glossentry><A NAME="G-ARGV">ARGV</A><DD CLASS=glossdef><P CLASS=para>The name of the array containing the <A HREF="gloss_01.htm#G-ARGUMENT"><I CLASS=emphasis>argument</I></A> "vector" from the<A HREF="gloss_01.htm#G-COMMAND"><I CLASS=emphasis>command</I></A><A HREF="gloss_01.htm#G-LINE"><I CLASS=emphasis>line</I></A>.  If you usethe empty <tt CLASS=literal>&lt;&gt;</tt> operator, <B>ARGV</B> is both the name of the <A HREF="gloss_01.htm#G-FILEHANDLE"><I CLASS=emphasis>filehandle</I></A> used totraverse the arguments, and of the <A HREF="gloss_01.htm#G-SCALAR"><I CLASS=emphasis>scalar</I></A> containing the nameof the current input file.  It's also what you say to your dentist when theNovocaine isn't working.<P><DT CLASS=glossentry><A NAME="G-ARITHMETIC-OPERATOR">arithmetic operator</A><DD CLASS=glossdef><P CLASS=para>A symbol such as <tt CLASS=literal>+</tt> or <tt CLASS=literal>**</tt> that tells Perl to do arithmetic.In addition, see <A HREF="gloss_01.htm#G-OPERATOR"><I CLASS=emphasis>operator</I></A>.<P><DT CLASS=glossentry><A NAME="G-ARRAY">array</A><DD CLASS=glossdef><P CLASS=para>A named list of values, each of which has a unique <A HREF="gloss_01.htm#G-KEY"><I CLASS=emphasis>key</I></A> to identify it.In a normal array, the key is numeric (an integer, in fact).In a <A HREF="gloss_01.htm#G-HASH"><I CLASS=emphasis>hash</I></A> (an associative array), the key is a string.<P><DT CLASS=glossentry><A NAME="G-ARRAY-CONTEXT">array context</A><DD CLASS=glossdef><P CLASS=para>A quaint, archaic expression used by people who have read the first editionof this book.  Nowadays called <A HREF="gloss_01.htm#G-LIST-CONTEXT"><I CLASS=emphasis>list context</I></A>.<P><DT CLASS=glossentry><A NAME="G-ARRAY-LITERAL">array literal</A><DD CLASS=glossdef><P CLASS=para>Strictly, a comma-separated, parenthesized <A HREF="gloss_01.htm#G-LIST"><tt CLASS=replaceable><i>LIST</i></tt></A>of <I CLASS=emphasis>scalar literals</I>.Used loosely to refer to any parenthesized <A HREF="gloss_01.htm#G-LIST"><tt CLASS=replaceable><i>LIST</i></tt></A> even if it contains<I CLASS=emphasis>variables</I> or <I CLASS=emphasis>expressions</I>.<P><DT CLASS=glossentry><A NAME="G-ARRAY-VALUE">array value</A><DD CLASS=glossdef><P CLASS=para>Another archaic phrase.  See <A HREF="gloss_01.htm#G-LIST-VALUE"><I CLASS=emphasis>list value</I></A>.<P><DT CLASS=glossentry><A NAME="G-ARRAY-VARIABLE">array variable</A><DD CLASS=glossdef><P CLASS=para>A named list that may be processed by <I CLASS=emphasis>functions</I> such as <A HREF="ch03_02.htm#PERL2-CMD-SHIFT">shift</A> and<A HREF="ch03_02.htm#PERL2-CMD-SPLICE">splice</A> that require an array name as the first <A HREF="gloss_01.htm#G-ARGUMENT"><I CLASS=emphasis>argument</I></A>.<P><DT CLASS=glossentry><A NAME="G-ASCII">ASCII</A><DD CLASS=glossdef><P CLASS=para>Used roughly to mean the American Standard Code for Information Interchange(a 7-bit character set), and any international extensions based on it.<P><DT CLASS=glossentry><A NAME="G-ASSIGNMENT">assignment</A><DD CLASS=glossdef><P CLASS=para>An operation whose mission in life is to change the value of a <A HREF="gloss_01.htm#G-VARIABLE"><I CLASS=emphasis>variable</I></A>.<P><DT CLASS=glossentry><A NAME="G-ASSIGNMENT-OPERATOR">assignment operator</A><DD CLASS=glossdef><P CLASS=para>A compound operator composed of an ordinary assignment together with someother operator, that changes the value of a variable in place, that is,relative to its old value.  For example,  <tt CLASS=literal>$a += 2</tt> adds <tt CLASS=literal>2</tt> to<tt CLASS=literal>$a</tt>.<P><DT CLASS=glossentry><A NAME="G-ASSOCIATIVE-ARRAY">associative array</A><DD CLASS=glossdef><P CLASS=para>See <A HREF="gloss_01.htm#G-HASH"><I CLASS=emphasis>hash</I></A>.<P><DT CLASS=glossentry><A NAME="G-ASSOCIATIVITY">associativity</A><DD CLASS=glossdef><P CLASS=para>Determines whether you do the left <A HREF="gloss_01.htm#G-OPERATOR"><I CLASS=emphasis>operator</I></A>first or the right <A HREF="gloss_01.htm#G-OPERATOR"><I CLASS=emphasis>operator</I></A>first, when you have "A <A HREF="gloss_01.htm#G-OPERATOR"><I CLASS=emphasis>operator</I></A> B <A HREF="gloss_01.htm#G-OPERATOR"><I CLASS=emphasis>operator</I></A> C", if the twooperators are of the same precedence.  Operators like <tt CLASS=literal>+</tt> are leftassociative, while operators like <tt CLASS=literal>**</tt> are right associative.  Seethe section "Operators" in <A HREF="ch02_01.htm">Chapter 2, <i>The Gory Details</i></A>, for a list of associativity.<P><DT CLASS=glossentry><A NAME="G-AUTOINCREMENT">autoincrement</A><DD CLASS=glossdef><P CLASS=para>To add one to something automatically.Usually used to describe the <tt CLASS=literal>++</tt> operator.<P><DT CLASS=glossentry><A NAME="G-AUTOSPLIT">autosplit</A><DD CLASS=glossdef><P CLASS=para>To split a stringautomatically on <A HREF="gloss_01.htm#G-WHITESPACE"><I CLASS=emphasis>whitespace</I></A>, such as the <B>-a</B> switch does in orderto emulate <A HREF="gloss_01.htm#G-AWK"><I CLASS=emphasis>awk</I></A>.<P><DT CLASS=glossentry><A NAME="G-AV">AV</A><DD CLASS=glossdef><P CLASS=para>Short for "array value", which refers to one of Perl's internal datatypes.  (Not to be confused with <A HREF="gloss_01.htm#G-ARRAY-VALUE"><I CLASS=emphasis>array value</I></A>, by which people usuallymean <A HREF="gloss_01.htm#G-LIST-VALUE"><I CLASS=emphasis>list value</I></A>.)An AV is a kind of <A HREF="gloss_01.htm#G-SV"><I CLASS=emphasis>SV</I></A>.<P><DT CLASS=glossentry><A NAME="G-AWK">awk</A><DD CLASS=glossdef><P CLASS=para>Descriptive editing term--short for "awkward".  Also coincidentallyrefers to a venerable text processing language from which Perlderived some of its ideas.<P><DT CLASS=glossentry><A NAME="G-BACKTRACKING">backtracking</A><DD CLASS=glossdef><P CLASS=para>The practice of saying, "If I had to do it allover, I'd do it differently," and then actually going back and doing itall over differently.  Mathematically speaking, it's returning from anunsuccessful recursion on a tree of possibilities.  Backtracking happensin Perl when it attempts to match patterns with a <I CLASS=emphasis>regularexpression</I>, and its earlier guesses don't pan out.<P><DT CLASS=glossentry><A NAME="G-BASE-CLASS">base class</A><DD CLASS=glossdef><P CLASS=para>A generic <A HREF="gloss_01.htm#G-OBJECT"><I CLASS=emphasis>object</I></A> <A HREF="gloss_01.htm#G-CLASS"><I CLASS=emphasis>class</I></A> fromwhich other more specific classes are derived genetically by<A HREF="gloss_01.htm#G-INHERITANCE"><I CLASS=emphasis>inheritance</I></A>.  Also called a "superclass" by people who respecttheir ancestors.<P><DT CLASS=glossentry><A NAME="G-BASICPLUS">BASIC/PLUS</A><DD CLASS=glossdef><P CLASS=para>Another ancient language, from whichPerl derived exactly one idea. OK, maybe two.[2]<blockquote class=footnote><P CLASS=para>[2] BASIC/PLUS is a registered trademark of Digital Equipment Corporation.And the answers are: statement modifiers and maybe formats.</blockquote><P><DT CLASS=glossentry><A NAME="G-BIG-ENDIAN">big-endian</A><DD CLASS=glossdef><P CLASS=para>From Swift:  someone who eats boiled eggs big end first.  Also used of computersthat store the most significant <A HREF="gloss_01.htm#G-BYTE"><I CLASS=emphasis>byte</I></A> of a word at a lower byte addressthan the least significant byte.  Often considered superior tolittle-endian machines.  See also <A HREF="gloss_01.htm#G-LITTLE-ENDIAN"><I CLASS=emphasis>little-endian</I></A>.<P><DT CLASS=glossentry><A NAME="G-BINARY">binary</A><DD CLASS=glossdef><P CLASS=para>Having to do with numbers represented in base two.  That meansthere are basically two numbers, zero and one.  Somepeople think in binary, as shown by the kinds of questions they ask:"Should we all use Perl or Java?"  Also used to describe a non-text file,presumably because such a file makes full use of all the binary bits inits bytes.<P><DT CLASS=glossentry><A NAME="G-BIT">bit</A><DD CLASS=glossdef><P CLASS=para>A very small piece of litter.Also a number in the range zero to one, inclusive.<P><DT CLASS=glossentry><A NAME="G-BIT-SHIFT">bit shift</A><DD CLASS=glossdef><P CLASS=para>The movement of bits left or right in a computer word, which has theeffect of multiplying or dividing by a power of two.<P><DT CLASS=glossentry><A NAME="G-BLESS">bless</A><DD CLASS=glossdef><P CLASS=para>In corporate life, to grant official approval to a thing, as in, "The VPof Engineering has blessed our WebCruncher project."  Similarly in Perl,to grant official approval to a <A HREF="gloss_01.htm#G-THINGY"><I CLASS=emphasis>thingy</I></A> so that it can function as aWebCruncher <A HREF="gloss_01.htm#G-OBJECT"><I CLASS=emphasis>object</I></A>.  See the <A HREF="ch03_02.htm#PERL2-CMD-BLESS">bless</A> function in <A HREF="ch03_01.htm">Chapter 3, <i>Functions</i></A>.<P><DT CLASS=glossentry><A NAME="G-PBLOCK">block</A><DD CLASS=glossdef><P CLASS=para>What a <A HREF="gloss_01.htm#G-PROCESS"><I CLASS=emphasis>process</I></A> does when it has to wait for something:"My process blocked waiting for the disk."  As an unrelated noun, itrefers to a large chunk of data, of a size that the <I CLASS=emphasis>operatingsystem</I> likes to deal with (normally a power of two such as<tt CLASS=literal>512</tt> or <tt CLASS=literal>8192</tt>).  Typically refers to a chunk of datathat's coming from or going to a disk file.<P><DT CLASS=glossentry><A NAME="G-BLOCK">BLOCK</A><DD CLASS=glossdef><P CLASS=para>A syntactic construct consisting of a sequence of Perl <I CLASS=emphasis>statements</I>bounded by braces. The <B>if</B> and <B>while</B> statements aredefined in terms of <A HREF="gloss_01.htm#G-BLOCK"><tt CLASS=replaceable><i>BLOCK</i></tt></A>s.  Sometimes we also say "block" to mean asequence of statements that act like a <A HREF="gloss_01.htm#G-BLOCK"><tt CLASS=replaceable><i>BLOCK</i></tt></A>, such as within an<A HREF="ch03_02.htm#PERL2-CMD-EVAL">eval</A> or a file, even though the statements aren't bounded bybraces.<P><DT CLASS=glossentry><A NAME="G-BLOCK-BUFFERING">block buffering</A><DD CLASS=glossdef><P CLASS=para>A method of making input and output efficient by doing it a block at atime.  By default, Perl does block buffering to disk files.  See<A HREF="gloss_01.htm#G-BUFFER"><I CLASS=emphasis>buffer</I></A> and <A HREF="gloss_01.htm#G-COMMAND-BUFFERING"><I CLASS=emphasis>command buffering</I></A>.<P><DT CLASS=glossentry><A NAME="G-BOOLEAN-CONTEXT">Boolean context</A><DD CLASS=glossdef><P CLASS=para>A special kind of <A HREF="gloss_01.htm#G-SCALAR-CONTEXT"><I CLASS=emphasis>scalar context</I></A> in which theprogram is expecting to decide whether the <A HREF="gloss_01.htm#G-SCALAR-VALUE"><I CLASS=emphasis>scalar value</I></A> returned by anexpression is <A HREF="gloss_01.htm#G-TRUE"><I CLASS=emphasis>true</I></A> or <A HREF="gloss_01.htm#G-FALSE"><I CLASS=emphasis>false</I></A>.  See <A HREF="gloss_01.htm#G-CONTEXT"><I CLASS=emphasis>context</I></A>.<P><DT CLASS=glossentry><A NAME="G-BREAKPOINT">breakpoint</A><DD CLASS=glossdef><P CLASS=para>A spot in your program where you've toldthe debugger to stop <I CLASS=emphasis>execution</I> so you can poke around and see whetheranything is wrong yet.<P><DT CLASS=glossentry><A NAME="G-BSD">BSD</A><DD CLASS=glossdef><P CLASS=para>A psychoactive drug, popular in the 80s, probably developed atU. C. Berkeley or thereabouts.  Similar in many ways to theprescription-only medication called "System V", but infinitely moreuseful.  (Or, at least, more fun.)  The full chemical name is "BerkeleyStandard Distribution".<P><DT CLASS=glossentry><A NAME="G-BUFFER">buffer</A><DD CLASS=glossdef><P CLASS=para>A temporary holding location for data.  <A HREF="gloss_01.htm#G-BLOCK-BUFFERING"><I CLASS=emphasis>Block buffering</I></A>means that the data is passed on to its destination whenever the buffer isfull.  <A HREF="gloss_01.htm#G-LINE-BUFFERING"><I CLASS=emphasis>Linebuffering</I></A> means that it's passed on whenever a completeline is received.  <A HREF="gloss_01.htm#G-COMMAND-BUFFERING"><I CLASS=emphasis>Commandbuffering</I></A> means that it's passed on after every<tt CLASS=literal>print</tt> command.  If your output is unbuffered, every byte istransmitted separately, without passing through a holding area.<P><DT CLASS=glossentry><A NAME="G-BYTE">byte</A><DD CLASS=glossdef><P CLASS=para>A piece of data worth eight <I CLASS=emphasis>bits</I> in most places.<P><DT CLASS=glossentry><A NAME="G-BYTECODE">bytecode</A><DD CLASS=glossdef><P CLASS=para>A pidgin-like language spoken among 'droids when they don't wish toreveal their orientation (see <A HREF="gloss_01.htm#G-ENDIAN"><I CLASS=emphasis>endian</I></A>).  Named after some similarlanguages spoken (for similar reasons) between compilers and interpretersin the late twentieth century.  These languages are characterized by representingeverything as a non-architecture-dependent sequence of bytes.<P><DT CLASS=glossentry><A NAME="G-C">C</A><DD CLASS=glossdef><P CLASS=para>A language beloved by many for its inside-out type definitions, inscrutableprecedence rules, and heavy <A HREF="gloss_01.htm#G-OVERLOADING"><I CLASS=emphasis>overloading</I></A> of the function-call mechanism.(Well, actually, people first switched to C because they foundlower-case identifiers easier to read than upper.)The Perl <A HREF="gloss_01.htm#G-INTERPRETER"><I CLASS=emphasis>interpreter</I></A> is written in C, so it's not surprisingthat Perl borrowed a few ideas from it.<P><DT CLASS=glossentry><A NAME="G-C-PREPROCESSOR">C preprocessor</A><DD CLASS=glossdef><P CLASS=para>The typical C compiler's first pass, which processes lines beginningwith <tt CLASS=literal>#</tt> for conditional compilation and macro definition, anddoes various manipulations of the program text based on the currentdefinitions.  Also known as <I CLASS=emphasis>cpp</I> (1).<P><DT CLASS=glossentry><A NAME="G-CALL-BY-REFERENCE">call by reference</A><DD CLASS=glossdef><P CLASS=para>An <A HREF="gloss_01.htm#G-ARGUMENT"><I CLASS=emphasis>argument</I></A>-passing mechanism in which the<A HREF="gloss_01.htm#G-FORMAL-ARGUMENTS"><I CLASS=emphasis>formal arguments</I></A> refer directly to the <A HREF="gloss_01.htm#G-ACTUAL-ARGUMENTS"><I CLASS=emphasis>actual arguments</I></A>, and the<A HREF="gloss_01.htm#G-SUBROUTINE"><I CLASS=emphasis>subroutine</I></A> can change the actual arguments by changing the formalarguments.  See also <A HREF="gloss_01.htm#G-CALL-BY-VALUE"><I CLASS=emphasis>call by value</I></A>.<P><DT CLASS=glossentry><A NAME="G-CALL-BY-VALUE">call by value</A><DD CLASS=glossdef><P CLASS=para>An <A HREF="gloss_01.htm#G-ARGUMENT"><I CLASS=emphasis>argument</I></A>-passing mechanism inwhich the <A HREF="gloss_01.htm#G-FORMAL-ARGUMENTS"><I CLASS=emphasis>formal arguments</I></A> refer to a copy of the <I CLASS=emphasis>actualarguments</I>, and the <A HREF="gloss_01.htm#G-SUBROUTINE"><I CLASS=emphasis>subroutine</I></A> cannot change the actualarguments by changing the formal arguments.(See also <A HREF="gloss_01.htm#G-CALL-BY-REFERENCE"><I CLASS=emphasis>call by reference</I></A>).<P><DT CLASS=glossentry><A NAME="G-CHARACTER">character</A><DD CLASS=glossdef><P CLASS=para>A small pattern of <I CLASS=emphasis>bits</I> (usually seven, eight, or sixteen in number)that is the machine'srepresentation of a unit of orthography.Americans typically confuse characters with <I CLASS=emphasis>bytes</I>.So does Perl.<P><DT CLASS=glossentry><A NAME="G-CHARACTER-CLASS">character class</A><DD CLASS=glossdef><P CLASS=para>A square-bracketed list of characters used in a <A HREF="gloss_01.htm#G-REGULAR-EXPRESSION"><I CLASS=emphasis>regular expression</I></A>to indicate that any character of the set may occur at this point.<P><DT CLASS=glossentry><A NAME="G-CLASS">class</A><DD CLASS=glossdef><P CLASS=para>A <A HREF="gloss_01.htm#G-PACKAGE"><I CLASS=emphasis>package</I></A> that either defines <I CLASS=emphasis>methods</I> (<I CLASS=emphasis>subroutines</I>)that deal with <I CLASS=emphasis>objects</I> of your class, or that derives methods fromother packages that know how to deal with objects of your class.  (Orthink they know how.)  See also <A HREF="gloss_01.htm#G-INHERITANCE"><I CLASS=emphasis>inheritance</I></A>.<P><DT CLASS=glossentry><A NAME="G-CLASS-METHOD">class method</A><DD CLASS=glossdef><P CLASS=para>A <A HREF="gloss_01.htm#G-METHOD"><I CLASS=emphasis>method</I></A> that treats the whole <A HREF="gloss_01.htm#G-CLASS"><I CLASS=emphasis>class</I></A> as an <A HREF="gloss_01.htm#G-OBJECT"><I CLASS=emphasis>object</I></A>.One sort of class method is a <A HREF="gloss_01.htm#G-CONSTRUCTOR"><I CLASS=emphasis>constructor</I></A>.  (A classmethod is also known as a "static" method in C++ terminology.)<P><DT CLASS=glossentry><A NAME="G-CLIENT">client</A><DD CLASS=glossdef><P CLASS=para>In networking, a <A HREF="gloss_01.htm#G-PROCESS"><I CLASS=emphasis>process</I></A> that initiates contact with a <A HREF="gloss_01.htm#G-SERVER"><I CLASS=emphasis>server</I></A>process in order to exchange data with it and perhaps receive a service.<P><DT CLASS=glossentry><A NAME="G-CLOSURE">closure</A><DD CLASS=glossdef><P CLASS=para>An <A HREF="gloss_01.htm#G-ANONYMOUS"><I CLASS=emphasis>anonymous</I></A> subroutinethat, when generated at run-time, keeps track of the identities ofexternally visible <I CLASS=emphasis>lexical variables</I> even after those lexical variableshave supposedly gone out of <A HREF="gloss_01.htm#G-SCOPE"><I CLASS=emphasis>scope</I></A>.  They're called "closures" becausethis sort of behavior gives mathematicians a sense of closure.<P><DT CLASS=glossentry><A NAME="G-CODE">CODE</A><DD CLASS=glossdef><P CLASS=para>The word "CODE" is returned by the <A HREF="ch03_02.htm#PERL2-CMD-REF">ref</A> function when you apply it toa CV.  See <A HREF="gloss_01.htm#G-CV"><I CLASS=emphasis>CV</I></A>.<P><DT CLASS=glossentry><A NAME="G-COLLATING-SEQUENCE">collating sequence</A><DD CLASS=glossdef><P CLASS=para>The order that characters sort into.  This is used by string comparisonroutines to decide, for example, where in this glossary to put "collating sequence".<P><DT CLASS=glossentry><A NAME="G-COMMAND">command</A><DD CLASS=glossdef><P CLASS=para>In <A HREF="gloss_01.htm#G-SHELL"><I CLASS=emphasis>shell</I></A> programming, the syntactic combination of a program namewith its arguments.  More loosely, anything you type to a shell (acommand interpreter) that starts it doing something.  In Perlprogramming, a <A HREF="gloss_01.htm#G-STATEMENT"><I CLASS=emphasis>statement</I></A>, which might start with a <A HREF="gloss_01.htm#G-LABEL"><I CLASS=emphasis>label</I></A>,and typically ends with a semicolon.<P><DT CLASS=glossentry><A NAME="G-COMMAND-BUFFERING">command buffering</A><DD CLASS=glossdef><P CLASS=para>An option in Perl that lets you store up the output of each Perl commandand then flush it out as a single request to the <A HREF="gloss_01.htm#G-OPERATING-SYSTEM"><I CLASS=emphasis>operating system</I></A>.It's enabled by setting the <B>$|</B> variable to a non-zero value.  It'sused when you don't want data sitting around not going where it'ssupposed to, which may happen because the default on a <A HREF="gloss_01.htm#G-FILE"><I CLASS=emphasis>file</I></A> or<A HREF="gloss_01.htm#G-PIPE"><I CLASS=emphasis>pipe</I></A> is to use block buffering.  See also <I CLASS=emphasis>buffering</I>.<P><DT CLASS=glossentry><A NAME="G-COMMAND-LINE-ARGUMENTS">command-line arguments</A><DD CLASS=glossdef><P CLASS=para>The <I CLASS=emphasis>values</I> you supply along with a program name when you tell a<A HREF="gloss_01.htm#G-SHELL"><I CLASS=emphasis>shell</I></A> to execute a command.  These values are passed to a Perlscript through <B>@ARGV</B>.<P><DT CLASS=glossentry><A NAME="G-COMMAND-NAME">command name</A><DD CLASS=glossdef><P CLASS=para>The name of the program currently executing, as typed on the commandline.  In C the command name is passed to the program as the firstcommand-line argument.  In Perl, it comes in separately as <B>$0</B>.<P><DT CLASS=glossentry><A NAME="G-COMMENT">comment</A><DD CLASS=glossdef><P CLASS=para>A remark that doesn't affect the meaning of the program.  In Perl, acomment is introduced by a <tt CLASS=literal>#</tt> character and continues to the endof the line.<P><DT CLASS=glossentry><A NAME="G-COMPILE-TIME">compile-time</A><DD CLASS=glossdef><P CLASS=para>The time when Perl is trying to make sense of your program, as opposedto when it thinks it knows what your program means and is merely tryingto do what it thinks your program says to do.  See also <A HREF="gloss_01.htm#G-RUNTIME"><I CLASS=emphasis>run-time</I></A>.<P><DT CLASS=glossentry><A NAME="G-COMPILER">compiler</A><DD CLASS=glossdef><P CLASS=para>Strictly speaking, a program that munches up another program and spitsout yet another file containing the program in a more executable form,typically containing native machine instructions.  The <I CLASS=emphasis>perl</I>program is not a compiler by this definition, but it does contain a compiler that takes a program and turns it into a more executableform (<I CLASS=emphasis>syntax trees</I>) within the <I CLASS=emphasis>perl</I> process itself, whichthe <A HREF="gloss_01.htm#G-INTERPRETER"><I CLASS=emphasis>interpreter</I></A> then interprets.  There are, however, extension<I CLASS=emphasis>modules</I> to get Perl to act more like a real compiler.<P><DT CLASS=glossentry><A NAME="G-COMPOSER">composer</A><DD CLASS=glossdef><P CLASS=para>A "constructor" for a <A HREF="gloss_01.htm#G-THINGY"><I CLASS=emphasis>thingy</I></A> that isn't really an <A HREF="gloss_01.htm#G-OBJECT"><I CLASS=emphasis>object</I></A>,like an array or a hash.  For example, a pair of braces acts as a composerfor a hash, and a pair of brackets acts as a composer for an array.See "Creating Hard References" in <A HREF="ch04_01.htm">Chapter 4, <i>References and Nested Data Structures</i></A>.<P><DT CLASS=glossentry><A NAME="G-CONCATENATION">concatenation</A><DD CLASS=glossdef><P CLASS=para>The process of gluing one cat's nose to another cat's tail.Also, a similar operation on two strings.<P><DT CLASS=glossentry><A NAME="G-CONDITIONAL">conditional</A><DD CLASS=glossdef><P CLASS=para>Something "iffy".<P><DT CLASS=glossentry><A NAME="G-CONNECTION">connection</A><DD CLASS=glossdef><P CLASS=para>In telephony, the temporary electrical circuit between the caller'sand the callee's phone.  In networking, the same kind of temporarycircuit between a <A HREF="gloss_01.htm#G-CLIENT"><I CLASS=emphasis>client</I></A> and a <A HREF="gloss_01.htm#G-SERVER"><I CLASS=emphasis>server</I></A>.<P><DT CLASS=glossentry><A NAME="G-CONSTRUCT">construct</A><DD CLASS=glossdef><P CLASS=para>As a noun, a piece of syntax made up of smaller pieces.  As a transitiveverb, to create an <A HREF="gloss_01.htm#G-OBJECT"><I CLASS=emphasis>object</I></A> using a <A HREF="gloss_01.htm#G-CONSTRUCTOR"><I CLASS=emphasis>constructor</I></A>.<P><DT CLASS=glossentry><A NAME="G-CONSTRUCTOR">constructor</A><DD CLASS=glossdef><P CLASS=para>A special <A HREF="gloss_01.htm#G-CLASS-METHOD"><I CLASS=emphasis>class method</I></A> that constructs an <A HREF="gloss_01.htm#G-OBJECT"><I CLASS=emphasis>object</I></A> and returns it.Sometimes we use the term loosely to mean a <A HREF="gloss_01.htm#G-COMPOSER"><I CLASS=emphasis>composer</I></A>.<P><DT CLASS=glossentry><A NAME="G-CONTEXT">context</A><DD CLASS=glossdef><P CLASS=para>The surroundings, or environment.  The context given by the surrounding code determines what kind of dataa particular <A HREF="gloss_01.htm#G-EXPRESSION"><I CLASS=emphasis>expression</I></A> is expected to return.The two primary contexts are <A HREF="gloss_01.htm#G-LIST-CONTEXT"><I CLASS=emphasis>list context</I></A> and <I CLASS=emphasis>scalarcontext</I>.  Scalar context is sometimes subdivided into <I CLASS=emphasis>Booleancontext</I>, <A HREF="gloss_01.htm#G-NUMERIC-CONTEXT"><I CLASS=emphasis>numeric context</I></A>, and <A HREF="gloss_01.htm#G-STRING-CONTEXT"><I CLASS=emphasis>string context</I></A>.  There's alsoa "don't care" context (which is dealt with in <A HREF="ch02_01.htm">Chapter 2, <i>The Gory Details</i></A>, if you care).<P><DT CLASS=glossentry><A NAME="G-CONTINUATION">continuation</A><DD CLASS=glossdef><P CLASS=para>The treatment of more than one physical <A HREF="gloss_01.htm#G-LINE"><I CLASS=emphasis>line</I></A> as a single logicalline.  Makefile lines are continued by putting a backslash before the <A HREF="gloss_01.htm#G-NEWLINE"><I CLASS=emphasis>newline</I></A>.  Internet messageheaders are continued by putting a space or tab <I CLASS=emphasis>after</I> thenewline.  Perl lines do not need any form of continuation mark,because <A HREF="gloss_01.htm#G-WHITESPACE"><I CLASS=emphasis>whitespace</I></A> (includingnewline) is gleefully ignored.  Usually.<P><DT CLASS=glossentry><A NAME="G-CORE-DUMP">core dump</A><DD CLASS=glossdef><P CLASS=para>The corpse of a <A HREF="gloss_01.htm#G-PROCESS"><I CLASS=emphasis>process</I></A>, in the form of a file left in the <I CLASS=emphasis>workingdirectory</I> of the process, usually as a result of certain kinds of fatalerror.<P><DT CLASS=glossentry><A NAME="G-CPAN">CPAN</A><DD CLASS=glossdef><P CLASS=para>Comprehensive Perl Archive Network.  (See the Preface for more details.)<P><DT CLASS=glossentry><A NAME="G-CURRENT-PACKAGE">current package</A><DD CLASS=glossdef><P CLASS=para>Which <A HREF="gloss_01.htm#G-PACKAGE"><I CLASS=emphasis>package</I></A> the current statement is compiled in.  Scan backward inthe text of your program until you find a package declaration at the same<A HREF="gloss_01.htm#G-BLOCK"><I CLASS=emphasis>block</I></A> level, or in an enclosing block.That's your current package name.<P><DT CLASS=glossentry><A NAME="G-CURRENT-WORKING-DIRECTORY">current working directory</A><DD CLASS=glossdef><P CLASS=para>See <A HREF="gloss_01.htm#G-WORKING-DIRECTORY"><I CLASS=emphasis>working directory</I></A>.<P><DT CLASS=glossentry><A NAME="G-CURRENTLY-SELECTED-OUTPUT-CHANNEL">currently selected output channel</A><DD CLASS=glossdef><P CLASS=para>The last <A HREF="gloss_01.htm#G-FILEHANDLE"><I CLASS=emphasis>filehandle</I></A> that was designated with <tt CLASS=literal>select(FILEHANDLE)</tt>;the default is <tt CLASS=literal>STDOUT</tt>, if no filehandle has been selected.<P><DT CLASS=glossentry><A NAME="G-CV">CV</A><DD CLASS=glossdef><P CLASS=para>An internal "code value" typedef.  A CV is a kind of <A HREF="gloss_01.htm#G-SV"><I CLASS=emphasis>SV</I></A>.<P><DT CLASS=glossentry><A NAME="G-DANGLING-STATEMENT">dangling statement</A><DD CLASS=glossdef><P CLASS=para>A bare, single <A HREF="gloss_01.htm#G-STATEMENT"><I CLASS=emphasis>statement</I></A>, withoutany braces, hanging off an <B>if</B> or <B>while</B> conditional.  Callows them.  Perl doesn't.<P><DT CLASS=glossentry><A NAME="G-DATA-FLOW">data flow</A><DD CLASS=glossdef><P CLASS=para>What your program looks like from the perspective of a particular pieceof data from the time it enters your program to the time it leaves oris combined with some other data to make new data.<P><DT CLASS=glossentry><A NAME="G-DATA-REDUCTION">data reduction</A><DD CLASS=glossdef><P CLASS=para>The process of extracting only the most interesting tidbits becausethe boss can't read fast enough.<P><DT CLASS=glossentry><A NAME="G-DATA-STRUCTURE">data structure</A><DD CLASS=glossdef><P CLASS=para>How your various pieces of data relate to each other, and what shapethey make when you put them all together, as in a rectangular table,or a triangular-shaped tree.<P><DT CLASS=glossentry><A NAME="G-DATA-TYPE">data type</A><DD CLASS=glossdef><P CLASS=para>A set of possible values, together with all theoperations that know how to deal with those values.  For example, anumeric data type has a certain set of numbers that you can work with,and it has various mathematical operations you can do on the numbersthat would make little sense on, say, a string such as<tt CLASS=literal>"Kilroy"</tt>.  Strings have their own operations, such as<A HREF="gloss_01.htm#G-CONCATENATION"><I CLASS=emphasis>concatenation</I></A>.  Compound types made of a number of smaller piecesgenerally have operations to compose and decompose them, and perhaps torearrange them.  Objects that model things in the real world often haveoperations that correspond to real activities.  For instance, ifyou model an elevator, your elevator object might have an <tt CLASS=literal>open_door()</tt>method.<P><DT CLASS=glossentry><A NAME="G-DBM">DBM</A><DD CLASS=glossdef><P CLASS=para>Stands for "Data Base Management" routines, a set ofroutines that emulate an <A HREF="gloss_01.htm#G-ASSOCIATIVE-ARRAY"><I CLASS=emphasis>associative array</I></A> using disk files.The routines use a dynamic hashing scheme to locate any entry with onlytwo disk accesses.  DBM files allow a Perl script to keep a persistent<A HREF="gloss_01.htm#G-HASH"><I CLASS=emphasis>hash</I></A> across multiple invocations.  You can <A HREF="ch03_02.htm#PERL2-CMD-TIE">tie</A>your hash variables to various DBM implementations--see <A HREF="ch05_01.htm">Chapter 5, <i>Packages, Modules, and Object Classes</i></A>.<P><DT CLASS=glossentry><A NAME="G-DECLARATION">declaration</A><DD CLASS=glossdef><P CLASS=para>An assertion you make that something exists and perhaps what it's like,without any commitment as to how or where you'll use it.  A declarationis like the part of your recipe that says, "two cups flour, one large egg, fouror five tadpoles...."  See <A HREF="gloss_01.htm#G-STATEMENT"><I CLASS=emphasis>statement</I></A> for its opposite.  Note thatsome declarations also function as statements.<P><DT CLASS=glossentry><A NAME="G-DECREMENT">decrement</A><DD CLASS=glossdef><P CLASS=para>To subtract one from something.<P><DT CLASS=glossentry><A NAME="G-DEFAULT">default</A><DD CLASS=glossdef><P CLASS=para>A value that is chosen for you if you don't supply a value of your own.<P><DT CLASS=glossentry><A NAME="G-DEFINED">defined</A><DD CLASS=glossdef><P CLASS=para>Having a meaning.  Perl thinks that some of the things people try to doare devoid of meaning; in particular, making use of variables that havenever been given a <A HREF="gloss_01.htm#G-VALUE"><I CLASS=emphasis>value</I></A>, and performing certain operations on data thatisn't there.  For example, if you try to read data past the end of afile, Perl will hand you back an <A HREF="gloss_01.htm#G-UNDEFINED"><I CLASS=emphasis>undefined</I></A> value.  See also <A HREF="gloss_01.htm#G-FALSE"><I CLASS=emphasis>false</I></A>.<P><DT CLASS=glossentry><A NAME="G-DELIMITER">delimiter</A><DD CLASS=glossdef><P CLASS=para>Some <A HREF="gloss_01.htm#G-CHARACTER"><I CLASS=emphasis>character</I></A> or <A HREF="gloss_01.htm#G-STRING"><I CLASS=emphasis>string</I></A> that sets bounds to anarbitrarily-sized textual object.<P><DT CLASS=glossentry><A NAME="G-DEREFERENCE">dereference</A><DD CLASS=glossdef><P CLASS=para>A fancy computer science term meaning "to follow a <A HREF="gloss_01.htm#G-REFERENCE"><I CLASS=emphasis>reference</I></A> to what itpoints to".  The "de" part of it refers to the fact that you'retaking away one level of <A HREF="gloss_01.htm#G-INDIRECTION"><I CLASS=emphasis>indirection</I></A>.<P><DT CLASS=glossentry><A NAME="G-DERIVED-CLASS">derived class</A><DD CLASS=glossdef><P CLASS=para>A <A HREF="gloss_01.htm#G-CLASS"><I CLASS=emphasis>class</I></A> that defines some of its <I CLASS=emphasis>methods</I> in terms of a more genericclass, called a <A HREF="gloss_01.htm#G-BASE-CLASS"><I CLASS=emphasis>base class</I></A>.  Note that classes aren't classifiedexclusively into base classes or derived classes: a class can functionas both a derived class and a base class simultaneously.<P><DT CLASS=glossentry><A NAME="G-DESTROY">destroy</A><DD CLASS=glossdef><P CLASS=para>To deallocate the memory of a <A HREF="gloss_01.htm#G-THINGY"><I CLASS=emphasis>thingy</I></A>.<P><DT CLASS=glossentry><A NAME="G-DESTRUCTOR">destructor</A><DD CLASS=glossdef><P CLASS=para>A special <A HREF="gloss_01.htm#G-METHOD"><I CLASS=emphasis>method</I></A> that is called when an <A HREF="gloss_01.htm#G-OBJECT"><I CLASS=emphasis>object</I></A> is thinking about<I CLASS=emphasis>destroying</I> itself.<P><DT CLASS=glossentry><A NAME="G-DEVICE">device</A><DD CLASS=glossdef><P CLASS=para>Awhiz-bang hardware gizmo (like a disk or tape drive) attached to yourcomputer that the <A HREF="gloss_01.htm#G-OPERATING-SYSTEM"><I CLASS=emphasis>operating system</I></A> tries to make look like a file (or abunch of files).  Under UNIX, these fake filestend to live in the <I CLASS=emphasis>/dev</I> directory.<P><DT CLASS=glossentry><A NAME="G-DIRECTORY">directory</A><DD CLASS=glossdef><P CLASS=para>A place where you find files, and perhaps other directories.  Some<I CLASS=emphasis>operating systems</I> call these "folders", "drawers", or "catalogs".<P><DT CLASS=glossentry><A NAME="G-DIRECTORY-HANDLE">directory handle</A><DD CLASS=glossdef><P CLASS=para>A name that represents a particular instance of opening a directoryto read it, until you close it.<P><DT CLASS=glossentry><A NAME="G-DUMP">dump</A><DD CLASS=glossdef><P CLASS=para>A Perl <A HREF="gloss_01.htm#G-STATEMENT"><I CLASS=emphasis>statement</I></A> that is one of the many ways to get a Perl program toproduce a <A HREF="gloss_01.htm#G-CORE-DUMP"><I CLASS=emphasis>core dump</I></A>.  Most of the others are undocumented.<P><DT CLASS=glossentry><A NAME="G-DYNAMIC-SCOPING">dynamic scoping</A><DD CLASS=glossdef><P CLASS=para>Making variables visible throughout the rest of the <A HREF="gloss_01.htm#G-BLOCK"><I CLASS=emphasis>block</I></A> in whichthey are first used, as well as within any <I CLASS=emphasis>subroutines</I> that are called by therest of the block.  Dynamically scoped variables can have their valuestemporarily changed (and implicitly restored later) by a <A HREF="ch03_02.htm#PERL2-CMD-LOCAL">local</A> statement.Compare <A HREF="gloss_01.htm#G-LEXICAL-SCOPING"><I CLASS=emphasis>Lexical Scoping</I></A>.  Used more loosely to mean how a subroutinethat is in the middle of calling another subroutine "contains" thatsubroutine at run-time.<P><DT CLASS=glossentry><A NAME="G-ECLECTIC">eclectic</A><DD CLASS=glossdef><P CLASS=para>Derived from many sources.  Some would say <I CLASS=emphasis>too</I> many.<P><DT CLASS=glossentry><A NAME="G-ELEMENT">element</A><DD CLASS=glossdef><P CLASS=para>A basic building block.  When you're talking about an <A HREF="gloss_01.htm#G-ARRAY"><I CLASS=emphasis>array</I></A>, it's oneof the items that make up the array.<P><DT CLASS=glossentry><A NAME="G-ENDIAN">endian</A><DD CLASS=glossdef><P CLASS=para>See <A HREF="gloss_01.htm#G-LITTLE-ENDIAN"><I CLASS=emphasis>little-endian</I></A> and <A HREF="gloss_01.htm#G-BIG-ENDIAN"><I CLASS=emphasis>big-endian</I></A>.<P><DT CLASS=glossentry><A NAME="G-ENVIRONMENT">environment</A><DD CLASS=glossdef><P CLASS=para>The collective set of <I CLASS=emphasis>environment variables</I> your <A HREF="gloss_01.htm#G-PROCESS"><I CLASS=emphasis>process</I></A> inheritsfrom its parent.  Accessed via <B>%ENV</B>.<P><DT CLASS=glossentry><A NAME="G-ENVIRONMENT-VARIABLE">environment variable</A><DD CLASS=glossdef><P CLASS=para>A mechanism by which some high-level agent such as a user can pass itspreferences down to child <I CLASS=emphasis>processes</I>, grandchild processes,greatgrandchild processes, and so on.  Each environment variable is a<A HREF="gloss_01.htm#G-KEY"><I CLASS=emphasis>key</I></A>/<A HREF="gloss_01.htm#G-VALUE"><I CLASS=emphasis>value</I></A> pair, like one element of a <A HREF="gloss_01.htm#G-HASH"><I CLASS=emphasis>hash</I></A>.<P><DT CLASS=glossentry><A NAME="G-EOF">EOF</A><DD CLASS=glossdef><P CLASS=para>End of File.  Sometimes used metaphorically as the trailing<A HREF="gloss_01.htm#G-DELIMITER"><I CLASS=emphasis>delimiter</I></A> of a <I CLASS=emphasis>here document</I>.<P><DT CLASS=glossentry><A NAME="G-ERRNO">errno</A><DD CLASS=glossdef><P CLASS=para>The error number returned by a UNIX <A HREF="gloss_01.htm#G-SYSTEM-CALL"><I CLASS=emphasis>system call</I></A> when it fails.  Perlrefers to the error by the name <B>$!</B> (or <tt CLASS=literal>$OS_ERROR</tt> if youuse the English module).<P><DT CLASS=glossentry><A NAME="G-EXCEPTION">exception</A><DD CLASS=glossdef><P CLASS=para>A fancy term for an error.  See <A HREF="gloss_01.htm#G-FATAL-ERROR"><I CLASS=emphasis>fatal error</I></A>.<P><DT CLASS=glossentry><A NAME="G-EXCEPTION-HANDLING">exception handling</A><DD CLASS=glossdef><P CLASS=para>The way a program responds to an error.The exception handling mechanism in Perl is the <A HREF="ch03_02.htm#PERL2-CMD-EVAL">eval</A> construct.<P><DT CLASS=glossentry><A NAME="G-EXECUTABLE-FILE">executable file</A><DD CLASS=glossdef><P CLASS=para>A <A HREF="gloss_01.htm#G-FILE"><I CLASS=emphasis>file</I></A> that is specially marked to tell the <A HREF="gloss_01.htm#G-OPERATING-SYSTEM"><I CLASS=emphasis>operating system</I></A>that it's OK to run this file as a program.  Abbreviated to"executable".<P><DT CLASS=glossentry><A NAME="G-EXECUTE">execute</A><DD CLASS=glossdef><P CLASS=para>To run a program or subroutine.  (Has nothing to do with the <A HREF="ch03_02.htm#PERL2-CMD-KILL">kill</A>command, unless you're trying to run a <A HREF="gloss_01.htm#G-SIGNAL-HANDLER"><I CLASS=emphasis>signal handler</I></A>.)<P><DT CLASS=glossentry><A NAME="G-EXECUTE-BIT">execute bit</A><DD CLASS=glossdef><P CLASS=para>The special mark that tells the operating system it can run thisprogram.  There are actually three execute bits under UNIX, and whichbit gets used depends on whether you own the file singularly,collectively, or not at all.<P><DT CLASS=glossentry><A NAME="G-EXIT-STATUS">exit status</A><DD CLASS=glossdef><P CLASS=para>See <A HREF="gloss_01.htm#G-STATUS"><I CLASS=emphasis>status</I></A>.<P><DT CLASS=glossentry><A NAME="G-EXPONENT">exponent</A><DD CLASS=glossdef><P CLASS=para>The part of a <I CLASS=emphasis>floating-point</I> number that says where to put the decimalpoint in the other part.  See <A HREF="gloss_01.htm#G-MANTISSA"><I CLASS=emphasis>mantissa</I></A>.<P><DT CLASS=glossentry><A NAME="G-EXPORT">export</A><DD CLASS=glossdef><P CLASS=para>To make symbols from your <A HREF="gloss_01.htm#G-MODULE"><I CLASS=emphasis>module</I></A> available for<A HREF="gloss_01.htm#G-IMPORT"><I CLASS=emphasis>import</I></A> by other modules.<P><DT CLASS=glossentry><A NAME="G-EXPRESSION">expression</A><DD CLASS=glossdef><P CLASS=para>Anything you can legally say in a spot where a <A HREF="gloss_01.htm#G-VALUE"><I CLASS=emphasis>value</I></A> is required.Typically composed of <I CLASS=emphasis>literals</I>, <I CLASS=emphasis>variables</I>, <I CLASS=emphasis>operators</I>,<I CLASS=emphasis>functions</I>, and <A HREF="gloss_01.htm#G-SUBROUTINE"><I CLASS=emphasis>subroutine</I></A> calls.<P><DT CLASS=glossentry><A NAME="G-FALSE">false</A><DD CLASS=glossdef><P CLASS=para>In Perl, any value that would look like <tt CLASS=literal>""</tt> or <tt CLASS=literal>"0"</tt> ifevaluated in a string context.  Since undefined values evaluate to<tt CLASS=literal>""</tt>, all undefined values are false, but not all false valuesare undefined.<P><DT CLASS=glossentry><A NAME="G-FATAL-ERROR">fatal error</A><DD CLASS=glossdef><P CLASS=para>An error that causes termination of the <A HREF="gloss_01.htm#G-PROCESS"><I CLASS=emphasis>process</I></A> after printing anasty message on your <A HREF="gloss_01.htm#G-STANDARD-ERROR"><I CLASS=emphasis>standard error</I></A> stream."Fatal" errors that happen inside an <A HREF="ch03_02.htm#PERL2-CMD-EVAL">eval</A> aren't fatal tothe whole program, just to that particular <A HREF="ch03_02.htm#PERL2-CMD-EVAL">eval</A>. The nastymessage then shows up in the <B>$@</B> variable.  You can cause a fatalerror with the <A HREF="ch03_02.htm#PERL2-CMD-DIE">die</A> operator. This is also known as throwing orraising an <A HREF="gloss_01.htm#G-EXCEPTION"><I CLASS=emphasis>exception</I></A>.<P><DT CLASS=glossentry><A NAME="G-FIELD">field</A><DD CLASS=glossdef><P CLASS=para>A single piece of numeric or string data that is part of a longer<A HREF="gloss_01.htm#G-STRING"><I CLASS=emphasis>string</I></A>, <A HREF="gloss_01.htm#G-RECORD"><I CLASS=emphasis>record</I></A>, or <A HREF="gloss_01.htm#G-LINE"><I CLASS=emphasis>line</I></A>.  Variable-width fields areusually separated by <I CLASS=emphasis>delimiters</I> (so use <A HREF="ch03_02.htm#PERL2-CMD-SPLIT">split</A> to extract thefields), whilefixed-width fields are usually at fixed positions (so use <A HREF="ch03_02.htm#PERL2-CMD-UNPACK">unpack</A>).<P><DT CLASS=glossentry><A NAME="G-FILE">file</A><DD CLASS=glossdef><P CLASS=para>A named collection of data, usually stored on a disk in a<A HREF="gloss_01.htm#G-DIRECTORY"><I CLASS=emphasis>directory</I></A>.  Roughly like a document, if you're into officemetaphors.  In some <I CLASS=emphasis>operating systems</I> like UNIX, you can actuallygive a file more than one name.<P><DT CLASS=glossentry><A NAME="G-FILE-DESCRIPTOR">file descriptor</A><DD CLASS=glossdef><P CLASS=para>The little number the <A HREF="gloss_01.htm#G-OPERATING-SYSTEM"><I CLASS=emphasis>operating system</I></A> uses to keep track of whichopened <A HREF="gloss_01.htm#G-FILE"><I CLASS=emphasis>file</I></A> you're talking about.  Perl hides the file descriptorinside a <A HREF="gloss_01.htm#G-STANDARD-IO"><I CLASS=emphasis>standard I/O</I></A> stream, and then attaches the stream to a<A HREF="gloss_01.htm#G-FILEHANDLE"><I CLASS=emphasis>filehandle</I></A>.<P><DT CLASS=glossentry><A NAME="G-FILE-GLOB">file glob</A><DD CLASS=glossdef><P CLASS=para>A "wildcard" match on <I CLASS=emphasis>filenames</I>.<P><DT CLASS=glossentry><A NAME="G-FILE-TEST-OPERATOR">file test operator</A><DD CLASS=glossdef><P CLASS=para>A built-in Perl operator that you use to determine whether something is<A HREF="gloss_01.htm#G-TRUE"><I CLASS=emphasis>true</I></A> about a file, such as whether you could open it if you tried.<P><DT CLASS=glossentry><A NAME="G-FILEHANDLE">filehandle</A><DD CLASS=glossdef><P CLASS=para>What you pick up a file with.  Or, a name (not necessarilyrelated to the real name ofa file) that represents a particular instance of opening a file untilyou close it.  Thus if you're going to open and close several differentfiles in succession, it's possible to open each of them with the samefilehandle, so you don't have to write out separate code to process eachfile.  It's like the game show host calling someone "Contestant #1" sothat he doesn't have to remember too many names from day to day.<P><DT CLASS=glossentry><A NAME="G-FILENAME">filename</A><DD CLASS=glossdef><P CLASS=para>The name for a file.  This name is listed in a <A HREF="gloss_01.htm#G-DIRECTORY"><I CLASS=emphasis>directory</I></A>, and youcan use it inan <A HREF="ch03_02.htm#PERL2-CMD-OPEN">open</A> statement to tell the <A HREF="gloss_01.htm#G-OPERATING-SYSTEM"><I CLASS=emphasis>operating system</I></A> exactly which fileyou want to open.<P><DT CLASS=glossentry><A NAME="G-FILESYSTEM">filesystem</A><DD CLASS=glossdef><P CLASS=para>A set of <I CLASS=emphasis>directories</I> and <I CLASS=emphasis>files</I> residing on a partition ofthe disk.  You can move a file around from directory to directory withina filesystem without actually moving the file itself, at least underUNIX.<P><DT CLASS=glossentry><A NAME="G-FLOATING-POINT">floating point</A><DD CLASS=glossdef><P CLASS=para>A method of storing numbers in scientific notation, such that theprecision of the number is independent of its magnitude (the decimalpoint "floats").  Perl does its numeric work with floating-pointnumbers, when it can't get away with using <I CLASS=emphasis>integers</I>.<P><DT CLASS=glossentry><A NAME="G-FLUSH">flush</A><DD CLASS=glossdef><P CLASS=para>The act of emptying a <A HREF="gloss_01.htm#G-BUFFER"><I CLASS=emphasis>buffer</I></A>, often before it's full.<P><DT CLASS=glossentry><A NAME="G-FORK">fork</A><DD CLASS=glossdef><P CLASS=para>To create a child <A HREF="gloss_01.htm#G-PROCESS"><I CLASS=emphasis>process</I></A> identical to the parent process, at least untilit gets ideas of its own.<P><DT CLASS=glossentry><A NAME="G-FORMAL-ARGUMENTS">formal arguments</A><DD CLASS=glossdef><P CLASS=para>Generic names a<A HREF="gloss_01.htm#G-SUBROUTINE"><I CLASS=emphasis>subroutine</I></A> knows its <I CLASS=emphasis>arguments</I> by.  In many languages,formal arguments are always given individual names, but in Perl they arepassed via <I CLASS=emphasis>arrays</I>.  The formal arguments to a Perl program are<tt CLASS=literal>$ARGV[0]</tt>, <tt CLASS=literal>$ARGV[1]</tt>, and so on. The formalarguments to a Perl subroutine are <tt CLASS=literal>$_[0]</tt>, <tt CLASS=literal>$_[1]</tt>, and soon.  You may give the arguments individual names by assigning the valuesto a <A HREF="ch03_02.htm#PERL2-CMD-LOCAL">local</A> or <A HREF="ch03_02.htm#PERL2-CMD-MY">my</A> list.<P><DT CLASS=glossentry><A NAME="G-FORMAT">format</A><DD CLASS=glossdef><P CLASS=para>A specification of how many spaces and digits and things to put somewhereso that whatever you're printing comes out nice and pretty.<P><DT CLASS=glossentry><A NAME="G-FREELY-AVAILABLE">freely available</A><DD CLASS=glossdef><P CLASS=para>Means you don't have to pay money to get it, but the copyright on it maystill belong to someone else (like Larry).<P><DT CLASS=glossentry><A NAME="G-FREELY-REDISTRIBUTABLE">freely redistributable</A><DD CLASS=glossdef><P CLASS=para>Means you're not in trouble if you give a bootleg copy of it to your friends(hint).<P><DT CLASS=glossentry><A NAME="G-FUNCTION">function</A><DD CLASS=glossdef><P CLASS=para>Mathematically, a mapping of each of a set of input values to a particularoutput value.  In computers, refers to a <A HREF="gloss_01.htm#G-SUBROUTINE"><I CLASS=emphasis>subroutine</I></A> or<I CLASS=emphasis>operation</I> that returns a <A HREF="gloss_01.htm#G-VALUE"><I CLASS=emphasis>value</I></A>.  It may or may not haveinput values (called <I CLASS=emphasis>arguments</I>).<P><DT CLASS=glossentry><A NAME="G-GARBAGE-COLLECTION">garbage collection</A><DD CLASS=glossdef><P CLASS=para>A misnamed feature of some programming languages--it should be called"expecting your mother to pick up after you".  Strictly speaking, Perldoesn't do this, but relies on a reference counting mechanism to keepthings tidy.  However, when your interpreter thread exits, a kind ofgarbage collector runs to make sure everything is cleaned up if you'vebeen messy with circular references and such.<P><DT CLASS=glossentry><A NAME="G-GID">GID</A><DD CLASS=glossdef><P CLASS=para>Group ID--in UNIX, the numeric group ID that the <I CLASS=emphasis>operatingsystem</I> uses to identify you and members of your <A HREF="gloss_01.htm#G-GROUP"><I CLASS=emphasis>group</I></A>.<P><DT CLASS=glossentry><A NAME="G-GLOB">glob</A><DD CLASS=glossdef><P CLASS=para>Strictly, the shell's <tt CLASS=literal>*</tt> character, which will match a "glob" ofcharacters when you're trying to generate a list of filenames.  Loosely,the act of using globs and similar symbols to do pattern matching.<P><DT CLASS=glossentry><A NAME="G-GLOBAL">global</A><DD CLASS=glossdef><P CLASS=para>Something you can see from anywhere, usually used of <I CLASS=emphasis>variables</I> and<I CLASS=emphasis>subroutines</I> that are visible everywhere in your program.  In Perl, onlycertain special variables are truly global--most variables (and allsubroutines) are local to the current <A HREF="gloss_01.htm#G-PACKAGE"><I CLASS=emphasis>package</I></A>.<P><DT CLASS=glossentry><A NAME="G-GROUP">group</A><DD CLASS=glossdef><P CLASS=para>A set of users that you're a member of.  In some operating systems (like UNIX),you can give certain file access permissions to other members of your group.<P><DT CLASS=glossentry><A NAME="G-GV">GV</A><DD CLASS=glossdef><P CLASS=para>An internal "glob value", meaning a <A HREF="gloss_01.htm#G-TYPEGLOB"><I CLASS=emphasis>typeglob</I></A>.  A GV is a kind of<A HREF="gloss_01.htm#G-SV"><I CLASS=emphasis>SV</I></A>.<P><DT CLASS=glossentry><A NAME="G-HARD-REFERENCE">hard reference</A><DD CLASS=glossdef><P CLASS=para>A<A HREF="gloss_01.htm#G-SCALAR"><I CLASS=emphasis>scalar</I></A> value containing the actual address of a <A HREF="gloss_01.htm#G-THINGY"><I CLASS=emphasis>thingy</I></A>, suchthat the thingy's <A HREF="gloss_01.htm#G-REFERENCE"><I CLASS=emphasis>reference</I></A> count accounts for it.  (Some hardreferences are held internally, such as the implicit reference from oneof a <A HREF="gloss_01.htm#G-TYPEGLOB"><I CLASS=emphasis>typeglob</I></A>'s variable slots to its corresponding thingy.)  Ahard reference is different from a <A HREF="gloss_01.htm#G-SYMBOLIC-REFERENCE"><I CLASS=emphasis>symbolic reference</I></A>.<P><DT CLASS=glossentry><A NAME="G-HAS-A">has-a</A><DD CLASS=glossdef><P CLASS=para>A relationship between two <I CLASS=emphasis>objects</I> that is more tenuous than an<A HREF="gloss_01.htm#G-IS-A"><I CLASS=emphasis>is-a</I></A> relationship, and that can be modeled by containment of oneobject in another (which in Perl means containment of a <A HREF="gloss_01.htm#G-REFERENCE"><I CLASS=emphasis>reference</I></A>to the contained object.)  You generally don't want to use<A HREF="gloss_01.htm#G-INHERITANCE"><I CLASS=emphasis>inheritance</I></A> to model the <A HREF="gloss_01.htm#G-HAS-A"><I CLASS=emphasis>has-a</I></A> relationship because<I CLASS=emphasis>methods</I> that make sense on the contained object probably don'tmake sense on the object as a whole.  Just because your car <A HREF="gloss_01.htm#G-HAS-A"><I CLASS=emphasis>has-a</I></A>brake pedal doesn't mean you should stomp on your car.<P><DT CLASS=glossentry><A NAME="G-HASH">hash</A><DD CLASS=glossdef><P CLASS=para>A named list of <A HREF="gloss_01.htm#G-KEY"><I CLASS=emphasis>key</I></A>/<A HREF="gloss_01.htm#G-VALUE"><I CLASS=emphasis>value</I></A> pairs, arranged such that you caneasily use any key to find its associated value; a binary relation, todatabase users.  This glossary is like a hash, where the word to bedefined is the key, and the definition is the value.  A hash is alsosometimes called an "associative array".  (Which is a good reason forcalling it a hash instead.)<P><DT CLASS=glossentry><A NAME="G-HASH-TABLE">hash table</A><DD CLASS=glossdef><P CLASS=para>A method used internally by Perl for implementing associative arrays(hashes) efficiently.<P><DT CLASS=glossentry><A NAME="G-HEADER-FILE">header file</A><DD CLASS=glossdef><P CLASS=para>A file containing certain required definitions that you must include"ahead" of the rest of your program to do certain obscure operations.  AC header file has a <I CLASS=emphasis>.h</I> extension.  A Perl header file has a<I CLASS=emphasis>.ph</I> extension.  See the <A HREF="ch03_02.htm#PERL2-CMD-REQUIRE">require</A> operator in <A HREF="ch03_01.htm">Chapter 3, <i>Functions</i></A>.(Header files have been superseded by the <A HREF="gloss_01.htm#G-MODULE"><I CLASS=emphasis>module</I></A> mechanism.)<P><DT CLASS=glossentry><A NAME="G-HERE-DOCUMENT">here document</A><DD CLASS=glossdef><P CLASS=para>So called because of a similar construct in <I CLASS=emphasis>shells</I> which pretendsthat the <I CLASS=emphasis>lines</I> "right here" following the<A HREF="gloss_01.htm#G-COMMAND"><I CLASS=emphasis>command</I></A> are aseparate <A HREF="gloss_01.htm#G-FILE"><I CLASS=emphasis>file</I></A> to be fed tothe command, up to some trailing <A HREF="gloss_01.htm#G-DELIMITER"><I CLASS=emphasis>delimiter</I></A> string.  In Perl, however, it's just a fancy form of quoting.<P><DT CLASS=glossentry><A NAME="G-HEXADECIMAL">hexadecimal</A><DD CLASS=glossdef><P CLASS=para>A number in base sixteen, "hex" for short.  The digits for ten through sixteenare customarily represented by the letters <tt CLASS=literal>a</tt> through <tt CLASS=literal>f</tt>.Hexadecimal constants in Perl start with <tt CLASS=literal>0x</tt>.<P><DT CLASS=glossentry><A NAME="G-HOME-DIRECTORY">home directory</A><DD CLASS=glossdef><P CLASS=para>The directory you are placed into when you log in.  On a UNIX system,the name is often placed into <tt CLASS=literal>$ENV{HOME}</tt> or<tt CLASS=literal>$ENV{LOGDIR}</tt> by the login program, but you can also find itwith <tt CLASS=literal>(getpwuid($&lt;))[7]</tt>.<P><DT CLASS=glossentry><A NAME="G-HOST">host</A><DD CLASS=glossdef><P CLASS=para>The computer on which a program or other data resides.<P><DT CLASS=glossentry><A NAME="G-HUBRIS">hubris</A><DD CLASS=glossdef><P CLASS=para>Excessive pride, the sort of thing Zeus zaps you for.  Also the qualitythat makes you write (and maintain) programs that other people won'twant to say bad things about.  Hence, the third great virtue of aprogrammer.  See also <A HREF="gloss_01.htm#G-LAZINESS"><I CLASS=emphasis>laziness</I></A> and <A HREF="gloss_01.htm#G-IMPATIENCE"><I CLASS=emphasis>impatience</I></A>.<P><DT CLASS=glossentry><A NAME="G-HV">HV</A><DD CLASS=glossdef><P CLASS=para>Short for "hash value," which refers to one of Perl's internal datatypes.  An AV is a kind of <A HREF="gloss_01.htm#G-SV"><I CLASS=emphasis>SV</I></A>.<P><DT CLASS=glossentry><A NAME="G-IDENTIFIER">identifier</A><DD CLASS=glossdef><P CLASS=para>A legally formed name for most anything in which a computer programmight be interested.  Many languages (including Perl) allow identifiersthat start with a letter and contain letters and digits.  Perl alsocounts the underscore character as a valid letter.<P><DT CLASS=glossentry><A NAME="G-IMPATIENCE">impatience</A><DD CLASS=glossdef><P CLASS=para>The anger you feel when the computer is being lazy.  This makes youwrite programs that don't just react to your needs, but actuallyanticipate them.  Or at least that pretend to.  Hence, the second greatvirtue of a programmer.  See also <A HREF="gloss_01.htm#G-LAZINESS"><I CLASS=emphasis>laziness</I></A> and <A HREF="gloss_01.htm#G-HUBRIS"><I CLASS=emphasis>hubris</I></A>.<P><DT CLASS=glossentry><A NAME="G-IMPORT">import</A><DD CLASS=glossdef><P CLASS=para>Gain access to symbols that are exported from another module.See the <A HREF="ch03_02.htm#PERL2-CMD-USE">use</A> operator in <A HREF="ch03_01.htm">Chapter 3, <i>Functions</i></A>.<P><DT CLASS=glossentry><A NAME="G-INCREMENT">increment</A><DD CLASS=glossdef><P CLASS=para>To add one to something.<P><DT CLASS=glossentry><A NAME="G-INDEXING">indexing</A><DD CLASS=glossdef><P CLASS=para>Formerly, the act of looking up a <A HREF="gloss_01.htm#G-KEY"><I CLASS=emphasis>key</I></A> in an index (like the phone book),but now merely the act of using any kind of key or position to find thecorresponding <A HREF="gloss_01.htm#G-VALUE"><I CLASS=emphasis>value</I></A>, even if no index is involved.  Things havedegenerated to the point that Perl's <A HREF="ch03_02.htm#PERL2-CMD-INDEX">index</A> function merely locatesthe position (index) of one string in another.<P><DT CLASS=glossentry><A NAME="G-INDIRECT-OBJECT">indirect object</A><DD CLASS=glossdef><P CLASS=para>In English grammar, a short noun phrase between a verb and its directobject indicating the beneficiary or recipient of the action.  In Perl,<tt CLASS=literal>print STDOUT `$foo\n`;</tt>can be understood as<tt CLASS=replaceable><i>verb indirect-object object</i></tt>where <tt CLASS=literal>STDOUT</tt> is the recipient of the <tt CLASS=literal>print</tt> action, and<tt CLASS=literal>"$foo"</tt> is the object being printed.  Similarly, when invoking aclass <A HREF="gloss_01.htm#G-METHOD"><I CLASS=emphasis>method</I></A>, you might say:<DIV CLASS=programlisting><P><PRE>% perlsub Bob::give { shift; print    "Thanks for the @_!\n"; }give Bob memories^DThanks for the memories!</PRE></DIV><P CLASS=para></DL><DL><DT CLASS=glossentry><A NAME="G-INDIRECTION">indirection</A><DD CLASS=glossdef><P CLASS=para>When Randal says, "I don't know the answer... go ask Larry."Similarly, if something in a program isn't the answer, butindicates where the answer is, that's indirection.  This canbe done with <I CLASS=emphasis>symbolic</I> or <I CLASS=emphasis>hard references</I>.<P><DT CLASS=glossentry><A NAME="G-INHERITANCE">inheritance</A><DD CLASS=glossdef><P CLASS=para>What you get from your ancestors, genetically or otherwise.  If youhappen to be a <A HREF="gloss_01.htm#G-CLASS"><I CLASS=emphasis>class</I></A>, your ancestors are called <I CLASS=emphasis>base classes</I>and your descendants are called <I CLASS=emphasis>derived classes</I>.  See <I CLASS=emphasis>singleinheritance</I> and <A HREF="gloss_01.htm#G-MULTIPLE-INHERITANCE"><I CLASS=emphasis>multiple inheritance</I></A>.<P><DT CLASS=glossentry><A NAME="G-INTEGER">integer</A><DD CLASS=glossdef><P CLASS=para>Number with no fractional part; whole number.<P><DT CLASS=glossentry><A NAME="G-INTERPOLATION">interpolation</A><DD CLASS=glossdef><P CLASS=para>The insertion of one piece of text somewhere in the middle of anotherpiece of text.  The inserted piece may derive from a variable or otherindirect source.<P><DT CLASS=glossentry><A NAME="G-INTERPRETER">interpreter</A><DD CLASS=glossdef><P CLASS=para>Strictly speaking, a program that reads a second program and does what thesecond program saysdirectly without turning the program into a different form first, whichis what <I CLASS=emphasis>compilers</I> do.  Perl is not an interpreter bythis definition, because it contains a kind of compiler that takes aprogram and turns it into a more executable form (<I CLASS=emphasis>syntax trees</I>) withinthe Perl process itself, which the Perl <A HREF="gloss_01.htm#G-RUNTIME"><I CLASS=emphasis>run-time</I></A> system then interprets.<P><DT CLASS=glossentry><A NAME="G-INVOCATION">invocation</A><DD CLASS=glossdef><P CLASS=para>The act of calling up a program, subroutine, or function to dowhat it's supposed to do.<P><DT CLASS=glossentry><A NAME="G-IPC">IPC</A><DD CLASS=glossdef><P CLASS=para>Short for Inter-Process Communication.Sometimes a <A HREF="gloss_01.htm#G-PROCESS"><I CLASS=emphasis>process</I></A> just needs to talk to some other process.<P><DT CLASS=glossentry><A NAME="G-IS-A">is-a</A><DD CLASS=glossdef><P CLASS=para>A relationship between two <I CLASS=emphasis>objects</I> in which one object isconsidered to be a more specific version of the other generic object: "Acamel is a mammal."  Since the generic object really only exists in aplatonic sense, we usually add a little abstraction to the notion ofobjects and think of the relationship as being between a generic <I CLASS=emphasis>baseclass</I> and a specific <A HREF="gloss_01.htm#G-DERIVED-CLASS"><I CLASS=emphasis>derived class</I></A>.  Oddly enough, platonicclasses don't always have platonic relationships--see <A HREF="gloss_01.htm#G-INHERITANCE"><I CLASS=emphasis>inheritance</I></A>.<P><DT CLASS=glossentry><A NAME="G-ITERATION">iteration</A><DD CLASS=glossdef><P CLASS=para>Doing something again and again and again and again and again and....Usually this is done until you're loopy, which is why they call themloops.[3]<blockquote class=footnote><P CLASS=para>[3] We'd put in the usual joke referring you back to <A HREF="gloss_01.htm#G-ITERATION"><I CLASS=emphasis>Iteration</I></A>, butthat trick has been iterated too often already, and is no longer funny.Look for the joke under <A HREF="gloss_01.htm#G-LOOP"><I CLASS=emphasis>Loop</I></A> instead.  Also look for a similarjoke under <A HREF="gloss_01.htm#G-RECURSION"><I CLASS=emphasis>Recursion</I></A>, which is still funny at some level or other.</blockquote><P><DT CLASS=glossentry><A NAME="G-ITERATOR">iterator</A><DD CLASS=glossdef><P CLASS=para>A special programming gizmo that keeps track for you of where you are insomething that you're trying to iterate over.  The <B>foreach</B> loop inPerl contains an iterator.<P><DT CLASS=glossentry><A NAME="G-KEY">key</A><DD CLASS=glossdef><P CLASS=para>A special kind of data, such as your Social Security number, that can beused to locate other data.  The other data may be considered the <A HREF="gloss_01.htm#G-VALUE"><I CLASS=emphasis>value</I></A>associated with the key.<P><DT CLASS=glossentry><A NAME="G-KEYWORD">keyword</A><DD CLASS=glossdef><P CLASS=para>See <I CLASS=emphasis>reserved word</I>.<P><DT CLASS=glossentry><A NAME="G-LABEL">label</A><DD CLASS=glossdef><P CLASS=para>A kind of <A HREF="gloss_01.htm#G-KEY"><I CLASS=emphasis>key</I></A> you can give to a statement so that you can talk aboutthat statement elsewhere in the program.<P><DT CLASS=glossentry><A NAME="G-LAZINESS">laziness</A><DD CLASS=glossdef><P CLASS=para>The quality that makes you go to great effort to reduce overall energyexpenditure.  It makes you write labor-saving programs that other peoplewill find useful, and document what you wrote so you don't have toanswer so many questions about it.  Hence, the first great virtue of aprogrammer.  Also hence, this book.  See also <A HREF="gloss_01.htm#G-IMPATIENCE"><I CLASS=emphasis>impatience</I></A> and<A HREF="gloss_01.htm#G-HUBRIS"><I CLASS=emphasis>hubris</I></A>.<P><DT CLASS=glossentry><A NAME="G-LEFT-SHIFT">left shift</A><DD CLASS=glossdef><P CLASS=para>A <A HREF="gloss_01.htm#G-BIT-SHIFT"><I CLASS=emphasis>bit shift</I></A> that multiplies the number by some power of two.<P><DT CLASS=glossentry><A NAME="G-LEXICAL-SCOPING">lexical scoping</A><DD CLASS=glossdef><P CLASS=para>Looking at your <I CLASS=emphasis>Oxford English Dictionary</I> through a microscope.  (Alsoknown as <A HREF="gloss_01.htm#G-STATIC"><I CLASS=emphasis>static</I></A> scoping, because dictionaries don't change veryfast.)  Similarly, looking at variables that are stored in a privatedictionary for each subroutine, which are visible only from their pointof declaration down to the end of the block in which they are declared.<B>--Syn.</B> <A HREF="gloss_01.htm#G-STATIC-SCOPING"><I CLASS=emphasis>static scoping</I></A>.  <B>--Ant.</B> <I CLASS=emphasis>dynamicscoping</I>. [&lt; Gk]<P><DT CLASS=glossentry><A NAME="G-LIBRARY">library</A><DD CLASS=glossdef><P CLASS=para>A collection of procedures. In ancient days, referred to a collection ofsubroutines in a <I CLASS=emphasis>.pl</I> file. In modern times, refers oftento the entire collection of Perl modules on your system.<P><DT CLASS=glossentry><A NAME="G-LINE">line</A><DD CLASS=glossdef><P CLASS=para>In UNIX, a sequence of zero or more non-newline characters terminatedwith a <A HREF="gloss_01.htm#G-NEWLINE"><I CLASS=emphasis>newline</I></A> character.  On non-UNIX machines, this is emulatedeven if the underlying <A HREF="gloss_01.htm#G-OPERATING-SYSTEM"><I CLASS=emphasis>operating system</I></A> has different ideas.<P><DT CLASS=glossentry><A NAME="G-LINE-BUFFERING">line buffering</A><DD CLASS=glossdef><P CLASS=para>Used by a <A HREF="gloss_01.htm#G-STANDARD-IO"><I CLASS=emphasis>standard I/O</I></A> output stream that flushes its <A HREF="gloss_01.htm#G-BUFFER"><I CLASS=emphasis>buffer</I></A>after every <A HREF="gloss_01.htm#G-NEWLINE"><I CLASS=emphasis>newline</I></A>. Many standard I/O libraries automaticallyset this up on output that is going to the terminal.<P><DT CLASS=glossentry><A NAME="G-LINE-NUMBER">line number</A><DD CLASS=glossdef><P CLASS=para>The number of lines read prior to this one, plus <tt CLASS=literal>1</tt>.  Perl keepsa separate line number for each script or input file it opens.  Thecurrent script line number is represented by <tt CLASS=literal>_ _LINE_ _</tt>.  Thecurrent input line number (for the file that was most recently read fromvia <tt CLASS=literal>&lt;&gt;</tt>) is represented by the <B>$.</B> variable.  Many errormessages report both values, if available.<P><DT CLASS=glossentry><A NAME="G-LINK">link</A><DD CLASS=glossdef><P CLASS=para>In UNIX, a name in a directory, representing a file.  A given file canhave multiple links to it.  It's like having the same phone numberlisted in the phone directory under different names.<P><DT CLASS=glossentry><A NAME="G-OLIST">list</A><DD CLASS=glossdef><P CLASS=para>An ordered set of values.<P><DT CLASS=glossentry><A NAME="G-LIST">LIST</A><DD CLASS=glossdef><P CLASS=para>A syntactic construct representing a comma-separated list ofexpressions, evaluated to produce a <A HREF="gloss_01.htm#G-LIST-VALUE"><I CLASS=emphasis>list value</I></A>.  Each <A HREF="gloss_01.htm#G-EXPRESSION"><I CLASS=emphasis>expression</I></A>in a <A HREF="gloss_01.htm#G-LIST"><tt CLASS=replaceable><i>LIST</i></tt></A> is evaluated in a <A HREF="gloss_01.htm#G-LIST-CONTEXT"><I CLASS=emphasis>list context</I></A>.<P><DT CLASS=glossentry><A NAME="G-LIST-CONTEXT">list context</A><DD CLASS=glossdef><P CLASS=para>The situation in which an <A HREF="gloss_01.htm#G-EXPRESSION"><I CLASS=emphasis>expression</I></A>is expected by its surroundings (the codecalling it) to return a list of values rather than a single value.Functions that want a <A HREF="gloss_01.htm#G-LIST"><tt CLASS=replaceable><i>LIST</i></tt></A> of arguments tell those arguments thatthey should produce a list value.See also <A HREF="gloss_01.htm#G-CONTEXT"><I CLASS=emphasis>context</I></A>.<P><DT CLASS=glossentry><A NAME="G-LIST-OPERATOR">list operator</A><DD CLASS=glossdef><P CLASS=para>Generally, an <A HREF="gloss_01.htm#G-OPERATOR"><I CLASS=emphasis>operator</I></A> that doessomething with a list of values. Specifically, those operators (such as<A HREF="ch03_02.htm#PERL2-CMD-PRINT">print</A>, <A HREF="ch03_02.htm#PERL2-CMD-UNLINK">unlink</A>, and <A HREF="ch03_02.htm#PERL2-CMD-SYSTEM">system</A>) that do not require parentheses aroundtheir <A HREF="gloss_01.htm#G-ARGUMENT"><I CLASS=emphasis>argument</I></A> list.<P><DT CLASS=glossentry><A NAME="G-LIST-VALUE">list value</A><DD CLASS=glossdef><P CLASS=para>An unnamed list of scalar values that may be passed around within a programand passed to any function that provides a <A HREF="gloss_01.htm#G-LIST-CONTEXT"><I CLASS=emphasis>list context</I></A>.<P><DT CLASS=glossentry><A NAME="G-LITERAL">literal</A><DD CLASS=glossdef><P CLASS=para>Often means "figurative", as in "I'm literally scared to death."  Moreliterally, a symbol in a programming language like a number or <A HREF="gloss_01.htm#G-STRING"><I CLASS=emphasis>string</I></A>that gives you an actual <A HREF="gloss_01.htm#G-VALUE"><I CLASS=emphasis>value</I></A> instead of merely representing possiblevalues like a <A HREF="gloss_01.htm#G-VARIABLE"><I CLASS=emphasis>variable</I></A>.<P><DT CLASS=glossentry><A NAME="G-LITTLE-ENDIAN">little-endian</A><DD CLASS=glossdef><P CLASS=para>From Swift:  someone who eats boiled eggs little end first.Also used of computers that store the least significant <A HREF="gloss_01.htm#G-BYTE"><I CLASS=emphasis>byte</I></A> of a word ata lower byte address than the most significant byte.Often considered superior to big-endian machines.See also<A HREF="gloss_01.htm#G-BIG-ENDIAN"><I CLASS=emphasis>big-endian</I></A>.<P><DT CLASS=glossentry><A NAME="G-LOCAL">local</A><DD CLASS=glossdef><P CLASS=para>Not meaning the same thing everywhere.  A <A HREF="gloss_01.htm#G-VARIABLE"><I CLASS=emphasis>variable</I></A> inPerl can be localized inside a <A HREF="gloss_01.htm#G-BLOCK"><I CLASS=emphasis>block</I></A> or a <A HREF="gloss_01.htm#G-PACKAGE"><I CLASS=emphasis>package</I></A>.See <A HREF="gloss_01.htm#G-SCOPE"><I CLASS=emphasis>scope</I></A>.<P><DT CLASS=glossentry><A NAME="G-LOGICAL-OPERATOR">logical operator</A><DD CLASS=glossdef><P CLASS=para>Symbols representing the concepts "and", "or", and "not".<P><DT CLASS=glossentry><A NAME="G-LOOP">loop</A><DD CLASS=glossdef><P CLASS=para>A construct that performs something repeatedly, like a roller coaster.(Go to the next entry if you're tired of riding this one.)  See <A HREF="gloss_01.htm#G-LOOP"><I CLASS=emphasis>loop</I></A>.<P><DT CLASS=glossentry><A NAME="G-LOOP-CONTROL-STATEMENT">loop control statement</A><DD CLASS=glossdef><P CLASS=para>Any statement within the body of a loop that can make a loop stoplooping or skip an <A HREF="gloss_01.htm#G-ITERATION"><I CLASS=emphasis>iteration</I></A>.  See the middle sentence of the previousentry.  Generally you shouldn't try this on roller coasters without aparachute.<P><DT CLASS=glossentry><A NAME="G-LOOP-LABEL">loop label</A><DD CLASS=glossdef><P CLASS=para>A kind of key or name attached to a loop so that loop control statementscan talk about which loop they want to control.<P><DT CLASS=glossentry><A NAME="G-LVALUE">lvalue</A><DD CLASS=glossdef><P CLASS=para>Term used by language-lawyers for a location you can assign a new<A HREF="gloss_01.htm#G-VALUE"><I CLASS=emphasis>value</I></A> to, such as a <A HREF="gloss_01.htm#G-VARIABLE"><I CLASS=emphasis>variable</I></A> or an element of an<A HREF="gloss_01.htm#G-ARRAY"><I CLASS=emphasis>array</I></A>.  The "l" is short for "left", as in the left side of anassignment, a typical place for lvalues.<P><DT CLASS=glossentry><A NAME="G-MAGICAL-INCREMENT">magical increment</A><DD CLASS=glossdef><P CLASS=para>An <A HREF="gloss_01.htm#G-INCREMENT"><I CLASS=emphasis>increment</I></A> operator that knows how to add <tt CLASS=literal>1</tt> to alphanumericstrings as well as to numbers.<P><DT CLASS=glossentry><A NAME="G-MAGICAL-VARIABLES">magical variables</A><DD CLASS=glossdef><P CLASS=para>Special variables that have side effects when you access them or assignto them.  For example, in Perl, changing elements of the <B>%ENV</B>array also changes the corresponding environment variables thatsubprocesses will use.  Reading the <B>$!</B> variable gives you thecurrent UNIX error number or message.<P><DT CLASS=glossentry><A NAME="G-MANPAGE">manpage</A><DD CLASS=glossdef><P CLASS=para>A "page" from the UNIX manuals, typically accessed online via the<I CLASS=emphasis>man</I> (1) command.  A manpage contains a synopsis, a description, alist of bugs, and so on, and is typically longer than a page.  There aremanpages documenting <I CLASS=emphasis>commands, system calls</I>, <I CLASS=emphasis>libraryfunctions</I>, <I CLASS=emphasis>devices</I>, <I CLASS=emphasis>protocols</I>, <I CLASS=emphasis>files</I>, and such.<P><DT CLASS=glossentry><A NAME="G-MANTISSA">mantissa</A><DD CLASS=glossdef><P CLASS=para>The part of a <I CLASS=emphasis>floating-point</I> number that gives the digits of thenumber without saying where the decimal point really belongs.  See<A HREF="gloss_01.htm#G-EXPONENT"><I CLASS=emphasis>exponent</I></A>.<P><DT CLASS=glossentry><A NAME="G-MATCHING">matching</A><DD CLASS=glossdef><P CLASS=para>See <A HREF="gloss_01.htm#G-PATTERN-MATCHING"><I CLASS=emphasis>pattern matching</I></A>.<P><DT CLASS=glossentry><A NAME="G-METACHARACTER">metacharacter</A><DD CLASS=glossdef><P CLASS=para>A <A HREF="gloss_01.htm#G-CHARACTER"><I CLASS=emphasis>character</I></A> that is not supposed to be treated normally.  Whichcharacters are to be treated specially as metacharactersvaries greatly from context tocontext.  Your <A HREF="gloss_01.htm#G-SHELL"><I CLASS=emphasis>shell</I></A> will have certain metacharacters, double-quoted Perlstrings have other metacharacters, and patterns have all thedouble-quote metacharacters plus some extra ones.  In addition, peoplesometimes use this term to describe characters that have the eighth bitset.<P><DT CLASS=glossentry><A NAME="G-METHOD">method</A><DD CLASS=glossdef><P CLASS=para>A kind of action that an <A HREF="gloss_01.htm#G-OBJECT"><I CLASS=emphasis>object</I></A> can take ifyou direct it to.<P><DT CLASS=glossentry><A NAME="G-MINIMALISM">minimalism</A><DD CLASS=glossdef><P CLASS=para>The belief that "small is beautiful." Paradoxically, if you saysomething in a small language, it turns out big, and if you say it in abig language, it turns out small.  Go figure.<P><DT CLASS=glossentry><A NAME="G-MODE">mode</A><DD CLASS=glossdef><P CLASS=para>In the context of the <I CLASS=emphasis>stat</I> (2) system call, refers to the word holdingthe permissions and the type of the file.<P><DT CLASS=glossentry><A NAME="G-MODIFIER">modifier</A><DD CLASS=glossdef><P CLASS=para>A <A HREF="gloss_01.htm#G-CONDITIONAL"><I CLASS=emphasis>conditional</I></A> or <A HREF="gloss_01.htm#G-LOOP"><I CLASS=emphasis>loop</I></A> that you putafter the <A HREF="gloss_01.htm#G-STATEMENT"><I CLASS=emphasis>statement</I></A> instead of before, if you know what I mean.<P><DT CLASS=glossentry><A NAME="G-MODULE">module</A><DD CLASS=glossdef><P CLASS=para>A <A HREF="gloss_01.htm#G-FILE"><I CLASS=emphasis>file</I></A> that defines a <A HREF="gloss_01.htm#G-PACKAGE"><I CLASS=emphasis>package</I></A> of (almost) the same name,which can either <A HREF="gloss_01.htm#G-EXPORT"><I CLASS=emphasis>export</I></A> symbols or function as an <A HREF="gloss_01.htm#G-OBJECT"><I CLASS=emphasis>object</I></A><A HREF="gloss_01.htm#G-CLASS"><I CLASS=emphasis>class</I></A>.  The unit of reusability in Perl.  See the <A HREF="ch03_02.htm#PERL2-CMD-USE">use</A>operator.<P><DT CLASS=glossentry><A NAME="G-MODULUS">modulus</A><DD CLASS=glossdef><P CLASS=para>A divisor, when you're interested in the remainder instead of the quotient.<P><DT CLASS=glossentry><A NAME="G-MULTI-DIMENSIONAL-ARRAY">multi-dimensional array</A><DD CLASS=glossdef><P CLASS=para>An array with multiple subscripts for finding a single element.Perl does them with <I CLASS=emphasis>references</I>--see <A HREF="ch04_01.htm">Chapter 4, <i>References and Nested Data Structures</i></A>.<P><DT CLASS=glossentry><A NAME="G-MULTIPLE-INHERITANCE">multiple inheritance</A><DD CLASS=glossdef><P CLASS=para>The features you got from your mother and father, mixed togetherunpredictably.  (See also <A HREF="gloss_01.htm#G-INHERITANCE"><I CLASS=emphasis>inheritance</I></A>, and <I CLASS=emphasis>singleinheritance</I>.)  In computer languages (including Perl), the notionthat a given class may have multiple direct ancestors or <I CLASS=emphasis>base classes</I>.<P><DT CLASS=glossentry><A NAME="G-NAMESPACE">namespace</A><DD CLASS=glossdef><P CLASS=para>A domain of names.  You needn't worry whether the names in one such domainhave been used in another.  See <A HREF="gloss_01.htm#G-PACKAGE"><I CLASS=emphasis>package</I></A>.<P><DT CLASS=glossentry><A NAME="G-NETWORK-ADDRESS">network address</A><DD CLASS=glossdef><P CLASS=para>The most important attribute of a socket, like your telephone'stelephone number.<P><DT CLASS=glossentry><A NAME="G-NEWLINE">newline</A><DD CLASS=glossdef><P CLASS=para>A single character that represents the end of a line, with the ASCIIvalue of 012 octal under UNIX (but 015 on a Mac), and represented by<tt CLASS=literal>\n</tt> in Perl strings.  For certain physical devices liketerminals, this gets translated to a line feed and a carriage return.<P><DT CLASS=glossentry><A NAME="G-NULL-CHARACTER">null character</A><DD CLASS=glossdef><P CLASS=para>A character with the ASCII value of zero.  It's used by C and some UNIXsystem calls to terminate strings, but Perl allows strings to contain anull.<P><DT CLASS=glossentry><A NAME="G-NULL-LIST">null list</A><DD CLASS=glossdef><P CLASS=para>A <A HREF="gloss_01.htm#G-LIST-VALUE"><I CLASS=emphasis>list value</I></A> with zero elements, represented in Perl by <tt CLASS=literal>()</tt>.<P><DT CLASS=glossentry><A NAME="G-NULL-STRING">null string</A><DD CLASS=glossdef><P CLASS=para>A <A HREF="gloss_01.htm#G-STRING"><I CLASS=emphasis>string</I></A> not containing any characters, not to be confused witha string containing a <A HREF="gloss_01.htm#G-NULL-CHARACTER"><I CLASS=emphasis>null character</I></A>, which has a positive length.<P><DT CLASS=glossentry><A NAME="G-NUMERIC-CONTEXT">numeric context</A><DD CLASS=glossdef><P CLASS=para>The situation in which an expression is expected by its surroundings(the code calling it) to return a number.  See also <A HREF="gloss_01.htm#G-CONTEXT"><I CLASS=emphasis>context</I></A> and<A HREF="gloss_01.htm#G-STRING-CONTEXT"><I CLASS=emphasis>string context</I></A>.<P><DT CLASS=glossentry><A NAME="G-NYBBLE">nybble</A><DD CLASS=glossdef><P CLASS=para>Half a byte, equivalent to one hexadecimal digit.<P><DT CLASS=glossentry><A NAME="G-OBJECT">object</A><DD CLASS=glossdef><P CLASS=para>Something that "knows" what kind of thing it is, and what it can dobecause of what kind of thing it is.  Your program can request an objectto do things, but the object gets to decide whether it wants to do it ornot.<P><DT CLASS=glossentry><A NAME="G-OCTAL">octal</A><DD CLASS=glossdef><P CLASS=para>A number in base eight.  Only the digits zero through sevenare allowed.  Octal constants in Perl start with zero, as in 013.<P><DT CLASS=glossentry><A NAME="G-OFFSET">offset</A><DD CLASS=glossdef><P CLASS=para>How many things you have to skip over when moving from the beginning of astring or array to a specific position within it.  Thus, theminimum offset is zero, not one, because you don't skipanything to get to the first item.<P><DT CLASS=glossentry><A NAME="G-OPERAND">operand</A><DD CLASS=glossdef><P CLASS=para>You, after you dial the operator on your phone.  Or, an expression thatgives a <A HREF="gloss_01.htm#G-VALUE"><I CLASS=emphasis>value</I></A> that an operator operates on.  See also <A HREF="gloss_01.htm#G-PRECEDENCE"><I CLASS=emphasis>precedence</I></A>.<P><DT CLASS=glossentry><A NAME="G-OPERATING-SYSTEM">operating system</A><DD CLASS=glossdef><P CLASS=para>A special program that runs on the bare machineand hides the gory details of managing <I CLASS=emphasis>processes</I> and<I CLASS=emphasis>devices</I>.  It is usually used in a looser sense to indicate aparticular culture of programming.  The loose sense can be used atvarying levels of specificity.  At one extreme, you might say that allversions of UNIX and UNIX-lookalikes are the same operating system(upsetting many people, especially some lawyers).  At the other extreme,this particular version of this particular vendor's operating system isdifferent than any other version of this or any other vendor's operatingsystem.  Perl is much more portable across operating systems than manyother languages.  See also <A HREF="gloss_01.htm#G-ARCHITECTURE"><I CLASS=emphasis>architecture</I></A>.<P><DT CLASS=glossentry><A NAME="G-OPERATOR">operator</A><DD CLASS=glossdef><P CLASS=para>A <A HREF="gloss_01.htm#G-FUNCTION"><I CLASS=emphasis>function</I></A>, generally one that is built into a language, oftenwith a special syntax or symbol.  A given operator may have specificexpectations about what <I CLASS=emphasis>types</I> of data you give as its arguments(operands) and what type of data you want back from it.<P><DT CLASS=glossentry><A NAME="G-OPERATOR-OVERLOADING">operator overloading</A><DD CLASS=glossdef><P CLASS=para>A kind of <A HREF="gloss_01.htm#G-OVERLOADING"><I CLASS=emphasis>overloading</I></A> that you can do on the built-in<I CLASS=emphasis>operators</I> to make them work (syntactically) on <I CLASS=emphasis>objects</I> as ifthey were ordinary scalar values, but with the actual semantics suppliedby the object class.  This is set up with the overload <A HREF="gloss_01.htm#G-PRAGMA"><I CLASS=emphasis>pragma</I></A>--see<A HREF="ch07_01.htm">Chapter 7, <i>The Standard Perl Library</i></A>.<P><DT CLASS=glossentry><A NAME="G-OPTIONS">options</A><DD CLASS=glossdef><P CLASS=para>See <I CLASS=emphasis>switches</I>.<P><DT CLASS=glossentry><A NAME="G-OVERLOADING">overloading</A><DD CLASS=glossdef><P CLASS=para>Giving additional meanings to a symbol or construct.  Actually, alllanguages do overloading to one extent or another, since people are goodat figuring out things from <A HREF="gloss_01.htm#G-CONTEXT"><I CLASS=emphasis>context</I></A>.  If you look in your dictionary,you will find that the meaning of the word "single" is not single.<P><DT CLASS=glossentry><A NAME="G-OVERRIDING">overriding</A><DD CLASS=glossdef><P CLASS=para>Hiding or invalidating some other definition of the same name.  (Not tobe confused with <A HREF="gloss_01.htm#G-OVERLOADING"><I CLASS=emphasis>overloading</I></A>, which only adds definitions.)  Toconfuse the issue further, we use the word with two overloadeddefinitions: to describe how you can define your own <A HREF="gloss_01.htm#G-SUBROUTINE"><I CLASS=emphasis>subroutine</I></A>that hides a built-in <A HREF="gloss_01.htm#G-FUNCTION"><I CLASS=emphasis>function</I></A> of the same name, and also todescribe how you can define a replacement <A HREF="gloss_01.htm#G-METHOD"><I CLASS=emphasis>method</I></A> in a <I CLASS=emphasis>derivedclass</I> that hides a <A HREF="gloss_01.htm#G-BASE-CLASS"><I CLASS=emphasis>base class</I></A>&nbsp;'s method of the same name.You'll find both of these usages in <A HREF="ch05_01.htm">Chapter 5, <i>Packages, Modules, and Object Classes</i></A>.<P><DT CLASS=glossentry><A NAME="G-OWNER">owner</A><DD CLASS=glossdef><P CLASS=para>The one user (apart from the superuser) who has absolute control over a<A HREF="gloss_01.htm#G-FILE"><I CLASS=emphasis>file</I></A>.  A file may also have a <A HREF="gloss_01.htm#G-GROUP"><I CLASS=emphasis>group</I></A> of users that may exercisejoint ownership if the real owner permits them.  See <I CLASS=emphasis>permissionflags</I>.<P><DT CLASS=glossentry><A NAME="G-PACKAGE">package</A><DD CLASS=glossdef><P CLASS=para>A quantity of code that values its privacy, and tries to keep other codefrom trespassing upon its <A HREF="gloss_01.htm#G-NAMESPACE"><I CLASS=emphasis>namespace</I></A>by fencing all of its private belongings (<I CLASS=emphasis>variables</I>and <I CLASS=emphasis>subroutines</I>) into its own area.  A variable or subroutine mentionedin the package belongs only to that package, even if there's anothervariable or subroutine with an identical name in some other package.<P><DT CLASS=glossentry><A NAME="G-PACKAGE-LOCAL">package local</A><DD CLASS=glossdef><P CLASS=para>A <A HREF="gloss_01.htm#G-VARIABLE"><I CLASS=emphasis>variable</I></A> or <A HREF="gloss_01.htm#G-SUBROUTINE"><I CLASS=emphasis>subroutine</I></A> belonging to a package and notvisible to anyone else.  At least, not without peeking.  See<A HREF="gloss_01.htm#G-NAMESPACE"><I CLASS=emphasis>namespace</I></A>.<P><DT CLASS=glossentry><A NAME="G-PARAMETER">parameter</A><DD CLASS=glossdef><P CLASS=para>See <A HREF="gloss_01.htm#G-ARGUMENT"><I CLASS=emphasis>argument</I></A>.<P><DT CLASS=glossentry><A NAME="G-PARSING">parsing</A><DD CLASS=glossdef><P CLASS=para>The subtle but sometimes brutal art of attempting to turn your possiblymalformed program into a valid <A HREF="gloss_01.htm#G-SYNTAX-TREE"><I CLASS=emphasis>syntax tree</I></A>.<P><DT CLASS=glossentry><A NAME="G-PATH">PATH</A><DD CLASS=glossdef><P CLASS=para>The list of <I CLASS=emphasis>directories</I> the system looks in to find a programyou want to <A HREF="gloss_01.htm#G-EXECUTE"><I CLASS=emphasis>execute</I></A>.  The list is stored as one of your <I CLASS=emphasis>environmentvariables</I>, accessible in Perl as <tt CLASS=literal>$ENV{PATH}</tt>.<P><DT CLASS=glossentry><A NAME="G-PATHNAME">pathname</A><DD CLASS=glossdef><P CLASS=para>A fully qualified filename such as <I CLASS=emphasis>/usr/bin/perl</I> or<I CLASS=emphasis>C:\my_apps\perl.exe</I>.  Sometimes confused with <tt CLASS=literal>PATH</tt>.<P><DT CLASS=glossentry><A NAME="G-PATTERN-MATCHING">pattern matching</A><DD CLASS=glossdef><P CLASS=para>Taking a pattern, expressed as a <A HREF="gloss_01.htm#G-REGULAR-EXPRESSION"><I CLASS=emphasis>regular expression</I></A>, and trying thepattern various ways on a string to see if there's any way tomake it fit.  Often used to pick interesting tidbits out of a file.<P><DT CLASS=glossentry><A NAME="G-PERMISSION-FLAGS">permission flags</A><DD CLASS=glossdef><P CLASS=para>Bits that the <A HREF="gloss_01.htm#G-OWNER"><I CLASS=emphasis>owner</I></A> of a file sets or unsets in order to allow ordisallow access to other people.  These flags are part of the <A HREF="gloss_01.htm#G-MODE"><I CLASS=emphasis>mode</I></A>word returned by the <A HREF="ch03_02.htm#PERL2-CMD-STAT">stat</A> operator when you ask about a file.On UNIX systems you can check the <I CLASS=emphasis>ls</I> (1) manpage for moreinformation about the permission flags.<P><DT CLASS=glossentry><A NAME="G-PERN">Pern</A><DD CLASS=glossdef><P CLASS=para>What you get when you do Perl<tt CLASS=literal>++</tt> twice.  Increment it onlyonce, and your hair curls.  Increment it three times, and you get atasty beverage that isn't Java.  See also <I CLASS=emphasis>slice</I>.<P><DT CLASS=glossentry><A NAME="G-PIPE">pipe</A><DD CLASS=glossdef><P CLASS=para>A direct <A HREF="gloss_01.htm#G-CONNECTION"><I CLASS=emphasis>connection</I></A> that carries the output of one <A HREF="gloss_01.htm#G-PROCESS"><I CLASS=emphasis>process</I></A> to the inputof another without the necessity of an intermediate temporary file.Once the pipe is set up, the two processes in question can mostly readand write as if they were talking to a normal file.<P><DT CLASS=glossentry><A NAME="G-PIPELINE">pipeline</A><DD CLASS=glossdef><P CLASS=para>A series of <I CLASS=emphasis>processes</I> all in a row, linked by <I CLASS=emphasis>pipes</I>,where each passesits output to the next.<P><DT CLASS=glossentry><A NAME="G-POINTER">pointer</A><DD CLASS=glossdef><P CLASS=para>A <A HREF="gloss_01.htm#G-VARIABLE"><I CLASS=emphasis>variable</I></A> in a language like C that contains the exact memorylocation of some other item.  Perl handles pointers internally so youdon't have to worry about them.  Instead, you just use symbolic pointersin the form of <I CLASS=emphasis>keys</I> and <A HREF="gloss_01.htm#G-VARIABLE"><I CLASS=emphasis>variable</I></A> names, or <I CLASS=emphasis>hardreferences</I>, which aren't pointers (but act like pointers, and do infact contain pointers).<P><DT CLASS=glossentry><A NAME="G-PORT">port</A><DD CLASS=glossdef><P CLASS=para>The part of the addressof a TCP or UDP socket that directs packets to the correct process afterfinding the right machine, something like the phone extension number yougive when you reach the company operator.<P><DT CLASS=glossentry><A NAME="G-PRAGMA">pragma</A><DD CLASS=glossdef><P CLASS=para>A library module whose practical hints and suggestions are received (andpossibly ignored) by the compiler.  [&lt; Gr]<P><DT CLASS=glossentry><A NAME="G-PRECEDENCE">precedence</A><DD CLASS=glossdef><P CLASS=para>The rules of conduct that, in the absence of other guidance, determinewhat should happen first (i.e., in the absence of parentheses,you always do multiplication before addition).<P><DT CLASS=glossentry><A NAME="G-PREPROCESSING">preprocessing</A><DD CLASS=glossdef><P CLASS=para>What some other helper <A HREF="gloss_01.htm#G-PROCESS"><I CLASS=emphasis>process</I></A> did to transform the incoming datainto a form more suitable for the current process.  Often done with anincoming <A HREF="gloss_01.htm#G-PIPE"><I CLASS=emphasis>pipe</I></A>.  See also <A HREF="gloss_01.htm#G-C-PREPROCESSOR"><I CLASS=emphasis>C preprocessor</I></A>.<P><DT CLASS=glossentry><A NAME="G-PROCEDURE">procedure</A><DD CLASS=glossdef><P CLASS=para>A <A HREF="gloss_01.htm#G-SUBROUTINE"><I CLASS=emphasis>subroutine</I></A>.<P><DT CLASS=glossentry><A NAME="G-PROCESS">process</A><DD CLASS=glossdef><P CLASS=para>An instance of a running program.  Under multi-tasking systems likeUNIX, two or more separate processes could be running the same programindependently at the same time--in fact, the <A HREF="ch03_02.htm#PERL2-CMD-FORK">fork</A> function is designedto bring about this happy state of affairs.  Under other operatingsystems processes are sometimes called "tasks" or "jobs".<P><DT CLASS=glossentry><A NAME="G-PROTOCOL">protocol</A><DD CLASS=glossdef><P CLASS=para>In networking, an agreed-upon way of sending messages back and forthso that neither correspondent will get too confused.<P><DT CLASS=glossentry><A NAME="G-PSEUDO-LITERAL">pseudo literal</A><DD CLASS=glossdef><P CLASS=para>An <A HREF="gloss_01.htm#G-OPERATOR"><I CLASS=emphasis>operator</I></A> that looks something like a <A HREF="gloss_01.htm#G-LITERAL"><I CLASS=emphasis>literal</I></A>, such as theoutput-grabbing operator, <tt CLASS=literal>`</tt><tt CLASS=replaceable><i>command</i></tt><tt CLASS=literal>`</tt>.<P><DT CLASS=glossentry><A NAME="G-PSEUDO-TERMINAL">pseudo terminal</A><DD CLASS=glossdef><P CLASS=para>A thing that looks like an ordinary terminal to the computer, but insteadof being attached to a real terminal, is really attached to anothercomputer program, which is doing the pseudotyping.<P><DT CLASS=glossentry><A NAME="G-PUBLIC-DOMAIN">public domain</A><DD CLASS=glossdef><P CLASS=para>Something not owned by anybody.  Perl is copyrighted, and is thus<I CLASS=emphasis>not</I> in the public domain--it's just <A HREF="gloss_01.htm#G-FREELY-AVAILABLE"><I CLASS=emphasis>freely available</I></A> and<A HREF="gloss_01.htm#G-FREELY-REDISTRIBUTABLE"><I CLASS=emphasis>freely redistributable</I></A>.<P><DT CLASS=glossentry><A NAME="G-PV">PV</A><DD CLASS=glossdef><P CLASS=para>A "pointer value", which is Perl Internals Talk for a <tt CLASS=literal>char*</tt>.<P><DT CLASS=glossentry><A NAME="G-QUALIFIED">qualified</A><DD CLASS=glossdef><P CLASS=para>Possessing an explicit package name.  The symbol <tt CLASS=literal>$ex::loser</tt> isqualified; <tt CLASS=literal>$loser</tt> is unqualified.<P><DT CLASS=glossentry><A NAME="G-READABLE">readable</A><DD CLASS=glossdef><P CLASS=para>With regard to files, one that has the proper permission bit setto let you access the file. With regard to computer programs, one that's well enough written thatsomeone can come back later and have a chance of figuring out whatit's trying to do.  Who knows, you might even have to come back and figureout your own program.<P><DT CLASS=glossentry><A NAME="G-RECORD">record</A><DD CLASS=glossdef><P CLASS=para>A set of related data values in a <A HREF="gloss_01.htm#G-FILE"><I CLASS=emphasis>file</I></A> or stream, often associatedwith a unique <A HREF="gloss_01.htm#G-KEY"><I CLASS=emphasis>key</I></A> field.  In UNIX, often commensurate with a <A HREF="gloss_01.htm#G-LINE"><I CLASS=emphasis>line</I></A>,or a blank-line-delimited set of lines (a "paragraph").  Each line ofthe <I CLASS=emphasis>/etc/passwd</I> file is a record, keyed on login name, containinginformation about that user.<P><DT CLASS=glossentry><A NAME="G-RECURSION">recursion</A><DD CLASS=glossdef><P CLASS=para>The art of defining something (at least partly) in terms of itself bymeans of <I CLASS=emphasis>recursion</I>,which is a naughty no-no in dictionaries.<P><DT CLASS=glossentry><A NAME="G-REFERENCE">reference</A><DD CLASS=glossdef><P CLASS=para>A place you look to find a pointer to information stored somewhere else.  (See<A HREF="gloss_01.htm#G-INDIRECTION"><I CLASS=emphasis>indirection</I></A>.)  References come in two flavors, <I CLASS=emphasis>symbolicreferences</I>, and <I CLASS=emphasis>hard references</I>.<P><DT CLASS=glossentry><A NAME="G-REGULAR-EXPRESSION">regular expression</A><DD CLASS=glossdef><P CLASS=para>A single entity with various interpretations, like an elephant.  To acomputer scientist, it's a grammar for a little language in which somestrings are legal and others aren't.  To normal people, it's a patternthat you can use to find what you're looking for when it varies fromcase to case.  Example of a regular expression:<DIV CLASS=programlisting><P><PRE>/Oh s.*t./</PRE></DIV><P CLASS=para>This pattern will match strings like <tt CLASS=literal>`Oh say can you see by the dawn's earlylight,`</tt> and <tt CLASS=literal>`Oh sit!`</tt>.  See the section "Regular Expressions"in <A HREF="ch02_01.htm">Chapter 2, <i>The Gory Details</i></A>.<P><DT CLASS=glossentry><A NAME="G-REGULAR-FILE">regular file</A><DD CLASS=glossdef><P CLASS=para>A <A HREF="gloss_01.htm#G-FILE"><I CLASS=emphasis>file</I></A> that's not a <A HREF="gloss_01.htm#G-DIRECTORY"><I CLASS=emphasis>directory</I></A>, a <A HREF="gloss_01.htm#G-DEVICE"><I CLASS=emphasis>device</I></A>, a named<A HREF="gloss_01.htm#G-PIPE"><I CLASS=emphasis>pipe</I></A> or <A HREF="gloss_01.htm#G-SOCKET"><I CLASS=emphasis>socket</I></A>, or a <A HREF="gloss_01.htm#G-SYMBOLIC-LINK"><I CLASS=emphasis>symbolic link</I></A>.Perl uses the <tt CLASS=literal>-f</tt> <I CLASS=emphasis>file testoperator</I> to identify regular files.<P><DT CLASS=glossentry><A NAME="G-RELATION">relation</A><DD CLASS=glossdef><P CLASS=para>Jargon used by relational database folks to mean a <A HREF="gloss_01.htm#G-FILE"><I CLASS=emphasis>file</I></A>--albeit aparticular sort of file, tabular in form, in which all the tuples(<I CLASS=emphasis>records</I>) are of the same kind, each containing the same domains(<I CLASS=emphasis>keys</I>) and ranges (<I CLASS=emphasis>fields</I>).  The UNIX <I CLASS=emphasis>/etc/passwd</I> fileis a relation keyed on login name.  It's called a relation because itrelates keys and fields in much the same way as an hash associateskeys and values.<P><DT CLASS=glossentry><A NAME="G-RELATIONAL-OPERATOR">relational operator</A><DD CLASS=glossdef><P CLASS=para>An operator that says whether a particular ordering relationship is<A HREF="gloss_01.htm#G-TRUE"><I CLASS=emphasis>true</I></A> about a pair of operands.  Perl has both numeric and stringrelational operators.  See <A HREF="gloss_01.htm#G-COLLATING-SEQUENCE"><I CLASS=emphasis>collating sequence</I></A>.<P><DT CLASS=glossentry><A NAME="G-RESERVED-WORDS">reserved words</A><DD CLASS=glossdef><P CLASS=para>A word with a specific, built-in meaning to a <A HREF="gloss_01.htm#G-COMPILER"><I CLASS=emphasis>compiler</I></A>, such as<B>if</B> or <A HREF="ch03_02.htm#PERL2-CMD-DELETE">delete</A>.  In many languages (not Perl) it's illegal touse reserved words to name anything else.  (Which is why they'rereserved, after all.)  In Perl, you just can't use them to name<I CLASS=emphasis>labels</I> or <I CLASS=emphasis>filehandles</I>.  Also called "keywords".<P><DT CLASS=glossentry><A NAME="G-RETURN-VALUE">return value</A><DD CLASS=glossdef><P CLASS=para>The <A HREF="gloss_01.htm#G-VALUE"><I CLASS=emphasis>value</I></A> produced by a <A HREF="gloss_01.htm#G-SUBROUTINE"><I CLASS=emphasis>subroutine</I></A> or <A HREF="gloss_01.htm#G-EXPRESSION"><I CLASS=emphasis>expression</I></A> whenevaluated.  In Perl, a return value may be either a <A HREF="gloss_01.htm#G-OLIST"><I CLASS=emphasis>list</I></A> or a<A HREF="gloss_01.htm#G-SCALAR"><I CLASS=emphasis>scalar</I></A> value.  The subroutine call <tt CLASS=literal>piglatin('bingo')</tt> returnsthe value "<tt CLASS=literal>ingobay</tt>".<P><DT CLASS=glossentry><A NAME="G-RIGHT-SHIFT">right shift</A><DD CLASS=glossdef><P CLASS=para>A <A HREF="gloss_01.htm#G-BIT-SHIFT"><I CLASS=emphasis>bit shift</I></A> that divides a number by some power of two.<P><DT CLASS=glossentry><A NAME="G-RUNTIME">run-time</A><DD CLASS=glossdef><P CLASS=para>The time when Perl is actually doing what your script says to do, asopposed to the earlier period of time when it was trying to figure outwhether what you said made any sense whatsoever.  See also <I CLASS=emphasis>compile-time</I>.<P><DT CLASS=glossentry><A NAME="G-RUNTIME-PATTERN">run-time pattern</A><DD CLASS=glossdef><P CLASS=para>A pattern that contains one or more variables to be interpolatedbefore parsing the pattern as a <A HREF="gloss_01.htm#G-REGULAR-EXPRESSION"><I CLASS=emphasis>regular expression</I></A>, and that thereforecannot be analyzed at compile time, but must be re-analyzed each timethe pattern match operator is evaluated.  Run-time patterns are usefulbut expensive.<P><DT CLASS=glossentry><A NAME="G-RVALUE">rvalue</A><DD CLASS=glossdef><P CLASS=para>A <A HREF="gloss_01.htm#G-VALUE"><I CLASS=emphasis>value</I></A> that you might find on the right side of an<A HREF="gloss_01.htm#G-ASSIGNMENT"><I CLASS=emphasis>assignment</I></A>.  See also <A HREF="gloss_01.htm#G-LVALUE"><I CLASS=emphasis>lvalue</I></A>.<P><DT CLASS=glossentry><A NAME="G-SCALAR">scalar</A><DD CLASS=glossdef><P CLASS=para>A simple value, such as a number or string.<P><DT CLASS=glossentry><A NAME="G-SCALAR-CONTEXT">scalar context</A><DD CLASS=glossdef><P CLASS=para>The situation in which an <A HREF="gloss_01.htm#G-EXPRESSION"><I CLASS=emphasis>expression</I></A> is expected by itssurroundings (the code calling it) to return a single <A HREF="gloss_01.htm#G-VALUE"><I CLASS=emphasis>value</I></A> ratherthan a <A HREF="gloss_01.htm#G-OLIST"><I CLASS=emphasis>list</I></A> of values.  See also <A HREF="gloss_01.htm#G-CONTEXT"><I CLASS=emphasis>context</I></A> and <I CLASS=emphasis>listcontext</I>. A scalar context sometimes imposes additional constraints on the returnvalue--see <A HREF="gloss_01.htm#G-STRING-CONTEXT"><I CLASS=emphasis>string context</I></A> and <A HREF="gloss_01.htm#G-NUMERIC-CONTEXT"><I CLASS=emphasis>numeric context</I></A>.  Sometimes wetalk about a <A HREF="gloss_01.htm#G-BOOLEAN-CONTEXT"><I CLASS=emphasis>Boolean context</I></A> inside conditionals, but this imposes noadditional constraints, since any scalar value, whether numeric or<A HREF="gloss_01.htm#G-STRING"><I CLASS=emphasis>string</I></A>, is already true or false.<P><DT CLASS=glossentry><A NAME="G-SCALAR-LITERAL">scalar literal</A><DD CLASS=glossdef><P CLASS=para>A number or quoted <A HREF="gloss_01.htm#G-STRING"><I CLASS=emphasis>string</I></A>--anactual <A HREF="gloss_01.htm#G-VALUE"><I CLASS=emphasis>value</I></A> in the text of your program, as opposed to a<A HREF="gloss_01.htm#G-VARIABLE"><I CLASS=emphasis>variable</I></A>.<P><DT CLASS=glossentry><A NAME="G-SCALAR-VALUE">scalar value</A><DD CLASS=glossdef><P CLASS=para>A value that happens to be a<A HREF="gloss_01.htm#G-SCALAR"><I CLASS=emphasis>scalar</I></A> as opposed to a <A HREF="gloss_01.htm#G-OLIST"><I CLASS=emphasis>list</I></A>.<P><DT CLASS=glossentry><A NAME="G-SCALAR-VARIABLE">scalar variable</A><DD CLASS=glossdef><P CLASS=para>A <A HREF="gloss_01.htm#G-VARIABLE"><I CLASS=emphasis>variable</I></A> prefixed with<tt CLASS=literal>$</tt> that holds a single value.<P><DT CLASS=glossentry><A NAME="G-SCOPE">scope</A><DD CLASS=glossdef><P CLASS=para>How far away you can see a variable from, looking through one.  Perl hastwo visibility mechanisms: it does <A HREF="gloss_01.htm#G-DYNAMIC-SCOPING"><I CLASS=emphasis>dynamic scoping</I></A> of <A HREF="ch03_02.htm#PERL2-CMD-LOCAL">local</A><I CLASS=emphasis>variables</I>, meaning that the rest of the <A HREF="gloss_01.htm#G-BLOCK"><I CLASS=emphasis>block</I></A>, and any<I CLASS=emphasis>subroutines</I> that are called by the rest of the block, can see thevariables that are local to the block.  Perl does <A HREF="gloss_01.htm#G-LEXICAL-SCOPING"><I CLASS=emphasis>lexical scoping</I></A>of <A HREF="ch03_02.htm#PERL2-CMD-MY">my</A> variables, meaning that the rest of the block can see thevariable, but other subroutines called by the block <I CLASS=emphasis>cannot</I> see thevariable.<P><DT CLASS=glossentry><A NAME="G-SCRIPT">script</A><DD CLASS=glossdef><P CLASS=para>A text <A HREF="gloss_01.htm#G-FILE"><I CLASS=emphasis>file</I></A> that is a program intended to be <I CLASS=emphasis>executed</I>directly rather than <I CLASS=emphasis>compiled</I> to another form of file beforeexecution.<P><DT CLASS=glossentry><A NAME="G-SED">sed</A><DD CLASS=glossdef><P CLASS=para>A venerable stream editor from which Perl derives some of its ideas.<P><DT CLASS=glossentry><A NAME="G-SERVER">server</A><DD CLASS=glossdef><P CLASS=para>In networking, a <A HREF="gloss_01.htm#G-PROCESS"><I CLASS=emphasis>process</I></A> that either advertises a <A HREF="gloss_01.htm#G-SERVICE"><I CLASS=emphasis>service</I></A> orjust hangs around at a known location and waits for <I CLASS=emphasis>clients</I> whoneed service to get in touch with it.<P><DT CLASS=glossentry><A NAME="G-SERVICE">service</A><DD CLASS=glossdef><P CLASS=para>Something you do for someone else to make them happy, like giving themthe time of day (or of their life).  On some UNIX machines, well-knownservices are listed by the <A HREF="ch03_02.htm#PERL2-CMD-GETSERVENT">getservent</A> function.<P><DT CLASS=glossentry><A NAME="G-SETGID">setgid</A><DD CLASS=glossdef><P CLASS=para>Same as setuid, only having to do with giving away <A HREF="gloss_01.htm#G-GROUP"><I CLASS=emphasis>group</I></A> privileges.<P><DT CLASS=glossentry><A NAME="G-SETUID">setuid</A><DD CLASS=glossdef><P CLASS=para>Said of a program that runs with the privileges of its <A HREF="gloss_01.htm#G-OWNER"><I CLASS=emphasis>owner</I></A>rather than (as is usually the case) the privileges of whoever is runningit. Also describes the bit in the mode word (<I CLASS=emphasis>permissionflags</I>) that implements the feature. This bit must be explicitly setby the owner to implement this feature, and the program must bewritten not to give away more privileges than it ought.<P><DT CLASS=glossentry><A NAME="G-SHELL">shell</A><DD CLASS=glossdef><P CLASS=para>A <A HREF="gloss_01.htm#G-COMMAND"><I CLASS=emphasis>command</I></A>-<I CLASS=emphasis>line</I> <A HREF="gloss_01.htm#G-INTERPRETER"><I CLASS=emphasis>interpreter</I></A>.  The program that interactivelygives you a prompt, accepts one or more <I CLASS=emphasis>lines</I> of input, andexecutes the programs you mentioned, feeding each of them their proper<I CLASS=emphasis>arguments</I> and input data.  Shells can also execute scriptscontaining such commands.  Under the UNIX <A HREF="gloss_01.htm#G-OPERATING-SYSTEM"><I CLASS=emphasis>operating system</I></A>,typical shells are the Bourne shell (<I CLASS=emphasis>/bin/sh</I>), the C shell(<I CLASS=emphasis>/bin/csh</I>), and the Korn shell (<I CLASS=emphasis>/bin/ksh</I>).  Perl is notstrictly a shell because it's not interactive (although Perl programscan be interactive).<P><DT CLASS=glossentry><A NAME="G-SIDE-EFFECTS">side effects</A><DD CLASS=glossdef><P CLASS=para>Something extra that happens when you evaluate an <A HREF="gloss_01.htm#G-EXPRESSION"><I CLASS=emphasis>expression</I></A>.Nowadays it can refer to almost anything.  For example, evaluating a simpleassignment statement typically has the "side effect" of assigning a valueto a variable.  (And you thought assigning the value was your primaryintent in the first place!)  Likewise, assigning a value to the specialvariable <tt CLASS=literal>$|</tt> has the side effect of forcing a flush after every<A HREF="ch03_02.htm#PERL2-CMD-WRITE">write</A> or <A HREF="ch03_02.htm#PERL2-CMD-PRINT">print</A> on the currently selected filehandle.<P><DT CLASS=glossentry><A NAME="G-SIGNAL-HANDLER">signal handler</A><DD CLASS=glossdef><P CLASS=para>A <A HREF="gloss_01.htm#G-SUBROUTINE"><I CLASS=emphasis>subroutine</I></A> that, instead of being content to be called in thenormal fashion, sits around waiting for a bolt out of the blue before itwill deign to <A HREF="gloss_01.htm#G-EXECUTE"><I CLASS=emphasis>execute</I></A>.  Under UNIX, bolts out of the blue are calledsignals, and you send them with a <A HREF="ch03_02.htm#PERL2-CMD-KILL">kill</A> command.<P><DT CLASS=glossentry><A NAME="G-SINGLE-INHERITANCE">single inheritance</A><DD CLASS=glossdef><P CLASS=para>The features you got from your mother, if she told you you don't have afather.  (See also <A HREF="gloss_01.htm#G-INHERITANCE"><I CLASS=emphasis>inheritance</I></A>, and <A HREF="gloss_01.htm#G-MULTIPLE-INHERITANCE"><I CLASS=emphasis>multiple inheritance</I></A>.)In computer languages, the notion that <I CLASS=emphasis>classes</I> reproduceasexually, so that a given class can only have one direct ancestor or<A HREF="gloss_01.htm#G-BASE-CLASS"><I CLASS=emphasis>base class</I></A>.  Perl enforces no such restriction.<P><DT CLASS=glossentry><A NAME="G-SLICE">slice</A><DD CLASS=glossdef><P CLASS=para>A selection of <A HREF="gloss_01.htm#G-ARRAY"><I CLASS=emphasis>array</I></A> <I CLASS=emphasis>elements</I>.<P><DT CLASS=glossentry><A NAME="G-SOCKET">socket</A><DD CLASS=glossdef><P CLASS=para>An endpoint for network communication between two <I CLASS=emphasis>processes</I>, thatworks much like a telephone.  The most important thing about a socket isits <A HREF="gloss_01.htm#G-NETWORK-ADDRESS"><I CLASS=emphasis>network address</I></A> (like a phone number).  Different kinds ofsockets have different kinds of addresses--some look like filenames, andsome don't.<P><DT CLASS=glossentry><A NAME="G-SOFT-REFERENCE">soft reference</A><DD CLASS=glossdef><P CLASS=para>See <A HREF="gloss_01.htm#G-SYMBOLIC-REFERENCE"><I CLASS=emphasis>symbolic reference</I></A>.<P><DT CLASS=glossentry><A NAME="G-STANDARD-ERROR">standard error</A><DD CLASS=glossdef><P CLASS=para>The default output stream for making nasty remarks that don't belong in<A HREF="gloss_01.htm#G-STANDARD-OUTPUT"><I CLASS=emphasis>standard output</I></A>.  Represented within a Perl program by the<A HREF="gloss_01.htm#G-FILEHANDLE"><I CLASS=emphasis>filehandle</I></A> <tt CLASS=literal>STDERR</tt>.  You can use this stream explicitly, but theoperators <A HREF="ch03_02.htm#PERL2-CMD-DIE">die</A> and <A HREF="ch03_02.htm#PERL2-CMD-WARN">warn</A> write to your standard error streamautomatically.<P><DT CLASS=glossentry><A NAME="G-STANDARD-IO">standard I/O</A><DD CLASS=glossdef><P CLASS=para>A standard C library for doing <I CLASS=emphasis>buffered</I> input and output to the<A HREF="gloss_01.htm#G-OPERATING-SYSTEM"><I CLASS=emphasis>operating system</I></A>.  (The "standard" of standard I/O is only marginallyrelated to the "standard" of standard input and output.)  In general,Perl relies on whatever implementation of standard I/O a given operatingsystem supplies, so the buffering characteristics of a Perl program onone machine may not exactly match those on another machine.  Normallythis only influences efficiency, not semantics.  If your standard I/Opackage is doing block buffering and you want it to <A HREF="gloss_01.htm#G-FLUSH"><I CLASS=emphasis>flush</I></A> the buffermore often, just set the <B>$|</B> variable to a nonzero value.<P><DT CLASS=glossentry><A NAME="G-STANDARD-INPUT">standard input</A><DD CLASS=glossdef><P CLASS=para>The default input stream for your program, which if possible shouldn'tcare where its data is coming from.  Represented within a Perl programby the <A HREF="gloss_01.htm#G-FILEHANDLE"><I CLASS=emphasis>filehandle</I></A> <tt CLASS=literal>STDIN</tt>.<P><DT CLASS=glossentry><A NAME="G-STANDARD-OUTPUT">standard output</A><DD CLASS=glossdef><P CLASS=para>The default output stream for your program, which if possible shouldn'tcare where its data is going.  Represented within a Perl program by the<A HREF="gloss_01.htm#G-FILEHANDLE"><I CLASS=emphasis>filehandle</I></A> <tt CLASS=literal>STDOUT</tt>.<P><DT CLASS=glossentry><A NAME="G-STAT-STRUCTURE">stat structure</A><DD CLASS=glossdef><P CLASS=para>A special internal buffer in which Perl keeps the information about thelast <A HREF="gloss_01.htm#G-FILE"><I CLASS=emphasis>file</I></A> you requested information on.<P><DT CLASS=glossentry><A NAME="G-STATEMENT">statement</A><DD CLASS=glossdef><P CLASS=para>A <A HREF="gloss_01.htm#G-COMMAND"><I CLASS=emphasis>command</I></A> to the computer about what to do next, like a step in arecipe:  "Add marmalade to batter and mix until mixed."  Not to beconfused with a <A HREF="gloss_01.htm#G-DECLARATION"><I CLASS=emphasis>declaration</I></A>, which doesn't tell the computer to doanything, but just to learn something.<P><DT CLASS=glossentry><A NAME="G-STATIC">static</A><DD CLASS=glossdef><P CLASS=para>Varying slowly, compared to something else.  (Unfortunately, everythingis relatively stable compared to something else, except for certainelementary particles, and we're not so sure about them.)  In computers,where things are supposed to vary rapidly, "static" has a derogatoryconnotation, indicating a slightly dysfunctional <A HREF="gloss_01.htm#G-VARIABLE"><I CLASS=emphasis>variable</I></A>, <A HREF="gloss_01.htm#G-SUBROUTINE"><I CLASS=emphasis>subroutine</I></A>,or <A HREF="gloss_01.htm#G-METHOD"><I CLASS=emphasis>method</I></A>.  InPerl culture, the word is considered to be politically incorrect.<P><DT CLASS=glossentry><A NAME="G-STATIC-METHOD">static method</A><DD CLASS=glossdef><P CLASS=para>See <A HREF="gloss_01.htm#G-CLASS-METHOD"><I CLASS=emphasis>class method</I></A>.<P><DT CLASS=glossentry><A NAME="G-STATIC-SCOPING">static scoping</A><DD CLASS=glossdef><P CLASS=para>Same as <A HREF="gloss_01.htm#G-LEXICAL-SCOPING"><I CLASS=emphasis>lexical scoping</I></A>.<P><DT CLASS=glossentry><A NAME="G-STATUS">status</A><DD CLASS=glossdef><P CLASS=para>The <A HREF="gloss_01.htm#G-VALUE"><I CLASS=emphasis>value</I></A> returned to the parent <A HREF="gloss_01.htm#G-PROCESS"><I CLASS=emphasis>process</I></A> when one of itschild processes dies.  This value is placed in the special variable<B>$?</B>.  Its upper eight <I CLASS=emphasis>bits</I> are the exit status of the defunctprocess, and its lower eight bits identify the signal (if any) that theprocess died from.  On UNIX systems, this status value is the same as thestatus word returned by <I CLASS=emphasis>wait</I> (2).  See <A HREF="ch03_02.htm#PERL2-CMD-SYSTEM">system</A> in <A HREF="ch03_01.htm">Chapter 3, <i>Functions</i></A>.<P><DT CLASS=glossentry><A NAME="G-STDERR">STDERR</A><DD CLASS=glossdef><P CLASS=para>See <A HREF="gloss_01.htm#G-STANDARD-ERROR"><I CLASS=emphasis>standard error</I></A>.<P><DT CLASS=glossentry><A NAME="G-STDIN">STDIN</A><DD CLASS=glossdef><P CLASS=para>See <A HREF="gloss_01.htm#G-STANDARD-INPUT"><I CLASS=emphasis>standard input</I></A>.<P><DT CLASS=glossentry><A NAME="G-STDIO">STDIO</A><DD CLASS=glossdef><P CLASS=para>See <A HREF="gloss_01.htm#G-STANDARD-IO"><I CLASS=emphasis>standard I/O</I></A>.<P><DT CLASS=glossentry><A NAME="G-STDOUT">STDOUT</A><DD CLASS=glossdef><P CLASS=para>See <A HREF="gloss_01.htm#G-STANDARD-OUTPUT"><I CLASS=emphasis>standard output</I></A>.<P><DT CLASS=glossentry><A NAME="G-STRING">string</A><DD CLASS=glossdef><P CLASS=para>A sequence of characters such as "He said <B>!@#*&amp;%@#*?\n</B>."  A stringdoes not have to be entirely printable.<P><DT CLASS=glossentry><A NAME="G-STRING-CONTEXT">string context</A><DD CLASS=glossdef><P CLASS=para>The situation in which an expression isexpected by its surroundings (the code calling it) to return a <A HREF="gloss_01.htm#G-STRING"><I CLASS=emphasis>string</I></A>.See also <A HREF="gloss_01.htm#G-CONTEXT"><I CLASS=emphasis>context</I></A> and <A HREF="gloss_01.htm#G-NUMERIC-CONTEXT"><I CLASS=emphasis>numeric context</I></A>.<P><DT CLASS=glossentry><A NAME="G-STRUCT">struct</A><DD CLASS=glossdef><P CLASS=para>C keyword introducing a structure definition or name.<P><DT CLASS=glossentry><A NAME="G-STRUCTURE">structure</A><DD CLASS=glossdef><P CLASS=para>See <A HREF="gloss_01.htm#G-DATA-STRUCTURE"><I CLASS=emphasis>data structure</I></A>.<P><DT CLASS=glossentry><A NAME="G-SUBCLASS">subclass</A><DD CLASS=glossdef><P CLASS=para>See <A HREF="gloss_01.htm#G-DERIVED-CLASS"><I CLASS=emphasis>derived class</I></A>.<P><DT CLASS=glossentry><A NAME="G-SUBROUTINE">subroutine</A><DD CLASS=glossdef><P CLASS=para>A namedpiece of program that can be invoked from elsewhere in the program inorder to accomplish some sub-goal of the program.  A subroutine is oftenparameterized to accomplish different but related things depending onits input <I CLASS=emphasis>arguments</I>.  If the subroutine returns a meaningful<A HREF="gloss_01.htm#G-VALUE"><I CLASS=emphasis>value</I></A>, it is also called a <A HREF="gloss_01.htm#G-FUNCTION"><I CLASS=emphasis>function</I></A>.<P><DT CLASS=glossentry><A NAME="G-SUBSCRIPT">subscript</A><DD CLASS=glossdef><P CLASS=para>A <A HREF="gloss_01.htm#G-VALUE"><I CLASS=emphasis>value</I></A> that indicates the position of a particular <I CLASS=emphasis>arrayelement</I> in an array.<P><DT CLASS=glossentry><A NAME="G-SUBSTRING">substring</A><DD CLASS=glossdef><P CLASS=para>A portion of a <A HREF="gloss_01.htm#G-STRING"><I CLASS=emphasis>string</I></A>, starting at a certain <A HREF="gloss_01.htm#G-CHARACTER"><I CLASS=emphasis>character</I></A> position(<A HREF="gloss_01.htm#G-OFFSET"><I CLASS=emphasis>offset</I></A>), and proceeding for a certain number of characters.<P><DT CLASS=glossentry><A NAME="G-SUPERCLASS">superclass</A><DD CLASS=glossdef><P CLASS=para>See <A HREF="gloss_01.htm#G-BASE-CLASS"><I CLASS=emphasis>base class</I></A>.<P><DT CLASS=glossentry><A NAME="G-SUPERUSER">superuser</A><DD CLASS=glossdef><P CLASS=para>The person whom the <A HREF="gloss_01.htm#G-OPERATING-SYSTEM"><I CLASS=emphasis>operating system</I></A> will let do almost anything.Typically your system administrator or someone pretending to be yoursystem administrator.  On UNIX systems, the <I CLASS=emphasis>root</I> user.<P><DT CLASS=glossentry><A NAME="G-SV">SV</A><DD CLASS=glossdef><P CLASS=para>Short for "scalar value".  But within the Perl interpreter every<A HREF="gloss_01.htm#G-THINGY"><I CLASS=emphasis>thingy</I></A> is treated as a kind of SV, in an object-oriented sort ofway.  Every <A HREF="gloss_01.htm#G-VALUE"><I CLASS=emphasis>value</I></A> inside Perl is passed around as an SV* pointerin C.  The SV <A HREF="gloss_01.htm#G-STRUCT"><I CLASS=emphasis>struct</I></A> knows its own "thingy type", and the code issmart enough (we hope) not to try to call a <A HREF="gloss_01.htm#G-HASH"><I CLASS=emphasis>hash</I></A> function on a<A HREF="gloss_01.htm#G-SUBROUTINE"><I CLASS=emphasis>subroutine</I></A>.<P><DT CLASS=glossentry><A NAME="G-SWITCH">switch</A><DD CLASS=glossdef><P CLASS=para>An option you give on a command line to influence the way your programworks.  In UNIX, these are usually introduced with a minus sign.The word is also used as a nickname for a <A HREF="gloss_01.htm#G-SWITCH-STATEMENT"><I CLASS=emphasis>switch statement</I></A>.<P><DT CLASS=glossentry><A NAME="G-SWITCH-CLUSTERING">switch clustering</A><DD CLASS=glossdef><P CLASS=para>The combining of multiple command line switches <B>-a -b -c</B> intoone switch <B>-abc</B>.  In Perl, any switch with an additional <A HREF="gloss_01.htm#G-ARGUMENT"><I CLASS=emphasis>argument</I></A>must be the last switch in a cluster.<P><DT CLASS=glossentry><A NAME="G-SWITCH-STATEMENT">switch statement</A><DD CLASS=glossdef><P CLASS=para>A program construct that lets you evaluate an <A HREF="gloss_01.htm#G-EXPRESSION"><I CLASS=emphasis>expression</I></A> and,based on the expression's value, do a multi-way branch to theappropriate piece of code for that value.  Also called a "casestructure", after the similar Pascal construct.<P><DT CLASS=glossentry><A NAME="G-SYMBOL-TABLE">symbol table</A><DD CLASS=glossdef><P CLASS=para>Where a <A HREF="gloss_01.htm#G-COMPILER"><I CLASS=emphasis>compiler</I></A> remembers symbols.  A programlike Perl must somehow remember all the names of all the<I CLASS=emphasis>variables</I>, <I CLASS=emphasis>filehandles</I>, and <I CLASS=emphasis>subroutines</I> you've used.It does this by placing the names in a symbol table, which isimplemented in Perl using a <A HREF="gloss_01.htm#G-HASH-TABLE"><I CLASS=emphasis>hash table</I></A>.  There is a separatesymbol table for each <A HREF="gloss_01.htm#G-PACKAGE"><I CLASS=emphasis>package</I></A>, to give each package its own<A HREF="gloss_01.htm#G-NAMESPACE"><I CLASS=emphasis>namespace</I></A>.<P><DT CLASS=glossentry><A NAME="G-SYMBOLIC-DEBUGGER">symbolic debugger</A><DD CLASS=glossdef><P CLASS=para>A program that lets you step through the <I CLASS=emphasis>execution</I> of yourprogram, stopping or printing things out here and there to see ifanything has gone wrong, and if so, what.  The "symbolic" part justmeans that you can talk to the debugger using the same symbols in whichyour program is written.<P><DT CLASS=glossentry><A NAME="G-SYMBOLIC-LINK">symbolic link</A><DD CLASS=glossdef><P CLASS=para>An alternate filename that points to the real <A HREF="gloss_01.htm#G-FILENAME"><I CLASS=emphasis>filename</I></A>.Whenever the <A HREF="gloss_01.htm#G-OPERATING-SYSTEM"><I CLASS=emphasis>operating system</I></A> is trying to parse a pathname containinga symbolic link, it merely substitutes the real name and continuesparsing.<P><DT CLASS=glossentry><A NAME="G-SYMBOLIC-REFERENCE">symbolic reference</A><DD CLASS=glossdef><P CLASS=para>A variable whose value is the name of another variable or subroutine.  By<I CLASS=emphasis>dereferencing</I> the first variable, you can get at the second one.<P><DT CLASS=glossentry><A NAME="G-SYNTAX">syntax</A><DD CLASS=glossdef><P CLASS=para>From Greek, "with-arrangement".  How things (particularly symbols)are put together with each other.<P><DT CLASS=glossentry><A NAME="G-SYNTAX-TREE">syntax tree</A><DD CLASS=glossdef><P CLASS=para>An internal representation of your program wherein lower-level<I CLASS=emphasis>constructs</I> dangle off the higher-level constructs enclosing them.<P><DT CLASS=glossentry><A NAME="G-SYSTEM-CALL">system call</A><DD CLASS=glossdef><P CLASS=para>A <A HREF="gloss_01.htm#G-SUBROUTINE"><I CLASS=emphasis>subroutine</I></A> call directly to the <A HREF="gloss_01.htm#G-OPERATING-SYSTEM"><I CLASS=emphasis>operating system</I></A>.  Many ofthe important subroutines and functions you use aren't direct systemcalls, but are built up in one or more layers above the system call level.In general, Perl users don't need to worry about the distinction.<P><DT CLASS=glossentry><A NAME="G-TAINTED">tainted</A><DD CLASS=glossdef><P CLASS=para>Said of data that might be derived from the grubby hands of a user, andthus unsafe for a secure program to rely on.  Perl does taint checks ifyou run a <A HREF="gloss_01.htm#G-SETUID"><I CLASS=emphasis>setuid</I></A> program or use the <B>-T</B> switch.<P><DT CLASS=glossentry><A NAME="G-TCP">TCP</A><DD CLASS=glossdef><P CLASS=para>Short for Transmission Control Protocol.  A protocol wrapped around theInternet Protocol to make an unreliable packet transmission mechanismappear to the application program to be a reliable stream of bytes.(Well, usually.)<P><DT CLASS=glossentry><A NAME="G-TEXT">text</A><DD CLASS=glossdef><P CLASS=para>Normally, a <A HREF="gloss_01.htm#G-STRING"><I CLASS=emphasis>string</I></A> or <A HREF="gloss_01.htm#G-FILE"><I CLASS=emphasis>file</I></A> containing primarily printablecharacters.  The word has been usurped in some UNIX circles to mean theportion of your <A HREF="gloss_01.htm#G-PROCESS"><I CLASS=emphasis>process</I></A> that contains machine code to be executed.<P><DT CLASS=glossentry><A NAME="G-THINGY">thingy</A><DD CLASS=glossdef><P CLASS=para>Something sort of like an object, that you may or may not know the nameof, but that you can refer to with circumlocutions like "that hangy-downthingy that dangles in the back of your throat".  Similarly in Perl, a valuethat is sort of like an object, that you may or may not know the name of, butthat you can refer to via references from which the thingy dangles,metaphorically speaking.  Specifically, the sort of value that your referencepoints to when you create a reference to a variable.See <A HREF="gloss_01.htm#G-ANONYMOUS"><I CLASS=emphasis>anonymous</I></A>, <A HREF="gloss_01.htm#G-HARD-REFERENCE"><I CLASS=emphasis>hard reference</I></A>, and<A HREF="gloss_01.htm#G-OBJECT"><I CLASS=emphasis>object</I></A>, not necessarily in that order.<P><DT CLASS=glossentry><A NAME="G-THREAD">thread</A><DD CLASS=glossdef><P CLASS=para>An instance of running a program, but lighter weight than a process, inthat a process could have multiple threads running around in it, allsharing the same process's resources.  (If you're a dragonrider, see<A HREF="gloss_01.htm#G-PERN"><I CLASS=emphasis>Pern</I></A>.)<P><DT CLASS=glossentry><A NAME="G-TIE">tie</A><DD CLASS=glossdef><P CLASS=para>The bond between a magical variable and itsimplementation class.  See the <A HREF="ch03_02.htm#PERL2-CMD-TIE">tie</A> function in Chapters 3 and 5.<P><DT CLASS=glossentry><A NAME="G-TOKENIZING">tokenizing</A><DD CLASS=glossdef><P CLASS=para>Splitting up a program text into its separate words and symbols, eachof which is called a token.  Also known as "lexing", in which case youget "lexemes" instead of tokens.<P><DT CLASS=glossentry><A NAME="G-TOOLBOX-APPROACH">toolbox approach</A><DD CLASS=glossdef><P CLASS=para>The notion that, with a complete set of simple tools that work welltogether, you can build almost anything you want.  Which is fine ifyou're assembling a tricycle, but if you're building a defranishizingcomboflux, you really want your own machine shop to build special toolsin.  Perl is sort of a machine shop.<P><DT CLASS=glossentry><A NAME="G-TRUE">true</A><DD CLASS=glossdef><P CLASS=para>See <A HREF="gloss_01.htm#G-FALSE"><I CLASS=emphasis>false</I></A>.  (And hold it up to a mirror for the secret message.)<P><DT CLASS=glossentry><A NAME="G-TUPLE">tuple</A><DD CLASS=glossdef><P CLASS=para>In the lingo of relational databases, a <A HREF="gloss_01.htm#G-RECORD"><I CLASS=emphasis>record</I></A> or <A HREF="gloss_01.htm#G-LINE"><I CLASS=emphasis>line</I></A>containing fields.  See <A HREF="gloss_01.htm#G-RELATION"><I CLASS=emphasis>relation</I></A>.<P><DT CLASS=glossentry><A NAME="G-TYPE">type</A><DD CLASS=glossdef><P CLASS=para>See <A HREF="gloss_01.htm#G-DATA-TYPE"><I CLASS=emphasis>data type</I></A>.<P><DT CLASS=glossentry><A NAME="G-TYPE-CASTING">type casting</A><DD CLASS=glossdef><P CLASS=para>Converting data explicitly from one type to another.  C permits this.  Perl does notneed it.<P><DT CLASS=glossentry><A NAME="G-TYPEGLOB">typeglob</A><DD CLASS=glossdef><P CLASS=para>Used of a single identifier, prefaced with * (for example, <tt CLASS=literal>*name</tt>),to stand for any or all of <tt CLASS=literal>$name</tt>, <tt CLASS=literal>@name</tt>, <tt CLASS=literal>%name</tt>,<tt CLASS=literal>&amp;name</tt>, or just <tt CLASS=literal>name</tt>.  How you use it determines whether it is interpreted as all of those, or onlyone of them.  See "Typeglobs and Filehandles" in <A HREF="ch02_01.htm">Chapter 2, <i>The Gory Details</i></A>.<P><DT CLASS=glossentry><A NAME="G-UID">UID</A><DD CLASS=glossdef><P CLASS=para>A User ID.  Often used in the context of file ownership.<P><DT CLASS=glossentry><A NAME="G-UNARY-OPERATOR">unary operator</A><DD CLASS=glossdef><P CLASS=para>An operator with only one <A HREF="gloss_01.htm#G-OPERAND"><I CLASS=emphasis>operand</I></A>, like <tt CLASS=literal>!</tt> or <A HREF="ch03_02.htm#PERL2-CMD-CHDIR">chdir</A>.Unary operators are usually prefix operators, that is, they precedetheir operand.  The <tt CLASS=literal>++</tt> and <tt CLASS=literal>- -</tt> operators can be eitherprefix or postfix.  (Of course, that <I CLASS=emphasis>does</I> change their meaning.)<P><DT CLASS=glossentry><A NAME="G-UNDEFINED">undefined</A><DD CLASS=glossdef><P CLASS=para>Nobody has ever given this a reasonable definition.  See also<A HREF="gloss_01.htm#G-DEFINED"><I CLASS=emphasis>defined</I></A>.<P><DT CLASS=glossentry><A NAME="G-UNIX">UNIX</A><DD CLASS=glossdef><P CLASS=para>A very large and constantly evolving language with several alternate andlargely incompatible syntaxes, in which anyone can defineanything any way they choose, and usually do.  Speakers of this languagethink it's easy to learn because it's so easily twisted to one's ownends, but dialectical differences make tribal intercommunication nearlyimpossible, and travelers are often reduced to a pidgin-like subset ofthe language.  To be universally understood, a UNIX shell programmermust spend years of study in the art.  Many have abandoned thisdiscipline and now communicate via an Esperanto-like language calledPerl. In ancient times UNIX was also used to refer to some code that a coupleof people at Bell Labs wrote to make use of a PDP-7 computer that wasn'tdoing much of anything else at the time.<P><DT CLASS=glossentry><A NAME="G-UNQUALIFIED">unqualified</A><DD CLASS=glossdef><P CLASS=para>See <A HREF="gloss_01.htm#G-QUALIFIED"><I CLASS=emphasis>qualified</I></A>.<P><DT CLASS=glossentry><A NAME="G-VALUE">value</A><DD CLASS=glossdef><P CLASS=para>This is hard to define.  It's something like real data--the actual numbersand strings that wander around in your program.  But we don't reallyneed to define it.  If you didn't know a value when you see it,you wouldn't have this book.  <tt CLASS=literal>:-)</tt><P><DT CLASS=glossentry><A NAME="G-VARIABLE">variable</A><DD CLASS=glossdef><P CLASS=para>A named storage location that can hold any of various values, as yourprogram sees fit.<P><DT CLASS=glossentry><A NAME="G-VARIABLE-INTERPOLATION">variable interpolation</A><DD CLASS=glossdef><P CLASS=para>See <A HREF="gloss_01.htm#G-INTERPOLATION"><I CLASS=emphasis>interpolation</I></A>.<P><DT CLASS=glossentry><A NAME="G-VECTOR">vector</A><DD CLASS=glossdef><P CLASS=para>Mathematical jargon for a list of <I CLASS=emphasis>scalar values</I>.<P><DT CLASS=glossentry><A NAME="G-WARNING">warning</A><DD CLASS=glossdef><P CLASS=para>A message printed to the <tt CLASS=literal>STDERR</tt> stream to the effect that somethingmight be wrong but it isn't worth blowing up over.  See the <A HREF="ch03_02.htm#PERL2-CMD-WARN">warn</A>operator in <A HREF="ch03_01.htm">Chapter 3, <i>Functions</i></A>.<P><DT CLASS=glossentry><A NAME="G-WHITESPACE">whitespace</A><DD CLASS=glossdef><P CLASS=para>A <A HREF="gloss_01.htm#G-CHARACTER"><I CLASS=emphasis>character</I></A> that moves your cursor around but doesn't otherwiseput anything on your screen.  Typically refers to any of the following: space, tab,line feed, carriage return, form feed, or vertical tab.<P><DT CLASS=glossentry><A NAME="G-WORD">word</A><DD CLASS=glossdef><P CLASS=para>In normal "computerese", the piece of data of the size most efficientlydealt with by your computer, typically 32 bits or so, give or take a fewpowers of two.  In UNIX culture, it more often refers to analphanumeric identifier, or to a string of non-whitespace characters bounded bywhitespace or line boundaries.<P><DT CLASS=glossentry><A NAME="G-WORKING-DIRECTORY">working directory</A><DD CLASS=glossdef><P CLASS=para>Your current <A HREF="gloss_01.htm#G-DIRECTORY"><I CLASS=emphasis>directory</I></A>, from which relative pathnames areinterpreted by the <A HREF="gloss_01.htm#G-OPERATING-SYSTEM"><I CLASS=emphasis>operating system</I></A>.  The operating system knowsyour current directory because you told it with a <A HREF="ch03_02.htm#PERL2-CMD-CHDIR">chdir</A>, orbecause you started out in the same place where your parent <A HREF="gloss_01.htm#G-PROCESS"><I CLASS=emphasis>process</I></A> waswhen you were born.<P><DT CLASS=glossentry><A NAME="G-WRAPPER">wrapper</A><DD CLASS=glossdef><P CLASS=para>A program that runs some other program for you, modifying some of its inputor output to better suit your purposes.  More generally, just about anythingthat wraps things up.  And that just about wraps things up, except forthe excess.<P><DT CLASS=glossentry><A NAME="G-XS">XS</A><DD CLASS=glossdef><P CLASS=para>An extraordinarily exported, expeditiously excellent, expressly eXternalSubroutine, executed in existing C or C++, or in an exciting new extensionlanguage called (exasperatingly) XS.  Examine <A HREF="ch06_01.htm">Chapter 6, <i>Social Engineering</i></A>, for theexact explanation.  <I CLASS=emphasis>Exeunt</I>.</DL></DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch09_01.htm"><IMG SRC="gifs/txtpreva.gif"     ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top>&nbsp;</td></tr><tr><td width=172 align=left valign=top>Diagnostic Messages</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>&nbsp;</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></body></html>