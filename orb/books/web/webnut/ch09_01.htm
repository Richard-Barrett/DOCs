<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 9] CGI Overview</TITLE><META NAME="author" CONTENT="Stephen Spainhour and Valerie Quercia"><META NAME="date" CONTENT="Mon Mar 17 14:27:03 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="Webmaster in a Nutshell"><META NAME="title" CONTENT="Webmaster in a Nutshell"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF" TEXT="#000000"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif" ALT="Webmaster in a Nutshell"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch08_03.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 9</b></td><td width=172 align=right valign=top><A HREF="ch09_02.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><H1 CLASS=chapter><A CLASS="TITLE" NAME="WEB-CH-9">CGI Overview</A></H1><DIV CLASS=htmltoc><p><b>Contents:</b><br>A Typical CGI Interaction<br><A HREF="ch09_02.htm">URL Encoding</A><BR><A HREF="ch09_03.htm">Extra Path Information</A><BR></DIV><P CLASS=para>The Common Gateway Interface (CGI) is an essential tool for creatingand managing comprehensive Web sites. With CGI, you can write scripts that create interactive,user-driven applications.  <P CLASS=para>CGI is the part of the Web server that can communicate withother programs that are running on the server. With CGI, the Web servercan invoke an external program, while passing user-specific data to theprogram (such as what host the user is connecting from, or inputthe user has supplied through an HTML form). The programthen processes that data and the server passes the program'sresponse back to the Web browser (see<DIV CLASS=figure><h4 CLASS=figure><p><img align=middle src="./figs/wm_0901.gif" alt="[Graphic: Figure 9-1]" width=452 height=203></DIV><P CLASS=para>Rather than limiting the Web to documents written ahead of time, CGI enables Web pages to be created on the fly, based upon the inputof users. You can use CGI scripts to create a widerange of applications, from surveys to search tools, from Internetservice gateways to quizzes and games. You can count the number of users who access a document orlet them sign an electronic guestbook. You can provide userswith all types of information, collect their comments, and respondto them. <P CLASS=para>Teaching CGI programming from scratch is beyond the scopeof this book--for that, we recommend <I CLASS=emphasis>CGI Programming on the World WideWeb</I>,by Shishir Gundavaram (O'Reilly &amp; Associates).<P CLASS=para><A HREF="ch09_01.htm">Chapter 9, <i>CGI Overview</i></A> through <A HREF="ch16_01.htm">Chapter 16, <i>Other CGI Resources</i></A> summarize the essential components of CGI:<P><UL CLASS=itemizedlist><li CLASS=listitem>The current chapter (<A HREF="ch09_01.htm">Chapter 9, <i>CGI Overview</i></A>) gives a quickintroduction to the mechanism of CGI.<P><li CLASS=listitem><A HREF="ch10_01.htm">Chapter 10, <i>HTML Form Tags</i></A>, lists the form tags used as the interfacefor many CGI applications, and shows an example of using them.<P><li CLASS=listitem><A HREF="ch11_01.htm">Chapter 11, <i>CGI Environment Variables</i></A>, lists the environment variables thatare commonly defined by servers for CGI programs.<P><li CLASS=listitem><A HREF="ch12_01.htm">Chapter 12, <i>Cookies</i></A>,  describes how to use Netscape persistent cookiesto maintain state across multiple connections.<P><li CLASS=listitem><A HREF="ch13_01.htm">Chapter 13, <i>Server Side Includes</i></A>,  covers Server Side Includes, which are used with many CGI applications.<P><li CLASS=listitem><A HREF="ch14_01.htm">Chapter 14, <i>Windows CGI</i></A>, covers WinCGI, the CGI interface forWindows-based servers.<P><li CLASS=listitem><A HREF="ch15_01.htm">Chapter 15, <i>Perl Quick Reference</i></A>, is a quick reference to the Perl programminglanguage, the most common language used for writing CGI programs.<P><li CLASS=listitem><A HREF="ch16_01.htm">Chapter 16, <i>Other CGI Resources</i></A>, lists URLs with other resources for CGI,such as libraries and modules that can facilitate CGI programming.<P></UL><P CLASS=para>In addition, much of the backbone of CGI resides in the HTTP protocolitself. Effective CGI programming requires some knowledge of HTTPheaders and status codes, which are presented in this book as follows:  <P><UL CLASS=itemizedlist><li CLASS=listitem><A HREF="ch17_01.htm">Chapter 17, <i>HTTP Overview</i></A>, gives a brief introduction to HTTP.<P><li CLASS=listitem><A HREF="ch18_01.htm">Chapter 18, <i>Server Response Codes</i></A>, lists HTTP status codes that can be used by CGI programs that provide their own complete headers.<P><li CLASS=listitem><A HREF="ch19_01.htm">Chapter 19, <i>HTTP Headers</i></A>, lists HTTP headers that CGI programs canuse in their responses.<P><li CLASS=listitem><A HREF="ch20_01.htm">Chapter 20, <i>Media Types and Subtypes</i></A>, lists the media types commonly used in the <tt CLASS=literal>Content-type</tt> headers output by CGI programs.<P></UL><DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="WEB-CH-9-SECT-1">9.1 A Typical CGI Interaction</A></h2><P CLASS=para>For an example of a CGI application, suppose you see a fill-in form, such as that in <DIV CLASS=figure><h4 CLASS=figure><p><img align=middle src="./figs/wm_0902.gif" alt="[Graphic: Figure 9-2]" width=289 height=249></DIV><P CLASS=para>The HTML that produces this form might read as follows:<P CLASS=para><DIV CLASS=screen><P><PRE>&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;Guestbook&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;H1&gt;Fill in my guestbook!&lt;/H1&gt;&lt;FORM METHOD="GET" ACTION="/cgi-bin/guestbook.pl"&gt;&lt;PRE&gt;First Name:   &lt;INPUT TYPE="TEXT" NAME="firstname"&gt;Last Name:    &lt;INPUT TYPE="TEXT" NAME="lastname"&gt;&lt;INPUT TYPE="SUBMIT"&gt;    &lt;INPUT TYPE="RESET"&gt;&lt;/FORM&gt;</PRE></DIV><P CLASS=para>The form is written using special "form" tags (discussed indetail in <A HREF="ch10_01.htm">Chapter 10, <i>HTML Form Tags</i></A>).<P><UL CLASS=itemizedlist><li CLASS=listitem>The <tt CLASS=literal>&lt;form&gt;</tt> tag defines the <I CLASS=emphasis>method</I> used for the form(either GET or POST) and the <I CLASS=emphasis>action</I> to take when theform is submitted--that is, the URL of the CGI program to pass the parameters to.<P><li CLASS=listitem>The <tt CLASS=literal>&lt;input&gt;</tt> tag can be used in many different ways. In itsfirst two invocations, it creates a text input field and definesthe variable name to associate with the field's contents when theform is submitted. The first field is given the variable name"firstname" and the second field is given the name "lastname."<P><li CLASS=listitem>In its last two invokations, the <tt CLASS=literal>&lt;input&gt;</tt> tag creates a "submit" button and a "reset" button. <P><li CLASS=listitem>The <tt CLASS=literal>&lt;/form&gt;</tt> tag indicates the end of the form.<P></UL><P CLASS=para>When the user presses the "submit" button, the data enteredinto the <tt CLASS=literal>&lt;input&gt;</tt> text fields is passed to the CGI program specifiedby the <tt CLASS=literal>action</tt> attribute of the <tt CLASS=literal>&lt;form&gt;</tt> tag. <DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-9-SECT-1.1">Transferring the Form Data</A></h3><P CLASS=para>Parameters to a CGI program are transferred either in the URLor in the body text of the request. The method used to passparameters is determined by the <tt CLASS=literal>method</tt> attribute to the <tt CLASS=literal>&lt;form&gt;</tt>tag. The GET method says to transfer the data within the URL itself;  forexample, under the GET method, the browser might initiate the HTTP transaction as follows:<P CLASS=para><DIV CLASS=screen><P><PRE>GET HTTP/1.0 /cgi-bin/guestbook.pl?firstname=Joe&amp;lastname=Schmoe</PRE></DIV><P CLASS=para>See <A HREF="ch17_01.htm">Chapter 17, <i>HTTP Overview</i></A> for more information on HTTP transactions.<P CLASS=para>The POST method says to use the body portion of the HTTP requestto pass parameters. The same transaction with the POST methodwould read as follows:<P CLASS=para><DIV CLASS=screen><P><PRE>POST HTTP/1.0 /cgi-bin/guestbook.pl	... [More headers here]firstname=Joe&amp;lastname=Schmoe</PRE></DIV><P CLASS=para>In both these examples, you should recognize the "firstname" and"lastname" variable names that were defined in the HTML form,coupled with the values entered by the user. An ampersand (&amp;) isused to separate the variable=value pairs. <P CLASS=para>The server now passes the variable=value pairs to the CGI program.It does this either through UNIX environment variables or instandard input (STDIN). If the CGI program is called with the GET method, then parameters are expected to be embedded into the URL of the request, andthe server transfers them to the program by assigning them to the QUERY_STRING environment variable. The CGI program can then retrieve the parameters from QUERY_STRING as it would read anyenvironment variable (for example, from the %ENV associative array in Perl).If the CGI program is calledwith the POST method, parameters are expected to be embeddedinto the body of the request, and the server passes the body textto the program as standard input (STDIN). <P CLASS=para>(Other environment variables defined by the server for CGIprograms are listed in<A HREF="ch11_01.htm">Chapter 11, <i>CGI Environment Variables</i></A>.These variables store such information as the format and length of the input, the remote host, the user, and various clientinformation. They also store the server name, the communicationprotocol, and the name of the software running the server.)<P CLASS=para>The CGI program needs to retrieve the information as appropriateand then process it. The sky's the limit on what the CGI program actually does with the information it retrieves.It might returnan anagram of the user's name, or tell them how many times theirname uses the letter "t," or it might just compile the name intoa list that the programmer regularly sells to telemarketers. Only the programmer knows for sure.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-9-SECT-1.2">Creating Virtual Documents</A></h3><P CLASS=para>The CGI program must then create a new document to be servedto the browser, or point to an existing document. On UNIX,programs send their output to standard output (STDOUT) asa data stream that consists of two parts. The firstpart is either a full orpartial HTTP header that (at minimum) describes the formatof the returned data (e.g., HTML, ASCII text, GIF , etc.). A blank line signifies the end of the header section.The second part is the body of the output, which containsthe data conforming to the format type reflected in the header.For example:<P CLASS=para><DIV CLASS=screen><P><PRE>Content-type: text/html&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;Thanks!&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;H1&gt;Thanks for signing my guest book!&lt;/H1&gt;	...&lt;/BODY&gt;&lt;/HTML&gt;</PRE></DIV><P CLASS=para>In this case, the only header line that is output is the <tt CLASS=literal>Content-type</tt>, which gives the media format of the output as HTML (<tt CLASS=literal>text/html</tt>).This line is essential for every CGI program, since it tells the browser what kind of format to expect.The blank line separates the header from the body text (which,in this case, is in HTML format as advertised). See<A HREF="ch20_01.htm">Chapter 20, <i>Media Types and Subtypes</i></A> for alisting of other media formats that are commonly recognized on the Web.<P CLASS=para>(Notice that it does not matter to the Web server what languagethe CGI program is written in. On the UNIX platform, the mostpopular language for CGI programming is Perl (covered in<A HREF="ch15_01.htm">Chapter 15, <i>Perl Quick Reference</i></A>). Other languages used on UNIX are C, C++, Tcl, andPython. On Macintosh computers, programmers use Applescript andC/C++, and on Microsoft Windows programmers use Visual Basic, Perl,and C/C++. As long as there's a way in a programming language to get data from the server and send data back, you can use it for CGI.<P CLASS=para>The server transfers the results of the CGI program back to thebrowser. The body text is not modified or interpreted by the server in any way, butthe server generally supplies additional headers with information such as the date, the name and version ofthe server, etc. (See <A HREF="ch19_01.htm">Chapter 19, <i>HTTP Headers</i></A> for a listingof valid HTTP response headers.)  <P CLASS=para>CGI programs can also supply a complete HTTP header itself, in which case the server does not add any additional headers buttransfers the response verbatim as returned by the CGI program.<P CLASS=para>Here is the sample output of a program generating an HTMLvirtual document, with a complete HTTP header:<P CLASS=para><DIV CLASS=screen><P><PRE>HTTP/1.0 200 OKDate:  Thursday, 28-June-96 11:12:21 GMTServer: NCSA/1.4.2Content-type: text/htmlContent-length: 2041&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;Thanks!&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;H1&gt;Thanks for signing my guestbook!&lt;/H1&gt; 	...&lt;/BODY&gt;&lt;/HTML&gt;</PRE></DIV><P CLASS=para>The header contains the communication protocol, the date and timeof the response, and the server name and version.(The <tt CLASS=literal>200 OK</tt> is a <I CLASS=emphasis>status code</I> generated by the HTTPprotocol to communicate the status of a request, in this casesuccessful. See <A HREF="ch18_01.htm">Chapter 18, <i>Server Response Codes</i></A> for a list of valid HTTP status codes.)Most importantly, it also contains the  content type andthe number of characters (equivalent to the number of bytes)of the enclosed data.<P CLASS=para>The result is that after the user clicks the "Submit" button, he or she sees a response such as that in<DIV CLASS=figure><h4 CLASS=figure><p><img align=middle src="./figs/wm_0903.gif" alt="[Graphic: Figure 9-3]" width=434 height=207></DIV></DIV></DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch08_03.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="ch09_02.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>Tags of Contention</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>URL Encoding</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>