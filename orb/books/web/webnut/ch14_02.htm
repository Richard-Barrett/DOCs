<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 14] 14.2 The CGI Data File</TITLE><META NAME="author" CONTENT="Stephen Spainhour and Valerie Quercia"><META NAME="date" CONTENT="Mon Mar 17 14:30:07 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="Webmaster in a Nutshell"><META NAME="title" CONTENT="Webmaster in a Nutshell"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif" ALT="Webmaster in a Nutshell"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch14_01.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 14</b></td><td width=172 align=right valign=top><A HREF="ch14_03.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="WEB-CH-14-SECT-2">14.2 The CGI Data File</A></h2><P CLASS=para> The CGI.BAS and CGI32.BAS modules take care of much of the dirtywork in CGI processing for Visual Basic programmers. If you are using another programming language or a server other thanWebSite, however, you may need to access the external CGI datafile manually.<P CLASS=para>Under WinCGI, the server saves CGI data in an external fileto be processed by the CGI program.The CGI data file contains the following sections:<P CLASS=para><DIV CLASS=screen><P><PRE>[CGI][Accept][System][Extra Headers][Form Literal][Form External][Form File][Form Huge]</PRE></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-14-SECT-2.1">The CGI Section</A></h3><P CLASS=para>The first section of the CGI data file contains most of the CGI dataitems (accept types, content, and extra headers are defined inseparate sections). Each item is provided as a string value. If thevalue is an empty string, the keyword is omitted. The keywords are listed below:<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>Authenticated Password</tt><DD><P CLASS=para>The password that the client used to attempt authentication<p><DT CLASS=varlistentry><tt CLASS=literal>Authenticated Username</tt><DD><P CLASS=para>The username (in the indicated realm) that the client used to attempt authentication<p><DT CLASS=varlistentry><tt CLASS=literal>Authentication Method</tt><DD><P CLASS=para>The protocol-specific authentication method specified in therequest<p><DT CLASS=varlistentry><tt CLASS=literal>Authentication Realm</tt><DD><P CLASS=para>The method-specific authentication realm<p><DT CLASS=varlistentry><tt CLASS=literal>CGI Version</tt><DD><P CLASS=para>The revision of the CGI specification to which the server complies<p><DT CLASS=varlistentry><tt CLASS=literal>Content File</tt><DD><P CLASS=para>For requests that have attached data (i.e., in a POST request), the server makes thedata available to the CGI program by putting it into this file. The valueof this item is the complete pathname of that file.<p><DT CLASS=varlistentry><tt CLASS=literal>Content Length</tt><DD><P CLASS=para>For requests that have attached data, the length of the content in bytes<p><DT CLASS=varlistentry><tt CLASS=literal>Content Type</tt><DD><P CLASS=para>For requests that have attached data, the MIME content type of that data<p><DT CLASS=varlistentry><tt CLASS=literal>Document Root</tt><DD><P CLASS=para>The physical path to the logical root "/" <p><DT CLASS=varlistentry><tt CLASS=literal>Executable Path</tt><DD><P CLASS=para>The logical path to the CGI program executable, as needed forself-referencing URLs<p><DT CLASS=varlistentry><tt CLASS=literal>From</tt><DD><P CLASS=para>The email address of the browser user <p><DT CLASS=varlistentry><tt CLASS=literal>Logical Path</tt><DD><P CLASS=para>The extra path information supplied in the request<p><DT CLASS=varlistentry><tt CLASS=literal>Physical Path</tt><DD><P CLASS=para>If the request contained logical path information, the path in physical (translated) form<p><DT CLASS=varlistentry><tt CLASS=literal>Query String</tt><DD><P CLASS=para>The information that follows the ? in the URL that generated therequest is the "query" information<p><DT CLASS=varlistentry><tt CLASS=literal>Referer</tt><DD><P CLASS=para>The URL of the document that contained the link pointing to this CGIprogram<p><DT CLASS=varlistentry><tt CLASS=literal>Remote Host</tt><DD><P CLASS=para>The network host name of the client system, ifavailable<p><DT CLASS=varlistentry><tt CLASS=literal>Remote Address</tt><DD><P CLASS=para>The network (IP) address of the client system <p><DT CLASS=varlistentry><tt CLASS=literal>Request Method</tt><DD><P CLASS=para>The method with which the request was made. For HTTP, this is "GET,""HEAD," "POST," etc.<p><DT CLASS=varlistentry><tt CLASS=literal>Request Protocol</tt><DD><P CLASS=para>The name and revision of the information protocol this request camein with. Format: protocol/revision; Example: "HTTP/1.0"<p><DT CLASS=varlistentry><tt CLASS=literal>Request Range</tt><DD><P CLASS=para>Byte-range specification received with request (if any) <p><DT CLASS=varlistentry><tt CLASS=literal>Server Admin</tt><DD><P CLASS=para>The email address of the server's administrator <p><DT CLASS=varlistentry><tt CLASS=literal>Server Name</tt><DD><P CLASS=para>The network host name or alias of the server, as needed for self-referencing URLs<p><DT CLASS=varlistentry><tt CLASS=literal>Server Port</tt><DD><P CLASS=para>The network port number on which the server is listening, asneeded for self-referencing URLs<p><DT CLASS=varlistentry><tt CLASS=literal>Server Software</tt><DD><P CLASS=para>The name and version of the information server software answeringthe request (and running the CGI program). Format: name/version<p><DT CLASS=varlistentry><tt CLASS=literal>User Agent</tt><DD><P CLASS=para>A string description of the client (browser) software</DL></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-14-SECT-2.2">The Accept Section</A></h3><P CLASS=para>The Accept section contains the client'sacceptable data types found in the request header as: <P CLASS=para><DIV CLASS=screen><P><PRE>Accept: <I CLASS=emphasis>type</I>/<I CLASS=emphasis>subtype</I> [<I CLASS=emphasis>parameters</I>]</PRE></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-14-SECT-2.3">The System Section</A></h3><P CLASS=para>This section contains items that are specific to the Windowsimplementation of CGI. The following keys are used: <P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>Content File</tt><DD><P CLASS=para>The full pathname of the file that contains the content (if any) thatcame with the request. <p><DT CLASS=varlistentry><tt CLASS=literal>Debug Mode</tt><DD><P CLASS=para>This is <tt CLASS=literal>No</tt> unless the server's script tracingmode is enabled, in which case it is <tt CLASS=literal>Yes</tt>. Useful for providingconditional tracing within the CGI program.<p><DT CLASS=varlistentry><tt CLASS=literal>GMT Offset</tt><DD><P CLASS=para>The number of seconds to be added to GMT to reachlocal time. For Pacific Standard time, this number is -28,800. Usefulfor computing GMT.<p><DT CLASS=varlistentry><tt CLASS=literal>Output File</tt><DD><P CLASS=para>The full pathname of the file in which the server expects to receive the CGI program's results.</DL></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-14-SECT-2.4">The Extra Headers Section</A></h3><P CLASS=para>This section contains the "extra" headersthat were included with the request, in <I CLASS=emphasis>key=value</I> form. The servermust URL-decode both the key and the value prior to writing them tothe CGI data file.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-14-SECT-2.5">The Form Literal Section</A></h3><P CLASS=para>If the request is a POST request from an HTTP form (with content type of<tt CLASS=literal>application/x-www-form-urlencoded</tt> or <tt CLASS=literal>multipart/form-data</tt>), the server decodes the formdata and puts it into the <tt CLASS=literal>Form Literal</tt> section.<P CLASS=para>If the form contains any SELECT MULTIPLE elements, therewill be multiple occurrences of the same key. In this case, the servergenerates a normal <I CLASS=emphasis>key=value</I> pair for the first occurrence, and itappends a sequence number to subsequent occurrences. </DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-14-SECT-2.6">The Form External Section</A></h3><P CLASS=para>If the decoded value string is more than 254 characters long, or if thedecoded value string contains any control characters or double-quotes,the server puts the decoded value into an external file and liststhe field into the Form External section as:<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>key</I>=<I CLASS=emphasis>pathname</I> <I CLASS=emphasis>length</I></PRE></DIV><P CLASS=para>where <I CLASS=emphasis>pathname</I> is the path and name of the tempfile containingthe decoded value string, and <I CLASS=emphasis>length</I> is the length in bytesof the decoded value string.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-14-SECT-2.7">The Form Huge Section</A></h3><P CLASS=para>If the raw value string is more than 65,535 bytes long, the serverdoes no decoding, but it does get the keyword and mark the locationand size of the value in the content file. The server lists the huge field in the Form Hugesection as:<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>key</I>=<I CLASS=emphasis>offset</I> <I CLASS=emphasis>length</I></PRE></DIV><P CLASS=para>where <I CLASS=emphasis>offset</I> is the offset from the beginning of the content fileat which the raw value string for this key is located, and <I CLASS=emphasis>length</I>is the length in bytes of the string. You can use theoffset to perform a "Seek" to the start of the raw value string,and use the length to know when you have read the entire raw stringinto your decoder.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-14-SECT-2.8">The Form File Section</A></h3><P CLASS=para>If the request is in the <tt CLASS=literal>multipart/form-data</tt> format, itmay contain one or more file uploads. In this case, each file uploadis placed into an external temporary file similar to the form external data. Each such file upload is listed in the Form File section as:<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>key=</I>[<I CLASS=emphasis>pathname</I>] <I CLASS=emphasis>length type xfer</I> [<I CLASS=emphasis>filename</I>]</PRE></DIV><P CLASS=para>where <I CLASS=emphasis>pathname</I> is the pathname of the external tempfile containing the uploaded file, <I CLASS=emphasis>length</I> is the length in bytes of the uploaded file, <I CLASS=emphasis>type</I> is the MIME content typeof the uploaded file, <I CLASS=emphasis>xfer</I> isthe content-transfer encoding of the uploaded file, and <I CLASS=emphasis>filename</I> is the original name of the uploaded file. Thesquare brackets must be included; they are used to delimit the file andpathnames, which may contain spaces.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-14-SECT-2.9">Example of Form Decoding</A></h3><P CLASS=para>In the following sample, the form contains a small field, a SELECTMULTIPLE with 2 small selections, a field with 300characters in it, one with line breaks (a text area), and a 230KB field:<P CLASS=para><DIV CLASS=screen><P><PRE>[Form Literal]    smallfield=123 Main St. #122    multiple=first selection    multiple_1=second selection[Form External]    field300chars=C:\\TEMP\\HS19AF6C.000 300    fieldwithlinebreaks=C:\\TEMP\\HS19AF6C.001 43[Form Huge]    field230K=C:\\TEMP\\HS19AF6C.002 276920</PRE></DIV><P CLASS=para></DIV></DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch14_01.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="ch14_03.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>The Windows CGI Framework for Visual Basic</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>Results Processing</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>