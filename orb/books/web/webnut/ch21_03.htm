<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 21] 21.3 The JavaScript Reference Pages</TITLE><META NAME="author" CONTENT="Stephen Spainhour and Valerie Quercia"><META NAME="date" CONTENT="Mon Mar 17 14:38:48 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="Webmaster in a Nutshell"><META NAME="title" CONTENT="Webmaster in a Nutshell"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif" ALT="Webmaster in a Nutshell"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch21_02.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 21</b></td><td width=172 align=right valign=top><A HREF="ch22_01.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3">21.3 The JavaScript Reference Pages</A></h2><P CLASS=para>The following entries summarize the various JavaScript objects and independent functions. The properties, constants, arrays, methods, functions, and event handlers for each object are described in the entry for that object.Thus, if you want to read about the <tt CLASS=literal>write()</tt> method ofthe Document object (Document.write), look it up in the entryfor Document.<P CLASS=para>If you can't remember what object a method or property, etc., goeswith, the following table should help. The left column liststhe names of all the functions, properties, etc.,and the right column gives the name of the object(s) with which they areassociated. Since this table serves as something of a table ofcontents for this section, object names themselves also appearin the left hand column.<P CLASS=para>We've tried to cram as much useful information as possible intothis chapter. But JavaScript has many intricacies to whichwe cannot do justice in so short a format. For more completereference information, as well as an excellent guide to usingthe language, see <I CLASS=emphasis>JavaScript: The Definitive Guide</I>.<DIV CLASS=informaltable><P><A NAME="WEB-CH-21-TAB-1"></A><TABLE CLASS=INFORMALTABLE><TR CLASS=row><TH ALIGN="left">For</TH><TH ALIGN="left">See Object</TH><TH ALIGN="left">For</TH><TH ALIGN="left">See Object</TH></TR><TR CLASS=row><TD ALIGN="left">abs( )</TD><TD ALIGN="left">Math</TD><TD ALIGN="left">cookie</TD><TD ALIGN="left">Document</TD></TR><TR CLASS=row><TD ALIGN="left">acos( )</TD><TD ALIGN="left">Math</TD><TD ALIGN="left">cos( )</TD><TD ALIGN="left">Math</TD></TR><TR CLASS=row><TD ALIGN="left">action</TD><TD ALIGN="left">Form</TD><TD ALIGN="left">current</TD><TD ALIGN="left">History</TD></TR><TR CLASS=row><TD ALIGN="left">alert( )</TD><TD ALIGN="left">Window</TD><TD ALIGN="left">Date</TD><TD ALIGN="left">Date</TD></TR><TR CLASS=row><TD ALIGN="left">alinkColor</TD><TD ALIGN="left">Document</TD><TD ALIGN="left">defaultChecked</TD><TD ALIGN="left">Checkbox</TD></TR><TR CLASS=row><TD ALIGN="left">Anchor</TD><TD ALIGN="left">Anchor</TD><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Radio</TD></TR><TR CLASS=row><TD ALIGN="left">anchor( )</TD><TD ALIGN="left">String</TD><TD ALIGN="left">defaultSelected</TD><TD ALIGN="left">Option</TD></TR><TR CLASS=row><TD ALIGN="left">anchors[ ]</TD><TD ALIGN="left">Document</TD><TD ALIGN="left">defaultStatus</TD><TD ALIGN="left">Window</TD></TR><TR CLASS=row><TD ALIGN="left">appCodeName</TD><TD ALIGN="left">Navigator</TD><TD ALIGN="left">defaultValue</TD><TD ALIGN="left">Text</TD></TR><TR CLASS=row><TD ALIGN="left">applets[ ]</TD><TD ALIGN="left">Document</TD><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Textarea</TD></TR><TR CLASS=row><TD ALIGN="left">appName</TD><TD ALIGN="left">Navigator</TD><TD ALIGN="left">description</TD><TD ALIGN="left">MimeType</TD></TR><TR CLASS=row><TD ALIGN="left">appVersion</TD><TD ALIGN="left">Navigator</TD><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Plugin</TD></TR><TR CLASS=row><TD ALIGN="left">arguments[ ]</TD><TD ALIGN="left">Function</TD><TD ALIGN="left">Document</TD><TD ALIGN="left">Document</TD></TR><TR CLASS=row><TD ALIGN="left">Array</TD><TD ALIGN="left">Array</TD><TD ALIGN="left">document</TD><TD ALIGN="left">Window</TD></TR><TR CLASS=row><TD ALIGN="left">asin( )</TD><TD ALIGN="left">Math</TD><TD ALIGN="left">domain</TD><TD ALIGN="left">Document</TD></TR><TR CLASS=row><TD ALIGN="left">assign( )</TD><TD ALIGN="left">Object</TD><TD ALIGN="left">E</TD><TD ALIGN="left">Math</TD></TR><TR CLASS=row><TD ALIGN="left">atan( )</TD><TD ALIGN="left">Math</TD><TD ALIGN="left">Element</TD><TD ALIGN="left">Element</TD></TR><TR CLASS=row><TD ALIGN="left">atan2( )</TD><TD ALIGN="left">Math</TD><TD ALIGN="left">elements[ ]</TD><TD ALIGN="left">Form</TD></TR><TR CLASS=row><TD ALIGN="left">back( )</TD><TD ALIGN="left">History</TD><TD ALIGN="left">embeds[ ]</TD><TD ALIGN="left">Document</TD></TR><TR CLASS=row><TD ALIGN="left">bgColor</TD><TD ALIGN="left">Document</TD><TD ALIGN="left">enabledPlugin</TD><TD ALIGN="left">MimeType</TD></TR><TR CLASS=row><TD ALIGN="left">big( )</TD><TD ALIGN="left">String</TD><TD ALIGN="left">encoding</TD><TD ALIGN="left">Form</TD></TR><TR CLASS=row><TD ALIGN="left">blink( )</TD><TD ALIGN="left">String</TD><TD ALIGN="left">escape( )</TD><TD ALIGN="left">escape( )</TD></TR><TR CLASS=row><TD ALIGN="left">blur( )</TD><TD ALIGN="left">FileUpload</TD><TD ALIGN="left">eval( )</TD><TD ALIGN="left">eval( )</TD></TR><TR CLASS=row><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Password</TD><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Object</TD></TR><TR CLASS=row><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Text</TD><TD ALIGN="left">exp( )</TD><TD ALIGN="left">Math</TD></TR><TR CLASS=row><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Textarea</TD><TD ALIGN="left">fgColor</TD><TD ALIGN="left">Document</TD></TR><TR CLASS=row><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Window</TD><TD ALIGN="left">FileUpload</TD><TD ALIGN="left">FileUpload</TD></TR><TR CLASS=row><TD ALIGN="left">bold( )</TD><TD ALIGN="left">String</TD><TD ALIGN="left">filename</TD><TD ALIGN="left">Plugin</TD></TR><TR CLASS=row><TD ALIGN="left">Boolean</TD><TD ALIGN="left">Boolean</TD><TD ALIGN="left">fixed( )</TD><TD ALIGN="left">String</TD></TR><TR CLASS=row><TD ALIGN="left">border</TD><TD ALIGN="left">Image</TD><TD ALIGN="left">floor( )</TD><TD ALIGN="left">Math</TD></TR><TR CLASS=row><TD ALIGN="left">Button</TD><TD ALIGN="left">Button</TD><TD ALIGN="left">focus( )</TD><TD ALIGN="left">FileUpload</TD></TR><TR CLASS=row><TD ALIGN="left">caller</TD><TD ALIGN="left">Function</TD><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Password</TD></TR><TR CLASS=row><TD ALIGN="left">ceil( )</TD><TD ALIGN="left">Math</TD><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Text</TD></TR><TR CLASS=row><TD ALIGN="left">charAt( )</TD><TD ALIGN="left">String</TD><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Textarea</TD></TR><TR CLASS=row><TD ALIGN="left">Checkbox</TD><TD ALIGN="left">Checkbox</TD><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Window</TD></TR><TR CLASS=row><TD ALIGN="left">checked</TD><TD ALIGN="left">Checkbox</TD><TD ALIGN="left">fontcolor( )</TD><TD ALIGN="left">String</TD></TR><TR CLASS=row><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Radio</TD><TD ALIGN="left">fontsize( )</TD><TD ALIGN="left">String</TD></TR><TR CLASS=row><TD ALIGN="left">clear( )</TD><TD ALIGN="left">Document</TD><TD ALIGN="left">Form</TD><TD ALIGN="left">Form</TD></TR><TR CLASS=row><TD ALIGN="left">clearTimeout( )</TD><TD ALIGN="left">Window</TD><TD ALIGN="left">form</TD><TD ALIGN="left">Button</TD></TR><TR CLASS=row><TD ALIGN="left">close( )</TD><TD ALIGN="left">Document</TD><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Checkbox</TD></TR><TR CLASS=row><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Window</TD><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Element</TD></TR><TR CLASS=row><TD ALIGN="left">closed</TD><TD ALIGN="left">Window</TD><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">FileUpload</TD></TR><TR CLASS=row><TD ALIGN="left">complete</TD><TD ALIGN="left">Image</TD><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Hidden</TD></TR><TR CLASS=row><TD ALIGN="left">confirm( )</TD><TD ALIGN="left">Window</TD><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Password</TD></TR><TR CLASS=row><TD ALIGN="left">form <I CLASS=emphasis>(cont'd)</I></TD><TD ALIGN="left">Radio</TD><TD ALIGN="left">length <I CLASS=emphasis>(cont'd)</I></TD><TD ALIGN="left">JavaArray</TD></TR><TR CLASS=row><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Reset</TD><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Select</TD></TR><TR CLASS=row><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Select</TD><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">String</TD></TR><TR CLASS=row><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Submit</TD><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Window</TD></TR><TR CLASS=row><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Text</TD><TD ALIGN="left">Link</TD><TD ALIGN="left">Link</TD></TR><TR CLASS=row><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Textarea</TD><TD ALIGN="left">link( )</TD><TD ALIGN="left">String</TD></TR><TR CLASS=row><TD ALIGN="left">forms[ ]</TD><TD ALIGN="left">Document</TD><TD ALIGN="left">linkColor</TD><TD ALIGN="left">Document</TD></TR><TR CLASS=row><TD ALIGN="left">forward( )</TD><TD ALIGN="left">History</TD><TD ALIGN="left">links[ ]</TD><TD ALIGN="left">Document</TD></TR><TR CLASS=row><TD ALIGN="left">Frame</TD><TD ALIGN="left">Frame</TD><TD ALIGN="left">LN10</TD><TD ALIGN="left">Math</TD></TR><TR CLASS=row><TD ALIGN="left">frames[ ]</TD><TD ALIGN="left">Window</TD><TD ALIGN="left">LN2</TD><TD ALIGN="left">Math</TD></TR><TR CLASS=row><TD ALIGN="left">Function</TD><TD ALIGN="left">Function</TD><TD ALIGN="left">location</TD><TD ALIGN="left">Document</TD></TR><TR CLASS=row><TD ALIGN="left">getClass( )</TD><TD ALIGN="left">getClass( )</TD><TD ALIGN="left">Location</TD><TD ALIGN="left">Location</TD></TR><TR CLASS=row><TD ALIGN="left">getDate( )</TD><TD ALIGN="left">Date</TD><TD ALIGN="left">location</TD><TD ALIGN="left">Window</TD></TR><TR CLASS=row><TD ALIGN="left">getDay( )</TD><TD ALIGN="left">Date</TD><TD ALIGN="left">log( )</TD><TD ALIGN="left">Math</TD></TR><TR CLASS=row><TD ALIGN="left">getHours( )</TD><TD ALIGN="left">Date</TD><TD ALIGN="left">LOG10E</TD><TD ALIGN="left">Math</TD></TR><TR CLASS=row><TD ALIGN="left">getMinutes( )</TD><TD ALIGN="left">Date</TD><TD ALIGN="left">LOG2E</TD><TD ALIGN="left">Math</TD></TR><TR CLASS=row><TD ALIGN="left">getMonth( )</TD><TD ALIGN="left">Date</TD><TD ALIGN="left">lowsrc</TD><TD ALIGN="left">Image</TD></TR><TR CLASS=row><TD ALIGN="left">getSeconds( )</TD><TD ALIGN="left">Date</TD><TD ALIGN="left">Math</TD><TD ALIGN="left">Math</TD></TR><TR CLASS=row><TD ALIGN="left">getTime( )</TD><TD ALIGN="left">Date</TD><TD ALIGN="left">max( )</TD><TD ALIGN="left">Math</TD></TR><TR CLASS=row><TD ALIGN="left">getTimezoneOffset( )</TD><TD ALIGN="left">Date</TD><TD ALIGN="left">MAX_VALUE</TD><TD ALIGN="left">Number</TD></TR><TR CLASS=row><TD ALIGN="left">getYear( )</TD><TD ALIGN="left">Date</TD><TD ALIGN="left">method</TD><TD ALIGN="left">Form</TD></TR><TR CLASS=row><TD ALIGN="left">go( )</TD><TD ALIGN="left">History</TD><TD ALIGN="left">MimeType</TD><TD ALIGN="left">MimeType</TD></TR><TR CLASS=row><TD ALIGN="left">hash</TD><TD ALIGN="left">Location</TD><TD ALIGN="left">mimeTypes</TD><TD ALIGN="left">Navigator</TD></TR><TR CLASS=row><TD ALIGN="left">height</TD><TD ALIGN="left">Image</TD><TD ALIGN="left">mimeTypes[ ]</TD><TD ALIGN="left">Plugin</TD></TR><TR CLASS=row><TD ALIGN="left">Hidden</TD><TD ALIGN="left">Hidden</TD><TD ALIGN="left">min( )</TD><TD ALIGN="left">Math</TD></TR><TR CLASS=row><TD ALIGN="left">History</TD><TD ALIGN="left">History</TD><TD ALIGN="left">MIN_VALUE</TD><TD ALIGN="left">Number</TD></TR><TR CLASS=row><TD ALIGN="left">history</TD><TD ALIGN="left">Window</TD><TD ALIGN="left">name</TD><TD ALIGN="left">Button</TD></TR><TR CLASS=row><TD ALIGN="left">host</TD><TD ALIGN="left">Location</TD><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Checkbox</TD></TR><TR CLASS=row><TD ALIGN="left">hostname</TD><TD ALIGN="left">Location</TD><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Element</TD></TR><TR CLASS=row><TD ALIGN="left">href</TD><TD ALIGN="left">Location</TD><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">FileUpload</TD></TR><TR CLASS=row><TD ALIGN="left">hspace</TD><TD ALIGN="left">Image</TD><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Hidden</TD></TR><TR CLASS=row><TD ALIGN="left">Image</TD><TD ALIGN="left">Image</TD><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Image</TD></TR><TR CLASS=row><TD ALIGN="left">images[ ]</TD><TD ALIGN="left">Document</TD><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">MimeType</TD></TR><TR CLASS=row><TD ALIGN="left">index</TD><TD ALIGN="left">Option</TD><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Password</TD></TR><TR CLASS=row><TD ALIGN="left">indexOf( )</TD><TD ALIGN="left">String</TD><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Plugin</TD></TR><TR CLASS=row><TD ALIGN="left">isNaN( )</TD><TD ALIGN="left">isNaN( )</TD><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Radio</TD></TR><TR CLASS=row><TD ALIGN="left">italics( )</TD><TD ALIGN="left">String</TD><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Reset</TD></TR><TR CLASS=row><TD ALIGN="left">java</TD><TD ALIGN="left">java</TD><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Select</TD></TR><TR CLASS=row><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Packages</TD><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Submit</TD></TR><TR CLASS=row><TD ALIGN="left">JavaArray</TD><TD ALIGN="left">JavaArray</TD><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Text</TD></TR><TR CLASS=row><TD ALIGN="left">JavaClass</TD><TD ALIGN="left">JavaClass</TD><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Textarea</TD></TR><TR CLASS=row><TD ALIGN="left">javaEnabled( )</TD><TD ALIGN="left">Navigator</TD><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Window</TD></TR><TR CLASS=row><TD ALIGN="left">JavaObject</TD><TD ALIGN="left">JavaObject</TD><TD ALIGN="left">NaN</TD><TD ALIGN="left">Number</TD></TR><TR CLASS=row><TD ALIGN="left">JavaPackage</TD><TD ALIGN="left">JavaPackage</TD><TD ALIGN="left">Navigator</TD><TD ALIGN="left">Navigator</TD></TR><TR CLASS=row><TD ALIGN="left">join( )</TD><TD ALIGN="left">Array</TD><TD ALIGN="left">navigator</TD><TD ALIGN="left">navigator</TD></TR><TR CLASS=row><TD ALIGN="left">lastIndexOf( )</TD><TD ALIGN="left">String</TD><TD ALIGN="left">NEGATIVE_INFINITY</TD><TD ALIGN="left">Number</TD></TR><TR CLASS=row><TD ALIGN="left">lastModified</TD><TD ALIGN="left">Document</TD><TD ALIGN="left">netscape</TD><TD ALIGN="left">netscape</TD></TR><TR CLASS=row><TD ALIGN="left">length</TD><TD ALIGN="left">Array</TD><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Packages</TD></TR><TR CLASS=row><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">History</TD><TD ALIGN="left">next</TD><TD ALIGN="left">History</TD></TR><TR CLASS=row><TD ALIGN="left">Number</TD><TD ALIGN="left">Number</TD><TD ALIGN="left">previous</TD><TD ALIGN="left">History</TD></TR><TR CLASS=row><TD ALIGN="left">Object</TD><TD ALIGN="left">Object</TD><TD ALIGN="left">prompt( )</TD><TD ALIGN="left">Window</TD></TR><TR CLASS=row><TD ALIGN="left">onabort( )</TD><TD ALIGN="left">Image</TD><TD ALIGN="left">protocol</TD><TD ALIGN="left">Location</TD></TR><TR CLASS=row><TD ALIGN="left">onblur( )</TD><TD ALIGN="left">FileUpload</TD><TD ALIGN="left">prototype</TD><TD ALIGN="left">Function</TD></TR><TR CLASS=row><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Text</TD><TD ALIGN="left">Radio</TD><TD ALIGN="left">Radio</TD></TR><TR CLASS=row><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Textarea</TD><TD ALIGN="left">random( )</TD><TD ALIGN="left">Math</TD></TR><TR CLASS=row><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Window</TD><TD ALIGN="left">referrer</TD><TD ALIGN="left">Document</TD></TR><TR CLASS=row><TD ALIGN="left">onchange( )</TD><TD ALIGN="left">FileUpload</TD><TD ALIGN="left">reload( )</TD><TD ALIGN="left">Location</TD></TR><TR CLASS=row><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Select</TD><TD ALIGN="left">replace( )</TD><TD ALIGN="left">Location</TD></TR><TR CLASS=row><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Text</TD><TD ALIGN="left">Reset</TD><TD ALIGN="left">Reset</TD></TR><TR CLASS=row><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Textarea</TD><TD ALIGN="left">reset( )</TD><TD ALIGN="left">Form</TD></TR><TR CLASS=row><TD ALIGN="left">onclick( )</TD><TD ALIGN="left">Button</TD><TD ALIGN="left">reverse( )</TD><TD ALIGN="left">Array</TD></TR><TR CLASS=row><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Checkbox</TD><TD ALIGN="left">round( )</TD><TD ALIGN="left">Math</TD></TR><TR CLASS=row><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Link</TD><TD ALIGN="left">scroll( )</TD><TD ALIGN="left">Window</TD></TR><TR CLASS=row><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Radio</TD><TD ALIGN="left">search</TD><TD ALIGN="left">Location</TD></TR><TR CLASS=row><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Reset</TD><TD ALIGN="left">Select</TD><TD ALIGN="left">Select</TD></TR><TR CLASS=row><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Submit</TD><TD ALIGN="left">select( )</TD><TD ALIGN="left">Text</TD></TR><TR CLASS=row><TD ALIGN="left">onerror( )</TD><TD ALIGN="left">Image</TD><TD ALIGN="left">selected</TD><TD ALIGN="left">Option</TD></TR><TR CLASS=row><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Window</TD><TD ALIGN="left">selectedIndex</TD><TD ALIGN="left">Select</TD></TR><TR CLASS=row><TD ALIGN="left">onfocus( )</TD><TD ALIGN="left">FileUpload</TD><TD ALIGN="left">self</TD><TD ALIGN="left">Window</TD></TR><TR CLASS=row><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Text</TD><TD ALIGN="left">setDate( )</TD><TD ALIGN="left">Date</TD></TR><TR CLASS=row><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Textarea</TD><TD ALIGN="left">setHours( )</TD><TD ALIGN="left">Date</TD></TR><TR CLASS=row><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Window</TD><TD ALIGN="left">setMinutes( )</TD><TD ALIGN="left">Date</TD></TR><TR CLASS=row><TD ALIGN="left">onload( )</TD><TD ALIGN="left">Image</TD><TD ALIGN="left">setMonth( )</TD><TD ALIGN="left">Date</TD></TR><TR CLASS=row><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Window</TD><TD ALIGN="left">setSeconds( )</TD><TD ALIGN="left">Date</TD></TR><TR CLASS=row><TD ALIGN="left">onmouseout( )</TD><TD ALIGN="left">Link</TD><TD ALIGN="left">setTime( )</TD><TD ALIGN="left">Date</TD></TR><TR CLASS=row><TD ALIGN="left">onmouseover( )</TD><TD ALIGN="left">Link</TD><TD ALIGN="left">setTimeout( )</TD><TD ALIGN="left">Window</TD></TR><TR CLASS=row><TD ALIGN="left">onreset( )</TD><TD ALIGN="left">Form</TD><TD ALIGN="left">setYear( )</TD><TD ALIGN="left">Date</TD></TR><TR CLASS=row><TD ALIGN="left">onsubmit( )</TD><TD ALIGN="left">Form</TD><TD ALIGN="left">sin( )</TD><TD ALIGN="left">Math</TD></TR><TR CLASS=row><TD ALIGN="left">onunload( )</TD><TD ALIGN="left">Window</TD><TD ALIGN="left">small( )</TD><TD ALIGN="left">String</TD></TR><TR CLASS=row><TD ALIGN="left">open( )</TD><TD ALIGN="left">Document</TD><TD ALIGN="left">sort( )</TD><TD ALIGN="left">Array</TD></TR><TR CLASS=row><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Window</TD><TD ALIGN="left">split( )</TD><TD ALIGN="left">String</TD></TR><TR CLASS=row><TD ALIGN="left">opener</TD><TD ALIGN="left">Window</TD><TD ALIGN="left">sqrt( )</TD><TD ALIGN="left">Math</TD></TR><TR CLASS=row><TD ALIGN="left">Option</TD><TD ALIGN="left">Option</TD><TD ALIGN="left">SQRT1_2</TD><TD ALIGN="left">Math</TD></TR><TR CLASS=row><TD ALIGN="left">options[ ]</TD><TD ALIGN="left">Select</TD><TD ALIGN="left">SQRT2</TD><TD ALIGN="left">Math</TD></TR><TR CLASS=row><TD ALIGN="left">Packages</TD><TD ALIGN="left">Packages</TD><TD ALIGN="left">src</TD><TD ALIGN="left">Image</TD></TR><TR CLASS=row><TD ALIGN="left">parent</TD><TD ALIGN="left">Window</TD><TD ALIGN="left">status</TD><TD ALIGN="left">Window</TD></TR><TR CLASS=row><TD ALIGN="left">parse( )</TD><TD ALIGN="left">Date</TD><TD ALIGN="left">strike( )</TD><TD ALIGN="left">String</TD></TR><TR CLASS=row><TD ALIGN="left">parseFloat( )</TD><TD ALIGN="left">parseFloat( )</TD><TD ALIGN="left">String</TD><TD ALIGN="left">String</TD></TR><TR CLASS=row><TD ALIGN="left">parseInt( )</TD><TD ALIGN="left">parseInt( )</TD><TD ALIGN="left">sub( )</TD><TD ALIGN="left">String</TD></TR><TR CLASS=row><TD ALIGN="left">Password</TD><TD ALIGN="left">Password</TD><TD ALIGN="left">Submit</TD><TD ALIGN="left">Submit</TD></TR><TR CLASS=row><TD ALIGN="left">pathname</TD><TD ALIGN="left">Location</TD><TD ALIGN="left">submit( )</TD><TD ALIGN="left">Form</TD></TR><TR CLASS=row><TD ALIGN="left">PI</TD><TD ALIGN="left">Math</TD><TD ALIGN="left">substring( )</TD><TD ALIGN="left">String</TD></TR><TR CLASS=row><TD ALIGN="left">Plugin</TD><TD ALIGN="left">Plugin</TD><TD ALIGN="left">suffixes</TD><TD ALIGN="left">MimeType</TD></TR><TR CLASS=row><TD ALIGN="left">plugins</TD><TD ALIGN="left">Document</TD><TD ALIGN="left">sun</TD><TD ALIGN="left">Packages</TD></TR><TR CLASS=row><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Navigator</TD><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">sun</TD></TR><TR CLASS=row><TD ALIGN="left">port</TD><TD ALIGN="left">Location</TD><TD ALIGN="left">sup( )</TD><TD ALIGN="left">String</TD></TR><TR CLASS=row><TD ALIGN="left">POSITIVE_INFINITY</TD><TD ALIGN="left">Number</TD><TD ALIGN="left">taint( )</TD><TD ALIGN="left">taint( )</TD></TR><TR CLASS=row><TD ALIGN="left">pow( )</TD><TD ALIGN="left">Math</TD><TD ALIGN="left">taintEnabled( )</TD><TD ALIGN="left">Navigator</TD></TR><TR CLASS=row><TD ALIGN="left">tan( )</TD><TD ALIGN="left">Math</TD><TD ALIGN="left">UTC( )</TD><TD ALIGN="left">Date</TD><TD ALIGN="left">&nbsp;</TD></TR><TR CLASS=row><TD ALIGN="left">target</TD><TD ALIGN="left">Form</TD><TD ALIGN="left">value</TD><TD ALIGN="left">Button</TD></TR><TR CLASS=row><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Link</TD><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Checkbox</TD></TR><TR CLASS=row><TD ALIGN="left">text</TD><TD ALIGN="left">Option</TD><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Element</TD></TR><TR CLASS=row><TD ALIGN="left">Text</TD><TD ALIGN="left">Text</TD><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">FileUpload</TD></TR><TR CLASS=row><TD ALIGN="left">Textarea</TD><TD ALIGN="left">Textarea</TD><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Hidden</TD></TR><TR CLASS=row><TD ALIGN="left">title</TD><TD ALIGN="left">Document</TD><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Option</TD></TR><TR CLASS=row><TD ALIGN="left">toGMTString( )</TD><TD ALIGN="left">Date</TD><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Password</TD></TR><TR CLASS=row><TD ALIGN="left">toLocaleString( )</TD><TD ALIGN="left">Date</TD><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Radio</TD></TR><TR CLASS=row><TD ALIGN="left">toLowerCase( )</TD><TD ALIGN="left">String</TD><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Reset</TD></TR><TR CLASS=row><TD ALIGN="left">top</TD><TD ALIGN="left">Window</TD><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Submit</TD></TR><TR CLASS=row><TD ALIGN="left">toString( )</TD><TD ALIGN="left">Boolean</TD><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Text</TD></TR><TR CLASS=row><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Function</TD><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Textarea</TD></TR><TR CLASS=row><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Number</TD><TD ALIGN="left">valueOf( )</TD><TD ALIGN="left">Object</TD></TR><TR CLASS=row><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Object</TD><TD ALIGN="left">vlinkColor</TD><TD ALIGN="left">Document</TD></TR><TR CLASS=row><TD ALIGN="left">toUpperCase( )</TD><TD ALIGN="left">String</TD><TD ALIGN="left">vspace</TD><TD ALIGN="left">Image</TD></TR><TR CLASS=row><TD ALIGN="left">type</TD><TD ALIGN="left">Element</TD><TD ALIGN="left">width</TD><TD ALIGN="left">Image</TD></TR><TR CLASS=row><TD ALIGN="left">&nbsp;</TD><TD ALIGN="left">Select</TD><TD ALIGN="left">Window</TD><TD ALIGN="left">Window</TD></TR><TR CLASS=row><TD ALIGN="left">unescape( )</TD><TD ALIGN="left">unescape( )</TD><TD ALIGN="left">window</TD><TD ALIGN="left">Window</TD></TR><TR CLASS=row><TD ALIGN="left">untaint( )</TD><TD ALIGN="left">untaint( )</TD><TD ALIGN="left">write( )</TD><TD ALIGN="left">Document</TD></TR><TR CLASS=row><TD ALIGN="left">URL</TD><TD ALIGN="left">Document</TD><TD ALIGN="left">writeln( )</TD><TD ALIGN="left">Document</TD></TR><TR CLASS=row><TD ALIGN="left">userAgent</TD><TD ALIGN="left">Navigator</TD><td>&nbsp;</td><td>&nbsp;</td></TR></TABLE><P></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.1">Anchor Object</A></h3><P CLASS=para>Represents a named position (of an HTMLdocument) that may be the target ordestination of a hypertext link. A hypertext link may referto an anchor by using its name after a # character in a URL.In Netscape 2.0, the elements of the <tt CLASS=literal>document.anchor[]</tt> arrayare set to <tt CLASS=literal>null</tt>, so it is not possible to actually obtain anAnchor object. See also Document.Link.<P CLASS=para><DIV CLASS=screen><P><PRE><tt CLASS=literal>document.anchors.length</tt>	// <tt CLASS=literal>number of anchors in the document</tt><tt CLASS=literal>document.anchors</tt>[<I CLASS=emphasis>i</I>]	// <tt CLASS=literal>one of the Anchor objects</tt></PRE></DIV><P CLASS=para>An Anchor object is created by any standard HTML <tt CLASS=literal>&lt;a&gt;</tt>tag that contains a <tt CLASS=literal>&lt;name&gt;</tt> attribute:<P CLASS=para><DIV CLASS=screen><P><PRE>&lt;a  name="<I CLASS=emphasis>anchor_name</I>"	<I CLASS=emphasis>links may refer to this anchor by this name</I>  [ href=<I CLASS=emphasis>URL</I> ]	<I CLASS=emphasis>an anchor may also be a link</I>  [ target="<I CLASS=emphasis>window_name</I>" ]	<I CLASS=emphasis>links may refer to other windows</I>&gt;<I CLASS=emphasis>anchor HTML text</I>&lt;/a&gt;</PRE></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.2">Array Object</A></h3><P CLASS=para>Creates and initializes an array.Along with the usual array capabilities that allJavaScript objects have, the Array object provides additional arrayfunctionality: a constructor function for initializingarrays, an automatically updated <tt CLASS=literal>length</tt> field thatstores the size of the array, and <tt CLASS=literal>join()</tt>,<tt CLASS=literal>reverse()</tt>, and <tt CLASS=literal>sort()</tt> methods thatmanipulate the elements of an array. Available in Netscape 3.0. See also Object. <P CLASS=para><DIV CLASS=screen><P><PRE>new Array()		<I CLASS=emphasis>with no arguments, length field is set to 0</I>new Array(<I CLASS=emphasis>size</I>)		<I CLASS=emphasis>size = number of elements; sets length</I>new Array(<I CLASS=emphasis>element0</I>, <I CLASS=emphasis>element1</I>, ..., <I CLASS=emphasis>elementn</I>)		<I CLASS=emphasis>length set to number of elements</I></PRE></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.2.1">Properties</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>length</tt><DD><P CLASS=para>Read/write integer specifying the number of elements in the array, or, when the array does not have contiguous elements, a numberone larger than the index of the last element in the array. Thelength property of a new array is initialized when the array iscreated with the <tt CLASS=literal>Array()</tt> constructor method.Adding new elements to an array created with the <tt CLASS=literal>Array()</tt>constructor updates the <tt CLASS=literal>length</tt>, if necessary:<P CLASS=para><DIV CLASS=screen><P><PRE>a = new Array();	<I CLASS=emphasis>a.length initialized to 0</I>b = new Array(10);	<I CLASS=emphasis>b.length initialized to 10</I>c = new Array("one", "two", "three");	<I CLASS=emphasis>c.length initialized to 3</I>c[3] = "four";	<I CLASS=emphasis>c.length updated to 4</I>c[10] = "blastoff";	<I CLASS=emphasis>c.length becomes 11</I></PRE></DIV><P CLASS=para>You can also set the value of the <tt CLASS=literal>length</tt> property to changethe size of an array (i.e., truncate elements or add "undefined" ones).</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.2.2">Methods</A></h4><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>join</tt>   <DD><P CLASS=para>Converts each of the elements of an array to a string, and thenconcatenates those strings, inserting the specified <I CLASS=emphasis>separator</I>string between the elements. Returns the resulting string.You can split a string up into array elements--with the<tt CLASS=literal>split()</tt> method of the String object.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>array</I>.join()<I CLASS=emphasis>array</I>.join(<I CLASS=emphasis>separator</I>)	<I CLASS=emphasis>if no separator, the empty string is used</I></PRE></DIV><p><DT CLASS=varlistentry><tt CLASS=literal>reverse</tt><DD><P CLASS=para>Reverse, in place (i.e., without creating a new array), the order ofthe elements of an array.<p><DT CLASS=varlistentry><tt CLASS=literal>sort</tt><DD><P CLASS=para>With no arguments, sorts alphabetically (by character encoding);elements are first converted to strings, if necessary, so that theycan be compared. To sort the array elements in some other order, youmust supply a function that compares two values and returns a numberindicating their relative order. <P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>array</I>.sort()<I CLASS=emphasis>array</I>.sort(<I CLASS=emphasis>orderfunc</I>)	<I CLASS=emphasis>orderfunc - optional comparison function</I></PRE></DIV><P CLASS=para>The comparison function should taketwo arguments, <I CLASS=emphasis>a</I> and <tt CLASS=literal>b</tt>, and should:<P><UL CLASS=itemizedlist><li CLASS=listitem>Return a value less than zero if, according to your sort criteria,<I CLASS=emphasis>a</I> is less than <I CLASS=emphasis>b</I>, and should appear before <I CLASS=emphasis>b</I>in the sorted array.<P><li CLASS=listitem>Return zero if <I CLASS=emphasis>a</I> and <I CLASS=emphasis>b</I> are equivalent for the purposesof this sort.<P><li CLASS=listitem>Return a value greater than zero if <I CLASS=emphasis>a</I> is greater than <I CLASS=emphasis>b</I>for the purposes of the sort.<P></UL></DL></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.3">Boolean Object</A></h3><P CLASS=para>An object wrapper around the booleanvalue; exists solely to providea <tt CLASS=literal>toString()</tt> method to convert boolean values tostrings. When the <tt CLASS=literal>toString()</tt> method is invoked toconvert a boolean value to a string (and it is often invokedimplicitly by JavaScript), JavaScript internally converts theboolean value to a transient Boolean object, on which themethod can be invoked.<P CLASS=para>You can create Boolean objects that are not transient bycalling the <tt CLASS=literal>Boolean()</tt> constructor method:  <P CLASS=para><DIV CLASS=screen><P><PRE>new Boolean(<I CLASS=emphasis>value</I>)</PRE></DIV><P CLASS=para>The argument is the <I CLASS=emphasis>value</I> to be held by the Boolean object. This will be converted to a boolean value, if necessary. Thevalues 0, <tt CLASS=literal>null</tt>, and the empty string <tt CLASS=literal>""</tt> are allconverted to <tt CLASS=literal>false</tt>. All other values, including thestring "false," are converted to <tt CLASS=literal>true</tt>.Available in Netscape 3.0. See also Object.<DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.3.1">Methods</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>toString()</tt><DD><P CLASS=para>Returns <tt CLASS=literal>true</tt> or <tt CLASS=literal>false</tt>, depending on the boolean valuerepresented by the Boolean object.<p><DT CLASS=varlistentry><tt CLASS=literal>valueOf()</tt><DD><P CLASS=para>Returns the boolean value represented by the Boolean object.</DL></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.4">Button Object</A></h3><P CLASS=para>Represents a graphical pushbutton in a form within an HTML document. Use a Button object whenever you want to allow the user to triggersome action on your Web page. Note that the Submit and Reset objectsare types of Button objects that submit a form and reset a form'svalues. Often these default actions are sufficient for a form, andyou do not need to create any other types of buttons.Available in Netscape 2.0; enhanced in 3.0.See also Element, Form, Reset, Submit.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>form.button_name</I><I CLASS=emphasis>form</I>.elements[<I CLASS=emphasis>i</I>]<I CLASS=emphasis>form</I>.elements['<I CLASS=emphasis>button_name</I>']</PRE></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.4.1">Properties</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>form</tt><DD><P CLASS=para>Read-only reference to the Form object that contains the specified<I CLASS=emphasis>button</I> object. <p><DT CLASS=varlistentry><tt CLASS=literal>name</tt><DD><P CLASS=para>Set by the <tt CLASS=literal>name</tt> attribute of the HTML<tt CLASS=literal>&lt;input&gt;</tt> tag that creates the button, this read-only stringproperty provides the name of the button.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>form.button_nameform.</I>elements['<I CLASS=emphasis>button_name</I>']</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>type</tt><DD><P CLASS=para>See the type property of the Element object (Element.type).<p><DT CLASS=varlistentry><tt CLASS=literal>value</tt><DD><P CLASS=para>Set by the <tt CLASS=literal>value</tt> attribute of the HTML<tt CLASS=literal>&lt;input&gt;</tt> tag that creates the button, this read-only stringproperty provides text displayed in the Button object.</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.4.2">Event Handlers</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>onClick()</tt><DD><P CLASS=para>Invoked when the button is clicked; defined by the <tt CLASS=literal>onClick</tt>attribute of the HTML <tt CLASS=literal>&lt;input&gt;</tt> tag. Value may be any numberof JavaScript statements, separated by semicolons, that are executedwhen the user clicks the button. <P CLASS=para><DIV CLASS=screen><P><PRE>&lt;INPUT TYPE="button"	<I CLASS=emphasis>a definition of the handler</I>       value="<I CLASS=emphasis>button-text</I>"       onClick="<I CLASS=emphasis>handler-statements</I>"&gt;<I CLASS=emphasis>button</I>.onclick	<I CLASS=emphasis>a reference to the handler</I><I CLASS=emphasis>button</I>.onclick()	<I CLASS=emphasis>an explicit invocation of the handler</I></PRE></DIV></DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.4.3">HTML syntax</A></h4><P CLASS=para>A Button object is created with a standard HTML<tt CLASS=literal>&lt;input&gt;</tt> tag, with the addition of the<tt CLASS=literal>onClick</tt> attribute:<P CLASS=para><DIV CLASS=screen><P><PRE>&lt;form&gt;    ...  &lt;input    type="button"	<I CLASS=emphasis>specifies that this is a button</I>    value="<I CLASS=emphasis>label</I>"	<I CLASS=emphasis>the text that is to appear within the button;</I>		<I CLASS=emphasis>specifies the value property</I>    [ name="<I CLASS=emphasis>name</I>" ]	<I CLASS=emphasis>a name that can later be used to refer to the button;</I>	<I CLASS=emphasis>specifies the name property</I>    [ onClick="<I CLASS=emphasis>handler</I>" ]	<I CLASS=emphasis>JavaScript statements to be executed	when the button is clicked</I>  &gt;    ...&lt;/form&gt;</PRE></DIV></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.5">Checkbox Object</A></h3><P CLASS=para>Represents a single graphical checkboxin an HTML form. Note that the text that appears next to thecheckbox is not part of the Checkbox object itself, and mustbe specified external to the Checkbox's HTML <tt CLASS=literal>&lt;input&gt;</tt> tag.The <tt CLASS=literal>onClick</tt> event handler allows you to specifyJavaScript code to be executed when the Checkbox is checked or "un-checked."The value of the <tt CLASS=literal>checked</tt> property gives the state of the Checkbox; it can also be set to change the state.Available but buggy in Netscape 2.0; enhanced in 3.0. See alsoElement, Form, Radio.<P CLASS=para>A Checkbox object with a unique name may bereferenced in any of these ways:<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>form</I>.<I CLASS=emphasis>checkbox_name</I><I CLASS=emphasis>form</I>.elements[<I CLASS=emphasis>i</I>]<I CLASS=emphasis>form</I>.elements['<I CLASS=emphasis>checkbox_name</I>']</PRE></DIV><P CLASS=para>When a form contains a group of checkboxes with the samename, they are placed in an array, and may be referenced asfollows: <P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>form</I>.<I CLASS=emphasis>checkbox_name</I>[<I CLASS=emphasis>j</I>]<I CLASS=emphasis>form</I>.<I CLASS=emphasis>checkbox_name</I>.length<I CLASS=emphasis>form</I>.elements[<I CLASS=emphasis>i</I>][<I CLASS=emphasis>j</I>]<I CLASS=emphasis>form</I>.elements[<I CLASS=emphasis>i</I>].length<I CLASS=emphasis>form</I>.elements['<I CLASS=emphasis>checkbox_name</I>'][<I CLASS=emphasis>j</I>]<I CLASS=emphasis>form</I>.elements['<I CLASS=emphasis>checkbox_name</I>'].length</PRE></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.5.1">Properties</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>checked</tt><DD><P CLASS=para>Read/write Boolean property that specifies whether the Checkboxis checked (<tt CLASS=literal>true</tt>) or not (<tt CLASS=literal>false</tt>). Setting the<tt CLASS=literal>checked</tt> property changes the appearance of the Checkbox but does not cause the <tt CLASS=literal>onclick()</tt> event handler to be invoked.<p><DT CLASS=varlistentry><tt CLASS=literal>defaultChecked</tt><DD><P CLASS=para>Read-only Boolean property that represents the Checkbox's initialstate. May be specified using the <tt CLASS=literal>checked</tt> attribute in the HTML <tt CLASS=literal>&lt;input&gt;</tt> tag. Can be used to reset a Checkbox to itsdefault state.<p><DT CLASS=varlistentry><tt CLASS=literal>form</tt><DD><P CLASS=para>Read-only reference to the Form object that contains the Checkbox.<p><DT CLASS=varlistentry><tt CLASS=literal>name</tt><DD><P CLASS=para>Read-only string, set by the HTML <tt CLASS=literal>name</tt> attribute, thatspecifies the name of the Checkbox object (or array of Checkbox objects).<p><DT CLASS=varlistentry><tt CLASS=literal>type</tt><DD><P CLASS=para>See the type property of the Element object (Element.type).<p><DT CLASS=varlistentry><tt CLASS=literal>value</tt><DD><P CLASS=para>Read/write string that specifies the text that is passed tothe Web server if the Checkbox is checked when the form issubmitted. The initial value of <tt CLASS=literal>value</tt> is specifiedby the HTML <tt CLASS=literal>value</tt> attribute. If no <tt CLASS=literal>value</tt> attribute is specified, then the default <tt CLASS=literal>value</tt> string is "on."</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.5.2">Event handlers</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>onclick()</tt><DD><P CLASS=para>Invoked when the user clicks on a Checkbox; it is defined by the HTML<tt CLASS=literal>onClick</tt> attribute. The value of this attribute may be any number of JavaScript statements, separated bysemicolons, which are executed when the user clicks on the Checkbox.<P CLASS=para><DIV CLASS=screen><P><PRE>&lt;INPUT type="checkbox"	<I CLASS=emphasis>a definition of the handler</I>       onClick="<I CLASS=emphasis>handler-statements</I>"&gt;<I CLASS=emphasis>checkbox</I>.onclick	<I CLASS=emphasis>a reference to the handler</I><I CLASS=emphasis>checkbox</I>.onclick();	<I CLASS=emphasis>an explicit invocation of the handler</I></PRE></DIV></DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.5.3">HTML syntax</A></h4><P CLASS=para>A Checkbox object is created with a standard HTML<tt CLASS=literal>&lt;input&gt;</tt> tag, with the addition of the new<tt CLASS=literal>onClick</tt> attribute. Multiple Checkbox objects areoften created in groups by specifying multiple<tt CLASS=literal>&lt;input&gt;</tt> tags which have the same <tt CLASS=literal>name</tt> attribute. <P CLASS=para><DIV CLASS=screen><P><PRE>&lt;form&gt;    ...  &lt;input    type="checkbox"	<I CLASS=emphasis>specifies that this is a checkbox</I>    [ name="<I CLASS=emphasis>name</I>" ]	<I CLASS=emphasis>a name that can later be used to refer to this checkbox</I>	<I CLASS=emphasis>or to the group of checkboxes with this name;</I>	<I CLASS=emphasis>specifies the <tt CLASS=literal>name</tt> property</I>    [ value="<I CLASS=emphasis>value</I>" ]	<I CLASS=emphasis>the value returned when this checkbox is selected;</I>	<I CLASS=emphasis>specifies the <tt CLASS=literal>value</tt> property</I>    [ checked ]	<I CLASS=emphasis>specifies that the checkbox is initially checked</I>	<I CLASS=emphasis>Specifies the <tt CLASS=literal>defaultChecked</tt> property</I>    [ onClick="<I CLASS=emphasis>handler</I>" ]	<I CLASS=emphasis>JavaScript statements to be executed when the  	Checkbox is clicked</I>  &gt;<I CLASS=emphasis>label</I>	<I CLASS=emphasis>the HTML text that should appear next to the Checkbox</I>    ...&lt;/form&gt;</PRE></DIV></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.6">Date Object</A></h3><P CLASS=para>  With no arguments, the <tt CLASS=literal>Date()</tt> method creates a<tt CLASS=literal>Date</tt> object set to the current date and time.Otherwise, the arguments to <tt CLASS=literal>Date()</tt> specify the date,and, optionally, the time, for the new object. The Date object is built into JavaScript and does not have an HTML analog.Most of the Date object methods are invoked through aninstance of the Date object. For example:<P CLASS=para><DIV CLASS=screen><P><PRE>d = new Date();		//<tt CLASS=literal>get today's date and time</tt>system.write('Today is: " + d.toLocaleString());	//<tt CLASS=literal>and print it out</tt></PRE></DIV><P CLASS=para>This syntax for creating Date objects assumesthat date and time values are specified in local time.When your code must work the same way regardless of the time zone in which it is run, you shouldspecify all your hard-coded dates in the GMT (or UTC) time zone. The most common use of the Data object is to subtract the millisecondrepresentations of the current time from some other time to determinethe difference.<P CLASS=para>Buggy to the point of uselessness in Netscape 2.0. See also Date.parse, Date.UTC().(Note that the <tt CLASS=literal>Date.parse()</tt> and <tt CLASS=literal>Date.UTC()</tt> functions, though related to Date, do not operate on the Date object.)<P CLASS=para>To create a Date object, use one of the following five syntaxes.In the third through fifth syntaxes, the specified times are interpreted as local (not GMT) times.<P CLASS=para><DIV CLASS=screen><P><PRE>new Date();new Date(<I CLASS=emphasis>milliseconds</I>)	<I CLASS=emphasis>milliseconds between date and 12AM 1/1/70</I>new Date(<I CLASS=emphasis>date_string</I>);	<I CLASS=emphasis>date_string = month_name dd, yy [hh:mm[:ss]]</I>new Date(<I CLASS=emphasis>year</I>, <I CLASS=emphasis>month</I>, <I CLASS=emphasis>day</I>);	<I CLASS=emphasis>year minus 1900; month 0-11; day 1-31</I>new Date(year, month, day, hours, minutes, seconds)	  <I CLASS=emphasis>24-hour clock</I></PRE></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.6.1">Methods</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>getDate()</tt><DD><P CLASS=para>Returns the day of the month of a Date object. Return values arebetween 1 and 31.<p><DT CLASS=varlistentry><tt CLASS=literal>getDay()</tt><DD><P CLASS=para>Returns the day of the week of a Date object. Return values are between 0 (Sunday) and 6 (Saturday).<p><DT CLASS=varlistentry><tt CLASS=literal>getHours()</tt><DD><P CLASS=para>Returns the hours field of a Date object.Return values are between 0 (midnight) and 23 (11 PM).<p><DT CLASS=varlistentry><tt CLASS=literal>getMinutes()</tt><DD><P CLASS=para>Returns the minutes field of a Date object.Return values are between 0 and 59.<p><DT CLASS=varlistentry><tt CLASS=literal>getMonth()</tt><DD><P CLASS=para>Returns the month field of a Date object.Return values are between 0 (January) and 11 (December).<p><DT CLASS=varlistentry><tt CLASS=literal>getSeconds()</tt><DD><P CLASS=para>Returns the seconds field of a Date object.Return values are between 0 and 59.<p><DT CLASS=varlistentry><tt CLASS=literal>getTime()</tt><DD><P CLASS=para>Returns the internal, millisecond representation of a Date object(i.e., the number of milliseconds between midnight GMT on 1/1/1970and the specified date).<p><DT CLASS=varlistentry><tt CLASS=literal>getTimezoneOffset()</tt><DD><P CLASS=para>Returns the difference in minutes between this date (in the localtime zone) and GMT. Tells you what time zone the JavaScript code isrunning in. Since <tt CLASS=literal>getTimezoneOffset</tt> is invoked through a Date object, but doesn't reference the Date object, it should actually be its own function.<p><DT CLASS=varlistentry><tt CLASS=literal>getYear()</tt><DD><P CLASS=para>Returns the year field of a Date object.Return value is the year minus 1900 (e.g., 96 for 1996). <p><DT CLASS=varlistentry><tt CLASS=literal>parse()</tt><DD><P CLASS=para>Parses a string representation of a date and returns it in millisecondformat.<p><DT CLASS=varlistentry><tt CLASS=literal>setDate()</tt><DD><P CLASS=para>Sets the day of the month field of a Date object.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>date</I>.setDate(<I CLASS=emphasis>day_of_month</I>) // day_of_month is 1-31</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>setHours()</tt><DD><P CLASS=para>Sets the hour field of a Date object. <P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>date</I>.setHours(<I CLASS=emphasis>hours</I>) //hours is integer betw 0(midnight) and 23 (11pm)</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>setMinutes()</tt><DD><P CLASS=para>Sets the minutes field of a Date object.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>date</I>.setMinutes(<I CLASS=emphasis>minutes</I>) //minutes is integer betw 0 and 59</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>setMonth()</tt><DD><P CLASS=para>Sets the month field of a Date object.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>date</I>.setMonth(<I CLASS=emphasis>month</I>) //month is integer betw 0 (Jan) and 11 (Dec)</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>setSeconds()</tt><DD><P CLASS=para>Sets the seconds field of a Date object.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>date</I>.setSeconds(<I CLASS=emphasis>seconds</I>) //seconds is integer betw 0 and 59</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>setTime()</tt><DD><P CLASS=para>Sets a Date object in the milliseconds between the desired date/time and midnight GMT on January 1, 1970.Representing a datein this millisecond format makes it independent of time zone.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>date</I>.setTime(<I CLASS=emphasis>milliseconds</I>)</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>setYear()</tt><DD><P CLASS=para>Sets the year field of a Date object.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>date</I>.setYear(<I CLASS=emphasis>year</I>)  // year is year minus 1900; e.g. 96 for 1996</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>toGMTString()</tt><DD><P CLASS=para>Converts a Date to a string, using the GMT time zone; format of stringvaries slightly according to platform.<p><DT CLASS=varlistentry><tt CLASS=literal>toLocaleString()</tt><DD><P CLASS=para>Converts a Date to a string, using the local time zone; uses localconventions for data and time formatting.<p><DT CLASS=varlistentry><tt CLASS=literal>UTC()</tt><DD><P CLASS=para>Converts a numeric date and time specification to millisecond format.</DL></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.7">Date.parse( ) Method</A></h3><P CLASS=para><tt CLASS=literal>Date.parse()</tt> is a function that is related to the Date object, but it isnot a method of (or invoked on) the Date object.<tt CLASS=literal>Date.parse()</tt> parses a date/time string and returns the number of milliseconds between the specified date/timeand midnight, January 1st, 1970, GMT.This number can be used directly, used to create a new Date object,or to set the date in an existing Date object with<tt CLASS=literal>Date.setTime()</tt>.<P CLASS=para><tt CLASS=literal>Date.parse()</tt> understands the IETF standard dateformat used in email and other Internet communications(e.g., Wed, 8 May 1996 17:41:46 -0400), as well as partialdates of this format; it also understands the GMT time zone, and thestandard abbreviations for the time zones of the U.S.Buggy in Netscape 2.0. See also Date, Date.UTC(&nbsp;).<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>date</I>.parse(<I CLASS=emphasis>date_string</I>)</PRE></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.8">Date.UTC( ) Method</A></h3><P CLASS=para><tt CLASS=literal>Date.UTC()</tt> is a function that is related to the Date object,but is not a method of the Date object or invoked on it; it is alwaysinvoked as <tt CLASS=literal>Date.UTC()</tt>, not as <I CLASS=emphasis>date</I><tt CLASS=literal>.UTC()</tt>,on some object <I CLASS=emphasis>date</I>.<P CLASS=para><tt CLASS=literal>Date.UTC</tt> converts time in UTC (Universal Coordinated Time) format (i.e., in the GMT zone) to milliseconds.It returns the number of milliseconds between midnight on January 1st,1970, UTC and the time specified by the arguments.This can be used by the <tt CLASS=literal>Date()</tt> constructor method and by the <tt CLASS=literal>Date.setTime()</tt> method.<P CLASS=para>For arguments, use:  <I CLASS=emphasis>year</I> minus 1900 (e.g., 96 for 1996); <I CLASS=emphasis>month</I> 0 (January) through 11 (December); 24-hour clock for hour (0-23). In Netscape 2.0, <tt CLASS=literal>Date.UTC()</tt> does not compute thecorrect number of milliseconds.See also Date, Date.parse.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>date</I>.UTC(<I CLASS=emphasis>year</I>, <I CLASS=emphasis>month</I>, <I CLASS=emphasis>day</I>, [, <I CLASS=emphasis>hours</I> [, <I CLASS=emphasis>minutes</I> [, <I CLASS=emphasis>seconds</I> ]]]);</PRE></DIV><P CLASS=para>To create a Date object using a UTC timespecification, you can use code like this:<P CLASS=para><DIV CLASS=screen><P><PRE>d = new Date(Date.UTC(96, 4, 8, 16, 30));</PRE></DIV><P CLASS=para></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.9">Document Object</A></h3><P CLASS=para> The currently displayed HTML document.An instance of the Document object is stored in the<tt CLASS=literal>document</tt> field of the Window object. As a special case, when referring to the Document object of thecurrent window (i.e., the window in which the JavaScript code isexecuting), you can omit the <I CLASS=emphasis>window</I> reference and simplyuse <tt CLASS=literal>document</tt>.Available in Netscape 2.0. See also Form, Frame, Window.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>window</I>.documentdocument	// To refer to Document obj of current window</PRE></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.9.1">Properties</A></h4><P CLASS=para>Note that for all attributes to set a color, the value can beone of the standard color names recognized by JavaScript, or an RGB value in six hexadecimal digits (<I CLASS=emphasis>RRGGBB</I>).<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>alinkColor</tt><DD><P CLASS=para>String that specifies the color of activated links (i.e., links being selected by user). Can be set directly in the document <tt CLASS=literal>&lt;head&gt;</tt>,or inherited from the <tt CLASS=literal>alink</tt> attribute in the <tt CLASS=literal>&lt;body&gt;</tt>. <p><DT CLASS=varlistentry><tt CLASS=literal>anchors[]</tt><DD><P CLASS=para>An array of Anchor objects, one for each anchor (i.e., hypertext target)in the document. <p><DT CLASS=varlistentry><tt CLASS=literal>anchors.length</tt><DD><P CLASS=para>Read-only integer specifying the number of elements in the<tt CLASS=literal>anchors[]</tt> array.<p><DT CLASS=varlistentry><tt CLASS=literal>applets[]</tt><DD><P CLASS=para>An array of Java objects, one for each <tt CLASS=literal>&lt;applet&gt;</tt> that appears in the document.<p><DT CLASS=varlistentry><tt CLASS=literal>applets.length</tt><DD><P CLASS=para>A read-only integer specifying the number of elements in the<tt CLASS=literal>applets[]</tt> array.<p><DT CLASS=varlistentry><tt CLASS=literal>bgColor</tt><DD><P CLASS=para>String that specifies the background color of thedocument. Can be set directly at any point in document,or inherited from the <tt CLASS=literal>bgcolor</tt> attribute in the <tt CLASS=literal>&lt;body&gt;</tt>.Buggy in Netscape 2.0.<p><DT CLASS=varlistentry><tt CLASS=literal>cookie</tt><DD><P CLASS=para>A string that is the value of a cookie associated with this document.String property that allows you to read,create, modify, and delete the cookie(s) that applyto the current document. A "cookie" is a small amount of named data stored by the Web browser so that it can use data input on onepage in another page, or recall user preferencesacross Web-browsing sessions. <P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>document</I>.cookie</PRE></DIV><P CLASS=para>The read and write values of the <tt CLASS=literal>cookie</tt> property generally differ.In a JavaScript expression, the <tt CLASS=literal>cookie</tt> property returns a string containing all the cookies from the current document, in<I CLASS=emphasis>name</I><tt CLASS=literal>=</tt><I CLASS=emphasis>value</I> pairs (separated by semicolons).Use <tt CLASS=literal>String.indexOf()</tt> and <tt CLASS=literal>String.substring()</tt>to determine the value of a particular cookie. Since cookies cannot contain any semicolons, commas, or whitespace,they are commonly encoded using <tt CLASS=literal>escape()</tt> before storingand decoded using <tt CLASS=literal>unescape()</tt> after retrieving.<P CLASS=para>To associate a cookie value with the currentdocument for the current Web browsing session, set <I CLASS=emphasis>document</I><tt CLASS=literal>.cookie</tt> to astring of the form <I CLASS=emphasis>name</I>=<I CLASS=emphasis>value</I>. To create a cookie that can last acrossbrowser sessions, include an expiration date bysetting <I CLASS=emphasis>document</I><tt CLASS=literal>.cookie</tt> to a string of the form:<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>name</I>=<I CLASS=emphasis>value</I>; expires=<I CLASS=emphasis>date</I></PRE></DIV><P CLASS=para><I CLASS=emphasis>date</I> should be a date specification in the formatwritten by <tt CLASS=literal>Date.toGMTString()</tt>.<p><DT CLASS=varlistentry><tt CLASS=literal>domain</tt><DD><P CLASS=para>String that specifies the Internet domain which the document is from;used for security purposes.<p><DT CLASS=varlistentry><tt CLASS=literal>embeds[]</tt><DD><P CLASS=para>An array of Java objects, one for each <tt CLASS=literal>&lt;embed&gt;</tt> tagthat appears in the document.<p><DT CLASS=varlistentry><tt CLASS=literal>embeds.length</tt><DD><P CLASS=para>Read-only integer that specifies the number of elements inthe <tt CLASS=literal>embeds[]</tt> array.<p><DT CLASS=varlistentry><tt CLASS=literal>fgColor</tt><DD><P CLASS=para>String that specifies the default color of document text. Can be set directly in the document <tt CLASS=literal>&lt;head&gt;</tt>,or inherited from the <tt CLASS=literal>text</tt> attribute in the <tt CLASS=literal>&lt;body&gt;</tt>.<p><DT CLASS=varlistentry><tt CLASS=literal>forms[]</tt><DD><P CLASS=para>An array of Form objects, one for each <tt CLASS=literal>&lt;form&gt;</tt> thatappears in the document.<p><DT CLASS=varlistentry><tt CLASS=literal>forms.length</tt><DD><P CLASS=para>Read-only integer specifying the number of elements in the<tt CLASS=literal>forms[]</tt> array.<p><DT CLASS=varlistentry><tt CLASS=literal>images[]</tt><DD><P CLASS=para>An array of Image objects, one for each image embedded in the documentwith the <tt CLASS=literal>&lt;img&gt;</tt> tag.<p><DT CLASS=varlistentry><tt CLASS=literal>images.length</tt><DD><P CLASS=para>The number of elements in the <tt CLASS=literal>images[]</tt> array.<p><DT CLASS=varlistentry><tt CLASS=literal>lastModified</tt><DD><P CLASS=para>Read-only string that contains the (local) date and time at which<I CLASS=emphasis>document</I> was most recently modified (derived from the HTTP header).<p><DT CLASS=varlistentry><tt CLASS=literal>linkColor</tt><DD><P CLASS=para>String that specifies the color of unvisited links.Can be set directly in the document <tt CLASS=literal>&lt;head&gt;</tt>,or inherited from the <tt CLASS=literal>link</tt> attribute in the <tt CLASS=literal>&lt;body&gt;</tt>.<p><DT CLASS=varlistentry><tt CLASS=literal>links[]</tt><DD><P CLASS=para>An array of Link objects, one for each hypertext link in the document.<p><DT CLASS=varlistentry><tt CLASS=literal>links.length</tt><DD><P CLASS=para>Read-only integer specifying the number of elements inthe <tt CLASS=literal>links[]</tt> array.<p><DT CLASS=varlistentry><tt CLASS=literal>location</tt><DD><P CLASS=para>Synonym for the <tt CLASS=literal>URL</tt> property.Use <tt CLASS=literal>URL</tt> instead because it isless likely to be confused with the <tt CLASS=literal>Window.location</tt> property. <p><DT CLASS=varlistentry><tt CLASS=literal>plugins[]</tt><DD><P CLASS=para>Synonym for the <tt CLASS=literal>embeds[]</tt> array.<p><DT CLASS=varlistentry><tt CLASS=literal>plugins.length</tt><DD><P CLASS=para>The number of elements in the <tt CLASS=literal>plugins[]</tt> or <tt CLASS=literal>embeds[]</tt> array.<p><DT CLASS=varlistentry><tt CLASS=literal>referrer</tt><DD><P CLASS=para>Read-only string that contains the URL of the document from which the current <I CLASS=emphasis>document</I> was reached.<p><DT CLASS=varlistentry><tt CLASS=literal>title</tt><DD><P CLASS=para>Read-only string that specifies the <tt CLASS=literal>&lt;title&gt;</tt> of the document.<p><DT CLASS=varlistentry><tt CLASS=literal>URL</tt><DD><P CLASS=para>Read-only string that specifies the URL of the document that containedthe link that referred to the current document.<p><DT CLASS=varlistentry><tt CLASS=literal>vlinkColor</tt><DD><P CLASS=para>String that specifies the color of visited links.Can be set directly in the document <tt CLASS=literal>&lt;head&gt;</tt>,or inherited from the <tt CLASS=literal>vlink</tt> attribute in the <tt CLASS=literal>&lt;body&gt;</tt>.</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.9.2">Methods</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>clear()</tt><DD><P CLASS=para>Clears the window or frame that contains <I CLASS=emphasis>document</I>.<p><DT CLASS=varlistentry><tt CLASS=literal>close()</tt><DD><P CLASS=para>Displays any output to <I CLASS=emphasis>document</I> that hasbeen written but not yet displayed, and closes the output stream.<p><DT CLASS=varlistentry><tt CLASS=literal>open()</tt><DD><P CLASS=para>Opens a stream to <I CLASS=emphasis>document</I>, so that subsequent<I CLASS=emphasis>document</I><tt CLASS=literal>.write()</tt> calls can append data to the document.<p><DT CLASS=varlistentry><tt CLASS=literal>write()</tt><DD><P CLASS=para>Appends each of its arguments, in order, to <I CLASS=emphasis>document</I>.Numeric values are converted to a stringrepresentation; boolean values are appended as either "true" or "false."When invoked in scripts that are run while the document is loading,you can call <tt CLASS=literal>document.write()</tt> to insert dynamically generatedHTML text into the document.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>document</I>.write(<I CLASS=emphasis>value</I>,...)</PRE></DIV><P CLASS=para>When invoked within a <tt CLASS=literal>&lt;script&gt;</tt> tag on an HTML document that isbeing parsed, arguments are appended at the location of the tag;when invoked on a document that is not being parsed, the document mustfirst be opened with <tt CLASS=literal>Document.open()</tt>.<p><DT CLASS=varlistentry><tt CLASS=literal>writeln()</tt><DD><P CLASS=para>Identical to <tt CLASS=literal>write()</tt>, except that itappends a newline character to the output.</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.9.3">Event handlers</A></h4><P CLASS=para>The following event handlers are, strictly speaking, properties ofWindow, not Document:<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>onload</tt><DD><P CLASS=para>Invoked when the document is fully loaded.Specified by the <tt CLASS=literal>onLoad</tt> attribute of<tt CLASS=literal>&lt;body&gt;</tt>.<p><DT CLASS=varlistentry><tt CLASS=literal>onUnload</tt><DD><P CLASS=para>Invoked when the document is unloaded.Specified by the <tt CLASS=literal>onUnload</tt> attribute of<tt CLASS=literal>&lt;body&gt;</tt>. <P CLASS=para>The Document object obtains values for a number of itsproperties from attributes of the HTML <tt CLASS=literal>&lt;body&gt;</tt> tag.Further, the HTML contents of a document appear within the<tt CLASS=literal>&lt;body&gt;</tt> and <tt CLASS=literal>&lt;/body&gt;</tt> tags.<P CLASS=para><DIV CLASS=screen><P><PRE>&lt;body  [ BACKGROUND="<I CLASS=emphasis>imageURL</I>" ]	<I CLASS=emphasis>a background image for the document</I>  [ BGCOLOR="<I CLASS=emphasis>color</I>" ]	<I CLASS=emphasis>a background color for the document</I>  [ text="<I CLASS=emphasis>color</I>" ]	<I CLASS=emphasis>the foreground color of the document's text</I>  [ LINK="<I CLASS=emphasis>color</I>" ]	<I CLASS=emphasis>the color for unvisited links</I>  [ alink="<I CLASS=emphasis>color</I>" ]	<I CLASS=emphasis>the color for activated links</I>  [ VLINK="<I CLASS=emphasis>color</I>" ]	<I CLASS=emphasis>the color for visited links</I>  [ onLoad="<I CLASS=emphasis>handler</I>" ]	<I CLASS=emphasis>JavaScript to run when the document is loaded</I>  [ onUnload="<I CLASS=emphasis>handler</I>" ]	<I CLASS=emphasis>JavaScript to run when the document is unloaded</I>&gt;    <I CLASS=emphasis>HTML document contents go here</I>&lt;/body&gt;</PRE></DIV><P CLASS=para></DL></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.10">Element Object</A></h3><P CLASS=para>Technically speaking, there is no single Element object inJavaScript. Each of the various types of form elements aretypes of Element objects. Available in Netscape 2.0.See also Button, Checkbox, FileUpload, Form, Hidden, Password, Radio,Reset, Select, Submit, Text, Textarea.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>form</I>.elements[<I CLASS=emphasis>i</I>]<I CLASS=emphasis>form</I>.<I CLASS=emphasis>name</I></PRE></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.10.1">Properties</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>form</tt><DD><P CLASS=para>Read-only reference to Form object that contains this element. <p><DT CLASS=varlistentry><tt CLASS=literal>name</tt><DD><P CLASS=para>Read-only string (from the HTML <tt CLASS=literal>name</tt>attribute) that specifies the name of this element. The name of a form element is used for two purposes. First,it is used when the form is submitted. Data for eachelement in the form is usually submitted in the format:<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>name</I>=<I CLASS=emphasis>value</I>  // name and value are encoded as necessaryfor transmission</PRE></DIV><P CLASS=para>If a name is not specified for a form element, then the data for that element cannot be meaningfully submitted to a Web server.The second use of the <tt CLASS=literal>name</tt> property is to refer to aform element in JavaScript code. <p><DT CLASS=varlistentry><tt CLASS=literal>type</tt><DD><P CLASS=para>Read-only string property (Netscape 3.0 andlater) that specifies the type of the form element.The value depends on the input element:<DIV CLASS=informaltable><P><A NAME="WEB-CH-21-TAB-2"></A><TABLE CLASS=INFORMALTABLE><TR CLASS=row><TH ALIGN="left">Object Type</TH><TH ALIGN="left">HTML Tag</TH><TH ALIGN="left">type Property</TH></TR><TR CLASS=row><TH ALIGN="left">&nbsp;</TH><td>&nbsp;</td><td>&nbsp;</td></TR><TR CLASS=row><TD ALIGN="left">Button</TD><TD ALIGN="left">&lt;input type=button&gt;</TD><TD ALIGN="left">"button"</TD></TR><TR CLASS=row><TD ALIGN="left">Checkbox</TD><TD ALIGN="left">&lt;input type=checkbox&gt;</TD><TD ALIGN="left">"checkbox"</TD></TR><TR CLASS=row><TD ALIGN="left">FileUpload</TD><TD ALIGN="left">&lt;input type=file&gt;</TD><TD ALIGN="left">"file"</TD></TR><TR CLASS=row><TD ALIGN="left">Hidden</TD><TD ALIGN="left">&lt;input type=hidden&gt;</TD><TD ALIGN="left">"hidden"</TD></TR><TR CLASS=row><TD ALIGN="left">Password</TD><TD ALIGN="left">&lt;input type=password&gt;</TD><TD ALIGN="left">"password"</TD></TR><TR CLASS=row><TD ALIGN="left">Radio</TD><TD ALIGN="left">&lt;input type=radio&gt;</TD><TD ALIGN="left">"radio"</TD></TR><TR CLASS=row><TD ALIGN="left">Reset</TD><TD ALIGN="left">&lt;input type=reset&gt;</TD><TD ALIGN="left">"reset"</TD></TR><TR CLASS=row><TD ALIGN="left">Select</TD><TD ALIGN="left">&lt;select&gt;</TD><TD ALIGN="left">"select-one"</TD></TR><TR CLASS=row><TD ALIGN="left">Select</TD><TD ALIGN="left">&lt;select multiple&gt;</TD><TD ALIGN="left">"select-multiple"</TD></TR><TR CLASS=row><TD ALIGN="left">Submit</TD><TD ALIGN="left">&lt;input type=submit&gt;</TD><TD ALIGN="left">"submit"</TD></TR><TR CLASS=row><TD ALIGN="left">Text</TD><TD ALIGN="left">&lt;input type=text&gt;</TD><TD ALIGN="left">"text"</TD></TR><TR CLASS=row><TD ALIGN="left">Textarea</TD><TD ALIGN="left">&lt;textarea&gt;</TD><TD ALIGN="left">"textarea"</TD></TR></TABLE><P></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>value</tt><DD><P CLASS=para>Read/write string property that specifies the value to be sent to theserver for this element when the form is submitted; initial value specified by the HTML <tt CLASS=literal>value</tt> attribute.For Button, Submit, and Reset objects, the <tt CLASS=literal>value</tt>property specifies the text to appear within the button.</DL></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.11">escape( ) Function</A></h3><P CLASS=para>The built-in <tt CLASS=literal>escape()</tt> function creates and returns a new string thatcontains an encoded version of <I CLASS=emphasis>s</I> to allow transmission of data. A common use of <tt CLASS=literal>escape()</tt> is to encode cookie values,which have restrictions on the punctuation characters they may contain.Available in Netscape 2.0.See also String, unescape(&nbsp;).<P CLASS=para><DIV CLASS=screen><P><PRE>escape(<I CLASS=emphasis>s</I>)	<I CLASS=emphasis><I CLASS=emphasis>s</I> is the string to be "escaped" or encoded</I></PRE></DIV><P CLASS=para>All spaces, punctuation, and accented characters are convertedto the form <tt CLASS=literal>%</tt><I CLASS=emphasis>xx</I>, where <I CLASS=emphasis>xx</I> is two hexadecimaldigits that represent the ISO-8859-1 (Latin-1) encoding ofthe character. For example:<P CLASS=para><DIV CLASS=screen><P><PRE>escape("Hello World!");</PRE></DIV><P CLASS=para>yields the string:<P CLASS=para><DIV CLASS=screen><P><PRE>Hello%20World%21</PRE></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.12">eval( ) Function</A></h3><P CLASS=para>A built-in JavaScript function; not a method of any object.Executes the code in its stringargument <I CLASS=emphasis>code</I>, which may contain one or moreJavaScript statements (separated by semicolons).You can also use <tt CLASS=literal>eval()</tt> toevaluate a JavaScript expression rather than execute a statement.Returns the value of the last expression in <I CLASS=emphasis>code</I> that it evaluates.<tt CLASS=literal>eval()</tt> allows a JavaScriptprogram to dynamically modify the code that it executes.<P CLASS=para>Crashes Netscape 2.0 on 16-bit Windows(version 3.1) platforms. A possible workaround:use <tt CLASS=literal>Window.setTimeout(&nbsp;)</tt> with a zero-millisecond delay.In 3.0, <tt CLASS=literal>eval</tt> has become a method of the Object object.See also Object, Window.<P CLASS=para><DIV CLASS=screen><P><PRE>eval(<I CLASS=emphasis>code</I>)</PRE></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.13">FileUpload Object</A></h3><P CLASS=para>Represents a file upload input elementin a form. It looks like a textinput field, with the addition of a Browse... buttonthat opens a directory browser. Entering a filename into aFileUpload object (either directly or through the browser)causes Netscape to submit the contents of that filealong with the form (which must use"multipart/form-data" encoding and the post method).The FileUpload object does not recognize the HTML <tt CLASS=literal>value</tt>attribute to specify an initial value for the input field.For security reasons, only the user may enter a filename;JavaScript may not enter text into the FileUpload field in any way. Available in Netscape 2.0; enhanced in 3.0. See also Element, Form, Text.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>form</I>.<I CLASS=emphasis>name</I><I CLASS=emphasis>form</I>.elements[<I CLASS=emphasis>i</I>]<I CLASS=emphasis>form</I>.elements['<I CLASS=emphasis>name</I>']</PRE></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.13.1">Properties</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>form</tt><DD><P CLASS=para>Read-only reference to the Form object that contains the FileUpload object.<p><DT CLASS=varlistentry><tt CLASS=literal>name</tt><DD><P CLASS=para>Read-only string, set by the HTML <tt CLASS=literal>name</tt> attribute,that specifies the name of the FileUpload object. This <I CLASS=emphasis>name</I> can also be used to reference theFileUpload object as a property of its form. (For example, if the<tt CLASS=literal>name</tt> property of a FileUpload object in form <tt CLASS=literal>foo</tt> is"info," then <tt CLASS=literal>foo.info</tt> refers to the FileUpload object.)<p><DT CLASS=varlistentry><tt CLASS=literal>type</tt><DD><P CLASS=para>Read-only string that specifies the type of this formelement. For FileUpload objects, it has the value "file."Available in Netscape 3.0 and later.<p><DT CLASS=varlistentry><tt CLASS=literal>value</tt><DD><P CLASS=para>Read-only string that specifies the value contained in theinput field (which is also the value sent to the server whenthe form is submitted). In Netscape 2.0, this field isalways blank. In 3.0 any filename specified by the user maybe read, but the property still may not be set.</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.13.2">Methods</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>blur()</tt><DD><P CLASS=para>Removes the keyboard focus from the FileUpload object.Until focus is granted to some other form element, the user'skeystrokes may be ignored by all elements. Due to a bug in Netscape 2.0,the <tt CLASS=literal>blur()</tt> method invokes the <tt CLASS=literal>onblur()</tt> event handler.<p><DT CLASS=varlistentry><tt CLASS=literal>focus()</tt><DD><P CLASS=para>Sets the keyboard focus to the FileUpload object. When focus isset, all keystrokes are automatically entered into this object.</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.13.3">Event handlers</A></h4><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>onblur()</tt><DD><P CLASS=para>Defined by the HTML <tt CLASS=literal>onBlur</tt> attribute,the value of which may be any number of JavaScript statements,separated by semicolons; these statements are executed wheneverthe FileUpload object loses keyboard focus becauseof a user action. <tt CLASS=literal>onblur</tt> should only be invoked by directuser actions, but a bug in Netscape 2.0 causes itto be invoked by the <tt CLASS=literal>FileUpload.blur()</tt> method.<p><DT CLASS=varlistentry><tt CLASS=literal>onchange()</tt><DD><P CLASS=para>Invoked when the user changes the value in the FileUpload objectand moves the keyboard focus elsewhere. This event handleris not invoked for every keystroke in the FileUpload object, butonly when the user completes an edit.<p><DT CLASS=varlistentry><tt CLASS=literal>onfocus()</tt><DD><P CLASS=para>Invoked when a user action causes the FileUpload object to gainthe keyboard focus.</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.13.4">HTML syntax</A></h4><P CLASS=para>A FileUpload object is created with a standard HTML<tt CLASS=literal>&lt;input&gt;</tt> tag, with the addition of optionalattributes for event-handlers:<P CLASS=para><DIV CLASS=screen><P><PRE>&lt;form ENCtype="multipart/form-data" method=post&gt;	 <I CLASS=emphasis>required attributes</I>    ...  &lt;input    type="file"	<I CLASS=emphasis>specifies that this is a FileUpload object</I>    [ name="<I CLASS=emphasis>name</I>" ]	<I CLASS=emphasis>a name that can later be used to refer to this object</I>	<I CLASS=emphasis>specifies the name property</I>    [ size=<I CLASS=emphasis>integer</I> ]	<I CLASS=emphasis>how many characters wide the object is</I>    [ maxlength=<I CLASS=emphasis>integer</I> ]	<I CLASS=emphasis>max allowed number of input characters</I>    [ onBlur="<I CLASS=emphasis>handler</I>" ]	<I CLASS=emphasis>the</I> <tt CLASS=literal>onblur()</tt> <I CLASS=emphasis>event handler</I>    [ onChange="<I CLASS=emphasis>handler</I>" ]	<I CLASS=emphasis>the</I> <tt CLASS=literal>onchange()</tt> <I CLASS=emphasis>event handler</I>    [ onFocus="<I CLASS=emphasis>handler</I>" ]	<I CLASS=emphasis>the</I> <tt CLASS=literal>onfocus()</tt> <I CLASS=emphasis>event handler</I>    ...</PRE></DIV></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.14">Form Object</A></h3><P CLASS=para>Represents an HTML <tt CLASS=literal>&lt;form&gt;</tt> in adocument. Each form in a document is represented as anelement of the <tt CLASS=literal>Document.forms[]</tt> array. Named formsare also represented by the <I CLASS=emphasis>form_name</I> property oftheir document, where <I CLASS=emphasis>form_name</I> is the namespecified in the <tt CLASS=literal>name</tt> attribute of the<tt CLASS=literal>&lt;form&gt;</tt> tag.Available in Netscape 2.0.See also Button, Checkbox, Element, FileUpload, Hidden, Password,Radio, Reset, Select, Submit, Text, Textarea.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>document</I>.<I CLASS=emphasis>form_name</I><I CLASS=emphasis>document</I>.forms[<I CLASS=emphasis>form_number</I>]<I CLASS=emphasis>document</I>.forms.length</PRE></DIV><P CLASS=para>The elements of a form (buttons, input fields, check boxes,and so on) are collected in the <tt CLASS=literal>Form.elements[]</tt>array. Named elements, like named forms, can also bereferenced directly by name--the element name is used as aproperty name of the Form object. Thus, to refer to a Textobject element named "phone" within a form named"questionnaire," you might use the JavaScript expression:<P CLASS=para><DIV CLASS=screen><P><PRE>document.questionnaire.phone</PRE></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.14.1">Properties</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>action</tt><DD><P CLASS=para>Read/write string specifying the URL to which the form isto be submitted. Initially specified by the <tt CLASS=literal>action</tt>attribute of the <tt CLASS=literal>&lt;form&gt;</tt> HTML tag. <p><DT CLASS=varlistentry><tt CLASS=literal>elements[]</tt><DD><P CLASS=para>An array of input elements that appear in the form. Eachelement is a Button, Checkbox, Hidden, Password, Radio,Reset, Select, Submit, Text or Textarea object.<p><DT CLASS=varlistentry><tt CLASS=literal>elements.length</tt><DD><P CLASS=para>The number of items in the <tt CLASS=literal>elements[]</tt> array.<p><DT CLASS=varlistentry><tt CLASS=literal>encoding</tt><DD><P CLASS=para>Read/write string that specifies the encoding method usedfor form data. Initially specified by the <tt CLASS=literal>enctype</tt>attribute of the <tt CLASS=literal>&lt;form&gt;</tt> HTML tag. The default encoding of"application/x-www-form-urlencoded" is almost alwaysappropriate. <p><DT CLASS=varlistentry><tt CLASS=literal>method</tt><DD><P CLASS=para>Read/write string that specifies the technique forsubmitting the form. It should have the value "get" or"post". Initially specified by the <tt CLASS=literal>method</tt> attribute.<p><DT CLASS=varlistentry><tt CLASS=literal>target</tt><DD><P CLASS=para>Read/write string that specifies the name of the frame orwindow in which the results of submitting a form should bedisplayed. Initially specified by the <tt CLASS=literal>target</tt>attribute. The special names "_top", "_parent", "_self",and "_blank" are also supported for the target property andthe <tt CLASS=literal>target</tt> attribute.</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.14.2">Methods</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>reset()</tt><DD><P CLASS=para>Resets each of the input elements of the form to their default values.<p><DT CLASS=varlistentry><tt CLASS=literal>submit()</tt><DD><P CLASS=para>Method that submits a form.</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.14.3">Event Handlers</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>onreset</tt><DD><P CLASS=para>Invoked just before the elements of the form are reset. Specified bythe <tt CLASS=literal>onReset</tt> attribute.<p><DT CLASS=varlistentry><tt CLASS=literal>onsubmit</tt><DD><P CLASS=para>Invoked just before the form issubmitted. Specified by the <tt CLASS=literal>onSubmit</tt> attribute ofthe <tt CLASS=literal>&lt;form&gt;</tt> tag. This event handler allows formentries to be validated before being submitted.</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.14.4">HTML syntax</A></h4><P CLASS=para>A Form object is created with a standard HTML <tt CLASS=literal>&lt;form&gt;</tt>tag. JavaScript adds the optional <tt CLASS=literal>onSubmit</tt> eventhandler attribute to this tag. The form contains any inputelements created with the <tt CLASS=literal>&lt;input&gt;</tt> tag between<tt CLASS=literal>&lt;form&gt;</tt> and <tt CLASS=literal>&lt;/form&gt;</tt>.<P CLASS=para><DIV CLASS=screen><P><PRE>&lt;form    [ name="<I CLASS=emphasis>form_name</I>" ]	<I CLASS=emphasis>to name the form in JavaScript</I>    [ target="<I CLASS=emphasis>window_name</I>" ]	<I CLASS=emphasis>the name of the window for responses</I>    [ action="<I CLASS=emphasis>url</I>" ]	<I CLASS=emphasis>the URL to which the form is submitted</I>    [ method=(get|post) ]	<I CLASS=emphasis>the method of form submission</I>    [ enctype="<I CLASS=emphasis>encoding</I>" ]	<I CLASS=emphasis>how the form data is encoded</I>    [ onSubmit="<I CLASS=emphasis>handler</I>" ]	<I CLASS=emphasis>a handler invoked when form is submitted</I>&gt;	<I CLASS=emphasis>form text and</I> <tt CLASS=literal>&lt;input&gt;</tt> <I CLASS=emphasis>tags go here</I>&lt;/form&gt;</PRE></DIV></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.15">Frame Object</A></h3><P CLASS=para>Though the Frame object is sometimes referred to, there is,strictly speaking, no such object. All frames within abrowser window are instances of the Window object, and theycontain the same properties and support the same methods, andevent handlers as the Window object does. See the Windowobject, and its properties, methods, and event handlers for details. <P CLASS=para>Note, however, that there are a few practical differencesbetween Window objects that represent top-level browser windowsand those that represent frames within a browser window:<P><UL CLASS=itemizedlist><li CLASS=listitem>When the <tt CLASS=literal>defaultStatus</tt> property is set for a frame, thespecified status message is only visible when the mouse is within thatframe.<P><li CLASS=listitem>The <tt CLASS=literal>top</tt> and <tt CLASS=literal>parent</tt> properties of a top-level browserwindow always refer to the top-level window itself. These propertiesare only really useful for frames.<P><li CLASS=listitem>The <tt CLASS=literal>close()</tt> method is not useful for Window objects that areframes.<P></UL><P CLASS=para>Available in Netscape 2.0.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>window</I>.frames[<I CLASS=emphasis>i</I>]<I CLASS=emphasis>window</I>.frames.lengthframes[<I CLASS=emphasis>i</I>]frames.length</PRE></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.16">Function Object</A></h3><P CLASS=para>An object wrapper around the basic function data type; this object type exists so that functions can have properties and methods associatedwith them. When a function value is used in an "objectcontext," i.e., when you attempt to invoke a method or read aproperty of a function, JavaScript internally converts thefunction value into a temporary Function object, so that themethod can be invoked or the property value read.<P CLASS=para><DIV CLASS=screen><P><PRE>function <I CLASS=emphasis>functionname</I>(<I CLASS=emphasis>argname1</I> [, . . .  <I CLASS=emphasis>argname_n</I>)]{       body		// <I CLASS=emphasis>body of function</I>}</PRE></DIV><P CLASS=para>To create a new function, use the <tt CLASS=literal>Function()</tt> constructor method:<P CLASS=para><DIV CLASS=screen><P><PRE>new Function([<I CLASS=emphasis>argname1</I> [, ..., <I CLASS=emphasis>argname_n</I>]], <I CLASS=emphasis>body</I>)</PRE></DIV><P CLASS=para>Functions defined in this way are sometimes called "anonymous"because they are not given a name when they arecreated. Just as JavaScript converts from a function value to a Function object whenever necessary, so it will convert from aFunction object (created with the <tt CLASS=literal>Function()</tt>constructor) to a function value whenever you use the objectin a function value context--i.e., whenever you invoke itwith the <tt CLASS=literal>()</tt> operator. This conversion from Functionobject to function value is done by the <tt CLASS=literal>valueOf(&nbsp;)</tt> method.<P CLASS=para>Since there is no special keyword in JavaScript that refers to the Function object of the currently executing function, you must refer to Function objects byname, as in:<P CLASS=para><DIV CLASS=screen><P><PRE>function myfunc() {     if (myfunc.arguments.length == 0) return;         ...}</PRE></DIV><P CLASS=para>Enhanced in Netscape 3.0. See also the Object Object.<DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.16.1">Properties</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>arguments[]</tt><DD><P CLASS=para>An array of arguments that were passed to the function.Can only be accessed from within the body of a function.Note that the <tt CLASS=literal>arguments[]</tt> property is actually just areference to the Function object itself. Thus, insteadof using <I CLASS=emphasis>function</I><tt CLASS=literal>.arguments[i]</tt> and<I CLASS=emphasis>function</I><tt CLASS=literal>.arguments.length</tt>, you can use<I CLASS=emphasis>function</I><tt CLASS=literal>[i]</tt> and <I CLASS=emphasis>function</I><tt CLASS=literal>.length</tt>.<p><DT CLASS=varlistentry><tt CLASS=literal>arguments.length</tt>      <DD><P CLASS=para>The number of elements in the <tt CLASS=literal>arguments[]</tt> array.<p><DT CLASS=varlistentry><tt CLASS=literal>caller</tt><DD><P CLASS=para>A reference to the Function object that invoked thisone, or <tt CLASS=literal>null</tt> if the function is invoked at the top level.Can only be accessed from within the body of a function.You can print out the <tt CLASS=literal>caller</tt> fordebugging purposes, and you can even invoke that functionthrough the <tt CLASS=literal>caller</tt> property.<p><DT CLASS=varlistentry><tt CLASS=literal>prototype</tt><DD><P CLASS=para>An object which, for constructor functions, defines properties andmethods that will be shared by all objects created with thatconstructor function. Any objects created through a constructorfunction will "inherit" the properties and methods definedin that prototype.</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.16.2">Methods</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>toString()</tt><DD><P CLASS=para>Converts the Function object to a string by returning the functiondefinition (a string of valid JavaScript code).<p><DT CLASS=varlistentry><tt CLASS=literal>valueOf(&nbsp;)</tt><DD><P CLASS=para>Returns the function value contained in a Function object. Seethe Object.valueOf(&nbsp;) method.</DL></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.17">getClass( ) Function</A></h3><P CLASS=para>A function that takes a <tt CLASS=literal>JavaObject</tt> object andreturns the JavaClass object of that JavaObject.Available in Netscape 3.0.See also JavaArray, JavaClass, JavaObject, JavaPackage, and Packages.<P CLASS=para><DIV CLASS=screen><P><PRE>getClass(<I CLASS=emphasis>javaobj</I>)</PRE></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.17.1">Usage</A></h4><P CLASS=para>Don't confuse the JavaScript <tt CLASS=literal>getClass()</tt> functionwith the <tt CLASS=literal>getClass</tt> method of all Java objects.Similarly, don't confuse the JavaScript JavaClass objectwith the Java <I CLASS=emphasis>java.lang.Class</I> class.<P CLASS=para>Consider the Java rectangle object created with the following line:<P CLASS=para><DIV CLASS=screen><P><PRE>var r = new java.awt.Rectangle();</PRE></DIV><P CLASS=para><tt CLASS=literal>r</tt> is a JavaScript variable that holds a JavaObjectobject. Calling the JavaScript function <tt CLASS=literal>getClass()</tt>returns a JavaClass object that represents the<I CLASS=emphasis>java.awt.Rectangle</I> class:<P CLASS=para><DIV CLASS=screen><P><PRE>var c = getClass(r);</PRE></DIV><P CLASS=para>You can see that this is so by comparing this JavaClassobject to <tt CLASS=literal>java.awt.Rectangle</tt>:<P CLASS=para><DIV CLASS=screen><P><PRE>if (c == java.awt.Rectangle) ...</PRE></DIV><P CLASS=para>The Java <tt CLASS=literal>getClass()</tt> method is invoked differentlyand performs an entirely different function:<P CLASS=para><DIV CLASS=screen><P><PRE>c = r.getClass();</PRE></DIV><P CLASS=para>After executing the above line of code, <tt CLASS=literal>c</tt> is aJavaObject that represents a <I CLASS=emphasis>java.lang.Class</I> object. This<I CLASS=emphasis>java.lang.Class</I> object is a Java object that is a Javarepresentation of the <tt CLASS=literal>java.awt.Rectangle</tt> class. See yourJava documentation for details on what you can do with the<tt CLASS=literal>java.lang.Class</tt> class.<P CLASS=para>To summarize, you can see that the following expression willalways evaluate to <tt CLASS=literal>true</tt> for any JavaObject <tt CLASS=literal>o</tt>:<P CLASS=para><DIV CLASS=screen><P><PRE>(getClass(o.getClass()) == java.lang.Class)</PRE></DIV></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.18">Hidden Object</A></h3><P CLASS=para>An invisible form element that allowsarbitrary data to be transmitted to the server when the formis submitted. You can use a Hidden object when you want totransmit additional information, besides the user's inputdata, to the server.(Cookies can also be used to transmit data from client-to-server; however, cookies are persistent on the client side.)<P CLASS=para>When an HTML document is generated on the fly by a server,another use of Hidden form elements is to transmit data fromthe server to the client for later processing by JavaScripton the user's side. <P CLASS=para>Hidden objects can also be useful for communication betweenCGI scripts, even without the intervention of JavaScript onthe client side. In this usage, one CGI script generates adynamic HTML page containing hidden data, which is thensubmitted back to a second CGI script. This hidden data cancommunicate state information, such as the results ofsubmission of a previous form.Enhanced in Netscape 3.0.See also Element, Form, Document.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>form</I>.<I CLASS=emphasis>name</I><I CLASS=emphasis>form</I>.elements[<I CLASS=emphasis>i</I>]<I CLASS=emphasis>form</I>.elements['<I CLASS=emphasis>name</I>']</PRE></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.18.1">Properties</A></h4><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>form</tt><DD><P CLASS=para>Read-only reference to the Form object that contains theHidden object.<p><DT CLASS=varlistentry><tt CLASS=literal>name</tt><DD><P CLASS=para>Read-only string, set by the HTML <tt CLASS=literal>name</tt> attribute,that specifies the name of the Hidden object. This is alsothe <I CLASS=emphasis>name</I> that can be used to reference the Hiddenobject as a property of its form.<p><DT CLASS=varlistentry><tt CLASS=literal>type</tt><DD><P CLASS=para>Read-only string that specifies the type of this formelement. For Hidden objects, it has the value "hidden."Available in Netscape 3.0 and later.<p><DT CLASS=varlistentry><tt CLASS=literal>value</tt><DD><P CLASS=para>Read/write string, initially set by the HTML <tt CLASS=literal>value</tt>attribute, which specifies arbitrary data to be transmittedto the server when the form is submitted. This data isnever visible to the user.</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.18.2">HTML syntax</A></h4><P CLASS=para>A Hidden object is created with a standard HTML <tt CLASS=literal>&lt;input&gt;</tt> tag:<P CLASS=para><DIV CLASS=screen><P><PRE>&lt;form&gt;    ...  &lt;input    type="hidden"	<I CLASS=emphasis>specifies that this is a Hidden object</I>    [ name="<I CLASS=emphasis>name</I>" ]	<I CLASS=emphasis>a name that can later be used to refer to this object;</I>		<I CLASS=emphasis>specifies the name property</I>    [ value="<I CLASS=emphasis>value</I>" ]	<I CLASS=emphasis>the value transmitted when the form is submitted;</I>		<I CLASS=emphasis>specifies the initial value of the value property</I>  &gt;    ...&lt;/form&gt;</PRE></DIV></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.19">History Object</A></h3><P CLASS=para>Read-only array of strings that specify the URLs that have beenpreviously visited by the browser. Thecontents of this list are equivalent to the URLs listed inNetscape's Go menu. You can use the History object to implement your ownForward and Back buttons, or other navigationcontrols, within a window. <P CLASS=para>In Netscape 2.0, and in 3.0 without data tainting, JavaScript can use the <tt CLASS=literal>length</tt>property to determine the number of entries on the Historyobject's URL list, and can use the <tt CLASS=literal>back()</tt>,<tt CLASS=literal>forward()</tt>, and <tt CLASS=literal>go()</tt> methods to cause thebrowser to revisit any of the URLs on the list, but it cannot directly or indirectly read the URLs stored in the array.<P CLASS=para>In 3.0 and later, when the data tainting security model is enabled,the elements of the array are available and may be read (but not changed).Additional properties (described below) are also available.See also Location.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>window</I>.history<I CLASS=emphasis>frame</I>.historyhistory</PRE></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.19.1">Properties</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>current</tt><DD><P CLASS=para>Read-only string that specifies the URL of the current document. Only availablewith data tainting enabled in Netscape 3.0.<p><DT CLASS=varlistentry><tt CLASS=literal>length</tt><DD><P CLASS=para>The number of URLs that are saved in the History object.(Note that the History object does not provide aproperty that specifies the position of the current URL inthe history list, and because there is no method to move toan absolute position in the history list, only methods tomove relative to the current position.)<p><DT CLASS=varlistentry><tt CLASS=literal>next</tt><DD><P CLASS=para>Read-only string that specifies the URL of the document after this one inthe history list. Only available with data tainting enabled inNetscape 3.0.<p><DT CLASS=varlistentry><tt CLASS=literal>previous</tt><DD><P CLASS=para>Read-only string that specifies the URL of the document before this one inthe history list. Only available with data tainting enabled in Netscape 3.0.</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.19.2">Methods</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>back()</tt><DD><P CLASS=para>Go backwards to a previously visited URL (if any).Calling this method has the same effect as a user's click on theNetscape Back button; it's also equivalent to:<P CLASS=para><DIV CLASS=screen><P><PRE>history.go(-1);</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>forward()</tt><DD><P CLASS=para>Go forward to a previously visited URL (if any).Calling this method has the same effect as a user's click on theNetscape Forward button; it's also equivalent to:<P CLASS=para><DIV CLASS=screen><P><PRE>history.go(1);</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>go()</tt><DD><P CLASS=para>Go to a previously visited URL (if any).<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>history</I>.go(<I CLASS=emphasis>relative_position</I>);<I CLASS=emphasis>history</I>.go(<I CLASS=emphasis>target_string</I>);          //* buggy in 2.0 */</PRE></DIV><P CLASS=para>The first form of the <tt CLASS=literal>History.go()</tt> method takes an integerargument (positive argument=forward; negative argument=back)and causes the browser to visit the URL that is the specified number of positions distant in thehistory list maintained by the History object. Thus <tt CLASS=literal>history.go(-1)</tt> is equivalent to <tt CLASS=literal>history.back()</tt> (and produces the sameeffect as a user click on the Netscape Back button). Similarly,<tt CLASS=literal>history.go(3)</tt> is equivalent tocalling <tt CLASS=literal>history.forward()</tt> three times.In the second syntax, the <I CLASS=emphasis>target_string</I> argument is supposedto make the browser revisitthe first (i.e., most recent) URL that contains thespecified string. Caveat:  This form of the method isbuggy in Netscape 2.0 and may cause the browser to crash.<p><DT CLASS=varlistentry><tt CLASS=literal>toString()</tt><DD><P CLASS=para>Returns a string of HTML text. When this string is formatted by a browser (i.e., written with <tt CLASS=literal>document.write()</tt>) it displays thebrowser history as a table of URLs, each with an appropriate hyperlink.Only available with data tainting enabled in Netscape 3.0.</DL></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.20">Image Object</A></h3><P CLASS=para>The Image objects in the <tt CLASS=literal>document.images[]</tt> arrayrepresent the images embedded in an HTMLdocument using the <tt CLASS=literal>&lt;img&gt;</tt> tag. Only two propertiesare writeable:  <tt CLASS=literal>src</tt> and <tt CLASS=literal>lowsrc</tt>. When you set <tt CLASS=literal>src</tt>, the browserwill load the image specified by the new value of the <tt CLASS=literal>src</tt>property, or by the <tt CLASS=literal>lowsrc</tt> property, for low-resolution monitors. (Note that <tt CLASS=literal>lowsrc</tt> must be set before <tt CLASS=literal>src</tt> because the latter starts the download of the new image.)  Setting <tt CLASS=literal>src</tt> can be used to change the graphics on a page inresponse to user actions (e.g., changing the image on a button to indicate that it is or is not available for selectionbased on whether the user has input certain information).<P CLASS=para>Available in Netscape 3.0. (Note that because of a bug in Netscape 2.0, all images in a pagethat contains JavaScript must have <tt CLASS=literal>width</tt> and <tt CLASS=literal>height</tt> attributes specified, even though the <tt CLASS=literal>Image</tt> object is notavailable in 2.0.)See also Document.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>document</I>.images[<I CLASS=emphasis>i</I>]<I CLASS=emphasis>document</I>.images.length<I CLASS=emphasis>document.image-name</I></PRE></DIV><P CLASS=para>You can dynamically create Image objects using the <tt CLASS=literal>Image()</tt> constructor method:<P CLASS=para><DIV CLASS=screen><P><PRE>new Image([<I CLASS=emphasis>width</I>, <I CLASS=emphasis>height</I>]);</PRE></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.20.1">Properties</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>border</tt><DD><P CLASS=para>Read-only integer that specifies the width, in pixels, ofthe border around an image. Its value is set by the<tt CLASS=literal>border</tt> attribute.<p><DT CLASS=varlistentry><tt CLASS=literal>complete</tt><DD><P CLASS=para>Read-only boolean that specifies whether the image is completely loadedyet; if an error occurs or the loading is aborted, the <tt CLASS=literal>complete</tt>property will be set to <tt CLASS=literal>true</tt>.<p><DT CLASS=varlistentry><tt CLASS=literal>height</tt><DD><P CLASS=para>Read-only integer that specifies the height, in pixels, ofthe image. Its value is set by the <tt CLASS=literal>height</tt> attribute.<p><DT CLASS=varlistentry><tt CLASS=literal>hspace</tt><DD><P CLASS=para>Read-only integer that specifies the amount of extrahorizontal space, in pixels, inserted on the left and rightof the image. Its value is set by the <tt CLASS=literal>hspace</tt> attribute.<p><DT CLASS=varlistentry><tt CLASS=literal>lowsrc</tt><DD><P CLASS=para>Read/write string that specifies the  URL of an alternateimage, suitable for display at low resolutions. Its initialvalue is set by the <tt CLASS=literal>lowsrc</tt> attribute.Setting this property has no immediate effect; however, if <tt CLASS=literal>src</tt>is set, a new image will be loaded, and on low-resolution systems,the current value of <tt CLASS=literal>lowsrc</tt> will be used insteadof the newly updated value of <tt CLASS=literal>src</tt>.<p><DT CLASS=varlistentry><tt CLASS=literal>name</tt><DD><P CLASS=para>Read-only string, specified by the HTML <tt CLASS=literal>name</tt> attribute, thatgives the name of the image. When an image is given a name withthe <tt CLASS=literal>name</tt> attribute, a reference to the image is placedin the <I CLASS=emphasis>image-name</I> property in addition to the <tt CLASS=literal>document.images[]</tt> array.Image objects created with the <tt CLASS=literal>Image()</tt> constructor functiondo not have names, and cannot have names assigned.<p><DT CLASS=varlistentry><tt CLASS=literal>src</tt><DD><P CLASS=para>Read/write string that specifies the URL of the image tobe displayed. Its initial value is set by the <tt CLASS=literal>src</tt> attribute.<p><DT CLASS=varlistentry><tt CLASS=literal>vspace</tt><DD><P CLASS=para>Read-only integer that specifies the amount of extravertical space, in pixels, inserted above and below theimage. Its value is set by the <tt CLASS=literal>vspace</tt> attribute.<p><DT CLASS=varlistentry><tt CLASS=literal>width</tt><DD><P CLASS=para>Read-only integer that specifies the width, in pixels, ofthe image. Its value is set by the <tt CLASS=literal>width</tt> attribute.</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.20.2">Event handlers</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>onabort</tt><DD><P CLASS=para>Invoked if the user aborts the download of an image.Defined by the <tt CLASS=literal>onAbort</tt> attribute, the value of whichmay be any number of JavaScript statements (separated by semicolons)that will be executed when the user aborts loading.<P CLASS=para><DIV CLASS=screen><P><PRE>&lt;img src="<I CLASS=emphasis>url</I>     onAbort="<I CLASS=emphasis>handler</I>	<I CLASS=emphasis>a definition of the handler</I>     ...&gt;<I CLASS=emphasis>image</I>.onabort	<I CLASS=emphasis>a reference to the handler</I><I CLASS=emphasis>image</I>.onabort()	<I CLASS=emphasis>an explicit invocation of the handler</I></PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>onerror</tt><DD><P CLASS=para>Invoked if an error occurs while downloading the image. Defined by the <tt CLASS=literal>onError</tt> attribute, the value of which may be any number of JavaScript statements (separated by semicolons)that will be executed when an error occurs during loading.<P CLASS=para><DIV CLASS=screen><P><PRE>&lt;img src="<I CLASS=emphasis>url</I>     onError="<I CLASS=emphasis>handler</I>	<I CLASS=emphasis>a definition of the handler</I>     ...&gt;<I CLASS=emphasis>image</I>.onerror	<I CLASS=emphasis>a reference to the handler</I><I CLASS=emphasis>image</I>.onerror()	<I CLASS=emphasis>an explicit invocation of the handler</I></PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>onload</tt><DD><P CLASS=para>Invoked when the image successfully finishes loading.Defined by the <tt CLASS=literal>onLoad</tt> attribute, the value of which may be any number of JavaScript statements (separated by semicolons)that will be executed when the image is completely loaded.<P CLASS=para><DIV CLASS=screen><P><PRE>&lt;img src="<I CLASS=emphasis>url</I>     onLoad="<I CLASS=emphasis>handler</I>	<I CLASS=emphasis>a definition of the handler</I><tt CLASS=literal>     ...&gt;</tt><I CLASS=emphasis>image</I>.onload	<I CLASS=emphasis>a reference to the handler</I><I CLASS=emphasis>image</I>.onload()	<I CLASS=emphasis>an explicit invocation of the handler</I></PRE></DIV></DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.20.3">HTML syntax</A></h4><P CLASS=para>The Image object is created with a standard HTML<tt CLASS=literal>&lt;img&gt;</tt> tag, with the addition of event handlers.Some <tt CLASS=literal>&lt;img&gt;</tt> attributes have been omitted from thesyntax below, because they are not used by or accessible fromJavaScript.<P CLASS=para><DIV CLASS=screen><P><PRE>&lt;img src="<I CLASS=emphasis>url</I>"	<I CLASS=emphasis>the image to display</I>     width=<I CLASS=emphasis>pixels</I>	<I CLASS=emphasis>the width of the image</I>     height=<I CLASS=emphasis>pixels</I>	<I CLASS=emphasis>the height of the image</I>     [ name="<I CLASS=emphasis>image-name</I>" ]	<I CLASS=emphasis>a property name for the image</I>     [ lowsrc="<I CLASS=emphasis>url</I>" ]	<I CLASS=emphasis>alternate low-resolution image</I>     [ border=<I CLASS=emphasis>pixels</I> ]	<I CLASS=emphasis>width of image border</I>     [ hspace=<I CLASS=emphasis>pixels</I> ]	<I CLASS=emphasis>extra horizontal space around image</I>     [ vspace=<I CLASS=emphasis>pixels</I> ]	<I CLASS=emphasis>extra vertical space around image</I>     [ onLoad=<I CLASS=emphasis>handler</I> ]	<I CLASS=emphasis>invoked when image is fully loaded</I>     [ onError=<I CLASS=emphasis>handler</I> ]	<I CLASS=emphasis>invoked if error in loading</I>     [ onAbort=<I CLASS=emphasis>handler</I> ]	<I CLASS=emphasis>invoked if user aborts load</I>&gt;</PRE></DIV></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.21">isNaN( ) Function</A></h3><P CLASS=para>Tests whether an argument (<I CLASS=emphasis>x</I>) is "not a number"; specifically determineswhether it is the reserved value <tt CLASS=literal>NaN</tt>, which represents anillegal number (such as the result of dividing zero by zero). This function is required because it is not possible to express the<tt CLASS=literal>NaN</tt> value as a literal in JavaScript.Commonly used to test the results of <tt CLASS=literal>parseFloat()</tt> and <tt CLASS=literal>parseInt()</tt> to see if they represent legal numbers, orto check for arithmetic errors, such as division by zero.Not implemented on all platforms for Netscape 2.0. See also parseFloat,parseInt.<P CLASS=para><DIV CLASS=screen><P><PRE>isNaN(<I CLASS=emphasis>x</I>)</PRE></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.22">JavaArray Object</A></h3><P CLASS=para>A representation of a Java array, which allows JavaScript to read andwrite the elements of the array using familiar JavaScript array syntax.When reading and writing values from array elements, data conversionbetween JavaScript and Java representations is handled by the system.Note that Java arrays differ from JavaScript arrays in the followingways. First, Java arrays have a fixed length that is specified whenthey are created; thus, the JavaArray <tt CLASS=literal>length</tt> field is read-only.Second, Java arrays are <I CLASS=emphasis>typed</I> (i.e., their elements must all beof the same data type); attempting to set an array element to a valueof the wrong type will result in a JavaScript error.Available in Netscape 3.0.See also getClass, JavaClass, JavaObject, JavaPackage, Packages.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>javaarray</I>.length	<I CLASS=emphasis>the length of the array</I><I CLASS=emphasis>javaarray</I>[<I CLASS=emphasis>index</I>]	<I CLASS=emphasis>read or write an array element</I></PRE></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.22.1">Properties</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>length</tt><DD><P CLASS=para>Read-only integer that specifies the number of elements in the Javaarray represented by the JavaArray object.</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.22.2">Usage</A></h4><P CLASS=para>If <tt CLASS=literal>java.awt.Polygon</tt> is a JavaClass object, you can create a JavaObject representing an instance of the class using:<P CLASS=para><DIV CLASS=screen><P><PRE>p = new java.awt.Polygon();</PRE></DIV><P CLASS=para>This object <tt CLASS=literal>p</tt> has properties <tt CLASS=literal>xpoints</tt> and <tt CLASS=literal>ypoints</tt>,which are JavaArray objects representing Java arrays of integers. You could initialize the contents of these arrays with JavaScript codelike the following:<P CLASS=para><DIV CLASS=screen><P><PRE>for(int i = 0; i &lt; p.xpoints.length; i++)    p.xpoints[i] = Math.round(Math.random()*100);for(int i = 0; i &lt; p.ypoints.length; i++)    p.ypoints[i] = Math.round(Math.random()*100);</PRE></DIV></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.23">JavaClass Object</A></h3><P CLASS=para>JavaScript representation of a Java class.Its properties represent the public static fields and methods (alsocalled class fields and methods) of the represented class; these propertiescan be used to read and write the static fields and to invoke thestatic methods of Java classes. Use a <tt CLASS=literal>for/in</tt> loop to enumeratethe properties for any given class.<P CLASS=para>Note that the JavaClass object does not have properties representingthe <I CLASS=emphasis>instance</I> fields of a Java class, which are representedby the JavaObject object. However, the JavaClass object does allowfor the creation of Java objects (represented by a JavaObject object)using the <tt CLASS=literal>new</tt> keyword and invoking the constructor methodof a JavaClass. For primitive data types, conversion between JavaScript values and Java valuesis handled automatically by the system.Note that Java is a <I CLASS=emphasis>typed</I> language (i.e., each of the fieldsof an object must adhere to a specific data type). Available in Netscape 3.0.See also getClass, JavaArray, JavaObject, JavaPackage, Packages.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>javaclass.static_field</I>	<I CLASS=emphasis>read or write a static Java field</I><I CLASS=emphasis>javaclass.static_method</I>(...)	<I CLASS=emphasis>invoke a static method</I>new <I CLASS=emphasis>javaclass</I>(...)	<I CLASS=emphasis>create a new Java object</I></PRE></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.23.1">Usage</A></h4><P CLASS=para><tt CLASS=literal>java.lang.System</tt> is a JavaClass object that represents thejava.lang.System class in Java. The following code reads a static field of this class:<P CLASS=para><DIV CLASS=screen><P><PRE>var java_console = java.lang.System.out;</PRE></DIV><P CLASS=para>Invoke a static method of this class with a line such as:<P CLASS=para><DIV CLASS=screen><P><PRE>var version = java.lang.System.getProperty("java.version");</PRE></DIV><P CLASS=para>The JavaClass object allows you to create a new Java object like this:<P CLASS=para><DIV CLASS=screen><P><PRE>var java_date = new java.lang.Date();</PRE></DIV></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.24">JavaObject Object</A></h3><P CLASS=para>JavaScript representation of a Java object. Its properties represent the public instance fields and methods defined for the Java object;these properties can be used to read and write the public instance fieldsand to invoke the public instance methods of a Java object.(The static/class fields and methods are represented by theJavaClass object.) Use the <tt CLASS=literal>for/in</tt> loop to enumerate the properties of any givenJavaObject.<P CLASS=para>For primitive data types, conversion between JavaScript values and Java values is handled automatically by the system.Note that Java is a <I CLASS=emphasis>typed</I> language (i.e., each of the fieldsof an object must adhere to a specific data type). Available in Netscape 3.0.See also getClass, JavaArray, JavaClass, JavaPackage, Packages.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>javaobject.field</I>	<I CLASS=emphasis>read or write an instance field</I><I CLASS=emphasis>javaobject.method</I>(...)	<I CLASS=emphasis>invoke an instance method</I></PRE></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.24.1">Usage</A></h4><P CLASS=para><tt CLASS=literal>java.lang</tt> is the name of a JavaPackage that contains the JavaClass <tt CLASS=literal>java.lang.System</tt>. This class has the property<tt CLASS=literal>out</tt>, which is a JavaObject. This JavaObject has a property<tt CLASS=literal>println</tt>, which is a method that can be invoked like this:<P CLASS=para><DIV CLASS=screen><P><PRE>java.lang.System.out.println("Hello from Java!");</PRE></DIV><P CLASS=para>The previous line of code will write a message on the Java console.<tt CLASS=literal>java.awt.Rectangle</tt> is a JavaClass that represents the <I CLASS=emphasis>java.awt.Rectangle</I> class. The following line creates a JavaObject that representsan instance of this class:<P CLASS=para><DIV CLASS=screen><P><PRE>var r = new java.awt.Rectangle(0,0,4,5);</PRE></DIV><P CLASS=para>Then access the public fields of this JavaObject <tt CLASS=literal>r</tt> using code such as:<P CLASS=para><DIV CLASS=screen><P><PRE>var perimeter = 2*r.width + 2*r.height;</PRE></DIV></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.25">JavaPackage Object</A></h3><P CLASS=para>A JavaScript representation of a Java package. A package in Java is a collection of relatedclasses. In JavaScript, a JavaPackage can contain classes(represented by the JavaClass object) and it can alsocontain other JavaPackage objects.<P CLASS=para>The property naming scheme for theJavaPackage hierarchy mirrors the naming scheme for Java packages. However, the JavaPackage object named <tt CLASS=literal>java</tt> doesnot actually represent a package in Java, but is simply aconvenient placeholder for other JavaPackages that dorepresent <I CLASS=emphasis>java.lang</I>, <I CLASS=emphasis>javat</I>,<I CLASS=emphasis>java.io</I>, and other important Java classes.Think of the JavaPackage object as representing a Javapackage representing a directory in the Java class hierarchy.<P CLASS=para>The <tt CLASS=literal>java</tt> JavaPackage object isactually a property of every Window object, which makes it a"global" variable in client-side JavaScript. Since everyJavaScript expression is evaluated in the context of onewindow or another, you can always just use <tt CLASS=literal>java</tt> andknow that you will be referring to the JavaPackage object you want.There are other global JavaPackage objects as well (<tt CLASS=literal>sun</tt>, <tt CLASS=literal>netscape</tt>).The <tt CLASS=literal>Packages</tt> property is aJavaPackage object that contains references to each of these<tt CLASS=literal>java</tt>, <tt CLASS=literal>sun</tt>, and <tt CLASS=literal>netscape</tt> JavaPackages. <P CLASS=para>Available in Netscape 3.0.See also JavaArray, JavaClass, JavaObject, Packages.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>package.package_name</I>		<I CLASS=emphasis>refers to another JavaPackage</I><I CLASS=emphasis>package.class_name</I>			<I CLASS=emphasis>refers to a JavaClass object</I></PRE></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.25.1">Properties</A></h4><P CLASS=para>The properties of a JavaPackage object are the names of theJavaPackage objects and JavaClass objects that it contains.These properties will be different for each individualJavaPackage. Note that it is not possible to use theJavaScript <tt CLASS=literal>for/in</tt> loop to iterate over the list ofproperty names of a Package object; consult a Javareference manual, or examine the Java class hierarchy, to determine the packages and classes contained within any given package.</DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.25.2">Usage</A></h4><P CLASS=para>You can use JavaPackage objects to refer to any Java class. The <I CLASS=emphasis>java.lang.System</I> class, for example, is:<P CLASS=para><DIV CLASS=screen><P><PRE>java.lang.System</PRE></DIV><P CLASS=para>Or:<P CLASS=para><DIV CLASS=screen><P><PRE>Packages.java.lang.System</PRE></DIV><P CLASS=para>Similarly, the <I CLASS=emphasis>netscape.javascript.JSObject</I> class is:<P CLASS=para><DIV CLASS=screen><P><PRE>Packagestscape.javascript.JSObject</PRE></DIV></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.26">Link Object</A></h3><P CLASS=para> Represents a hypertext link or aclickable area of a client-side image map in an HTMLdocument. A subclass of the Location object; however, Link differs in that it does not load a new URL automatically (i.e., it changes theURL that the link refers to, but the URL is not displayed until theuser selects it).Note that in JavaScript, a hypertext link is a Link object, and a namedlink destination is an Anchor object.Enhanced in Netscape 3.0. See also Anchor, Location.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>document</I>.links[]<I CLASS=emphasis>document</I>.links.length</PRE></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.26.1">Properties</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>hash</tt><DD><P CLASS=para>The hash portion of the<tt CLASS=literal>HREF</tt> URL, including the leading hash (#) mark. Thisportion specifies the name of an anchor within the objectreferred to by the URL.<p><DT CLASS=varlistentry><tt CLASS=literal>host</tt><DD><P CLASS=para>The combination of thehostname and port portions of the <tt CLASS=literal>HREF</tt> URL.<p><DT CLASS=varlistentry><tt CLASS=literal>hostname</tt><DD><P CLASS=para>The hostname portion of the <tt CLASS=literal>HREF</tt> URL.<p><DT CLASS=varlistentry><tt CLASS=literal>href</tt><DD><P CLASS=para>The complete URL specified by the <tt CLASS=literal>HREF</tt> property.<p><DT CLASS=varlistentry><tt CLASS=literal>pathname</tt><DD><P CLASS=para>The path portion of the <tt CLASS=literal>HREF</tt> URL.<p><DT CLASS=varlistentry><tt CLASS=literal>port</tt><DD><P CLASS=para>The port portion of the <tt CLASS=literal>HREF</tt> URL.<p><DT CLASS=varlistentry><tt CLASS=literal>protocol</tt><DD><P CLASS=para>The protocol portion of the <tt CLASS=literal>HREF</tt> URL, including the trailing colon.<p><DT CLASS=varlistentry><tt CLASS=literal>search</tt><DD><P CLASS=para>The search or queryportion of the <tt CLASS=literal>HREF</tt> URL, including the leading question mark.<p><DT CLASS=varlistentry><tt CLASS=literal>target</tt><DD><P CLASS=para>The name of aWindow object (i.e., a frame or a toplevel browser window) inwhich the <tt CLASS=literal>HREF</tt> URL should be displayed.</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.26.2">Event handlers</A></h4><P CLASS=para>The values of the following attributes may be any numberof JavaScript statements separated by semicolons.<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>onclick()</tt><DD><P CLASS=para>Statements invoked when the user clicks on the link. Defined by the <tt CLASS=literal>onClick</tt> attribute of the HTML <tt CLASS=literal>&lt;a&gt;</tt>or <tt CLASS=literal>&lt;area&gt;</tt> tag that defines the hypertext link.The <tt CLASS=literal>onclick()</tt> event handler is invoked before the browserfollows the clicked hypertext link.<P CLASS=para><DIV CLASS=screen><P><PRE>&lt;a onClick="<I CLASS=emphasis>handler-statements</I>"&gt;	<I CLASS=emphasis>a definition of the handler</I><I CLASS=emphasis>link</I>.onclick	<I CLASS=emphasis>a reference to the handler</I><I CLASS=emphasis>link</I>.onclick();	<I CLASS=emphasis>an explicit invocation of the handler</I></PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>onmouseout()</tt><DD><P CLASS=para>Statements invoked when the user moves the mouse off of the link. Defined by the <tt CLASS=literal>onMouseOut</tt> attribute of the HTML <tt CLASS=literal>&lt;a&gt;</tt> or<tt CLASS=literal>&lt;area&gt;</tt> tag that defines the hypertext link.Available in 3.0 and later.<P CLASS=para><DIV CLASS=screen><P><PRE>&lt;a onMouseOut="<I CLASS=emphasis>handler-statements</I>"&gt;	<I CLASS=emphasis>a definition of the handler</I>&lt;area onMouseOut="<I CLASS=emphasis>handler-statements</I>"&gt;	 <I CLASS=emphasis>another definition</I><I CLASS=emphasis>link</I>.onmouseout	<I CLASS=emphasis>a reference to the handler</I><I CLASS=emphasis>link</I>.onmouseout();	<I CLASS=emphasis>an explicit invocation of the handler</I></PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>onmouseover()</tt><DD><P CLASS=para>Statements invoked when the user moves the mouse over thelink. The <tt CLASS=literal>status</tt> property of the current window may be set here.Defined by the <tt CLASS=literal>onMouseOver</tt> attribute of the HTML <tt CLASS=literal>&lt;A&gt;</tt> or<tt CLASS=literal>&lt;area&gt;</tt> tag that defines the hypertext link.<P CLASS=para><DIV CLASS=screen><P><PRE>&lt;a onMouseOver="<I CLASS=emphasis>handler-statements</I>"&gt;	 <I CLASS=emphasis>a definition of the handler</I>&lt;area onMouseOver="<I CLASS=emphasis>handler-statements</I>"&gt;	 <I CLASS=emphasis>another definition</I><I CLASS=emphasis>link</I>.onmouseover	<I CLASS=emphasis>a reference to the handler</I><I CLASS=emphasis>link</I>.onmouseover();	<I CLASS=emphasis>an explicit invocation of the handler</I></PRE></DIV></DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.26.3">HTML syntax</A></h4><P CLASS=para>A Link object is created with standard <tt CLASS=literal>&lt;a&gt;</tt> and<tt CLASS=literal>&lt;/a&gt;</tt> tags, with the addition of the <tt CLASS=literal>onClick</tt>,<tt CLASS=literal>onMouseOver</tt>, and <tt CLASS=literal>onMouseOut</tt> event-handler attributes. The<tt CLASS=literal>HREF</tt> attribute is required for all Link objects. Ifthe <tt CLASS=literal>name</tt> attribute is also specified, then an Anchorobject is also created:<P CLASS=para><DIV CLASS=screen><P><PRE>&lt;A HREF="<I CLASS=emphasis>url</I>"    [ name="<I CLASS=emphasis>anchor_tag</I>" ]	<I CLASS=emphasis>creates an Anchor object</I>    [ target="<I CLASS=emphasis>window_name</I>" ]	<I CLASS=emphasis>where the HREF should be displayed</I>    [ onClick="<I CLASS=emphasis>handler</I>" ]	<I CLASS=emphasis>invoked when link is clicked</I>    [ onMouseOver="<I CLASS=emphasis>handler</I>" ]	<I CLASS=emphasis>invoked when mouse is over link</I>    [ onMouseOut="<I CLASS=emphasis>handler</I>" ]	<I CLASS=emphasis>invoked when mouse leaves link</I>&gt;<I CLASS=emphasis>link text or image</I>	<I CLASS=emphasis>the visible part of the link</I>&lt;/A&gt;</PRE></DIV><P CLASS=para>In Netscape 3.0 and later, a Link object is also created byeach <tt CLASS=literal>&lt;area&gt;</tt> tag within a client-side image map;standard HTML with the addition of event-handler tags:<P CLASS=para><DIV CLASS=screen><P><PRE>&lt;MAP name="<I CLASS=emphasis>map_name</I>"&gt;    &lt;area SHAPE="<I CLASS=emphasis>area_shape</I>"        COORDS=coordinates        HREF="<I CLASS=emphasis>url</I>"        [ target="<I CLASS=emphasis>window_name</I>" ]	<I CLASS=emphasis>where the HREF should be displayed</I>        [ onClick="<I CLASS=emphasis>handler</I>" ]	<I CLASS=emphasis>invoked when area is clicked</I>        [ onMouseOut="<I CLASS=emphasis>handler</I>" ]	<I CLASS=emphasis>invoked when mouse leaves area</I>&gt; . . .&lt;/MAP&gt;</PRE></DIV><P CLASS=para></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.27">Location Object</A></h3><P CLASS=para>  Represents a URL. Each of the properties of the Location object is aread/write string that contains one or more portions of theURL described by the object. The <tt CLASS=literal>location</tt> property of Windowobject is a Location object that specifies the URL of the document. Changing properties of a Location object of a Window causesthe browser to read in the changed URL.To load a new URL, you usually set the <tt CLASS=literal>location</tt> property to a string; or you can set any of the properties of the <tt CLASS=literal>Location</tt>object instead. The <tt CLASS=literal>href</tt> property is commonly used. If you justset the <tt CLASS=literal>hash</tt> property of the <tt CLASS=literal>window.location</tt> object,the browser will jump to the newly specified anchor. <P CLASS=para>When you set the <tt CLASS=literal>location</tt> or <tt CLASS=literal>location.href</tt> properties to a URL thatyou have already visited, the browser will either load that URL fromthe cache, or will check with the server to see if the document has changed and reload it if necessary. In Netscape 2.0, it willalways check with the Web server. In 3.0, the action it takes dependson the <tt CLASS=literal>Verify Document</tt> setting in Netscape's <tt CLASS=literal>NetworkPreferences</tt>.<P CLASS=para>See also Document, Link, Window.<P CLASS=para><DIV CLASS=screen><P><PRE>location<I CLASS=emphasis>window</I>.location<I CLASS=emphasis>document</I>.links[]</PRE></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.27.1">Properties</A></h4><P CLASS=para>The fields of a Location object refer to the various portionsof a URL, which has the following general format:<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>protocol</I>://<I CLASS=emphasis>hostname</I>:<I CLASS=emphasis>port</I>/<I CLASS=emphasis>pathname</I>?<I CLASS=emphasis>search</I>#<I CLASS=emphasis>hash</I></PRE></DIV><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>hash</tt><DD><P CLASS=para>The hash portion of the URL, including the leading hash mark (#).This portion specifies the name of an anchor within a single HTML file.<P CLASS=para><DIV CLASS=screen><P><PRE>location.hash<I CLASS=emphasis>window</I>.location.hash<I CLASS=emphasis>document</I>.links[<I CLASS=emphasis>i</I>].hash</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>host</tt><DD><P CLASS=para>A combination of the hostname and port portions of the URL.<P CLASS=para><DIV CLASS=screen><P><PRE>location.host<I CLASS=emphasis>window</I>.location.host<I CLASS=emphasis>document</I>.links[<I CLASS=emphasis>i</I>].host</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>hostname</tt><DD><P CLASS=para>The hostname portion of the URL.<P CLASS=para><DIV CLASS=screen><P><PRE>location.hostname<I CLASS=emphasis>window</I>.location.hostname<I CLASS=emphasis>document</I>.links[<I CLASS=emphasis>i</I>].hostname</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>href</tt><DD><P CLASS=para>The complete URL.<P CLASS=para><DIV CLASS=screen><P><PRE>location.href<I CLASS=emphasis>window</I>.location.href<I CLASS=emphasis>document</I>.links[<I CLASS=emphasis>i</I>].href</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>pathname</tt><DD><P CLASS=para>The path portion of the URL.<P CLASS=para><DIV CLASS=screen><P><PRE>location.pathname<I CLASS=emphasis>window</I>.location.pathname<I CLASS=emphasis>document</I>.links[<I CLASS=emphasis>i</I>].pathname</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>port</tt><DD><P CLASS=para>The port portion of the URL.<P CLASS=para><DIV CLASS=screen><P><PRE>location.port<I CLASS=emphasis>window</I>.location.port<I CLASS=emphasis>document</I>.links[<I CLASS=emphasis>i</I>].port</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>protocol</tt><DD><P CLASS=para>The protocol portion of the URL, including the trailing colon.<P CLASS=para><DIV CLASS=screen><P><PRE>location.protocol<I CLASS=emphasis>window</I>.location.protocol<I CLASS=emphasis>document</I>.links[<I CLASS=emphasis>i</I>].protocol</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>search</tt><DD><P CLASS=para>The search or query portion of the URL, including the leading questionmark.<P CLASS=para><DIV CLASS=screen><P><PRE>location.search<I CLASS=emphasis>window</I>.location.search<I CLASS=emphasis>document</I>.links[<I CLASS=emphasis>i</I>].search</PRE></DIV></DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.27.2">Methods</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>reload()</tt><DD><P CLASS=para>Reloads the current document from the cache or server.The optional <I CLASS=emphasis>force</I> argument is a boolean that specifies whetherthe document should be reloaded even if it hasn't been modified; ifomitted or <tt CLASS=literal>false</tt>, the method will reload the full pageonly if it has been changed since it was last loaded.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>location</I>.reload()<I CLASS=emphasis>location</I>.reload(<I CLASS=emphasis>force</I>)</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>replace()</tt><DD><P CLASS=para>Replaces the current document with a new one, without generating anew entry in the browser's session history.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>location</I>.replace(<I CLASS=emphasis>url</I>)</PRE></DIV><P CLASS=para></DL></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.28">Math Object</A></h3><P CLASS=para>  Read-only reference to a placeholder object that contains mathematicalfunctions and constants. <tt CLASS=literal>Math</tt> is itself an object, not a class of objects, so its constants and methods are invoked directly through it.<tt CLASS=literal>Math</tt> is actually a global property of the Window object, andas such, is usually referred to as <tt CLASS=literal>Math</tt>, rather than as<I CLASS=emphasis>window</I><tt CLASS=literal>.Math</tt>.<tt CLASS=literal>random()</tt> function added in 3.0. See also Number.<P CLASS=para><DIV CLASS=screen><P><PRE>Math.<I CLASS=emphasis>constant</I>Math.<I CLASS=emphasis>function</I>()</PRE></DIV><P CLASS=para>Invoke functions and constants as follows:<P CLASS=para><DIV CLASS=screen><P><PRE>y = Math.sin(x);area = radius * radius * Math.PI;</PRE></DIV><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><I CLASS=emphasis>Constants</I><DD><P CLASS=para>The constant $e$ (the base of natural logarithms)The natural logarithm of 10The natural logarithm of 2The base-10 logarithm of $e$The base-2 logarithm of $e$The constant piThe reciprocal of the square-root of 2The square-root of 2<p><DT CLASS=varlistentry><I CLASS=emphasis>Methods (Functions)</I><DD><P CLASS=para></DL><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>abs</tt>   <DD><P CLASS=para>Computes an absolute value.<P CLASS=para><DIV CLASS=screen><P><PRE>Math.abs(<I CLASS=emphasis>x</I>)	// x is any numeric value or expression</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>acos</tt><DD><P CLASS=para>Computes an arc cosine (inverse cosine).Return value is between 0 and pi radians.<P CLASS=para><DIV CLASS=screen><P><PRE>Math.acos(<I CLASS=emphasis>x</I>)	// x is a numeric value or expressionbetween -1.0 and 1.0 radians</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>asin</tt><DD><P CLASS=para>Computes an arc sine (inverse sine). The return value is between -pi/2 and pi/2 radians.<P CLASS=para><DIV CLASS=screen><P><PRE>Math.asin(<I CLASS=emphasis>x</I>)	// x is a numeric value or expressionbetween -1.0 and 1.0 radians</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>atan</tt><DD><P CLASS=para>Computes an arc tangent (inverse tangent) in radians.The return value is between -pi/2 and pi/2 radians.<P CLASS=para><DIV CLASS=screen><P><PRE>Math.atan(<I CLASS=emphasis>x</I>)	//x is any numeric value or expression</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>atan2</tt><DD><P CLASS=para>Computes the counter-clockwise angle from the positive X axis to a point(x, y). Performs half of the conversion between Cartesian coordinatesand polar coordinates; computes and returns the angle theta of an(<I CLASS=emphasis>x, y</I>) point.<P CLASS=para><DIV CLASS=screen><P><PRE>Math.atan2(<I CLASS=emphasis>x</I>, <I CLASS=emphasis>y</I>)	// x, y are the coordinates of the point</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>ceil</tt><DD><P CLASS=para>Rounds a number up to the closest integer (i.e., computes the ceilingfunction); negative numbers are rounded up to 0.<P CLASS=para><DIV CLASS=screen><P><PRE>Math.ceil(<I CLASS=emphasis>x</I>)	// x is any number or numeric expression</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>cos</tt>    <DD><P CLASS=para>Computes a cosine; the return value will be between -1.0 and 1.0 radians.<P CLASS=para><DIV CLASS=screen><P><PRE>Math.cos(<I CLASS=emphasis>x</I>)	// x is any number or numeric expression,in radians</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>exp</tt>    <DD><P CLASS=para>Computes an exponent of $e$.<P CLASS=para><DIV CLASS=screen><P><PRE>Math.exp(<I CLASS=emphasis>x</I>)	// x is a number or numeric expressionto be used as exponent</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>floor</tt><DD><P CLASS=para>Rounds a number down to the closest integer (i.e., computes the floor function); negative numbers are rounded to be more negative.<P CLASS=para><DIV CLASS=screen><P><PRE>Math.floor(<I CLASS=emphasis>x</I>)	// x is any numeric value or expression</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>log</tt>   <DD><P CLASS=para>Computes a natural logarithm.<P CLASS=para><DIV CLASS=screen><P><PRE>Math.log(<I CLASS=emphasis>x</I>)	// x is any numeric value or expression greater than 0</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>max</tt>   <DD><P CLASS=para>Returns the larger of two values.<P CLASS=para><DIV CLASS=screen><P><PRE>Math.max(<I CLASS=emphasis>a</I>, <I CLASS=emphasis>b</I>)	// a, b are any two numeric values or expressions</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>min</tt>   <DD><P CLASS=para>Returns the smaller of two values.<P CLASS=para><DIV CLASS=screen><P><PRE>Math.min(<I CLASS=emphasis>a</I>, <I CLASS=emphasis>b</I>)	// a, b are any two numeric values or expressions</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>pow</tt>   <DD><P CLASS=para>Computes $x sup y$. (Raises its first argument to the power of itssecond argument and returns the result.)<P CLASS=para><DIV CLASS=screen><P><PRE>Math.pow(<I CLASS=emphasis>x</I>, <I CLASS=emphasis>y</I>)</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>random</tt><DD><P CLASS=para>Computes a random number; available in 3.0 and later.<p><DT CLASS=varlistentry><tt CLASS=literal>round</tt><DD><P CLASS=para>Rounds to the closest integer. In Netscape 2.0, <tt CLASS=literal>Math.round()</tt>does not correctly round very large numbers.<P CLASS=para><DIV CLASS=screen><P><PRE>Math.round(<I CLASS=emphasis>x</I>)	// x is any numeric value or expression</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>sin</tt>   <DD><P CLASS=para>Computes a sine.<P CLASS=para><DIV CLASS=screen><P><PRE>Math.sin(<I CLASS=emphasis>x</I>)	// x is an angle, in radians</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>sqrt</tt><DD><P CLASS=para>Computes a squareroot.<P CLASS=para><DIV CLASS=screen><P><PRE>Math.sqrt(<I CLASS=emphasis>x</I>)	// x is any numeric value or expressiongreater than orequal to 0</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>tan</tt>   <DD><P CLASS=para>Computes a tangent.<P CLASS=para><DIV CLASS=screen><P><PRE>Math.atan(<I CLASS=emphasis>x</I>)	// x is an angle, in radians</PRE></DIV><P CLASS=para></DL></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.29">MimeType Object</A></h3><P CLASS=para>Represents a MIME datatype supported by the browser (orthrough a "helper application" or a plug-in for embedded data).Available in Netscape 3.0. See also Netscape, Plugin.<P CLASS=para><DIV CLASS=screen><P><PRE>navigator.mimeTypes[<I CLASS=emphasis>i</I>]navigator.mimeTypes["<I CLASS=emphasis>name</I>"]navigator.mimeTypes.length</PRE></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.29.1">Properties</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>description</tt><DD><P CLASS=para>Read-only English description ofthe content and encoding of the type.<p><DT CLASS=varlistentry><tt CLASS=literal>enabledPlugin</tt><DD><P CLASS=para>Reference to the Plugin object that supports this MIME type, or<tt CLASS=literal>null</tt>, if no installed and enabled plug-in supports it.If a MIME type is supported by a plug-in, it can be embedded in a Webpage with the <tt CLASS=literal>&lt;embed&gt;</tt> tag; otherwise it must be output in someother way.<p><DT CLASS=varlistentry><tt CLASS=literal>name</tt><DD><P CLASS=para>Read-only name of the MIME datatype (e.g., "text/html"). Value of this property can be used as an index into the<tt CLASS=literal>navigator.mimeTypes[]</tt> array.<p><DT CLASS=varlistentry><tt CLASS=literal>suffixes</tt><DD><P CLASS=para>Read-only comma-separated list ofthe common filename extensions associated with this MIME type (e.g.,for "text/html" the suffixes are "html, htm"). </DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.29.2">Usage</A></h4><P CLASS=para>The <tt CLASS=literal>navigator.mimeTypes[]</tt> array may be indexednumerically, or with the name of the desired MIME type(which is the value of the <tt CLASS=literal>name</tt> property). To check which MIME types are supported by the browser, youcan loop through each element in the array numerically. Or,if you just want to check whether a specific type issupported, you can write code like the following:<P CLASS=para><DIV CLASS=screen><P><PRE>var show_movie = (navigator.mimeTypes["video/mpeg"] != null);</PRE></DIV></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.30">Navigator Object</A></h3><P CLASS=para>Contains properties that describe the Web browser in use; these can be used to perform platform-specific customization. There is only a single instance of the Navigator object,which you can reference through the <tt CLASS=literal>navigator</tt>property of any Window object. Enhanced in Netscape 3.0.See also MimeType, Plugin.<P CLASS=para><DIV CLASS=screen><P><PRE>navigator</PRE></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.30.1">Properties</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>appCodeName</tt><DD><P CLASS=para>Read-only string specifying the code name of the browser.<p><DT CLASS=varlistentry><tt CLASS=literal>appName</tt><DD><P CLASS=para>Read-only string specifying the name of the browser.<p><DT CLASS=varlistentry><tt CLASS=literal>appVersion</tt><DD><P CLASS=para>Read-only string specifying version information for the browser.<p><DT CLASS=varlistentry><tt CLASS=literal>mimeTypes[]</tt><DD><P CLASS=para>An array of MimeType objects describing the MIME typesrecognized and supported by the browser. Added in Netscape 3.0.<p><DT CLASS=varlistentry><tt CLASS=literal>mimeTypes.length</tt><DD><P CLASS=para>The number of elements in the <tt CLASS=literal>mimeTypes[]</tt> array.<p><DT CLASS=varlistentry><tt CLASS=literal>plugins[]</tt><DD><P CLASS=para>An array of Plugin objects describing the installedplugins. Added in Netscape 3.0.<p><DT CLASS=varlistentry><tt CLASS=literal>plugins.length</tt><DD><P CLASS=para>The number of elements in the <tt CLASS=literal>plugins[]</tt> array.<p><DT CLASS=varlistentry><tt CLASS=literal>userAgent</tt><DD><P CLASS=para>Read-only string passed by the browser as the user-agent header inHTTP requests. In Netscape 2.0 and 3.0, this property is the valueof <tt CLASS=literal>navigator.appCodeName</tt> followed by a slash and the value of<tt CLASS=literal>navigator.appVersion</tt> (e.g., Mozilla/2.01 (Win16; I). In Microsoft Internet Explorer 3.0b1running on Windows 95, this property has the value"Mozilla/2.0 (compatible; MSIE 3.0A; Windows 95)".</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.30.2">Methods</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>javaEnabled()</tt><DD><P CLASS=para>Tests whether Java is supported and enabled in the current browser.<p><DT CLASS=varlistentry><tt CLASS=literal>taintEnabled()</tt><DD><P CLASS=para>Tests whether the data-tainting security model is supported andenabled in the current browser (<tt CLASS=literal>true</tt> if enabled). Addedin Netscape 3.0.</DL></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.31">Number Object</A></h3><P CLASS=para>Numbers are a basic, primitive data type in JavaScript. InNetscape 3.0, JavaScript also supports the Number object,an object type that represents a primitive numeric value.JavaScript automatically converts between the primitive andobject forms as necessary. In JavaScript 3.0, you canexplicitly create a Number object with the Number(&nbsp;)constructor, although there is rarely any need to do so.Available in Netscape 3.0. See also Math, Number(&nbsp;).<P CLASS=para><DIV CLASS=screen><P><PRE>Number.<I CLASS=emphasis>constant</I></PRE></DIV><P CLASS=para>The <tt CLASS=literal>Number()</tt> constructor:<P CLASS=para><DIV CLASS=screen><P><PRE>new Number(<I CLASS=emphasis>value</I></PRE></DIV><P CLASS=para>is actually more commonlyused as a placeholder for five useful numeric constants.Note that these values are propertiesof the <tt CLASS=literal>Number()</tt> constructor function itself, not ofindividual number objects. For example, you use the<tt CLASS=literal>MAX_value</tt> property as follows:<P CLASS=para><DIV CLASS=screen><P><PRE>biggest = Number.MAX_value</PRE></DIV><P CLASS=para><I CLASS=emphasis>not</I> like this:<P CLASS=para><DIV CLASS=screen><P><PRE>n = new Number(2);biggest = n.MAX_value</PRE></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.31.1">Constants</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>MAX_value</tt><DD><P CLASS=para>The largest representable number.<p><DT CLASS=varlistentry><tt CLASS=literal>MIN_value</tt><DD><P CLASS=para>The smallest (i.e., closest to zero, not most negative) number representablein JavaScript.<p><DT CLASS=varlistentry><tt CLASS=literal>NaN</tt>   <DD><P CLASS=para>Special Not-a-Number value.JavaScript prints the <tt CLASS=literal>Number.NaN</tt> value as <tt CLASS=literal>NaN</tt>. Note thatthe <tt CLASS=literal>NaN</tt> value always compares unequal to any other number,including itself. Thus, you cannot check for the not-a-number valueby comparing to <tt CLASS=literal>Number.NaN</tt>. Use the <tt CLASS=literal>isNaN()</tt> functioninstead.<p><DT CLASS=varlistentry><tt CLASS=literal>NEGATIVE_INFINITY</tt><DD><P CLASS=para>Special negative infinite value; returned on overflow.JavaScript displays the <tt CLASS=literal>NEGATIVE_INFINITY</tt> value as<tt CLASS=literal>-Inf</tt>. This value behaves mathematically like an infinity.<p><DT CLASS=varlistentry><tt CLASS=literal>POSITIVE_INFINITY</tt><DD><P CLASS=para>Special infinite value; returned on overflow.JavaScript displays the <tt CLASS=literal>POSITIVE_INFINITY</tt> value as<tt CLASS=literal>Inf</tt>. This value behaves mathematically like an infinity.</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.31.2">Methods</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>toString()</tt><DD><P CLASS=para>Converts a number to a string, using a specified radix (base). <P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>number</I>.toString(<I CLASS=emphasis>radix</I>)	// radix is an integer between 2 and 16</PRE></DIV><P CLASS=para>By contrast, the <tt CLASS=literal>toString()</tt> method of the Number object is amethod of each Number object, not of the <tt CLASS=literal>Number()</tt> constructorfunction. You can use the <tt CLASS=literal>toString</tt> method with a variablethat holds a number, even though that value is not actually an object:<P CLASS=para><DIV CLASS=screen><P><PRE>value = 1234;binary_value = n.toString(2);</PRE></DIV><P CLASS=para>JavaScript implicitly invokes the <tt CLASS=literal>Number()</tt> constructor toconvert the number to a temporary Number object for which the<tt CLASS=literal>toString()</tt> method can be invoked.</DL></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.32">Object Object</A></h3><P CLASS=para>A built-in datatype of the JavaScriptlanguage; serves as the "superclass" for all otherJavaScript objects, and therefore methods of the Objectobject are also methods of all other object types.The behavior of the Object object is also shared byall other object types.When an Object object is newly created, it has no propertiesdefined; you can add a property definition to an object simply byassigning a value to the property. Objects can alsobe used as associative arrays.<P CLASS=para>A number of the Object methods can be defined for any object, andwill be invoked by the JavaScript system at appropriatetimes, to perform some sort of operation on the object (e.g.,<tt CLASS=literal>toString</tt>). JavaScript allows object syntax to be used to refer toproperties and methods of primitive datatypes, such asJavaScript strings. JavaScript creates a temporaryobject "wrapper" for the primitive valueso that the method can be invoked or the property accessed. <P CLASS=para>Enhanced in Netscape 3.0.See also Array, Boolean, Function, Number, String, Window. <P CLASS=para><DIV CLASS=screen><P><PRE>new Object();new Object(<I CLASS=emphasis>value</I>);	// Netscape 3.0 and later</PRE></DIV><P CLASS=para>In Netscape 3.0 and later, the optional <I CLASS=emphasis>value</I> argument mayspecify a value of any primitive JavaScript type: a number,a boolean, a string, or a function. If no <I CLASS=emphasis>value</I> argument is passed, this constructorreturns a newly created object, which has no propertiesdefined. If a <I CLASS=emphasis>value</I> argument is specified, then theconstructor creates and returns a Number, Boolean, String,or Function object wrapper around the primitive value.<DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.32.1">Methods</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>assign()</tt><DD><P CLASS=para>If defined, used to implement theJavaScript assignment operator (<tt CLASS=literal>=</tt>).<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>object</I>.assign(<I CLASS=emphasis>value</I>)	// value is the value to be assigned</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>eval()</tt><DD><P CLASS=para>Evaluates a string of JavaScript code in the context of the given object. Prior to Netscape 3.0, <tt CLASS=literal>eval()</tt> is astandalone function; in 3.0, it is a method of Object. However, in 2.0(client-side JavaScript)it behaves as if it were a method of the Window object.<P CLASS=para><DIV CLASS=screen><P><PRE>eval(<I CLASS=emphasis>code</I>)	// Netscape 3.0<I CLASS=emphasis>window</I>.eval(<I CLASS=emphasis>code</I>)	// Netscape 3.0</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>toString()</tt><DD><P CLASS=para>If defined, used to convert an object to a string.<p><DT CLASS=varlistentry><tt CLASS=literal>valueOf()</tt><DD><P CLASS=para>Returns the primitive value of the object, if any. Forobjects of type Object, this method simply returns theobject itself. For other object types, such as Number andBoolean, this method returns the primitive value associatedwith the object. This method was added in Netscape 3.0.</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.32.2">Example</A></h4><P CLASS=para>Defining the <tt CLASS=literal>toString()</tt>, method, and also theless frequently used <tt CLASS=literal>assign()</tt> and <tt CLASS=literal>valueOf()</tt>methods of an object, is most efficiently done in aconstructor method for your object type, or with theprototype object of your object.<P CLASS=para><DIV CLASS=screen><P><PRE>// define a constructor for the Complex object typefunction Complex(x,y) { this.x = x; this.y = y; }// give it a toString() methodComplex.prototype.toString = 	new Function("return '{' + this.x + ',' + this.y + '}';");// Create an object of this new Complex typec = new Complex(2, 2);// Convert the object to a string, implicitly invoking the// toString() method, and display the string.alert("c = " + c);</PRE></DIV></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.33">Option Object</A></h3><P CLASS=para>Describes a single option displayed within a Select object. Note that although the text displayed by this option isspecified outside of the <tt CLASS=literal>&lt;option&gt;</tt> tag, that textmust be plain, unformatted text, without any HTML tags.This is so that the text can be properly displayed in listboxes and drop-down menus that do not support HTML formatting. Enhanced in Netscape 3.0.See also Select.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>select</I>.options[<I CLASS=emphasis>i</I>]</PRE></DIV><P CLASS=para>You can dynamically create new Option objects for display in a Selectobject with the <tt CLASS=literal>Option()</tt> constructor. Once a new Optionobject is created, it can be appended to the list of options in aSelect object by assigning it to <tt CLASS=literal>options[options.length]</tt>.See Select.options[&nbsp;].<DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.33.1">Properties</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>defaultSelected</tt><DD><P CLASS=para>Read-only boolean that specifies whether this option isselected by default. Set by the <tt CLASS=literal>selected</tt> attribute.<p><DT CLASS=varlistentry><tt CLASS=literal>index</tt><DD><P CLASS=para>Read-only integer that specifies the index of this optionwithin the array of options.The first Option object in the array is at index 0 and has its <tt CLASS=literal>index</tt>property set to 0. The second Option has an index of 1, and so on.<p><DT CLASS=varlistentry><tt CLASS=literal>selected</tt><DD><P CLASS=para>Read/write boolean that specifies whether this option iscurrently selected. Its initial value is specified by the<tt CLASS=literal>selected</tt> attribute.Can be used to test whether a given option is selected; or to select(by setting it to <tt CLASS=literal>true</tt>) or deselect (by setting it to<tt CLASS=literal>false</tt>) a given option. The <tt CLASS=literal>Select.onchange()</tt> eventhandler is not invoked.<p><DT CLASS=varlistentry><tt CLASS=literal>text</tt><DD><P CLASS=para>The text that describes the option. It is the plain text(not formatted HTML text) that follows the <tt CLASS=literal>&lt;option&gt;</tt>tag. In 2.0, this property is read-only. In 3.0 it isread/write.<p><DT CLASS=varlistentry><tt CLASS=literal>value</tt><DD><P CLASS=para>Read/write string that specifies the value to be passed tothe server if this option is selected when the form issubmitted. The initial value is specified by the<tt CLASS=literal>value</tt> attribute.</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.33.2">HTML syntax</A></h4><P CLASS=para>An Option object is created by an <tt CLASS=literal>&lt;option&gt;</tt> tagwithin a <tt CLASS=literal>&lt;select&gt;</tt> which is itself within a<tt CLASS=literal>&lt;form&gt;</tt>. Multiple <tt CLASS=literal>&lt;option&gt;</tt> tags typicallyappear within the <tt CLASS=literal>&lt;select&gt;</tt>.<P CLASS=para><DIV CLASS=screen><P><PRE>&lt;form ...&gt;  &lt;select  ...&gt;    &lt;option         [ value="<I CLASS=emphasis>value</I>" ]	<I CLASS=emphasis>the value returned when the form is submitted</I>        [ selected ] &gt;	<I CLASS=emphasis>specifies whether this option is initially selected</I>    <I CLASS=emphasis>plain_text_label</I>	<I CLASS=emphasis>the text to display for this option</I>        ...  &lt;/select&gt;        ...&lt;/form&gt;</PRE></DIV></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.34">Packages Object</A></h3><P CLASS=para>An object that containsreferences to other JavaPackage objects and to JavaClass objects. Each JavaPackage object represents a node in the treeof package names. The <tt CLASS=literal>Packages</tt> property refers to aJavaPackage object which is the root of this package namehierarchy.<P CLASS=para>The Packages object is a "global" variable inJavaScript; a read-only reference to a JavaPackageobject, it is defined as a property of all Window objects.Thus, you can always refer to it simply as<tt CLASS=literal>Packages</tt>, rather than explicitly accessing itthrough a particular Window object.<P CLASS=para>Note that the Window object also contains "global" properties named<tt CLASS=literal>java</tt>, <tt CLASS=literal>netscape</tt>, and <tt CLASS=literal>sun</tt>, all ofwhich are synonyms for the properties of the <tt CLASS=literal>Packages</tt>object. So instead of writing<tt CLASS=literal>Packages.java.lang.Math</tt>, for example, you can justwrite <tt CLASS=literal>java.lang.Math</tt>.<P CLASS=para>Available in Netscape 3.0. See also JavaClass, JavaObject, JavaPackage.<DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.34.1">Properties</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>java</tt><DD><P CLASS=para>Reference to a JavaPackage object that represents the top nodeof the <tt CLASS=literal>java.*</tt> package hierarchy.<p><DT CLASS=varlistentry><tt CLASS=literal>netscape</tt><DD><P CLASS=para>Reference to a JavaPackage object that represents the top nodeof the <tt CLASS=literal>netscape.*</tt> package hierarchy.<p><DT CLASS=varlistentry><tt CLASS=literal>sun</tt><DD><P CLASS=para>Reference to a JavaPackage object that represents the top nodeof the <tt CLASS=literal>sun.*</tt> package hierarchy.</DL></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.35">parseFloat( ) Function</A></h3><P CLASS=para>Parses and returns the first numberthat occurs in <I CLASS=emphasis>s</I> (i.e., converts a string to a number). Parsing stops, and the value is returned, when <tt CLASS=literal>parseFloat()</tt> encounters a characterin <I CLASS=emphasis>s</I> that is not a valid part of the number (i.e., asign, a digit, decimal point, exponent, etc.). If <I CLASS=emphasis>s</I>does not begin with a number that <tt CLASS=literal>parseInt()</tt> canparse, then the function returns <tt CLASS=literal>NaN</tt>, a reservedvalue that represents "not-a-number."  <P CLASS=para><tt CLASS=literal>parseFloat()</tt> is a built-in JavaScript function; not a method of any object. Buggy in Netscape 2.0.See also isNaN(&nbsp;), parseInt(&nbsp;).<P CLASS=para><DIV CLASS=screen><P><PRE>parseFloat(<I CLASS=emphasis>s</I>)	// s is the string to be parsed and coverted to a number</PRE></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.36">parseInt( ) Function</A></h3><P CLASS=para>Parses and returns the first number that occurs in the string <I CLASS=emphasis>s</I> (i.e., it converts a string to an integer). Parsing stops, and the value is returned,when <tt CLASS=literal>parseInt()</tt> encounters a character in <I CLASS=emphasis>s</I>that is not a valid numeral for the specified <I CLASS=emphasis>radix</I>.If <I CLASS=emphasis>s</I> does not begin with a number that<tt CLASS=literal>parseInt()</tt> can parse, then the function returns<tt CLASS=literal>NaN</tt>, a reserved value that represents "not-a-number."  <P CLASS=para>Specifying a <I CLASS=emphasis>radix</I> of 10 makes the <tt CLASS=literal>parseInt()</tt> parse a decimalnumber. The value 8 specifies that an octal number (usingdigits 0 through 7) is to be parsed. The value 16 specifiesa hexadecimal value, using digits 0 through 9 and letters Athrough F. <I CLASS=emphasis>radix</I> can be any value between 2 and 36.<P CLASS=para>If <I CLASS=emphasis>radix</I> is 0, or if it is not specified,<tt CLASS=literal>parseInt()</tt> tries to determine the radix of thenumber from <I CLASS=emphasis>s</I>. If <I CLASS=emphasis>s</I> begins with <tt CLASS=literal>0x</tt>,then <tt CLASS=literal>parseInt()</tt> parses the remainder of <I CLASS=emphasis>s</I> asa hexadecimal number. If <I CLASS=emphasis>s</I> begins with a <tt CLASS=literal>0</tt>,then <tt CLASS=literal>parseInt()</tt> parses the number in octal.Otherwise, if <I CLASS=emphasis>s</I> begins with a digit <tt CLASS=literal>1</tt>through <tt CLASS=literal>9</tt>, then <tt CLASS=literal>parseInt()</tt> parses it as a decimal number.<P CLASS=para><tt CLASS=literal>parseInt</tt> is a built-in JavaScript function, not a method of any object.Buggy in Netscape 2.0. See also isNaN(&nbsp;), parseFloat(&nbsp;).<P CLASS=para><DIV CLASS=screen><P><PRE>parseInt(<I CLASS=emphasis>s</I>)parseInt(<I CLASS=emphasis>s</I>, <I CLASS=emphasis>radix</I>)	 //s is the string to be parsed	//radix is the integer base of the number to be parsed</PRE></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.37">Password Object</A></h3><P CLASS=para>A text input field intended for inputof sensitive data, such as passwords. As the user typescharacters, only asterisks appear. The <tt CLASS=literal>value</tt>property is a read/write string that initially contains thevalue specified by the <tt CLASS=literal>value</tt> attribute; it specifies the datato be transmitted if the user does not type anything. For security reasons,this default value is the only thing that JavaScript has access to.The user's input is transmitted to the server when the form issubmitted, but that input does not appear in thisproperty, and setting this property has no effect on the value transmitted. Enhanced in Netscape 3.0. See also Element, Form, Text.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>form</I>.<I CLASS=emphasis>name</I><I CLASS=emphasis>form</I>.elements[<I CLASS=emphasis>i</I>]<I CLASS=emphasis>form</I>.elements['<I CLASS=emphasis>name</I>']</PRE></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.37.1">Properties</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>form</tt><DD><P CLASS=para>Read-only reference to the Form object that contains thePassword object. <p><DT CLASS=varlistentry><tt CLASS=literal>name</tt><DD><P CLASS=para>Read-only string, set by the HTML <tt CLASS=literal>name</tt> attribute,that specifies the name of the Password object. This isalso the <I CLASS=emphasis>name</I> that can be used to reference thePassword object as a property of its form.<p><DT CLASS=varlistentry><tt CLASS=literal>type</tt><DD><P CLASS=para>Read-only string that specifies the type of this formelement. For Password objects, it has the value "password."Available in Netscape 3.0 and later.<p><DT CLASS=varlistentry><tt CLASS=literal>value</tt><DD><P CLASS=para>Read/write string, initially set by the HTML <tt CLASS=literal>value</tt>attribute. For security, the user's input is not availablethrough this property, and setting this property does notaffect the data transmitted with the form.</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.37.2">Methods</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>blur()</tt><DD><P CLASS=para>Removes the keyboard focus from the Password object.<p><DT CLASS=varlistentry><tt CLASS=literal>focus()</tt><DD><P CLASS=para>Sets the keyboard focus to the Password object. When focusis set, all keystrokes are automatically entered into thisobject.</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.37.3">HTML syntax</A></h4><P CLASS=para>A Password object is created with a standard HTML<tt CLASS=literal>&lt;input&gt;</tt> tag:<P CLASS=para><DIV CLASS=screen><P><PRE>&lt;form&gt;    ...  &lt;input    type="password"	<I CLASS=emphasis>specifies that this is a Password object</I>    [ name="<I CLASS=emphasis>name</I>" ]	<I CLASS=emphasis>a name that can later be used to refer to this object</I>		<I CLASS=emphasis>specifies the name property</I>    [ value="<I CLASS=emphasis>default</I>" ]	<I CLASS=emphasis>the default value transmitted when the form is submitted</I>    [ size=<I CLASS=emphasis>integer</I> ]	<I CLASS=emphasis>how many characters wide the object is</I>  &gt;    ...&lt;/form&gt;</PRE></DIV></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.38">Plugin Object</A></h3><P CLASS=para>Represents a plug-in application that has been installed in the browser. Available in Netscape 3.0. See also Netscape, MimeType.<P CLASS=para><DIV CLASS=screen><P><PRE>navigator.plugins[<I CLASS=emphasis>i</I>]navigator.plugins['<I CLASS=emphasis>name</I>']navigator.plugins.length</PRE></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.38.1">Properties</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>description</tt><DD><P CLASS=para>Read-only string that contains a human-readabledescription of the plug-in, specified by the plug-in itself.This property may specify a full product name, informationabout the vendor and version, and so on.<p><DT CLASS=varlistentry><tt CLASS=literal>filename</tt><DD><P CLASS=para>Read-only string that specifiesthe name of the disk file that contains the plug-in code.<p><DT CLASS=varlistentry><tt CLASS=literal>mimeTypes[]</tt><DD><P CLASS=para>Read-only array of MimeType objects, one for each MIMEtype supported by the plug-in.<p><DT CLASS=varlistentry><tt CLASS=literal>mimeTypes.length</tt><DD><P CLASS=para>The number of elements in the <tt CLASS=literal>mimeTypes[]</tt> array.<p><DT CLASS=varlistentry><tt CLASS=literal>name</tt><DD><P CLASS=para>Read-only string that specifies the name of the plug-in.This is generally a much shorter string than<tt CLASS=literal>description</tt>. The value of this property may be usedas an index into the <tt CLASS=literal>navigator.plugins[]</tt> array.</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.38.2">Usage</A></h4><P CLASS=para>The <tt CLASS=literal>navigator.plugins[]</tt> array may be indexednumerically when you want to loop through the complete listof installed plug-ins, looking for one that meets your needs.The <tt CLASS=literal>navigator.plugins[]</tt> array can also be indexed byplug-in name, however. That is, if you want to checkwhether a specific plug-in is installed in the user'sbrowser, you might use code like this:<P CLASS=para><DIV CLASS=screen><P><PRE>document.write( navigator.plugins("Shockwave") ?                "&lt;EMBED src="movie.dir' height=100 WIDTH=100&gt;" :               "You don't have the Shockwave plugin!" );</PRE></DIV><P CLASS=para>The name used as an array index with this technique is thesame name that appears as the value of the <tt CLASS=literal>name</tt> property.</DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.39">Radio Object</A></h3><P CLASS=para>Represents a single graphical radio button in an HTML form. Note that the text that appears next to a Radio button isnot part of the Radio object itself, and must be specifiedexternally to the <tt CLASS=literal>&lt;input&gt;</tt> tag.The Radio button object is always used in groups ofmutually-exclusive options that have the same name. Toreferences on Radio objects within a group, use the syntaxbelow.<P CLASS=para>Note that only one Radio object in a group may contain the <tt CLASS=literal>checked</tt> attribute, which sets the initial values of the <tt CLASS=literal>checked</tt> and <tt CLASS=literal>defaultChecked</tt> properties(<tt CLASS=literal>true</tt> for that object and <tt CLASS=literal>false</tt> for all otherRadio buttons in the group). If none of the objects have the<tt CLASS=literal>checked</tt> attribute, then the first one in the groupwill be <tt CLASS=literal>checked</tt> (and <tt CLASS=literal>defaultChecked</tt>) by default.<P CLASS=para>In Netscape 2.0, there is a bug in howRadio objects in a group are assigned to an array. The workaround is to always assign an event-hander, if onlya dummy one, to all of your Radio objects that will bemanipulated with JavaScript. Enhanced in Netscape 3.0. See also Checkbox, Element, Form.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>form</I>.<I CLASS=emphasis>radio_name</I>[<I CLASS=emphasis>j</I>]<I CLASS=emphasis>form</I>.<I CLASS=emphasis>radio_name</I>.length<I CLASS=emphasis>form</I>.elements[<I CLASS=emphasis>i</I>][<I CLASS=emphasis>j</I>]<I CLASS=emphasis>form</I>.elements[<I CLASS=emphasis>i</I>].length<I CLASS=emphasis>form</I>.elements['<I CLASS=emphasis>radio_name</I>'][<I CLASS=emphasis>j</I>]<I CLASS=emphasis>form</I>.elements['<I CLASS=emphasis>radio_name</I>'].length</PRE></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.39.1">Properties</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>checked</tt><DD><P CLASS=para>Read/write boolean value that specifies whether the buttonis checked or not; can be examined to determine the button'sstate, or be set to select or deselect the button. Setting <tt CLASS=literal>checked</tt> changes the appearance of the button, but does not invoke <tt CLASS=literal>onClick</tt>.  <p><DT CLASS=varlistentry><tt CLASS=literal>defaultChecked</tt><DD><P CLASS=para>Read-only Boolean that specifies the initial state of theradio button. <p><DT CLASS=varlistentry><tt CLASS=literal>form</tt><DD><P CLASS=para>Read-only reference to the Form object that contains the Radio object.<p><DT CLASS=varlistentry><tt CLASS=literal>name</tt><DD><P CLASS=para>Read-only string, set by the HTML <tt CLASS=literal>name</tt> attribute,that specifies the name of the Radio button.<p><DT CLASS=varlistentry><tt CLASS=literal>type</tt><DD><P CLASS=para>Read-only string that specifies the type of this formelement. For Radio objects, it has the value "radio".Available in Netscape 3.0 and later.<p><DT CLASS=varlistentry><tt CLASS=literal>value</tt><DD><P CLASS=para>Read/write string, initially set by the HTML <tt CLASS=literal>value</tt>attribute, which specifies the value passed to the serverif the Radio button is selected when the form is submitted.Each Radio object in a group should specify a distinct <tt CLASS=literal>value</tt>. </DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.39.2">Event handlers</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>onClick</tt><DD><P CLASS=para>Invoked when the Radio button is clicked; allows you to specifyJavaScript code to be executed when the button is checkedor "un-checked."<P CLASS=para><DIV CLASS=screen><P><PRE>&lt;input type="radio"	<I CLASS=emphasis>a definition of the handler</I>       onClick="<I CLASS=emphasis>handler-statements</I>"&gt;<I CLASS=emphasis>radio</I>.onclick	<I CLASS=emphasis>a reference to the handler</I><I CLASS=emphasis>radio</I>.onclick();	<I CLASS=emphasis>an explicit invocation of the handler</I></PRE></DIV></DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.39.3">HTML syntax</A></h4><P CLASS=para>A Radio object is created with a standard HTML<tt CLASS=literal>&lt;input&gt;</tt> tag, with the addition of the new<tt CLASS=literal>onClick</tt> attribute. Radio objects are created ingroups by specifying multiple <tt CLASS=literal>&lt;input&gt;</tt> tags that have the same <tt CLASS=literal>name</tt> attribute (mandatory if the radiois part of a form that will submit data to a CGI script).Specifying a <tt CLASS=literal>name</tt>attribute sets the <I CLASS=emphasis>name</I> property, and also allowsyou to refer to the button by name (instead of as a memberof the form <tt CLASS=literal>elements</tt> array).<P CLASS=para><DIV CLASS=screen><P><PRE>&lt;form&gt;    ...  &lt;input    type="radio"	<I CLASS=emphasis>specifies that this is a radio button</I>    [ name="<I CLASS=emphasis>name</I>" ]	<I CLASS=emphasis>a name that can later be used to refer to this button</I>	<I CLASS=emphasis>or to the group of buttons with this name;</I>	<I CLASS=emphasis>specifies the <tt CLASS=literal>name</tt> property</I>    [ value="<I CLASS=emphasis>value</I>" ]	<I CLASS=emphasis>the value returned when this button is selected;</I>	<I CLASS=emphasis>specifies the <tt CLASS=literal>value</tt> property</I>    [ checked ]	<I CLASS=emphasis>specifies that the button is initially checked;</I>	<I CLASS=emphasis>specifies the</I> <tt CLASS=literal>defaultChecked</tt> <I CLASS=emphasis>property</I>    [ onClick="<I CLASS=emphasis>handler</I>" ]	<I CLASS=emphasis>JavaScript statements to be executed 	when the button is clicked</I>  &gt;<I CLASS=emphasis>label</I>	<I CLASS=emphasis>the HTML text that should appear next to the button</I>    ...&lt;/form&gt;</PRE></DIV></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.40">Reset Object</A></h3><P CLASS=para>The Reset object has the same properties and methods as theButton object, but is used only to reset a form's values (to theirdefaults). For most elements this means tothe value specified by the HTML <tt CLASS=literal>value</tt> attribute.If no initial value was specified, then a click on the Resetbutton will "clear" any user input from those objects.If no <tt CLASS=literal>value</tt> attribute is specified for a Resetobject, it will be labeled "Reset."  Enhanced in Netscape 3.0. See also Button, Element, Form.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>form</I>.<I CLASS=emphasis>name</I><I CLASS=emphasis>form</I>.elements[<I CLASS=emphasis>i</I>]<I CLASS=emphasis>form</I>.elements['<I CLASS=emphasis>name</I>']</PRE></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.40.1">Properties</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>form</tt><DD><P CLASS=para>Read-only reference to the Form object that contains theReset object.<p><DT CLASS=varlistentry><tt CLASS=literal>name</tt><DD><P CLASS=para>Read-only string, set by the HTML <tt CLASS=literal>name</tt> attribute,that specifies the name of the Reset object. This isalso the <I CLASS=emphasis>name</I> that can be used to reference theReset object as a property of its form.<p><DT CLASS=varlistentry><tt CLASS=literal>type</tt><DD><P CLASS=para>Read-only string that specifies the type of this formelement. For Reset objects, it has the value "reset."Available in Netscape 3.0 and later.<p><DT CLASS=varlistentry><tt CLASS=literal>value</tt><DD><P CLASS=para>Read-only string, set by the HTML <tt CLASS=literal>value</tt> attribute,that specifies the text to appear in the button. If no<tt CLASS=literal>value</tt> is specified, then (in Netscape) the buttonwill be labelled "Reset" by default.</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.40.2">Event handlers</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>onclick()</tt><DD><P CLASS=para>Invoked when the Reset button is clicked.Defined by the <tt CLASS=literal>onClick</tt> attribute of the HTML <tt CLASS=literal>&lt;input&gt;</tt>tag that defines the Reset button. The value of this attribute maybe any number of JavaScript statements, separated by semicolons; thesestatements will be executed when the user clicks on the Reset button.In Netscape 2.0, there is no way for the <tt CLASS=literal>onclick()</tt> event handlerto prevent the fields from being reset. However, in 3.0, theevent handler may return <tt CLASS=literal>false</tt> to prevent the Reset objectfrom resetting the form.<P CLASS=para><DIV CLASS=screen><P><PRE>&lt;input type="reset"	<I CLASS=emphasis>a definition of the handler</I>       onClick="<I CLASS=emphasis>handler-statements</I>"&gt;<I CLASS=emphasis>reset</I>.onclick	<I CLASS=emphasis>a reference to the handler</I>       <I CLASS=emphasis>reset</I>.onclick();	<I CLASS=emphasis>an explicit invocation of the handler</I></PRE></DIV></DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.40.3">HTML syntax</A></h4><P CLASS=para>A Reset object is created with a standard HTML<tt CLASS=literal>&lt;input&gt;</tt> tag, with the addition of the <tt CLASS=literal>onClick</tt>attribute:<P CLASS=para><DIV CLASS=screen><P><PRE>&lt;form&gt;    ...  &lt;input    type="reset"	<I CLASS=emphasis>specifies that this is a Reset button</I>    [ value="<I CLASS=emphasis>label</I>" ]	<I CLASS=emphasis>the text that is to appear withinthe button</I>	<I CLASS=emphasis>specifies the value property.</I>    [ name="<I CLASS=emphasis>name</I>" ]	<I CLASS=emphasis>a name that can later be used to refer to the button</I>	<I CLASS=emphasis>specifies the name property</I>    [ onClick="<I CLASS=emphasis>handler</I>" ]	<I CLASS=emphasis>JavaScript statements to be executed	when the button is clicked</I>  &gt;    ...&lt;/form&gt;</PRE></DIV></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.41">Select Object</A></h3><P CLASS=para>Represents a graphical list of choicesfrom which the user may select. If the <tt CLASS=literal>multiple</tt>attribute is present in the <tt CLASS=literal>HTML</tt> definition of theobject, then the user may select any number of options fromthe list. If that attribute is not present, then the usermay select only one option, and options have a "radiobutton" (i.e., mutually exclusive toggle) behavior.<P CLASS=para>If the <tt CLASS=literal>size</tt> attribute has a valuegreater than 1, or if the <tt CLASS=literal>multiple</tt> attribute ispresent, Select objects are displayed in a list box that is<tt CLASS=literal>size</tt> lines high in the browser window. If<tt CLASS=literal>size</tt> is smaller than the number of options, then thelist box will include a scrollbar so that all the optionsare accessible. On the other hand, if <tt CLASS=literal>size</tt> isspecified as 1, and <tt CLASS=literal>multiple</tt> is not specified, thenthe currently selected option is displayed on a single lineand the list of other options is made available through a drop-down menu. <P CLASS=para>Enhanced in Netscape 3.0. See also Element, Form, Option.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>form</I>.<I CLASS=emphasis>name</I><I CLASS=emphasis>form</I>.elements[<I CLASS=emphasis>i</I>]<I CLASS=emphasis>form</I>.elements['<I CLASS=emphasis>name</I>']</PRE></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.41.1">Properties</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>form</tt><DD><P CLASS=para>Read-only reference to the Form object that contains theSelect object.<p><DT CLASS=varlistentry><tt CLASS=literal>length</tt><DD><P CLASS=para>Read-only integer that specifies the number of elements inthe <tt CLASS=literal>options[]</tt> array (i.e., the number of optionsthat appear in the Select object).<p><DT CLASS=varlistentry><tt CLASS=literal>name</tt><DD><P CLASS=para>Read-only string, set by the HTML <tt CLASS=literal>name</tt> attribute,that specifies the name of the select object. This is alsothe <I CLASS=emphasis>name</I> that can be used to reference the Selectobject as a property of its form.<p><DT CLASS=varlistentry><tt CLASS=literal>options[]</tt><DD><P CLASS=para>An array of Option objects, each of which describes one ofthe options displayed within the Select object.The <tt CLASS=literal>options.length</tt> property specifies the number of elementsin the array, as does the <I CLASS=emphasis>select</I><tt CLASS=literal>.length</tt> property.See the Option object for further details.<p><DT CLASS=varlistentry><tt CLASS=literal>selectedIndex</tt><DD><P CLASS=para>Read-only (read/write in 3.0) integer that specifies theindex of the selected option within the Select object. Ifthe Select object has its <tt CLASS=literal>multiple</tt> attribute set andallows multiple selections, then this property onlyspecifies the index of the first selected item or -1 if noneare selected.<p><DT CLASS=varlistentry><tt CLASS=literal>type</tt><DD><P CLASS=para>Read-only string that specifies the type of this formelement. For Select objects, it has the value "select-one"or "select-multiple."  Available in Netscape 3.0 and later.</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.41.2">Event handlers</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>onchange()</tt><DD><P CLASS=para>Invoked when the user selects or deselects an item.Defined by the <tt CLASS=literal>onChange</tt> attribute of the HTML <tt CLASS=literal>&lt;select&gt;</tt>tag that defines the Select object. The value of this attribute maybe any number of JavaScript statements, separated by semicolons; thesestatements will be executed whenever the user selects or deselects an option.Buggy to the point of uselessness in Netscape 2.0.<P CLASS=para><DIV CLASS=screen><P><PRE>&lt;select onChange="<I CLASS=emphasis>handler-statements</I>"&gt;	 <I CLASS=emphasis>a definition of the handler</I><I CLASS=emphasis>select</I>.onchange			<I CLASS=emphasis>a reference to the handler</I>       <I CLASS=emphasis>reset</I>.onchange();		<I CLASS=emphasis>an explicit invocation of the handler</I></PRE></DIV><P CLASS=para></DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.41.3">HTML syntax</A></h4><P CLASS=para>A Select object is created with a standard HTML<tt CLASS=literal>&lt;select&gt;</tt> tag, with the addition of the new<tt CLASS=literal>onChange</tt>, <tt CLASS=literal>onBlur</tt>, and <tt CLASS=literal>onFocus</tt>event-handler attributes. Options to appear within theSelect object are created with the <tt CLASS=literal>&lt;option&gt;</tt> tag:<P CLASS=para><DIV CLASS=screen><P><PRE>&lt;form&gt;    ...&lt;SELECT    name="<I CLASS=emphasis>name</I>	<I CLASS=emphasis>name identifying this object; specifies name property</I>    [ SIZE=<I CLASS=emphasis>integer</I> ]	<I CLASS=emphasis>number of visible options in select object</I>    [ MULTIPLE ]	<I CLASS=emphasis>multiple options may be selected, if present</I>    [ onChange="<I CLASS=emphasis>handler</I>" ]	<I CLASS=emphasis>invoked when the selection changes</I>    [ onBlur="<I CLASS=emphasis>handler</I>" ]	<I CLASS=emphasis>invoked when object loses focus</I>    [ onFocus="<I CLASS=emphasis>handler</I>" ]	<I CLASS=emphasis>invoked when object gains focus</I>&gt;&lt;option value="<I CLASS=emphasis>value1</I>" [selected]&gt; <I CLASS=emphasis>option_label1</I>&lt;option value="<I CLASS=emphasis>value2</I>" [selected]&gt; <I CLASS=emphasis>option_label2</I>    .    .  <I CLASS=emphasis>other options here</I>    .&lt;/select&gt;   ...&lt;/form&gt;</PRE></DIV></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.42">String Object</A></h3><P CLASS=para>  Exists to provide methods for operating onstring values (a basic JavaScript data type). The String class defines a number of methods, most of whichsimply make a copy of the string with HTML tags added beforeand after. <P CLASS=para>The string datatype and the String object are not the same,but in Netscape 2.0 are indistinguishable. InNetscape 3.0, you can use the <tt CLASS=literal>typeof</tt> operator todistinguish them (a string has type "string" and a Stringobject has type "object"); however, you can use them interchangeablybecause JavaScript converts between these twotypes whenever necessary. When you invoke a String objectmethod on a string value, JavaScript converts that value to a temporaryString object, allowing the method to be invoked. In Netscape 3.0, you can use the String object constructormethod to create String objects that are not temporary, andthat can actually be used by your programs:  <P CLASS=para><DIV CLASS=screen><P><PRE>new String(<I CLASS=emphasis>value</I>)	// Netscape 3.0 only</PRE></DIV><P CLASS=para>Enhanced in Netscape 3.0.<DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.42.1">Properties</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>length</tt><DD><P CLASS=para>The number of characters in the string.For any string <I CLASS=emphasis>s</I>, the index of the last character is <tt CLASS=literal>s.length-1</tt>.<p><DT CLASS=varlistentry><tt CLASS=literal>prototype</tt><DD><P CLASS=para>See Function.prototype.</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.42.2">Methods</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>anchor()</tt><DD><P CLASS=para>Returns a copy of the string, enclosed within <tt CLASS=literal>&lt;a name=</tt>"<I CLASS=emphasis>name</I>"&gt; and <tt CLASS=literal>&lt;/a&gt;</tt> HTML tags. The <tt CLASS=literal>name</tt> attribute of the <tt CLASS=literal>&lt;/a&gt;</tt> tag is set to the <I CLASS=emphasis>name</I> argument. If the resulting string is appended to anHTML document (with <tt CLASS=literal>Document.write()</tt> for example), itdefines an anchor, with a name of <I CLASS=emphasis>name</I>, which can be thetarget of a hypertext link.<p><DT CLASS=varlistentry><tt CLASS=literal>big()</tt><DD><P CLASS=para>Returns a copy of the string, enclosed between <tt CLASS=literal>&lt;big&gt;</tt> and <tt CLASS=literal>&lt;/big&gt;</tt> HTML tags.<p><DT CLASS=varlistentry><tt CLASS=literal>blink()</tt><DD><P CLASS=para>Returns a copy of the string,enclosed between <tt CLASS=literal>&lt;blink&gt;</tt> and <tt CLASS=literal>&lt;/blink&gt;</tt> HTML tags.<p><DT CLASS=varlistentry><tt CLASS=literal>bold()</tt><DD><P CLASS=para>Returns a copy of the string, enclosed between <tt CLASS=literal>&lt;b&gt;</tt> and <tt CLASS=literal>&lt;/b&gt;</tt> HTML tags.<p><DT CLASS=varlistentry><tt CLASS=literal>charAt()</tt><DD><P CLASS=para>Extracts the <I CLASS=emphasis>n</I>th character from a string.The first character of the string is numbered 0. If <I CLASS=emphasis>n</I>is not between 0 and <tt CLASS=literal>string.length-1</tt>, then thismethod returns an empty string. Note that JavaScript does nothave a character datatype that is distinct from the string type,so the returned character is a string of length 1.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>string</I>.charAt(<I CLASS=emphasis>n</I>)	 //<I CLASS=emphasis>n</I> <tt CLASS=literal>is the index of the character to be returned</tt></PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>fixed()</tt><DD><P CLASS=para>Returns a copy of the string,enclosed between <tt CLASS=literal>&lt;tt&gt;</tt> and <tt CLASS=literal>&lt;/tt&gt;</tt> HTML tags.<p><DT CLASS=varlistentry><tt CLASS=literal>fontcolor()</tt><DD><P CLASS=para>Returns a copy of the string, enclosed between <tt CLASS=literal>&lt;font color="</tt><I CLASS=emphasis>color</I>"&gt; and <tt CLASS=literal>&lt;/font&gt;</tt> HTML tags.The <I CLASS=emphasis>color</I> argument is a string specifying the color name orvalue to be used as the value of the <tt CLASS=literal>color</tt> attribute inthe <tt CLASS=literal>&lt;font&gt;</tt> HTML tag. Colors are specified either asone of the standard color names recognized by JavaScript, or asred, green, and blue color values, expressed as six hexadecimaldigits (<I CLASS=emphasis>RRGGBB</I>).<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>string</I>.fontcolor(<I CLASS=emphasis>color</I>)</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>fontsize()</tt><DD><P CLASS=para>Returns a copy of the string, enclosed between <tt CLASS=literal>&lt;font size="</tt><I CLASS=emphasis>size</I>"&gt; and <tt CLASS=literal>&lt;/font&gt;</tt> HTML tags.The <I CLASS=emphasis>size</I> argument is an integer between 1 and 7or a string that begins with a + or - sign followed by a digitbetween 1 and 7. If an integer is specified, it is an absolute fontsize specification. If a string is specified, the font specificationis relative to the <tt CLASS=literal>&lt;basefont&gt;</tt> size.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>string</I>.fontsize(<I CLASS=emphasis>size</I>)</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>indexOf()</tt><DD><P CLASS=para>Searches the string for an occurrence of <I CLASS=emphasis>substring</I>.The search begins at position <I CLASS=emphasis>start</I> within <I CLASS=emphasis>string</I>,or at the beginning if no <I CLASS=emphasis>start</I> is specified. <tt CLASS=literal>start</tt>is an integer between 0 and <tt CLASS=literal>string.length-1</tt>.Returns the position of the first occurrence of <I CLASS=emphasis>substring</I>after the <I CLASS=emphasis>start</I> position, or -1 if no occurrence is found.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>string</I>.indexOf(<I CLASS=emphasis>substring</I>)	<I CLASS=emphasis>string</I>.indexOf(<I CLASS=emphasis>substring</I>, <I CLASS=emphasis>start</I>)</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>italics()</tt><DD><P CLASS=para>Returns a copy of the string, enclosed between <tt CLASS=literal>&lt;i&gt;</tt> and <tt CLASS=literal>&lt;/i&gt;</tt> HTML tags.<p><DT CLASS=varlistentry><tt CLASS=literal>lastIndexOf()</tt><DD><P CLASS=para>Searches the string backwards for an occurrence of <I CLASS=emphasis>substring</I>.The search begins at position <I CLASS=emphasis>start</I> within <I CLASS=emphasis>string</I>,or at the end, if no <I CLASS=emphasis>start</I> is specified. <tt CLASS=literal>start</tt>is an integer between 0 and <tt CLASS=literal>string.length-1</tt>.Returns the position of the first occurrence of <I CLASS=emphasis>substring</I>before the <I CLASS=emphasis>start</I> position, or -1 if no occurrence is found.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>string</I>.lastIndex(<I CLASS=emphasis>substring</I>)	<I CLASS=emphasis>string</I>.lastIndex(<I CLASS=emphasis>substring</I>, <I CLASS=emphasis>start</I>)</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>link()</tt><DD><P CLASS=para>Returns a copy of the string,enclosed between <tt CLASS=literal>&lt;a href="</tt><I CLASS=emphasis>size</I>"&gt; and <tt CLASS=literal>&lt;/a&gt;</tt> HTML tags.<I CLASS=emphasis>href</I> specifies the URL target of the hypertext link that is tobe added to the string. This string argument specifies the valueof the <tt CLASS=literal>HREF</tt> attribute of the <tt CLASS=literal>&lt;a&gt;</tt> HTML tag.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>string</I>.link(<I CLASS=emphasis>href</I>)</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>small()</tt><DD><P CLASS=para>Returns a copy of the string, enclosed between <tt CLASS=literal>&lt;small&gt;</tt> and <tt CLASS=literal>&lt;/small&gt;</tt> HTML tags.<p><DT CLASS=varlistentry><tt CLASS=literal>split()</tt><DD><P CLASS=para>Converts a string to an array of strings, using a specifieddelimiter character/string at which the string will be split.If no delimiter is specified, then the returned array has only oneelement, the string itself.Note that the String.split(&nbsp;) method is the inverse of theArray.join(&nbsp;) method.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>string</I>.split()	<I CLASS=emphasis>string</I>.split(<I CLASS=emphasis>delimiter</I>)</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>strike()</tt><DD><P CLASS=para>Returns a copy of the string, enclosed within <tt CLASS=literal>&lt;strike&gt;</tt> and <tt CLASS=literal>&lt;/strike&gt;</tt> HTML tags.<p><DT CLASS=varlistentry><tt CLASS=literal>sub()</tt><DD><P CLASS=para>Returns a copy of the string,enclosed within <tt CLASS=literal>&lt;sub&gt;</tt> and <tt CLASS=literal>&lt;/sub&gt;</tt> HTML tags.<p><DT CLASS=varlistentry><tt CLASS=literal>substring()</tt><DD><P CLASS=para>Extracts a substring of a string.<I CLASS=emphasis>from</I> is a value between 0 and <tt CLASS=literal>string.length-1</tt>.<I CLASS=emphasis>to</I> is an optional integer that is one greater than the positionwithin <I CLASS=emphasis>string</I> of the last character of the desired substring.<I CLASS=emphasis>to</I> must be between 1 and <tt CLASS=literal>string.length</tt>.The character at position <I CLASS=emphasis>from</I> is included in the substring,while the character at position <I CLASS=emphasis>to</I> is not. The returnedstring contains characters copied from positions <I CLASS=emphasis>from</I>to <I CLASS=emphasis>to</I><tt CLASS=literal>-1</tt> of <I CLASS=emphasis>string</I>.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>string</I>.substring(<I CLASS=emphasis>from</I>, <I CLASS=emphasis>to</I>)</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>sup()</tt><DD><P CLASS=para>Returns a copy of the string, enclosed within <tt CLASS=literal>&lt;sup&gt;</tt> and <tt CLASS=literal>&lt;/sup&gt;</tt> HTML tags.<p><DT CLASS=varlistentry><tt CLASS=literal>toLowerCase()</tt><DD><P CLASS=para>Returns a copy of the string, with all characters convertedto lowercase.<p><DT CLASS=varlistentry><tt CLASS=literal>toUpperCase()</tt><DD><P CLASS=para>Returns a copy of the string, with all characters convertedto uppercase.<p><DT CLASS=varlistentry><tt CLASS=literal>valueOf()</tt><DD><P CLASS=para>Returns the string value contained in the String object;Netscape 3.0 and later. See Object.valueOf(&nbsp;).</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.42.3">Usage</A></h4><P CLASS=para>A number of the String methods are used for creating HTML:<P CLASS=para><DIV CLASS=screen><P><PRE>link_text = "My Home Page".bold();document.write(link_text.link("http://www.djf.com/~david"));</PRE></DIV><P CLASS=para>The code above code embeds the following string into theHTML document that is currently being parsed:<P CLASS=para><DIV CLASS=screen><P><PRE>&lt;A HREF="http://www.djf.com/~david"&gt;&lt;B&gt;My Home Page&lt;/B&gt;&lt;/A&gt;</PRE></DIV><P CLASS=para>The following code extracts the3rd through 5th characters of a string and converts them toupper-case letters:<P CLASS=para><DIV CLASS=screen><P><PRE>s.substring(2,5).toUpperCase();</PRE></DIV><P CLASS=para></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.43">Submit Object</A></h3><P CLASS=para>When a Submit button is clicked on, it submits the data in the formthat contains the button to the server specified by theform's <tt CLASS=literal>action</tt> attribute, and loads the resultingHTML page sent back by that server.The Submit object has the same properties and methods as theButton object.If no <tt CLASS=literal>value</tt> attribute is specified for a Submitobject, it will be labelled "Submit Query."  <P CLASS=para>Form data may also be submitted by invoking the<tt CLASS=literal>Form.submit()</tt> method. The <tt CLASS=literal>Submit.onclick()</tt>event handler can define additional JavaScript statements tobe executed when a Submit button is clicked; to cancel aform submission, use <tt CLASS=literal>Form.onsubmit()</tt>.<P CLASS=para>Enhanced in Netscape 3.0.See also Button, Element, Form.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>form</I>.<I CLASS=emphasis>name</I><I CLASS=emphasis>form</I>.elements[<I CLASS=emphasis>i</I>]<I CLASS=emphasis>form</I>.elements['<I CLASS=emphasis>name</I>']</PRE></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.43.1">Properties</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>form</tt><DD><P CLASS=para>Read-only reference to the Form object that contains theSubmit object.<p><DT CLASS=varlistentry><tt CLASS=literal>name</tt><DD><P CLASS=para>Read-only string, set by the HTML <tt CLASS=literal>name</tt> attribute,that specifies the name of the Submit object. This isalso the <I CLASS=emphasis>name</I> that can be used to reference theSubmit object as a property of its form.<p><DT CLASS=varlistentry><tt CLASS=literal>type</tt><DD><P CLASS=para>Read-only string that specifies the type of this formelement. For Submit objects, it has the value "submit."Available in Netscape 3.0 and later.<p><DT CLASS=varlistentry><tt CLASS=literal>value</tt><DD><P CLASS=para>Read-only string, set by the HTML <tt CLASS=literal>value</tt> attribute,that specifies the text to appear in the button. If no<tt CLASS=literal>value</tt> is specified, then (in Netscape) the buttonwill be labelled "Submit Query" by default.</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.43.2">Event handlers</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>onclick()</tt><DD><P CLASS=para>Invoked when the Submit button is clicked.Defined by the <tt CLASS=literal>onClick</tt> attribute of the HTML <tt CLASS=literal>&lt;input&gt;</tt>tag that defines the Submit button. The value of this attribute maybe any number of JavaScript statements, separated by semicolons; thesestatements will be executed when the user clicks on the Submit button.In Netscape 2.0, there is no way for the <tt CLASS=literal>onclick()</tt> event handlerto cancel the submit action; use the <tt CLASS=literal>Form.onsubmit()</tt> eventhandler to perform input validation and to cancel form submissionif necessary.<P CLASS=para><DIV CLASS=screen><P><PRE>&lt;input type="submit"	<I CLASS=emphasis>a definition of the handler</I>       onClick="<I CLASS=emphasis>handler-statements</I>"&gt;<I CLASS=emphasis>submit</I>.onclick	<I CLASS=emphasis>a reference to the handler</I>       <I CLASS=emphasis>submit</I>.onclick();	<I CLASS=emphasis>an explicit invocation of the handler</I></PRE></DIV></DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.43.3">HTML syntax</A></h4><P CLASS=para>A Reset object is created with a standard HTML<tt CLASS=literal>&lt;input&gt;</tt> tag, with the addition of the <tt CLASS=literal>onClick</tt>attribute:<P CLASS=para><DIV CLASS=screen><P><PRE>&lt;form&gt;    ...  &lt;input    type="submit"	<I CLASS=emphasis>specifies that this is a Submit button</I>    [ value="<I CLASS=emphasis>label</I>" ]	<I CLASS=emphasis>the text that is to appear within the button;</I>	<I CLASS=emphasis>specifies the value property</I>    [ name="<I CLASS=emphasis>name</I>" ]	<I CLASS=emphasis>a name that can later be used to refer to the button;</I>	<I CLASS=emphasis>specifies the name property</I>    [ onClick="<I CLASS=emphasis>handler</I>" ]	<I CLASS=emphasis>JavaScript statements to be executed when button is clicked</I>  &gt;    ...&lt;/form&gt;</PRE></DIV></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.44">taint( ) Function</A></h3><P CLASS=para>Taints a value or window (when thedata tainting security model is in effect).<tt CLASS=literal>taint()</tt> does not taint the value it is passed;instead, it returns a tainted copy of that value, or atainted reference to that value for object types. (Notethat taint is associated with primitive values and withreferences to objects, not with the objects themselves.)<P CLASS=para>Sometimes taint is carried not by data values, but by thecontrol flow of a program. In this case, you may want toadd taint to the entire window in which JavaScript coderuns by calling <tt CLASS=literal>taint()</tt> with no arguments. Available in Netscape 3.0. See also untaint(&nbsp;).<P CLASS=para><DIV CLASS=screen><P><PRE>taint()taint(<I CLASS=emphasis>value</I>)</PRE></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.45">Text Object</A></h3><P CLASS=para>  Represents a text input field in a form.The <tt CLASS=literal>size</tt> attribute specifies the width, incharacters, of the input field as it appears on the screen,and the <tt CLASS=literal>maxlength</tt> attribute specifies the maximumnumber of characters the user will be allowed to enter. You can read the<tt CLASS=literal>value</tt> property to obtain the user's input, or you can set it todisplay arbitrary (unformatted) text in the input field.Use the Password object instead of the Text object when thevalue you are asking the user to enter is sensitive information.Use a Textarea object to allow the user to enter multiple lines of text.<P CLASS=para>When a form contains only one Text or Password object, thenthe form will automatically be submitted if the user strikesthe Return key in that Text or Password object.Enhanced in Netscape 3.0. See also Element, Form, Password, Textarea.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>form</I>.<I CLASS=emphasis>name</I><I CLASS=emphasis>form</I>.elements[<I CLASS=emphasis>i</I>]<I CLASS=emphasis>form</I>.elements['<I CLASS=emphasis>name</I>']</PRE></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.45.1">Properties</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>defaultValue</tt><DD><P CLASS=para>Read-only string that specifies the initial value toappear in the input field. Specified by the <tt CLASS=literal>value</tt>attribute of the <tt CLASS=literal>&lt;input&gt;</tt> tag.<p><DT CLASS=varlistentry><tt CLASS=literal>form</tt><DD><P CLASS=para>Read-only reference to the Form object that contains theText object.<p><DT CLASS=varlistentry><tt CLASS=literal>name</tt><DD><P CLASS=para>Read-only string, set by the HTML <tt CLASS=literal>name</tt> attribute,that specifies the name of the Text object. This isalso the <I CLASS=emphasis>name</I> that can be used to reference theText object as a property of its form.<p><DT CLASS=varlistentry><tt CLASS=literal>type</tt><DD><P CLASS=para>Read-only string that specifies the type of this formelement. For Text objects, it has the value "text."Available in Netscape 3.0 and later.<p><DT CLASS=varlistentry><tt CLASS=literal>value</tt><DD><P CLASS=para>Read/write string that specifies the value contained inthe input field (which is also the value sent to the serverwhen the form is submitted). The initial value of thisproperty is specified by the <tt CLASS=literal>value</tt> attribute of the <tt CLASS=literal>&lt;input&gt;</tt> tag.</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.45.2">Methods</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>blur()</tt><DD><P CLASS=para>Removes the keyboard focus from the text object.In Netscape 2.0, the <tt CLASS=literal>blur()</tt> method invokes the <tt CLASS=literal>onblur()</tt>event handler of the Text object. This is inconsistent with thebehavior of other event handlers, which are only invoked in responseto user actions. <p><DT CLASS=varlistentry><tt CLASS=literal>focus()</tt><DD><P CLASS=para>Sets the keyboard focus to the Text object. When focus isset, all keystrokes are automatically entered into thisobject.<p><DT CLASS=varlistentry><tt CLASS=literal>select()</tt><DD><P CLASS=para>Highlights all the text in the Text object, and enters aspecial mode so that future input replaces the highlighted text. </DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.45.3">Event handlers</A></h4><P CLASS=para>The value of the following event handlers may be any number ofJavaScript statements, separated by semicolons, which are executedwhen the handler is invoked.<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>onblur()</tt><DD><P CLASS=para>Invoked when a user action causes the Text object to lose the keyboard focus.Defined by the <tt CLASS=literal>onBlur</tt> attribute of the HTML <tt CLASS=literal>&lt;input&gt;</tt>tag that defines the Text object.<P CLASS=para><DIV CLASS=screen><P><PRE>&lt;input type="text onblur"	<I CLASS=emphasis>a definition of the handler</I>       onClick="<I CLASS=emphasis>handler-statements</I>"&gt;<I CLASS=emphasis>text</I>.onblur	<I CLASS=emphasis>a reference to the handler</I>       <I CLASS=emphasis>text</I>.onblur();	<I CLASS=emphasis>an explicit invocation of the handler</I></PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>onchange()</tt><DD><P CLASS=para>Invoked when the user changes the value in the Text objectand then "commits" those changes by moving the keyboard focus elsewhere. Defined by the <tt CLASS=literal>onChange</tt> attribute of the HTML<tt CLASS=literal>&lt;input&gt;</tt> tag that defines the Text object.This event handler is not invoked when the <tt CLASS=literal>value</tt> property of a Text objectis set by JavaScript.<P CLASS=para><DIV CLASS=screen><P><PRE>&lt;input type="text onchange"	<I CLASS=emphasis>a definition of the handler</I>       onChange="<I CLASS=emphasis>handler-statements</I>"&gt;<I CLASS=emphasis>text</I>.onchange	<I CLASS=emphasis>a reference to the handler</I>       <I CLASS=emphasis>text</I>.onchange();	<I CLASS=emphasis>an explicit invocation of the handler</I></PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>onfocus()</tt><DD><P CLASS=para>Invoked when a user action causes the Text object to gain the keyboard focus.Defined by the <tt CLASS=literal>onFocus</tt> attribute of the HTML<tt CLASS=literal>&lt;input&gt;</tt> tag that defines the Text object.Note that the <tt CLASS=literal>onfocus</tt> event handler is not invoked bythe <tt CLASS=literal>Text.focus()</tt> method.<P CLASS=para><DIV CLASS=screen><P><PRE>&lt;input type="text onfocus"	<I CLASS=emphasis>a definition of the handler</I>       onFocus="<I CLASS=emphasis>handler-statements</I>"&gt;<I CLASS=emphasis>text</I>.onfocus	<I CLASS=emphasis>a reference to the handler</I>       <I CLASS=emphasis>text</I>.onfocus();	<I CLASS=emphasis>an explicit invocation of the handler</I></PRE></DIV><P CLASS=para></DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.45.4">HTML syntax</A></h4><P CLASS=para>A Text object is created with a standard HTML<tt CLASS=literal>&lt;input&gt;</tt> tag, with the addition of optionalattributes for event handlers:<P CLASS=para><DIV CLASS=screen><P><PRE>&lt;form&gt;    ...  &lt;input    type="text"	<I CLASS=emphasis>specifies that this is a Text object</I>    [ name="<I CLASS=emphasis>name</I>" ]	<I CLASS=emphasis>a name that can later be used to refer to this object;</I>	<I CLASS=emphasis>specifies the </I><tt CLASS=literal>name</tt> <I CLASS=emphasis>property</I>    [ value="<I CLASS=emphasis>default</I>" ]	<I CLASS=emphasis>the default value transmitted when form is submitted;</I>	<I CLASS=emphasis>specifies the </I><tt CLASS=literal>defaultValue</tt> <I CLASS=emphasis>property</I>    [ size=<I CLASS=emphasis>integer</I> ]	<I CLASS=emphasis>how many characters wide the object is</I>    [ maxlength=<I CLASS=emphasis>integer</I> ]	<I CLASS=emphasis>max allowed number of input characters</I>    [ onBlur="<I CLASS=emphasis>handler</I>" ]	<I CLASS=emphasis>the </I><tt CLASS=literal>onblur(&nbsp;)</tt><I CLASS=emphasis> event handler</I>    [ onChange="<I CLASS=emphasis>handler</I>" ]	<I CLASS=emphasis>the </I><tt CLASS=literal>onchange(&nbsp;)</tt><I CLASS=emphasis> event handler</I>    [ onFocus="<I CLASS=emphasis>handler</I>" ]	<I CLASS=emphasis>the </I><tt CLASS=literal>onfocus(&nbsp;)</tt><I CLASS=emphasis> event handler</I>  &gt;    ...&lt;/form&gt;</PRE></DIV><P CLASS=para></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.46">Textarea Object</A></h3><P CLASS=para>   Represents a (mutli-line) text input field in a form.The <tt CLASS=literal>name</tt> attribute specifies a name for the object.This is mandatory if the form is to be submitted, and alsoprovides a convenient way to refer to the Textarea objectfrom JavaScript code. <P CLASS=para>Read the <tt CLASS=literal>value</tt> property to obtain the user's input, or set itto display arbitrary (unformatted) text in the Textarea.The initial value of the <tt CLASS=literal>value</tt> property (and thepermanent value of the <tt CLASS=literal>defaultValue</tt> property) is thetext that appears between the <tt CLASS=literal>&lt;textarea&gt;</tt> and<tt CLASS=literal>&lt;/textarea&gt;</tt> tags.<P CLASS=para>If you need only a single line of input text, use the Textobject. If the text to be input is sensitive information,such as a password, use the Password object.Enhanced in Netscape 3.0.See also Element, Form, Password, Text. <P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>form</I>.<I CLASS=emphasis>name</I><I CLASS=emphasis>form</I>.elements[<I CLASS=emphasis>i</I>]<I CLASS=emphasis>form</I>.elements['<I CLASS=emphasis>name</I>']</PRE></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.46.1">Properties</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>defaultValue</tt><DD><P CLASS=para>Read-only string that specifies the initial value toappear in the input field. This default value is whateverplain text appears between the <tt CLASS=literal>&lt;textarea&gt;</tt> and<tt CLASS=literal>&lt;/textarea&gt;</tt> tags.<p><DT CLASS=varlistentry><tt CLASS=literal>form</tt><DD><P CLASS=para>Read-only reference to the Form object that contains theTextarea object.<p><DT CLASS=varlistentry><tt CLASS=literal>name</tt><DD><P CLASS=para>Read-only string, set by the HTML <tt CLASS=literal>name</tt> attribute,that specifies the name of the Textarea object. This isalso the <I CLASS=emphasis>name</I> that can be used to reference theTextarea object as a property of its form.<p><DT CLASS=varlistentry><tt CLASS=literal>type</tt><DD><P CLASS=para>Read-only string that specifies the type of this formelement. For Textarea objects, it has the value "textarea."Available in Netscape 3.0 and later.<p><DT CLASS=varlistentry><tt CLASS=literal>value</tt><DD><P CLASS=para>Read/write string that specifies the value contained inthe Textarea (which is also the value sent to the serverwhen the form is submitted). The initial value of thisproperty is the same as the <tt CLASS=literal>defaultValue</tt> property.</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.46.2">Methods</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>blur()</tt><DD><P CLASS=para>Removes the keyboard focus from the text object.<p><DT CLASS=varlistentry><tt CLASS=literal>focus()</tt><DD><P CLASS=para>Sets the keyboard focus to the Textarea object. When focus isset, all keystrokes are automatically entered into this object.</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.46.3">Event handlers</A></h4><P CLASS=para>The value of the following event handlers may be any number ofJavaScript statements, separated by semicolons, which are executedwhen the handler is invoked.<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>onblur()</tt><DD><P CLASS=para><P CLASS=para>Invoked when a user action causes the Textarea object to losethe keyboard focus.Defined by the <tt CLASS=literal>onBlur</tt> attribute of the HTML <tt CLASS=literal>&lt;textarea&gt;</tt>tag that defines the Textarea object.Note that the <tt CLASS=literal>onblur()</tt> event handler is not invoked bythe <tt CLASS=literal>Textarea.blur()</tt> method.<P CLASS=para><DIV CLASS=screen><P><PRE>&lt;textarea onblur="<I CLASS=emphasis>handler-statements</I>"&gt;	 <I CLASS=emphasis>a definition of the handler</I>&lt;/textarea&gt;<I CLASS=emphasis>text</I>.onblur		<I CLASS=emphasis>a reference to the handler</I>       <I CLASS=emphasis>text</I>.onblur();		<I CLASS=emphasis>an explicit invocation of the handler</I></PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>onchange()</tt><DD><P CLASS=para>Invoked when the user changes the value in the Textarea objectand then "commits" those changes by moving the keyboard focus elsewhere. Defined by the <tt CLASS=literal>onChange</tt> attribute of the HTML<tt CLASS=literal>&lt;textarea&gt;</tt> tag that defines the Text object.This event handler is not invoked when the <tt CLASS=literal>value</tt> property of a Text objectis set by JavaScript.<P CLASS=para><DIV CLASS=screen><P><PRE>&lt;textarea onchange="<I CLASS=emphasis>handler-statements</I>"&gt;	 <I CLASS=emphasis>a definition of the handler</I>&lt;/textarea&gt;<I CLASS=emphasis>text</I>.onchange		<I CLASS=emphasis>a reference to the handler</I>       <I CLASS=emphasis>text</I>.onchange();		<I CLASS=emphasis>an explicit invocation of the handler</I></PRE></DIV><P CLASS=para>This event handleris not invoked for every keystroke in the Textarea object, butonly when the user completes an edit.<p><DT CLASS=varlistentry><tt CLASS=literal>onfocus()</tt><DD><P CLASS=para>Invoked when a user action causes the Textarea object to gainthe keyboard focus.Defined by the <tt CLASS=literal>onFocus</tt> attribute of the HTML<tt CLASS=literal>&lt;textarea&gt;</tt> tag that defines the Textarea object.Note that the <tt CLASS=literal>onfocus</tt> event handler is not invoked bythe <tt CLASS=literal>Text.focus()</tt> method.<P CLASS=para><DIV CLASS=screen><P><PRE>&lt;textarea onfocus="<I CLASS=emphasis>handler-statements</I>"&gt;	<I CLASS=emphasis>a definition of the handler</I>&lt;/textarea&gt;<I CLASS=emphasis>text</I>.onfocus	<I CLASS=emphasis>a reference to the handler</I>       <I CLASS=emphasis>text</I>.onfocus();	<I CLASS=emphasis>an explicit invocation of the handler</I></PRE></DIV><P CLASS=para></DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.46.4">HTML syntax</A></h4><P CLASS=para>A Textarea object is created with standard HTML<tt CLASS=literal>&lt;textarea&gt;</tt> and <tt CLASS=literal>&lt;/textarea&gt;</tt> tags, with theaddition of optional attributes for event-handlers.Note that the <tt CLASS=literal>wrap</tt> attribute, whichspecifies how long lines should be handled, has three legalvalues: <tt CLASS=literal>off</tt> specifies that they should be left as is; <tt CLASS=literal>virtual</tt> specifies that they should bedisplayed with line breaks but transmitted without;<tt CLASS=literal>physical</tt> specifies that they should bedisplayed and transmitted with line breaks inserted.<P CLASS=para><DIV CLASS=screen><P><PRE>&lt;form&gt;    ...  &lt;textarea    [ name="<I CLASS=emphasis>name</I>" ]	<I CLASS=emphasis>a name that can later be used to refer to this object</I>    [ rows=<I CLASS=emphasis>integer</I> ]	<I CLASS=emphasis>how many lines tall the object is</I>    [ cols=<I CLASS=emphasis>integer</I> ]	<I CLASS=emphasis>how many characters wide the object is</I>    [ wrap=off|virtual|physical ]	<I CLASS=emphasis>how word wrapping is handled</I>    [ onBlur="<I CLASS=emphasis>handler</I>" ]	<I CLASS=emphasis>the </I><tt CLASS=literal>onblur(&nbsp;)</tt><I CLASS=emphasis> event handler</I>    [ onChange="<I CLASS=emphasis>handler</I>" ]	<I CLASS=emphasis>the </I><tt CLASS=literal>onchange(&nbsp;)</tt><I CLASS=emphasis> event handler</I>    [ onFocus="<I CLASS=emphasis>handler</I>" ]	<I CLASS=emphasis>the </I><tt CLASS=literal>onfocus(&nbsp;)</tt><I CLASS=emphasis> event handler</I>  &gt;    <I CLASS=emphasis>plain_text</I>	<I CLASS=emphasis>The initial text; specifies defaultValue</I>   &lt;/textarea&gt;    ...&lt;/form&gt;</PRE></DIV><P CLASS=para></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.47">unescape( ) Function</A></h3><P CLASS=para>The <tt CLASS=literal>unescape()</tt> function is a built-in part ofJavaScript; it is not a method of any object.<tt CLASS=literal>unescape()</tt> decodes a string encoded with<tt CLASS=literal>escape()</tt> and returns the decoded copy.<P CLASS=para><DIV CLASS=screen><P><PRE>unescape(<I CLASS=emphasis>s</I>)	// s is the string to be decoded or "unescaped"</PRE></DIV><P CLASS=para>Available in Netscape 2.0. See also escape(), String.<DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.47.1">Usage</A></h4><P CLASS=para><tt CLASS=literal>unescape</tt> decodes <tt CLASS=literal>s</tt> by finding andreplacing character sequences of the form<tt CLASS=literal>%</tt><I CLASS=emphasis>xx</I>, where <I CLASS=emphasis>xx</I> is two hexadecimaldigits. Each such sequence is replaced by the singlecharacter represented by the hexadecimal digits in the Latin-1 encoding.Thus, <tt CLASS=literal>unescape()</tt> decodes the string:<P CLASS=para><DIV CLASS=screen><P><PRE>Hello%20World%21</PRE></DIV><P CLASS=para>to:<P CLASS=para><DIV CLASS=screen><P><PRE>Hello World!</PRE></DIV></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.48">untaint( ) Function</A></h3><P CLASS=para>Untaints a value or window(when the data tainting security model is in effect).<tt CLASS=literal>untaint()</tt> does not remove the taint of the value it ispassed; instead, it returns an untainted copy of that value,or an untainted reference to that value for object types.(Note that taint is associated with primitive values andwith references to objects, not with the objectsthemselves.)<P CLASS=para>JavaScript automatically associates taint with data valuesthat are potentially private, and that should not be"stolen" by scripts. If you need to allow these values tobe exported by scripts, you must use <tt CLASS=literal>untaint()</tt> tomake untainted copies.<P CLASS=para>Sometimes taint is carried not by data values, but by thecontrol flow of a program. In this case, you may need toremove taint from an entire window in which JavaScript coderuns. You can do this by calling <tt CLASS=literal>untaint()</tt> with noarguments. Note, however, that you can only do this if thewindow carries only the taint of the script that calls<tt CLASS=literal>untaint()</tt>. If the window has also been tainted byother scripts, then it cannot be untainted.Available in Netscape 3.0. See also taint(&nbsp;).<P CLASS=para><DIV CLASS=screen><P><PRE>untaint()untaint(<I CLASS=emphasis>value</I>)</PRE></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.49">Window Object</A></h3><P CLASS=para>   Represents a Web browser window or frame. Since JavaScript code is evaluated in the context of the Windowobject in which it is running, the Window object must containreferences (or references to references) to all the otherJavaScript objects of interest (i.e., it is the root of aJavaScript "object hierarchy"). Many of the properties of the Windowobject are references to other important JavaScript objects.Most of these properties refer to an object particular to the window.The <tt CLASS=literal>location</tt> property of a Window, for example, refers tothe Location object of the window.Still other Window properties (e.g., <tt CLASS=literal>navigator</tt>) referto "global" objects, while a couple refer only to the window itself.<P CLASS=para>In client-sideJavaScript, no special syntax is required to refer to the currentwindow, and you can use the properties of that window object asif they were variables (e.g., you can write <tt CLASS=literal>document</tt>rather than <I CLASS=emphasis>window</I><tt CLASS=literal>.document</tt>). Similarly, you can use the methods of the current window object as if they werefunctions (e.g., <tt CLASS=literal>alert()</tt> instead of <I CLASS=emphasis>window</I><tt CLASS=literal>.alert()</tt>).<P CLASS=para><DIV CLASS=screen><P><PRE>self	<I CLASS=emphasis>the current window</I>window	<I CLASS=emphasis>the current window</I></PRE></DIV><P CLASS=para>To refer to a frame within a window, use:<P CLASS=para><DIV CLASS=screen><P><PRE>frames[<I CLASS=emphasis>i</I>]	// or self.frames[<I CLASS=emphasis>i</I>]<I CLASS=emphasis>window</I>.frames[<I CLASS=emphasis>i</I>]</PRE></DIV><P CLASS=para>To refer to the parent window (or frame) of a frame, use:<P CLASS=para><DIV CLASS=screen><P><PRE>parent			// or self.parent, window.parent<I CLASS=emphasis>window</I>.parent		// parent of specified frame</PRE></DIV><P CLASS=para>To refer to the top-level browser window from any framecontained within it, use:<P CLASS=para><DIV CLASS=screen><P><PRE>top				// or self.top, window.top</PRE></DIV><P CLASS=para>New top-level browser windows are created with the<tt CLASS=literal>Window.open()</tt> method. When you call this method,save the return value of the <tt CLASS=literal>open()</tt> call in avariable, and use that variable to reference the new window.<P CLASS=para>Enhanced in Netscape 3.0. See also Frame.<DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.49.1">Properties</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>closed</tt><DD><P CLASS=para>Read-only boolean that specifies whether a window has been closed.Available in Netscape 3.0. <p><DT CLASS=varlistentry><tt CLASS=literal>defaultStatus</tt><DD><P CLASS=para>Read/write string that specifies the default message toappear in the status line.<p><DT CLASS=varlistentry><tt CLASS=literal>document</tt><DD><P CLASS=para>Reference to the Document object contained in the window.<p><DT CLASS=varlistentry><tt CLASS=literal>frames[]</tt><DD><P CLASS=para>An array of the frames contained by this window.The <tt CLASS=literal>frames.length</tt> property contains the number of elementsin the <tt CLASS=literal>frames[]</tt> array, as does the <I CLASS=emphasis>window</I><tt CLASS=literal>.length</tt>property.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>window</I>.frames[<I CLASS=emphasis>i</I>]<I CLASS=emphasis>window</I>.frames.length</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>history</tt><DD><P CLASS=para>Reference to the History object for this window.<p><DT CLASS=varlistentry><tt CLASS=literal>java</tt><DD><P CLASS=para>Reference to the JavaPackage object that is the top of the packagename hierarchy for the core <I CLASS=emphasis>java.*</I> packages that comprisethe Java language. Available in Netscape 3.0. <p><DT CLASS=varlistentry><tt CLASS=literal>length</tt><DD><P CLASS=para>The number of elements in the <tt CLASS=literal>frames[]</tt> array. Sameas <tt CLASS=literal>frames.length</tt>. Read-only.<p><DT CLASS=varlistentry><tt CLASS=literal>location</tt><DD><P CLASS=para>Reference to the Location object for this window.<p><DT CLASS=varlistentry><tt CLASS=literal>Math</tt><DD><P CLASS=para>Reference to an object holding various mathematical functionsand constants. Available in Netscape 3.0. <p><DT CLASS=varlistentry><tt CLASS=literal>name</tt><DD><P CLASS=para>String that contains the name of the window.The name is optionally specified when the window is createdwith the <tt CLASS=literal>open()</tt> method. In Netscape 2.0, thisproperty is read-only; in 3.0 and later, it is read/write.<p><DT CLASS=varlistentry><tt CLASS=literal>navigator</tt><DD><P CLASS=para>Reference to the Netscape object that applies to this andall other windows.<p><DT CLASS=varlistentry><tt CLASS=literal>netscape</tt><DD><P CLASS=para>Reference to the JavaPackage object that is the top of the packagename hierarchy for the core <I CLASS=emphasis>netscape.*</I> Java packagesfrom Netscape. Available in Netscape 3.0. <p><DT CLASS=varlistentry><tt CLASS=literal>opener</tt><DD><P CLASS=para>Read-only property that refers to the Window object thatcontained the document that called <tt CLASS=literal>open()</tt> to createthis window. Available in Netscape 3.0.<p><DT CLASS=varlistentry><tt CLASS=literal>Packages</tt><DD><P CLASS=para>Reference to the JavaPackage object that represents the top of the Java package name hierarchy. Available in Netscape 3.0. <p><DT CLASS=varlistentry><tt CLASS=literal>parent</tt><DD><P CLASS=para>Reference to the parent window or frame of the currentwindow. Only useful when the current window is a framerather than a top-level window.<p><DT CLASS=varlistentry><tt CLASS=literal>self</tt><DD><P CLASS=para>Reference to the window itself. A synonym for <tt CLASS=literal>window</tt>.<p><DT CLASS=varlistentry><tt CLASS=literal>status</tt><DD><P CLASS=para>Read/write string that specifies the current contents ofthe status line.<p><DT CLASS=varlistentry><tt CLASS=literal>sun</tt><DD><P CLASS=para>Reference to the JavaPackage object that is the top of the packagename hierarchy for the <I CLASS=emphasis>sun.*</I> Java packagesfrom Sun Microsystems. Available in Netscape 3.0. <p><DT CLASS=varlistentry><tt CLASS=literal>top</tt><DD><P CLASS=para>Reference to the top-level window that contains thecurrent window. Only useful when the current window is aframe rather than a top-level window.<p><DT CLASS=varlistentry><tt CLASS=literal>window</tt><DD><P CLASS=para>Reference to the window itself. A synonym of <tt CLASS=literal>self</tt>.</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.49.2">Methods</A></h4><P CLASS=para><P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>alert()</tt><DD><P CLASS=para>Displays a simple message in a dialog box.The box has an OK button, and is non-modal (i.e., doesn't interruptprogram execution).<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>window</I>.alert(<I CLASS=emphasis>message</I>)</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>blur()</tt><DD><P CLASS=para>Takes keyboard focus from the top-level browser window; thissends the window to the background on most platforms.<p><DT CLASS=varlistentry><tt CLASS=literal>clearTimeout()</tt><DD><P CLASS=para>Cancels a pending timeout operation.The <I CLASS=emphasis>timeoutId</I> argument is a value returned by the call to<tt CLASS=literal>setTimeout()</tt> and identifies which block of deferred code tocancel.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>window</I>.clearTimeout(<I CLASS=emphasis>timeoutId</I>)</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>close()</tt><DD><P CLASS=para>Closes a window.<p><DT CLASS=varlistentry><tt CLASS=literal>confirm()</tt><DD><P CLASS=para>Asks a yes-or-no question using a dialog box. Returns <tt CLASS=literal>true</tt>if the user clicks the OK button, <tt CLASS=literal>false</tt> if the user clicksCancel.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>window</I>.confirm(<I CLASS=emphasis>question</I>)</PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>focus()</tt><DD><P CLASS=para>Gives the top-level browser window keyboard focus; this bringsthe window to the front on most platforms.<p><DT CLASS=varlistentry><tt CLASS=literal>open()</tt><DD><P CLASS=para>Looks up an existing window or opens up a new one.Buggy in Netscape 2.0.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>window</I>.open([<I CLASS=emphasis>url</I>, [<I CLASS=emphasis>name</I>, [<I CLASS=emphasis>features</I>]]])</PRE></DIV><P CLASS=para>If the <I CLASS=emphasis>name</I> argument specifies the name of an existingwindow, then a reference to that window is returned. The returnedwindow will display the specified <I CLASS=emphasis>url</I>, but the <I CLASS=emphasis>features</I>will be ignored. If the <I CLASS=emphasis>url</I> is the empty string, a blankwindow is opened.If <I CLASS=emphasis>name</I> does not refer to an existing window, itspecifies the name of the new window; <I CLASS=emphasis>name</I> can be used as the value of a <tt CLASS=literal>target</tt> attributeof an <tt CLASS=literal>&lt;a&gt;</tt> or <tt CLASS=literal>&lt;form&gt;</tt> tag to force documents to bedisplayed in the window.<I CLASS=emphasis>features</I> is a comma-separated list of features to appear in thewindow; if this argument is empty or not specified, then all featureswill be present in the window. If <I CLASS=emphasis>features</I> specifiesany one feature, then any feature that does not appear in the listwill not appear in the window. The string should not contain anywhitespace; each element has the form:<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>feature</I>[=<I CLASS=emphasis>value</I>]</PRE></DIV><P CLASS=para>The available features are:<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>toolbar</tt><DD><P CLASS=para>the browser toolbar<p><DT CLASS=varlistentry><tt CLASS=literal>location</tt><DD><P CLASS=para>the input field for entering URLs into the browser<p><DT CLASS=varlistentry><tt CLASS=literal>directories</tt><DD><P CLASS=para>directory buttons, such as "What's New" in Netscape<p><DT CLASS=varlistentry><tt CLASS=literal>status</tt><DD><P CLASS=para>the status linethe browser menubar<p><DT CLASS=varlistentry><tt CLASS=literal>resizable</tt><DD><P CLASS=para>if this feature is present and not set to <tt CLASS=literal>no</tt>,then the window will not have resize handles around its border<p><DT CLASS=varlistentry><tt CLASS=literal>width</tt><DD><P CLASS=para>must be followed by a value that specifiesthe width of the window in pixels<p><DT CLASS=varlistentry><tt CLASS=literal>height</tt><DD><P CLASS=para>must be followed by a value that specifiesthe height of the window in pixelsDisplays the specified (plain text) <I CLASS=emphasis>message</I> in a dialog boxthat also contains a text input field and three buttons (OK, Clear,and Cancel).It should ask the user to enter the information you want.The optional <I CLASS=emphasis>default</I> is a string or integer that will initially be displayed in the input field. If the <I CLASS=emphasis>default</I> argument is not passed, or if its value is <tt CLASS=literal>null</tt>, then <tt CLASS=literal>prompt()</tt> displays the string "&lt;undefined&gt;". Pass the emptystring ("") to make <tt CLASS=literal>prompt()</tt> display an empty input box.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>window</I>.prompt(<I CLASS=emphasis>message</I>)<I CLASS=emphasis>window</I>.prompt(<I CLASS=emphasis>message</I>, <I CLASS=emphasis>default</I>)</PRE></DIV><P CLASS=para>Selecting the Cancel button causes <tt CLASS=literal>prompt()</tt> to return <tt CLASS=literal>null</tt>;OK returns the text value in the input field; Clear erases the field.Scrolls the document displayed in the Window so that the specified<I CLASS=emphasis>x</I> and <I CLASS=emphasis>y</I> coordinates appear in the upper-left corner.<tt CLASS=literal>scroll(0,0)</tt> specifies the top-left corner of the document.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>window</I>.scroll(<I CLASS=emphasis>x</I>, <I CLASS=emphasis>y</I>)	// x, y are coords to scroll to</PRE></DIV><P CLASS=para>Executes string of JavaScript <I CLASS=emphasis>code</I> after a specified amount of time (<I CLASS=emphasis>delay</I> milliseconds) elapses.Returns an opaque value (a "timeout id") that can be passedto the <tt CLASS=literal>clearTimeout()</tt> method to cancel the executionof <I CLASS=emphasis>code</I>.<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>window</I>.setTimeout(<I CLASS=emphasis>code</I>, <I CLASS=emphasis>delay</I>)</PRE></DIV></DL></DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-21-SECT-3.49.3">Event handlers</A></h4><P CLASS=para>The value of the following event handlers may be any number ofJavaScript statements, separated by semicolons, which are executedwhen the handler is invoked.<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>onblur()</tt><DD><P CLASS=para>Invoked when a top-level window loses focus.Defined by specifying the <tt CLASS=literal>onBlur</tt> attribute of the <tt CLASS=literal>&lt;body&gt;</tt> or <tt CLASS=literal>&lt;frameset&gt;</tt> tags of the document or framesetthat occupies the top-level window. May also be defined byassigning a function to the <tt CLASS=literal>onblur</tt> property of the Windowobject.<P CLASS=para><DIV CLASS=screen><P><PRE>&lt;body	<I CLASS=emphasis>a definition of the handler</I>    [ onBlur="<I CLASS=emphasis>JavaScript statements</I>" ]              . . .&gt;              &lt;frameset	<I CLASS=emphasis>another way to define the handler</I>    [ onBlur="<I CLASS=emphasis>JavaScript statements</I>" ]              . . .&gt;              <I CLASS=emphasis>window</I>.onblur=<I CLASS=emphasis>handler-func</I>	 <I CLASS=emphasis>defining the handler directly</I><I CLASS=emphasis>window</I>.onblur()	<I CLASS=emphasis>an explicit invocation of the handler</I></PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>onerror()</tt><DD><P CLASS=para>Invoked when a JavaScript error occurs. The default JavaScripterror handler displays an error dialog; you can customize thisbehavior by providing your own <tt CLASS=literal>onerror()</tt> event handler.Define it for a window by setting the <tt CLASS=literal>onerror</tt> property of a Window object to an appropriate function; unlike other event handlersin JavaScript, <tt CLASS=literal>onerror()</tt> cannot be defined in an HTML tag.You register an <tt CLASS=literal>onerror()</tt> event handler like this: <P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>window</I>.onerror="<I CLASS=emphasis>handler-function</I></PRE></DIV><P CLASS=para>Netscape invokes the handler like this:<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>window</I>.onerror(<I CLASS=emphasis>message</I>, <I CLASS=emphasis>url</I>, <I CLASS=emphasis>line</I>)</PRE></DIV><P CLASS=para><I CLASS=emphasis>message</I> is the error message; <I CLASS=emphasis>url</I>is the URL of the document in which the error occurred; <I CLASS=emphasis>line</I>is the line number at which the error occurred.When the <tt CLASS=literal>onerror()</tt> handler is invoked, it is passed thesethree arguments to do with as it will.You can turn off error handling for a window by setting the<tt CLASS=literal>onerror</tt> property of the window to <tt CLASS=literal>null</tt>.<p><DT CLASS=varlistentry><tt CLASS=literal>onfocus()</tt><DD><P CLASS=para>Invoked when the top-level window receives focus.Defined by specifying the <tt CLASS=literal>onFocus</tt> attribute of the <tt CLASS=literal>&lt;body&gt;</tt> or <tt CLASS=literal>&lt;frameset&gt;</tt> tags of the document or framesetthat occupies the top-level window. May also be defined byassigning a function to the <tt CLASS=literal>onfocus</tt> property of the Window object.<P CLASS=para><DIV CLASS=screen><P><PRE>&lt;body	<I CLASS=emphasis>a definition of the handler</I>    [ onFocus="<I CLASS=emphasis>JavaScript statements</I>" ]              . . .&gt;              &lt;frameset	<I CLASS=emphasis>another way to define the handler</I>    [ onFocus="<I CLASS=emphasis>JavaScript statements</I>" ]              . . .&gt;              <I CLASS=emphasis>window</I>.onfocus=<I CLASS=emphasis>handler-func</I>	 <I CLASS=emphasis>defining the handler directly</I><I CLASS=emphasis>window</I>.onfocus()	<I CLASS=emphasis>an explicit invocation of the handler</I></PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>onLoad()</tt><DD><P CLASS=para>Invoked when the document (or frameset) is fully loaded. Defined by specifying the <tt CLASS=literal>onLoad</tt> attribute of the <tt CLASS=literal>&lt;body&gt;</tt> or <tt CLASS=literal>&lt;frameset&gt;</tt> tags of that window.May also be read and invoked through the Window object.Buggy in Netscape 2.0.<P CLASS=para><DIV CLASS=screen><P><PRE>&lt;body	<I CLASS=emphasis>a definition of the handler</I>    [ onLoad="<I CLASS=emphasis>JavaScript statements</I>" ]              . . .&gt;              &lt;frameset	<I CLASS=emphasis>another way to define the handler</I>    [ onLoad="<I CLASS=emphasis>JavaScript statements</I>" ]              . . .&gt;              <I CLASS=emphasis>window</I>.onload=<I CLASS=emphasis>handler-func</I>	 <I CLASS=emphasis>defining the handler directly</I><I CLASS=emphasis>window</I>.onload()	<I CLASS=emphasis>an explicit invocation of the handler</I></PRE></DIV><P CLASS=para><p><DT CLASS=varlistentry><tt CLASS=literal>onUnload()</tt><DD><P CLASS=para>Invoked when the browser leaves the document or frameset.Defined by specifying the <tt CLASS=literal>onUnload</tt> attribute of the <tt CLASS=literal>&lt;body&gt;</tt> or <tt CLASS=literal>&lt;frameset&gt;</tt> tags of that window.May also be read and invoked through the Window object.<P CLASS=para><DIV CLASS=screen><P><PRE>&lt;body	<I CLASS=emphasis>a definition of the handler</I>    [ onUnload="<I CLASS=emphasis>JavaScript statements</I>" ]              . . .&gt;              &lt;frameset [ rows="<I CLASS=emphasis>row sizes</I>" ]	<I CLASS=emphasis>another way to define the handler</I>          [ cols="<I CLASS=emphasis>column sizes</I>" ]          [ onUnload="<I CLASS=emphasis>JavaScript statements</I>" ]              . . .&gt;              <I CLASS=emphasis>window</I>.onunload=<I CLASS=emphasis>handler-func</I>	<I CLASS=emphasis>defining the handler directly</I><I CLASS=emphasis>window</I>.onunload()	<I CLASS=emphasis>an explicit invocation of the handler</I></PRE></DIV><P CLASS=para></DL></DIV></DIV></DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch21_02.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="ch22_01.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>Client-Side JavaScript Examples</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>Server Configuration Overview</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>