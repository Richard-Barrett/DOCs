<!DOCTYPE HTML PUBLIC "-//ORA//DTD CD HTML 3.2//EN"><HTML><HEAD><TITLE>[Chapter 25] 25.2 The obj.conf File</TITLE><META NAME="author" CONTENT="Stephen Spainhour and Valerie Quercia"><META NAME="date" CONTENT="Mon Mar 17 14:43:48 1997"><META NAME="form" CONTENT="html"><META NAME="metadata" CONTENT="dublincore.0.1"><META NAME="objecttype" CONTENT="book part"><META NAME="otheragent" CONTENT="gmat dbtohtml"><META NAME="publisher" CONTENT="O'Reilly &amp; Associates, Inc."><META NAME="source" CONTENT="SGML"><META NAME="subject" CONTENT="Webmaster in a Nutshell"><META NAME="title" CONTENT="Webmaster in a Nutshell"><!-- JavaScript: pathcont.js --></HEAD><BODY BGCOLOR="#FFFFFF"><DIV CLASS=htmlnav><H1><IMG SRC="gifs/smbanner.gif" ALT="Webmaster in a Nutshell"></H1><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch25_01.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><b>Chapter 25</b></td><td width=172 align=right valign=top><A HREF="ch26_01.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --><hr align=left width=515></DIV><DIV CLASS=sect1><h2 CLASS=sect1><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2">25.2 The obj.conf File</A></h2><P CLASS=para>The <I CLASS=emphasis>obj.conf</I> file contains the configuration directives thattell the server exactly how to handle client requests. This filehas two main functions, corresponding to the two main sectionsof the file. The first section initializes subsystems, a diverse setof tasks that includes openingand naming log files, loading the MIME types file, loading Java classes and LiveWire applications, and describing logging and directory index formats.The second section contains the object definitions, whichtell the server how to handle resource requests.<DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2.1">Resource Handling</A></h3><P CLASS=para>The Netscape servers are modeled on the idea that all resources to be served are instances of objects. To tell the server how to treat a set of documents, you assign them to an object.You give an object all ofthe properties you want the resources to have, includingURL mapping, access and authorization, assigning MIME types,logging format, and directory listings. For example, there is no need for a special CGI program directory, since you can assign any document you want to a common cgi object.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2.2">Subsystem Initialization</A></h3><P CLASS=para>The <tt CLASS=literal>Init</tt> directive is used to initialize subsystems of the server. The <tt CLASS=literal>Init</tt> directives for the subsystems being used by the serverare grouped at the top of the <I CLASS=emphasis>obj.conf</I> file. They take thefollowing form:<P CLASS=para><DIV CLASS=screen><P><PRE>Init fn=<I CLASS=emphasis>function argument1=value1</I> [<I CLASS=emphasis>argument2=value2 ...</I>]</PRE></DIV><P CLASS=para>where <I CLASS=emphasis>function</I> is the function name, and the arguments and values depend on the function.<P CLASS=para>Which subsystem is being initialized depends onthe value of the <tt CLASS=literal>fn</tt> function. The subsystems andavailable functions depend on which serveryou have and the functionality it supports. You may also have your own functions if you have written plug-inapplications with the server API.<P CLASS=para>This section lists the <tt CLASS=literal>Init</tt> functions corresponding to basicsubsystems used by the server. Functions for Java andLiveWire subsystems commonly appear in this section as well, but they will notbe discussed here.<DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2.2.1">cindex-init</A></h4><P CLASS=para>The <tt CLASS=literal>cindex-init</tt> function configures fancy directory indexing. These settings apply globally, and cannot be custom configured forspecific directories. This function does not turn on fancy indexing forany directory; that is done in the object definitions, if desired.There are four arguments available for this function:<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>icon-uri=</tt><I CLASS=emphasis>path</I> <DD><P CLASS=para>This argument specifies the server path to the icon directory. Which icons are used with any given MIME type is determined by the <I CLASS=emphasis>mime.types</I> file.The default server path for icons is <tt CLASS=literal>/mc-icons/</tt>.<p><DT CLASS=varlistentry><tt CLASS=literal>ignore=</tt><I CLASS=emphasis>expr</I><DD><P CLASS=para>This argument specifies which files should be omitted from directory indices. The value should be a regular expression for filenames to ignore. For example, toexclude log files from listings, you could use the setting:<P CLASS=para><DIV CLASS=screen><P><PRE>Init fn=cindex-init ignore="*.log"</PRE></DIV><P CLASS=para>Files whose names begin with a period areautomatically omitted, with no option to un-omit them.<p><DT CLASS=varlistentry><tt CLASS=literal>opts=s|i</tt><DD><P CLASS=para>This argument specifies whether the icons are hyperlinked to the documents and whether the server should attempt to locate the titles of HTML documents to use as descriptions. If the value includes <tt CLASS=literal>i</tt>, then icons are hyperlinked. If the value includes <tt CLASS=literal>s</tt>, then the server will scan for HTML titles. The value should be one or both of these, e.g., <tt CLASS=literal>opts=is</tt>.<p><DT CLASS=varlistentry><tt CLASS=literal>widths=</tt><I CLASS=emphasis>a,b,c,d</I> <DD><P CLASS=para>This argument specifies the widths of the different columns in the directory index. Setting a column's width to 0 omits that column. The columns are the filename, the last-modified time, the size, and the description. For example, the value <tt CLASS=literal>16,0,8,30</tt> would make a name column 16 characters wide, a size column 8 characters wide, and a description column 30 characters wide.</DL><P CLASS=para>Note that this function does not turn on fancy directory indexing for any directories, but merely configures what a fancy directory would look like if it were turned on. To turn on fancy directory indexing, use the <tt CLASS=literal>index-common</tt> function of the <tt CLASS=literal>Service</tt> directive.</DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2.2.2">init-clf</A></h4><P CLASS=para>The <tt CLASS=literal>init-clf</tt> function is used to initialize logging in the common log format. This function tells the server to create one or morecommon log files and open them to record transactions.<P CLASS=para>Each log file needs to be assigned a name for internal use by the server. The default name for logging (but not for this directive) is <tt CLASS=literal>global</tt>, but you can use whatever name or names you wish. The argument names should be the names you want to use with their values being the absolute paths to the log files.For example, you might want to call your three logs <tt CLASS=literal>member</tt>, <tt CLASS=literal>newsletter</tt>, and <tt CLASS=literal>global</tt> (for everything else). You would do this like so:<P CLASS=para><DIV CLASS=screen><P><PRE>Init fn=init-clf member=/https-server/logs/members.log  newsletter=/https-server/logs/newsletter.log  global=/https-server/logs/access.log</PRE></DIV><P CLASS=para>(Remember to not break <tt CLASS=literal>Init</tt> directives across lines, despite howthis example is formatted.)A more common use would be to create a single general file:<P CLASS=para><DIV CLASS=screen><P><PRE>Init fn=init-clf global=/usr/local/etc/httpd/logs/access.log</PRE></DIV><P CLASS=para>Note that this directive merely initializes the logging system. It does not tell the server to write anything to the log files. That is done by including an <tt CLASS=literal>AddLog</tt> directive in the relevant object, whichspecifies a logfile name that is defined here.</DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2.2.3">init-uhome</A></h4><P CLASS=para>The <tt CLASS=literal>init-uhome</tt> function tells the server to initialize user directory handling. User directory handling will workperfectly well without this directive, but when used, the userdirectory locations are pre-cached in a directory table file(by default <I CLASS=emphasis>/etc/passwd</I>) to improve performance.<P CLASS=para>The <tt CLASS=literal>init-uhome</tt> function allows an optional second argument, <tt CLASS=literal>pwfile</tt>, which specifies the name of the user directory table file other than <I CLASS=emphasis>/etc/passwd</I>.A basic initialization would be:<P CLASS=para><DIV CLASS=screen><P><PRE>Init fn=init-uhome</PRE></DIV><P CLASS=para>while one using <I CLASS=emphasis>/usr/local/etc/httpd/users.db</I> as the user table would be:<P CLASS=para><DIV CLASS=screen><P><PRE>Init fn=init-uhome pwfile=/usr/local/etc/httpd/users.db</PRE></DIV></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2.2.4">load-types</A></h4><P CLASS=para>The <tt CLASS=literal>load-types</tt> function initializes the general MIME-type assignment subsystem.This function loads a types table,the <I CLASS=emphasis>mime.types</I> file.The format of this file is simple, with one record per line:<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>type/subtype extension1</I> [<I CLASS=emphasis>extention2 ...</I>] [icon=<I CLASS=emphasis>iconfile</I>]</PRE></DIV><P CLASS=para>where <I CLASS=emphasis>type/subtype</I> is a MIME type and subtype like <tt CLASS=literal>text/html</tt>, <I CLASS=emphasis>extension</I> is a filename extension such as <tt CLASS=literal>html</tt>, and <I CLASS=emphasis>iconfile</I> is the name of the icon to be shown if a file of that type is listed in a directory index. The icon names should be filenames in the index icon directory (specified by the <tt CLASS=literal>icon-uri</tt>parameter of the<tt CLASS=literal>cindex-init</tt> function).<P CLASS=para>This function can load two different types files, with oneflagged as global and the other as local.The global file is given as the value of the <tt CLASS=literal>mime-types</tt> argument, while the local file is defined by the <tt CLASS=literal>local-types</tt> argument. The files may be specified as either absolute paths or file names inside the configuration directory. For example:<P CLASS=para><DIV CLASS=screen><P><PRE>Init fn=load-types mime-types=mime.types local-types=clown.types</PRE></DIV></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2.2.5">flex-init</A></h4><P CLASS=para>This function is used to initialize the more enhanced logging system(called "flexible logging"). The first parameter gives the name of the logfile with the fullpath to its location. The second parameter is the format parameter,which takes a list of values for the various types of transactioninformation to log. The filename parameter looks like <I CLASS=emphasis>logname</I>&nbsp;=<I CLASS=emphasis>fullpathname</I>.Then the format parameter will be <tt CLASS=literal>format.</tt><I CLASS=emphasis>logname</I>&nbsp;=<I CLASS=emphasis>format options</I>.For example, the following line opens and specifies the format ofa log named <tt CLASS=literal>access</tt>:<P CLASS=para><DIV CLASS=screen><P><PRE>Init fn="flex-init" access="/https-server/logs/access" format.access="%Ses-&gt;client.ip% - %Req-&gt;vars.auth-user% [%SYSDATE%] \"%Req-&gt;reqpb.clf-request%\" %Req-&gt;srvhdrs.clf-status% %Req-&gt;srvhdrs.content-length%"</PRE></DIV><P CLASS=para>The lines of the example are broken so poorly to remind you that the directive must beone long line and that all spaces in the format value count. Within theformat value, everything between percent signs (%) is a transaction valueparameter. Parameters surrounded by <tt CLASS=literal>\"</tt> and <tt CLASS=literal>"\</tt> are "escaped"because their values may contain spaces. Any characters that are notescaped characters or between percents are literally printed to the logfile,giving your log lines spaces, separators, and readability.Here is the list of log parameter values:<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>%Ses-&gt;client.ip%</tt><DD><P CLASS=para>Client's hostname or IP address<p><DT CLASS=varlistentry><tt CLASS=literal>%Req-&gt;vars.auth-user%</tt>" <DD><P CLASS=para>User authentication required<p><DT CLASS=varlistentry><tt CLASS=literal>%SYSDATE%</tt><DD><P CLASS=para>System date<p><DT CLASS=varlistentry><tt CLASS=literal>%Req-&gt;reqpb.clf-request%</tt><DD><P CLASS=para>Full client request (escapes required)<p><DT CLASS=varlistentry><tt CLASS=literal>%Req-&gt;srvhdrs.clf-status%</tt><DD><P CLASS=para>Server response statusContent length<p><DT CLASS=varlistentry><tt CLASS=literal>%Req-&gt;headers.referer%</tt><DD><P CLASS=para>Refering URL (escapes required)Client's browser identity (escapes required)Client request methodRequesting URLURL query stringHTTP version (escapes required)Accept header(s)Date header (escapes required)If-Modified-Since headerAuthorization header</DL></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2.3">Object Configuration</A></h3><P CLASS=para>The rest of the object file (beyond the <tt CLASS=literal>Init</tt> directives)consists of a set of objects. Each object comes in a block surrounded by <tt CLASS=literal>&lt;Object&gt;</tt> and <tt CLASS=literal>&lt;/Object&gt;</tt>tags. The <tt CLASS=literal>&lt;Object&gt;</tt> tag uses one of two attributes: <tt CLASS=literal>name</tt>, whichgives a name to an object, or <tt CLASS=literal>ppath</tt>, which gives a URLpath or regular expression for resources belonging to the object.<P CLASS=para>An object consists of a series of directives that specify the behavior of documents within that object. The directives may specify that directory indexing is not allowed, that authentication is required, that the document should be treated as an imagemap, that requests for documents should be logged into a special log file, and so on.<P CLASS=para>An object named <tt CLASS=literal>research</tt> looks like this:<P CLASS=para><DIV CLASS=screen><P><PRE>&lt;object name="research"&gt;<I CLASS=emphasis>directive1</I><I CLASS=emphasis>directive2</I>...&lt;/object&gt;</PRE></DIV><P CLASS=para>Alternatively, you could specify the object by the server path:<P CLASS=para><DIV CLASS=screen><P><PRE>&lt;object ppath="/secret/research/*"&gt;<I CLASS=emphasis>directive1</I><I CLASS=emphasis>directive2</I>...&lt;/object&gt;</PRE></DIV><P CLASS=para>There are two objects included by default: <tt CLASS=literal>default</tt>and <tt CLASS=literal>cgi</tt>. All resources are at first handled by one of thesetwo objects. Directives in the object block may then redirect aspecific resource to another named object for handling.In addition, directives within an object may be designated as applying only to (or only not to) specific client hosts (within <tt CLASS=literal>&lt;client&gt;</tt> ... <tt CLASS=literal>&lt;/client&gt;</tt> tags).<P CLASS=para>Client-specific directives are the same as other directives, but are wrapped within <tt CLASS=literal>&lt;client&gt; ... &lt;/client&gt;</tt> labels. These labels can be qualified using either the <tt CLASS=literal>dns</tt> argument, which matches against the DNS-resolved name for the remote client, or the <tt CLASS=literal>ip</tt> argument, which matches against the IP address itself. Either can be a regular expression. For example, to enable specific directives only within the <I CLASS=emphasis>ora.com</I> domain, you could write:<P CLASS=para><DIV CLASS=screen><P><PRE>&lt;client dns=*ora.com&gt;<I CLASS=emphasis>special-directive1</I><I CLASS=emphasis>special-directive2</I>...&lt;/client&gt;</PRE></DIV><P CLASS=para>As with the <tt CLASS=literal>Init</tt> lines, the object directives take the following form:<P CLASS=para><DIV CLASS=screen><P><PRE><I CLASS=emphasis>directive</I> fn=<I CLASS=emphasis>function argument1=value1</I> [<I CLASS=emphasis>argument2=value2 ...</I>]</PRE></DIV><P CLASS=para>where <I CLASS=emphasis>directive</I> is the directive name, <I CLASS=emphasis>function</I> is the function name, and the arguments and values depend on the directive and function.<P CLASS=para>There are only seven directives, and they correspond closely to the request processing pipeline. When a request comes in, it is assigned to an object by matching either a regular expression or the root object.Then:<P><OL CLASS=orderedlist><li CLASS=listitem>Authentication is performed, as specified by any <tt CLASS=literal>AuthTrans</tt> directives.<P><li CLASS=listitem>The path is translated to a specific resource by any <tt CLASS=literal>NameTrans</tt>directives. At this point, the document mayalso be assigned to a different object, in which case the process starts over in that object.<P><li CLASS=listitem>The translated path is checked by any <tt CLASS=literal>PathCheck</tt> directives.<P><li CLASS=listitem>The resource is assigned a type by any applicable <tt CLASS=literal>ObjectType</tt> directives.<P><li CLASS=listitem>The request is serviced in some appropriate way by a <tt CLASS=literal>Service</tt> directive.<P><li CLASS=listitem>The request is logged by an <tt CLASS=literal>AddLog</tt> directives.<P><li CLASS=listitem>If any of these steps fail, a special message may be sent, depending on the status case, where these messages are specified by any <tt CLASS=literal>Error</tt> directives.<P></OL><P CLASS=para>Within each stage, the directives are processed in the order they appear in the object file. This can lead to occasional problems if you are not careful to put special cases before defaults.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2.4">AuthTrans</A></h3><P CLASS=para>The <tt CLASS=literal>AuthTrans</tt> directive is responsible for requesting and interpreting authentication whenever necessary.This directive can use one of two functions: <tt CLASS=literal>basic-auth</tt>or <tt CLASS=literal>basic-ncsa</tt>. Both of these functions mean the same thing.<tt CLASS=literal>basic-auth</tt> is used in 1.x servers. <tt CLASS=literal>auth-ncsa</tt> supersedesit in 2.x servers.<P CLASS=para>The following parameters are used in the <tt CLASS=literal>AuthTrans</tt> directive:<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>auth-type=basic</tt><DD><P CLASS=para>Specifies the authorization type to be used. It is always<tt CLASS=literal>basic</tt>.<p><DT CLASS=varlistentry><tt CLASS=literal>dbm=</tt><I CLASS=emphasis>file</I><DD><P CLASS=para>Indicates the name of a user database file. Itshould contain the full pathname of the file. If you use thisparameter, you can't also list a <tt CLASS=literal>userfile</tt> parameter.<p><DT CLASS=varlistentry><tt CLASS=literal>userfile=</tt><I CLASS=emphasis>file</I><DD><P CLASS=para>Specifies a userfile in the NCSA format. These arefiles with <tt CLASS=literal>user:password</tt> listings created by the <I CLASS=emphasis>htpasswd</I> program.You must supply a full pathname.<p><DT CLASS=varlistentry><tt CLASS=literal>grpfile=</tt><I CLASS=emphasis>file</I><DD><P CLASS=para>An optional parameter for specifying an NCSA-style group file.The group file contains lists of groups and their users in the format<tt CLASS=literal>group:user1 user2 ...</tt>. You must supply a full pathname.</DL><P CLASS=para>The <tt CLASS=literal>AuthTrans</tt> directive is usually used with the <tt CLASS=literal>require-auth</tt>function of <tt CLASS=literal>PathCheck</tt>.</DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2.5">NameTrans</A></h3><P CLASS=para>The <tt CLASS=literal>NameTrans</tt> directive is responsible for taking the requested server path and determining what actual resource corresponds to it. This includes resolving user directories, URL mapping, and redirections.<P CLASS=para>In addition, the <tt CLASS=literal>NameTrans</tt> directive can assign documents to other objects for further processing. Any of the <tt CLASS=literal>NameTrans</tt> functions, except for <tt CLASS=literal>redirect</tt>, can take an extra argument name that specifies the name of the object to which the document should be transferred.<DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2.5.1">document-root</A></h4><P CLASS=para>This function specifies the root directory of  your server's document tree. If no other directive remaps the server path to an absolute path, it will be interpreted as being relative to this directory. The root directory is given as the value of the <tt CLASS=literal>root</tt> argument. For example, to use <I CLASS=emphasis>/usr/local/etc/web/docs/</I> as the root directory, you would use this setting:<P CLASS=para><DIV CLASS=screen><P><PRE>NameTrans fn=document-root root=/usr/local/etc/web/docs/</PRE></DIV><P CLASS=para>This function should be used in the default object.</DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2.5.2">home-page</A></h4><P CLASS=para>The Netscape server allows you to assign a special document to the server home page request (i.e., a request for /) using this function. The home page document's path, absolute or relative to the document root, should be given as the value of the argument <tt CLASS=literal>path</tt>. For example, to use <I CLASS=emphasis>/usr/local/etc/web/home.html</I> as the server's home page, you would use this setting:<P CLASS=para><DIV CLASS=screen><P><PRE>NameTrans fn=home-page path=/usr/local/etc/web/home.html</PRE></DIV></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2.5.3">pfx2dir</A></h4><P CLASS=para>This function allows you to remap a server path to a new absolute path by assigning a prefix directory. That is, you can say that a whole server path tree actually resides at the end of a branch of  another tree. This function takes two arguments:<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>from=</tt><I CLASS=emphasis>urlpath</I><DD><P CLASS=para>The server path tree being remapped.<p><DT CLASS=varlistentry><tt CLASS=literal>dir=</tt><I CLASS=emphasis>path</I><DD><P CLASS=para>The absolute path that is being mapped to.<P CLASS=para>For example, if you want<I CLASS=emphasis>children/kenny/</I> to map to the files in <I CLASS=emphasis>/monsters/gamera/kenny/</I>, you would use:<P CLASS=para><DIV CLASS=screen><P><PRE>NameTrans fn=pfx2dir from=/children/kenny/ dir=/monsters/gamera/kenny/</PRE></DIV><P CLASS=para>The optional <tt CLASS=literal>name</tt> parameter supplies the name of another objectto which the mapped path should derive its configuration.</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2.5.4">redirect</A></h4><P CLASS=para>This function allows the server toredirect the user to a resource's location if it has moved.It uses the following arguments:<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>from=</tt><I CLASS=emphasis>path</I><DD><P CLASS=para>The local server path that is being redirected.<p><DT CLASS=varlistentry><tt CLASS=literal>url-prefix=</tt><I CLASS=emphasis>urlpath</I><DD><P CLASS=para>If the new location is simply a new URL prefix for the server path (i.e., on the same server), the <tt CLASS=literal>url-prefix</tt> argument should be used.<p><DT CLASS=varlistentry><tt CLASS=literal>url=</tt><I CLASS=emphasis>url</I><DD><P CLASS=para>If the new location is a full URL,then the <tt CLASS=literal>url</tt>argument should be used.<P CLASS=para>For example, if you wanted to tell clients that everything in the <I CLASS=emphasis>/turtle/</I> directory had moved to <I CLASS=emphasis>http://www.gamera.com/</I>, you would use this setting:<P CLASS=para><DIV CLASS=screen><P><PRE>NameTrans fn=redirect from=/turtle/ url-prefix=http://www.gamera.com/</PRE></DIV></DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2.5.5">unix-home</A></h4><P CLASS=para>This function sets up user directories with the following arguments:<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>from=</tt><I CLASS=emphasis>prefix</I><DD><P CLASS=para>Specifies the prefix indicating a user directory, such as a tilde (<tt CLASS=literal>~</tt>) or a path like <tt CLASS=literal>/staff/</tt>.<p><DT CLASS=varlistentry><tt CLASS=literal>subdir=</tt><I CLASS=emphasis>subdir</I><DD><P CLASS=para>Specifies the subdirectory of each user's home directory to which the path should resolve.<p><DT CLASS=varlistentry><tt CLASS=literal>pwfile=</tt><I CLASS=emphasis>file</I><DD><P CLASS=para>This optional argument specifies the user database (in <I CLASS=emphasis>/etc/passwd</I> format) to use to locate user directories. If omitted, <I CLASS=emphasis>/etc/passwd</I> will be used, or NIS if it is running.<P CLASS=para>For example, to map a request of the form <tt CLASS=literal>/~user/</tt>to the user subdirectory <I CLASS=emphasis>public_html</I>, using the standard user table, you would use this directive:<P CLASS=para><DIV CLASS=screen><P><PRE>NameTrans fn=unix-home from="/~" subdir="public_html"</PRE></DIV><P CLASS=para>You can also supply a <tt CLASS=literal>name</tt> parameter to refer the path's objectsto another object's configuration settings.</DL></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2.6">PathCheck</A></h3><P CLASS=para>The <tt CLASS=literal>PathCheck</tt> directive tells the server to check various things about the translated path. This may be a security check to identify any suspicious directories, a scan for CGI path info spackled onto the end of an otherwise perfectly good path, or an instruction to require authentication. <tt CLASS=literal>PathCheck</tt>'s functions are less clearly unified than those of the other directives, but they have the common need to be applied after the path has been translated but before the processing of the request's content begins.<DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2.6.1">deny-existence</A></h4><P CLASS=para>This function is used to hide the existence of a file from the user. It can take two arguments:<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>path=</tt><I CLASS=emphasis>path</I><DD><P CLASS=para>Specifies which files should have their existences denied. If this argument is omitted, the server takes the severe stance of denying the existence of everything handled by the current object.<p><DT CLASS=varlistentry><tt CLASS=literal>bong-msg=</tt><I CLASS=emphasis>file</I><DD><P CLASS=para>Sends a special file instead of the standard error message.<P CLASS=para>For example, to deny the existence of everything in the <I CLASS=emphasis>/secrets/</I> directory and send back the file <I CLASS=emphasis>/docs/nosy.html</I>, you could use this setting:<P CLASS=para><DIV CLASS=screen><P><PRE>PathCheck fn=deny-existence path=/secrets/ bong-msg=/docs/nosy.html</PRE></DIV><P CLASS=para>Alternatively, you could specify an entire object for that directory tree and only lock out outsiders:<P CLASS=para><DIV CLASS=screen><P><PRE>&lt;object ppath=/secrets/*&gt;&lt;client dns=*~*.ora.com&gt;PathCheck fn=deny-existence bong-msg=/docs/nothing-to-see.html&lt;/client&gt;&lt;/object&gt;</PRE></DIV></DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2.6.2">find-index</A></h4><P CLASS=para>When a user requests a directory, instead of a plain file, the server can either send a specified index file or create a directorylisting (if enabled and authorized).The <tt CLASS=literal>find-index</tt> function enables this ability.There is only one argument to this function:<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>index-names=</tt><I CLASS=emphasis>file1,file2,...</I><DD><P CLASS=para>Supplies a comma-separated list (no spaces) of names to look for in a directory to be used as the default file.<P CLASS=para>For example, to look first for <I CLASS=emphasis>index.html</I> and then <I CLASS=emphasis>index.shtml</I> and then <I CLASS=emphasis>index.cgi</I>, you would use this setting:<P CLASS=para><DIV CLASS=screen><P><PRE>PathCheck fn=find-index index-names=index.html,index.shtml,index.cgi</PRE></DIV></DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2.6.3">find-links</A></h4><P CLASS=para>This function allows you to specify when hard or soft links will be followed as part of path resolution. There are potential security problems with allowing links to be followable. If a request comes in for the path you have listed,the server will check for symbolic links that you don't want to be accessed, and if it finds any in the directory, it returns an error.Two parameters are used with this function:<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>disable=h|s|o</tt><DD><P CLASS=para>Specifies which types of links you don't like. There are three choices that can be used in combination if you wish. <tt CLASS=literal>h</tt> is used for hard symboliclinks; <tt CLASS=literal>s</tt> is used for soft links; and <tt CLASS=literal>o</tt> means that youwill allow symbolic links if the user owns the target link.<p><DT CLASS=varlistentry><tt CLASS=literal>dir=</tt><I CLASS=emphasis>path</I><DD><P CLASS=para>Specifies the URL path that will be checkedfor symbolic links. All subdirectories of the path will be checked as well,if they are requested.</DL><P CLASS=para>This example disables all symbolic links in user directories:<P CLASS=para><DIV CLASS=screen><P><PRE>PathCheck fn=find-links dir=public_html disable=hs</PRE></DIV></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2.6.4">find-pathinfo</A></h4><P CLASS=para>When a user requests a document, he can put extra information (which may or may not get used) onto the end of the document's server path in the form of additional directory levels. In a CGI environment, this is what makes up the PATH_INFO variable. The Netscape server does not identify and strip out this information by default, which means if you want it to do so, you have to tell it to. The <tt CLASS=literal>find-pathinfo</tt> function does just that. There are no arguments. To handle path info correctly, just include this directive:<P CLASS=para><DIV CLASS=screen><P><PRE>PathCheck fn-find-pathinfo</PRE></DIV></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2.6.5">require-auth</A></h4><P CLASS=para>This function tells the server that it must be able to authenticate the user before any further processing can take place. If the authentication information has already been sent, this function causes it to be used. If it has not been sent, the user will be prompted for a user name and password which will be returned to your server. The following arguments are used:<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>auth-type=</tt><I CLASS=emphasis>type</I><DD><P CLASS=para>Gives the type of authorization used, usually<tt CLASS=literal>auth-type=basic</tt>. Required.<p><DT CLASS=varlistentry><tt CLASS=literal>realm=</tt><I CLASS=emphasis>name</I><DD><P CLASS=para>Provides a realm name (enclosed in quotes) to the server, so it will have a betteridea of which username and password to send. Required.<p><DT CLASS=varlistentry><tt CLASS=literal>auth-user=</tt><I CLASS=emphasis>users</I><DD><P CLASS=para>Used to specify a user or list of users who areauthorized. The list is enclosed in parentheses and usernames are separatedby <tt CLASS=literal>|</tt> symbols.<p><DT CLASS=varlistentry><tt CLASS=literal>auth-group=</tt><I CLASS=emphasis>groups</I><DD><P CLASS=para>Specifies a group or list of  authorized groups.</DL><P CLASS=para>For example:<P CLASS=para><DIV CLASS=screen><P><PRE>PathCheck fn=require-auth auth-type=realm realm="web"  auth-user=(linda|val|stephen)</PRE></DIV></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2.6.6">unix-uri-clean</A></h4><P CLASS=para>Users may try to break out of your server's document space by inserting extraneous path elements into their server paths.The <tt CLASS=literal>unix-uri-clean</tt> function looks for <tt CLASS=literal> /../</tt>, <tt CLASS=literal>/./</tt>, and <tt CLASS=literal>//</tt>, and denies access if any of them are present. There are no parameters. <P CLASS=para><DIV CLASS=screen><P><PRE>PathCheck fn=unix-uri-clean</PRE></DIV><P CLASS=para>Remember that all PathCheck functions will be applied in order, so if your path info may contain these, you should make sure the <tt CLASS=literal>find-pathinfo</tt> function is listed before the <tt CLASS=literal>unix-uri-clean</tt> function.</DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2.6.7">load-config</A></h4><P CLASS=para>This function tells the server to look forlocal configuration files in document directories. Local configurationfiles use <I CLASS=emphasis>obj.conf</I> configuration directives to apply localizedconfiguration options to specific directories. The followingparameters are used:<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>file=</tt><I CLASS=emphasis>name</I><DD><P CLASS=para>Identifies the name of the file to look for in the directory.<p><DT CLASS=varlistentry><tt CLASS=literal>disable-types=</tt><I CLASS=emphasis>types</I><DD><P CLASS=para>Allows you to disable local configurationfor specific file types.<p><DT CLASS=varlistentry><tt CLASS=literal>basdir=</tt><I CLASS=emphasis>directory</I><DD><P CLASS=para>Gives the directory in which to look for configuration files. Without this parameter, the server looksin the root directory given by the name translation.<p><DT CLASS=varlistentry><tt CLASS=literal>descend=1</tt><DD><P CLASS=para>Tells the server to look in subdirectoriesof the base directories.</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2.6.8">check-acl</A></h4><P CLASS=para>This function tells the server to check a specific access control listfor authorization requirements on the requested object. Access control lists (ACLs) are contained in sections of theACLFile, which is set in <I CLASS=emphasis>magnus.conf</I>. The function isexecuted before any <tt CLASS=literal>require-auth</tt> settings in <tt CLASS=literal>PathCheck</tt>.The following parameters can be used:<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>acl=</tt><I CLASS=emphasis>name</I><DD><P CLASS=para>Gives the name of the ACL to use.<p><DT CLASS=varlistentry><tt CLASS=literal>shexp=</tt><I CLASS=emphasis>expr</I><DD><P CLASS=para>Gives a shell expression for the path that the ACL apply to.<p><DT CLASS=varlistentry><tt CLASS=literal>bong-file=</tt><I CLASS=emphasis>file</I><DD><P CLASS=para>Gives the name of the file to return if access is denied.</DL></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2.7">ObjectType</A></h3><P CLASS=para>The <tt CLASS=literal>ObjectType</tt> directive is used to tell the server how to assign a MIME type, encoding, and/or language to an object. This may be by looking up the extension in the <I CLASS=emphasis>mime.types</I> file or by forcing it directly. Unlike someother directives, multiple <tt CLASS=literal>ObjectType</tt> directives do not override each other, but fortify each other. If one sets the MIME type and another sets the encoding, fine. If, however, one sets the type and another tries to set it again, the second loses rather than the first.<P CLASS=para>In addition, like many servers, the Netscape servers use several "magic" MIME types to cause special treatment to occur. They are called internal server types, but they are the same as magic types.<DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2.7.1">force-type</A></h4><P CLASS=para>This function sets the MIME type by fiat. It may optionally also set the encoding and/or language. <P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>type=</tt><I CLASS=emphasis>type</I><DD><P CLASS=para>Sets the MIME or media type.<p><DT CLASS=varlistentry><tt CLASS=literal>enc=</tt><I CLASS=emphasis>encoding</I><DD><P CLASS=para>Sets the encoding type.<p><DT CLASS=varlistentry><tt CLASS=literal>lang=</tt><I CLASS=emphasis>language</I><DD><P CLASS=para>Sets the language to be used.</DL><P CLASS=para>For example, to make the type <I CLASS=emphasis>text/plain</I> the default for a given object, you would add the following directive after all the other <tt CLASS=literal>ObjectType</tt> directives:<P CLASS=para><DIV CLASS=screen><P><PRE>ObjectType fn=force-type type=text/plain</PRE></DIV></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2.7.2">type-by-exp</A></h4><P CLASS=para>This function tells the server to assign a given type if the translated path matches a given regular expression. As with the <tt CLASS=literal>force-type</tt> function, the server may also set the encoding and/or language.<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>exp=</tt><I CLASS=emphasis>expr</I><DD><P CLASS=para>Gives the regular expression to be matched for files to beassigned the specified type.<p><DT CLASS=varlistentry><tt CLASS=literal>type=</tt><I CLASS=emphasis>type</I><DD><P CLASS=para>Sets the MIME or media type.<p><DT CLASS=varlistentry><tt CLASS=literal>enc=</tt><I CLASS=emphasis>encoding</I><DD><P CLASS=para>Sets the encoding type.<p><DT CLASS=varlistentry><tt CLASS=literal>lang=</tt><I CLASS=emphasis>language</I><DD><P CLASS=para>Sets the language to be used.</DL><P CLASS=para>For example, to tell the server that everything in the directory <I CLASS=emphasis>/scratch-n-sniff/</I> should be assigned the type <I CLASS=emphasis>odor/oif</I>, regardless of extensions, you could use this directive:<P CLASS=para><DIV CLASS=screen><P><PRE>ObjectType fn=type-by-exp type=odor/oif exp=/scratch-n-sniff/*</PRE></DIV></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2.7.3">type-by-extension</A></h4><P CLASS=para>Rather than having to use a special <tt CLASS=literal>ObjectType</tt> directive for every file type, you can set up most of them in a <I CLASS=emphasis>mime.types</I> file in advance and use the <tt CLASS=literal>type-by-extension</tt> function to have the server look the file type up. This lookup is done based on the document's extension, which explains the name of this directive. There are no arguments; you simply use:<P CLASS=para><DIV CLASS=screen><P><PRE>ObjectType fn=type-by-extension</PRE></DIV></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2.7.4">image-switch</A></h4><P CLASS=para>This function allows you to send the client an image of a differenttype, if it exists in the directory, when the client can't accept acertain image type. For example, if a user requests <I CLASS=emphasis>image.gif</I>, andthere is also <I CLASS=emphasis>image.jpg</I> in the same directory, the server will sendthe JPEG instead. There are no parameters for this function.</DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2.8">Service</A></h3><P CLASS=para>The <tt CLASS=literal>Service</tt> directive is where the server finally gets down to business and does something material to respond to a request. Up until now, the server has checked paths, remapped them, checked them again, and picked some MIME types. With the <tt CLASS=literal>Service</tt> directive, it will finally decide what to do with the file it has found. Since an applicable <tt CLASS=literal>Service</tt> directive tells the server how to handle a request, further <tt CLASS=literal>Service</tt> directives are ignored, unless the first uses the <tt CLASS=literal>append-trailer</tt> function.<P CLASS=para>Any <tt CLASS=literal>Service</tt> function can take either (or none) of two constraint arguments. The <tt CLASS=literal>type</tt> argument can take a regular expression to match against the MIME type. If this argument is present and it doesn't match, that <tt CLASS=literal>Service</tt> directive is deemed inapplicable and the next one is tried. Similarly, the <tt CLASS=literal>method</tt> argument, if present, must match therequest method for the directive to apply. The value is GET, HEAD, or POST, or any combination delimited by vertical bars (|) within parentheses. For example, <tt CLASS=literal>(GET|HEAD)</tt> will match GET requests and HEAD requests, but not POST requests.<DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2.8.1">append-trailer</A></h4><P CLASS=para><tt CLASS=literal>append-trailer</tt> is the only Service function that does not actually send data to the client. Instead, it merely tells the server that when it does send data, it should append a fragment of HTML to any HTML file it does send.<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>trailer=</tt><I CLASS=emphasis>html-string</I><DD><P CLASS=para>Gives the HTML formatted string to append. It should be enclosed inquotes if you use spaces.If you want to include the last-modified time for the file, you can include the <tt CLASS=literal>:LASTMOD:</tt> variable in the stringand it will be replaced appropriately.<p><DT CLASS=varlistentry><tt CLASS=literal>timefmt=</tt><I CLASS=emphasis>format</I><DD><P CLASS=para>Specifies the format of the time string; required when you use<tt CLASS=literal>:LASTMOD:</tt>. Takes a strftime format string.</DL><P CLASS=para>For example, to append the string "Copyright &copy;1996" to the end of every file, you would use this directive:<P CLASS=para><DIV CLASS=screen><P><PRE>Service fn=append-trailer type=text/html trailer="Copyright &amp;copy;1996"</PRE></DIV></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2.8.2">imagemap</A></h4><P CLASS=para>This function tells the server to process a request as an imagemap with<tt CLASS=literal>type=magnus-internal/imagemap</tt>:<P CLASS=para><DIV CLASS=screen><P><PRE>Service type=magnus-internal/imagemap fn=imagemap</PRE></DIV></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2.8.3">index-common</A></h4><P CLASS=para>This function generates a fancy directory index. Much of the format is controlled not here, but by the <tt CLASS=literal>cindex-init</tt> function of the <tt CLASS=literal>Init</tt> directive. What is controlled here is whether to build one (that is, whether this function is used) and what header and footerfiles to use, if any. The type given in this directive is<tt CLASS=literal>type=magnus-internal/directory</tt>. You may also usethe following parameters:<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>header=</tt><I CLASS=emphasis>file</I><DD><P CLASS=para>Specifies the filename to be looked for in the requested directorycontaining information to be placed at the top of the directorylisting.<p><DT CLASS=varlistentry><tt CLASS=literal>readme=</tt><I CLASS=emphasis>file</I><DD><P CLASS=para>Specifies the filename to be looked for in the requested directorycontaining information to be placed at the bottom of the directorylisting.</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2.8.4">index-simple</A></h4><P CLASS=para>This function tells the server to produce a simple directory index. This does not include icons, sizes, etc., but only a bulleted list of linked file names. As with <tt CLASS=literal>index-common</tt>, this function uses<tt CLASS=literal>type=magnus_internal/directory</tt>.</DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2.8.5">parse-html</A></h4><P CLASS=para>This function is used to serve server-side include files.</DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2.8.6">query-handler</A></h4><P CLASS=para>Specifies a CGI program to act as a handler for non-CGI GET requests that include a query string. As such, it is only seen as applicable if the request matches those criteria. The program should be given as an absolute path in the <tt CLASS=literal>path</tt> argument. For example, to use <I CLASS=emphasis>/l0/cgi-bin/doc_searcher</I>, you would use this setting:<P CLASS=para><DIV CLASS=screen><P><PRE>Service fn=query-handler path=/l0/cgi-bin/doc_searcher</PRE></DIV><P CLASS=para>This program is executed with the original document path stored in the PATH_INFO CGI variable.</DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2.8.7">send-cgi</A></h4><P CLASS=para>This function tells the server to execute a requested object asa CGI program.For example, an object that runs everything in the server path <I CLASS=emphasis>/cgi-bin/</I> would be:<P CLASS=para><DIV CLASS=screen><P><PRE>&lt;object ppath=/cgi-bin/&gt;Service fn=send-cgi&lt;/object&gt;</PRE></DIV></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2.8.8">send-error</A></h4><P CLASS=para>This function sends a specified file when an error occurs.The absolute path to the file should be given in the <tt CLASS=literal>path</tt> argument.</DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2.8.9">send-file</A></h4><P CLASS=para>This function tells the server to send the file. It is often useful to provide this as a default behavior by adding this directive after all other Service directives:<P CLASS=para><DIV CLASS=screen><P><PRE>Service method(GET|HEAD) fn=send-file</PRE></DIV></DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2.9">Error</A></h3><P CLASS=para>The <tt CLASS=literal>Error</tt> directive is where the server confesses to being unable to complete a request. It can use the same functions as the <tt CLASS=literal>Service</tt> directive, but it is only used when an error has occurred, and it has different constraint arguments, <tt CLASS=literal>reason</tt> and <tt CLASS=literal>code</tt>, which correspond to the textual description of the error and the status code, respectively. You cannot place both <tt CLASS=literal>code</tt> and <tt CLASS=literal>reason</tt> in the same<tt CLASS=literal>Error</tt> directive. There are four sets of values:<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>401, Unauthorized</tt><DD><P CLASS=para>Authorization was required and the user failed to deliver proper information.<p><DT CLASS=varlistentry><tt CLASS=literal>403, Forbidden</tt><DD><P CLASS=para>The server was unable to read a file. <p><DT CLASS=varlistentry><tt CLASS=literal>404, Not Found</tt><DD><P CLASS=para>The document could not be found.<p><DT CLASS=varlistentry><tt CLASS=literal>500, Server Error</tt><DD><P CLASS=para>This could mean anything from a hardware or OS problem to a CGI program that returned bad data.</DL><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2.9.1">send-error</A></h4><P CLASS=para>This function sends a specified file to the user when an error occurs.The absolute path to the file should be given in the <tt CLASS=literal>path</tt> argument.</DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2.9.2">query-handler</A></h4><P CLASS=para>You may want to use a CGI program to customize a response resultingfrom an error. Use the <tt CLASS=literal>query-handler</tt> function to specify aCGI file (with the <tt CLASS=literal>path</tt> parameter) for a given error code.</DIV></DIV><DIV CLASS=sect2><h3 CLASS=sect2><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2.10">AddLog</A></h3><P CLASS=para>The <tt CLASS=literal>AddLog</tt> directive is applied after the server has handled the request and is purely for local bookkeeping. Its functions let you write a normal transaction log and record what user-agent was responsible for the transaction. If you have more than one, all <tt CLASS=literal>AddLog</tt> directivesin an object will be used.<DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2.10.1">common-log</A></h4><P CLASS=para>This function is used to record transaction data in the commonNCSA log format. This is the format used by most log analysis tools.It uses the following parameters:<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>name=</tt><I CLASS=emphasis>logname</I><DD><P CLASS=para>Specifies the name of a log file to use.This must be a logfile name that you initialized with <tt CLASS=literal>Init fn=init-clf name=...</tt>at the top of the <I CLASS=emphasis>obj.conf</I> file. Without this parameter,it logs to the global access log.<p><DT CLASS=varlistentry><tt CLASS=literal>iponly=</tt><I CLASS=emphasis>n</I><DD><P CLASS=para>Tells the server not to perform host-name lookup for logging.Any value for <tt CLASS=literal>iponly</tt> will do. The Server Manager creates<tt CLASS=literal>iponly="1"</tt>.</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2.10.2">flex-log</A></h4><P CLASS=para>This function tells the server to log transaction data in the extendedor flexible logging format. This format is specified in the<tt CLASS=literal>Init</tt> directives with the <tt CLASS=literal>flex-init</tt> function.It uses the same parameters as the <tt CLASS=literal>common-log</tt> function:<P><DL CLASS=variablelist><DT CLASS=varlistentry><tt CLASS=literal>name=</tt><I CLASS=emphasis>logname</I><DD><P CLASS=para>Specifies the name of a log file to use.This must be a logfile name that you initialized with <tt CLASS=literal>Init fn=init-clf name=...</tt>at the top of the <I CLASS=emphasis>obj.conf</I> file. Without this parameter,it logs to the global access log.<p><DT CLASS=varlistentry><tt CLASS=literal>iponly=</tt><I CLASS=emphasis>n</I><DD><P CLASS=para>Tells the server not to perform host-name lookup for logging.Any value for <tt CLASS=literal>iponly</tt> will do. The Server Manager creates<tt CLASS=literal>iponly="1"</tt>.</DL></DIV><DIV CLASS=sect3><h4 CLASS=sect3><A CLASS="TITLE" NAME="WEB-CH-25-SECT-2.10.3">record-useragent</A></h4><P CLASS=para>This function tells the server to write the clientIP address followed by the value of the User-Agent header into a log file. As with the <tt CLASS=literal>common-log</tt> function, the argument <tt CLASS=literal>name</tt> tells the server which log file to write to. If it is omitted, the informationwill be written to the global access log.</DIV></DIV></DIV><DIV CLASS=htmlnav><P><HR align=left width=515><table width=515 border=0 cellpadding=0 cellspacing=0><tr><td width=172 align=left valign=top><A HREF="ch25_01.htm"><IMG SRC="gifs/txtpreva.gif" ALT="Previous" border=0></A></td><td width=171 align=center valign=top><a href="index.htm"><IMG SRC="gifs/txthome.gif" ALT="Home" border=0></a></td><td width=172 align=right valign=top><A HREF="ch26_01.htm"><IMG SRC="gifs/txtnexta.gif" ALT="Next" border=0></A></td></tr><tr><td width=172 align=left valign=top>Basic Server Configuration--magnus.conf</td><td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td><td width=172 align=right valign=top>WebSite Server Configuration</td></tr></table><!-- JavaScript: prev.js -->&nbsp;<!-- JavaScript: next.js --></DIV></BODY></HTML>